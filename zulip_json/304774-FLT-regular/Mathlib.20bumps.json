[
    {
        "content": "<p>I'm working on a bump</p>",
        "id": 419040636,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706708220
    },
    {
        "content": "<p>Thanks! The last two or so I did went smoothly, but I didn't check if there was something I could remove, so it is possible we have things that are already in mathlib.</p>",
        "id": 419041041,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1706708342
    },
    {
        "content": "<p>Pushed</p>",
        "id": 419052409,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706711470
    },
    {
        "content": "<p>FLT irregular will be opening in April and there will be a blue node called FLT_three but the criterion for making it green will be \"it's in mathlib\"</p>",
        "id": 419120789,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706734058
    },
    {
        "content": "<p>I think the best way of taking care of <code>p=3</code> is to do both case 1 and 2 by hand. Case 1 should be really elementary, it is enough to reason mod 9</p>",
        "id": 419124697,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1706735868
    },
    {
        "content": "<p>Does anyone want to start a new mathlib file with this proof?</p>",
        "id": 419124897,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1706735963
    },
    {
        "content": "<p>Isn't this the proof that Ruben did?</p>",
        "id": 419125245,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1706736112
    },
    {
        "content": "<p>I don't think so, I did Euler's</p>",
        "id": 419127744,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706737121
    },
    {
        "content": "<p>Do you have a reference for the proof you have in mind, Riccardo?</p>",
        "id": 419127830,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706737167
    },
    {
        "content": "<p>We have a full proof, written by Ruben.</p>",
        "id": 419127834,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1706737170
    },
    {
        "content": "<p>The point is which proof we want in mathlib</p>",
        "id": 419127858,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1706737187
    },
    {
        "content": "<p>In my opinion a good approach is to prove case 1 by hand, and to follow the general strategy for case 2</p>",
        "id": 419127982,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1706737241
    },
    {
        "content": "<p>The point is that proving that Z[...] is a PID will soon be trivial (in mathlib), and then the full proof shouldn't be hard</p>",
        "id": 419128122,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1706737310
    },
    {
        "content": "<p>This is the same as Ruben's proof, but written using eiseinstein integres</p>",
        "id": 419128218,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1706737341
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/304774-FLT-regular/topic/Mathlib.20bumps/near/419128122\">said</a>:</p>\n<blockquote>\n<p>The point is that proving that Z[...] is a PID will soon be trivial (in mathlib), and then the full proof shouldn't be hard</p>\n</blockquote>\n<p>I guess I'll wait for that :)</p>",
        "id": 419133726,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706739648
    },
    {
        "content": "<p>Started another bump at <a href=\"https://github.com/leanprover-community/flt-regular/compare/bump-2024-02-04\">https://github.com/leanprover-community/flt-regular/compare/bump-2024-02-04</a> but got stuck on a proof in 92. I may take another look later, but also feel free to work on it (but please mention it here)</p>",
        "id": 419713071,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707066135
    },
    {
        "content": "<p>Pushed</p>",
        "id": 419811778,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707130758
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/304774-FLT-regular/topic/Mathlib.20bumps/near/419133726\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/304774-FLT-regular/topic/Mathlib.20bumps/near/419128122\">said</a>:</p>\n<blockquote>\n<p>The point is that proving that Z[...] is a PID will soon be trivial (in mathlib), and then the full proof shouldn't be hard</p>\n</blockquote>\n<p>I guess I'll wait for that :)</p>\n</blockquote>\n<p>I've juste delegated <a href=\"https://github.com/leanprover-community/mathlib4/pull/9084\">#9084</a> (with a couple of minor comments). One it lands, the fact that <code>‚Ñ§[Œ∂‚ÇÉ]</code> and <code>‚Ñ§[Œ∂‚ÇÖ]</code> are PID will only need some glue to connect the discriminant with the absolute discriminant, it is done <a href=\"https://github.com/leanprover-community/flt-regular/blob/FLT5/FltRegular/FLT5.lean\">here</a>.</p>",
        "id": 420453605,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707397739
    },
    {
        "content": "<p>It's merged.</p>",
        "id": 420648671,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707483951
    },
    {
        "content": "<p>If someone want to PR the connection between discriminant and absolute discriminant please go ahead, I don't have time for it right now.</p>",
        "id": 420648780,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707483980
    },
    {
        "content": "<p>Another week, another bump</p>",
        "id": 421024045,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707742554
    },
    {
        "content": "<p>I was planning to look at the connection, but only got as far as making the flt5 branch compile again at <a href=\"https://github.com/leanprover-community/flt-regular/pull/new/FLT5.1\">https://github.com/leanprover-community/flt-regular/pull/new/FLT5.1</a></p>",
        "id": 421082948,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707757252
    },
    {
        "content": "<p>I've added the file <code>FLT5.lean</code> to master.</p>",
        "id": 421084903,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707757855
    },
    {
        "content": "<p>I think we have a reasonable plan for FLT3:</p>\n<ul>\n<li>PR <code>absdiscr_odd_prime</code> various generalization to prime powers (maybe understanding why we need <code>synthInstance.maxHeartbeats 80000</code>. This should be relately quick.</li>\n<li>PR the fact that cyclotomic fields are totally complex</li>\n<li>Deduce that the rings of integers are PID if p = 3 or 5 (immediate)</li>\n<li>Prove case I by hand (reasoning modulo 9)</li>\n</ul>\n<p>Now, proving FLT3 shouldn't be very hard, see for example <a href=\"https://link.springer.com/book/10.1007/978-1-4471-2131-2\">here</a> page 84</p>",
        "id": 421087663,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707758613
    },
    {
        "content": "<p><code> [Meta.synthInstance] [3.679014s] ‚úÖ MonoidHomClass (‚Ü•(ùìû K) ‚Üí+* K) (‚Ü•(ùìû K)) K </code></p>\n<p>Wasn't Anne's work supposed to fix that?</p>",
        "id": 421133597,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707773671
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ?</p>",
        "id": 421139819,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707776231
    },
    {
        "content": "<p>No time to come up with one right now, though it seems <code>map_pow</code> was the biggest offender</p>",
        "id": 421141609,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707777086
    },
    {
        "content": "<p>I only asked because I didn't even know how to get the mathcal O notation</p>",
        "id": 421141724,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707777128
    },
    {
        "content": "<p>Oh, <code>NumberField</code></p>",
        "id": 421142008,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707777274
    },
    {
        "content": "<p>Maximal working example is <a href=\"https://github.com/leanprover-community/flt-regular/commit/b1552ac459920efef0c4aa4329c20282e022af51\">https://github.com/leanprover-community/flt-regular/commit/b1552ac459920efef0c4aa4329c20282e022af51</a></p>",
        "id": 421142054,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707777297
    },
    {
        "content": "<p>I think we still have troubles with subtypes. The bump came with a few new <code>set_option max...</code> :(</p>",
        "id": 421144097,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707778191
    },
    {
        "content": "<p>I am PRing <code>absdiscr_odd_prime</code></p>",
        "id": 421241808,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707830264
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/10492\">#10492</a></p>",
        "id": 421271307,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707839261
    },
    {
        "content": "<p>And <a href=\"https://github.com/leanprover-community/mathlib4/pull/10502\">#10502</a> for the fact that cyclotomic fields are totally complex.</p>",
        "id": 421285166,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707843114
    },
    {
        "content": "<p>Mmm, maybe we can prove that any number field with a primitive root of unity (for <code>n</code> bigger than <code>2</code>) is totally complex. The proof is literally the same.</p>",
        "id": 421285694,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707843272
    },
    {
        "content": "<p>I've added in <a href=\"https://github.com/leanprover-community/mathlib4/pull/10540\">#10540</a> the fact that <code>ùìû ‚Ñö(Œ∂‚ÇÉ)</code> and <code>ùìû ‚Ñö(Œ∂‚ÇÖ)</code> are PID.</p>",
        "id": 421442956,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707916701
    },
    {
        "content": "<p>Doing <code>p=7</code> would be a nice experiment to test the number field API.</p>",
        "id": 421443127,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707916767
    },
    {
        "content": "<p>Oh great!</p>",
        "id": 421443129,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1707916767
    },
    {
        "content": "<p>Actually we can really try <code>7</code>: the Minkowski bound is 4, so we only need to check ideals that contain <code>2</code> or <code>3</code> (this is in mathlib).</p>\n<p>Note that we have Dedekind Kummer, so:</p>\n<ul>\n<li>over <code>2</code> everything is rather easy, we have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"normal\">Œ¶</mi><mn>7</mn></msub><mo>=</mo><mo stretchy=\"false\">(</mo><msup><mi>x</mi><mn>3</mn></msup><mo>+</mo><mi>x</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><msup><mi>x</mi><mn>3</mn></msup><mo>+</mo><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\Phi_7 = (x^3+x+1)(x^3+x^2+1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\">Œ¶</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">7</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>. Moreover <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mo>=</mo><mo stretchy=\"false\">(</mo><msubsup><mi>Œ∂</mi><mn>7</mn><mn>3</mn></msubsup><mo>+</mo><msub><mi>Œ∂</mi><mn>7</mn></msub><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mn>2</mn><msubsup><mi>Œ∂</mi><mn>7</mn><mn>4</mn></msubsup><mo>+</mo><msub><mi>Œ∂</mi><mn>7</mn></msub><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">2 = (\\zeta_7^3 + \\zeta_7 + 1)(2\\zeta_7^4+\\zeta_7 + 1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">Œ∂</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-2.4519em;margin-left:-0.0738em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">7</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2481em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">Œ∂</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0738em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">7</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">Œ∂</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-2.4519em;margin-left:-0.0738em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">7</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2481em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">Œ∂</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0738em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">7</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mo>=</mo><mo stretchy=\"false\">(</mo><msubsup><mi>Œ∂</mi><mn>7</mn><mn>3</mn></msubsup><mo>+</mo><msubsup><mi>Œ∂</mi><mn>7</mn><mn>2</mn></msubsup><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mn>2</mn><msub><mi>Œ∂</mi><mn>7</mn></msub><mo>+</mo><msubsup><mi>Œ∂</mi><mn>7</mn><mn>2</mn></msubsup><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">2 = (\\zeta_7^3+\\zeta_7^2+1)(2\\zeta_7+\\zeta_7^2+1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">Œ∂</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-2.4519em;margin-left:-0.0738em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">7</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2481em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0622em;vertical-align:-0.2481em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">Œ∂</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-2.4519em;margin-left:-0.0738em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">7</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2481em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">Œ∂</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0738em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">7</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0622em;vertical-align:-0.2481em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">Œ∂</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-2.4519em;margin-left:-0.0738em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">7</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2481em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> so there nothing else to do.</li>\n<li>over <code>3</code> things can be a little more annoying, we need to prove that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"normal\">Œ¶</mi><mn>7</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\Phi_7</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\">Œ¶</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">7</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is irreducible (maybe it's time to factor cyclotomic polynomials over finite fields in general).</li>\n</ul>",
        "id": 421457302,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707921235
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/304774-FLT-regular/topic/Mathlib.20bumps/near/421133597\">said</a>:</p>\n<blockquote>\n<p><code> [Meta.synthInstance] [3.679014s] ‚úÖ MonoidHomClass (‚Ü•(ùìû K) ‚Üí+* K) (‚Ü•(ùìû K)) K </code></p>\n<p>Wasn't Anne's work supposed to fix that?</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/10131\">#10131</a> just landed -- does this help?</p>",
        "id": 421556323,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707956016
    },
    {
        "content": "<p>Doesn't appear to. What will help is Yury's suggestion to split off the OrderHom classes from the algebra heirarchy Hom classes. What's happening is that typeclass inference tries to figure out how it's going to find this MonoidHomClass, and so it has a look at what's available, and it finds this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"o\">[]</span> <span class=\"n\">new</span> <span class=\"n\">goal</span> <span class=\"n\">MonoidHomClass</span> <span class=\"o\">(</span><span class=\"bp\">‚Ü•</span><span class=\"o\">(</span><span class=\"bp\">ùìû</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí+*</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"n\">_tc.0</span> <span class=\"n\">_tc.1</span> <span class=\"bp\">‚ñº</span>\n      <span class=\"o\">[</span><span class=\"n\">instances</span><span class=\"o\">]</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">MulRingSeminormClass.toMonoidHomClass</span><span class=\"o\">,</span> <span class=\"n\">MulEquivClass.instMonoidHomClass</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">MonoidWithZeroHomClass.toMonoidHomClass</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">RingHomClass.toMonoidHomClass</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">MulSemiringActionHomClass.toMonoidHomClass</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">OrderMonoidHomClass.toMonoidHomClass</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">MulCharClass.toMonoidHomClass</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">ContinuousMonoidHomClass.toMonoidHomClass</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>And now, because the algorithm has the possibly dubious property that it tries the most recent instances first, it now spends a stupid amount of time trying and failing to find a topology or an order structure  on O_K, despite the fact that no order or topology is mentioned anywhere in the question :-( This seems to basically be a fundamental difference between the way a human would go about solving this problem, and the way a computer attempts to do it. </p>\n<p>What we want it to find is <code>RingHomClass.toMonoidHomClass</code> so you as a workaround while we're waiting for Yury's refactor, you can do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NumberField</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">NumberField</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span> <span class=\"mi\">10000</span><span class=\"o\">]</span> <span class=\"n\">RingHomClass.toMonoidHomClass</span> <span class=\"c1\">-- go this way, typeclass inference system!</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">MonoidHomClass</span> <span class=\"o\">(</span><span class=\"bp\">‚Ü•</span><span class=\"o\">(</span><span class=\"bp\">ùìû</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí+*</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">‚Ü•</span><span class=\"o\">(</span><span class=\"bp\">ùìû</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"n\">K</span> <span class=\"c1\">-- now fast</span>\n</code></pre></div>",
        "id": 421721683,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708023905
    },
    {
        "content": "<p>Oh I've just seen that <a href=\"https://github.com/leanprover-community/mathlib4/pull/10544\">#10544</a> is merged -- does this help? I'm not at lean right now.</p>",
        "id": 421738852,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708030459
    },
    {
        "content": "<p>I can't easily compare apples to apples, but it seems like this is what it's now:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">340808</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">MonoidHomClass</span> <span class=\"o\">(</span><span class=\"bp\">‚Ü•</span><span class=\"o\">(</span><span class=\"bp\">ùìû</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí+*</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">‚Ü•</span><span class=\"o\">(</span><span class=\"bp\">ùìû</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"n\">K</span>\n</code></pre></div>\n<p>so something must have helped</p>",
        "id": 421751184,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1708035833
    },
    {
        "content": "<p>This is not fixed for me -- I suspect you're not importing mathlib (because nobody ever made a mwe). Here's mine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NumberField</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">NumberField</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"mi\">80000</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.profiler</span> <span class=\"n\">true</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">MonoidHomClass</span> <span class=\"o\">(</span><span class=\"bp\">‚Ü•</span><span class=\"o\">(</span><span class=\"bp\">ùìû</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí+*</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">‚Ü•</span><span class=\"o\">(</span><span class=\"bp\">ùìû</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"n\">K</span>\n</code></pre></div>\n<p>This still needs a heartbeat bump on master. The trace is</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>[Elab.command] [2.109380s] #synth MonoidHomClass (‚Ü•(ùìû K) ‚Üí+* K) (‚Ü•(ùìû K)) K ‚ñº\n  [step] [0.028240s] expected type: &lt;not-available&gt;, term\n      MonoidHomClass (‚Ü•(ùìû K) ‚Üí+* K) (‚Ü•(ùìû K)) K ‚ñ∂\n  [Meta.synthInstance] [2.074304s] ‚úÖ MonoidHomClass (‚Ü•(ùìû K) ‚Üí+* K) (‚Ü•(ùìû K)) K ‚ñº\n    [] [0.013681s] ‚úÖ apply @Subalgebra.toRing to Ring ‚Ü•(ùìû K)\n    [] [0.012201s] ‚ùå apply @Subalgebra.normedCommRing to NormedCommRing ‚Ü•(ùìû K) ‚ñ∂\n    [] [0.023935s] ‚ùå apply @IntermediateField.toField to Field ‚Ü•(ùìû K) ‚ñ∂\n    [] [0.033890s] ‚úÖ apply @IsDedekindDomain.toIsDomain to IsDomain ‚Ü•(ùìû K) ‚ñ∂\n    [] [0.018440s] ‚úÖ apply @Subalgebra.isDomain to IsDomain ‚Ü•(ùìû K) ‚ñ∂\n    [] [0.108726s] ‚ùå apply @Field.isDomain to IsDomain ‚Ü•(ùìû K) ‚ñ∂\n    [] [0.093777s] ‚ùå apply @DivisionRing.isDomain to IsDomain ‚Ü•(ùìû K) ‚ñ∂\n    [] [0.050767s] ‚ùå apply @LinearOrderedRing.isDomain to IsDomain ‚Ü•(ùìû K) ‚ñ∂\n    [] [0.251847s] ‚úÖ apply @SubringClass.instIsDomainSubtypeMemInstMembershipToSemiringToRing to IsDomain ‚Ü•(ùìû K) ‚ñ∂\n    [] [0.142327s] ‚ùå apply EuclideanDomain.instIsDomainToSemiringToCommSemiringToCommRing to IsDomain ‚Ü•(ùìû K) ‚ñ∂\n    [] [0.020983s] ‚ùå apply Field.henselian to HenselianLocalRing ‚Ü•(ùìû K) ‚ñ∂\n    [isDefEq] [0.010492s] ‚úÖ ?m.11383 =?= Subalgebra.isDomain (ùìû K) ‚ñ∂\n    [] [0.022462s] ‚ùå apply ValuationRing.of_field to ValuationRing ‚Ü•(ùìû K) ‚ñ∂\n    [] [0.018256s] ‚ùå apply ValuationRing.of_field to ValuationRing ‚Ü•(ùìû K) ‚ñ∂\n    [] [0.018425s] ‚ùå apply ValuationRing.of_field to ValuationRing ‚Ü•(ùìû K) ‚ñ∂\n    [] [0.051782s] ‚ùå apply Field.instLocalRingToSemiringToDivisionSemiringToSemifield to LocalRing ‚Ü•(ùìû K) ‚ñ∂\n    [] [0.032084s] ‚ùå apply @EuclideanDomain.to_principal_ideal_domain to IsPrincipalIdealRing ‚Ü•(ùìû K) ‚ñ∂\n    [] [0.020320s] ‚ùå apply DivisionRing.isPrincipalIdealRing to IsPrincipalIdealRing ‚Ü•(ùìû K) ‚ñ∂\n    [] [0.069415s] ‚úÖ apply @SubringClass.instIsDomainSubtypeMemInstMembershipToSemiringToRing to IsDomain ‚Ü•(ùìû K) ‚ñ∂\n    [] [0.012329s] ‚ùå apply EuclideanDomain.instIsDomainToSemiringToCommSemiringToCommRing to IsDomain ‚Ü•(ùìû K) ‚ñ∂\n    [] [0.016732s] ‚úÖ apply @IsDedekindDomain.toIsDomain to IsDomain ‚Ü•(ùìû K) ‚ñ∂\n    [] [0.010505s] ‚ùå apply @DivisionRing.isDomain to IsDomain ‚Ü•(ùìû K) ‚ñ∂\n    [] [0.069110s] ‚úÖ apply @SubringClass.instIsDomainSubtypeMemInstMembershipToSemiringToRing to IsDomain ‚Ü•(ùìû K) ‚ñ∂\n    [] [0.018049s] ‚ùå apply EuclideanDomain.instIsDomainToSemiringToCommSemiringToCommRing to IsDomain ‚Ü•(ùìû K) ‚ñ∂\n    [] [0.016436s] ‚úÖ apply @Subalgebra.isDomain to IsDomain ‚Ü•(ùìû K) ‚ñ∂\n    [] [0.013637s] ‚úÖ apply @IsDedekindDomain.toIsDomain to IsDomain ‚Ü•(ùìû K) ‚ñ∂\n    [] [0.011247s] ‚ùå apply @Field.isDomain to IsDomain ‚Ü•(ùìû K) ‚ñ∂\n    [] [0.010168s] ‚ùå apply EuclideanDomain.instIsDomainToSemiringToCommSemiringToCommRing to IsDomain ‚Ü•(ùìû K) ‚ñ∂\n    [] [0.027972s] ‚úÖ apply @IsDedekindDomain.toIsDomain to IsDomain ‚Ü•(ùìû K) ‚ñ∂\n    [] [0.011063s] ‚ùå apply @LinearOrderedRing.isDomain to IsDomain ‚Ü•(ùìû K) ‚ñ∂\n    [] [0.059016s] ‚úÖ apply @SubringClass.instIsDomainSubtypeMemInstMembershipToSemiringToRing to IsDomain ‚Ü•(ùìû K) ‚ñ∂\n    [] [0.018312s] ‚úÖ apply @IsDedekindDomain.toIsDomain to IsDomain ‚Ü•(ùìû K) ‚ñ∂\n    [] [0.061880s] ‚úÖ apply @SubringClass.instIsDomainSubtypeMemInstMembershipToSemiringToRing to IsDomain ‚Ü•(ùìû K) ‚ñ∂\n</code></pre></div>\n<p>so it's just a shedload of things taking 0.05 seconds and it all adds up. When you dig further in, the trace is just full of things like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">122424</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">CommRing.toRing</span> <span class=\"bp\">=?=</span> <span class=\"n\">Function.Injective.ring</span> <span class=\"n\">Subtype.val</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>:-( I'll start a new thread in <a class=\"stream\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4\">#mathlib4</a></p>",
        "id": 421852278,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708087926
    },
    {
        "content": "<p>Oh yeah, the bad case was importing Mathlib. Sorry for the lazy test</p>",
        "id": 421853308,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1708088381
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/304774-FLT-regular/topic/Mathlib.20bumps/near/421087663\">said</a>:</p>\n<blockquote>\n<p>I think we have a reasonable plan for FLT3:</p>\n<ul>\n<li><del>PR <code>absdiscr_odd_prime</code> various generalization to prime powers (maybe understanding why we need <code>synthInstance.maxHeartbeats 80000</code>. This should be relately quick.</del> Now in mathlib.</li>\n<li>PR the fact that cyclotomic fields are totally complex <a href=\"https://github.com/leanprover-community/mathlib4/pull/10502\">#10502</a></li>\n<li>Deduce that the rings of integers are PID if p = 3 or 5 (immediate) <a href=\"https://github.com/leanprover-community/mathlib4/pull/10683\">#10683</a></li>\n<li>Prove case I by hand (reasoning modulo 9) <a href=\"https://github.com/leanprover-community/mathlib4/pull/10698\">#10698</a></li>\n</ul>\n<p>Now, proving FLT3 shouldn't be very hard, see for example <a href=\"https://link.springer.com/book/10.1007/978-1-4471-2131-2\">here</a> page 84</p>\n</blockquote>\n<p>I've proved case 1 in <a href=\"https://github.com/leanprover-community/mathlib4/pull/10698\">#10698</a>. Now all the prerequisites are PRed, we can think about a serious plan to done FLT3 once and for all.</p>",
        "id": 422118509,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1708281060
    },
    {
        "content": "<p>I guess the next nontrivial step is to find the 6 units of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">[</mo><msub><mi>Œ∂</mi><mn>3</mn></msub><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}[\\zeta_3]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">Œ∂</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0738em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span>.</p>",
        "id": 422121397,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1708283531
    },
    {
        "content": "<p>At some point we used something like this right? I remember we had an argument that used the totient function</p>",
        "id": 422121629,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1708283742
    },
    {
        "content": "<p>To compute the units? I have no idea</p>",
        "id": 422121682,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1708283764
    },
    {
        "content": "<p>We had a result that says the only units in these cyclotomic fields was +- the zeta_3</p>",
        "id": 422121709,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1708283798
    },
    {
        "content": "<p>Ah, nice!</p>",
        "id": 422121721,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1708283808
    },
    {
        "content": "<p>Anyway using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=NumberField.isUnit_iff_norm#doc\">docs#NumberField.isUnit_iff_norm</a> it shouldn't be too hard.</p>",
        "id": 422121748,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1708283841
    },
    {
        "content": "<p>This is what I had in mind : <a href=\"https://cbirkbeck.github.io/FltRegulartest/doc//FltRegular/NumberTheory/Cyclotomic/UnitLemmas.html#roots_of_unity_in_cyclo\">https://cbirkbeck.github.io/FltRegulartest/doc//FltRegular/NumberTheory/Cyclotomic/UnitLemmas.html#roots_of_unity_in_cyclo</a></p>",
        "id": 422121996,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1708284069
    },
    {
        "content": "<p>OK, good. This seems something we can put in mathlib in full generality.</p>",
        "id": 422122137,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1708284228
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/10710\">#10710</a> is a polished version of what we have in the project. We will need some glue to connect this with units, but it should be straightforward.</p>",
        "id": 422236195,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1708350428
    },
    {
        "content": "<p>I am bumping mathlib, and because of <a href=\"https://github.com/leanprover-community/mathlib4/pull/10640\">#10640</a> there a couple of changes. Nothing serious, but does anyone have a clear and definite answer about the recommended style for <code>suffices</code>? Is the following</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">suffices</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>what we are supposed to write?</p>",
        "id": 422648069,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1708530561
    },
    {
        "content": "<p>I think that it is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">suffices</span> <span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>At least, I see syntax like this in <a href=\"https://github.com/leanprover-community/mathlib4/pull/10640\">#10640</a>.</p>",
        "id": 422649403,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708530885
    },
    {
        "content": "<p>Yes, you syntax also works. But I have another question: writing a proof like this, I don't know how to make <code>this</code> visible in the infoview (when I am proving that it is enough to prove the main goal assuming <code>this</code>). Note that if you already have the full proof this seems ok (the infoview is working), but not when you are writing it. I mean that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">suffices</span> <span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"kd\">by</span>\n    <span class=\"c1\">--the cursor is here, and there is no `this` in the infoview</span>\n</code></pre></div>",
        "id": 422650062,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1708531054
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">suffices</span> <span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"kd\">by</span>\n    <span class=\"bp\">¬∑</span>  <span class=\"c1\">--putting the cursor here makes the infoview working</span>\n</code></pre></div>",
        "id": 422650232,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1708531091
    },
    {
        "content": "<p>That is annoying.  I wonder whether there is a missing <code>focus</code> missing in the syntax somewhere...</p>",
        "id": 422651157,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708531317
    },
    {
        "content": "<p>If you add</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"suffices \"</span> <span class=\"n\">d</span><span class=\"o\">:</span><span class=\"n\">sufficesDecl</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">refine_lift</span> <span class=\"k\">suffices</span> <span class=\"bp\">$</span><span class=\"n\">d</span><span class=\"bp\">;</span> <span class=\"n\">focus</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>\n<p><del>before your example, you get the behaviour that you expect, right?</del></p>",
        "id": 422651637,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708531431
    },
    {
        "content": "<p>I get an error about <code>focus</code>.</p>",
        "id": 422651910,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1708531501
    },
    {
        "content": "<p>Anyway if someone else confirms that I am not doing something completely stupid I can just ask in general</p>",
        "id": 422651993,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1708531526
    },
    {
        "content": "<p><del>Is it because you have no imports?</del></p>",
        "id": 422652134,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708531562
    },
    {
        "content": "<p>I have imported a pretty deep file in mathlib just to be in a real life scenario, but no <code>import Mathlib</code> (that in practice ignores <a href=\"https://github.com/leanprover-community/mathlib4/pull/10640\">#10640</a>)</p>",
        "id": 422652534,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1708531646
    },
    {
        "content": "<p>Ok, I think that I was seeing different things, since I have the habit of placing an underscore to get better messages:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">suffices</span> <span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"kd\">by</span>\n    <span class=\"n\">_</span>\n</code></pre></div>\n<p>if you position your cursor before the <code>_</code> you should see <code>this</code>, right?</p>",
        "id": 422653142,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708531775
    },
    {
        "content": "<p>Yes, with the <code>_</code> it works</p>",
        "id": 422653601,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1708531879
    },
    {
        "content": "<p>Ok, in any case, I agree that it is annoying behaviour!</p>",
        "id": 422653889,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708531931
    },
    {
        "content": "<p>Btw, it seems to work from the second line of the proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">suffices</span> <span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"kd\">by</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">this</span>\n</code></pre></div>",
        "id": 422654354,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708532035
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/304774-FLT-regular/topic/Mathlib.20bumps/near/422650062\">said</a>:</p>\n<blockquote>\n<p>Note that if you already have the full proof this seems ok (the infoview is working), but not when you are writing it.</p>\n</blockquote>\n<p>I guess that my last comment was implied by ^ comment of yours.</p>",
        "id": 422655255,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708532233
    },
    {
        "content": "<p>I tend to write <code>done</code> there</p>",
        "id": 422655382,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1708532270
    },
    {
        "content": "<p>I fear that this is another instance of \"Lean cannot give good error messages, since its syntax is too extensible\".</p>",
        "id": 422655779,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708532360
    },
    {
        "content": "<p>To be honest I don't care that much about good error messages, but what is a convenient workflow to write a proof using <code>suffices</code>?</p>",
        "id": 422658278,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1708532981
    },
    {
        "content": "<p>I mean, I would like to see <code>this</code> in the infoview when writing the proof.</p>",
        "id": 422658600,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1708533060
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/304774-FLT-regular/topic/Mathlib.20bumps/near/422655382\">said</a>:</p>\n<blockquote>\n<p>I tend to write <code>done</code> there</p>\n</blockquote>\n<p>Do you mean instead of the <code>_</code>?</p>",
        "id": 422659364,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1708533256
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/304774-FLT-regular/topic/Mathlib.20bumps/near/422659364\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/304774-FLT-regular/topic/Mathlib.20bumps/near/422655382\">said</a>:</p>\n<blockquote>\n<p>I tend to write <code>done</code> there</p>\n</blockquote>\n<p>Do you mean instead of the <code>_</code>?</p>\n</blockquote>\n<p>Yeah</p>",
        "id": 422660263,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1708533486
    },
    {
        "content": "<p>Should we should restore the old <code>suffices</code> syntax?</p>",
        "id": 422673713,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1708537562
    },
    {
        "content": "<p>Please <em>don't</em> bump mathlib in the next 10 days. It is at the same version of the lftcm2024 repository and I would like to keep it like that during the conference.</p>",
        "id": 427653321,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1710841508
    },
    {
        "content": "<p>The blueprint is broken at the moment, but I have a fix coming.</p>",
        "id": 427654708,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1710841996
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 427656360,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1710842558
    },
    {
        "content": "<p>Alright it's working again :)</p>",
        "id": 427757023,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1710863818
    },
    {
        "content": "<p>I wanted to bump mathlib to the new Lean version but I get</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>lake<span class=\"w\"> </span>update\n\nmathlib:<span class=\"w\"> </span>updating<span class=\"w\"> </span>repository<span class=\"w\"> </span><span class=\"s1\">'./.lake/packages/mathlib'</span><span class=\"w\"> </span>to<span class=\"w\"> </span>revision<span class=\"w\"> </span><span class=\"s1\">'4e159e0ef38e6e7894342429440ec9b4f5011bfd'</span>\nstd:<span class=\"w\"> </span>updating<span class=\"w\"> </span>repository<span class=\"w\"> </span><span class=\"s1\">'./.lake/packages/std'</span><span class=\"w\"> </span>to<span class=\"w\"> </span>revision<span class=\"w\"> </span><span class=\"s1\">'3025cb124492b423070f20cf0a70636f757d117f'</span>\naesop:<span class=\"w\"> </span>updating<span class=\"w\"> </span>repository<span class=\"w\"> </span><span class=\"s1\">'./.lake/packages/aesop'</span><span class=\"w\"> </span>to<span class=\"w\"> </span>revision<span class=\"w\"> </span><span class=\"s1\">'0a21a48c286c4a4703c0be6ad2045f601f31b1d0'</span>\nproofwidgets:<span class=\"w\"> </span>updating<span class=\"w\"> </span>repository<span class=\"w\"> </span><span class=\"s1\">'./.lake/packages/proofwidgets'</span><span class=\"w\"> </span>to<span class=\"w\"> </span>revision<span class=\"w\"> </span><span class=\"s1\">'fe1eff53bd0838c657aa6126fe4dd75ad9939d9a'</span>\nCli:<span class=\"w\"> </span>updating<span class=\"w\"> </span>repository<span class=\"w\"> </span><span class=\"s1\">'./.lake/packages/Cli'</span><span class=\"w\"> </span>to<span class=\"w\"> </span>revision<span class=\"w\"> </span><span class=\"s1\">'a11566029bd9ec4f68a65394e8c3ff1af74c1a29'</span>\nimportGraph:<span class=\"w\"> </span>updating<span class=\"w\"> </span>repository<span class=\"w\"> </span><span class=\"s1\">'./.lake/packages/importGraph'</span><span class=\"w\"> </span>to<span class=\"w\"> </span>revision<span class=\"w\"> </span><span class=\"s1\">'188eb34fcf1125e89d651ad462d02598219718ca'</span>\nwarning:<span class=\"w\"> </span>Qq:<span class=\"w\"> </span>ignoring<span class=\"w\"> </span>missing<span class=\"w\"> </span>dependency<span class=\"w\"> </span>manifest<span class=\"w\"> </span><span class=\"s1\">'./.lake/packages/Qq/lake-manifest.json'</span>\nerror:<span class=\"w\"> </span>./.lake/packages/proofwidgets/lakefile.lean:35:4:<span class=\"w\"> </span>error:<span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span>expected<span class=\"w\"> </span>at\n<span class=\"w\">  </span>FetchM\nterm<span class=\"w\"> </span>has<span class=\"w\"> </span><span class=\"nb\">type</span>\n<span class=\"w\">  </span>?m.2162\nerror:<span class=\"w\"> </span>./.lake/packages/proofwidgets/lakefile.lean:70:4:<span class=\"w\"> </span>error:<span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span>expected<span class=\"w\"> </span>at\n<span class=\"w\">  </span>FetchM\nterm<span class=\"w\"> </span>has<span class=\"w\"> </span><span class=\"nb\">type</span>\n<span class=\"w\">  </span>?m.2226\nwarning:<span class=\"w\"> </span>./.lake/packages/proofwidgets/lakefile.lean:82:7:<span class=\"w\"> </span>warning:<span class=\"w\"> </span>declaration<span class=\"w\"> </span>uses<span class=\"w\"> </span><span class=\"s1\">'sorry'</span>\nwarning:<span class=\"w\"> </span>./.lake/packages/proofwidgets/lakefile.lean:85:7:<span class=\"w\"> </span>warning:<span class=\"w\"> </span>declaration<span class=\"w\"> </span>uses<span class=\"w\"> </span><span class=\"s1\">'sorry'</span>\nerror:<span class=\"w\"> </span>./.lake/packages/proofwidgets/lakefile.lean:<span class=\"w\"> </span>package<span class=\"w\"> </span>configuration<span class=\"w\"> </span>has<span class=\"w\"> </span>errors\n</code></pre></div>",
        "id": 436720458,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1714663798
    },
    {
        "content": "<p>Can someone try to do the same to check if the fault of my installation?</p>",
        "id": 436720566,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1714663817
    },
    {
        "content": "<p><span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 436720805,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1714663894
    },
    {
        "content": "<p>I got the same error</p>",
        "id": 436721048,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1714663959
    },
    {
        "content": "<p>OK, posting in <a class=\"stream\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general\">#general</a></p>",
        "id": 436721178,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1714663998
    },
    {
        "content": "<p>Are you sure you have the same toolchain in your project and in mathlib?</p>",
        "id": 436721683,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714664154
    },
    {
        "content": "<p>I got past this, but it doesn't seem like doc-gen is on 4.8 yet</p>",
        "id": 436722383,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1714664352
    },
    {
        "content": "<p>The project is currently on <code>leanprover/lean4:v4.7.0</code> with a working mathlib (commit <code>e9bc16347b34a91a7498edb615179b5788bf1ed4</code>). I just wanted to bump mathlib, via <code>lake update</code>, and I got that error.</p>",
        "id": 436723241,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1714664625
    },
    {
        "content": "<p>Yeah, but mathlib moved to 4.8. I'll push initial fixes in a bit</p>",
        "id": 436723849,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1714664799
    },
    {
        "content": "<p>Yes, that was my point, to update it. I've always used <code>lake update</code> IIRC</p>",
        "id": 436723933,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1714664829
    },
    {
        "content": "<p>I had to manually change it to 4.8.0-rc1 but still not working :(</p>",
        "id": 436724326,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1714664947
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/flt-regular/pull/new/v4.8.0\">https://github.com/leanprover-community/flt-regular/pull/new/v4.8.0</a></p>",
        "id": 436727076,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1714665681
    },
    {
        "content": "<p>Not finished yet, but I need to step out for a few hours, so feel free to continue</p>",
        "id": 436727125,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1714665698
    },
    {
        "content": "<p>I will not have time to work on this until tomorrow, but I can do it. Especially if the weird problem with <code>lake update</code> is solved.</p>",
        "id": 436736751,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1714668851
    },
    {
        "content": "<p>I manually updated the manifest, so the update issue no longer gets in the way</p>",
        "id": 436742469,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1714670869
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/flt-regular/pull/103\">https://github.com/leanprover-community/flt-regular/pull/103</a> should build now, but I don't have enough battery to to another full build, so it would be nice if someone could verify</p>",
        "id": 436767731,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1714680065
    },
    {
        "content": "<p>There is now an error building documentation, I guess something it's not updated to 4.8</p>",
        "id": 436860918,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1714733985
    },
    {
        "content": "<p>Oh yeah, I threw out the doc-gen dependency because I didn't find a compatible version.</p>\n<p>... I wonder if the mathlib docs are working</p>",
        "id": 436861150,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1714734063
    },
    {
        "content": "<p>RingOfIntegers landed, so I guess we need another bump</p>",
        "id": 436915147,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1714752499
    },
    {
        "content": "<p>I just started working on it, but I am not able to download mathlib cache</p>",
        "id": 436915541,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1714752629
    },
    {
        "content": "<p>I only get half of it</p>",
        "id": 436915580,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1714752643
    },
    {
        "content": "<p><a href=\"#narrow/stream/287929-mathlib4/topic/cache.20not.20working.20after.20bump.20to.20.20v4.2E8.2E0-rc1v.3F/near/436932667\">Fixed</a></p>",
        "id": 436936686,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1714760611
    },
    {
        "content": "<p>I've started the bump in the branch <code>bumpRingOfInt</code>. It's a bit annoying but nothing really problematic (there is probably a <a href=\"https://github.com/leanprover-community/mathlib4/pull/12386#discussion_r1589679879\"><code>norm_cast</code> attribute</a> missing).</p>",
        "id": 436955732,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1714768874
    },
    {
        "content": "<p>I have to stop now, and I will not have time tomorrow. If someone wants to work on this, the next file is <code>FltRegular/NumberTheory/KummersLemma/Field.lean</code> that has quite a lot of errors.</p>",
        "id": 436955794,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1714768917
    },
    {
        "content": "<p>Note that I have removed</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CharZero</span> <span class=\"o\">(</span><span class=\"bp\">ùìû</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">SubsemiringClass.instCharZero</span> <span class=\"o\">(</span><span class=\"bp\">ùìû</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but now <code>inferInstance</code> works.</p>",
        "id": 436955905,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1714768957
    },
    {
        "content": "<p>Same here, I just pushed a note where KummersLemma.Field starts to go wrong</p>",
        "id": 436960020,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1714771020
    },
    {
        "content": "<p>I've made some progress, the next file is <code>Hilbert92.lean</code>: I've started working on it but I have to stop.</p>",
        "id": 437107891,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1714912469
    },
    {
        "content": "<p>The bump is done.</p>",
        "id": 437233618,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1714990699
    },
    {
        "content": "<p>Ah thanks for sorting this!</p>",
        "id": 437426421,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1715079032
    }
]