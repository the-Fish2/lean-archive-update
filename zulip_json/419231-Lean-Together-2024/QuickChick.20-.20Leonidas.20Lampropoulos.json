[
    {
        "content": "<p>Just mentioning it for people who are wondering whether lean has an equivalent of QuickChick: mathlib provides a <code>slim_check</code> tactic, which is based on the same generation and minimization framework (I believe this is ultimately from a Haskell property testing framework called <code>QuickCheck</code>).</p>\n<p>The features which were demoed today which I think aren't there in lean:</p>\n<ul>\n<li>the <code>DecOpt</code> typeclass and the ability to derive it for arbitrary types</li>\n<li>deriving a semidecision procedure for inductive propositions</li>\n<li>the ability to generate elements of an inductive satisfying a property (as opposed to just generating randomly and seeing if they satisfy the property)</li>\n</ul>",
        "id": 412359175,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704984684
    },
    {
        "content": "<p>During the question in this lecture the speaker (who seems to not be on this zulip) mentioned that there were a number of papers about generating data subject to some constraints, presumably in coq. Does anyone know what papers this was referring to, and where I can find them?</p>",
        "id": 412371851,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1704988330
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/419231-Lean-Together-2024/topic/QuickChick.20-.20Leonidas.20Lampropoulos/near/412371851\">said</a>:</p>\n<blockquote>\n<p>During the question in this lecture the speaker (who seems to not be on this zulip) mentioned that there were a number of papers about generating data subject to some constraints, presumably in coq. Does anyone know what papers this was referring to, and where I can find them?</p>\n</blockquote>\n<p>I'd suggest that you look at the Related Work section of the corresponding <a href=\"https://lemonidas.github.io/pdf/GeneratingGoodGenerators.pdf\">paper</a>. It refers to several such papers, e.g.<br>\n<a href=\"https://arxiv.org/pdf/1607.05443.pdf\">https://arxiv.org/pdf/1607.05443.pdf</a> but there are others</p>",
        "id": 412375312,
        "sender_full_name": "Alex Vlasov",
        "timestamp": 1704989406
    },
    {
        "content": "<blockquote>\n<p>the ability to generate elements of an inductive satisfying a property (as opposed to just generating randomly and seeing if they satisfy the property)</p>\n</blockquote>\n<p>I think slim_check can be trained to do this for specific types; for instance, we have something for injective functions from natural numbers</p>",
        "id": 412375526,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704989471
    },
    {
        "content": "<p>Does that work with separate assumptions <code>f : Nat -&gt; Nat</code> and <code>Injective f</code>?</p>",
        "id": 412376049,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704989618
    },
    {
        "content": "<p>Another thing they've done in QuickChick is to provide <a href=\"https://catalin-hritcu.github.io/publications/foundational-pbt.pdf\">some interesting semantics for property-based testing that allow verification of the testing</a></p>",
        "id": 412377028,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1704989914
    },
    {
        "content": "<p>The mutant feature is also a great way to validate your spec and make sure it does a good job</p>",
        "id": 412377089,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1704989939
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/419231-Lean-Together-2024/topic/QuickChick.20-.20Leonidas.20Lampropoulos/near/412376049\">said</a>:</p>\n<blockquote>\n<p>Does that work with separate assumptions <code>f : Nat -&gt; Nat</code> and <code>Injective f</code>?</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/blob/master/test/slim_check.lean#L132-L136\">Yes</a></p>",
        "id": 412377227,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704989984
    },
    {
        "content": "<p>Though it probably only works if the binders are adjacent</p>",
        "id": 412377264,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704989998
    },
    {
        "content": "<p>SlimCheck could also use a new RNG, like <a href=\"https://gee.cs.oswego.edu/dl/papers/oopsla14.pdf\">SplitMix</a> - IIRC it uses the one from the old Haskell prelude, which has poor statistical properties</p>",
        "id": 412377429,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1704990041
    },
    {
        "content": "<p>On the subject of slimcheck; it would be great if someone could review <a href=\"https://github.com/leanprover/lean4/pull/3090\">lean4#3090</a>, which leads to minor improvements in the <code>#sample</code> command</p>",
        "id": 412378928,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704990533
    }
]