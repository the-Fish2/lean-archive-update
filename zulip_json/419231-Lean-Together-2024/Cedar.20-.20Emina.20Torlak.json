[
    {
        "content": "<p><a href=\"https://github.com/cedar-policy/cedar-spec/tree/main/cedar-lean\">Cedar in Lean</a></p>",
        "id": 411982433,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1704821764
    },
    {
        "content": "<p>Can Cedar express something like this?<br>\n\"Alice is allowed to share her documents with anyone on the engineering team.\"<br>\nThat is, Alice is allowed to edit her Cedar policies in a constrained way.</p>",
        "id": 411982872,
        "sender_full_name": "David Renshaw",
        "timestamp": 1704821950
    },
    {
        "content": "<p>For the FFI memory leaks: Are you aware of the difference between borrowed and non borrowed arguments in Lean, they influence how reference counting is done. I recall that I used to have issues with properly freeing memory in my FFI code because I didn't account for borrowed vs non borrowed arguments.</p>",
        "id": 411988233,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1704824139
    },
    {
        "content": "<p>We haven't looked too much into the memory leaks yet, but know they're there <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n<p>We're using the <a href=\"https://github.com/digama0/lean-sys\">lean-sys crate</a> for FFI. We'd love help improving our code if anyone is interested! Cedar's formalization is available open-source in <a href=\"https://github.com/cedar-policy/cedar-spec\">https://github.com/cedar-policy/cedar-spec</a> . The Lean code is in <a href=\"https://github.com/cedar-policy/cedar-spec/tree/main/cedar-lean\"><code>cedar-spec/cedar-lean/</code></a> and the relevant FFI is in <a href=\"https://github.com/cedar-policy/cedar-spec/blob/main/cedar-drt/src/lean_impl.rs\"><code>cedar-spec/cedar-drt/src/lean_impl.rs</code></a>. Feel free to file issues or open pull requests <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 411991894,
        "sender_full_name": "Kesha Hietala",
        "timestamp": 1704825614
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243791\">David Renshaw</span> <a href=\"#narrow/stream/419231-Lean-Together-2024/topic/Cedar.20-.20Emina.20Torlak/near/411982872\">said</a>:</p>\n<blockquote>\n<p>Can Cedar express something like this?<br>\n\"Alice is allowed to share her documents with anyone on the engineering team.\"<br>\nThat is, Alice is allowed to edit her Cedar policies in a constrained way.</p>\n</blockquote>\n<p>Cedar policies use a &lt;principal, action, resource, context&gt; request format. In this case, the principal would be Alice and action would be Share. The resource could be either the document or the sharee depending on your model -- let's say it's the sharee and that we put the relevant document into the context. The policy might look like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">permit</span><span class=\"o\">(</span>\n  <span class=\"n\">principal</span> <span class=\"bp\">==</span> <span class=\"n\">User</span><span class=\"o\">::</span><span class=\"s2\">\"Alice\"</span><span class=\"o\">,</span>\n  <span class=\"n\">action</span> <span class=\"bp\">==</span> <span class=\"n\">Action</span><span class=\"o\">::</span><span class=\"s2\">\"Share\"</span><span class=\"o\">,</span>\n  <span class=\"n\">resource</span> <span class=\"k\">in</span> <span class=\"n\">Team</span><span class=\"o\">::</span><span class=\"s2\">\"Engineering\"</span>\n<span class=\"o\">)</span><span class=\"bp\">;</span>\n</code></pre></div>\n<p>We have a variety of resources for learning about Cedar (see references linked <a href=\"https://github.com/cedar-policy/cedar-awesome\">here</a>). My favorite is the <a href=\"https://www.cedarpolicy.com/en/tutorial\">interactive Cedar tutorial</a>.</p>",
        "id": 411994805,
        "sender_full_name": "Kesha Hietala",
        "timestamp": 1704826836
    }
]