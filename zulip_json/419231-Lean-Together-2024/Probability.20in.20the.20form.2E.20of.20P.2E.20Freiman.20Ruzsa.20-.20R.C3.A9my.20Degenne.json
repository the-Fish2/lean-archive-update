[
    {
        "content": "<p>Interesting reading re: PFR for those who haven't seen it yet: Terry wrote up a very nice blog post at <a href=\"https://terrytao.wordpress.com/2023/11/18/formalizing-the-proof-of-pfr-in-lean4-using-blueprint-a-short-tour/\">https://terrytao.wordpress.com/2023/11/18/formalizing-the-proof-of-pfr-in-lean4-using-blueprint-a-short-tour/</a>.</p>",
        "id": 411953550,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1704812888
    },
    {
        "content": "<p>Is there any more info on how to use blueprints? The README is a bit sparse <a href=\"https://github.com/PatrickMassot/leanblueprint\">https://github.com/PatrickMassot/leanblueprint</a></p>",
        "id": 411957049,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1704813881
    },
    {
        "content": "<p>There is a good blueprint example here: <a href=\"https://github.com/utensil/LeanBlueprintExample\">https://github.com/utensil/LeanBlueprintExample</a> by <span class=\"user-mention\" data-user-id=\"296911\">@Utensil Song</span>  which I found very helpful</p>",
        "id": 411958368,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1704814211
    },
    {
        "content": "<p>I created a blueprint two weeks ago and here are the notes I took while trying to install everything. I know that Patrick updated blueprint recently, so some of it might be out of date, and some of it might just be me trying useless things. I agree that more doc would be great.<br>\nAdvice: don't try to setup a blueprint on windows.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>My notes</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<ul>\n<li>\n<p>Create a github repository (for these instructions: git@github.com:RemyDegenne/CLT.git)</p>\n</li>\n<li>\n<p>Create a lean project (locally). See <a href=\"https://leanprover-community.github.io/install/project.html\">https://leanprover-community.github.io/install/project.html</a><br>\n    -&gt; the toolchain info in the \"lake new\" command from that page does not work (I may have deleted that toolchain) but \"lake new\" without toolchain info works.</p>\n</li>\n<li>\n<p>Upload the project to the repository. In the folder of the project:<br>\n    git remote add origin git@github.com:RemyDegenne/CLT.git<br>\n    git checkout master<br>\n    git add --all<br>\n    git commit -m \"initial commit\"<br>\n    git push</p>\n<p>Possible issues: the name of the default branch in my repository is \"master\", but it might be \"main\" in yours</p>\n</li>\n<li>\n<p>test the lean project. In the folder of the project:<br>\n    lake exe cache get<br>\n    lake build</p>\n</li>\n<li>\n<p>install latex</p>\n</li>\n<li>\n<p>install plastex <a href=\"http://plastex.github.io/plastex/\">http://plastex.github.io/plastex/</a><br>\n    pip install plasTeX</p>\n</li>\n<li>\n<p>install leanblueprint <a href=\"https://github.com/PatrickMassot/leanblueprint\">https://github.com/PatrickMassot/leanblueprint</a><br>\n    sudo apt install graphviz libgraphviz-dev</p>\n<div class=\"codehilite\"><pre><span></span><code>  on Windows: see https://pygraphviz.github.io/documentation/stable/install.html\n  Don&#39;t install graphviz in a location with a space in the path\n  The command that I successfully ran in git bash, after installing Graphviz in C:\\Graphviz :\n  pip install --global-option=build_ext --global-option=&quot;-LC:\\Graphviz\\lib/&quot; --global-option=&quot;-IC:\\Graphviz\\include&quot; pygraphviz\n</code></pre></div>\n\n<p>pip install invoke pandoc</p>\n<p># here: go to a folder where you are ok to clone leanblueprint<br>\n  git clone git@github.com:PatrickMassot/leanblueprint<br>\n  pip install ./leanblueprint</p>\n</li>\n<li>\n<p>setup doc-gen4 for the project <a href=\"https://github.com/leanprover/doc-gen4\">https://github.com/leanprover/doc-gen4</a><br>\n    Follow the instructions over there.<br>\n    I failed to get the docs to build locally on Windows. See the CI step to have them built when you push.</p>\n</li>\n<li>\n<p>create a blueprint for the project<br>\n    create a folder blueprint<br>\n    Copy some files from the PFR project (adapt some names to your project)<br>\n        tasks.py<br>\n        blueprint/requirements.txt<br>\n        blueprint/tasks.py<br>\n        blueprint/.gitignore<br>\n        blueprint/src/extra_styles.css<br>\n        blueprint/src/latexmkrc<br>\n        blueprint/src/plastex.cfg<br>\n        blueprint/src/print.tex<br>\n        blueprint/src/util.sty<br>\n        blueprint/src/web.tex<br>\n        blueprint/src/chapter/main.tex<br>\n        blueprint/src/preamble/common.tex<br>\n        blueprint/src/preamble/print.tex<br>\n        blueprint/src/preamble/web.tex</p>\n</li>\n<li>\n<p>setup CI <a href=\"https://leanprover-community.github.io/ci.html\">https://leanprover-community.github.io/ci.html</a>.<br>\n    See also the PFR project CI, which can build the docs and blueprint.</p>\n<p>Activate \"github pages\" on you github repository, with deployment from github actions</p>\n</li>\n</ul>\n<p>useful options in the lakefile.lean file:<br>\nleanOptions := #[<br>\n    ⟨<code>relaxedAutoImplicit, true⟩, -- prevents typos to be interpreted as new free variables\n    ⟨</code>pp.unicode.fun, true⟩, -- pretty-prints <code>fun a ↦ b</code><br>\n    ⟨`pp.proofs.withType, false⟩]</p>\n</div></div>",
        "id": 411959322,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1704814486
    },
    {
        "content": "<p>A lot more documentation and a more convenient way to setup a Lean blueprint is on its way.</p>",
        "id": 411961319,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1704815078
    },
    {
        "content": "<p>I hope the above information by Christopher and Rémy will be completely obsolete in at most two weeks.</p>",
        "id": 411961518,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1704815152
    },
    {
        "content": "<p>Someone asked in the talk for an example of a task that was easy on paper but hard in Lean.  One fact, which we didn't even bother to write in the blueprint because it was so obvious, was that if one had a collection of independent random variables ,say <code>A, B, C, D, E</code>, then any collection of disjoint tuples of these variables, e.g., <code>(A, C), (B, D), E</code>, were also independent.  Proving this took us through quite a bit of dependent type hell before we found a proof (which was the second to the last thing we needed to finish the main PFR objective).  Later we observed that with correct spelling of the statement <a href=\"https://teorth.github.io/pfr/docs/find/?pattern=ProbabilityTheory.iIndepFun.pi%27#doc\">pfr#ProbabilityTheory.iIndepFun.pi'</a> , the proof was actually not too bad; many of the difficulties were of our own making.  Nevertheless this was a major speedbump.</p>\n<p>Related: the very last sorry we needed to fill was</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">S1</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">4</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"n\">Pairwise</span> <span class=\"o\">(</span><span class=\"n\">Disjoint</span> <span class=\"n\">on</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">S1</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Again, \"obvious\", but bashing this out with <code>fin_cases</code> etc. looked really unappealing until <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Balog-Szemer.C3.A9di-Gowers/near/405990726\">found this elegant proof</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"n\">Pairwise</span> <span class=\"o\">(</span><span class=\"n\">Disjoint</span> <span class=\"n\">on</span> <span class=\"n\">S1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pairwise_disjoint_on</span><span class=\"o\">]</span>\n  <span class=\"n\">decide</span>\n</code></pre></div>",
        "id": 412063563,
        "sender_full_name": "Terence Tao",
        "timestamp": 1704862734
    }
]