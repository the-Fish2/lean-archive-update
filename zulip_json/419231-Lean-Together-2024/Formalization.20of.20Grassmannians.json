[
    {
        "content": "<p>Slides for the talk: <a href=\"https://quatramaran.salle-s.org/~smorel/grassmannians.pdf\">https://quatramaran.salle-s.org/~smorel/grassmannians.pdf</a><br>\nCode: <a href=\"https://github.com/smorel394/ExteriorPowers\">https://github.com/smorel394/ExteriorPowers</a></p>",
        "id": 412195142,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1704910218
    },
    {
        "content": "<p>Is it insufficient for your purposes to assume that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> is a (real or complex) Hilbert space and to take the orthogonal of the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span>-dimensional subspace <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>W</mi><mo>⊂</mo><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">W \\subset E</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7224em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊂</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> for your complement? So basically, set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>U</mi><mo>=</mo><msup><mi>W</mi><mo lspace=\"0em\" rspace=\"0em\">⊥</mo></msup></mrow><annotation encoding=\"application/x-tex\">U = W^{\\perp}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8491em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">⊥</span></span></span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 412199008,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1704911918
    },
    {
        "content": "<p>This theory all works over the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>-adic numbers, where there is no concept of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo></mrow><annotation encoding=\"application/x-tex\">\\leq</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mrel\">≤</span></span></span></span>.</p>",
        "id": 412199636,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704912215
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"318709\">@Sophie Morel</span> when working on some of the applications that you mentioned, did you run into trouble with the \"choicy\" parts of the construction?</p>",
        "id": 412199948,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1704912362
    },
    {
        "content": "<p>No, there was no trouble at all, except the psychological problem that things are not canonical.</p>",
        "id": 412200032,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1704912390
    },
    {
        "content": "<p>Ok, that's good news!</p>",
        "id": 412200049,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1704912401
    },
    {
        "content": "<p>As continuous linear maps are smooth, adding some continuous linear equivalences in the charts was not a problem.</p>",
        "id": 412200097,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1704912423
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/419231-Lean-Together-2024/topic/Formalization.20of.20Grassmannians/near/412199636\">said</a>:</p>\n<blockquote>\n<p>This theory all works over the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>-adic numbers, where there is no concept of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo></mrow><annotation encoding=\"application/x-tex\">\\leq</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mrel\">≤</span></span></span></span>.</p>\n</blockquote>\n<p>Also, I was thinking about the algebraic variety situation, where we cannot take orthogonals.</p>",
        "id": 412200284,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1704912503
    },
    {
        "content": "<p>Right! So, in finite dimension you can everything in coordinates if you want. And for real or complex Hilbert spaces you can use a canonical complement. But if you want a unified approach, you need to make a choice of a complement in the coordinate-free version. Cool.</p>",
        "id": 412201698,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1704913094
    },
    {
        "content": "<p>That's right. But I don't think it's a good idea to do things in coordinates, even in finite dimension. You don't want the manifold structure to depend on a choice of basis of your vector space.</p>",
        "id": 412202085,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1704913252
    },
    {
        "content": "<p>Presumably, a different basis would give an equivalent atlas, though. So it also depends what is meant by manifold structure.</p>",
        "id": 412202564,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1704913414
    },
    {
        "content": "<p>Yes, all bases give the same manifold structure from the point of view of math. I meant the manifold structure in the sense of mathlib, so the data of a chart around each point.</p>",
        "id": 412203044,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1704913579
    },
    {
        "content": "<p>Is there talk of defining compatible atlases in mathlib?</p>",
        "id": 412203653,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1704913840
    },
    {
        "content": "<p>I note that your repository defines <code>ContinuousAlternatingMap </code>, but  <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContinuousAlternatingMap#doc\">docs#ContinuousAlternatingMap</a>  already exists in mathlib (as of <a href=\"https://github.com/leanprover-community/mathlib4/pull/5678\">#5678</a>)! Perhaps it wasn't there when you first looked for it? Or is there something inconvenient about the mathlib definition that meant you needed your own?</p>",
        "id": 412237779,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704929729
    },
    {
        "content": "<p>(looking forward to seeing the talk when the recording get uploaded :) )</p>",
        "id": 412237891,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704929784
    },
    {
        "content": "<p>I think it didn't exist when I started, so I'll have to start using the mathlib definition. I don't see the operator norm for <code>ContinuousAlternatingMaps</code>s in mathlib and I do need that too, did I miss something ?</p>",
        "id": 412397141,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1704996973
    },
    {
        "content": "<p>I think the norm may indeed be missing; though <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> may have a branch with it if so</p>",
        "id": 412422707,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705007872
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8691\">#8691</a></p>",
        "id": 412422836,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705007920
    },
    {
        "content": "<p>I want to have topology on <code>ContinuousAlternatingMap</code>s independent of the norm.</p>",
        "id": 412422903,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705007952
    },
    {
        "content": "<p>But I need to make some changes in supporting lemmas to prove equivalence of 2 topologies.</p>",
        "id": 412422957,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705007979
    },
    {
        "content": "<p>I'll try to get back to it soon.</p>",
        "id": 412422971,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705007986
    },
    {
        "content": "<p>There is an obvious norm coming from the one <code>ContinuousMultilinearMap</code>s, and it's the one I was using in my Grassmannian project. (For the rest of the project, I need a norm and not just a topology.) But this is very easy to do anyway.</p>",
        "id": 412437960,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1705015067
    },
    {
        "content": "<p>This is the norm added in <a href=\"https://github.com/leanprover-community/mathlib4/pull/8691\">#8691</a>. Probably, we should update&amp;merge it now, change the definition of topology later.</p>",
        "id": 412442292,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705017604
    },
    {
        "content": "<p>Is the desired topology not just the one induced by the multilinear maps? If so, does that not come for free with the induced norm?</p>",
        "id": 412442430,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705017670
    },
    {
        "content": "<p>We have topology on continuous linear maps defined based on TVS structures. I want to do the same for multilinear maps.</p>",
        "id": 412442515,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705017722
    },
    {
        "content": "<p>Right; I guess my question is what makes inducing that topology nontrivial</p>",
        "id": 412442798,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705017835
    },
    {
        "content": "<p>Inducing from ... to ...?</p>",
        "id": 412442919,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705017888
    },
    {
        "content": "<p><code>TopologicalSpace.induced AlternatingMap.toMultilinearMap</code></p>",
        "id": 412443020,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705017939
    },
    {
        "content": "<p>This step is trivial. Defining a topology on <code>ContinuousMultilinearMap</code> without asking for a norm is not.</p>",
        "id": 412443107,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705017972
    },
    {
        "content": "<p>Oh, I thought we already had that bit</p>",
        "id": 412443131,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705017988
    },
    {
        "content": "<p>No, we only have it for continuous linear maps, not for <strong>multi</strong>linear maps.</p>",
        "id": 412443159,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705018008
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/419231-Lean-Together-2024/topic/Formalization.20of.20Grassmannians/near/412442292\">said</a>:</p>\n<blockquote>\n<p>This is the norm added in <a href=\"https://github.com/leanprover-community/mathlib4/pull/8691\">#8691</a>. Probably, we should update&amp;merge it now, change the definition of topology later.</p>\n</blockquote>\n<p>In that case we should definitely do this</p>",
        "id": 412443268,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705018057
    },
    {
        "content": "<p>(where between update and merge there is a \"label as awaiting-review\" step!)</p>",
        "id": 412443383,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705018113
    },
    {
        "content": "<p>Sure, I meant that I should update it and label as <code>awaiting-review</code>.</p>",
        "id": 412443460,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705018164
    },
    {
        "content": "<p>I merged <code>master</code> and removed commented section. I'll fix variables and docs tomorrow.</p>",
        "id": 412469066,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705030120
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/419231-Lean-Together-2024/topic/Formalization.20of.20Grassmannians/near/412443460\">said</a>:</p>\n<blockquote>\n<p>Sure, I meant that I should update it and label as <code>awaiting-review</code>.</p>\n</blockquote>\n<p>Maybe wait a little, I am preparing a PR to generalize the construction of the operator norm on <code>ContinuousMultilinearMap</code> to the case where the spaces are only seminormed (and not necessarily normed), which will affect this too. I actually use the seminormed case in another project.</p>",
        "id": 412513639,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1705054257
    },
    {
        "content": "<p>I think I tried that in Lean 3, and ran into typeclass timeouts (edit: <a href=\"https://github.com/leanprover-community/mathlib/pull/13566\">!3#13566</a>)</p>",
        "id": 412516337,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705055146
    },
    {
        "content": "<p>I don't have that problem now, but when generalizing the stuff of <code>Mathlib.Analysis.NormedSpace.Multilinear.Basic</code> to seminormed spaces, I needed to add a <code>DecidableEq</code> instance on <code>ι</code> for some things (in particular the existence of the operator norm); here <code>ι</code> is the type indexed the entries of the multilinear maps, so it's a <code>Fintype</code>. Is that kind of thing problematic ? As a mathematician, I don't have any problem making equality decidable (especially on a <code>Fintype</code> !), and many things about multilinear maps already require this, but maybe there is a reason I didn't see not to add the instance?</p>",
        "id": 412516897,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1705055320
    },
    {
        "content": "<p>The fact that you need to add that sounds slightly suspicious, but it's hard to say for sure without seeing a PR</p>",
        "id": 412518038,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705055655
    },
    {
        "content": "<p>No PR, but I have a <a href=\"https://github.com/leanprover-community/mathlib4/tree/ContinuousMultilinearMap\">branch of mathlib</a>.</p>",
        "id": 412518500,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1705055819
    },
    {
        "content": "<p>I think you should be able to remove <code>[DecidableEq ι]</code> from the theorem statement and add <code>classical</code> to the proof?</p>",
        "id": 412518640,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705055881
    },
    {
        "content": "<p>Or if that fails, add <code>letI := Classical.decEq ι</code> to the proof, which is a bit more precise</p>",
        "id": 412518707,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705055895
    },
    {
        "content": "<p>Oh dear, I didn't think about that ! Thanks, I will try !</p>",
        "id": 412518729,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1705055904
    },
    {
        "content": "<p>We used to have CI that would tell you this, but I think it was lost to lean3</p>",
        "id": 412519051,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705056018
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> was working on restoring that one</p>",
        "id": 412527010,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1705059138
    },
    {
        "content": "<p>I am not working on that yet. I asked for advice <a href=\"#narrow/stream/287929-mathlib4/topic/List.20of.20linters/near/411614063\">here</a>, got no replies, and don't know how to start.</p>",
        "id": 412573541,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705075540
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"318709\">Sophie Morel</span> <a href=\"#narrow/stream/419231-Lean-Together-2024/topic/Formalization.20of.20Grassmannians/near/412513639\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/419231-Lean-Together-2024/topic/Formalization.20of.20Grassmannians/near/412443460\">said</a>:</p>\n<blockquote>\n<p>Sure, I meant that I should update it and label as <code>awaiting-review</code>.</p>\n</blockquote>\n<p>Maybe wait a little, I am preparing a PR to generalize the construction of the operator norm on <code>ContinuousMultilinearMap</code> to the case where the spaces are only seminormed (and not necessarily normed), which will affect this too. I actually use the seminormed case in another project.</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8691\">#8691</a> is almost ready anyway. We can generalize in any order.</p>",
        "id": 412573864,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705075634
    },
    {
        "content": "<p>As you wish. I made my PR, it is <a href=\"https://github.com/leanprover-community/mathlib4/pull/9700\">#9700</a>. There is really very little that needs to change.</p>",
        "id": 412604328,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1705086405
    },
    {
        "content": "<p>Assigned to myself. I'll review it over the weekend.</p>",
        "id": 412613561,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705090384
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 412614915,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1705091070
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/419231-Lean-Together-2024/topic/Formalization.20of.20Grassmannians/near/412442515\">said</a>:</p>\n<blockquote>\n<p>We have topology on continuous linear maps defined based on TVS structures. I want to do the same for multilinear maps.</p>\n</blockquote>\n<p>Is there a tracking issue for this anywhere? I feel like <code>TopologicalSpace (ContinuousMultilinearMap _ _ _)</code> has been discussed before elsewhere, but I can't find the previous Zulip thread</p>",
        "id": 424402852,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709377930
    },
    {
        "content": "<p>Maybe</p>\n<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/116395-maths/topic/generalizing.20deriv.20to.20TVS/near/359290094\">said</a>:</p>\n<blockquote>\n<p>BTW, we can redefine topology on multilinear forms in a similar way.</p>\n</blockquote>\n<p>is what I was thinking of</p>",
        "id": 424403135,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709378186
    },
    {
        "content": "<p>I think Yury has an open PR about that which I’m going to have a look at</p>",
        "id": 424404906,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1709379915
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/10777\">#10777</a></p>",
        "id": 424796202,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1709614671
    }
]