[
    {
        "content": "<p>Is Siegel's theorem (some class of elliptic curve equations have finitely many integer/rational solutions) or any special cases of it formalized in lean?</p>",
        "id": 411959654,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704814601
    },
    {
        "content": "<p>No, only the examples in the paper. Though the techniques would be not so far away from doing a finiteness proof in general (at least for mordell curves) we didn't do that</p>",
        "id": 411960250,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1704814786
    },
    {
        "content": "<p>The finiteness result is quite \"deep\" in some sense. Mario -- the theorem is that <em>all</em> elliptic curves only have finitely many integer points, e.g. only finitely many integer solutions to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>y</mi><mn>2</mn></msup><mo>=</mo><msup><mi>x</mi><mn>3</mn></msup><mo>+</mo><mi>A</mi><mi>x</mi><mo>+</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">y^2=x^3+Ax+B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0085em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo separator=\"true\">,</mo><mi>B</mi><mo>∈</mo><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">A,B\\in\\Z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>4</mn><msup><mi>A</mi><mn>3</mn></msup><mo>+</mo><mn>27</mn><msup><mi>B</mi><mn>2</mn></msup><mo>≠</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">4A^3+27B^2\\not=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\">4</span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0085em;vertical-align:-0.1944em;\"></span><span class=\"mord\">27</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mrel\"></span></span></span><span class=\"fix\"></span></span></span></span></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.3669em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> (i.e. the cubic has distinct roots in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">C</span></span></span></span>). You need this hypothesis, e.g. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>y</mi><mn>2</mn></msup><mo>=</mo><msup><mi>x</mi><mn>3</mn></msup></mrow><annotation encoding=\"application/x-tex\">y^2=x^3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0085em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span> has infinitely many integer solutions <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi><mo>=</mo><msup><mi>t</mi><mn>3</mn></msup><mo separator=\"true\">,</mo><mi>x</mi><mo>=</mo><msup><mi>t</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">y=t^3,x=t^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0085em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">t</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">t</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 411961746,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704815216
    },
    {
        "content": "<p>Right, I was wondering if for some particular elliptic curves it's easier (or if this theorem is a dependency and was formalized already)</p>",
        "id": 411961993,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704815286
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/419231-Lean-Together-2024/topic/Nirvana's.20talk/near/411960250\">said</a>:</p>\n<blockquote>\n<p>No, only the examples in the paper. Though the techniques would be not so far away from doing a finiteness proof in general (at least for mordell curves) we didn't do that</p>\n</blockquote>\n<p>You could formalise this fun exercise with what you have done, without too much work, as it doesn't require you to compute any class numbers.</p>\n<p><a href=\"/user_uploads/3121/MxtAKA8EqUpYecNQZ06Guga4/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/MxtAKA8EqUpYecNQZ06Guga4/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/MxtAKA8EqUpYecNQZ06Guga4/image.png\"></a></div>",
        "id": 411962095,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1704815326
    },
    {
        "content": "<p>Or maybe you already did it and I just missed it</p>",
        "id": 411962404,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1704815423
    },
    {
        "content": "<p>Counterexamples when the class number is not divisible by 3 (in Magma):</p>\n<div class=\"codehilite\" data-code-language=\"magma\"><pre><span></span><code>&gt; [d : d in [-100..-1] | d mod 4 in {2,3} and IsDivisibleBy(ClassNumber(4*d), \\\n3)];\n[ -89, -81, -61, -54, -53, -50, -38, -29, -26 ]\n&gt; [IntegralPoints(EllipticCurve([0, d])) : d in $1];\n[\n    [ (5 : 6 : 1) ],\n    [ (13 : -46 : 1) ],\n    [ (5 : -8 : 1) ],\n    [ (7 : 17 : 1) ],\n    [ (9 : 26 : 1), (29 : 156 : 1) ],\n    [],\n    [],\n    [],\n    [ (3 : 1 : 1), (35 : -207 : 1) ]\n]\n</code></pre></div>",
        "id": 411963597,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1704815811
    },
    {
        "content": "<p>this theorem is easier but it's also explicit; Siegel's result was not explicit, it's an abstract \"finitely many solutions\" result. I guess Baker's results make it explicit but historically this was later; some result is known of the form <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi>x</mi><mi mathvariant=\"normal\">∣</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">∣</mi><mi>y</mi><mi mathvariant=\"normal\">∣</mi><mo>&lt;</mo><mn>1</mn><msup><mn>0</mn><mrow><mn>1</mn><msup><mn>0</mn><mrow><mn>1</mn><msup><mn>0</mn><mrow><mn>1</mn><msup><mn>0</mn><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mi mathvariant=\"normal\">∣</mi><mi>A</mi><mi mathvariant=\"normal\">∣</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">∣</mi><mi>B</mi><mi mathvariant=\"normal\">∣</mi></mrow></msup></mrow></msup></mrow></msup></mrow></msup></mrow><annotation encoding=\"application/x-tex\">|x|,|y|&lt;10^{10^{10^{10^{max |A|,|B|}}}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">∣</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.4437em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.4437em;\"><span style=\"top:-3.4437em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:3.0807em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\"><span class=\"mord mtight\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5439em;\"><span style=\"top:-3.5439em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:3.1129em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\"><span class=\"mord mtight\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.558em;\"><span style=\"top:-3.558em;margin-right:0.1em;\"><span class=\"pstrut\" style=\"height:3.154em;\"></span><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\"><span class=\"mord mtight\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.154em;\"><span style=\"top:-3.154em;margin-right:0.1em;\"><span class=\"pstrut\" style=\"height:2.75em;\"></span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">ma</span><span class=\"mord mathnormal mtight\">x</span><span class=\"mord mtight\">∣</span><span class=\"mord mathnormal mtight\">A</span><span class=\"mord mtight\">∣</span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\">∣</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mtight\">∣</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>",
        "id": 411963615,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704815818
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Would you expect the finiteness theorem to be a dependency of FLT?</p>",
        "id": 411963691,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704815838
    },
    {
        "content": "<p>A question for the community: is it time to merge some subset of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ZSqrtd#doc\">docs#ZSqrtd</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Complex#doc\">docs#Complex</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=GaussianInt#doc\">docs#GaussianInt</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Unitization#doc\">docs#Unitization</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=TrivSqZeroExt#doc\">docs#TrivSqZeroExt</a> into a single structure that would work here too for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">[</mo><msqrt><mi>d</mi></msqrt><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}[\\sqrt{d}]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1822em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Q</span><span class=\"mopen\">[</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9322em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord mathnormal\">d</span></span></span><span style=\"top:-2.8922em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1078em;\"><span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span>?</p>",
        "id": 411963891,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704815887
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> (Can't speak right now, sorry!) The reason we have <code>d : ℤ</code> and <code>d' : ℚ</code> in the statement is that for applying we want to specify the rational number, but the hypotheses require integers. (Specifically, we can't say <code>d' % 3 = 2</code>.)</p>",
        "id": 411963897,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1704815889
    },
    {
        "content": "<p>Rewriting across the equality <code>ℚ(√6) = ℚ(√(↑6))</code> would be very annoying.</p>",
        "id": 411964014,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1704815927
    },
    {
        "content": "<p>This rewriting is what I had in mind. Why is it annoying?</p>",
        "id": 411964062,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1704815947
    },
    {
        "content": "<p><a href=\"https://github.com/lean-forward/class-group-and-mordell-equation\">https://github.com/lean-forward/class-group-and-mordell-equation</a></p>",
        "id": 411964430,
        "sender_full_name": "Nirvana Coppola",
        "timestamp": 1704816055
    },
    {
        "content": "<p>I don't think that either Siegel's result or the (much harder) theorem of Faltings saying that for genus &gt; 1 (e.g. y^2=quintic with 5 distinct roots)) there are only finitely many rational solutions will be needed for FLT.</p>",
        "id": 411964447,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704816059
    },
    {
        "content": "<p>We'd have to transport the variables, equalities and the field structure, and the result is there are lots of casts in the resulting statement. It would in the end all be hidden behind the API surface but the same is true of the current \"double <code>d</code>\" approach.</p>",
        "id": 411964525,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1704816085
    },
    {
        "content": "<p>It's been a while though, let me see if I can recover an explicit example.</p>",
        "id": 411964778,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1704816147
    },
    {
        "content": "<p>It was because we used specific numbers at some point and want to work with <code>QuadRing rat 0 (-2)</code> and not <code>QuadRing rat 0 ↑(-2)</code></p>",
        "id": 411965800,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1704816477
    },
    {
        "content": "<p>This might work out differently with lean 4 numerals, but I'm not convinced that we wouldn't still want something like that</p>",
        "id": 411966204,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1704816618
    },
    {
        "content": "<p>There also was a question about <code>norm_num</code> exensions: in fact we implemented our prototype times table tactic as a <code>norm_num</code> extension. Mathlib 4's <code>norm_num</code> forces the output of the tactic to be a (rational) numeral so the Lean 4 port instead extends <code>ring</code>. The Lean 4 port of the times table tactic works but needs to be optimized to make it really useable. That's one of the things I have been spending my (very limited!) research time on.</p>",
        "id": 411966470,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1704816708
    },
    {
        "content": "<p>I think this is fixed now?</p>",
        "id": 411966642,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704816759
    },
    {
        "content": "<p>Or maybe that PR never landed...</p>",
        "id": 411966828,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704816824
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/419231-Lean-Together-2024/topic/Form.2E.20of.20class.20num.2E.20comp.2E.20.26.20Mordell.20eqns.20-.20NIrvana.20Coppola/near/411966642\">said</a>:</p>\n<blockquote>\n<p>I think this is fixed now?</p>\n</blockquote>\n<p>Sorry, what are you referring to here?</p>",
        "id": 411966918,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1704816844
    },
    {
        "content": "<p>the fact that norm_num does not allow other types</p>",
        "id": 411966981,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704816863
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8100\">#8100</a></p>",
        "id": 411967109,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704816909
    },
    {
        "content": "<p>AFAICT, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Mathlib.Meta.NormNum.Result%27#doc\">docs#Mathlib.Meta.NormNum.Result'</a> still doesn't allow returning an expression of the form <code>1 + 2 √ 5</code>.</p>",
        "id": 411967133,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1704816917
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/419231-Lean-Together-2024/topic/Form.2E.20of.20class.20num.2E.20comp.2E.20.26.20Mordell.20eqns.20-.20NIrvana.20Coppola/near/411963891\">said</a>:</p>\n<blockquote>\n<p>A question for the community: is it time to merge some subset of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ZSqrtd#doc\">docs#ZSqrtd</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Complex#doc\">docs#Complex</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=GaussianInt#doc\">docs#GaussianInt</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Unitization#doc\">docs#Unitization</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=TrivSqZeroExt#doc\">docs#TrivSqZeroExt</a> into a single structure that would work here too for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">[</mo><msqrt><mi>d</mi></msqrt><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}[\\sqrt{d}]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1822em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Q</span><span class=\"mopen\">[</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9322em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord mathnormal\">d</span></span></span><span style=\"top:-2.8922em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1078em;\"><span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span>?</p>\n</blockquote>\n<p>Here's <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.F0.9D.94.BD.E2.82.84/near/321047870\">some Lean 3 code</a> defining <code>adjoin_root</code> as a vector with computable multiplication.</p>",
        "id": 411969817,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1704817831
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/419231-Lean-Together-2024/topic/Form.2E.20of.20class.20num.2E.20comp.2E.20.26.20Mordell.20eqns.20-.20NIrvana.20Coppola/near/411964778\">said</a>:</p>\n<blockquote>\n<p>It's been a while though, let me see if I can recover an explicit example.</p>\n</blockquote>\n<p>I tried restating <code>Mordell_d'</code> with casts and the result consisted of timeouts at each point we try to apply it to a concrete value of <code>d</code>. So maybe in simpler proofs unification can work but here it fails.</p>",
        "id": 411975062,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1704819460
    },
    {
        "content": "<p>I guess lean 4 completely changed how numerals work so it might be worth looking at this again after porting?</p>",
        "id": 411981637,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704821454
    }
]