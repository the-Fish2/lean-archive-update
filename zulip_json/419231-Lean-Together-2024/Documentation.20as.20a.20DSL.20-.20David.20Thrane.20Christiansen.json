[
    {
        "content": "<p>Exciting talk!</p>\n<p>Does the system support <em>omitting</em> some of the code from the document? This capability was missing in Alectryon, and I missed it.</p>",
        "id": 412368987,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1704987355
    },
    {
        "content": "<p>Wow this looks amazing and very promising, I am excited!</p>\n<p>Q1: Will you be able to define custom ‚Äúpretty math printers‚Äù, that will output LaTeX/Typst, with actual big operators etc? Will those be based on <code>Syntax</code> or <code>Expr</code>?</p>\n<p>Q2: Will the infoview benefit from that, and be able to show pretty math instead?</p>",
        "id": 412369420,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1704987492
    },
    {
        "content": "<p>Perhaps an offbeat question - I think it's not very controversial to say that Sphinx would be a lot better than it is if it were not developed by essentially one person -- not because that person isn't amazing (he is) but it's simply too large, complex and complicated thing to develop, which is made worse because reviewing PRs is lots of work too, and even worse because Sphinx is ironically extremely underdocumented when it comes to things like extension). Do you see the need to proactively counteract that happening here, even though we're much smaller?</p>",
        "id": 412371025,
        "sender_full_name": "Julian Berman",
        "timestamp": 1704988074
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> The code sample feature is an ordinary library that any user can implement themselves or change - in this respect it's unlike Alectryon. My implementation does have this feature, and it also allows a single document to contain multiple independent Lean environments</p>",
        "id": 412371488,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1704988207
    },
    {
        "content": "<p>Looking forward to playing around with this!</p>\n<p>In the slides you mention that good IDE support is one of the goals; but what about support in bad text editors / viewers, like say GitHub? Right now the lean syntax highlighter isn't very happy with <a href=\"https://github.com/leanprover/verso/blob/main/doc/UsersGuide/Basic.lean\">https://github.com/leanprover/verso/blob/main/doc/UsersGuide/Basic.lean</a>; have there been any discussion about separate file extensions for verso documents to avoid these situations, maybe <code>.verso.lean</code>?</p>",
        "id": 412371583,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704988246
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"416280\">@Max Nowak üêâ</span> If you can write it in Lean, then you can write it here. The full power of Lean metaprogramming is available while elaborating a document into the Verso AST, and the full power of ordinary Lean programming is available at output generation time</p>",
        "id": 412371598,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1704988251
    },
    {
        "content": "<p>Oh, and one more question which I may have missed given I missed the beginning unfortunately -- what's the ReadTheDocs equivalent :) -- is there a broader plan for how downstream projects can host their docs, or essentially do things end with HTML generation and then presumably stuff uses GitHub pages or whatever fits their fancy?</p>",
        "id": 412371768,
        "sender_full_name": "Julian Berman",
        "timestamp": 1704988315
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416280\">Max Nowak üêâ</span> <a href=\"#narrow/stream/419231-Lean-Together-2024/topic/Documentation.20as.20a.20DSL.20-.20David.20Thrane.20Christiansen/near/412369420\">said</a>:</p>\n<blockquote>\n<p>Q2: Will the infoview benefit from that, and be able to show pretty math instead?</p>\n</blockquote>\n<p>I don't know about that part - I suspect not, but perhaps if it shows docs.</p>",
        "id": 412374520,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1704989168
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321696\">@Julian Berman</span> This is a good question! I've written a number of Sphinx extensions myself, and it's not always easy to figure out how to do it. I think your question has two aspects: how do we keep code quality high? and how do we spread out the knowledge of how to maintain it?</p>\n<p>For the quality side, the current state of the project definitely reveals that I wrote it quickly in a couple of months. The plan is to pay back this debt now that there's a working, testable system, and I'd like to enable lots of automated linters and checks and the like. It definitely needs docstrings!</p>\n<p>For spreading knowledge, I think we're in the same boat as Lean as a whole. The internals are a lot like the Lean elaborator, which helps with familiarity, but at the end of the day, it's just tough. As things settle down, external contributions will be more useful, and I also hope that the smaller core with genres living externally will result in a much smaller system than all of Sphinx.</p>",
        "id": 412375979,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1704989594
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> I don't have a specific plan for this, but it is something that will require more thought in general as we get more DSLs that are essentially \"total conversion mods\" of Lean. A file extension makes sense for sure.</p>",
        "id": 412376266,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1704989685
    },
    {
        "content": "<p>I suppose in the shorter term, the highlighter can just give up on the rest of the document when it sees <code>#lang</code>, assuming verso documents will contain that</p>",
        "id": 412376367,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704989718
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321696\">@Julian Berman</span> RE ReadTheDocs - there are not presently clear plans for this, but I'm hoping that this will be part of the Reservoir integration, at least for the software documentation genres. But I don't want to make promises before everything has settled down, and I don't think we should host random blogs.</p>",
        "id": 412376567,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1704989771
    },
    {
        "content": "<p>I think ReadTheDocs found a niche before github pages allowed deploying HTML from arbitrary build processes; so perhaps such a hosting tool is no longer necessary</p>",
        "id": 412376676,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704989808
    },
    {
        "content": "<p>We'll have to see - things like hyperlinks between docs may work more reliably with a standard hosting setup, but this is something to explore further</p>",
        "id": 412377569,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1704990104
    },
    {
        "content": "<p>I'm slightly less sure it's unnecessary -- I think RTD is still super great and takes away needing to know much about how to set up CI -- but I agree it's a lot less hard than it used to be, and that <code>uses: someaction/build-my-docs</code> + the GH Pages action may be good enough.</p>",
        "id": 412377581,
        "sender_full_name": "Julian Berman",
        "timestamp": 1704990108
    },
    {
        "content": "<p>S... yeah. Intersphinx is amazing and the <a href=\"https://github.com/leanprover-community/mathlib4/pull/1\">#1</a> thing I miss whenever I use any other system.</p>",
        "id": 412377666,
        "sender_full_name": "Julian Berman",
        "timestamp": 1704990127
    },
    {
        "content": "<p>Interverso is absolutely on the June roadmap</p>",
        "id": 412377715,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1704990145
    },
    {
        "content": "<p>Also doctesting. I hope there's some plan for that too?</p>",
        "id": 412377726,
        "sender_full_name": "Julian Berman",
        "timestamp": 1704990149
    },
    {
        "content": "<p>You can build doctests yourself as a library</p>",
        "id": 412377750,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1704990161
    },
    {
        "content": "<p>But something like them was already in today's demo, so it would be a small amount of work to adapt it</p>",
        "id": 412377860,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1704990201
    },
    {
        "content": "<p>I guess one thing you can't get without read the docs is that <code>.rtfd.io</code> domain name...</p>",
        "id": 412378048,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704990247
    },
    {
        "content": "<p>Including the code action to update them if they get out of date!</p>",
        "id": 412378087,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1704990263
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/419231-Lean-Together-2024/topic/Documentation.20as.20a.20DSL.20-.20David.20Thrane.20Christiansen/near/412378048\">said</a>:</p>\n<blockquote>\n<p>I guess one thing you can't get without read the docs is that <code>.rtfd.io</code> domain name...</p>\n</blockquote>\n<p>(and another -- easy redirect support for when you move pages)</p>",
        "id": 412378169,
        "sender_full_name": "Julian Berman",
        "timestamp": 1704990294
    },
    {
        "content": "<p>Local docs are also important - not everyone is always on the Internet, so I want to have an easy way to grab the docs for the code I have on disk (like <code>raco doc</code>)</p>",
        "id": 412378310,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1704990346
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416280\">Max Nowak üêâ</span> <a href=\"#narrow/stream/419231-Lean-Together-2024/topic/Documentation.20as.20a.20DSL.20-.20David.20Thrane.20Christiansen/near/412369420\">said</a>:</p>\n<blockquote>\n<p>Wow this looks amazing and very promising, I am excited!</p>\n<p>Q1: Will you be able to define custom ‚Äúpretty math printers‚Äù, that will output LaTeX/Typst, with actual big operators etc? Will those be based on <code>Syntax</code> or <code>Expr</code>?</p>\n<p>Q2: Will the infoview benefit from that, and be able to show pretty math instead?</p>\n</blockquote>\n<p>This is mostly orthogonal to David's work. You will be able to plug in <a href=\"https://github.com/kmill/LeanTeX\">https://github.com/kmill/LeanTeX</a> because you'll be able to plug in any Lean library.</p>",
        "id": 412381312,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1704991282
    },
    {
        "content": "<p>This is a good way to do it - math rendering in the editor need not be tied to a big documentation authoring framework - better to have a small, reusable library that works in both contexts</p>",
        "id": 412381505,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1704991348
    }
]