[
    {
        "content": "<p>In some free time, I'd like to help by upstreaming some parts which are already in good shape.<br>\nIs it safe to assume that most of the \"ToMathlib\" directory is safe to PR? (If not, do you know particular parts which I should avoid?) What about <code>OpenEmbedding.{homeomorph,isCompact_preimage}</code> in <code>Global/Gromov.lean</code>? (Mathlib gained IsEmpty.homeomorph recently.)</p>\n<p>To start this, I've mostly bumped mathlib locally. (There are ~ten errors left on which I'd appreciate help, due to simp changes or so.) Can I get push access or should I open a PR from a fork?</p>",
        "id": 412146929,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1704895843
    },
    {
        "content": "<p>One of the common mistakes which are made in projects such as this is that there's the push to get the project over the line, and then a bunch of people lose interest and/or move onto other things, and the <code>ToMathlib</code> directory just sits there rotting. However, with some projects like LTE, the <code>ToMathlib</code> directory consisted of many experiments containing material which we all knew was a good fit for mathlib but which sometimes we weren't happy with. A great example is homological algebra, where there are several subtleties getting the ideas into dependent type theory (a cohomology group is both a limit and a colimit, and our initial formalisation did not reflect this well enough); it took over a year, a major refactor, and the heroic efforts of Joël Riou to get this stuff into mathlib [ad: he's talking about his work in about 80 minutes at Lean Together!]</p>\n<p>However if there are parts of the formalisation in ToMathlib which you are pretty convinced are in final form, then I would strongly encourage people to PR them to mathlib sooner rather than later, because as we all know mathlib is extremely active, and the longer things are left the harder the job becomes. For example <code>simp</code> changed recently and a bunch of stuff broke; other major changes will I'm sure be coming in the future. Code breaking in your project means that you have to fix it; code which has made it into mathlib is the problem of the people making the changes to mathlib (and they are often in a very good position to fix the problems which show up because they understand the changes).</p>",
        "id": 412152056,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704897392
    },
    {
        "content": "<p>Thanks Michael, help is very much appreciated. All the project could go to Mathlib, but some things in the global folder really need to be generalized a lot. The theory of smooth fiber bundles is simply not good enough yet.</p>",
        "id": 412166796,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1704901038
    },
    {
        "content": "<p>The ForMathlib folder is indeed the easiest target. In particular there is still work about parametric integrals that should really go before someone redo it in Mathlib.</p>",
        "id": 412167012,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1704901085
    },
    {
        "content": "<p>You should have gotten a GitHub invite. Then you can push your branch and we will work on fixing it.</p>",
        "id": 412167355,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1704901172
    },
    {
        "content": "<p>I have a lot of experience upstreaming my projects to mathlib and I have advice to give:</p>\n<ul>\n<li>I have two folders inside my project (see eg <a href=\"http://github.com/YaelDillies/LeanAPAP\">github.com/YaelDillies/LeanAPAP</a>):<ul>\n<li><code>MyProject/Mathlib</code> containing lemmas that belong to existing mathlib files</li>\n<li><code>MyProject/Prereqs</code> (or <code>ForMathlib</code>) containing new files that are ready to go to mathlib</li>\n</ul>\n</li>\n<li><code>MyProject/Mathlib/X.lean</code> only contains lemmas/definitions that should go in <code>Mathlib/X.lean</code> and only imports <code>Mathlib/X.lean</code> and <code>MyProject/Mathlin/Y.lean</code> where <code>Mathlib/X.lean</code> imports (potentially indirectly) <code>Mathlib/Y.lean</code>.</li>\n<li>On the project website (eg <a href=\"http://yaeldillies.github.io/LeanAPAP\">yaeldillies.github.io/LeanAPAP</a>), there is a list of files not importing any other file from <code>MyProject</code>. Those are the files one can upstream.</li>\n<li>Any modification to <code>Mathlib/X.lean</code> which is not a lemma/def addition is recorded as a todo in <code>MyProject/Mathlib/X.lean</code>.</li>\n</ul>",
        "id": 412195758,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704910548
    },
    {
        "content": "<p>This works great because anyone can then upstream anything under <code>MyProject/Mathlib</code> and <code>MyProject/Prereqs</code> without thinking about it much.</p>",
        "id": 412197810,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704911371
    },
    {
        "content": "<p>I just pushed my changes to the <code>MR-bump-mathlib</code> branch.</p>",
        "id": 412217649,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1704919980
    },
    {
        "content": "<p>The sorried proofs are marked with \"TODO-BUMP\"; the other build errors are in <code>ToMathlib/Topology/LocallyFinite.lean</code> and <code>ToMathlib/Analysis/InnerProductSpace/Projection.lean</code>.</p>",
        "id": 412217925,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1704920117
    },
    {
        "content": "<p>Last but not least: thanks for the quick response and the invite, by the way!</p>",
        "id": 412218125,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1704920216
    },
    {
        "content": "<p>And (no rush!): my first three PRs upstreaming some results are awaiting review.</p>",
        "id": 412218300,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1704920293
    },
    {
        "content": "<p>You'll get reviews faster if you write their numbers here.</p>",
        "id": 412226901,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704924202
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/9623\">#9623</a>  <a href=\"https://github.com/leanprover-community/mathlib4/pull/9624\">#9624</a>  <a href=\"https://github.com/leanprover-community/mathlib4/pull/9635\">#9635</a></p>",
        "id": 412227480,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1704924445
    },
    {
        "content": "<p>The first two PRs are merged now; thanks for the fast reviews.</p>",
        "id": 412439781,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1705016138
    },
    {
        "content": "<p>I just submitted two more PRs, each treating a single file in ToMathlib:<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/9669\">#9669</a> a function is <code>ContMDiffAt</code> outside of its <code>tsupport</code><br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/9672\">#9672</a> a subset of a charted space is open iff its image in each chart is</p>",
        "id": 412439907,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1705016212
    },
    {
        "content": "<p>BTW, please don't backport equivariant maps yet. I have a better version in a branch.</p>",
        "id": 412441452,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705017100
    },
    {
        "content": "<p>Sure, noted. I'm awaiting your branch then, whenever you find the time.(By the way, this is extremely helpful advice, thanks a lot.)</p>",
        "id": 412443979,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1705018395
    },
    {
        "content": "<p>I think the next files on my list are <code>Geometry/ManifoldMisc</code>, <code>Topology/NhdsSet</code>, <code>Topology/Germ</code> and <code>Geometry/Algebra/SmoothGerm</code>.</p>",
        "id": 412444097,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1705018444
    },
    {
        "content": "<p>I just tried upstreaming <code>Topology/NhdsSet</code>, and am getting a strange error. Three lemmas are fine in isolation, but fail then moved into the main NhdsSet file. (This might be related to a similar-sounding mathport warning. I joined mathlib after the port; this might be easy for a somewhat experienced porter.) The code is at <a href=\"https://github.com/leanprover-community/mathlib4/tree/MR-sphere-eversion-topology-nhdsset\">branch#MR-sphere-eversion-topology-nhdsset</a>; insights appreciated.</p>",
        "id": 412454281,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1705021941
    },
    {
        "content": "<p>Which lemmas cause problems?</p>",
        "id": 412455096,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705022417
    },
    {
        "content": "<p>Note that this file doesn't import <code>Topology.Constructions</code>, so it doesn't know what's the topology on <code>X × Y</code>.</p>",
        "id": 412455145,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705022456
    },
    {
        "content": "<p>We already have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=nhdsSet_prod_le#doc\">docs#nhdsSet_prod_le</a> (in a strange file, probably should be moved)</p>",
        "id": 412455317,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705022554
    },
    {
        "content": "<p>I would rename <code>Filter.eventually_nhdsSet_of_prod</code> to <code>Filter.Eventually.prod_nhdsSet</code> similar to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Filter.Eventually.prod_nhds#doc\">docs#Filter.Eventually.prod_nhds</a></p>",
        "id": 412455517,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705022683
    },
    {
        "content": "<p>And similarly <code>Filter.Eventually.union_nhdsSet</code></p>",
        "id": 412455561,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705022711
    },
    {
        "content": "<p><code>Filter.Eventually.nhdsSet_forall_mem</code> is the same as <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Filter.Eventually.self_of_nhdsSet#doc\">docs#Filter.Eventually.self_of_nhdsSet</a></p>",
        "id": 412455761,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705022814
    },
    {
        "content": "<p><code>eventually_nhdsSet_iUnion</code>: please add a theorem</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">nhdsSet_iUnion</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">𝓝ˢ</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⨆</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">𝓝ˢ</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(not sure if it should be a <code>simp</code> lemma or not)</p>",
        "id": 412456067,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705022978
    },
    {
        "content": "<p>Then theorems about <code>eventually</code> will be <code>by simp [nhdsSet_iUnion]</code></p>",
        "id": 412456100,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705022998
    },
    {
        "content": "<p>Thanks for the quick help. Next time I'll open a draft PR to make your life easier :-)</p>",
        "id": 412458569,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1705024289
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/303200-sphere-eversion/topic/What.20is.20ready.20for.20upstreaming.3F/near/412455145\">said</a>:</p>\n<blockquote>\n<p>Note that this file doesn't import <code>Topology.Constructions</code>, so it doesn't know what's the topology on <code>X × Y</code>.</p>\n</blockquote>\n<p><span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span> I should go to bed...<br>\nHowever, importing <code>Topology.Constructions</code>yields an import cycle: <code>Constructions</code> imports <code>Topology.Maps</code>, which imports <code>NhdsSet</code> precisely for <code>Inducing.nhdsSet_eq_comap</code>. <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 412458853,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1705024431
    },
    {
        "content": "<p>Then these lemmas can go to <code>Topology.Constructions</code>.</p>",
        "id": 412460435,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705025246
    },
    {
        "content": "<p>PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/9674\">#9674</a> (NhdsSet) is now ready for review.</p>",
        "id": 412502018,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1705049928
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/9725\">#9725</a> is the first step towards equivariant maps</p>",
        "id": 412741770,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705179295
    },
    {
        "content": "<p>Yury, are you aware of <a href=\"https://github.com/leanprover-community/mathlib4/pull/6057\">#6057</a> ? I don’t know if it’s actually related but I just want to make sure there’s no duplication happening…</p>",
        "id": 412743551,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1705180143
    },
    {
        "content": "<p>I think that we need a separate type for this case instead of using <code>MulActionHom</code> with some strange actions like \"<code>Nat</code> acts on the domain by adding <code>n * a</code> and on the codomain by adding <code>n * b</code>\".</p>",
        "id": 412744936,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705180852
    },
    {
        "content": "<p>We can have an equivalence between 2 definitions.</p>",
        "id": 412744978,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705180876
    },
    {
        "content": "<p>Also, the main objects I want to deal with is the types of monotone <code>AddConstMap</code>s and <code>AddConstEquiv</code>s.</p>",
        "id": 412748010,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705182388
    },
    {
        "content": "<p>And these don't fit in <code>MulActionHom</code> at all.</p>",
        "id": 412748033,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705182403
    },
    {
        "content": "<p>Okay fair enough, I just wanted to check!</p>",
        "id": 412754441,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1705187104
    },
    {
        "content": "<p>Can I draw some eyes to the build failures in <code>LocallyFinite</code> and <code>Projection</code> in my bump <a href=\"https://github.com/leanprover-community/sphere-eversion/tree/MR-bump-mathlib\">branch</a>? These are blocking a full build of the project, cannot be sorried away (AFAICT) and make it hard to test sweeping changes, such as bumping to the first upstream PRs.<br>\nI have submitted PRs upstreaming files depending on each other: bumping over this would be much easier if I could at least build the entire project. In other words: the sorried proofs are not as urgent, but having a workaround for these failures would be quite helpful for efficiently upstreaming.</p>\n<p>I understand we're all not paid for this and have little time.</p>",
        "id": 413011887,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1705343401
    },
    {
        "content": "<p>Status update:</p>\n<ul>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/9674\">#9674</a> <code>NhdsSet</code> is ready again (with comments from <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> and <span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span> applied, thanks!)</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/9747\">#9747</a>  (germs w.r.t. the neighbourhood filter) is also ready, depends on <a href=\"https://github.com/leanprover-community/mathlib4/pull/9674\">#9674</a></li>\n<li>smooth germs is in progress (but requires more clean-up)</li>\n</ul>",
        "id": 413019690,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1705347661
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"634338\">@Michael Rothgang</span> I fixed the build and merged into master. Thanks a lot for your help with this bump!</p>",
        "id": 413076993,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1705378282
    },
    {
        "content": "<p>Thanks a lot for the prompt response!</p>",
        "id": 413116545,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1705398503
    },
    {
        "content": "<p>PSA: I just pushed directly to master: a few uncontroversial clean-ups (reducing imports in <code>ToMathlib</code>) and another mathlib bump directly to master (of today morning, before the latest wave of PRs was merged). Two files in <code>ToMathlib</code> and two lemmas are superseded now, and more is in the pipeline.</p>",
        "id": 413249347,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1705443700
    },
    {
        "content": "<p>Also ready for review: <a href=\"https://github.com/leanprover-community/mathlib4/pull/9775\">#9775</a> (finite sums/products of maps into Lie groups)</p>",
        "id": 415382172,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1705447168
    },
    {
        "content": "<p>Current updates on  open PRs:</p>\n<ul>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/9775\">#9775</a> (Lie groups) is still open</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/9778\">#9778</a> (Topology/Support), two short lemmas</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/9813\">#9813</a> (Topology/LocallyFinite), another short lemma</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/9872\">#9872</a> (Topology/Algebra/Order/Compact), one pretty short lemma</li>\n<li><del>#9874 (easy, renaming lemmas)</del>merged now and <a href=\"https://github.com/leanprover-community/mathlib4/pull/9873\">#9873</a> (cut-off functions)</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/9810\">#9810</a> (HausdorffDistance; 25 lines/three lemmas) is blocked on <a href=\"https://github.com/leanprover-community/mathlib4/pull/9809\">#9809</a> (splitting that file)</li>\n</ul>",
        "id": 417031110,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1705791293
    },
    {
        "content": "<p>And I bumped mathlib twice, for a few merged PRs. Not too bad overall.</p>",
        "id": 417031402,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1705791562
    },
    {
        "content": "<p>Huzzah: three upstreaming PRs have been merged again. (I have bumped mathlib again, and pushed a couple of other small clean-ups.)</p>\n<p>New PRs waiting for review:</p>\n<ul>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/9982\">#9982</a> (normed spaces, easy)</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/10001\">#10001</a> (four small lemmas about extended charts)</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/10005\">#10005</a> (preparatory clean-up) and <a href=\"https://github.com/leanprover-community/mathlib4/pull/10004\">#10004</a> (two lemmas about parametric interval integrals)</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/10015\">#10015</a> (partitions of unity) <del>, blocked on <a href=\"https://github.com/leanprover-community/mathlib4/pull/9813\">#9813</a> (easy lemma about LocallyFinite)</del>merged</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/10019\">#10019</a> (two small lemmas partitions of unity), blocked on <a href=\"https://github.com/leanprover-community/mathlib4/pull/10020\">#10020</a> (easy lemma about LocallyFinite)</li>\n</ul>\n<p>Still awaiting review:</p>\n<ul>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/9873\">#9873</a> (cut-off functions)</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/9810\">#9810</a> (HausdorffDistance; 25 lines/three lemmas), blocked on <a href=\"https://github.com/leanprover-community/mathlib4/pull/9809\">#9809</a> (splitting that file)</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/9747\">#9747</a> (germs w.r.t. the neighbourhood filter) is <em>almost</em> ready, but will certainly benefit from another look</li>\n</ul>",
        "id": 418228989,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1706256806
    },
    {
        "content": "<p>Status update:</p>\n<ul>\n<li>I have bumped mathlib again, over a few more merged PRs. (Thank you for the reviews.)</li>\n<li>I also took a look at the leftover sorry's from the big bump four weeks ago and squashed all but four sorries: these will need further attention. Two should be easy in principle (some lemmas changed); the other two are broken <code>simp_rw</code>'s (which, unlike the others, are not fixed by adding <code>decide=true</code> or <code>unfoldPartialApplication</code>)</li>\n</ul>\n<p>Current list of PRs awaiting PR</p>\n<ul>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/10004\">#10004</a> (parametric integrals)</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/10015\">#10015</a> (partitions of unity) - 100 lines, but straightforward</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/9810\">#9810</a> (HausdorffDistance; 25 lines/three lemmas), blocked on <a href=\"https://github.com/leanprover-community/mathlib4/pull/9809\">#9809</a> (splitting that file)</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/9747\">#9747</a> (germs w.r.t. the neighbourhood filter), 200 lines</li>\n</ul>\n<p>I'll have to focus on other things in the next weeks, so reviews (while appreciated) are not urgent.</p>",
        "id": 419335195,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1706822380
    },
    {
        "content": "<p>I just pushed two mathlib bumps, one to Lean 4.6.0-rc1, and another to today's mathlib (including the Funlike refactor).<br>\nIn the first bump, one proof in Global/Relation breaks; I presume an <code>erw</code> was brittle and broke due to small <code>rw</code> changes in Lean 4.6.<br>\nThe second one issues two warnings by lake, apparently going back to <a href=\"https://github.com/leanprover/lean4/pull/3149\">lean4#3149</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">Qq</span><span class=\"o\">:</span> <span class=\"n\">ignoring</span> <span class=\"n\">missing</span> <span class=\"n\">dependency</span> <span class=\"n\">manifest</span> <span class=\"bp\">'./.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Qq</span><span class=\"bp\">/</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">manifest.json'</span>\n<span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">Cli</span><span class=\"o\">:</span> <span class=\"n\">ignoring</span> <span class=\"n\">missing</span> <span class=\"n\">dependency</span> <span class=\"n\">manifest</span> <span class=\"bp\">'./.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Cli</span><span class=\"bp\">/</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">manifest.json'</span>\n</code></pre></div>\n<p>Reading the PR, I am not sure if any action is required. (I've left it as-is for now; feel free to make follow-up changes.)</p>",
        "id": 420022583,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1707217347
    },
    {
        "content": "<p>Status update:</p>\n<ul>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/10004\">#10004</a> is awaiting review (@Moritz Doll's opinion requested)</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/9872\">#9872</a> is ready for review again (<span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>'s comments addressed)</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/9747\">#9747</a> is also ready for another look</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/10303\">#10303</a> is awaiting-author. Feel free to adopt, if you want to. (Otherwise, I'll get to it in due time.)</li>\n</ul>",
        "id": 422311304,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1708379528
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 422318794,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708383923
    },
    {
        "content": "<p>Status update: <a href=\"https://github.com/leanprover-community/mathlib4/pull/9474\">#9474</a> and <a href=\"https://github.com/leanprover-community/mathlib4/pull/10004\">#10004</a> have been merged, thanks for the reviews. This leaves:</p>\n<ul>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/9872\">#9872</a> is still awaiting review</li>\n<li>new PRs awaiting review: <a href=\"https://github.com/leanprover-community/mathlib4/pull/11108\">#11108</a> and <a href=\"https://github.com/leanprover-community/mathlib4/pull/11110\">#11110</a> (more lemmas about parametric integrals)</li>\n<li>awaiting review: <a href=\"https://github.com/leanprover-community/mathlib4/pull/10977\">#10977</a> (first results about smooth germs, in mathlib-suitable generality)</li>\n</ul>",
        "id": 424517491,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1709479365
    },
    {
        "content": "<p>Status update: the first three PRs have all been merged (thanks again for the reviews). Here are a few more:</p>\n<ul>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/11185\">#11185</a> (parametric integrals, again)</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/11264\">#11264</a> and <a href=\"https://github.com/leanprover-community/mathlib4/pull/11265\">#11265</a> (two lemmas about flags of a basis) - each ~10 lines, so a short review</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/11387\">#11387</a> (codimension two subspaces have path-connected complement): a prerequisite for the last PR</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/11341\">#11341</a> (continuous affine equivalences): new code written to accommodate the next two PRs</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/11344\">#11344</a> (ample sets in real vector spaces), which allows</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/11342\">#11342</a> (complements of codimension two subspaces are ample)</li>\n</ul>\n<p>The last two PRs basically upstream <code>Local/AmpleSet.lean</code> --- this would be the first file outside of <code>ToMathlib</code> being upstreamed (this year). Reviews welcome, as always.</p>",
        "id": 426405797,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1710355587
    },
    {
        "content": "<p>I just tried bumped the mathlib, to using Lean 4.8-rc1. As usual, most of it was unspectacular, but four proofs break in new and exciting ways I don't understand. I have added notes referring to the version 4.8-rc1. Help in fixing some of these darker corners is welcome.</p>",
        "id": 437103616,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1714908427
    },
    {
        "content": "<p>Do you have a link?</p>",
        "id": 437103646,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1714908459
    },
    {
        "content": "<p>The commit is <a href=\"https://github.com/leanprover-community/sphere-eversion/commit/6a8877253d00795becf6c63f55fe644ef446ee72\">here</a>; search for \"4.8-rc1\". (I forgot to remove WIP from the commit message when pushing, oh well.)</p>",
        "id": 437103722,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1714908512
    },
    {
        "content": "<p>Current list of related PRs awaiting review:</p>\n<ul>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/10977\">#10977</a> (germs of smooth functions, part 1)</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/11342\">#11342</a> (complements of codimension two subspaces are ample, a small one)</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/12673\">#12673</a> (small lemma about C¹ and Lipschitz functions)</li>\n</ul>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/11185\">#11185</a> (continuity of primitives for parametric integrals) needs some small review comments to be addressed.</p>",
        "id": 437103857,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1714908673
    },
    {
        "content": "<p>I was hoping I'd pick up on something without running the code, but no such luck. Maybe I'll have a little time tonight</p>",
        "id": 437104102,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1714908905
    },
    {
        "content": "<p>Thanks Michael, I’ll take a look. Could you please avoid pushing sorries to the master branch? You can create bump branches in that kind of situation.</p>",
        "id": 437272762,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715005188
    },
    {
        "content": "<p>OMG, master is full of sorries! How long have you been doing this?</p>",
        "id": 437278975,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715007106
    },
    {
        "content": "<p>Michael, you will probably be interested in reading <a href=\"#narrow/stream/270676-lean4/topic/changes.20to.20apply.20magic.20in.204.2E8.2E0/near/437299067\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/changes.20to.20apply.20magic.20in.204.2E8.2E0/near/437299067</a></p>",
        "id": 437299165,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715013412
    },
    {
        "content": "<p>I’m done restoring  axiom-free main theorems. Please everybody, do not push to master changes that introduce the use of axioms in <code>SphereEversion.Main</code>. Branches are cheap!</p>",
        "id": 437323127,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715023049
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/303200-sphere-eversion/topic/What.20is.20ready.20for.20upstreaming.3F/near/437299165\">said</a>:</p>\n<blockquote>\n<p>Michael, you will probably be interested in reading <a href=\"#narrow/stream/270676-lean4/topic/changes.20to.20apply.20magic.20in.204.2E8.2E0/near/437299067\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/changes.20to.20apply.20magic.20in.204.2E8.2E0/near/437299067</a></p>\n</blockquote>\n<p>Oh wow - I had no idea. Thanks for investigating!</p>",
        "id": 437333320,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1715027481
    },
    {
        "content": "<p>Thanks for the help and sorry for the mess I inadvertedly created. (To be clear, I only sorried broken proofs, nothing else: to me, that seemed better than not bumping the project - but I will do differently going forward.)</p>",
        "id": 437333504,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1715027576
    },
    {
        "content": "<p>Which means: creating a bump branch and posting here if bumping turns up an error I cannot solve.</p>",
        "id": 437333741,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1715027697
    },
    {
        "content": "<p>Doing this was much better than not helping, but creating a branch would have been even better.</p>",
        "id": 437335608,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715028581
    }
]