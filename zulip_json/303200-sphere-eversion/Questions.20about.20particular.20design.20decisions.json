[
    {
        "content": "<p>Looking closely at the <code>ToMathlib</code> folder, I noticed a few design decision I don't find obvious. Can you help me understand Chesterton's fence here, i.e. describe <em>why</em> you decided this way?</p>\n<ol>\n<li>Smooth germs<br>\nRight now, smooth germs (of smooth functions <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><mi>M</mi><mo>→</mo><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">f : M \\to \\mathbb{R}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span> are defined as the image of a particular ring homomorphism (<code>RingHom.germOfContMDiffMap</code>). Is there a reason why you didn't choose, say,  <code>ofFun '' { smooth functions $$M \\to R$$ }</code> instead? (Is this some detail about coercions I don't know yet?)</li>\n</ol>\n<p>(Side note: the mathlib-ready definition should clearly generalise beyond the real numbers. The current defintion generalises virtually unchanged to any smooth ring, but I'd like a definition for smooth maps <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi><mo>→</mo><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">M \\to N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> into any smooth <em>manifold</em>.)</p>\n<ol start=\"2\">\n<li>In several places, you're using a definition instead of a structure: for instance, in <code>ToMathlib/Analysis/CutOff</code> or in <code>Global/SmoothEmbedding</code>. Is there a particular reason why? In mathlib, the topological embeddings are a structure... (In fact, I also wrote a definition of smooth embeddings (on <a href=\"https://github.com/leanprover-community/mathlib4/tree/MR-submersions-embeddings-advanced\">branch#MR-submersions-embeddings-advanced</a>) with the same design.)<br>\nPut differently: what would you think of adding/upstreaming structure versions and (eventually) switching to it?</li>\n</ol>",
        "id": 417078609,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1705836306
    },
    {
        "content": "<p>Re: 2. I think you mean def/structure rather than unbundled/bundled. Bundled maps are things like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap#doc\">docs#LinearMap</a>, where the map and the property are bundled together, so in your code both <code>Immersion</code> and <code>Immersion'</code> are unbundled.</p>",
        "id": 417795541,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1706126018
    },
    {
        "content": "<p>Indeed, thanks. I have corrected my terminology.</p>",
        "id": 417978753,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1706137371
    },
    {
        "content": "<p>Update: I realised at least one complication for smooth embeddings --- there's an explicit design decision about including an inverse map. Not including an <code>invFun</code> means you need to prove smoothness of the inverse (which currently cannot be stated in general, as mathlib doesn't have submanifolds yet).<br>\nIn other words, I'll leave this as-is for the moment.</p>",
        "id": 417979247,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1706137615
    },
    {
        "content": "<p>I'm sorry I missed this discussion. Let me look at those questions.</p>",
        "id": 418317040,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1706289072
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"634338\">Michael Rothgang</span> <a href=\"#narrow/stream/303200-sphere-eversion/topic/Questions.20about.20particular.20design.20decisions/near/417078609\">said</a>:</p>\n<blockquote>\n<p>Looking closely at the <code>ToMathlib</code> folder, I noticed a few design decision I don't find obvious. Can you help nme understand Chesterfon's fence here, i.e. describe <em>why</em> you decided this way?</p>\n<ol>\n<li>Smooth germs<br>\nRight now, smooth germs (of smooth functions <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><mi>M</mi><mo>→</mo><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">f : M \\to \\mathbb{R}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span> are defined as the image of a particular ring homomorphism (<code>RingHom.germOfContMDiffMap</code>). Is there a reason why you didn't choose, say,  <code>ofFun '' { smooth functions $$M \\to R$$ }</code> instead? (Is this some detail about coercions I don't know yet?)</li>\n</ol>\n</blockquote>\n<p>The reason is that defining it as the image of a ring morphism gives you the ring structure for free.</p>",
        "id": 418317135,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1706289116
    },
    {
        "content": "<p>It even gives you a subring.</p>",
        "id": 418317234,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1706289144
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"634338\">Michael Rothgang</span> <a href=\"#narrow/stream/303200-sphere-eversion/topic/Questions.20about.20particular.20design.20decisions/near/417078609\">said</a>:</p>\n<blockquote>\n<ol start=\"2\">\n<li>In several places, you're using a definition instead of a structure: for instance, in <code>ToMathlib/Analysis/CutOff</code> or in <code>Global/SmoothEmbedding</code>. Is there a particular reason why? In mathlib, the topological embeddings are a structure... (In fact, I also wrote a definition of smooth embeddings (on <a href=\"https://github.com/leanprover-community/mathlib4/tree/MR-submersions-embeddings-advanced\">branch#MR-submersions-embeddings-advanced</a>) with the same design.)<br>\nPut differently: what would you think of adding/upstreaming structure versions and (eventually) switching to it?</li>\n</ol>\n</blockquote>\n<p>I always use functions and predicates because this is what is done for continuous functions and differentiable functions in Mathlib. But if you switch to bundles smooth maps and it brings no pain then I don't have strong feelings about this.</p>",
        "id": 418317563,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1706289273
    },
    {
        "content": "<p>I don’t think it’s really a bundling question (IIUC), rather \"should it be an <code>and</code> or a structure (extending <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Embedding#doc\">docs#Embedding</a> for example)</p>",
        "id": 418318020,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1706289431
    },
    {
        "content": "<p>That is, in the linked branch, should we use <code>Immersion</code> or <code>Immersion'</code></p>",
        "id": 418318390,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1706289565
    },
    {
        "content": "<p>Oh I see! That conversation would have been a lot easier to follow with <a href=\"https://github.com/leanprover-community/mathlib4/blob/69dc389c64df1c8d3ac88b90a0bc1fba1c8287b7/Mathlib/Geometry/Manifold/Maps.lean#L77-L90\">this link</a></p>",
        "id": 418343930,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1706299493
    },
    {
        "content": "<p>So the answer is simply that having a definition with a single definition was simpler. Why adding a redundant one? Otherwise I usually prefer a structure over an <code>and</code> (and of course there is no discussion as soon as there are at least three conditions).</p>",
        "id": 418344037,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1706299560
    },
    {
        "content": "<p>Thanks for the responses, this is really helpful.<br>\nRegarding 1. Sure, I understand (and additional structure is always nice). I'm wondering: is that structure used <em>in sphere-eversion</em>? Given that germs of smooth functions are well-defined for the target just being a manifold, I'd rather add the general definition to mathlib (and add the ring homomorphism structure on top).</p>",
        "id": 419333646,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1706821676
    },
    {
        "content": "<p>Regarding 2: sure, makes sense.<br>\nThinking about a mathlib-suitable version, as a user of <code>Immersion</code> I would certainly like to have differentiability at my disposal. What do you think about replacing <code>Immersion'</code> with a new constructor for <code>Immersion</code>, assuming only injectivity of the <code>mfderiv</code> and a mild hypothesis (like positive dimension or a connected domain)?</p>",
        "id": 419334313,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1706821963
    },
    {
        "content": "<p>In any case, this is not an urgent question: the proper definition of immersions (and embeddings) for Banach manifolds is different from this one. I intend to add immersions and embeddings to mathlib, but this will not happen very soon.</p>",
        "id": 419334419,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1706822018
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"634338\">Michael Rothgang</span> <a href=\"#narrow/stream/303200-sphere-eversion/topic/Questions.20about.20particular.20design.20decisions/near/419333646\">said</a>:</p>\n<blockquote>\n<p>Thanks for the responses, this is really helpful.<br>\nRegarding 1. Sure, I understand (and additional structure is always nice). I'm wondering: is that structure used <em>in sphere-eversion</em>? Given that germs of smooth functions are well-defined for the target just being a manifold, I'd rather add the general definition to mathlib (and add the ring homomorphism structure on top).</p>\n</blockquote>\n<p>Oh yes it is definitely used a lot. But of course it doesn't mean it cannot be refactored.</p>",
        "id": 419623527,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1706979023
    },
    {
        "content": "<p>About immersions, I think the reasonable thing to do is to have a main definition which easy to read and clearly correct and then smart constructors on top.</p>",
        "id": 419624425,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1706979780
    },
    {
        "content": "<p>Interesting. In the bialgebra PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/10076\">#10076</a> the original definition of a bialgebra was changed at the suggestion of a referee to something unreadable and then I made a dumb constructor for the mathematicians who had only read the textbooks and didn't know about currying maps from tensor products</p>",
        "id": 419625734,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706980970
    },
    {
        "content": "<p>It would be nice if we could have the readable definition in the docs, but let the smart one claim <code>where</code> notation.</p>",
        "id": 426835660,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710543903
    }
]