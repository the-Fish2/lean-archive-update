[
    {
        "content": "<p>Today I chose issue 1458 for discussion!</p>\n<p><strong><a href=\"https://github.com/leanprover-community/mathlib4/issues/1458\"><code>apply_rules</code> in the <code>symm</code> + <code>only</code> configuration</a></strong><br>\nCreated by <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> (@hrmacbeth) on 2023-01-10<br>\nLabels: </p>\n<p>Is this issue still relevant? Any recent updates? Anyone making progress?</p>",
        "id": 419701159,
        "sender_full_name": "Random Issue Bot",
        "timestamp": 1707055546
    },
    {
        "content": "<p>I think whilst investigating this, I uncovered another issue: if you put this in <code>Mathlib/test/solve_by_elim/basic.lean</code>, it will fail:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">7</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">solve_by_elim</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">symm</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">})</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">7</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"k\">from</span> <span class=\"gr\">sorry</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>On the other hand, the current issue does still seem to exist; will dig into why later. Hopefully I'll close it today anyways, but <code>solve_by_elim</code> is now in <code>Std</code>; should this issue be moved?</p>",
        "id": 419714418,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1707067080
    },
    {
        "content": "<p>I'm really confused by this, it seems to me that the sections that deal with <code>only</code> and <code>symm</code> are completely separate, and shouldn't at all be affected by each other. Still looking into this, if anyone has any ideas please let me know:)</p>",
        "id": 419738691,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1707087019
    },
    {
        "content": "<p>OK, I'm closer to having some idea, but now really struggling with turning this option on to see any trace messages!</p>\n<p><a href=\"/user_uploads/3121/XUL94FmN3IeqMraoJO9ZFDbG/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/XUL94FmN3IeqMraoJO9ZFDbG/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/XUL94FmN3IeqMraoJO9ZFDbG/image.png\"></a></div><p><code>set_option trace.Meta.Tactic.solveByElim true</code> and <code>set_option trace.Std.Tactic.Meta.Tactic.solveByElim true</code> both neither work</p>",
        "id": 419740608,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1707088084
    },
    {
        "content": "<p>Hmm, it should be the first of those <code>set_option</code>s. <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 419741987,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1707089261
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Util.Trace</span>\n\n<span class=\"n\">initialize</span> <span class=\"n\">Lean.registerTraceClass</span> <span class=\"bp\">`</span><span class=\"n\">Foo</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Foo</span> <span class=\"n\">true</span>\n</code></pre></div>",
        "id": 419745456,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1707092598
    },
    {
        "content": "<p>Oh, I see, it can't be turned on in the same file...</p>",
        "id": 419745716,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1707092878
    },
    {
        "content": "<p>This seems like an annoying issue because it's often harder to debug multiple-file scenarios</p>",
        "id": 419745768,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1707092901
    },
    {
        "content": "<p>I've found the source of the error: it's <a href=\"https://github.com/leanprover/std4/blob/c8b189748a8306f5e054c15dd3b9f4452b29e6f1/Std/Tactic/SolveByElim.lean#L379\">line 379</a> in the file. If this is replaced with the case for not <code>only</code> (i.e. l381), then it is fine. (One way to see this quickly without editing the code is by changing <code>h</code> to <code>*</code> in a mwe such as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">symm</span><span class=\"o\">]</span> <span class=\"n\">Eq.symm</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">solve_by_elim</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>However, I'm not sure what I should be putting into there instead. I tried  <code>(← getLocalHyps).toList.bagInter (← add.mapM elab')</code>, but this doesn't seem to work, and I don't know why, which leads me onto my second question: how can I see what's in here?</p>\n<p>If I replace 379 with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">let</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getLocalHyps</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toList.bagInter</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">add.mapM</span> <span class=\"n\">elab'</span><span class=\"o\">)</span>\n    <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"n\">l</span>\n    <span class=\"n\">pure</span> <span class=\"n\">l</span>\n</code></pre></div>\n<p>I get some expression involving <code>_uniq</code>s printed, which makes sense to me, these will be fvars and there's no context here to be printing them. I tried passing the goal in order to see (at the current moment I'm only focusing on fixing the single-goal case, not <code>solve_by_elim*</code>) and instead do <code>goal.withContext (do println! l)</code>, but that also doesn't work and gives the same thing. I then tried <code>goal.withContext (do let x := l.mapM ppExpr; println! (← x))</code> as a last-ditch guess and variations and it doesn't seem right. I think I am just blindly prodding and hoping without understanding everything well (still working through MPIL) - what is the correct way to do these things?</p>",
        "id": 419747101,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1707094230
    },
    {
        "content": "<p>Sorry <span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span>, I'm not too sure what you're trying to do here. Could you <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> a bit, and show me the <code>apply_rules</code> behaviour that needs fixing?</p>",
        "id": 419749263,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1707096338
    },
    {
        "content": "<p>I'm trying to fix the bug reported in the description of this thread, specifically that <code>symm</code> doesn't seem to trigger with <code>only</code>. This is because (and I don't fully understand the root cause here, just observationally) the <code>locals</code> array is set to empty for the case of <code>only</code> (with no *). I'm trying to figure out the right expression for this, and (a) I can't figure it out, and (b) I can't understand how to debug and see what is in the array in a way that doesn't just print _uniqs at me.</p>",
        "id": 419749600,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1707096603
    },
    {
        "content": "<p>The second code block in my last message is a mwe (sorry, would copy paste but on mobile)</p>",
        "id": 419749650,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1707096630
    },
    {
        "content": "<p>Okay. The reason <code>symm</code> and <code>only</code> don't interact well is that we deal with <code>symm</code> by adding additional hypotheses. e.g. if <code>h</code> is a hypothesis to which we can apply a <code>@[symm]</code> lemma, then we add the new hypothesis <code>h_symm</code>. Of course, even if <code>h</code> was in the <code>only</code> list, <code>h_symm</code> will not be.</p>",
        "id": 419750223,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1707097047
    },
    {
        "content": "<p>A bigger issue than <a href=\"https://github.com/leanprover-community/mathlib4/pull/1458\">#1458</a> is that we rebuild all these <code>h_symm</code> hypotheses every time we want to apply a lemma. This is insane, and surely a performance problem in <code>solve_by_elim</code>.</p>\n<p>I made a PR to change that: <a href=\"https://github.com/leanprover/std4/pull/547\">std4#547</a>, but it wasn't sufficiently tested and broke Mathlib. I was in a hurry so reverted it in <a href=\"https://github.com/leanprover/std4/pull/559\">std4#559</a>, but this needs to be addressed.</p>",
        "id": 419750666,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1707097385
    },
    {
        "content": "<p>Oh, I was going to say that the list of lemmas is made in mkAssumptionSet, which is before symmSaturate is run, but that actually returns a TermElabM, so that's not actually run until we want to get the list of lemmas, I guess?</p>",
        "id": 419750806,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1707097494
    },
    {
        "content": "<p>That's right.</p>",
        "id": 419751350,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1707097924
    },
    {
        "content": "<p>I'm still not sure how I'd be able to debug in a way that shows the names of these fvars easily.</p>",
        "id": 419814952,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1707131778
    },
    {
        "content": "<p>I think in the combination of <code>symm</code> and <code>only</code>, perhaps the right thing to do is just to add <code>h_symm</code> to the set of names for every <code>h</code> in the set of names, and then make sure that we don't fail if those aren't actually present in the local context. It is a bit hacky.</p>",
        "id": 419826775,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1707135711
    },
    {
        "content": "<p>(I don't think we need to debug anything: we know why the symmetric versions aren't used, we need to change the design so they can be used.)</p>",
        "id": 419826911,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1707135743
    },
    {
        "content": "<p>Yeah, that's what I was thinking. I will try something of the like soon; the question about debugging and seeing the names was more for educational reasons as opposed to \"needed for this task\", if that makes sense.</p>",
        "id": 419827807,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1707136089
    },
    {
        "content": "<p>It's very late here, I can try to be more helpful on the debugging side tomorrow. :-)</p>",
        "id": 419832593,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1707137540
    },
    {
        "content": "<p>Many thanks Scott!</p>",
        "id": 419833029,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1707137705
    },
    {
        "content": "<p>Scott, could the right approach for this be to change the goal state into one that _only_ has the right lemmas (i.e. clear anything not mentioned), and then run <code>symmSaturate</code>? That way we don't have to keep the list of lemmas around, either.</p>",
        "id": 419947826,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1707176191
    },
    {
        "content": "<p>Considering we even have <code>symm_saturate</code> as a normal tactic, we could also turn <code>solve_by_elim only [...]</code> expand into <code>have ...; clear ...; symm_saturate; solve_by_elim [*]</code> (where the <code>have</code> step deals with any non-fvars)</p>",
        "id": 419947994,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1707176297
    },
    {
        "content": "<p>Today I chose issue 1458 for discussion!</p>\n<p><strong><a href=\"https://github.com/leanprover-community/mathlib4/issues/1458\"><code>apply_rules</code> in the <code>symm</code> + <code>only</code> configuration</a></strong><br>\nCreated by <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> (@hrmacbeth) on 2023-01-10<br>\nLabels: </p>\n<p>Is this issue still relevant? Any recent updates? Anyone making progress?</p>",
        "id": 425094040,
        "sender_full_name": "Random Issue Bot",
        "timestamp": 1709733989
    }
]