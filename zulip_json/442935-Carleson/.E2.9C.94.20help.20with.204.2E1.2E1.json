[
    {
        "content": "<p>along the way in the proof of <a href=\"https://florisvandoorn.com/carleson/blueprint/christsection.html#counting-balls\">lemma 4.1.1</a>, it is implied that we can use disjointedness of balls surrounding elements of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">Y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> to prove that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∑</mo><mrow><mi>y</mi><mo>∈</mo><mi>Y</mi></mrow></msub><mi>μ</mi><mo stretchy=\"false\">(</mo><mi>B</mi><mo stretchy=\"false\">(</mo><mi>y</mi><mo separator=\"true\">,</mo><msup><mi>D</mi><mi>k</mi></msup><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>≤</mo><mi>μ</mi><mo stretchy=\"false\">(</mo><msub><mo>⋃</mo><mrow><mi>y</mi><mo>∈</mo><mi>Y</mi></mrow></msub><mi>B</mi><mo stretchy=\"false\">(</mo><mi>y</mi><mo separator=\"true\">,</mo><msup><mi>D</mi><mi>k</mi></msup><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\"> \\sum _{y\\in Y}\\mu (B(y,D^k)) \\leq  \\mu (\\bigcup _{y\\in Y}B(y,D^k))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.2849em;vertical-align:-0.4358em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1786em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">y</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.22222em;\">Y</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4358em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">μ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2849em;vertical-align:-0.4358em;\"></span><span class=\"mord mathnormal\">μ</span><span class=\"mopen\">(</span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">⋃</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1786em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">y</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.22222em;\">Y</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4358em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span><span class=\"mclose\">))</span></span></span></span>. The easiest way this would be the case is if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">Y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> is countable, because then you can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MeasureTheory.measure_biUnion_le#doc\">docs#MeasureTheory.measure_biUnion_le</a> . However, i don't know how i can go about proving that the size of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">Y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> is limited in this way...</p>",
        "id": 446311951,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1719083297
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.PairwiseDisjoint.countable_of_nonempty_interior#doc\">docs#Set.PairwiseDisjoint.countable_of_nonempty_interior</a></p>",
        "id": 446312926,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1719083942
    },
    {
        "content": "<p>aha! thanks!</p>",
        "id": 446312975,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1719083972
    },
    {
        "content": "<p>(or neighboring lemmas, depending on your precise assumptions).</p>",
        "id": 446313007,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1719083996
    },
    {
        "content": "<p>there is a second small nitpick i need clarified...<br>\nin the first step of the inequality detailed in the proof of the lemma, i need to correlate the cardinality of <code>Y</code> (i'm using <code>Set.encard</code> for this, for being able to derive finiteness from boundedness) with <code>Measure.count Y</code>. This is because i need <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ENNReal.tsum_const_eq#doc\">docs#ENNReal.tsum_const_eq</a> . If <code>Y</code> is infinite, these are the same. however, when Y is finite, i seem to need that <code>Y</code> is measurable, which non-obvious to me...</p>",
        "id": 446422173,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1719151966
    },
    {
        "content": "<p>as soon as i have <code>Measurable Y</code> i think i can take it from there, because i then can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Measure.count_apply_finite%27#doc\">docs#Measure.count_apply_finite'</a> to correlate to <code>Finset.card</code>, which i can correlate to <code>Set.encard</code>.</p>",
        "id": 446422274,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1719152069
    },
    {
        "content": "<p>Does <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.Finite.measurableSet#doc\">docs#Set.Finite.measurableSet</a> help? It should give you that Y is measurable from the fact that it's finite, which solves your first concern, if I'm understanding correctly</p>",
        "id": 446422527,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1719152315
    },
    {
        "content": "<p>that needs <code>MeasurableSingletonClass</code>, which at least instance inference doesn't give me...</p>",
        "id": 446422587,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1719152361
    },
    {
        "content": "<p>Fair enough, I'll let someone who actually knows what they're doing answer instead :)</p>",
        "id": 446422711,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1719152455
    },
    {
        "content": "<p>and i believe that we don't have that, because we're only assuming <code>PseudoMetricSpace X</code> rather than <code>MetricSpace X</code>. (we're relaxing that <code>dist x y = 0 -&gt; x = y</code>)</p>",
        "id": 446422772,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1719152493
    },
    {
        "content": "<p>If I add <code>instance : PolishSpace X := by sorry</code> then we get that instance, but it seems that we don't have all the hypotheses of <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/MetricSpace/Polish.html#PolishSpace.of_separableSpace_completeSpace_metrizable\">PolishSpace.of_separableSpace_completeSpace_metrizable</a></p>",
        "id": 446422774,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1719152495
    },
    {
        "content": "<p>Ah, <code>PolishSpace</code> does hold if I change it to metric spaces.</p>",
        "id": 446422841,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1719152537
    },
    {
        "content": "<p>i may be able to make the lemma work by checking that the inequalities hold for some measurable  superset <code>Z</code> of <code>Y</code>, generated by including all elements with distance 0 from elements in <code>Y</code>?</p>",
        "id": 446422972,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1719152657
    },
    {
        "content": "<p>Feel free to change <code>PseudoMetricSpace X</code> to <code>MetricSpace X</code>. I wanted some parts to be in the generality of pseudo-metric spaces (since the <code>Θ X</code> naturally are pseudo-metric spaces), but you can assume that <code>X</code> is a metric space.</p>",
        "id": 446422981,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1719152669
    },
    {
        "content": "<p>We only want the final result where <code>X</code> is a metric space anyway, so I should probably just assume it almost everywhere...</p>",
        "id": 446423030,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1719152721
    },
    {
        "content": "<p>I will modify it.</p>",
        "id": 446423371,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1719152851
    },
    {
        "content": "<p>maybe wait untill tomorrow, i might be onto something..</p>",
        "id": 446423453,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1719152883
    },
    {
        "content": "<p>i believe that the other inequalities still hold for the \"0-distance closure\" of <code>Y</code>, which would fix the argument i think...</p>",
        "id": 446423645,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1719152985
    },
    {
        "content": "<p>I decided to go ahead and replace <code>PseudoMetricSpace</code> by <code>MetricSpace</code> anyway. I prefer to first do the case we want, and then we can see afterwards whether we can generalize.</p>",
        "id": 446445428,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1719162393
    },
    {
        "content": "<p>that's fine. i'll see if i can avoid using it anyway <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 446445708,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1719162515
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"684366\">Edward van de Meent</span> has marked this topic as resolved.</p>",
        "id": 447002055,
        "sender_full_name": "Notification Bot",
        "timestamp": 1719351113
    }
]