[
    {
        "content": "<p>would it be acceptable to assume the doubling factor <code>A</code> to be nonnegative by definition (has type <code>NNReal</code> rather than <code>Real</code>)? This is provably true for nonempty <code>X</code>, but having it as a type leads to some nicer api</p>",
        "id": 446552180,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1719218623
    },
    {
        "content": "<p>this is also the approach in <code>IsUnifLocDoublingMeasure</code>, which is in Mathlib</p>",
        "id": 446554403,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1719219333
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"684366\">@Edward van de Meent</span> Ah, oops. I thought it followed automatically, but of course I forgot about the empty <code>X</code>.</p>\n<p>I prefer not to change the type of <code>A</code> to <code>NNReal</code>, and for this project I'm definitely happy to assume <code>Nonempty X</code>. The way <code>DoublingMeasure</code> is stated currently, it will not go into Mathlib anyway, so maybe we should just have it extend <code>Nonempty X</code> as well?</p>",
        "id": 446581040,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1719226040
    },
    {
        "content": "<p>is there a reason why you'd rather not change the type?</p>",
        "id": 446581707,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1719226179
    },
    {
        "content": "<p>The statement makes perfect sense for all real numbers <code>A</code>, and if you have a real number, it's annoying that you cannot <em>state</em> something without proving that the number is nonnegative.</p>",
        "id": 446582806,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1719226372
    },
    {
        "content": "<p>In the same way, I find it annoying that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=HolderWith#doc\">docs#HolderWith</a> doesn't use real numbers.</p>",
        "id": 446583007,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1719226405
    },
    {
        "content": "<p>i see... then how about we add a constructor for the class where we allow the number to be any real, giving the corresponding instance for NNReal?</p>",
        "id": 446583297,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1719226452
    },
    {
        "content": "<p>... or <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LipschitzWith#doc\">docs#LipschitzWith</a> ?</p>",
        "id": 446583320,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1719226459
    },
    {
        "content": "<p>Not sure what you mean Edward... I'm not talking about constructing an instance, but stating that it holds.</p>",
        "id": 446583937,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1719226578
    },
    {
        "content": "<p>my point is that for any real <code>A</code>, there is an instance of the class with a nonnegative <code>A</code>.</p>",
        "id": 446584232,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1719226686
    },
    {
        "content": "<p>and you can add api saying that indeed the instance you get is the one you want if you have <code>Nonempty X</code></p>",
        "id": 446584373,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1719226737
    },
    {
        "content": "<p>And then we can state it as <code>DoublingMeasure X (Real.toNNReal A)</code>?<br>\nAlternative proposal: we keep the definition as is, but change all lemmas that require nonnegativity have an argument in <code>NNReal</code>? Or maybe <code>[Fact (0 ≤ A)]</code>?</p>",
        "id": 446584923,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1719226918
    },
    {
        "content": "<p>the reason i prefer working with <code>NNReal</code> in this case is that in my experience, the api for working with <code>ENNReal</code> works better with <code>NNReal</code> than with <code>Real</code>.</p>",
        "id": 446585943,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1719227191
    },
    {
        "content": "<p>That is true... When casting to <code>ENNReal</code> it's much nicer to have <code>NNReal</code>...</p>",
        "id": 446586330,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1719227315
    },
    {
        "content": "<p>We can try to switch.</p>",
        "id": 446586551,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1719227383
    },
    {
        "content": "<p>13 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"442935\" href=\"/#narrow/stream/442935-Carleson/topic/Outstanding.20Tasks.2C.20V1\">#Carleson &gt; Outstanding Tasks, V1</a> by <span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span>.</p>",
        "id": 446587076,
        "sender_full_name": "Notification Bot",
        "timestamp": 1719227565
    }
]