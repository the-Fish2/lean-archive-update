[
    {
        "content": "<p>There appear to be errors in many of the proofs related to the status of the central adjustable parameter <code>a</code> as a real and not a natural number. Earlier I saw that in <code>Θ.finite_and_mk_le_of_le_dist</code> the constant <code>C2_1_1</code> had to be changed from <code>2 ^ (k * a)</code> to <code>2 ^ (k * ⌈a⌉₊)</code>.</p>\n<p>I'm now trying to prove <code>𝓓.dist_strictMono</code> and I have realised that there is no way to conclude the second inequality in (2.1.1) if <code>a</code> is non-integral:</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msub><mi>d</mi><mrow><mi>B</mi><mo stretchy=\"false\">(</mo><mi>c</mi><mo stretchy=\"false\">(</mo><mi>I</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mn>4</mn><msup><mi>D</mi><mrow><mi>s</mi><mo stretchy=\"false\">(</mo><mi>I</mi><mo stretchy=\"false\">)</mo></mrow></msup><mo stretchy=\"false\">)</mo></mrow></msub><mo stretchy=\"false\">(</mo><mi>f</mi><mo separator=\"true\">,</mo><mi>g</mi><mo stretchy=\"false\">)</mo><mo>≤</mo><msup><mn>2</mn><mrow><mo>−</mo><mn>100</mn><mi>a</mi></mrow></msup><msub><mi>d</mi><mrow><mi>B</mi><mo stretchy=\"false\">(</mo><mi>c</mi><mo stretchy=\"false\">(</mo><mi>I</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mn>4</mn><msup><mi>D</mi><mrow><mi>s</mi><mo stretchy=\"false\">(</mo><mi>J</mi><mo stretchy=\"false\">)</mo></mrow></msup><mo stretchy=\"false\">)</mo></mrow></msub><mo stretchy=\"false\">(</mo><mi>f</mi><mo separator=\"true\">,</mo><mi>g</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">d_{B(c(I), 4 D^{s(I)})}(f, g) \\le 2^{-100a} d_{B(c(I), 4D^{s(J)})}(f, g)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1556em;vertical-align:-0.4056em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.4694em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05017em;\">B</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">c</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07847em;\">I</span><span class=\"mclose mtight\">)</span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\">4</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.822em;\"><span style=\"top:-2.822em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5357em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">s</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07847em;\">I</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4056em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2697em;vertical-align:-0.4056em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">100</span><span class=\"mord mathnormal mtight\">a</span></span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.4694em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05017em;\">B</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">c</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07847em;\">I</span><span class=\"mclose mtight\">)</span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\">4</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.822em;\"><span style=\"top:-2.822em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5357em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">s</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.09618em;\">J</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4056em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>This is because although you can iterate (1.0.10), you can only do so a whole number of times, so the best inequality I can get is <code>dist_{c I, 4 * D ^ s I} f g ≤ (dist_{c I, 2 ^ (a * 100 * ⌊a⌋₊) * 4 * D ^ s I} f g) / 2 ^ (100 * ⌊a⌋₊)</code>. There is no way to deduce the floorless version from this, and the floorless version is required to prove <code>𝓓.dist_strictMono</code> since <code>2 ^ (a * 100 * a) = D</code>.</p>\n<p>Can we just make <code>a</code> natural and avoid all these little rounding problems?</p>",
        "id": 448087018,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1719734731
    },
    {
        "content": "<p>Actually the blueprint says that <code>a</code> is natural, but all the definitions assume <code>a</code> is real!<br>\n<a href=\"/user_uploads/3121/RamnVncNvgDxvMpP_P3cqR-P/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/RamnVncNvgDxvMpP_P3cqR-P/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/RamnVncNvgDxvMpP_P3cqR-P/image.png\"></a></div>",
        "id": 448087983,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1719735595
    },
    {
        "content": "<p>I make <code>a</code> and <code>A = 2 ^ a</code> natural in <a href=\"https://github.com/fpvandoorn/carleson/pull/48\">https://github.com/fpvandoorn/carleson/pull/48</a></p>",
        "id": 448103387,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1719744604
    },
    {
        "content": "<p><code>D</code> is natural too but no need to change its type</p>",
        "id": 448103433,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1719744656
    },
    {
        "content": "<p>I assume you already have a partial proof of <code>𝓓.dist_strictMono</code> when <code>a</code> is real, and it got stuck somewhere. If so, can you link to the Lean code for that? I think this might help the maintainers decide which fix is better (there's probably a local fix adding more floors and ceilings).</p>",
        "id": 448257531,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1719821440
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"325367\">Mauricio Collares</span> <a href=\"#narrow/stream/442935-Carleson/topic/Rounding.20errors.20in.20the.20proofs/near/448257531\">said</a>:</p>\n<blockquote>\n<p>I assume you already have a partial proof of <code>𝓓.dist_strictMono</code> when <code>a</code> is real, and it got stuck somewhere. If so, can you link to the Lean code for that? I think this might help the maintainers decide which fix is better (there's probably a local fix adding more floors and ceilings).</p>\n</blockquote>\n<p><a href=\"/user_uploads/3121/zVQCWtLnsIGB8UJN6sIK3hbM/out.diff\">out.diff</a><br>\nStill waiting for Floris or Thiele to merge my pending PRs</p>",
        "id": 448274994,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1719826277
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">Grid</span><span class=\"bp\">.</span><span class=\"n\">dist_strictMono</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"n\">J</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Grid</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hpq</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"n\">J</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Θ</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"n\">dist_</span><span class=\"o\">{</span><span class=\"n\">I</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"n\">C2_1_2</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">dist_</span><span class=\"o\">{</span><span class=\"n\">J</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">key</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">le_cdist_iterate</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"bp\">^</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">defaultD</span><span class=\"o\">]</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">positivity</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">100</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"bp\">⌊</span><span class=\"n\">a</span><span class=\"bp\">⌋₊</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"c1\">-- key : 2 ^ (100 * ⌊a⌋₊) * dist_{I} f g ≤ dist_{I, A ^ (100 * ⌊a⌋₊) * (4 * D ^ s I)} f g</span>\n<span class=\"w\">  </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">le_div_iff'</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">positivity</span><span class=\"o\">)]</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">key</span>\n<span class=\"w\">  </span><span class=\"k\">calc</span>\n<span class=\"w\">    </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"n\">dist_</span><span class=\"o\">{</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"bp\">^</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">      </span><span class=\"n\">cdist_mono</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ball_subset_ball</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">div_eq_inv_mul</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">defaultD</span><span class=\"o\">]</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">gcongr</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">norm_num</span><span class=\"o\">))</span>\n<span class=\"w\">    </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">^</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">100</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">dist_</span><span class=\"o\">{</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"bp\">^</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">J</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">      </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">div_le_iff'</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">positivity</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">mul_comm</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Real</span><span class=\"bp\">.</span><span class=\"n\">rpow_mul</span><span class=\"w\"> </span><span class=\"n\">zero_le_two</span><span class=\"o\">,</span>\n<span class=\"w\">        </span><span class=\"n\">Real</span><span class=\"bp\">.</span><span class=\"n\">rpow_neg</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">positivity</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">div_inv_eq_mul</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">mul_comm</span><span class=\"o\">]</span>\n<span class=\"w\">      </span><span class=\"c1\">-- I am supposed to use `key` here, but `key` cannot be manipulated into this step's inequality</span>\n<span class=\"w\">      </span><span class=\"c1\">-- becuase of the floors and ceilings</span>\n<span class=\"w\">      </span><span class=\"gr\">sorry</span>\n<span class=\"w\">    </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 448275079,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1719826302
    },
    {
        "content": "<p>In the meantime I have made more numbers related to <code>a</code> natural in my PR, with adjustments to the proofs as necessary</p>",
        "id": 448278537,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1719827270
    },
    {
        "content": "<p>Hmm, C2_1_2 is missing floor signs if I understand correctly.</p>",
        "id": 448293702,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1719830801
    },
    {
        "content": "<p>(I'm not informed enough to have an opinion on the relative merits of <code>a</code> being real or natural)</p>",
        "id": 448293880,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1719830847
    },
    {
        "content": "<p>Thanks. I'm fine with changing <code>a</code> to be natural, since it is indeed leading to some translation issues. I'm a bit worried about the casts we now have to fiddle with, but we can cast the numbers to reals eagerly, and then it should mostly be fine.<br>\n<span class=\"user-mention\" data-user-id=\"598052\">@Jeremy Tan</span> I commented on all your PRs. Thanks for your contributions!</p>",
        "id": 448334190,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1719841293
    },
    {
        "content": "<p>i'm going through adapting my proofs to the changes of pull 48 , and as a first comment i'd like to say that it currently seems to be commonly the case that i'd like <code>S</code> to be integer rather than natural, and <code>D</code> to be real. this is because it is common in part 4.1 to do calculations like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>D</mi><mrow><mo>−</mo><mi>S</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">D^{-S}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8413em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">S</span></span></span></span></span></span></span></span></span></span></span></span>, and feed it to <code>ball</code> and the like...</p>",
        "id": 448403198,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1719857672
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"684366\">Edward van de Meent</span> <a href=\"#narrow/stream/442935-Carleson/topic/Rounding.20errors.20in.20the.20proofs/near/448403198\">said</a>:</p>\n<blockquote>\n<p>i'm going through adapting my proofs to the changes of pull 48 , and as a first comment i'd like to say that it currently seems to be commonly the case that i'd like <code>S</code> to be integer rather than natural, and <code>D</code> to be real. this is because it is common in part 4.1 to do calculations like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>D</mi><mrow><mo>−</mo><mi>S</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">D^{-S}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8413em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">S</span></span></span></span></span></span></span></span></span></span></span></span>, and feed it to <code>ball</code> and the like...</p>\n</blockquote>\n<p>If you have to do a coercion do it as early as possible</p>",
        "id": 448404521,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1719858064
    },
    {
        "content": "<p>as early as possible would be changing the type of <code>D</code>... is that what you mean?</p>",
        "id": 448404662,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1719858109
    },
    {
        "content": "<p><code>defaultD_pos</code> for example should cast the RHS to a real explicitly. There are some <code>exact_mod_casts</code> that were added in <a href=\"https://github.com/leanprover-community/mathlib4/pull/48\">#48</a> that I'll be fixing in my next PR</p>",
        "id": 448404805,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1719858142
    },
    {
        "content": "<p><code>lemma defaultD_pos (a : ℕ) : 0 &lt; (defaultD a : ℝ) := by rw [defaultD]; positivity</code></p>",
        "id": 448404971,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1719858194
    },
    {
        "content": "<p>Even though the scale limit <code>S</code> is unrelated to <code>a</code> I made it a natural because negative <code>S</code> is nonsense for the range <code>[-S, S]</code></p>",
        "id": 448405466,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1719858341
    },
    {
        "content": "<p>how do you mean nonsense? negative <code>S</code> is included in that range?</p>",
        "id": 448405649,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1719858390
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"684366\">@Edward van de Meent</span> For now, just write <code>D ^ (- (S : \\Z))</code> manually.</p>",
        "id": 448421124,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1719862698
    },
    {
        "content": "<p>yes, that's what i'm doing for now... i just wanted to mention it so that if we want to change it later, we know what kind of considerations are to be made</p>",
        "id": 448421280,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1719862775
    },
    {
        "content": "<p><code>D^(-S : \\Z)</code> is enough, FWIW</p>",
        "id": 448421895,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1719863041
    },
    {
        "content": "<p>I think you're right that it probably makes sense to define <code>S</code> as an integer.</p>",
        "id": 448422232,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1719863169
    }
]