[
    {
        "content": "<p>There is a <a href=\"https://github.com/fpvandoorn/carleson/blob/master/CONTRIBUTING.md\">CONTRIBUTING</a> file that contains some useful tips. (Some links only work after the current build has completed.)</p>\n<p><strong>Normal-sized tasks</strong>:</p>\n<ol>\n<li><span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> (<strong>Edward van de Meent</strong>) Three simple lemmas about comparing volumes of balls w.r.t. a doubling measure: <a href=\"https://florisvandoorn.com/carleson/docs/Carleson/DoublingMeasure.html#volume_ball_le_same\">carleson#volume_ball_le_same</a>, <a href=\"https://florisvandoorn.com/carleson/docs/Carleson/DoublingMeasure.html#volume_ball_le_of_dist_le\">carleson#volume_ball_le_of_dist_le</a> and <a href=\"https://florisvandoorn.com/carleson/docs/Carleson/DoublingMeasure.html#volume_ball_le_of_subset\">carleson#volume_ball_le_of_subset</a>. These are not explicitly in the blueprint, but will be needed for <a href=\"https://florisvandoorn.com/carleson/blueprint/christsection.html#counting-balls\">Lemma 4.1.1</a> and Lemma 4.1.2.</li>\n<li><span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> (<strong>Jeremy Tan</strong>) <a href=\"https://florisvandoorn.com/carleson/blueprint/overviewsection.html#ball-metric-entropy\">Lemma 2.1.1</a> is a combinatorial lemma. I expect it is easiest to prove <a href=\"https://florisvandoorn.com/carleson/docs/Carleson/Defs.html#%CE%98.mk_le_of_le_dist\">carleson#Œò.mk_le_of_le_dist</a> first and then conclude <a href=\"https://florisvandoorn.com/carleson/docs/Carleson/Defs.html#%CE%98.card_le_of_le_dist\">carleson#Œò.card_le_of_le_dist</a> and <a href=\"https://florisvandoorn.com/carleson/docs/Carleson/Defs.html#%CE%98.finite_of_le_dist\">carleson#Œò.finite_of_le_dist</a> from it.</li>\n<li><span aria-label=\"play\" class=\"emoji emoji-25b6\" role=\"img\" title=\"play\">:play:</span> (<strong>Ruben van de Velde</strong>) <a href=\"https://florisvandoorn.com/carleson/blueprint/overviewsection.html#monotone-cube-metrics\">Lemma 2.1.2</a>: two Lean lemmas about doing some approximations in a metric space.</li>\n<li><span aria-label=\"new\" class=\"emoji emoji-1f195\" role=\"img\" title=\"new\">:new:</span> <a href=\"https://florisvandoorn.com/carleson/blueprint/overviewsection.html#kernel-summand\">Lemma 2.1.3</a>: three Lean lemmas computing bounds on a binary function. It might be useful to also fill some other sorry's in the file <code>Psi.lean</code>.</li>\n<li><span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> (<strong>Jeremy Tan</strong>) A simple combinatorial lemma about balls covering other balls: <a href=\"https://florisvandoorn.com/carleson/docs/find/?pattern=CoveredByBalls.trans#doc\">carleson#CoveredByBalls.trans</a> (used in Lemma 2.1.1)</li>\n<li><span aria-label=\"new\" class=\"emoji emoji-1f195\" role=\"img\" title=\"new\">:new:</span> <a href=\"https://florisvandoorn.com/carleson/blueprint/christsection.html#tile-sum-operator\">Lemma 4.0.3</a>: this requires manipulating some integrals, and also require stating/proving that a bunch more things are integrable.</li>\n<li><span aria-label=\"new\" class=\"emoji emoji-1f195\" role=\"img\" title=\"new\">:new:</span> <a href=\"https://florisvandoorn.com/carleson/blueprint/overviewsection.html#finitary-Carleson\">Proposition 2.0.1</a>: the proof is located above and below Lemma 4.0.3. It is not long, but requires quite some manipulation with integrals.</li>\n<li><span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> (<strong>Jeremy Tan</strong>) Show that <code>ùìì X</code> is almost a <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=SuccOrder#doc\">docs#SuccOrder</a>: Define <a href=\"http://florisvandoorn.com/carleson/docs/Carleson/GridStructure.html#ùìì.succ\"><code>ùìì.succ</code></a> and prove the 4 lemmas below it.</li>\n<li><span aria-label=\"play\" class=\"emoji emoji-25b6\" role=\"img\" title=\"play\">:play:</span> (<strong>Bhavik Mehta</strong>) Define <a href=\"http://florisvandoorn.com/carleson/docs/Carleson/TileExistence.html#ùì©\"><code>ùì©</code></a> by Zorn's lemma and prove the properties about it (up to and including the finiteness and inhabited instances). The finiteness comes from a variant of <a href=\"https://florisvandoorn.com/carleson/docs/Carleson/Defs.html#%CE%98.finite_of_le_dist\"><code>Œò.finite_of_le_dist</code></a>.</li>\n<li><span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> (<strong>Bhavik Mehta</strong>) Prove <a href=\"https://florisvandoorn.com/carleson/blueprint/christsection.html#frequency-ball-cover\">Lemma 4.2.1</a> (simple exercise in a metric space)</li>\n<li><span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> (<strong>Jeremy Tan</strong>) Prove <a href=\"https://florisvandoorn.com/carleson/blueprint/christsection.html#disjoint-frequency-cubes\">Lemma 4.2.2</a> (short, but maybe a bit tricky to use the definitions <code>Œ©‚ÇÅ</code> and <code>Œ©‚ÇÅ_aux</code>)</li>\n<li><span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> (<strong>Jeremy Tan</strong>) Prove <a href=\"https://florisvandoorn.com/carleson/blueprint/christsection.html#frequency-cube-cover\">Lemma 4.2.3</a></li>\n<li><span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> (<strong>Jeremy Tan</strong>) Prove <a href=\"https://florisvandoorn.com/carleson/blueprint/christsection.html#tile-structure\">Lemma 4.0.2</a> from the lemmas in Section 4.2 (quite long, but splits naturally into 5 parts).</li>\n<li><span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> (<strong>Edward van de Meent</strong>) Prove lemma 4.1.1 and 4.1.2.</li>\n<li><span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> (<strong>Jim Portegies</strong>) Proof basic properties about the distribution function <a href=\"https://florisvandoorn.com/carleson/docs/find/?pattern=MeasureTheory.distribution#doc\">carleson#MeasureTheory.distribution</a> up to <a href=\"https://florisvandoorn.com/carleson/docs/find/?pattern=ContinuousLinearMap.distribution_le#doc\">carleson#ContinuousLinearMap.distribution_le</a> .  This requires some simple measure theory. The proofs are in <em>Folland, Real Analysis. section 6.3</em>.</li>\n<li><span aria-label=\"play\" class=\"emoji emoji-25b6\" role=\"img\" title=\"play\">:play:</span> (<strong>Mauricio Collares</strong>) Proof a more general layer-cake principle <a href=\"https://florisvandoorn.com/carleson/docs/find/?pattern=MeasureTheory.lintegral_norm_pow_eq_measure_lt#doc\">carleson#MeasureTheory.lintegral_norm_pow_eq_measure_lt</a> which generalizes <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MeasureTheory.lintegral_comp_eq_lintegral_meas_lt_mul#doc\">docs#MeasureTheory.lintegral_comp_eq_lintegral_meas_lt_mul</a> . Also please prove the three corollaries below. This is <a href=\"https://florisvandoorn.com/carleson/blueprint/sec-hlm.html#layer-cake-representation\">Lemma 9.0.1</a> in the blueprint.</li>\n<li><span aria-label=\"new\" class=\"emoji emoji-1f195\" role=\"img\" title=\"new\">:new:</span> Proof the lemmas about <a href=\"https://florisvandoorn.com/carleson/docs/find/?pattern=MeasureTheory.wnorm#doc\">carleson#MeasureTheory.wnorm</a> and <a href=\"https://florisvandoorn.com/carleson/docs/find/?pattern=MeasureTheory#doc\">carleson#MeasureTheory</a>.MemW‚Ñíp (optional: develop more API, following <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MeasureTheory.snorm#doc\">docs#MeasureTheory.snorm</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MeasureTheory.Lp#doc\">docs#MeasureTheory.Lp</a> and similar notions).</li>\n</ol>\n<p><strong>Large tasks</strong>. I will be splitting up these tasks into smaller subtasks, but feel free to already work on that. It is especially useful if you start by splitting it up by stating all definitions and lemmas.</p>\n<ul>\n<li>L1. <span aria-label=\"play\" class=\"emoji emoji-25b6\" role=\"img\" title=\"play\">:play:</span> (<strong>Floris</strong>) <a href=\"https://florisvandoorn.com/carleson/blueprint/sec-hlm.html\">Chapter 9</a> which proves <a href=\"https://florisvandoorn.com/carleson/blueprint/overviewsection.html#Hardy-Littlewood\">Proposition 2.0.6</a>: Vitali covering and the Hardy-Littlewood maximal equality. Some related things are already in Mathlib, like a special case of the layercake formula. Try to do this in Mathlib-generality, so that it can be added to Mathlib. The versions of the proposition we need for this project have already been stated.</li>\n<li>L2.  <a href=\"https://florisvandoorn.com/carleson/blueprint/liphoel.html\">Chapter 8</a>: H√∂lder cancellative condition proving <a href=\"https://florisvandoorn.com/carleson/blueprint/overviewsection.html#Holder-van-der-Corput\">Proposition 2.0.5</a>.</li>\n<li>L3. <span aria-label=\"play\" class=\"emoji emoji-25b6\" role=\"img\" title=\"play\">:play:</span> (<strong>Edward van de Meent</strong>) Prove <a href=\"https://florisvandoorn.com/carleson/blueprint/christsection.html#grid-existence\">Lemma 4.0.1</a>, the proof is in Section 4.1</li>\n<li>L4.  <span aria-label=\"play\" class=\"emoji emoji-25b6\" role=\"img\" title=\"play\">:play:</span> (<strong>Floris</strong>) <del>Prove <a href=\"https://florisvandoorn.com/carleson/blueprint/christsection.html#tile-structure\">Lemma 4.0.2</a>. The proof is in section 4.2</del> (this is now tasks 8-13).</li>\n<li>L5. <a href=\"https://florisvandoorn.com/carleson/blueprint/overviewsection.html#forest-operator\">Proposition 2.0.4</a> proven in chapter 7.</li>\n<li>L6. <span aria-label=\"play\" class=\"emoji emoji-25b6\" role=\"img\" title=\"play\">:play:</span> (<strong>Mar√≠a In√©s de Frutos Fern√°ndez</strong>) <a href=\"https://florisvandoorn.com/carleson/blueprint/overviewsection.html#antichain-operator\">Proposition 2.0.3</a>, proven in chapter 6.</li>\n<li>L7. <a href=\"https://florisvandoorn.com/carleson/blueprint/overviewsection.html#discrete-Carleson\">Proposition 2.0.2</a>, proven in chapter 5. Beware: We have found some mistakes in the lemmas in chapter 5, which need to be fixed. Some of these are pointed out in the <em>source</em> file for the blueprint</li>\n<li>L8. Prove <a href=\"https://florisvandoorn.com/carleson/blueprint/sect0001.html#metric-space-Carleson\">Carleson's theorem for doubling metric measure spaces</a> from the work done in chapters 4-9. This is done in chapter 3.</li>\n<li>L9. <span aria-label=\"play\" class=\"emoji emoji-25b6\" role=\"img\" title=\"play\">:play:</span> (<strong>Leo Diedering</strong>) Derive the <a href=\"https://florisvandoorn.com/carleson/blueprint/sect0001.html#classical-Carleson\">classical Carleson's theorem</a> from the general version. This is done in chapter 10.</li>\n<li>L10. <span aria-label=\"play\" class=\"emoji emoji-25b6\" role=\"img\" title=\"play\">:play:</span> (<strong>Jim Portegies</strong>) Prove the Real interpolation theorem: <a href=\"https://florisvandoorn.com/carleson/docs/find/?pattern=MeasureTheory.exists_hasStrongType_real_interpolation#doc\">carleson#MeasureTheory.exists_hasStrongType_real_interpolation</a>. This is an important theorem that is not explicitly mentioned in the blueprint, but will be used a few times. The proof can be found in <br>\n<em>Folland, Real Analysis. Modern Techniques and Their Applications, section 6.4, theorem 6.28.</em> It requires quite a lot of analysis and has a 3-page proof.</li>\n</ul>",
        "id": 446097289,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1718980984
    },
    {
        "content": "<p>i'd like to try my hand at some of the lemmas in 4.1. for now i'd like to claim 4.1.1 and 4.1.2</p>",
        "id": 446144677,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1718994550
    },
    {
        "content": "<p>I wonder if there are some \"quick win\" goals that could be used as milestones for the project.  I see that you already have the Hardy-Littlewood maximal inequality in there as an early milestone for instance.  What about say Fejer's theorem for convergence of Cesaro averages of Fourier series - would that be something that could be integrated into the project?  Or some of the other foundational results of Calderon-Zygmund theory?  Or a general form of the Cotlar-Knapp-Stein lemma?</p>",
        "id": 446150069,
        "sender_full_name": "Terence Tao",
        "timestamp": 1718996537
    },
    {
        "content": "<p>Oh, there are definitely some much simpler things we could proof first, along the way, even if they are not strictly needed for the final result. I'm happy to incorporate them to this project as well (although anyone working on them can just as well directly put it into Mathlib)<br>\nI have a separate project where I'm doing some more basic Fourier analysis with some students: <a href=\"https://github.com/fpvandoorn/BonnAnalysis/\">https://github.com/fpvandoorn/BonnAnalysis/</a> <br>\nThat project is mostly to try to formalize interpolation theorems. The real (Marcinkiewicz) interpolation theorem will also be useful for the proof here.</p>",
        "id": 446163951,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1719000727
    },
    {
        "content": "<p>I'm going to try my hand at 2.1.1 and 5.3.4</p>",
        "id": 446220418,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1719031766
    },
    {
        "content": "<p>but how can I actually get 1.0.11 from <code>ProofData</code>? It's an instance so I had to name it</p>",
        "id": 446226507,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1719035784
    },
    {
        "content": "<p>I had a look at 3. Lemma 2.1.2. I was wondering if it's true that <code>(I : Set X) = (J : Set X)</code> implies <code>I = J</code>?</p>",
        "id": 446240563,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1719042422
    },
    {
        "content": "<p>I think so, if the coercion is via a <code>SetLike</code> instance</p>",
        "id": 446246418,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1719045514
    },
    {
        "content": "<p>It's not, it's just a plain coercion: <a href=\"http://florisvandoorn.com/carleson/docs/Carleson/GridStructure.html#instCoe%F0%9D%93%93Set\">http://florisvandoorn.com/carleson/docs/Carleson/GridStructure.html#instCoe%F0%9D%93%93Set</a></p>",
        "id": 446246607,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1719045692
    },
    {
        "content": "<p>then, from what i can tell, no. i can imagine that it would be nice to have though</p>",
        "id": 446250780,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1719048071
    },
    {
        "content": "<p>My question was whether it was true, not if it had been formalized yet</p>",
        "id": 446253199,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1719049716
    },
    {
        "content": "<p>Wouldn't it be equivalent to saying that <code>GridStructure.coeùìì</code> is injective?</p>",
        "id": 446253594,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1719050095
    },
    {
        "content": "<p>it would. which would be exactly the last field needed for a <code>SetLike</code> instance. <br>\nFrom the comment in the declaration of <code>GridStructure</code>, i believe it is something that can safely be assumed.</p>",
        "id": 446254190,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1719050618
    },
    {
        "content": "<p>From what I understand (just discovering the code), it does not follow from the assumptions that are already present but can be safely added to the structure.</p>",
        "id": 446254423,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1719050800
    },
    {
        "content": "<p>yes, exactly</p>",
        "id": 446254450,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1719050825
    },
    {
        "content": "<p>Unless later in proofs, what is really needed is the injectivity of the map from <code>i</code> to <code>(coeùìì i, s i, c i)</code> but for some reason it is useful to have the same set occur at two different scales, or with a different marked center.</p>",
        "id": 446255616,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1719051401
    },
    {
        "content": "<p>Never mind, I retract my prior claim</p>",
        "id": 446268264,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1719059356
    },
    {
        "content": "<p>It is indeed intended that <code>GridStructure.coeùìì</code> is injective. I just added that hypothesis to the structure. Thanks for the correction.<br>\nNote: when <code>s i ‚â† s j</code> then you can already conclude that <code>coeùìì i ‚â† coeùìì j</code>, by <code>ball_subset_ùìì</code> and <code>ùìì_subset_ball</code> (for <code>D &gt; 16</code>, which we will assume)</p>",
        "id": 446268946,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1719059977
    },
    {
        "content": "<p>I have split task L4 into 6 smaller tasks: 8-13. There are plenty of tasks for anyone <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 446285941,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1719070337
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"598052\">Jeremy Tan</span> <a href=\"#narrow/stream/442935-Carleson/topic/Outstanding.20Tasks.2C.20V1/near/446268264\">said</a>:</p>\n<blockquote>\n<p>Never mind, I retract my prior claim</p>\n</blockquote>\n<p>To clarify, does this mean you're unclaiming 2.1.1 and 5.3.4, or is there another claim?</p>",
        "id": 446286056,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1719070415
    },
    {
        "content": "<p>Actually, scrap that. I'll go ahead anyway, nothing is retracted</p>",
        "id": 446287410,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1719071178
    },
    {
        "content": "<p>My first concern though is how to get the blueprint properties in Lean</p>",
        "id": 446287458,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1719071207
    },
    {
        "content": "<p>What do you mean by that? You can get the properties out of <code>ProofData</code> just by using the field names, e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"bp\">‚â§</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">four_le_a</span><span class=\"w\"> </span><span class=\"n\">X</span>\n</code></pre></div>",
        "id": 446288080,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1719071544
    },
    {
        "content": "<p>1.0.11 doesn't seem to have such a field name associated to it, but it's 1am here</p>",
        "id": 446297139,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1719075965
    },
    {
        "content": "<p>1.0.11 is <code>CompatibleFunctions.ballsCoverBalls</code></p>",
        "id": 446298009,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1719076362
    },
    {
        "content": "<p>OK, I think the proof of 2.1.1 is wrong</p>",
        "id": 446367950,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1719117737
    },
    {
        "content": "<p>If I apply 1.0.11 $k$ times with</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">pmul</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">BallsCoverBalls</span><span class=\"bp\">.</span><span class=\"n\">pow_mul</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"bp\">‚Ü¶</span>\n<span class=\"w\">    </span><span class=\"n\">CompatibleFunctions</span><span class=\"bp\">.</span><span class=\"n\">ballsCoverBalls</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">x‚ÇÄ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I only get that the large ball is covered by $2^{ka}$ balls of radius <strong>r</strong>, not <strong>r / 2</strong></p>",
        "id": 446368072,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1719117848
    },
    {
        "content": "<p>Yes 2.1.1 is wrong as stated</p>",
        "id": 446370332,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1719119460
    },
    {
        "content": "<p>You are correct, <code>k</code> should be replaced by <code>k+1</code> in the conclusion.</p>",
        "id": 446396927,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1719135314
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/442935-Carleson/topic/Outstanding.20Tasks.2C.20V1/near/446268946\">said</a>:</p>\n<blockquote>\n<p>It is indeed intended that <code>GridStructure.coeùìì</code> is injective. I just added that hypothesis to the structure. Thanks for the correction.<br>\nNote: when <code>s i ‚â† s j</code> then you can already conclude that <code>coeùìì i ‚â† coeùìì j</code>, by <code>ball_subset_ùìì</code> and <code>ùìì_subset_ball</code> (for <code>D &gt; 16</code>, which we will assume)</p>\n</blockquote>\n<p>Ah indeed I was missing the assumption that <code>D &gt; 16</code>. BTW why did you choose this representation with a family indexed by an embedded type <code>ùìì</code> rather than something like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">in</span>\n<span class=\"kn\">structure</span><span class=\"w\"> </span><span class=\"n\">tile</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">‚Ñù</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">toSet</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Set</span><span class=\"w\"> </span><span class=\"n\">X</span>\n<span class=\"w\">  </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">‚Ñ§</span>\n<span class=\"w\">  </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">X</span>\n<span class=\"w\">  </span><span class=\"n\">ball_subset</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ball</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"bp\">^</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">‚äÜ</span><span class=\"w\"> </span><span class=\"n\">toSet</span>\n<span class=\"w\">  </span><span class=\"n\">subset_ball</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">toSet</span><span class=\"w\"> </span><span class=\"bp\">‚äÜ</span><span class=\"w\"> </span><span class=\"n\">ball</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"bp\">^</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">in</span>\n<span class=\"kn\">class</span><span class=\"w\"> </span><span class=\"n\">GridStructure'</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"n\">Œ∫</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">outParam</span><span class=\"w\"> </span><span class=\"n\">‚Ñù</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">outParam</span><span class=\"w\"> </span><span class=\"n\">‚Ñ§</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">outParam</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">ùìì</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Finset</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">tile</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"n\">range_s_subset</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">‚àÄ</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"bp\">‚àà</span><span class=\"w\"> </span><span class=\"n\">ùìì</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"bp\">.</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"bp\">‚àà</span><span class=\"w\"> </span><span class=\"n\">Icc</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">S</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">S</span>\n<span class=\"w\">  </span><span class=\"c1\">-- ... the other properties</span>\n</code></pre></div>",
        "id": 446397605,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1719135937
    },
    {
        "content": "<p>I'd like to claim 9 and 10</p>",
        "id": 446399095,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1719137099
    },
    {
        "content": "<p>I've made a PR for 10, but 9 is heavily dependent on the precise form that 2.1.1 comes out as, so I'll wait on Jeremy for that to be completed.</p>",
        "id": 446413124,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1719144763
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">large_dist_of_disjoint_balls</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"n\">z'</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Œò</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">x‚ÇÄ</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">}</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Disjoint</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ball_</span><span class=\"o\">{</span><span class=\"n\">x‚ÇÄ</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"n\">Cùì©</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ball_</span><span class=\"o\">{</span><span class=\"n\">x‚ÇÄ</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"n\">z'</span><span class=\"w\"> </span><span class=\"n\">Cùì©</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">Cùì©</span><span class=\"w\"> </span><span class=\"bp\">‚â§</span><span class=\"w\"> </span><span class=\"n\">dist_</span><span class=\"o\">{</span><span class=\"n\">x‚ÇÄ</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"n\">z'</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>This statement would be useful for the construction of ùì© - is it true? (In particular, I think this is used implicitly when proving the finiteness bound on sets satisfying 4.2.1 and 4.2.2</p>",
        "id": 446417312,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1719148003
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"242586\">@Vincent Beffara</span> There are two differences in your approach:<br>\n(1) bundle every cube in the grid into one structure<br>\n(2) Use a <code>Finset</code> instead of an indexing <code>Fintype</code>.</p>\n<p>I must say I didn't do an exhaustive comparison between different representations, and maybe your representation is better. I generally like to work with (indexed) families of objects compared to collections (i.e. a (fin)set), but packaging the elements into a structure might be a good idea...</p>",
        "id": 446419466,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1719149680
    },
    {
        "content": "<p>(a note on terminology: elements in <code>ùìì</code> are called cubes, we also have a <code>TileStructure</code> whose inhabitants are called tiles)</p>",
        "id": 446419517,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1719149723
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> <a href=\"#narrow/stream/442935-Carleson/topic/Outstanding.20Tasks.2C.20V1/near/446413124\">said</a>:</p>\n<blockquote>\n<p>I've made a PR for 10, but 9 is heavily dependent on the precise form that 2.1.1 comes out as, so I'll wait on Jeremy for that to be completed.</p>\n</blockquote>\n<p>If it helps, I just separated out the constant that appears in Lemma 2.1.1. Feel free to work on task 9 using that constant. But maybe you are wondering about the rest of the formulation.</p>",
        "id": 446420405,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1719150422
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"598052\">@Jeremy Tan</span> I fixed the constant for Lemma 2.1.1 in the Lean formalization</p>",
        "id": 446420419,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1719150439
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> <a href=\"#narrow/stream/442935-Carleson/topic/Outstanding.20Tasks.2C.20V1/near/446417312\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">large_dist_of_disjoint_balls</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"n\">z'</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Œò</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">x‚ÇÄ</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">}</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Disjoint</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ball_</span><span class=\"o\">{</span><span class=\"n\">x‚ÇÄ</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"n\">Cùì©</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ball_</span><span class=\"o\">{</span><span class=\"n\">x‚ÇÄ</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"n\">z'</span><span class=\"w\"> </span><span class=\"n\">Cùì©</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">Cùì©</span><span class=\"w\"> </span><span class=\"bp\">‚â§</span><span class=\"w\"> </span><span class=\"n\">dist_</span><span class=\"o\">{</span><span class=\"n\">x‚ÇÄ</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"n\">z'</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>This statement would be useful for the construction of ùì© - is it true? (In particular, I think this is used implicitly when proving the finiteness bound on sets satisfying 4.2.1 and 4.2.2</p>\n</blockquote>\n<p>Oh, good question. That doesn't hold in arbitrary metric spaces... Let me think about it (I will see Christoph Thiele tomorrow, so I can also ask him if I don't figure it out).</p>",
        "id": 446420527,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1719150504
    },
    {
        "content": "<p>I think it doesn't hold as currently stated. But the main usage for the distance is the local oscillation (LHS of (1.0.7)), and so we can probably assume that the distance comes from a seminorm...</p>",
        "id": 446420903,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1719150833
    },
    {
        "content": "<p>I see - I'll leave that as a sorry for now and continue?</p>",
        "id": 446420962,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1719150868
    },
    {
        "content": "<p>If you are thinking about this already - it may alternatively be the case that this isn't needed for \\MCZ, but I think something like it is necessary to transfer from eqn 4.2.2 to something satisfying the preconditions of Lemma 2.1.1. An alternative approach is to note that the proof of Lemma 2.1.1 doesn't need that the distance is large, only that certain balls intersect with Z in limited capacity; so maybe 2.1.1 can be strengthened by relaxing that hypothesis?</p>",
        "id": 446421166,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1719151067
    },
    {
        "content": "<p>Those are good points. This problem might indeed be fixed by strengthening 2.1.1, but I'll discuss it tomorrow, because it might still lead to problems elsewhere.</p>",
        "id": 446421521,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1719151324
    },
    {
        "content": "<p>Things like lower-secant-bound and dirichlet-kernel are marked as green on the blueprint but they don't seem to have attached Lean declarations or proofs. Are these available somewhere?</p>",
        "id": 446421776,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1719151579
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> <a href=\"#narrow/stream/442935-Carleson/topic/Outstanding.20Tasks.2C.20V1/near/446421776\">said</a>:</p>\n<blockquote>\n<p>Things like lower-secant-bound and dirichlet-kernel are marked as green on the blueprint but they don't seem to have attached Lean declarations or proofs. Are these available somewhere?</p>\n</blockquote>\n<p>Good point. <span class=\"user-mention\" data-user-id=\"726665\">@Leo Diedering</span>, could you add <code>\\lean{}</code> commands to every result of chapter 10 that you've stated already in Lean?</p>",
        "id": 446424679,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1719153716
    },
    {
        "content": "<p>Opened <a href=\"https://github.com/fpvandoorn/carleson/pull/35\">PR</a> adding missing <code>\\lean{}</code> placeholders and filling some of them (e.g. <code>lower-secant-bound</code>, but not <code>dirichlet-kernel</code> because I'm not sure if it's supposed to take multiple declarations as arguments).</p>",
        "id": 446429071,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1719155632
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> so I've completed almost all the proof for 2.1.1, except...</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">Œò</span><span class=\"bp\">.</span><span class=\"n\">finite_and_mk_le_of_le_dist</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">x‚ÇÄ</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">‚Ñù</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hr</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Œò</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">‚Ñï</span><span class=\"o\">}</span>\n<span class=\"w\">    </span><span class=\"o\">{</span><span class=\"n\">ùì©</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Set</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Œò</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">)}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hùì©</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ùì©</span><span class=\"w\"> </span><span class=\"bp\">‚äÜ</span><span class=\"w\"> </span><span class=\"n\">ball_</span><span class=\"o\">{</span><span class=\"n\">x‚ÇÄ</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">^</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"o\">))</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">h2ùì©</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">‚àÄ</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"n\">z'</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"bp\">‚àà</span><span class=\"w\"> </span><span class=\"n\">ùì©</span><span class=\"w\"> </span><span class=\"bp\">‚Üí</span><span class=\"w\"> </span><span class=\"n\">z'</span><span class=\"w\"> </span><span class=\"bp\">‚àà</span><span class=\"w\"> </span><span class=\"n\">ùì©</span><span class=\"w\"> </span><span class=\"bp\">‚Üí</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"bp\">‚â†</span><span class=\"w\"> </span><span class=\"n\">z'</span><span class=\"w\"> </span><span class=\"bp\">‚Üí</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"bp\">‚â§</span><span class=\"w\"> </span><span class=\"n\">dist_</span><span class=\"o\">{</span><span class=\"n\">x‚ÇÄ</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"n\">z'</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"n\">ùì©</span><span class=\"bp\">.</span><span class=\"n\">Finite</span><span class=\"w\"> </span><span class=\"bp\">‚àß</span><span class=\"w\"> </span><span class=\"n\">Cardinal</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"w\"> </span><span class=\"n\">ùì©</span><span class=\"w\"> </span><span class=\"bp\">‚â§</span><span class=\"w\"> </span><span class=\"n\">C2_1_1</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">pmul</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">BallsCoverBalls</span><span class=\"bp\">.</span><span class=\"n\">pow_mul</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"bp\">‚Ü¶</span>\n<span class=\"w\">    </span><span class=\"n\">CompatibleFunctions</span><span class=\"bp\">.</span><span class=\"n\">ballsCoverBalls</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">x‚ÇÄ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"n\">f</span>\n<span class=\"w\">  </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">^</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">^</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">ring</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">coveredByBalls_iff</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">pmul</span>\n<span class=\"w\">  </span><span class=\"k\">obtain</span><span class=\"w\"> </span><span class=\"bp\">‚ü®</span><span class=\"n\">ùì©'</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">cùì©'</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">uùì©'</span><span class=\"bp\">‚ü©</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">pmul</span>\n<span class=\"w\">  </span><span class=\"n\">classical</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Œò</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"bp\">‚Üí</span><span class=\"w\"> </span><span class=\"n\">Finset</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Œò</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"bp\">‚Ü¶</span><span class=\"w\"> </span><span class=\"n\">ùì©'</span><span class=\"bp\">.</span><span class=\"n\">filter</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"bp\">‚àà</span><span class=\"w\"> </span><span class=\"n\">ball_</span><span class=\"o\">{</span><span class=\"n\">x‚ÇÄ</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"bp\">¬∑</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">))</span>\n<span class=\"w\">    </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">g_pd</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ùì©</span><span class=\"bp\">.</span><span class=\"n\">PairwiseDisjoint</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"n\">hz</span><span class=\"w\"> </span><span class=\"n\">z'</span><span class=\"w\"> </span><span class=\"n\">hz'</span><span class=\"w\"> </span><span class=\"n\">hne</span><span class=\"w\"> </span><span class=\"bp\">‚Ü¶</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">      </span><span class=\"n\">refine</span><span class=\"w\"> </span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">disjoint_filter</span><span class=\"bp\">.</span><span class=\"n\">mpr</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"n\">hc</span><span class=\"w\"> </span><span class=\"n\">mz</span><span class=\"w\"> </span><span class=\"n\">mz'</span><span class=\"w\"> </span><span class=\"bp\">‚Ü¶</span><span class=\"w\"> </span><span class=\"bp\">?_</span>\n<span class=\"w\">      </span><span class=\"n\">simp_rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">mem_ball</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">mz</span><span class=\"w\"> </span><span class=\"n\">mz'</span>\n<span class=\"w\">      </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">dist_triangle_right</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Œ±</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">WithFunctionDistance</span><span class=\"w\"> </span><span class=\"n\">x‚ÇÄ</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">..</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans_lt</span>\n<span class=\"w\">        </span><span class=\"o\">(</span><span class=\"n\">add_lt_add_of_lt_of_lt</span><span class=\"w\"> </span><span class=\"n\">mz</span><span class=\"w\"> </span><span class=\"n\">mz'</span><span class=\"o\">)</span>\n<span class=\"w\">      </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">add_halves</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">lt_iff_not_le</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">this</span>\n<span class=\"w\">      </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">absurd</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h2ùì©</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"n\">z'</span><span class=\"w\"> </span><span class=\"n\">hz</span><span class=\"w\"> </span><span class=\"n\">hz'</span><span class=\"w\"> </span><span class=\"n\">hne</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">this</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">g_ne</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">‚àÄ</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"bp\">‚àà</span><span class=\"w\"> </span><span class=\"n\">ùì©</span><span class=\"w\"> </span><span class=\"bp\">‚Üí</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Nonempty</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"n\">hz</span><span class=\"w\"> </span><span class=\"bp\">‚Ü¶</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">    </span><span class=\"k\">obtain</span><span class=\"w\"> </span><span class=\"bp\">‚ü®</span><span class=\"n\">c</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">hc</span><span class=\"bp\">‚ü©</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">mem_iUnion</span><span class=\"bp\">.</span><span class=\"n\">mp</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"n\">mem_of_mem_of_subset</span><span class=\"w\"> </span><span class=\"n\">hz</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hùì©</span><span class=\"bp\">.</span><span class=\"n\">trans</span><span class=\"w\"> </span><span class=\"n\">uùì©'</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">mem_iUnion</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">exists_prop</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">hc</span>\n<span class=\"w\">    </span><span class=\"n\">use</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">simpa</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">mem_filter</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">g_injOn</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ùì©</span><span class=\"bp\">.</span><span class=\"n\">InjOn</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"n\">hz</span><span class=\"w\"> </span><span class=\"n\">z'</span><span class=\"w\"> </span><span class=\"n\">hz'</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"bp\">‚Ü¶</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">    </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"bp\">‚â†</span><span class=\"w\"> </span><span class=\"n\">z'</span><span class=\"w\"> </span><span class=\"bp\">‚Üí</span><span class=\"w\"> </span><span class=\"n\">Disjoint</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"n\">z'</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">g_pd</span><span class=\"w\"> </span><span class=\"n\">hz</span><span class=\"w\"> </span><span class=\"n\">hz'</span>\n<span class=\"w\">    </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">‚Üê</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">disjoint_self_iff_empty</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">this</span>\n<span class=\"w\">    </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">not_ne_iff</span><span class=\"bp\">.</span><span class=\"n\">mp</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"bp\">.</span><span class=\"n\">mt</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">nonempty_iff_ne_empty</span><span class=\"bp\">.</span><span class=\"n\">mp</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">g_ne</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"n\">hz</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">g_subset</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"bp\">''</span><span class=\"w\"> </span><span class=\"n\">ùì©</span><span class=\"w\"> </span><span class=\"bp\">‚äÜ</span><span class=\"w\"> </span><span class=\"n\">ùì©'</span><span class=\"bp\">.</span><span class=\"n\">powerset</span><span class=\"bp\">.</span><span class=\"n\">toSet</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">gz</span><span class=\"w\"> </span><span class=\"n\">hgz</span><span class=\"w\"> </span><span class=\"bp\">‚Ü¶</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">    </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">mem_image</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">hgz</span>\n<span class=\"w\">    </span><span class=\"k\">obtain</span><span class=\"w\"> </span><span class=\"bp\">‚ü®</span><span class=\"n\">z</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">hz</span><span class=\"bp\">‚ü©</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">hgz</span>\n<span class=\"w\">    </span><span class=\"n\">simp_rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">coe_powerset</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">mem_preimage</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">mem_powerset_iff</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">coe_subset</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">‚Üê</span><span class=\"w\"> </span><span class=\"n\">hz</span><span class=\"bp\">.</span><span class=\"m\">2</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"o\">,</span>\n<span class=\"w\">      </span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">filter_subset</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">fùì©</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"bp\">''</span><span class=\"w\"> </span><span class=\"n\">ùì©</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Finite</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Finite</span><span class=\"bp\">.</span><span class=\"n\">subset</span><span class=\"w\"> </span><span class=\"n\">ùì©'</span><span class=\"bp\">.</span><span class=\"n\">powerset</span><span class=\"bp\">.</span><span class=\"n\">finite_toSet</span><span class=\"w\"> </span><span class=\"n\">g_subset</span>\n<span class=\"w\">  </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Set</span><span class=\"bp\">.</span><span class=\"n\">finite_image_iff</span><span class=\"w\"> </span><span class=\"n\">g_injOn</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">fùì©</span>\n<span class=\"w\">  </span><span class=\"n\">refine</span><span class=\"w\"> </span><span class=\"bp\">‚ü®</span><span class=\"n\">fùì©</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">?_‚ü©</span>\n<span class=\"w\">  </span><span class=\"n\">lift</span><span class=\"w\"> </span><span class=\"n\">ùì©</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">Finset</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Œò</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">using</span><span class=\"w\"> </span><span class=\"n\">fùì©</span>\n<span class=\"w\">  </span><span class=\"n\">simp_rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Cardinal</span><span class=\"bp\">.</span><span class=\"n\">mk_fintype</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">coe_sort_coe</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Fintype</span><span class=\"bp\">.</span><span class=\"n\">card_coe</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"n\">norm_cast</span>\n<span class=\"w\">  </span><span class=\"n\">classical</span><span class=\"w\"> </span><span class=\"k\">calc</span>\n<span class=\"w\">    </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"bp\">‚àë</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"w\"> </span><span class=\"bp\">‚àà</span><span class=\"w\"> </span><span class=\"n\">ùì©</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">    </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">‚â§</span><span class=\"w\"> </span><span class=\"bp\">‚àë</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"w\"> </span><span class=\"bp\">‚àà</span><span class=\"w\"> </span><span class=\"n\">ùì©</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">sum_le_sum</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"n\">hz</span><span class=\"w\"> </span><span class=\"bp\">‚Ü¶</span><span class=\"w\"> </span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">card_pos</span><span class=\"bp\">.</span><span class=\"n\">mpr</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">g_ne</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"n\">hz</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ùì©</span><span class=\"bp\">.</span><span class=\"n\">biUnion</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">card_biUnion</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"n\">hz</span><span class=\"w\"> </span><span class=\"n\">z'</span><span class=\"w\"> </span><span class=\"n\">hz'</span><span class=\"w\"> </span><span class=\"bp\">‚Ü¶</span><span class=\"w\"> </span><span class=\"n\">g_pd</span><span class=\"w\"> </span><span class=\"n\">hz</span><span class=\"w\"> </span><span class=\"n\">hz'</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n<span class=\"w\">    </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">‚â§</span><span class=\"w\"> </span><span class=\"n\">ùì©'</span><span class=\"bp\">.</span><span class=\"n\">card</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">      </span><span class=\"n\">refine</span><span class=\"w\"> </span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">card_le_card</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"bp\">‚Ü¶</span><span class=\"w\"> </span><span class=\"bp\">?_</span>\n<span class=\"w\">      </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">mem_biUnion</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">h</span>\n<span class=\"w\">      </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">mem_of_subset</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">])</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">choose_spec</span><span class=\"bp\">.</span><span class=\"m\">2</span>\n<span class=\"w\">    </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">‚â§</span><span class=\"w\"> </span><span class=\"bp\">‚åä</span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">^</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"bp\">‚åã‚Çä</span><span class=\"w\"> </span><span class=\"bp\">^</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">cùì©'</span>\n<span class=\"w\">    </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">‚â§</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">      </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">C2_1_1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">mul_comm</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">pow_mul</span><span class=\"o\">]</span>\n<span class=\"w\">      </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">pow_le_pow_left'</span>\n<span class=\"w\">      </span><span class=\"c1\">-- ‚åä2 ^ a‚åã‚Çä ‚â§ 2 ^ ‚åäa‚åã‚Çä - FALSE (take e.g. a = 1.9)</span>\n<span class=\"w\">      </span><span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 446462796,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1719170162
    },
    {
        "content": "<p>At the end of it all it reduces to <code>‚åä2 ^ a‚åã‚Çä ‚â§ 2 ^ ‚åäa‚åã‚Çä</code>, but that is false ‚Äì indeed the reverse inequality is true</p>",
        "id": 446462939,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1719170252
    },
    {
        "content": "<p>can I commit this straight to your repo or do you need to give me permission first?</p>",
        "id": 446463162,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1719170381
    },
    {
        "content": "<p>But if the constant is <code>2 ^ ((k + 1) * (‚åäa‚åã‚Çä + 1))</code> it works</p>",
        "id": 446463282,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1719170443
    },
    {
        "content": "<p>is there a reason why the doubling in <code>DoublingMeasure</code> is about <code>volume.real</code> rather than <code>volume</code> itself?</p>",
        "id": 446465021,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1719171449
    },
    {
        "content": "<p>because i find myself rather using the latter</p>",
        "id": 446465056,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1719171471
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"598052\">Jeremy Tan</span> <a href=\"#narrow/stream/442935-Carleson/topic/Outstanding.20Tasks.2C.20V1/near/446463162\">said</a>:</p>\n<blockquote>\n<p>can I commit this straight to your repo or do you need to give me permission first?</p>\n</blockquote>\n<p>Note that you can always open a PR</p>",
        "id": 446468287,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1719173431
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 446468963,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1719173812
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"598052\">Jeremy Tan</span> <a href=\"#narrow/stream/442935-Carleson/topic/Outstanding.20Tasks.2C.20V1/near/446462939\">said</a>:</p>\n<blockquote>\n<p>At the end of it all it reduces to <code>‚åä2 ^ a‚åã‚Çä ‚â§ 2 ^ ‚åäa‚åã‚Çä</code>, but that is false ‚Äì indeed the reverse inequality is true</p>\n</blockquote>\n<p>In the blueprint, <code>a</code> is a natural number. I suspect it became of type <code>‚Ñù</code> in the formalization to avoid a few casts, which led to unintended side effects.</p>",
        "id": 446469894,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1719174312
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"325367\">Mauricio Collares</span> <a href=\"#narrow/stream/442935-Carleson/topic/Outstanding.20Tasks.2C.20V1/near/446469894\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"598052\">Jeremy Tan</span> <a href=\"#narrow/stream/442935-Carleson/topic/Outstanding.20Tasks.2C.20V1/near/446462939\">said</a>:</p>\n<blockquote>\n<p>At the end of it all it reduces to <code>‚åä2 ^ a‚åã‚Çä ‚â§ 2 ^ ‚åäa‚åã‚Çä</code>, but that is false ‚Äì indeed the reverse inequality is true</p>\n</blockquote>\n<p>In the blueprint, <code>a</code> is a natural number. I suspect it became of type <code>‚Ñù</code> in the formalization to avoid a few casts, which led to unintended side effects.</p>\n</blockquote>\n<p>This is exactly what happened. We're mostly using <code>a</code> as a real number, but then I put the floor in the wrong place. </p>\n<p><span class=\"user-mention\" data-user-id=\"598052\">@Jeremy Tan</span> Thank you for the proof! Can you replace the constant by <code>2 ^ ((k + 1) * ‚åàa‚åâ‚Çä)</code>?</p>",
        "id": 446483161,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1719182257
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"684366\">Edward van de Meent</span> <a href=\"#narrow/stream/442935-Carleson/topic/Outstanding.20Tasks.2C.20V1/near/446465021\">said</a>:</p>\n<blockquote>\n<p>is there a reason why the doubling in <code>DoublingMeasure</code> is about <code>volume.real</code> rather than <code>volume</code> itself?</p>\n</blockquote>\n<p>When starting on this project I was hoping to stay in <code>Real</code> as much as possible. However, that turned out to be less convenient than I hoped.<br>\nPlease add the <code>ENNReal</code> inequality as a lemma</p>",
        "id": 446483366,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1719182441
    },
    {
        "content": "<p>For what it's worth, the PFR project developed some API for <code>Real</code>-valued measures rather than <code>ENNReal</code>-valued measures, see <a href=\"https://teorth.github.io/pfr/docs/PFR/ForMathlib/MeasureReal.html\">https://teorth.github.io/pfr/docs/PFR/ForMathlib/MeasureReal.html</a> .  In principle this is supposed to go into Mathlib eventually, but that's a low priority right now.  But I guess you could import it here if it would be a net help.</p>",
        "id": 446488094,
        "sender_full_name": "Terence Tao",
        "timestamp": 1719186204
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/442935-Carleson/topic/Outstanding.20Tasks.2C.20V1/near/446483161\">said</a>:</p>\n<blockquote>\n<p>Can you replace the constant by <code>2 ^ ((k + 1) * ‚åàa‚åâ‚Çä)</code>?</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">C2_1_1</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">‚Ñï</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">‚Ñù</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">‚Ñï</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">^</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"bp\">‚åà</span><span class=\"n\">a</span><span class=\"bp\">‚åâ‚Çä</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"c1\">-- todo: fix in blueprint</span>\n\n<span class=\"c1\">-- Note: See also/prove card_le_of_le_dist in DoublingMeasure.</span>\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">Œò</span><span class=\"bp\">.</span><span class=\"n\">finite_and_mk_le_of_le_dist</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">x‚ÇÄ</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">‚Ñù</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Œò</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">‚Ñï</span><span class=\"o\">}</span>\n<span class=\"w\">    </span><span class=\"o\">{</span><span class=\"n\">ùì©</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Set</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Œò</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">)}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hùì©</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ùì©</span><span class=\"w\"> </span><span class=\"bp\">‚äÜ</span><span class=\"w\"> </span><span class=\"n\">ball_</span><span class=\"o\">{</span><span class=\"n\">x‚ÇÄ</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">^</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"o\">))</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">h2ùì©</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">‚àÄ</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"n\">z'</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"bp\">‚àà</span><span class=\"w\"> </span><span class=\"n\">ùì©</span><span class=\"w\"> </span><span class=\"bp\">‚Üí</span><span class=\"w\"> </span><span class=\"n\">z'</span><span class=\"w\"> </span><span class=\"bp\">‚àà</span><span class=\"w\"> </span><span class=\"n\">ùì©</span><span class=\"w\"> </span><span class=\"bp\">‚Üí</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"bp\">‚â†</span><span class=\"w\"> </span><span class=\"n\">z'</span><span class=\"w\"> </span><span class=\"bp\">‚Üí</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"bp\">‚â§</span><span class=\"w\"> </span><span class=\"n\">dist_</span><span class=\"o\">{</span><span class=\"n\">x‚ÇÄ</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"n\">z'</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"n\">ùì©</span><span class=\"bp\">.</span><span class=\"n\">Finite</span><span class=\"w\"> </span><span class=\"bp\">‚àß</span><span class=\"w\"> </span><span class=\"n\">Cardinal</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"w\"> </span><span class=\"n\">ùì©</span><span class=\"w\"> </span><span class=\"bp\">‚â§</span><span class=\"w\"> </span><span class=\"n\">C2_1_1</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">pmul</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">BallsCoverBalls</span><span class=\"bp\">.</span><span class=\"n\">pow_mul</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"bp\">‚Ü¶</span>\n<span class=\"w\">    </span><span class=\"n\">CompatibleFunctions</span><span class=\"bp\">.</span><span class=\"n\">ballsCoverBalls</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">x‚ÇÄ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"n\">f</span>\n<span class=\"w\">  </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">^</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">^</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">ring</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">coveredByBalls_iff</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">pmul</span>\n<span class=\"w\">  </span><span class=\"k\">obtain</span><span class=\"w\"> </span><span class=\"bp\">‚ü®</span><span class=\"n\">ùì©'</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">cùì©'</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">uùì©'</span><span class=\"bp\">‚ü©</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">pmul</span>\n<span class=\"w\">  </span><span class=\"n\">classical</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Œò</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"bp\">‚Üí</span><span class=\"w\"> </span><span class=\"n\">Finset</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Œò</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"bp\">‚Ü¶</span><span class=\"w\"> </span><span class=\"n\">ùì©'</span><span class=\"bp\">.</span><span class=\"n\">filter</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"bp\">‚àà</span><span class=\"w\"> </span><span class=\"n\">ball_</span><span class=\"o\">{</span><span class=\"n\">x‚ÇÄ</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"bp\">¬∑</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">))</span>\n<span class=\"w\">    </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">g_pd</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ùì©</span><span class=\"bp\">.</span><span class=\"n\">PairwiseDisjoint</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"n\">hz</span><span class=\"w\"> </span><span class=\"n\">z'</span><span class=\"w\"> </span><span class=\"n\">hz'</span><span class=\"w\"> </span><span class=\"n\">hne</span><span class=\"w\"> </span><span class=\"bp\">‚Ü¶</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">      </span><span class=\"n\">refine</span><span class=\"w\"> </span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">disjoint_filter</span><span class=\"bp\">.</span><span class=\"n\">mpr</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"n\">mz</span><span class=\"w\"> </span><span class=\"n\">mz'</span><span class=\"w\"> </span><span class=\"bp\">‚Ü¶</span><span class=\"w\"> </span><span class=\"bp\">?_</span>\n<span class=\"w\">      </span><span class=\"n\">simp_rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">mem_ball</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">mz</span><span class=\"w\"> </span><span class=\"n\">mz'</span>\n<span class=\"w\">      </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">dist_triangle_right</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Œ±</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">WithFunctionDistance</span><span class=\"w\"> </span><span class=\"n\">x‚ÇÄ</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">..</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans_lt</span>\n<span class=\"w\">        </span><span class=\"o\">(</span><span class=\"n\">add_lt_add_of_lt_of_lt</span><span class=\"w\"> </span><span class=\"n\">mz</span><span class=\"w\"> </span><span class=\"n\">mz'</span><span class=\"o\">)</span>\n<span class=\"w\">      </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">add_halves</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">lt_iff_not_le</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">this</span>\n<span class=\"w\">      </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">absurd</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h2ùì©</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"n\">z'</span><span class=\"w\"> </span><span class=\"n\">hz</span><span class=\"w\"> </span><span class=\"n\">hz'</span><span class=\"w\"> </span><span class=\"n\">hne</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">this</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">g_ne</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">‚àÄ</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"bp\">‚àà</span><span class=\"w\"> </span><span class=\"n\">ùì©</span><span class=\"w\"> </span><span class=\"bp\">‚Üí</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Nonempty</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"n\">hz</span><span class=\"w\"> </span><span class=\"bp\">‚Ü¶</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">    </span><span class=\"k\">obtain</span><span class=\"w\"> </span><span class=\"bp\">‚ü®</span><span class=\"n\">c</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">hc</span><span class=\"bp\">‚ü©</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">mem_iUnion</span><span class=\"bp\">.</span><span class=\"n\">mp</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"n\">mem_of_mem_of_subset</span><span class=\"w\"> </span><span class=\"n\">hz</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hùì©</span><span class=\"bp\">.</span><span class=\"n\">trans</span><span class=\"w\"> </span><span class=\"n\">uùì©'</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">mem_iUnion</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">exists_prop</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">hc</span>\n<span class=\"w\">    </span><span class=\"n\">use</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">simpa</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">mem_filter</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">g_injOn</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ùì©</span><span class=\"bp\">.</span><span class=\"n\">InjOn</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"n\">hz</span><span class=\"w\"> </span><span class=\"n\">z'</span><span class=\"w\"> </span><span class=\"n\">hz'</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"bp\">‚Ü¶</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">    </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"bp\">‚â†</span><span class=\"w\"> </span><span class=\"n\">z'</span><span class=\"w\"> </span><span class=\"bp\">‚Üí</span><span class=\"w\"> </span><span class=\"n\">Disjoint</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"n\">z'</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">g_pd</span><span class=\"w\"> </span><span class=\"n\">hz</span><span class=\"w\"> </span><span class=\"n\">hz'</span>\n<span class=\"w\">    </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">‚Üê</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">disjoint_self_iff_empty</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">this</span>\n<span class=\"w\">    </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">not_ne_iff</span><span class=\"bp\">.</span><span class=\"n\">mp</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"bp\">.</span><span class=\"n\">mt</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">nonempty_iff_ne_empty</span><span class=\"bp\">.</span><span class=\"n\">mp</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">g_ne</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"n\">hz</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">g_subset</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"bp\">''</span><span class=\"w\"> </span><span class=\"n\">ùì©</span><span class=\"w\"> </span><span class=\"bp\">‚äÜ</span><span class=\"w\"> </span><span class=\"n\">ùì©'</span><span class=\"bp\">.</span><span class=\"n\">powerset</span><span class=\"bp\">.</span><span class=\"n\">toSet</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">gz</span><span class=\"w\"> </span><span class=\"n\">hgz</span><span class=\"w\"> </span><span class=\"bp\">‚Ü¶</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">    </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">mem_image</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">hgz</span>\n<span class=\"w\">    </span><span class=\"k\">obtain</span><span class=\"w\"> </span><span class=\"bp\">‚ü®</span><span class=\"n\">z</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">hz</span><span class=\"bp\">‚ü©</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">hgz</span>\n<span class=\"w\">    </span><span class=\"n\">simp_rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">coe_powerset</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">mem_preimage</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">mem_powerset_iff</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">coe_subset</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">‚Üê</span><span class=\"w\"> </span><span class=\"n\">hz</span><span class=\"bp\">.</span><span class=\"m\">2</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"o\">,</span>\n<span class=\"w\">      </span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">filter_subset</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">fùì©</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"bp\">''</span><span class=\"w\"> </span><span class=\"n\">ùì©</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Finite</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Finite</span><span class=\"bp\">.</span><span class=\"n\">subset</span><span class=\"w\"> </span><span class=\"n\">ùì©'</span><span class=\"bp\">.</span><span class=\"n\">powerset</span><span class=\"bp\">.</span><span class=\"n\">finite_toSet</span><span class=\"w\"> </span><span class=\"n\">g_subset</span>\n<span class=\"w\">  </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Set</span><span class=\"bp\">.</span><span class=\"n\">finite_image_iff</span><span class=\"w\"> </span><span class=\"n\">g_injOn</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">fùì©</span>\n<span class=\"w\">  </span><span class=\"n\">refine</span><span class=\"w\"> </span><span class=\"bp\">‚ü®</span><span class=\"n\">fùì©</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">?_‚ü©</span>\n<span class=\"w\">  </span><span class=\"n\">lift</span><span class=\"w\"> </span><span class=\"n\">ùì©</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">Finset</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Œò</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">using</span><span class=\"w\"> </span><span class=\"n\">fùì©</span>\n<span class=\"w\">  </span><span class=\"n\">simp_rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Cardinal</span><span class=\"bp\">.</span><span class=\"n\">mk_fintype</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">coe_sort_coe</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Fintype</span><span class=\"bp\">.</span><span class=\"n\">card_coe</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"n\">norm_cast</span>\n<span class=\"w\">  </span><span class=\"n\">classical</span><span class=\"w\"> </span><span class=\"k\">calc</span>\n<span class=\"w\">    </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"bp\">‚àë</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">‚àà</span><span class=\"w\"> </span><span class=\"n\">ùì©</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">    </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">‚â§</span><span class=\"w\"> </span><span class=\"bp\">‚àë</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"w\"> </span><span class=\"bp\">‚àà</span><span class=\"w\"> </span><span class=\"n\">ùì©</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">sum_le_sum</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"n\">hz</span><span class=\"w\"> </span><span class=\"bp\">‚Ü¶</span><span class=\"w\"> </span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">card_pos</span><span class=\"bp\">.</span><span class=\"n\">mpr</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">g_ne</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"n\">hz</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ùì©</span><span class=\"bp\">.</span><span class=\"n\">biUnion</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">card_biUnion</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"n\">hz</span><span class=\"w\"> </span><span class=\"n\">z'</span><span class=\"w\"> </span><span class=\"n\">hz'</span><span class=\"w\"> </span><span class=\"bp\">‚Ü¶</span><span class=\"w\"> </span><span class=\"n\">g_pd</span><span class=\"w\"> </span><span class=\"n\">hz</span><span class=\"w\"> </span><span class=\"n\">hz'</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n<span class=\"w\">    </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">‚â§</span><span class=\"w\"> </span><span class=\"n\">ùì©'</span><span class=\"bp\">.</span><span class=\"n\">card</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">      </span><span class=\"n\">refine</span><span class=\"w\"> </span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">card_le_card</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"bp\">‚Ü¶</span><span class=\"w\"> </span><span class=\"bp\">?_</span>\n<span class=\"w\">      </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">mem_biUnion</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">h</span>\n<span class=\"w\">      </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">Finset</span><span class=\"bp\">.</span><span class=\"n\">mem_of_subset</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">])</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">choose_spec</span><span class=\"bp\">.</span><span class=\"m\">2</span>\n<span class=\"w\">    </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">‚â§</span><span class=\"w\"> </span><span class=\"bp\">‚åä</span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">^</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"bp\">‚åã‚Çä</span><span class=\"w\"> </span><span class=\"bp\">^</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">cùì©'</span>\n<span class=\"w\">    </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">‚â§</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">      </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">C2_1_1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">mul_comm</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">pow_mul</span><span class=\"o\">]</span>\n<span class=\"w\">      </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">pow_le_pow_left'</span>\n<span class=\"w\">      </span><span class=\"n\">exact_mod_cast</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">floor_le</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">positivity</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">trans</span>\n<span class=\"w\">        </span><span class=\"o\">(</span><span class=\"n\">Real</span><span class=\"bp\">.</span><span class=\"n\">rpow_le_rpow_of_exponent_le</span><span class=\"w\"> </span><span class=\"n\">one_le_two</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">le_ceil</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 446492144,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1719189417
    },
    {
        "content": "<p>I have now proved normal-sized task 5 from the list:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">CoveredByBalls</span><span class=\"bp\">.</span><span class=\"n\">trans</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">CoveredByBalls</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">BallsCoverBalls</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"n\">r'</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">CoveredByBalls</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">r'</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"k\">obtain</span><span class=\"w\"> </span><span class=\"bp\">‚ü®</span><span class=\"n\">b0</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">hb0</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">hs0</span><span class=\"bp\">‚ü©</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">h</span>\n<span class=\"w\">  </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">coveredByBalls_iff</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">‚Ü¶</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"n\">coveredByBalls_iff</span><span class=\"w\"> </span><span class=\"bp\">..</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">))</span>\n<span class=\"w\">  </span><span class=\"n\">classical</span>\n<span class=\"w\">    </span><span class=\"n\">use</span><span class=\"w\"> </span><span class=\"n\">b0</span><span class=\"bp\">.</span><span class=\"n\">biUnion</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">‚Ü¶</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose</span>\n<span class=\"w\">    </span><span class=\"n\">refine</span><span class=\"w\"> </span><span class=\"bp\">‚ü®?_</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">hp</span><span class=\"w\"> </span><span class=\"bp\">‚Ü¶</span><span class=\"w\"> </span><span class=\"bp\">?_‚ü©</span>\n<span class=\"w\">    </span><span class=\"bp\">¬∑</span><span class=\"w\"> </span><span class=\"k\">calc</span>\n<span class=\"w\">        </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">‚â§</span><span class=\"w\"> </span><span class=\"bp\">‚àë</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">‚àà</span><span class=\"w\"> </span><span class=\"n\">b0</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose</span><span class=\"bp\">.</span><span class=\"n\">card</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">card_biUnion_le</span><span class=\"w\"> </span><span class=\"bp\">..</span>\n<span class=\"w\">        </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">‚â§</span><span class=\"w\"> </span><span class=\"bp\">‚àë</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">‚àà</span><span class=\"w\"> </span><span class=\"n\">b0</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">sum_le_sum</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">‚Ü¶</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose_spec</span><span class=\"bp\">.</span><span class=\"m\">1</span>\n<span class=\"w\">        </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">‚â§</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">          </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">sum_const_nat</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">‚Ü¶</span><span class=\"w\"> </span><span class=\"n\">congrFun</span><span class=\"w\"> </span><span class=\"n\">rfl</span><span class=\"o\">]</span>\n<span class=\"w\">          </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">mul_le_mul_right</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">hb0</span>\n<span class=\"w\">    </span><span class=\"bp\">¬∑</span><span class=\"w\"> </span><span class=\"k\">obtain</span><span class=\"w\"> </span><span class=\"bp\">‚ü®</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">hb</span><span class=\"bp\">‚ü©</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Set</span><span class=\"bp\">.</span><span class=\"n\">mem_iUnion‚ÇÇ</span><span class=\"bp\">.</span><span class=\"n\">mp</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hs0</span><span class=\"w\"> </span><span class=\"n\">hp</span><span class=\"o\">)</span>\n<span class=\"w\">      </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">tmp</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose_spec</span><span class=\"bp\">.</span><span class=\"m\">2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">hb</span>\n<span class=\"w\">      </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Set</span><span class=\"bp\">.</span><span class=\"n\">mem_iUnion‚ÇÇ</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">tmp</span><span class=\"w\"> </span><span class=\"bp\">‚ä¢</span>\n<span class=\"w\">      </span><span class=\"k\">obtain</span><span class=\"w\"> </span><span class=\"bp\">‚ü®</span><span class=\"n\">c</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">hc</span><span class=\"bp\">‚ü©</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">tmp</span>\n<span class=\"w\">      </span><span class=\"n\">use</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">mem_biUnion</span><span class=\"o\">]</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">use</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">hc</span>\n</code></pre></div>",
        "id": 446503830,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1719197124
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"657719\">Terence Tao</span> <a href=\"#narrow/stream/442935-Carleson/topic/Outstanding.20Tasks.2C.20V1/near/446488094\">said</a>:</p>\n<blockquote>\n<p>For what it's worth, the PFR project developed some API for <code>Real</code>-valued measures rather than <code>ENNReal</code>-valued measures, see <a href=\"https://teorth.github.io/pfr/docs/PFR/ForMathlib/MeasureReal.html\">https://teorth.github.io/pfr/docs/PFR/ForMathlib/MeasureReal.html</a> .  In principle this is supposed to go into Mathlib eventually, but that's a low priority right now.  But I guess you could import it here if it would be a net help.</p>\n</blockquote>\n<p>Yes, I'm using the same code in this project, though good old-fashioned copy-paste.</p>",
        "id": 446534961,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1719213320
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"598052\">@Jeremy Tan</span> Thanks! Please open pull requests with these lemmas.</p>",
        "id": 446535023,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1719213349
    },
    {
        "content": "<p>but CONTRIBUTING.md says</p>\n<blockquote>\n<p>To publish your changes on Github, you need to be added as a contributor to this repository. Make a Github account if you don't have one already and send your Github account per email to Floris. I will add you.</p>\n</blockquote>\n<p>so do I have to be added as a contributor first?</p>",
        "id": 446543597,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1719215723
    },
    {
        "content": "<p>That is probably just wrong, and you can make a PR from a fork?</p>",
        "id": 446544954,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719216231
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Kim Morrison</span> <span aria-label=\"squared ok\" class=\"emoji emoji-1f197\" role=\"img\" title=\"squared ok\">:squared_ok:</span> <a href=\"https://github.com/fpvandoorn/carleson/pull/38\">https://github.com/fpvandoorn/carleson/pull/38</a></p>",
        "id": 446546443,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1719216732
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"598052\">@Jeremy Tan</span> Thanks for pointing that out. Those are old instructions when there were only a few contributors. Now I think switching to a pull-request model is better. I changed the README file. And thanks for your pull request!</p>",
        "id": 446579847,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1719225801
    },
    {
        "content": "<p>Georges Gonthier is carefully reading the blueprint, and found two simplifications:<br>\n(1) <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span>: We should be able to define <code>ùì©</code> to be a subset of <code>range Q</code> (and then <code>ùì©_subset</code> is reformulated as only covering <code>range Q</code>). This has two advantages:</p>\n<ul>\n<li>It simplifies the finiteness condition: it is a subset of a finite set</li>\n<li>We then get that <code>range ùí¨ ‚äÜ range Q</code>, which should simplify/fix proofs elsewhere.<br>\nPS: I'm quite sure we don't need <code>maximal_ùì©_card</code>, only <code>maximal_ùì©</code>.</li>\n</ul>\n<p>(2) <span class=\"user-mention\" data-user-id=\"556875\">@Pietro Monticone</span> We're probably changing the construction of the grid structure a little bit so that there is only 1 tile at level S  with center <code>o</code> (then we might not cover all of <code>ball o (D ^ S)</code>, but should be able to cover the ball with half the radius, which is good enough). This will simplify proofs elsewhere.</p>",
        "id": 446640801,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1719241872
    },
    {
        "content": "<p>Ah, only covering range Q is super helpful, thanks for pointing that out!</p>",
        "id": 446653766,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1719244691
    },
    {
        "content": "<p>i've finished 4.1.1 and 4.1.2, and made a PR.<br>\nI don't know how to work the blueprint though, so those changes aren't included</p>",
        "id": 446719814,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1719263583
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"684366\">Edward van de Meent</span> <a href=\"#narrow/stream/442935-Carleson/topic/Outstanding.20Tasks.2C.20V1/near/446719814\">said</a>:</p>\n<blockquote>\n<p>i've finished 4.1.1 and 4.1.2, and made a PR.<br>\nI don't know how to work the blueprint though, so those changes aren't included</p>\n</blockquote>\n<p>Great, thanks! I'll make the changes to the blueprint after I merge your PR.</p>",
        "id": 446728786,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1719266968
    },
    {
        "content": "<p>i believe i've gone through all comments on the PR, and it's ready for another review</p>",
        "id": 446817038,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1719305848
    },
    {
        "content": "<p>ah, i see it's been merged <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 446817275,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1719305903
    },
    {
        "content": "<p>i'd like to claim 4.1.3 please</p>",
        "id": 446896631,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1719324859
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"556875\">@Pietro Monticone</span> is also planning to work further section 4.1 (see top post here, task L3). Can you coordinate with him that you're not doing double work?</p>",
        "id": 446903545,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1719326507
    },
    {
        "content": "<p>ah yes, good point...</p>",
        "id": 446903751,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1719326551
    },
    {
        "content": "<p>i'm currently mostly concerned with getting good defs for <code>I1</code>, <code>I2</code>, ...</p>",
        "id": 446903947,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1719326601
    },
    {
        "content": "<p>I'm sorry I've not been fast enough. I am currently very busy with my exams over the next few weeks.</p>",
        "id": 446904461,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1719326729
    },
    {
        "content": "<p><strong>Important Note</strong>: the definition of <a href=\"https://florisvandoorn.com/carleson/docs/find/?pattern=GridStructure#doc\">carleson#GridStructure</a> and <a href=\"https://florisvandoorn.com/carleson/docs/find/?pattern=TileStructure#doc\">carleson#TileStructure</a> just changed, both in Lean and in the blueprint. A GridStructure now has a (unique) maximal element. For a tile structure, we added the condition <code>range ùí¨ ‚äÜ range Q</code>.<br>\nThey now have slightly stronger conditions, but the constructions in chapter 4 should be adapted accordingly.<br>\nThis means that some proofs in chapter 6 will become simpler (this is not yet incorporated in the blueprint).</p>",
        "id": 446904507,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1719326741
    },
    {
        "content": "<p>Don't worry <span class=\"user-mention\" data-user-id=\"556875\">@Pietro Monticone</span>. I understand that everyone only has limited time for this project.<br>\nIf you prefer, Edward can continue on Section 4, and then I'll find another not-analysis-heavy task for you later.</p>",
        "id": 446904834,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1719326817
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/442935-Carleson/topic/Outstanding.20Tasks.2C.20V1/near/446904834\">said</a>:</p>\n<blockquote>\n<p>Don't worry <span class=\"user-mention silent\" data-user-id=\"556875\">Pietro Monticone</span>. I understand that everyone only has limited time for this project.<br>\nIf you prefer, Edward can continue on Section 4, and then I'll find another not-analysis-heavy task for you later.</p>\n</blockquote>\n<p>Sounds good to me.</p>",
        "id": 446905476,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1719326944
    },
    {
        "content": "<p>I added three tasks 15-17 towards the real interpolation theorem. If someone wants a bigger project (but still a lot smaller than a whole chapter of the blueprint) that requires a lot of intergral manipulations, feel free to claim task L10, to prove the real interpolation theorem itself.</p>",
        "id": 446908226,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1719327558
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/442935-Carleson/topic/Outstanding.20Tasks.2C.20V1/near/446908226\">said</a>:</p>\n<blockquote>\n<p>I added three tasks 15-17 towards the real interpolation theorem. If someone wants a bigger project (but still a lot smaller than a whole chapter of the blueprint) that requires a lot of intergral manipulations, feel free to claim task L10, to prove the real interpolation theorem itself.</p>\n</blockquote>\n<p>Hi all, I'm relatively new to lean (but do have some experience with CoQ), I'd love to contribute. Could task 15 be a good place to start?</p>",
        "id": 446910534,
        "sender_full_name": "Jim Portegies",
        "timestamp": 1719328037
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"681784\">@Jim Portegies</span>, welcome! Great to see you here <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 446918481,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1719329662
    },
    {
        "content": "<p>Welcome! Yes, I think task 15 is a good starter task! I think a significant part will be to find the relevant lemmas in the library (e.g. <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MeasureTheory.measure_union_le#doc\">docs#MeasureTheory.measure_union_le</a> ).</p>",
        "id": 446925864,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1719331316
    },
    {
        "content": "<p>Perfect! Could I work on task 15 then?</p>",
        "id": 446932055,
        "sender_full_name": "Jim Portegies",
        "timestamp": 1719332564
    },
    {
        "content": "<p>Yes, I added you to the list!</p>",
        "id": 446942764,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1719335096
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/442935-Carleson/topic/Outstanding.20Tasks.2C.20V1/near/446268946\">said</a>:</p>\n<blockquote>\n<p>It is indeed intended that <code>GridStructure.coeùìì</code> is injective. I just added that hypothesis to the structure. Thanks for the correction.<br>\nNote: when <code>s i ‚â† s j</code> then you can already conclude that <code>coeùìì i ‚â† coeùìì j</code>, by <code>ball_subset_ùìì</code> and <code>ùìì_subset_ball</code> (for <code>D &gt; 16</code>, which we will assume)</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"684366\">@Edward van de Meent</span> I take back what I said above. My argument is invalid. <br>\nIt is true that if <code>s i = s j + 1</code> then <code>coeùìì j ‚äÜ ball (c j) R‚ÇÅ ‚äÜ ball (c i) R‚ÇÇ ‚äÜ coeùìì i</code> with <code>R‚ÇÇ &gt; 2^1596 * R‚ÇÅ</code>. However, that doesn't actually imply that <code>ball (c i) R‚ÇÇ</code> is strictly larger than <code>ball (c j) R‚ÇÅ</code>, since we're just in an (somewhat) arbitrary metric space. I will remove the injectivity of <code>coeùìì</code> later. The pair <code>(coeùìì, s)</code> will be injective. <br>\nThis might require some precision on the formulation of some lemmas.</p>",
        "id": 447004965,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1719352348
    },
    {
        "content": "<p>Ok, I pushed this change. Whenever you see <code>I ‚äÜ J</code> you should probably translate it to <code>I ‚â§ J</code>. Lean now has both notions on <code>ùìì X</code>, but they're <em>not</em> equivalent. (<code>‚â§</code> is stronger)</p>",
        "id": 447010210,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1719354259
    },
    {
        "content": "<p>4.2.2 and 4.2.3 are done <a href=\"https://github.com/fpvandoorn/carleson/pull/43\">https://github.com/fpvandoorn/carleson/pull/43</a></p>",
        "id": 447147956,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1719388061
    },
    {
        "content": "<p>That's great! Thanks! Are you planning to continue on Lemma 4.0.2? No pressure, but if you are, then I'll add your name to it so that nobody else claims it.</p>",
        "id": 447160507,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1719392135
    },
    {
        "content": "<p>I think I'm going to continue on 4.0.2, but already the maths is getting very complicated</p>",
        "id": 447164169,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1719393157
    },
    {
        "content": "<p>Can I try my hand at  Lemma 9.0.1 (<a href=\"https://florisvandoorn.com/carleson/docs/find/?pattern=MeasureTheory.lintegral_norm_pow_eq_measure_lt#doc\">carleson#MeasureTheory.lintegral_norm_pow_eq_measure_lt</a>)?</p>",
        "id": 447202655,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1719404392
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/442935-Carleson/topic/Outstanding.20Tasks.2C.20V1/near/446904507\">said</a>:</p>\n<blockquote>\n<p>This means that some proofs in chapter 6 will become simpler (this is not yet incorporated in the blueprint).</p>\n</blockquote>\n<p>Does this apply to any of the proofs in Section 6.1?</p>",
        "id": 447222725,
        "sender_full_name": "Mar√≠a In√©s de Frutos Fern√°ndez",
        "timestamp": 1719409493
    },
    {
        "content": "<p>My understanding is that <a href=\"https://github.com/fpvandoorn/carleson/commit/7f315072352eb392c7e0c13016de96ba7da50a55\">this commit</a> did these simplifications, so they should be live now. It seems that Section 6.1 was not touched.<br>\nIt is possible that there are still some roundabout arguments. The refactor allows us to conclude from <code>IsMax i</code> that <code>i = topCube</code>. Before there were a few case distinctions when reasoning about these maximal cubes/top cubes.</p>",
        "id": 447224843,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1719410181
    },
    {
        "content": "<p>Second part of tile existence lemma is now done <a href=\"https://github.com/fpvandoorn/carleson/pull/44\">https://github.com/fpvandoorn/carleson/pull/44</a></p>",
        "id": 447516057,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1719504373
    },
    {
        "content": "<p>but man that was insanely tough</p>",
        "id": 447516107,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1719504388
    },
    {
        "content": "<p>Great! Thanks!</p>",
        "id": 447536690,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1719509619
    },
    {
        "content": "<p>I cannot follow the argument here. Shouldn't it be \"Thus, by (4.2.3), there exists <code>z' ‚àà \\mathcal{Z}(I)</code> with <code>x ‚àà B_{I¬∞}(z', 0.7)</code>\", and similarly for the inclusion after that?</p>\n<p><a href=\"/user_uploads/3121/9RaPd5_06-Btx4hegI5GNIsA/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/9RaPd5_06-Btx4hegI5GNIsA/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/9RaPd5_06-Btx4hegI5GNIsA/image.png\"></a></div>",
        "id": 447651633,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1719549063
    },
    {
        "content": "<p>If this step is correct I don't see how Equation (4.2.3) justifies it</p>",
        "id": 447651689,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1719549120
    },
    {
        "content": "<p>(<a href=\"https://github.com/fpvandoorn/carleson/pull/46\">https://github.com/fpvandoorn/carleson/pull/46</a>)</p>",
        "id": 447651796,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1719549204
    },
    {
        "content": "<p>The proof seems to imply that <code>Q(x) = œë</code></p>",
        "id": 447651985,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1719549337
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/442935-Carleson/topic/Outstanding.20Tasks.2C.20V1/near/447004965\">said</a>:</p>\n<blockquote>\n<p>I will remove the injectivity of <code>coeùìì</code> later. The pair <code>(coeùìì, s)</code> will be injective. <br>\nThis might require some precision on the formulation of some lemmas.</p>\n</blockquote>\n<p>I'm going to need the injectivity of <code>coeùìì</code> proper in proving tile existence, otherwise I can't prove <code>I = J</code> that is one of the steps in proving <code>relative_fundamental_dyadic</code></p>",
        "id": 447688183,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1719561187
    },
    {
        "content": "<p>Oh, you indeed couldn't prove <code>I = J</code>, since <code>relative_fundamental_dyadic</code> was still written using <code>‚äÜ</code> instead of <code>‚â§</code>. I fixed that now, and removed the subset notation on <code>ùìì X</code> altogether, so that we are unlikely to make that mistake again. <br>\nAre you now able to prove <code>I = J</code> using the stronger hypothesis in <code>relative_fundamental_dyadic</code>? Note that you can apply <code>le_antisymm</code> for <code>‚â§</code> on <code>ùìì X</code>.<br>\nI'm afraid that we cannot assume injectivity of <code>coeùìì</code>.</p>",
        "id": 447728843,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1719570681
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/442935-Carleson/topic/Outstanding.20Tasks.2C.20V1/near/447728843\">said</a>:</p>\n<blockquote>\n<p>Oh, you indeed couldn't prove <code>I = J</code>, since <code>relative_fundamental_dyadic</code> was still written using <code>‚äÜ</code> instead of <code>‚â§</code>. I fixed that now, and removed the subset notation on <code>ùìì X</code> altogether, so that we are unlikely to make that mistake again. <br>\nAre you now able to prove <code>I = J</code> using the stronger hypothesis in <code>relative_fundamental_dyadic</code>? Note that you can apply <code>le_antisymm</code> for <code>‚â§</code> on <code>ùìì X</code>.<br>\nI'm afraid that we cannot assume injectivity of <code>coeùìì</code>.</p>\n</blockquote>\n<p>Done.</p>",
        "id": 447731986,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1719571788
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> <span aria-label=\"up button\" class=\"emoji emoji-1f53c\" role=\"img\" title=\"up button\">:up_button:</span></p>",
        "id": 447794543,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1719586874
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"325367\">Mauricio Collares</span> <a href=\"#narrow/stream/442935-Carleson/topic/Outstanding.20Tasks.2C.20V1/near/447202655\">said</a>:</p>\n<blockquote>\n<p>Can I try my hand at  Lemma 9.0.1 (<a href=\"https://florisvandoorn.com/carleson/docs/find/?pattern=MeasureTheory.lintegral_norm_pow_eq_measure_lt#doc\">carleson#MeasureTheory.lintegral_norm_pow_eq_measure_lt</a>)?</p>\n</blockquote>\n<p>I just noticed that this is a lot closer to something in Mathlib than I expected (namely <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MeasureTheory.lintegral_rpow_eq_lintegral_meas_le_mul#doc\">docs#MeasureTheory.lintegral_rpow_eq_lintegral_meas_le_mul</a>), which makes it a little less fun. I can do it on Monday if it's still useful, though.</p>",
        "id": 447823724,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1719594045
    },
    {
        "content": "<p>@Mauricio: Oh! I didn't know we had another file with applications of the layercake principle. Then it's indeed a very small task. I don't know precisely what form we need, so probably Mathlib's version is good enough.</p>\n<p>@Jeremy: I don't have time to look at your remaining questions/PR today, I'll come back to you a bit later. Sorry.</p>",
        "id": 447825546,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1719594568
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> well I've solved all my queries. There were some <em>non sequitur</em> steps in the blueprint that I've excised</p>",
        "id": 447975582,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1719667051
    },
    {
        "content": "<p>I have now proved the <strong>entire</strong> tile existence lemma at <a href=\"https://github.com/fpvandoorn/carleson/pull/46\">https://github.com/fpvandoorn/carleson/pull/46</a></p>",
        "id": 447975613,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1719667082
    },
    {
        "content": "<p>I have now completed task 8 in the outstanding tasks list: <a href=\"https://github.com/fpvandoorn/carleson/pull/47\">https://github.com/fpvandoorn/carleson/pull/47</a></p>",
        "id": 448071877,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1719723735
    },
    {
        "content": "<p>(note that PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/47\">#47</a> shuffles the positions/names of some lemmas used in PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/46\">#46</a>, so PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/47\">#47</a> must be merged first)</p>",
        "id": 448088602,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1719736159
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span>  I have just created a PR for task 15. The proof for lemma <code>continuousWithinAt_distribution</code> is very long. I've started exploring a different route too (not included in the PR), that would use a neighborhood basis that would work for every point in <code>ENNReal</code>, however the proof that that is really a neighborhood basis seems to get out of hand. The problem is mostly with case distinction and the fact that I don't know how to do computations conveniently in <code>ENNReal</code>.</p>",
        "id": 448106812,
        "sender_full_name": "Jim Portegies",
        "timestamp": 1719747175
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"598052\">Jeremy Tan</span> <a href=\"#narrow/stream/442935-Carleson/topic/Outstanding.20Tasks.2C.20V1/near/448088602\">said</a>:</p>\n<blockquote>\n<p>(note that PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/47\">#47</a> shuffles the positions/names of some lemmas used in PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/46\">#46</a>, so PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/47\">#47</a> must be merged first)</p>\n</blockquote>\n<p>Actually, scrap that. <a href=\"https://github.com/leanprover-community/mathlib4/pull/46\">#46</a> now includes <a href=\"https://github.com/leanprover-community/mathlib4/pull/47\">#47</a></p>",
        "id": 448110271,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1719749783
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> did you see my completed PRs?</p>",
        "id": 448134682,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1719764245
    },
    {
        "content": "<p>does the blueprint look weird for anyone else?<br>\n<a href=\"/user_uploads/3121/wFzpwbAeVf_XxeqhDvyYRaAy/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/wFzpwbAeVf_XxeqhDvyYRaAy/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/wFzpwbAeVf_XxeqhDvyYRaAy/image.png\"></a></div>",
        "id": 448136276,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1719764898
    },
    {
        "content": "<p>Floris needs to clear the cache again</p>",
        "id": 448136325,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1719764924
    },
    {
        "content": "<p>Yes, I'm trying to fix CI (and move to the proper <code>leanblueprint</code> infrastructure), and I'm having some issues...</p>",
        "id": 448137131,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1719765166
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"598052\">@Jeremy Tan</span> Yes, I've seen them, but I've been fighting with the CI for the last few hours.</p>",
        "id": 448137241,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1719765186
    },
    {
        "content": "<p>Okay, it will stay broken for a while. I'm out of energy to fix this.</p>",
        "id": 448142348,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1719767148
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> your latest commit did work, and the dependency graph is working again</p>",
        "id": 448155330,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1719772552
    },
    {
        "content": "<p>Would it be okay if I start working towards the real interpolation theorem, task L.10?</p>",
        "id": 448345681,
        "sender_full_name": "Jim Portegies",
        "timestamp": 1719843327
    },
    {
        "content": "<p>Yes, that would be amazing!</p>",
        "id": 448348008,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1719843894
    }
]