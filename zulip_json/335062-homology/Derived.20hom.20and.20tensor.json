[
    {
        "content": "<p>Assuming the derived categories PR is fully merged, how far off would defining the derived hom and tensor product be? I guess the biggest roadblock would be making sense of K-projective (cofibrant in projective model structure) and K-injective (fibrant in injective model structure) resolutions? I'd be happy to work on this but I want to make sure no one else has a plan in mind already (and I'm not sure what the right design decision is if we want to handle the noncommutative and commutative cases on equal footing. Should we end up with two different \"RHom\"s over a commutative ring, one a chain complex of modules and one a chain complex of abelian groups?)</p>",
        "id": 435900138,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1714329382
    },
    {
        "content": "<p>Maybe I should first ask about the underived hom and tensor of complexes? (for some reason I thought we had these)</p>",
        "id": 435901002,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1714330275
    },
    {
        "content": "<p>I already have working code for the total right derived functor on the bounded below derived category <code>K^+</code> when we have enough injectives. (I have obtained the Grothendieck spectral sequence for the composition of these.) The technical part was to obtain the CM5 factorization axiom for the model category structure on <code>C^+</code>.</p>",
        "id": 435902531,
        "sender_full_name": "Jo√´l Riou",
        "timestamp": 1714331758
    },
    {
        "content": "<p>My plan for derived functors of several variables is to start with the tensor product. I should obtain very soon the \"flat derivability structure\": roughly speaking (the API will be more general), the inclusion <code>K^-(ModuleCatFlat R) ‚•§ K^-(ModuleCat R)</code> induces an equivalence on the localized categories with respect to quasi-isomorphisms. Using that, we may define derived functors of functors which preserves quasi-isos between bounded above complexes of flat objects. (I have already obtained some technical lemmas, like if <code>f</code> is a morphisms of bicomplexes (with some bounds) such that <code>f</code> induces a quasi-iso on each column, then the induced map on the total complexes is a quasi-iso.)</p>",
        "id": 435902573,
        "sender_full_name": "Jo√´l Riou",
        "timestamp": 1714331766
    },
    {
        "content": "<p>Then, the plan is to obtain the monoidal category structure on the bounded above derived category of modules, and obtain a symmetric <code>Tor</code> bifunctor with long exact sequences on both variables, which would allow the development of local algebra (Koszul complexes, etc.).</p>",
        "id": 435902576,
        "sender_full_name": "Jo√´l Riou",
        "timestamp": 1714331771
    },
    {
        "content": "<p>The API for derived functors in two variables that I am thinking of should be good enough to handle both the case of the derived tensor of a functor that is covariant in both variables (like the tensor product), but also <code>Hom</code>, etc.</p>",
        "id": 435902578,
        "sender_full_name": "Jo√´l Riou",
        "timestamp": 1714331776
    },
    {
        "content": "<p>I have already done some PRs for the extension of functors to bicomplexes <a href=\"https://github.com/leanprover-community/mathlib4/pull/10880\">#10880</a>, compatibilities with shifts <a href=\"https://github.com/leanprover-community/mathlib4/pull/11517\">#11517</a>, etc.</p>",
        "id": 435902585,
        "sender_full_name": "Jo√´l Riou",
        "timestamp": 1714331782
    },
    {
        "content": "<p>(In a more remote future, we may remove <code>+</code> and <code>-</code> in some of the constructions above. The main difficulty is to get suitable resolution lemmas, e.g. every complex admits a <code>K</code>-injective resolution.)</p>",
        "id": 435902588,
        "sender_full_name": "Jo√´l Riou",
        "timestamp": 1714331789
    },
    {
        "content": "<p>Yeah, local algebra is what I wanted this for. But it's tricky to stay within just left or just right bounded complexes for that, imo. Usually we're going to start with right-bounded complexes (projective resolutions of modules) and then as soon as we want to RHom out of these we leave that world</p>",
        "id": 435903081,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1714332301
    },
    {
        "content": "<p>It sounds like this is not going to be finished in the near future, so I'll probably need to stick with juggling Ext groups to prove things about regular sequences for now</p>",
        "id": 435903173,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1714332378
    },
    {
        "content": "<p>(I would be happy to try and add K projective and K injective resolutions, but the rest of the API also seems like it'll take a minute to get set up)</p>",
        "id": 435903200,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1714332409
    },
    {
        "content": "<p>An alternative is to formalize Proposition 3.13 in <a href=\"https://arxiv.org/abs/math/0102087\">https://arxiv.org/abs/math/0102087</a> (I would be <em>very happy</em> not to work on this!).</p>\n<p>(For flat resolutions, I am starting with the <code>C^-</code> case, but <code>K</code>-flat resolutions of unbounded complexes are not so hard to get, as far as I remember.)</p>\n<p>Still, I think that there is already a <em>lot</em> of things to do using only <code>Ext</code> and <code>Tor</code> functor<strong>S</strong>.</p>",
        "id": 435903682,
        "sender_full_name": "Jo√´l Riou",
        "timestamp": 1714332862
    },
    {
        "content": "<p>I have essentially obtained flat resolutions. More precisely, if <code>Œπ : A ‚•§ C</code> is a fully faithful functor from an additive category <code>A</code> to an abelian category <code>C</code> equipped with a functor <code>F : C ‚•§ A</code> (preserving zero maps, but not necessarily additive) and a natural transformation <code>œÄ : F ‚ãô Œπ ‚ü∂ ùü≠ C</code> such that <code>[Epi (œÄ.app X)]</code> for all <code>X</code> (it shall be so with <code>C := ModuleCat R</code> and <code>A</code> the full subcategory of flat modules, using a small modification of the free module functor, and this will also apply to (pre)sheaves of modules), then any bounded above cochain complex in <code>C</code> admits a functorial quasi-iso from a bounded above cochain complex in <code>A</code>. Then, I show that the bounded above derived category of <code>C</code> identifies to the localization of <code>CochainComplex.Minus A</code> with respect to the morphisms which become quasi-isomorphisms in <code>CochainComplex.Minus A</code> <a href=\"https://github.com/leanprover-community/mathlib4/blob/jriou_localization/Mathlib/Algebra/Homology/LeftResolution/DerivabilityStructure.lean#L42\">https://github.com/leanprover-community/mathlib4/blob/jriou_localization/Mathlib/Algebra/Homology/LeftResolution/DerivabilityStructure.lean#L42</a></p>\n<p>It also obviously satisfies the dual assumptions for the constructor of derivability structure I have obtained in <a href=\"https://github.com/leanprover-community/mathlib4/pull/12676\">#12676</a>, so that when I dualize the notion of right derivability structures <a href=\"https://github.com/leanprover-community/mathlib4/pull/12633\">#12633</a> to left derivability structures, we shall get the \"flat\" left derivability structure, and once the suitable API for derived functors is formalized (this depends on <a href=\"https://github.com/leanprover-community/mathlib4/pull/12206\">#12206</a>), it will be possible to derive the tensor product as a functor in two variables.</p>",
        "id": 437168991,
        "sender_full_name": "Jo√´l Riou",
        "timestamp": 1714949173
    }
]