[
    {
        "content": "<p>This PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/10824\">#10824</a> provides analogues for finsupp types of what is already in mathlib for direct sums:</p>\n<ul>\n<li><code>TensorProduct.finsuppLeft</code>, the tensor product of <code>ι →₀ M</code> and <code>N</code> is linearly equivalent to <code>ι →₀ M ⊗[R] N</code></li>\n<li><code>TensorProduct.finsuppScalarLeft</code>, the tensor product of <code>ι →₀ R</code> and <code>N</code> is linearly equivalent to <code>ι →₀ N</code></li>\n<li><code>TensorProduct.finsuppRight</code>, the tensor product of <code>M</code> and <code>ι →₀ N</code> is linearly equivalent to <code>ι →₀ M ⊗[R] N</code></li>\n</ul>\n<p>and several variants with more linearity, behaviour with linear maps/equiv, and the case of add monoid algebras, polynomials in one or several variables. In the latter cases, there are a few lemmas to help computation which proved being useful (if not necessary) in the work with <span class=\"user-mention\" data-user-id=\"406490\">@María Inés de Frutos Fernández</span> .</p>\n<p>However, everything is probably not in a shape to be acceptable as such, maybe the proofs can be golfed, hence comments are useful.</p>\n<p>This PR is necessary for the study of polynomial maps and the theory of divided powers that we develop with <span class=\"user-mention\" data-user-id=\"406490\">@María Inés de Frutos Fernández</span> .</p>",
        "id": 428235796,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1711064447
    },
    {
        "content": "<p>Does it have any overlap with my PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/11155\">#11155</a>?</p>",
        "id": 428273990,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1711092828
    },
    {
        "content": "<p>Ah no, I'm doing <code>PiTensorProduct</code>s and you're doing <code>TensorProduct</code>s. Pity.</p>",
        "id": 428274190,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1711092939
    },
    {
        "content": "<p>Mathematically, they're all particular cases of what PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/11155\">#11155</a> says, which is:<br>\n<code>PiTensorProduct.finsuppPiTensorProduct</code>: If <code>ι</code> is a <code>Fintype</code>, <code>κ</code> i is a family of types indexed by <code>ι</code> and <code>M i</code> is a family of <code>R</code>-modules indexed by <code>ι</code>, then the tensor product of the family <code>κ i →₀ M</code> i is linearly equivalent to <code>∏ i, κ i →₀ ⨂[R] i, M i</code>.<br>\nBut in Lean, we'll very probably need to have separate statements for all the useful particular cases.</p>",
        "id": 428274473,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1711093090
    },
    {
        "content": "<p>Do I have this <code>Fintype</code> assumption on <code>ι</code>?</p>",
        "id": 428275394,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1711093584
    },
    {
        "content": "<p>In any case, what I really need is the connexion with polynomials and multivariate polynomials, that gives way to compute in things such as <code>S[X] ⨂[R] M</code>.</p>",
        "id": 428275478,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1711093643
    },
    {
        "content": "<p>I'm doing <code>PiTensorProduct</code>, the <code>ι</code> is indexing the factors of the tensor product. You're doing tensor products, so your <code>ι</code> is <code>Fin 2</code>. So yes, you have the <code>Fintype</code> assumption. What you call <code>ι</code> is what I call  <code>κ i</code>, and there is no <code>Fintype</code> assumption on that. (Also, I'm pretty sure the result I quoted is false if <code>ι</code> is not finite.)</p>",
        "id": 428275890,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1711093843
    },
    {
        "content": "<p>Hmm, that makes me really want to have <code>Finsupp</code> be an <code>abbrev</code> of <code>DFinsupp</code></p>",
        "id": 428278320,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711094951
    },
    {
        "content": "<p>Looking at the definition of <code>DFinsupp</code>, it makes me want to rewrite it to be more like <code>Finsupp</code> ! (And then make <code>Finsupp</code> an <code>abbrev</code> of it.)</p>",
        "id": 428278747,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1711095154
    },
    {
        "content": "<p>I much prefer the implementation of DFinsupp to Finsupp...</p>",
        "id": 428292151,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711100181
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2310824.20Tensor.20products.20of.20finsupp.20types/near/428278320\">said</a>:</p>\n<blockquote>\n<p>Hmm, that makes me really want to have <code>Finsupp</code> be an <code>abbrev</code> of <code>DFinsupp</code></p>\n</blockquote>\n<p>I think much like the <code>BilinForm</code> refactor, this is too much work to do at once. I think the first step would be to change <code>Basis</code> to use <code>DFinsupp</code> instead of <code>Finsupp</code>.</p>",
        "id": 428293887,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711100778
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2310824.20Tensor.20products.20of.20finsupp.20types/near/428292151\">said</a>:</p>\n<blockquote>\n<p>I much prefer the implementation of DFinsupp to Finsupp...</p>\n</blockquote>\n<p>I'll trust you on this. It just looks more intimidating to me at first glance.</p>",
        "id": 428297813,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1711102153
    },
    {
        "content": "<p>What I would really like to change if I had infinite time would be the implementation of <code>PiTensorProduct</code> to have, for example, infinite coproducts in the category of commutative rings. But it would mean defining restricted tensor products (because the \"correct\" infinite tensor product depends on the context), hence restricted products (dependent functions that take values in a fixed subtype for all but finitely many entries) which is a generalization of <code>DFinsupp</code>, and I'm already imtimidated by <code>DFinsupp</code>...</p>",
        "id": 428300896,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1711103356
    },
    {
        "content": "<p>I have updated the files following the merge of <a href=\"https://github.com/leanprover-community/mathlib4/pull/11635\">#11635</a>.<br>\nHowever, there is a “noisy” compilation error that appears within the compilation of two files by <span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> , and I couldn't sort out where they came from.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"mi\">3543</span><span class=\"bp\">/</span><span class=\"mi\">4378</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Mathlib.Algebra.Lie.CartanMatrix</span>\n<span class=\"n\">stdout</span><span class=\"o\">:</span>\n<span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">AddHom.toFun_eq_coe</span><span class=\"o\">,</span> <span class=\"n\">LinearMap.coe_toAddHom</span><span class=\"o\">,</span> <span class=\"n\">LinearEquiv.coe_coe</span><span class=\"o\">,</span> <span class=\"n\">LinearMap.compr₂_apply</span><span class=\"o\">,</span> <span class=\"n\">mk_apply</span><span class=\"o\">,</span>\n  <span class=\"n\">lift.equiv_apply</span><span class=\"o\">,</span> <span class=\"n\">LieHom.lie_apply</span><span class=\"o\">,</span> <span class=\"n\">LinearMap.sub_apply</span><span class=\"o\">,</span> <span class=\"n\">lie_tmul_right</span><span class=\"o\">,</span> <span class=\"n\">map_add</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"mi\">3544</span><span class=\"bp\">/</span><span class=\"mi\">4378</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Mathlib.Algebra.Lie.Semisimple</span>\n</code></pre></div>",
        "id": 432423435,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1712731955
    },
    {
        "content": "<p>I’ll take a quick look before I start my day job but it’s likely I won’t have a chance to resolve this till this evening.</p>",
        "id": 432424019,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1712732113
    },
    {
        "content": "<p>Thanks, but this is not absolutely urgent — this message was also a subliminal way of asking my own file to be reviewed ;-)</p>",
        "id": 432424772,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1712732303
    },
    {
        "content": "<p>Maybe the simplest way would by to enrich the <code>stdout</code> tag comment by the file/line which is presently compiled.</p>",
        "id": 432425183,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1712732396
    },
    {
        "content": "<p>Maybe you can <code>grep 'simp\\?' $(git ls-files '*.lean')</code> and it gives you some idea?</p>",
        "id": 432425910,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712732537
    },
    {
        "content": "<p>Or just search for <code>simp?</code> in the PR: <a href=\"https://github.com/leanprover-community/mathlib4/pull/10824/files#diff-0615e461a4e24b3f491bc780488cd152a1369a0c687c62e7dfa47f2708588e11R91\">https://github.com/leanprover-community/mathlib4/pull/10824/files#diff-0615e461a4e24b3f491bc780488cd152a1369a0c687c62e7dfa47f2708588e11R91</a></p>",
        "id": 432433244,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1712734502
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2310824.20Tensor.20products.20of.20finsupp.20types/near/432425910\">said</a>:</p>\n<blockquote>\n<p>Maybe you can <code>grep 'simp\\?' $(git ls-files '*.lean')</code> and it gives you some idea?</p>\n</blockquote>\n<p>Thanks: this was very helpful to me (though at least for my version of <code>grep</code> I needed to drop the escaping backslash before <code>?</code>).</p>",
        "id": 432433514,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1712734571
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span> I pushed a commit fixing your <code>simp?</code>. I now have to drop a car to a mechanic and then start my day job. I'll try to look at this PR for review over the weekend. Thanks for doing it!</p>",
        "id": 432433831,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1712734641
    },
    {
        "content": "<p>Thanks for your help! I'm sorry to see I was responsible for that.</p>",
        "id": 432433967,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1712734669
    },
    {
        "content": "<p>No need to be sorry: the benefit from all your awesome work is 1000x worth it!</p>",
        "id": 432434185,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1712734722
    },
    {
        "content": "<p>I have split <a href=\"https://github.com/leanprover-community/mathlib4/pull/10824\">#10824</a> in three sub pull requests:</p>\n<ul>\n<li><del>#12292 : tensor product of a monoid algebra and a module</del></li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/12293\">#12293</a> : tensor product of a mv polynomial algebra and a module</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/12294\">#12294</a> : tensor product of a univariate polynomial algebra and a module<br>\nIn all cases, the goal is to define the relevant linear equivalence (from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=TensorProduct.finsuppLeft#doc\">docs#TensorProduct.finsuppLeft</a>) and to define some lemmas that allow to manipulate it (for example, behaviour with coefficients, etc.).<br>\nThe case of univariate polynomial algebras is more delicate because the <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finsupp#doc\">docs#Finsupp</a> is hidden in the type.</li>\n</ul>",
        "id": 434525997,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1713639514
    },
    {
        "content": "<p>I don't think we're at 6-digit PRs yet</p>",
        "id": 434526184,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1713639719
    },
    {
        "content": "<p>The PR 12292 does not look so useful (I don't need it) so I closed it.</p>",
        "id": 437040022,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1714845502
    }
]