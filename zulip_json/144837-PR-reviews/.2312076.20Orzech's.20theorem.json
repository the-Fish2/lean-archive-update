[
    {
        "content": "<p>... which state that if</p>\n<ul>\n<li><code>R</code> is a ring (not necessarily commutative) and <code>M</code> is a Noetherian <code>R</code>-module (based on the proof in &lt;<a href=\"https://math.stackexchange.com/a/1066128/235999\">https://math.stackexchange.com/a/1066128/235999</a>&gt;), or</li>\n<li><code>R</code> is a commutative ring and <code>M</code> is a finitely generated <code>R</code>-module (based on the proof in &lt;<a href=\"https://math.stackexchange.com/a/1066110/235999\">https://math.stackexchange.com/a/1066110/235999</a>&gt;),</li>\n</ul>\n<p>if <code>N</code> is a submodule of <code>M</code>, <code>f : N -&gt; M</code> is a surjective <code>R</code>-module homomorphism, then it is also injective.</p>\n<p>This PR is ready for review. Comments welcome.</p>",
        "id": 435482234,
        "sender_full_name": "Jz Pan",
        "timestamp": 1714087565
    },
    {
        "content": "<p>Now I'm stuck with a universe level problem: if <code>R : Type u</code> is a semiring, <code>M : Type v</code> is a finitely generated <code>R</code>-module, can I find a module <code>M' : Type u</code> which is isomorphic to <code>M</code>? I know this is true if <code>R</code> is a ring, in this case I can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap.quotKerEquivRange#doc\">docs#LinearMap.quotKerEquivRange</a>. But what if it's only a semiring?</p>",
        "id": 436128391,
        "sender_full_name": "Jz Pan",
        "timestamp": 1714420796
    },
    {
        "content": "<p>You still have a surjection <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>R</mi><mi>n</mi></msup><mo>→</mo><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">R ^ n \\to M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> so <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=small_of_surjective#doc\">docs#small_of_surjective</a> should give you a <code>M' : Type u</code>, and you can transfer the module instance via <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Equiv.module#doc\">docs#Equiv.module</a>.</p>",
        "id": 436129284,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1714421089
    },
    {
        "content": "<p>This is true, but this requires to establish the analogue of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap.quotKerEquivRange#doc\">docs#LinearMap.quotKerEquivRange</a> for semirings. (The principle is that you have a surjective map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mspace></mspace><mspace width=\"0.1111em\"/><mo lspace=\"0em\" rspace=\"0.17em\"></mo><mtext> ⁣</mtext><mo lspace=\"0em\" rspace=\"0em\">:</mo><mspace width=\"0.3333em\"/><msup><mi>R</mi><mi>n</mi></msup><mo>→</mo><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">p\\colon R^n\\to M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mspace nobreak\"></span><span class=\"mspace\" style=\"margin-right:0.1111em;\"></span><span class=\"mpunct\"></span><span class=\"mspace\" style=\"margin-right:-0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mrel\">:</span></span><span class=\"mspace\" style=\"margin-right:0.3333em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span>, and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> is the quotient of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>R</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">R^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> by the equivalence relation defined bty <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>.)</p>",
        "id": 436129302,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1714421095
    },
    {
        "content": "<p>You can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finsupp.span_eq_range_total#doc\">docs#Finsupp.span_eq_range_total</a>. Probably we should add some instances from FG / FiniteType to Small.</p>",
        "id": 436129602,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1714421195
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"439483\">Andrew Yang</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2312076.20Orzech's.20theorem/near/436129284\">said</a>:</p>\n<blockquote>\n<p>You still have a surjection <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>R</mi><mi>n</mi></msup><mo>→</mo><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">R ^ n \\to M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> so <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=small_of_surjective#doc\">docs#small_of_surjective</a> should give you a <code>M' : Type u</code>, and you can transfer the module instance via <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Equiv.module#doc\">docs#Equiv.module</a>.</p>\n</blockquote>\n<p>using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=equivShrink#doc\">docs#equivShrink</a>, for example!</p>",
        "id": 436133365,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1714422579
    },
    {
        "content": "<p>I found <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Module.Finite.exists_fin%27#doc\">docs#Module.Finite.exists_fin'</a>, but why it requires the semiring be commutative?</p>",
        "id": 436133889,
        "sender_full_name": "Jz Pan",
        "timestamp": 1714422753
    },
    {
        "content": "<p>I can't believe this hypothesis is necessary…</p>",
        "id": 436136148,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1714423583
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2312076.20Orzech's.20theorem/near/436136148\">said</a>:</p>\n<blockquote>\n<p>I can't believe this hypothesis is necessary…</p>\n</blockquote>\n<p>It's not necessary, but its proof uses <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Module.piEquiv#doc\">docs#Module.piEquiv</a> which I think requires <code>R</code> being commutative <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 436137900,
        "sender_full_name": "Jz Pan",
        "timestamp": 1714424252
    },
    {
        "content": "<p>fixed the <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Module.Finite.exists_fin%27#doc\">docs#Module.Finite.exists_fin'</a> as <a href=\"https://github.com/leanprover-community/mathlib4/pull/12524\">#12524</a></p>",
        "id": 436139358,
        "sender_full_name": "Jz Pan",
        "timestamp": 1714424744
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"366779\">Jz Pan</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2312076.20Orzech's.20theorem/near/436133889\">said</a>:</p>\n<blockquote>\n<p>I found <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Module.Finite.exists_fin%27#doc\">docs#Module.Finite.exists_fin'</a>, but why it requires the semiring be commutative?</p>\n</blockquote>\n<p>The answer to this question is almost always: “this is historical accident, the person who wrote that lemma only had the commutative case in mind”.</p>",
        "id": 436140185,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714425054
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"366779\">Jz Pan</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2312076.20Orzech's.20theorem/near/436139358\">said</a>:</p>\n<blockquote>\n<p>fixed the <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Module.Finite.exists_fin%27#doc\">docs#Module.Finite.exists_fin'</a> as <a href=\"https://github.com/leanprover-community/mathlib4/pull/12524\">#12524</a></p>\n</blockquote>\n<p>Looks like you changed too much (explicit args became implicit)</p>",
        "id": 436140557,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1714425229
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2312076.20Orzech's.20theorem/near/436140557\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"366779\">Jz Pan</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2312076.20Orzech's.20theorem/near/436139358\">said</a>:</p>\n<blockquote>\n<p>fixed the <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Module.Finite.exists_fin%27#doc\">docs#Module.Finite.exists_fin'</a> as <a href=\"https://github.com/leanprover-community/mathlib4/pull/12524\">#12524</a></p>\n</blockquote>\n<p>Looks like you changed too much (explicit args became implicit)</p>\n</blockquote>\n<p>Oops, I'll check later. I have not noticed that these arguments are implicit.</p>",
        "id": 436141943,
        "sender_full_name": "Jz Pan",
        "timestamp": 1714425739
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"439483\">Andrew Yang</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2312076.20Orzech's.20theorem/near/436129284\">said</a>:</p>\n<blockquote>\n<p>you can transfer the module instance via <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Equiv.module#doc\">docs#Equiv.module</a>.</p>\n</blockquote>\n<p>I suspect that <code>import Mathlib.Logic.Equiv.TransferInstance</code> will import too many irrelevant files...</p>",
        "id": 436156755,
        "sender_full_name": "Jz Pan",
        "timestamp": 1714431819
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2312076.20Orzech's.20theorem/near/436140185\">said</a>:</p>\n<blockquote>\n<p>The answer to this question is almost always: “this is historical accident, the person who wrote that lemma only had the commutative case in mind”.</p>\n</blockquote>\n<p>For good reasons (that are unpractical in classical paper mathematics), mathlib can have each result in its more or less optimal generality. In some cases, that will require a huge work to semiringify things that are not written, to the point that it is not clear whether this is a good move to suggest or not. (We had an example with quotients here, the API for quotients of modules should be rewritten to include semirings and equivalence relations, and the same happens for direct limits. This is quite unrewarding work, and it will only be done with a more explicit support of the community…)</p>",
        "id": 436306210,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1714493198
    },
    {
        "content": "<p>The semiring vs ring discussion is a bit different. The case at hand was about commutativity, unless I misunderstood.</p>",
        "id": 436308388,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714493826
    },
    {
        "content": "<p>Changes are done according to the review. Comments welcome.</p>",
        "id": 436339530,
        "sender_full_name": "Jz Pan",
        "timestamp": 1714505237
    },
    {
        "content": "<p><strong>ping</strong> Re-request review for <a href=\"https://github.com/leanprover-community/mathlib4/pull/12076\">#12076</a></p>",
        "id": 438192046,
        "sender_full_name": "Jz Pan",
        "timestamp": 1715527582
    },
    {
        "content": "<p>Why are there so many changes in imports?</p>",
        "id": 438192847,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1715528472
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2312076.20Orzech's.20theorem/near/438192847\">said</a>:</p>\n<blockquote>\n<p>Why are there so many changes in imports?</p>\n</blockquote>\n<p>Regarding the import problem, I just blindly apply the suggestions from the linter. See <a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/8899968610/job/24440454539\">this</a> and <a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/8900452412/job/24442044383\">this</a>. I could revert all these changes after I finish submitting another PR.</p>",
        "id": 438199807,
        "sender_full_name": "Jz Pan",
        "timestamp": 1715535415
    },
    {
        "content": "<p>What is nice is that Orzech's theorem allows to revisit the strong rank condition.<br>\nI added a few general comments.  Some imports seem to be useless. <br>\nIt is probably worth having a dual construction to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap.tunnel#doc\">docs#LinearMap.tunnel</a></p>",
        "id": 438199904,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1715535513
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2312076.20Orzech's.20theorem/near/438199904\">said</a>:</p>\n<blockquote>\n<p>Some imports seem to be useless. </p>\n</blockquote>\n<p>No, that doesn't work, see the latest build status.</p>\n<p>I think the reason is that the imports in <code>Mathlib/LinearAlgebra/FreeModule/StrongRankCondition.lean</code> is changed, it imports an earlier file instead, which is suggested by <code>shake</code>. I think all of them should work if this is reverted. But then <code>shake</code> will complain that I shouldn't import that file.</p>",
        "id": 438304377,
        "sender_full_name": "Jz Pan",
        "timestamp": 1715589250
    },
    {
        "content": "<p>I reverted all the import changes. Now it complains about unused imports &lt;<a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/9068131272/job/24914720154\">test · leanprover-community/mathlib4@52b7102 (github.com)</a>&gt;:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>Warning: ././././Mathlib/RingTheory/FiniteType.lean:7:1: warning: unused import (use `lake exe shake --fix` to fix this, or `lake exe shake --update` to ignore)\n././././Mathlib/RingTheory/FiniteType.lean:\n  remove #[Mathlib.Algebra.Polynomial.Module.Basic]\n  instead\n    import [Mathlib.Algebra.Polynomial.Module.Basic] in Mathlib.LinearAlgebra.AnnihilatingPolynomial\nWarning: ././././Mathlib/LinearAlgebra/FreeModule/StrongRankCondition.lean:6:1: warning: unused import (use `lake exe shake --fix` to fix this, or `lake exe shake --update` to ignore)\nWarning: ././././Mathlib/LinearAlgebra/FreeModule/StrongRankCondition.lean:7:1: warning: import #[Mathlib.RingTheory.FiniteType] instead\n././././Mathlib/LinearAlgebra/FreeModule/StrongRankCondition.lean:\n  remove #[Mathlib.LinearAlgebra.Charpoly.Basic]\n  add #[Mathlib.RingTheory.FiniteType]\n  instead\n    import [Mathlib.RingTheory.Ideal.LocalRing] in Mathlib.LinearAlgebra.Dual\n    import [Mathlib.RingTheory.Ideal.LocalRing] in Mathlib.FieldTheory.Tower\n    import [Mathlib.RingTheory.Algebraic, Mathlib.FieldTheory.Minpoly.Basic] in Mathlib.FieldTheory.IntermediateField\n    import [Mathlib.LinearAlgebra.Matrix.Charpoly.Coeff] in Mathlib.LinearAlgebra.Trace\n    import [Mathlib.RingTheory.Ideal.LocalRing] in Mathlib.Topology.Algebra.Module.FiniteDimension\n    import [Mathlib.LinearAlgebra.Dimension.Constructions] in Mathlib.LinearAlgebra.FreeModule.IdealQuotient\n    import [Mathlib.LinearAlgebra.Dimension.StrongRankCondition] in Mathlib.LinearAlgebra.FreeAlgebra\n</code></pre></div>\n<p>What should I do now?</p>",
        "id": 438431061,
        "sender_full_name": "Jz Pan",
        "timestamp": 1715627981
    },
    {
        "content": "<p>Without any guarantee of success, I would try what is indicated in another branch, if that works, PR it, and see afterwards.</p>",
        "id": 438432291,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1715628431
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2312076.20Orzech's.20theorem/near/438432291\">said</a>:</p>\n<blockquote>\n<p>Without any guarantee of success, I would try what is indicated in another branch, if that works, PR it, and see afterwards.</p>\n</blockquote>\n<p>I already tried and was worked, but that was you and Kevin complained about.</p>",
        "id": 438432696,
        "sender_full_name": "Jz Pan",
        "timestamp": 1715628593
    },
    {
        "content": "<p>So now there are 2 choices: should we modify the imports for these several files, or add exceptions to that two files? Or there are other ways to solve it?</p>",
        "id": 438432979,
        "sender_full_name": "Jz Pan",
        "timestamp": 1715628688
    },
    {
        "content": "<p>I was only worried about the imports because it made the PR much harder to review (there were over 10 files which had imports changed). I hadn't realised that you were making mathlib <em>less</em> importy!</p>",
        "id": 438441000,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1715631666
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"366779\">Jz Pan</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2312076.20Orzech's.20theorem/near/438432696\">said</a>:</p>\n<blockquote>\n<p>I already tried and was worked, but that was you and Kevin complained about.</p>\n</blockquote>\n<p>I am sorry to have formulated my question so that it could be heard as a complaint.</p>",
        "id": 438505169,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1715665667
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2312076.20Orzech's.20theorem/near/438199904\">said</a>:</p>\n<blockquote>\n<p>It is probably worth having a dual construction to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap.tunnel#doc\">docs#LinearMap.tunnel</a></p>\n</blockquote>\n<p>I have briefly checked the current proof in mathlib. It seems that the only results directly used outside that file is about <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap.tailing#doc\">docs#LinearMap.tailing</a>, and seems that it only used in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsNoetherian.equivPUnitOfProdInjective#doc\">docs#IsNoetherian.equivPUnitOfProdInjective</a> . It says that if <code>M × N</code> embeds into <code>M</code>, for <code>M</code> noetherian over <code>R</code>, then <code>N</code> is trivial. This is also a corollary of Orzech's theorem: in this case the surjective projection map <code>M × N -&gt; M</code> must be also injective, which implies <code>N</code> being trivial.</p>",
        "id": 439460160,
        "sender_full_name": "Jz Pan",
        "timestamp": 1716146161
    },
    {
        "content": "<p>Currently I'm confusing with the decision of definition <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap.tunnel#doc\">docs#LinearMap.tunnel</a> and<br>\n<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap.tailing#doc\">docs#LinearMap.tailing</a> : why their definitions involve the product <code>M × N</code>? Seems that they are specially designed for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsNoetherian.equivPUnitOfProdInjective#doc\">docs#IsNoetherian.equivPUnitOfProdInjective</a> which mentions <code>M × N</code>.</p>\n<p>But for current dual notations, I have no reason to mention the product <code>M × N</code>. Any suggestions?</p>",
        "id": 439460526,
        "sender_full_name": "Jz Pan",
        "timestamp": 1716146431
    },
    {
        "content": "<p>I suspect that the definition of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap.tunnel#doc\">docs#LinearMap.tunnel</a> could be changed to reflect the needs in the proof of Orzech's theorem. Namely, replace the injective <code>f : M × N →ₗ[R] M</code> with the injective <code>f : N →ₗ[R] M</code>, and replace the natural projection <code>M × N →ₗ[R] M</code> with the surjective <code>g : N →ₗ[R] M</code>. Then it should be the thing used in Orzech's proof.</p>\n<p>The definition of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap.tailing#doc\">docs#LinearMap.tailing</a> can be kept unchanged (but adapt to the change of <code>LinearMap.tunnel</code>), so the remainingg files need not to be changed.</p>",
        "id": 439464592,
        "sender_full_name": "Jz Pan",
        "timestamp": 1716150531
    },
    {
        "content": "<p>The disadvantage is that the signature of the new <code>LinearMap.tunnel</code> is not compatible with the old one, which breaks the outside projects using <code>LinearMap.tunnel</code>. What should I do?</p>",
        "id": 439466189,
        "sender_full_name": "Jz Pan",
        "timestamp": 1716152220
    },
    {
        "content": "<p>Mathlib makes no claims of backwards compatibility</p>",
        "id": 439467213,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716153311
    },
    {
        "content": "<p>If you're willing to be cautious, you can add a comment to the file to explain the change , but it is unlikely that this tunnel thing has been used.</p>",
        "id": 439469179,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1716155215
    },
    {
        "content": "<p>Sorry but I think my claim was wrong. Orzech's construction is not a direct generalization of <code>LinearMap.tunnel</code>, although they looks very similar.</p>",
        "id": 439476022,
        "sender_full_name": "Jz Pan",
        "timestamp": 1716162542
    },
    {
        "content": "<p>Done. I removed <code>LinearMap.tunnel</code> and <code>LinearMap.tailing</code>, added <code>LinrearMap.iterateMapComap</code> for the substitution. But I think <code>LinrearMap.iterateMapComap</code> should be moved to an earlier file instead, since it's unrelated to product. Which file should it belong to?</p>",
        "id": 439660836,
        "sender_full_name": "Jz Pan",
        "timestamp": 1716232134
    },
    {
        "content": "<p>I've checked that all the things about <code>LinrearMap.iterateMapComap</code>  can be put into the file <code>Mathlib.Algebra.Module.Submodule.Map</code> where the <code>Submodule.[co]map</code> is defined, except for the last result <code>ker_le_of_iterateMapComapAux_eq</code> which mentions <code>LinearMap.ker</code> which is not defined until <code>Mathlib.Algebra.Module.Submodule.Ker</code>. But should we put them into a new separated file?</p>",
        "id": 439664692,
        "sender_full_name": "Jz Pan",
        "timestamp": 1716233415
    },
    {
        "content": "<p>I don't believe that iterateMapComap will be used very often, I indeed believe it does deserve a separate file.</p>",
        "id": 439704136,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1716250213
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2312076.20Orzech's.20theorem/near/439704136\">said</a>:</p>\n<blockquote>\n<p>I don't believe that iterateMapComap will be used very often, I indeed believe it does deserve a separate file.</p>\n</blockquote>\n<p>Done.</p>",
        "id": 439879654,
        "sender_full_name": "Jz Pan",
        "timestamp": 1716316997
    },
    {
        "content": "<p>Any other comments?</p>",
        "id": 439879682,
        "sender_full_name": "Jz Pan",
        "timestamp": 1716317007
    },
    {
        "content": "<p><em>ping</em> request for a re-review</p>",
        "id": 440930064,
        "sender_full_name": "Jz Pan",
        "timestamp": 1716849587
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"366779\">@Jz Pan</span> Can you please explain why so many imports changed?</p>",
        "id": 441023019,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1716897318
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2312076.20Orzech's.20theorem/near/441023019\">said</a>:</p>\n<blockquote>\n<p>Can you please explain why so many imports changed?</p>\n</blockquote>\n<p>Not this question again... <a href=\"#narrow/stream/144837-PR-reviews/topic/.2312076.20Orzech's.20theorem/near/438431061\">https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/.2312076.20Orzech's.20theorem/near/438431061</a></p>",
        "id": 441023849,
        "sender_full_name": "Jz Pan",
        "timestamp": 1716897603
    },
    {
        "content": "<p>I feel like this PR is doing many things at once, which makes it hard for me to wrap my head around what is happening</p>",
        "id": 441026125,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1716898335
    },
    {
        "content": "<p>Do you think there is a way to split it into two pieces?</p>",
        "id": 441026184,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1716898362
    },
    {
        "content": "<p>Let me try. Maybe first to add <code>OrzechProperty</code>, another one to replace the old proof of <code>StrongRankCondition</code> with new one.</p>",
        "id": 441026758,
        "sender_full_name": "Jz Pan",
        "timestamp": 1716898559
    },
    {
        "content": "<p>The unused import thing makes this PR noisy, though.</p>",
        "id": 441026913,
        "sender_full_name": "Jz Pan",
        "timestamp": 1716898617
    },
    {
        "content": "<p>Yes, I think adding <code>OrzechProperty</code> should be a rather clean PR.</p>",
        "id": 441027203,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1716898709
    },
    {
        "content": "<p>And then the refactor, and yes that might come with some import changes. But that should be a lot easier to digest in that PR.</p>",
        "id": 441027282,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1716898739
    },
    {
        "content": "<p>Split the first part as PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/13322\">#13322</a>. Comments welcome.</p>",
        "id": 441107791,
        "sender_full_name": "Jz Pan",
        "timestamp": 1716927182
    },
    {
        "content": "<p>The plan is to have Orzech's theorem in a second PR, and a refactoring of the IBN in a third one?</p>",
        "id": 441148398,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1716948841
    },
    {
        "content": "<p>Thanks for the split!</p>",
        "id": 441167105,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1716960377
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2312076.20Orzech's.20theorem/near/441148398\">said</a>:</p>\n<blockquote>\n<p>The plan is to have Orzech's theorem in a second PR, and a refactoring of the IBN in a third one?</p>\n</blockquote>\n<p>Probably yes. I think this is the best plan.</p>",
        "id": 441191957,
        "sender_full_name": "Jz Pan",
        "timestamp": 1716971482
    },
    {
        "content": "<p>Part 2 is ready for review <a href=\"https://github.com/leanprover-community/mathlib4/pull/13425\">#13425</a>. Comments welcome.</p>",
        "id": 441824700,
        "sender_full_name": "Jz Pan",
        "timestamp": 1717197361
    },
    {
        "content": "<p>I left a comment about the removed API for tunnels.</p>",
        "id": 442156474,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1717394829
    },
    {
        "content": "<p>Now comes the final PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/12076\">#12076</a> for refactoring existing parts of mathlib.</p>\n<p>Basically there are three changes. I'd like to ask for opinions about these changes:</p>\n<ul>\n<li><code>Module.Finite.injective_of_surjective_endomorphism</code> is proved via <code>OrzechProperty.injective_of_surjective_endomorphism</code> since we already proved that commutative rings have <code>OrzechProperty</code>. I mark it as <code>deprecated</code> and asks the user to use <code>OrzechProperty.injective_of_surjective_endomorphism</code> instead. But I don't know if it's a good idea, since each time you use it there will run an inference <code>CommRing -&gt; OrzechProperty</code>.</li>\n<li><code>commRing_strongRankCondition</code> is proved via <code>inferInstance</code> since we know that commutative rings have <code>OrzechProperty</code>, and any nontrivial ring satisfying <code>OrzechProperty</code> also satisfies <code>StrongRankCondition</code>. So basically now the file <code>Mathlib/LinearAlgebra/FreeModule/StrongRankCondition.lean</code> only contains <code>commRing_strongRankCondition := inferInstance</code>. Is it a good idea to remove this file completely?</li>\n<li><code>LinearMap.tunnel</code> and <code>LinearMap.tailing</code> are removed since they are not used by mathlib anymore. But there could be external projects using them. Should we leave them in mathlib for backward compatibility? Note that I don't have strong opinion to remove them, so leave them here is OK for me.</li>\n</ul>\n<p>Also, due to the change of proof, some imports in the corresponding files become unnecessary, as reported by <code>shake</code>. This makes the change of imports in a lot of files. Probably I need to recheck these import changes.</p>",
        "id": 442608611,
        "sender_full_name": "Jz Pan",
        "timestamp": 1717529171
    },
    {
        "content": "<p>Why not putting the old material in <code>Archive</code>?</p>",
        "id": 442631980,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1717536600
    },
    {
        "content": "<p>I would suggest just deprecating tunnel and tail.</p>",
        "id": 442666194,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1717549514
    },
    {
        "content": "<p>Yes, just add a comment at the top of that file explaining that there is no use for the material anymore, and add <code>@[deprecated (since := ...)]</code> to the declerations.<br>\nThen we can delete the file some time in the future.</p>",
        "id": 442730528,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1717577846
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2312076.20Orzech's.20theorem/near/442730528\">said</a>:</p>\n<blockquote>\n<p>Yes, just add a comment at the top of that file explaining that there is no use for the material anymore, and add <code>@[deprecated (since := ...)]</code> to the declerations.<br>\nThen we can delete the file some time in the future.</p>\n</blockquote>\n<p>There is a problem: if I mark the definition as deprecated, then the following results cannot be compiled, the compiler will complain that I used deprecated declarations.</p>",
        "id": 442872188,
        "sender_full_name": "Jz Pan",
        "timestamp": 1717615511
    },
    {
        "content": "<p>You can add a set_option to turn off the warnings</p>",
        "id": 442882222,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1717618330
    },
    {
        "content": "<p>Or you can try out the <code>update_deprecations</code> script!  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 442886201,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717619408
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2312076.20Orzech's.20theorem/near/442886201\">said</a>:</p>\n<blockquote>\n<p>Or you can try out the <code>update_deprecations</code> script!  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n</blockquote>\n<p>No, that's unrelated to my question. I want to mark all results about <code>LinearMap.tunnel</code> as deprecated, including the definition <code>LinearMap.tunnel</code> itself. By the way, they have no replacements, so <code>update_deprecations</code> does not work for them.</p>",
        "id": 442914384,
        "sender_full_name": "Jz Pan",
        "timestamp": 1717627076
    },
    {
        "content": "<p>Yes, just turn of the deprecation linter in that file, right after the comment that explains the file is obsolete and will be removed in the future.</p>",
        "id": 442977428,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1717654848
    },
    {
        "content": "<p>They are marked as deprecated in <a href=\"https://github.com/leanprover-community/mathlib4/pull/12076\">#12076</a>. Comments welcome.</p>",
        "id": 443027079,
        "sender_full_name": "Jz Pan",
        "timestamp": 1717670667
    },
    {
        "content": "<p>Very nice! borsificated</p>",
        "id": 443027304,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1717670776
    }
]