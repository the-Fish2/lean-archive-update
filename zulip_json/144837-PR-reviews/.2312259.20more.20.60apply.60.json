[
    {
        "content": "<p>I noticed there are quite a few places where we have tactic uses of the type</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">refine</span> <span class=\"n\">foo</span> <span class=\"n\">bar</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n</code></pre></div>\n<p>with varying amounts of \"?_\" (and also the <code>refine'</code> variant of this)<br>\nwhich can be simplified to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">apply</span> <span class=\"n\">foo</span> <span class=\"n\">bar</span>\n</code></pre></div>\n<p>Is there a reason to prefer <code>refine foo ?_</code> over <code>apply foo</code>, when it it possible to make that replacement? <br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/12259\">#12259</a> is the pull request on that.</p>",
        "id": 434310442,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1713514213
    },
    {
        "content": "<p>Seems reasonable to me. Run <code>!bench</code> as sometimes there are weird performance differences between <code>refine</code> and <code>apply</code>.</p>",
        "id": 434311593,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713514636
    },
    {
        "content": "<p>!bench already started...</p>",
        "id": 434311692,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1713514678
    },
    {
        "content": "<p>I don't think that's an improvement</p>",
        "id": 434313785,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1713515434
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2312259.20more.20.60apply.60/near/434313785\">said</a>:</p>\n<blockquote>\n<p>I don't think that's an improvement</p>\n</blockquote>\n<p>Independent of the amount of underscores? I guess it is a question of taste, but </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">refine'</span> <span class=\"n\">liftR_map_last</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>is a bit verbose, isn't it?<br>\nI made this change with three commits, </p>\n<ul>\n<li>three or more underscores</li>\n<li>two underscores</li>\n<li>one underscore<br>\nso it would be simple to only do the \"three or more underscores\" part...</li>\n</ul>",
        "id": 434314521,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1713515719
    },
    {
        "content": "<p>Won't <code>apply</code> try to automatically fill in everything it can (only leaving the goals it can't manage), while <code>refine</code> explicitly knows which ones it should try to synthesise and which ones it should leave open? So it seems likely that there would be a nontrivial performance penalty in replacing every <code>refine foo ?_</code> with <code>apply foo</code>. </p>\n<p>This doesn't apply to <code>refine'</code>, but my understanding is that <code>refine'</code> is tech debt from mathlib3 and will eventually be gotten rid of anyway...</p>",
        "id": 434315424,
        "sender_full_name": "David Loeffler",
        "timestamp": 1713516077
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"481963\">David Loeffler</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2312259.20more.20.60apply.60/near/434315424\">said</a>:</p>\n<blockquote>\n<p>Won't <code>apply</code> try to automatically fill in everything it can (only leaving the goals it can't manage), while <code>refine</code> explicitly knows which ones it should try to synthesise and which ones it should leave open? So it seems likely that there would be a nontrivial performance penalty in replacing every <code>refine foo ?_</code> with <code>apply foo</code>. </p>\n</blockquote>\n<p>If we trust <code>!bench</code>, there were \"no significant changes\"</p>",
        "id": 434321883,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1713518457
    },
    {
        "content": "<p>At least in cases where we have two or more <code>?_</code> holes, I think replacing <code>refine</code> with <code>apply</code> is  a regression: when reading the code, we lose track of how many new goals are supposed to be generated.</p>",
        "id": 434323198,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1713518933
    },
    {
        "content": "<p>see my comments in the pr:<br>\nThere are 2745 matches for <code>apply.*\\n *·</code>, so it seems in those cases there is more than one goal left. Seeing that I replace more than an order of magnitude less occurences of the corresponding <code>refine</code>, I'd argue the <code>apply</code> with multiple goals is currently the more common approach.<br>\nThe reader can also see how many new goals are created by looking at the well structured indented \"<code>·</code>\", so having this information also in the number of underscores is redundant, but of course a question of taste.</p>",
        "id": 434323595,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1713519071
    },
    {
        "content": "<p>Ok, since there is (at least) three people who don't think that is an improvement, perhaps it is best to close the pr. I didn't think it would be controversial to replace verbose statements with lots of holes like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">refine</span> <span class=\"n\">ciInf_le_of_le</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n</code></pre></div>\n<p>by a simple </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">apply</span> <span class=\"n\">ciInf_le_of_le</span>\n</code></pre></div>\n<p>but apparently it is. </p>\n<p><span class=\"user-mention\" data-user-id=\"311453\">@Frédéric Dupuis</span> Note that even in the style guide there is an example of <code>apply</code> of what could be a refine with two holes: <br>\n<a href=\"https://github.com/leanprover-community/leanprover-community.github.io/blob/276abfcea3614f9763f35406eaec757438833032/templates/contribute/style.md?plain=1#L136\">https://github.com/leanprover-community/leanprover-community.github.io/blob/276abfcea3614f9763f35406eaec757438833032/templates/contribute/style.md?plain=1#L136</a></p>",
        "id": 434675403,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1713771290
    },
    {
        "content": "<blockquote>\n<p>The reader can also see how many new goals are created by looking at the well structured indented \"<code>·</code>\", so having this information also in the number of underscores is redundant, but of course a question of taste.</p>\n</blockquote>\n<p>A little redundancy is a good thing, to signal intent. I think it's fine choosing not to have this redundancy in what you write yourself, but I'm wary of a PR that imposes a particular taste on the whole repository — I feel like a proper review would involve looking at every single change and evaluating whether the original author had a particular reason to use <code>refine</code> over <code>apply</code>.</p>\n<p>Sometimes I think we should even go in an even more redundant direction, writing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">refine</span> <span class=\"n\">ciInf_le_of_le</span> <span class=\"bp\">?</span><span class=\"n\">bdd</span> <span class=\"bp\">?</span><span class=\"n\">c</span> <span class=\"bp\">?</span><span class=\"n\">le</span>\n<span class=\"n\">case</span> <span class=\"n\">bdd</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">...</span>\n<span class=\"n\">case</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">...</span>\n<span class=\"n\">case</span> <span class=\"n\">le</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">...</span>\n</code></pre></div>\n<p>to communicate the proof structure better.</p>\n<p>There are two related PRs that I believe would be uncontroversial:</p>\n<ol>\n<li>Replace every <code>refine</code> that results in just a single goal with an <code>apply</code></li>\n<li>Replace every <code>refine'</code> with an equivalent <code>refine</code></li>\n</ol>",
        "id": 434680592,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713772797
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2312259.20more.20.60apply.60/near/434680592\">said</a>:</p>\n<blockquote>\n<ol>\n<li>Replace every <code>refine</code> that results in just a single goal with an <code>apply</code></li>\n</ol>\n</blockquote>\n<p>I assume you mean this in the case where the <code>apply</code> also produces a single goal, because it's not a drop in replacement and sometimes kicks up typeclass goals and the like</p>",
        "id": 434683098,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713773438
    },
    {
        "content": "<p>personally I prefer <code>refine</code> over <code>apply</code> in almost all circumstances because <code>apply</code> elaborates a bit ambiguously</p>",
        "id": 434683328,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713773499
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2312259.20more.20.60apply.60/near/434680592\">said</a>:</p>\n<blockquote>\n<p>There are two related PRs that I believe would be uncontroversial:</p>\n<ol>\n<li>Replace every <code>refine</code> that results in just a single goal with an <code>apply</code></li>\n</ol>\n</blockquote>\n<p>easy to do, because they were separate commit already: <a href=\"https://github.com/leanprover-community/mathlib4/pull/12331\">#12331</a>.<br>\nOf course only in those cases where it works, as pointed out by <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> . Also from reading his comment, I sense that even this is not uncontroversial...</p>\n<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2312259.20more.20.60apply.60/near/434680592\">said</a>:</p>\n<blockquote>\n<ol start=\"2\">\n<li>Replace every <code>refine'</code> with an equivalent <code>refine</code></li>\n</ol>\n</blockquote>\n<p>Also controversial: seems like we want to post-pone that because we a good test bed for a new global replacement tool: see <br>\n<a href=\"#narrow/stream/287929-mathlib4/topic/reviewdog/near/434389568\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/reviewdog/near/434389568</a><br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/12274\">https://github.com/leanprover-community/mathlib4/pull/12274</a></p>",
        "id": 434684431,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1713773801
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"313038\">Moritz Firsching</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2312259.20more.20.60apply.60/near/434684431\">said</a>:</p>\n<blockquote>\n<p>Also controversial: seems like we want to post-pone that because we a good test bed for a new global replacement tool: see</p>\n</blockquote>\n<p>I'm a little skeptical of this (waiting for some future tool) as a reason to not do something.</p>",
        "id": 434689512,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713775096
    },
    {
        "content": "<p>Just so you know, it's on my relatively near term todo list, I had a discussion about the design of the tool with Johan a few weeks ago</p>",
        "id": 434689759,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713775176
    },
    {
        "content": "<p>the main reason I've been dragging my feet on writing it is because the design I have in mind obviously misses the performance goal I have for an autoformatter (i.e. less than an hour)</p>",
        "id": 434690184,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713775295
    },
    {
        "content": "<p>I think it's mostly that this is a pretty low value change in any case, and relatively high-cost in terms of bitrotting everyone else, so there's no need to hurry</p>",
        "id": 434690595,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1713775395
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2312259.20more.20.60apply.60/near/434683328\">said</a>:</p>\n<blockquote>\n<p>personally I prefer <code>refine</code> over <code>apply</code> in almost all circumstances because <code>apply</code> elaborates a bit ambiguously</p>\n</blockquote>\n<p>That could/should be explained in Lean introductory guides.</p>\n<p>One argument for <code>apply</code> is that <code>refine</code> is sensitive to change of order of arguments, while <code>apply</code> could adapt itself to further refactors. For a huge library, that can make a difference.</p>",
        "id": 434711970,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1713781654
    },
    {
        "content": "<p>Do you mean the order of explicit arguments that don't produce further goals (i.e., <code>_</code>, not <code>?_</code>)?</p>",
        "id": 434712385,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1713781792
    },
    {
        "content": "<p>For the goals, it is still order-dependent since the following blocks would need to be reordered. For explicit but inferred arguments, you can use <code>_</code> in <code>refine</code> and then if they are swapped around the code won't need to change. If a provided argument is swapped with another provided or <code>_</code> argument, then both <code>apply</code> and <code>refine</code> will be affected. So in general I don't see a big difference between them in terms of robustness to theorem statement changes.</p>\n<p>The best way to avoid argument order dependence (if you have reason to defend against that) is to use named argument syntax.</p>",
        "id": 434714033,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713782338
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2312259.20more.20.60apply.60/near/434712385\">said</a>:</p>\n<blockquote>\n<p>Do you mean the order of explicit arguments that don't produce further goals (i.e., <code>_</code>, not <code>?_</code>)?</p>\n</blockquote>\n<p>Something like that, yes. Or when arguments that can be inferred are made implicit, etc. In the end, it's the question to what extend the compiler should generate the code automatically. My claim was that it does a bit more with <code>apply</code> than with <code>refine</code>.</p>",
        "id": 434755472,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1713793903
    }
]