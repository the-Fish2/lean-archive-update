[
    {
        "content": "<p>A global <code>variable {m : Sym α n}</code> was present in <code>Mathlib.Data.Finset.Sym </code>with the very unfortunate effect that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.sym_eq_empty#doc\">docs#Finset.sym_eq_empty</a> was using it :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Finset.sym_eq_empty</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n    <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Sym</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">Finset.sym</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span> <span class=\"bp\">↔</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span>\n</code></pre></div>\n<p>thus making it impossible to use to prove its goal.<br>\nThe line is modified, added in a few functions when needed.</p>",
        "id": 421891614,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1708099915
    },
    {
        "content": "<p>Do you understand why that variable was included?</p>",
        "id": 421915833,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708108025
    },
    {
        "content": "<p>Yes, the proof used <code>cases n</code> so it included <code>m</code> since it depends on <code>n</code>.</p>",
        "id": 421917268,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708108562
    },
    {
        "content": "<p>Oooh, nasty...</p>",
        "id": 421917508,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708108646
    },
    {
        "content": "<p>I feel like <code>variable</code> is now evil like <code>parameter</code> was in lean 3... Note that it also caused a <code>simp</code> to fail and needed an <code>erw</code>. How many more of those are there?</p>",
        "id": 421918483,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708109054
    },
    {
        "content": "<p>A reminder that this evilness is tracked at <a href=\"https://github.com/leanprover/lean4/pull/2452\">lean4#2452</a></p>",
        "id": 421918904,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708109241
    },
    {
        "content": "<p>Maybe a minimized version of this example should be added to the issue.</p>",
        "id": 421919611,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708109514
    },
    {
        "content": "<p>Having thought about this a bit more (when reviewing a PR which adds a bunch more <code>variable</code>s) I guess the issue is dependent variables, and in particular variables which depend on variables which might be inducted on. For example (from the PR I'm reviewing)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Pow</span> <span class=\"n\">S</span> <span class=\"n\">ℕ</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">MulActionWithZero</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>looks safe, because the only dependent variables are <code>p</code> (and <code>R</code> doesn't have an eliminator) and the instances (which again are very unlikely to cause trouble because they only depend on types rather than terms).</p>\n<p>I'm trying to get it so that <code>variable {m : Sym α n}</code> makes me start worrying, but that most variable declarations don't.</p>",
        "id": 421924418,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708111531
    },
    {
        "content": "<p>Here's a mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ohno</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">≠</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">rfl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">ohno</span> <span class=\"c1\">-- ohno (n : Nat) (m : Fin n) (h : n ≠ 0) : n - 1 ≠ n</span>\n</code></pre></div>",
        "id": 421938489,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708117607
    },
    {
        "content": "<p>If you use <code>induction</code> then you get tripped up immediately during the proof; but with cases, you don't notice until you try and use the theorem</p>",
        "id": 421938968,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708117822
    },
    {
        "content": "<p>Right -- I propose making <code>variable (m : Fin n)</code> trigger my code smell sense.</p>",
        "id": 421943483,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708119974
    },
    {
        "content": "<p>Apologies <a href=\"https://github.com/leanprover/lean4/pull/2452\">lean4#2452</a> is still not fixed. It is not forgotten.</p>",
        "id": 422074120,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1708239781
    }
]