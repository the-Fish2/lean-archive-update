[
    {
        "content": "<p>Starting a new thread here, as the topic line of the previous one does not fit anymore.</p>\n<p>I've just opened <a href=\"https://github.com/leanprover-community/mathlib4/pull/11173\">#11173</a>, which contains some additional API lemmas on (iterated) derivatives and negation. I found these helpful for the further development of L-series in Mathlib.</p>",
        "id": 424858837,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709642111
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/L-series/near/424858837\">said</a>:</p>\n<blockquote>\n<p>I've just opened <a href=\"https://github.com/leanprover-community/mathlib4/pull/11173\">#11173</a>, which contains some additional API lemmas on (iterated) derivatives and negation. I found these helpful for the further development of L-series in Mathlib.</p>\n</blockquote>\n<p>I left some comments. I note that your lemmas would be far, far easier to prove if you assumed differentiability from the start; is the fact that they apply in the non-differentiable case really crucial in your application?</p>",
        "id": 424878888,
        "sender_full_name": "David Loeffler",
        "timestamp": 1709648288
    },
    {
        "content": "<p>Thanks for the comments! I'll look at them in detail later.</p>\n<p>I think the general principle is to try to have as weak assumptions as possible (even if this makes the proof more involved), to simplify use. Isn't this also part of the point of having (judicially chosen) \"junk values\" to make functions total?</p>",
        "id": 424912559,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709657009
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/11189\">#11189</a> adds a proof that the harmonic series restricted to a residue class diverges (which I want for the proof that the abscissa of absolute convergence of a Dirichlet L-series is 1).</p>",
        "id": 424955807,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709672190
    },
    {
        "content": "<p>Hmm, sounds like <a href=\"https://github.com/leanprover-community/mathlib4/pull/11189\">#11189</a> might have some overlap with my PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/11150\">#11150</a> (a slice of my Hurwitz-zeta-functions project), which shows that<code> ∑' n : ℕ, 1 / (n + a) ^ s</code>, for <code>a</code> a real parameter, converges iff <code>1 &lt; re s</code>. <del>Taking <code>a = k / m</code> recovers your result. Perhaps we should try to combine the two.</del></p>",
        "id": 424969153,
        "sender_full_name": "David Loeffler",
        "timestamp": 1709677719
    },
    {
        "content": "<p>PS: Looking at this again, I had misunderstood what you were doing; I retract the incorrect claim that your results can be derived from mine. I'm not sure there's a natural way of unifying the two PR's (at least, not without making the statements  and proofs considerably more complicated). Sorry for the noise!</p>",
        "id": 425026151,
        "sender_full_name": "David Loeffler",
        "timestamp": 1709712186
    },
    {
        "content": "<p>New PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/11214\">#11214</a>; it deals with addition, negation and scalar multiplication of L-series.</p>",
        "id": 425293616,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709815032
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/11245\">#11245</a> adds results on differentiability and derivatives of L-series.</p>",
        "id": 425546696,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709913755
    },
    {
        "content": "<p>I think <a href=\"https://github.com/leanprover-community/mathlib4/pull/11214\">#11214</a> should be OK now. Perhaps it is ready for a maintainer merge?</p>",
        "id": 425547115,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709913899
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/11253\">#11253</a> is a small PR that just adds notation.<br>\nSee <a href=\"https://github.com/MichaelStollBayreuth/EulerProducts/blob/main/EulerProducts/DirichletLSeries.lean\">EulerProducts/DirichletLSeries</a> (in my repo) for how it is used.</p>",
        "id": 425571232,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709922812
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/11214\">#11214</a>, <a href=\"https://github.com/leanprover-community/mathlib4/pull/11245\">#11245</a> and <a href=\"https://github.com/leanprover-community/mathlib4/pull/11253\">#11253</a> could do with some reviews or steps toward merging.</p>",
        "id": 425716688,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1710016319
    },
    {
        "content": "<p>Likewise <a href=\"https://github.com/leanprover-community/mathlib4/pull/11069\">#11069</a> and <a href=\"https://github.com/leanprover-community/mathlib4/pull/11150\">#11150</a>, which are steps towards analytic continuation of Dirichlet L-series.</p>",
        "id": 425719058,
        "sender_full_name": "David Loeffler",
        "timestamp": 1710018744
    },
    {
        "content": "<p>It looks like <a href=\"https://github.com/leanprover-community/mathlib4/pull/11150\">#11150</a> contains what <a href=\"https://github.com/leanprover-community/mathlib4/pull/11069\">#11069</a> does. Is this on purpose?</p>",
        "id": 425722722,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1710022535
    },
    {
        "content": "<p>That's what \" depends on: feat(InfiniteSum/NatInt): lemmas on sums over ℤ <a href=\"https://github.com/leanprover-community/mathlib4/pull/11069\">#11069</a>\" in the initial message on <a href=\"https://github.com/leanprover-community/mathlib4/pull/11150\">#11150</a> means</p>",
        "id": 425724802,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1710024815
    },
    {
        "content": "<p>To my naïve eyes, it looks like merging <a href=\"https://github.com/leanprover-community/mathlib4/pull/11150\">#11150</a> would also put the changes made in <a href=\"https://github.com/leanprover-community/mathlib4/pull/11069\">#11069</a> into Mathlib, and then I wonder why to have this redundancy.<br>\nOr rather, I was asking myself whether, say, maintainer merging <a href=\"https://github.com/leanprover-community/mathlib4/pull/11150\">#11150</a> would imply the same for <a href=\"https://github.com/leanprover-community/mathlib4/pull/11069\">#11069</a>.</p>",
        "id": 425756139,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1710059965
    },
    {
        "content": "<p>Isn't it just to split up the PR into smaller bits?</p>",
        "id": 425756296,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1710060129
    },
    {
        "content": "<p>I guess I just have no idea what the workflow is with dependent PRs. Is this explained somewhere?</p>",
        "id": 425756323,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1710060212
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/11069\">#11069</a> will be PRd first and then <a href=\"https://github.com/leanprover-community/mathlib4/pull/11150\">#11150</a> will only be ~100 lines long .</p>",
        "id": 425756370,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1710060249
    },
    {
        "content": "<p>So one should wait for the dependency to be merged before looking at the dependent PR?</p>",
        "id": 425756399,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1710060330
    },
    {
        "content": "<p>I'm not sure if there is an official explanation. I just know that once you mention it in the PR it'll say \"depends on..\" until that gets merged. You can also run <code>git merge origin/ other Pr</code> to update the second one if you make any changes to the first (i.e. like changes coming from the pr reviews)</p>",
        "id": 425756459,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1710060382
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/L-series/near/425756399\">said</a>:</p>\n<blockquote>\n<p>So one should wait for the dependency to be merged before looking at the dependent PR?</p>\n</blockquote>\n<p>Yes exactly.</p>",
        "id": 425756468,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1710060395
    },
    {
        "content": "<p>Then why not wait with submitting the dependent PR until this point and have no dependency? I don't quite see what is gained by this mechanism.</p>",
        "id": 425756498,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1710060453
    },
    {
        "content": "<p>Yes, that’s why PRs with the “blocked-by-other-PR” label don’t show up in <a href=\"https://bit.ly/3cKk3ld\">#queue</a>. Possibly I was a bit trigger-happy in adding the “awaiting-review” label, but your comment on the 2nd PR (“the bits of this that aren’t in the first PR are OK”) is exactly what I was hoping for - thanks!</p>",
        "id": 425756580,
        "sender_full_name": "David Loeffler",
        "timestamp": 1710060534
    },
    {
        "content": "<p>I don't think it's hugely important (I could be wrong though). I usually just use it to show what's coming next so reviewers can see why I'm PR all this.</p>",
        "id": 425756583,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1710060539
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/L-series/near/425756498\">said</a>:</p>\n<blockquote>\n<p>Then why not wait with submitting the dependent PR until this point and have no dependency? I don't quite see what is gained by this mechanism.</p>\n</blockquote>\n<p>Chris’s answer is one good reason. Another is that it leads to a more efficient workflow: we all have many demands in our time, and using PR dependency labels means that review of PR x+1 can start immediately after PR x is merged, rather than waiting for the author to upload it in rigid sequence.</p>",
        "id": 425757095,
        "sender_full_name": "David Loeffler",
        "timestamp": 1710061074
    },
    {
        "content": "<p>Thus would, incidentally, work much better if bors didn’t squash commit history, because that means one very often has to manually merge reviewer changes into subsequent PRs as the info needed for git to do this for itself has been thrown away.</p>",
        "id": 425757262,
        "sender_full_name": "David Loeffler",
        "timestamp": 1710061215
    },
    {
        "content": "<p>The main advantage to having multiple PRs in a chain rather than just one is that smaller PRs are easier to review</p>",
        "id": 425761127,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1710065194
    },
    {
        "content": "<p>But this is independent of whether all these PRs are open concurrently or submitted sequentially.<br>\nWhat I found irritating is that in the later PR, I also see all the changes made by the previous ones, so that it is a bit hard to figure out what is really teh new part.</p>",
        "id": 425761249,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1710065301
    },
    {
        "content": "<p>Sure. But if the author opens them concurrently, the reader can decide whether or not to look at them based on the abortion on the PR. If the author keeps their next work in a private branch, the reader doesn't have the choice</p>",
        "id": 425761543,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1710065656
    },
    {
        "content": "<p>Michael: perhaps you might not be aware that there’s an option in the GitHub review screen “Show changes from …” allowing you to select which commits in a branch you see. This is a good way of screening out commits inherited from prerequisite PRs.</p>",
        "id": 425766831,
        "sender_full_name": "David Loeffler",
        "timestamp": 1710071061
    },
    {
        "content": "<p>It would be useful if dependent PRs also came with a link that shows the diff between the current version of the \"top\" PR wrt  the \"dependent\" one.</p>",
        "id": 425767838,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1710072071
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/L-series/near/425767838\">said</a>:</p>\n<blockquote>\n<p>It would be useful if dependent PRs also came with a link that shows the diff between the current version of the \"top\" PR wrt  the \"dependent\" one.</p>\n</blockquote>\n<p>I agree. This would be awkward to implement for PRs with more than one predecessor, but that is probably not a very common case. But this is probably an aspect of GitHub's PR interface which is beyond the control of individual projects.</p>",
        "id": 425778095,
        "sender_full_name": "David Loeffler",
        "timestamp": 1710081038
    },
    {
        "content": "<p>You can make the dependent PR's base branch be the predecessor PR's. Changing base branches is an option on GitHub (but the accompanying rebase is sometimes annoying).</p>",
        "id": 426090061,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1710237727
    },
    {
        "content": "<p>Please don't do that. If you do, bors will close the depending PR when the dependency Pr gets merged</p>",
        "id": 426107007,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710243979
    },
    {
        "content": "<p>That's an unfortunate interaction between bors and GitHub. GitHub is supposed to automatically change the target branch when it disappears due to using the \"Delete branch\" button on a merged PR. But bors doesn't really merge PRs from GitHub's point of view, it just closes them. Hopefully Mergify will be better at this.</p>",
        "id": 426112442,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1710245988
    },
    {
        "content": "<p>Can <a href=\"https://github.com/leanprover-community/mathlib4/pull/11245\">#11245</a> (derivatives of L-series) be maintainer merged now? <span class=\"user-mention\" data-user-id=\"481963\">@David Loeffler</span></p>",
        "id": 427875012,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1710923267
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/L-series/near/427875012\">said</a>:</p>\n<blockquote>\n<p>Can <a href=\"https://github.com/leanprover-community/mathlib4/pull/11245\">#11245</a> (derivatives of L-series) be maintainer merged now? <span class=\"user-mention silent\" data-user-id=\"481963\">David Loeffler</span></p>\n</blockquote>\n<p>The reason I haven't maintainer-merged this PR is because I'm not 100% convinced about the lemma <code>Complex.isOpen_rightHalfPlane</code> which you are adding; it seems to me that there are other, better formulations and locations for this lemma (and I have suggested some). I'm not going to object if some other reviewer / maintainer comes along and hits merge, but I'm not sufficiently happy with it to take responsibility myself by maintainer-merging.</p>",
        "id": 427880869,
        "sender_full_name": "David Loeffler",
        "timestamp": 1710925659
    },
    {
        "content": "<p>I have followed David's suggestion (made in a comment on the PR) to move the lemma in question to a file under <code>Analysis/Complex</code>, change its name (in particular, it now mentions <code>EReal</code>) and add its three siblings.<br>\nI hope this is now OK.</p>",
        "id": 427900815,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1710932185
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/11634\">#11634</a> is the next one. It defines the Dirichlet convolution of two sequences (and introduces notation <code>f ⍟ g</code> for it) and then proves that <code>L (f ⍟ g) = L f * L g</code> when both L-series converge.</p>",
        "id": 429244483,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1711312261
    },
    {
        "content": "<p>Great! What do you think of proving the uniqueness of Dirichlet coefficients? (As discussed, e.g., here: <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Sum.20over.201.2Fp.20diverges/near/425802703\">https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/Sum.20over.201.2Fp.20diverges/near/425802703</a> It follows quite easily from the Perron formula, which itself would be great to get into mathlib...)</p>",
        "id": 429484193,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1711391426
    },
    {
        "content": "<p>It is <a href=\"https://github.com/MichaelStollBayreuth/EulerProducts/blob/main/EulerProducts/LSeriesUnique.lean\">here</a>, but done in the more pedestrian direct way, so no Perron formula.<br>\nI was planning to PR it eventually; if you want it soon, I can do it earlier.</p>",
        "id": 429485108,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1711391771
    },
    {
        "content": "<p>I'm in no hurry to get this stuff into mathlib... (I'd prefer to first get everything proved formally...)</p>",
        "id": 429546951,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1711422815
    },
    {
        "content": "<p>The longer you don't put something into mathlib, the more painful your local maintenance burden is</p>",
        "id": 429589606,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711433574
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/11712\">#11712</a> adds a new file with material on <code>L μ</code>, <code>L χ</code> for Dirichlet characters <code>χ</code>, <code>L 1 = L ζ</code> as a special case, and <code>L Λ</code>. It also adds a lemma to <code>NumberTheory.Divisors</code> (the components of a pair in <code>Nat.divisorsAntidiagonal n</code> are nonzero) and slighlty reorganizes material between <code>Basic</code> and the new file.</p>",
        "id": 429742459,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1711488308
    },
    {
        "content": "<p>One of the new results of this PR is the formula for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>ζ</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">(</mo><mi>s</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mi>ζ</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\zeta&#x27;(s) / \\zeta(s)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0019em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span></span></span></span> using the von Mangoldt function. This is a great thing to have, certainly! But I wonder if it would be better still if we had the more general result for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>L</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">(</mo><mi>ϕ</mi><mo separator=\"true\">,</mo><mi>s</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mi>L</mi><mo stretchy=\"false\">(</mo><mi>ϕ</mi><mo separator=\"true\">,</mo><mi>s</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">L&#x27;(\\phi, s) / L(\\phi, s)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0019em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">ϕ</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">L</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">ϕ</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span></span></span></span> for an arbitrary completely-multiplicative <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ϕ</mi></mrow><annotation encoding=\"application/x-tex\">\\phi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">ϕ</span></span></span></span> (e.g. a Dirichlet character), and derived the special case of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ϕ</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\phi = 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">ϕ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> from that. What do you think?</p>",
        "id": 429836181,
        "sender_full_name": "David Loeffler",
        "timestamp": 1711538318
    },
    {
        "content": "<p>I'll have a look at that. (Maybe after giving the talk...)</p>",
        "id": 429836579,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1711538502
    },
    {
        "content": "<p>Now done (for Dirichlet characters; this fits nicely in the context of <a href=\"https://github.com/leanprover-community/mathlib4/pull/11712\">#11712</a>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">LSeries_twist_vonMangoldt_eq</span>  <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">χ</span> <span class=\"o\">:</span> <span class=\"n\">DirichletCharacter</span> <span class=\"n\">ℂ</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">s.re</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"bp\">↗</span><span class=\"n\">χ</span> <span class=\"bp\">*</span> <span class=\"bp\">↗Λ</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"n\">deriv</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"bp\">↗</span><span class=\"n\">χ</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">/</span> <span class=\"n\">L</span> <span class=\"bp\">↗</span><span class=\"n\">χ</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 429938243,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1711569999
    },
    {
        "content": "<p>Maybe this is asking too much, but how hard would it be to show this for a general multiplicative (but not necessarily completely multiplicative) series, say, assuming there's an Euler product of degree d? (So we can use it, e.g. once we have L-functions of modular forms, and eventually automorphic reps...?) E.g. (5.25) in Iwaniec-Kowalski? (Feel free to tell me to get lost! You've done plenty!!)</p>",
        "id": 429943585,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1711571611
    },
    {
        "content": "<p>I can look at this at some point (also maybe first the generalization for arbitrary <em>completely</em> multiplicative functions, which is a bit more complicated than for Dirichlet characters because of convergence questions), but I think this is a bit out of scope for the present PR.</p>",
        "id": 429944055,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1711571762
    },
    {
        "content": "<p>OK; I think that doing it more generally for completely multiplicative functions will be rather easy. But I would like to defer that refactor (which will then deduce the results for Dirichlet characters from the more general ones) to a follow-up PR, so that <a href=\"https://github.com/leanprover-community/mathlib4/pull/11712\">#11712</a> doesn't get even larger.</p>",
        "id": 430031297,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1711619672
    },
    {
        "content": "<p>Sounds sensible to me. I’m not wholly convinced that extending from Dir chars to general completely mult fcns is particularly useful anyway, while weakly mult fcns would bring a whole new set of challenges.</p>",
        "id": 430033647,
        "sender_full_name": "David Loeffler",
        "timestamp": 1711620466
    },
    {
        "content": "<p>It certainly doesn't hurt to have a bit more generality, even though DIrichlet characters will certainly be the most important use case, so I think I will do the refactor eventually.<br>\nRegarding (weakly) multiplicative functions, what kind of statement would be desired? It is not quite clear to me how to formulate that.</p>",
        "id": 430035270,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1711621166
    },
    {
        "content": "<p>It would be nice to get some reviews on <a href=\"https://github.com/leanprover-community/mathlib4/pull/11712\">#11712</a> ...</p>",
        "id": 430083390,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1711636938
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/L-series/near/430035270\">said</a>:</p>\n<blockquote>\n<p>It certainly doesn't hurt to have a bit more generality, even though DIrichlet characters will certainly be the most important use case, so I think I will do the refactor eventually.<br>\nRegarding (weakly) multiplicative functions, what kind of statement would be desired? It is not quite clear to me how to formulate that.</p>\n</blockquote>\n<p>I think we want a statement of the following form: Suppose that we have a degree <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">d</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">d</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">L</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span></span></span></span>-series with Euler product <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mo separator=\"true\">,</mo><mi>π</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msubsup><mo>∏</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>d</mi></msubsup><msup><mrow><mo fence=\"true\">(</mo><mn>1</mn><mo>−</mo><msub><mi>α</mi><mi>j</mi></msub><mo stretchy=\"false\">(</mo><mi>p</mi><mo stretchy=\"false\">)</mo><msup><mi>p</mi><mrow><mo>−</mo><mi>s</mi></mrow></msup><mo fence=\"true\">)</mo></mrow><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">L(s,\\pi) = \\prod_{j=1}^d\\left(1-\\alpha_j(p)p^{-s}\\right)^{-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.4248em;vertical-align:-0.4358em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∏</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.989em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">d</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4358em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\"><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0037em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7713em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\">s</span></span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9753em;\"><span style=\"top:-3.2242em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span> converging in some half plane (equivalently, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>α</mi><mi>j</mi></msub><mo stretchy=\"false\">(</mo><mi>p</mi><mo stretchy=\"false\">)</mo><mo>≪</mo><msup><mi>p</mi><mi>C</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\alpha_j(p)\\ll p^C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0361em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0037em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≪</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0358em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07153em;\">C</span></span></span></span></span></span></span></span></span></span></span> for some <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo>&lt;</mo><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">C&lt;\\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7224em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord\">∞</span></span></span></span>). Then the Dirichlet series of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><msup><mi>L</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mi mathvariant=\"normal\">/</mi><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">-L&#x27;/L</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0019em;vertical-align:-0.25em;\"></span><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord mathnormal\">L</span></span></span></span> has coefficients: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"normal\">Λ</mi><mi>π</mi></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\Lambda_\\pi(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\">Λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">π</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> supported on prime powers, and taking values:<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"normal\">Λ</mi><mi>π</mi></msub><mo stretchy=\"false\">(</mo><msup><mi>p</mi><mi>k</mi></msup><mo stretchy=\"false\">)</mo><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>d</mi></msubsup><msub><mi>α</mi><mi>j</mi></msub><mo stretchy=\"false\">(</mo><mi>p</mi><msup><mo stretchy=\"false\">)</mo><mi>k</mi></msup><mi>log</mi><mo>⁡</mo><mi>p</mi><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">\\Lambda_\\pi(p^k)= \\sum_{j=1}^d \\alpha_j(p)^k \\log p.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0991em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\">Λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">π</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.4248em;vertical-align:-0.4358em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.989em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">d</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4358em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0037em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">p</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord\">.</span></span></span></span><br>\nWith a little API on log-derivatives (e.g. if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>=</mo><mo>∏</mo><msub><mi>f</mi><mi>j</mi></msub></mrow><annotation encoding=\"application/x-tex\">f=\\prod f_j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0361em;vertical-align:-0.2861em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∏</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span> then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>f</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mi mathvariant=\"normal\">/</mi><mi>f</mi><mo>=</mo><mo>∑</mo><msubsup><mi>f</mi><mi>j</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msubsup><mi mathvariant=\"normal\">/</mi><msub><mi>f</mi><mi>j</mi></msub></mrow><annotation encoding=\"application/x-tex\">f&#x27;/f=\\sum f_j&#x27;/f_j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0019em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1467em;vertical-align:-0.3948em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-2.4413em;margin-left:-0.1076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3948em;\"><span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span> etc), this doesn't seem to me (naively) too far from what you've already done... But again, one PR at a time...</p>",
        "id": 430085933,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1711637573
    },
    {
        "content": "<p>That should indeed not be too hard. I was thinking of completely general weakly multiplicative functions <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span>, and then expressing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"normal\">Λ</mi><mi>f</mi></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\Lambda_f(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0361em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord\">Λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10764em;\">f</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> in a nice way seems to be hard...</p>",
        "id": 430086364,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1711637692
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252920\">Alex Kontorovich</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/L-series/near/430085933\">said</a>:</p>\n<blockquote>\n<p>I think we want a statement of the following form: Suppose that we have a degree <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">d</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">d</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">L</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span></span></span></span>-series with Euler product <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mo separator=\"true\">,</mo><mi>π</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msubsup><mo>∏</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>d</mi></msubsup><msup><mrow><mo fence=\"true\">(</mo><mn>1</mn><mo>−</mo><msub><mi>α</mi><mi>j</mi></msub><mo stretchy=\"false\">(</mo><mi>p</mi><mo stretchy=\"false\">)</mo><msup><mi>p</mi><mrow><mo>−</mo><mi>s</mi></mrow></msup><mo fence=\"true\">)</mo></mrow><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">L(s,\\pi) = \\prod_{j=1}^d\\left(1-\\alpha_j(p)p^{-s}\\right)^{-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.4248em;vertical-align:-0.4358em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∏</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.989em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">d</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4358em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\"><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0037em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7713em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\">s</span></span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9753em;\"><span style=\"top:-3.2242em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span> converging in some half plane [...]</p>\n</blockquote>\n<p>I think we're still quite far away from having any nontrivial examples with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mo>&gt;</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">d &gt; 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> though, aren't we?</p>",
        "id": 430086875,
        "sender_full_name": "David Loeffler",
        "timestamp": 1711637806
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/L-series/near/430086364\">said</a>:</p>\n<blockquote>\n<p>That should indeed not be too hard. I was thinking of completely general weakly multiplicative functions <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span>, and then expressing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"normal\">Λ</mi><mi>f</mi></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\Lambda_f(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0361em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord\">Λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10764em;\">f</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> in a nice way seems to be hard...</p>\n</blockquote>\n<p>Oh yes, that would be annoying... If it's just multiplicative, but without a Hecke relation (equivalently, finite degree Euler product), you have to battle with horrible infinite sums, I agree. (And it's likely pointless; I've never seen an L-function that I care about that has an Euler product but not Hecke...</p>",
        "id": 430086945,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1711637825
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"481963\">David Loeffler</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/L-series/near/430086875\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"252920\">Alex Kontorovich</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/L-series/near/430085933\">said</a>:</p>\n<blockquote>\n<p>I think we want a statement of the following form: Suppose that we have a degree <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">d</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">d</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">L</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span></span></span></span>-series with Euler product <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mo separator=\"true\">,</mo><mi>π</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msubsup><mo>∏</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>d</mi></msubsup><msup><mrow><mo fence=\"true\">(</mo><mn>1</mn><mo>−</mo><msub><mi>α</mi><mi>j</mi></msub><mo stretchy=\"false\">(</mo><mi>p</mi><mo stretchy=\"false\">)</mo><msup><mi>p</mi><mrow><mo>−</mo><mi>s</mi></mrow></msup><mo fence=\"true\">)</mo></mrow><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">L(s,\\pi) = \\prod_{j=1}^d\\left(1-\\alpha_j(p)p^{-s}\\right)^{-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.4248em;vertical-align:-0.4358em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∏</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.989em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">d</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4358em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\"><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0037em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7713em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\">s</span></span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9753em;\"><span style=\"top:-3.2242em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span> converging in some half plane [...]</p>\n</blockquote>\n<p>I think we're still quite far away from having any nontrivial examples with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mo>&gt;</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">d &gt; 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> though, aren't we?</p>\n</blockquote>\n<p>Hmm aren't we getting some modular forms soon (if not already)? Once we have Ramanujan discriminant (and Hecke operators), we could show that its L-function is degree 2...</p>",
        "id": 430087181,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1711637884
    },
    {
        "content": "<p>The big holdup is proving that the spaces have the correct dimension.</p>",
        "id": 430087292,
        "sender_full_name": "David Loeffler",
        "timestamp": 1711637915
    },
    {
        "content": "<p>Without that it's pretty hard to show that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Δ</mi></mrow><annotation encoding=\"application/x-tex\">\\Delta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Δ</span></span></span></span> (or anything else) is an eigenform.</p>",
        "id": 430087370,
        "sender_full_name": "David Loeffler",
        "timestamp": 1711637936
    },
    {
        "content": "<p>Agreed. I'm guessing that's because we're trying to do it in general... (for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Δ</mi></mrow><annotation encoding=\"application/x-tex\">\\Delta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Δ</span></span></span></span> one can do it \"by hand\" pretty easily...)</p>",
        "id": 430087481,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1711637964
    },
    {
        "content": "<p>Can one \"do\" <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Δ</mi></mrow><annotation encoding=\"application/x-tex\">\\Delta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Δ</span></span></span></span> pretty easily? How? I am surprised by this assertion.</p>",
        "id": 430087726,
        "sender_full_name": "David Loeffler",
        "timestamp": 1711638017
    },
    {
        "content": "<p>Actually for any weight full level it's really not hard to show that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>E</mi><mn>4</mn></msub></mrow><annotation encoding=\"application/x-tex\">E_4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>E</mi><mn>6</mn></msub></mrow><annotation encoding=\"application/x-tex\">E_6</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">6</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> span the ring</p>",
        "id": 430087856,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1711638051
    },
    {
        "content": "<p>How?</p>",
        "id": 430088030,
        "sender_full_name": "David Loeffler",
        "timestamp": 1711638093
    },
    {
        "content": "<p>There's an elementary argument, e.g., in Bump \"Automorphic Forms and Representations\", Ch 1.3 (using the structure of the fundamental domain for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mi>L</mi><mo stretchy=\"false\">(</mo><mn>2</mn><mo separator=\"true\">,</mo><mi>Z</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">SL(2,Z)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">L</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">Z</span><span class=\"mclose\">)</span></span></span></span>, which we have...)</p>",
        "id": 430088236,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1711638140
    },
    {
        "content": "<p>Prop 1.3.1 of Bump looks highly non-elementary to me...</p>",
        "id": 430088755,
        "sender_full_name": "David Loeffler",
        "timestamp": 1711638271
    },
    {
        "content": "<p>The minimum input needed to get Bump's argument to work seems to be that a modular form of weight 0 is constant. This is one of the many things customarily proved using the valence formula. Bump refers to an alternative proof via the maximum modulus principle, without giving any details; this sounds more accessible than the valence-formula proof, but not totally straightforward either.</p>",
        "id": 430091286,
        "sender_full_name": "David Loeffler",
        "timestamp": 1711638986
    },
    {
        "content": "<p>Yeah, don't we have Liouville? I would think that's \"all\" (as always, with a big grain of salt...) one would need to get max modulus working...</p>",
        "id": 430104685,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1711641679
    },
    {
        "content": "<p>I'm more motivated by trying get the valence formula by using the stuff they did in Isabelle/HOL to get the the contour integrals working, than just trying to get <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Δ</mi></mrow><annotation encoding=\"application/x-tex\">\\Delta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Δ</span></span></span></span> working.</p>",
        "id": 430106279,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1711642028
    },
    {
        "content": "<p>That said, I don't know this argument in Bump, so if its actually simple then we could try it.</p>",
        "id": 430106476,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1711642078
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/L-series/near/430083390\">said</a>:</p>\n<blockquote>\n<p>It would be nice to get some reviews on <a href=\"https://github.com/leanprover-community/mathlib4/pull/11712\">#11712</a> ...</p>\n</blockquote>\n<p>Anyone?</p>",
        "id": 430167891,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1711662947
    },
    {
        "content": "<p>I think <a href=\"https://github.com/leanprover-community/mathlib4/pull/11712\">#11712</a> should be good to be merged now. (I have used <a href=\"https://github.com/leanprover-community/mathlib4/pull/11770\">#11770</a> to golf one proof as suggested and added one more lemma that simplifies two other proofs).</p>",
        "id": 430871905,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1712091314
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"481963\">@David Loeffler</span> <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> <span class=\"user-mention\" data-user-id=\"389019\">@Chris Birkbeck</span> Is there anything else to be done with <a href=\"https://github.com/leanprover-community/mathlib4/pull/11712\">#11712</a>?<br>\nIf not, maybe somebody can maintainer merge?</p>",
        "id": 431143513,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1712165794
    },
    {
        "content": "<p>I think it looks good!</p>",
        "id": 431144860,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1712166291
    },
    {
        "content": "<p>I've made one very minor stylistic suggestion. Apologies for not getting to this earlier, was otherwise occupied all day today (probably my last skiing day of the season! <span aria-label=\"skier\" class=\"emoji emoji-26f7\" role=\"img\" title=\"skier\">:skier:</span>)</p>",
        "id": 431148895,
        "sender_full_name": "David Loeffler",
        "timestamp": 1712167790
    },
    {
        "content": "<p>I hope you had fun!</p>",
        "id": 431148970,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1712167810
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/12055\">#12055</a> is a first step towards refactoring Euler products in terms of <code>tprod</code>. It adds a more general version <code>factoredNumbers s</code> (where <code>s</code> is a <code>Finset</code> of natural numbers) of <code>smoothNumbers n</code>, which denotes the set of all positive natural numbers all of whose prime factors are in <code>s</code>, provides API for it, golfs most of the proofs for <code>smoothNumbers</code> by reducing to the new API, and also speeds up the <code>NumberTheory.SmoothNumbers</code> file by replacing a few slow <code>convert</code>s and <code>tauto</code>s by faster proof steps.</p>\n<p>Reviews welcome (should be fairly easy)!</p>",
        "id": 432666616,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1712828812
    },
    {
        "content": "<p>Is there more to be done with <a href=\"https://github.com/leanprover-community/mathlib4/pull/12055\">#12055</a> ?</p>",
        "id": 433033209,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1713000908
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/12161\">#12161</a> is the first part of refactoring Euler products in terms of <code>HasProd</code> and <code>tprod</code>. It also speeds up the file by removing slow <code>convert</code>s and adding local shortcut instances. The diff looks larger than it really is...</p>",
        "id": 433363426,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1713207226
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/12809\">#12809</a> is a follow-up; it updates <code>NumberTheory.EulerProduct.DirichletLSeries</code> with statements using infinite products (and in terms of L-series notation).</p>",
        "id": 438037266,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1715370340
    }
]