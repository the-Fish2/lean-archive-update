[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/9006\">#9006</a> essentially re-packages <code>Sˣ</code> (where <code>S</code> is a submonoid of a monoid <code>M</code>) as a subgroup of <code>Mˣ</code>. This operation (which I am calling <code>Submonoid.units</code>) forms the upper half of a Galois coinsertion with the forgetful coercion of a subgroup of <code>Mˣ</code> to a submonoid of <code>M</code>, and so I also define the latter as <code>Subgroup.ofUnits</code> and add appropriate lemmas for it.</p>\n<p>There's also a couple of others equivalences in here which I didn't have a clear place for.</p>\n<p>Previous discussion on this has been in <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Submonoid.20units\">https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/Submonoid.20units</a>, but now that I have cleaned it up and turned it into a PR, this seemed a more appropriate place to discuss it.</p>\n<p>I am looking for suggestions of other lemmas (in particular I have some but not all versions of lemmas that come from the Galois coinsertion), and any structural suggestions people otherwise have. I believe I have addressed all style issues (certainly it passes style and lint checks!)</p>",
        "id": 407781373,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702490092
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> has marked this topic as resolved.</p>",
        "id": 408293253,
        "sender_full_name": "Notification Bot",
        "timestamp": 1702695494
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> has marked this topic as unresolved.</p>",
        "id": 408293273,
        "sender_full_name": "Notification Bot",
        "timestamp": 1702695502
    },
    {
        "content": "<p>Any hope of a review of this? <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>, sorry to bother you but I know you'd looked at it, I replied to your last comment.</p>",
        "id": 412539050,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705064019
    },
    {
        "content": "<p>Having a look.</p>",
        "id": 412539646,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1705064237
    },
    {
        "content": "<p>Thank you.</p>",
        "id": 412539671,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705064247
    },
    {
        "content": "<p>Can you find the previous discussion about this? The link above doesn't work</p>",
        "id": 412540133,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1705064419
    },
    {
        "content": "<p>It <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.E2.9C.94.20Submonoid.20units\">here</a></p>",
        "id": 412540226,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1705064461
    },
    {
        "content": "<p>(marking a topic as resolved breaks hyperlinks, I don't know why)</p>",
        "id": 412540267,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1705064481
    },
    {
        "content": "<p>Ah, thank you.</p>",
        "id": 412540639,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705064617
    },
    {
        "content": "<p>In the long term this could replace the current <code>Units M</code>, right?</p>",
        "id": 412540694,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1705064639
    },
    {
        "content": "<p>I mean, it is the \"same\", but with more structure</p>",
        "id": 412540763,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1705064650
    },
    {
        "content": "<p>Hmm. I think you might want both? Because this gets a submonoid, and gives you its subgroup of units. But you still need a group for that to be a subgroup of.</p>",
        "id": 412540854,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705064686
    },
    {
        "content": "<p>That's Units M</p>",
        "id": 412540865,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705064690
    },
    {
        "content": "<p>It is however the \"right\" thing to use for submonoids, of that I'm fairly sure.</p>",
        "id": 412540939,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705064713
    },
    {
        "content": "<p>And the Galois coinsertion with the forgetful functor (essentially)!is quite nice.</p>",
        "id": 412541058,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705064763
    },
    {
        "content": "<p>Can't we add an instance <code>Group (Subgroup.ofUnits G)</code> in presence of <code>[Group G]</code>? Of course we need to pay attention to diamonds, but it should be doable</p>",
        "id": 412541320,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1705064854
    },
    {
        "content": "<p>Do you mean instead of my construction?</p>",
        "id": 412541473,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705064897
    },
    {
        "content": "<p>Let me open VS Code and write some actual Lean code :)</p>",
        "id": 412541661,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1705064971
    },
    {
        "content": "<p>Sure.</p>",
        "id": 412541690,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705064982
    },
    {
        "content": "<p>I didn't put these in the PR (because they are not necessary for the construction, though they did motivate it). But you can prove things like this using this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">subtypeMulEquiv</span> <span class=\"o\">{</span><span class=\"n\">M₁</span> <span class=\"n\">M₂</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">M₁</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">M₂</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">M₁</span> <span class=\"bp\">≃*</span> <span class=\"n\">M₂</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Submonoid</span> <span class=\"n\">M₁</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">Submonoid</span> <span class=\"n\">M₂</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">≃*</span> <span class=\"n\">T</span> <span class=\"n\">where</span>\n  <span class=\"n\">toEquiv</span> <span class=\"o\">:=</span> <span class=\"n\">e.subtypeEquiv</span> <span class=\"n\">h</span>\n  <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">toEquiv_eq_coe</span><span class=\"o\">,</span> <span class=\"n\">Equiv.toFun_as_coe</span><span class=\"o\">,</span> <span class=\"n\">Equiv.subtypeEquiv_apply</span><span class=\"o\">,</span>\n    <span class=\"n\">Submonoid.coe_mul</span><span class=\"o\">,</span> <span class=\"n\">coe_toEquiv</span><span class=\"o\">,</span> <span class=\"n\">map_mul</span><span class=\"o\">,</span> <span class=\"n\">Submonoid.mk_mul_mk</span><span class=\"o\">,</span> <span class=\"n\">Subtype.forall</span><span class=\"o\">,</span> <span class=\"n\">implies_true</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mem_iff_map_mem_units_of_mem_iff_map_mem</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">≃*</span> <span class=\"n\">M</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">Submonoid</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">↔</span> <span class=\"n\">e</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">T.units</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">Submonoid.mem_units_iff</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">e.map_inv</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">iff_self_and</span><span class=\"o\">,</span> <span class=\"n\">inv_mem_iff</span><span class=\"o\">,</span> <span class=\"n\">imp_self</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">subgroupMulEquivUnits</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">≃*</span> <span class=\"n\">M</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">Submonoid</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">≃*</span> <span class=\"n\">T.units</span> <span class=\"o\">:=</span>\n  <span class=\"n\">e.subtypeMulEquiv</span> <span class=\"o\">(</span><span class=\"n\">e.mem_iff_map_mem_units_of_mem_iff_map_mem</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">subgroupMulEquivUnitsType</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">≃*</span> <span class=\"n\">M</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">Submonoid</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">≃*</span> <span class=\"n\">T</span><span class=\"bp\">ˣ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">e.subgroupMulEquivUnits</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">T.unitsEquivUnitsType</span><span class=\"bp\">```</span>\n</code></pre></div>",
        "id": 412541799,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705065013
    },
    {
        "content": "<p>Sorry, forget my previous comment.</p>",
        "id": 412542046,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1705065111
    },
    {
        "content": "<p>Wheras showing that an equivalence like <code>e</code> \"transfers\" like this was quite hard before: this was a useful abstraction for it. (An example of such an <code>e</code> is Equiv.Perm.equivUnitsEnd.)</p>",
        "id": 412542176,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705065149
    },
    {
        "content": "<p>OK, what I mean is the following: if I have a monoid <code>M</code>and a submonoid <code>N</code>, then there is no point in using <code>Nˣ</code>. I thought we could remove <code>ˣ</code>,  but of course we still need it for <code>Mˣ</code> itself.</p>",
        "id": 412542482,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1705065272
    },
    {
        "content": "<p>Yep.</p>",
        "id": 412542506,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705065279
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> Submonoid, Units</p>",
        "id": 412542726,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1705065362
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/GroupTheory/Submonoid/Center.html#unitsCenterToCenterUnits\">unitsCenterToCenterUnits</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/GroupTheory/Submonoid/Center.html#unitsCenterToCenterUnits_injective\">unitsCenterToCenterUnits_injective</a>, and <a href=\"https://loogle.lean-lang.org/?q=Submonoid%2C%20Units\">51 more</a></p>",
        "id": 412542740,
        "sender_full_name": "loogle",
        "timestamp": 1705065363
    },
    {
        "content": "<p>wow</p>",
        "id": 412542773,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1705065368
    },
    {
        "content": "<p>We do have <code>Submonoid.leftInv</code>, which is somewhat related, but distinct (I think S.units will sit inside S.leftInv, because necessarily everything in S.units is a left inverse of something in S.)</p>",
        "id": 412544079,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705065860
    },
    {
        "content": "<p>We don't have <code>Submonoid.rightInv</code>, I assume because the logic is you just use an opposite type or something.</p>",
        "id": 412544130,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705065889
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">##</span> <span class=\"n\">TODO</span>\n\n<span class=\"n\">Define</span> <span class=\"n\">the</span> <span class=\"n\">submonoid</span> <span class=\"n\">of</span> <span class=\"n\">right</span> <span class=\"n\">inverses</span> <span class=\"n\">and</span> <span class=\"n\">two</span><span class=\"bp\">-</span><span class=\"n\">sided</span> <span class=\"n\">inverses.</span>\n<span class=\"n\">See</span> <span class=\"n\">the</span> <span class=\"n\">comments</span> <span class=\"n\">of</span> <span class=\"bp\">#</span><span class=\"mi\">10679</span> <span class=\"n\">for</span> <span class=\"n\">a</span> <span class=\"n\">possible</span> <span class=\"n\">implementation.</span>\n</code></pre></div>",
        "id": 412544219,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705065930
    },
    {
        "content": "<p>Oh gosh, this is looking like a little mess. Can you mention <code>Submonoid.leftInv</code> somewhere in the docs of your file (and also your definition in the doc of <code>leftInv</code>)?</p>",
        "id": 412544501,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1705066041
    },
    {
        "content": "<p>There is this note. Again, though, a putative <code>S.twoSidedInv</code> would not be the same as <code>S.units</code>- crucially they are still submonoids of M, not subgroups of  Mˣ.</p>",
        "id": 412544514,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705066046
    },
    {
        "content": "<p>Yes, I see, and I agree your version is better.</p>",
        "id": 412544552,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1705066061
    },
    {
        "content": "<p>Thank you.</p>",
        "id": 412544571,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705066068
    },
    {
        "content": "<p>I will stick a note in the header of both files.</p>",
        "id": 412544845,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705066156
    },
    {
        "content": "<p>A useful fact is that def like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=unitsCenterToCenterUnits#doc\">docs#unitsCenterToCenterUnits</a> can become something like <code>... ≤ ↥(Submonoid.center Mˣ)</code>, because now both terms are Submonoid of the same thing (one still has to go from submonoid to subgroup)</p>",
        "id": 412544885,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1705066171
    },
    {
        "content": "<p>Yes, exactly. The problem with Sˣ is that it isn't actually a subgroup (or submonoid!) of anything.</p>",
        "id": 412545026,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705066208
    },
    {
        "content": "<p>I am inclined to make any wider changes that use this in a separate PR though (or invite others to do so): the focus of this PR is providing the definition and its API.</p>",
        "id": 412545148,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705066257
    },
    {
        "content": "<p>Not that I don't agree, I do, I am just wary of scope creep.</p>",
        "id": 412545193,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705066277
    },
    {
        "content": "<p>There is also <code>IsUnit.submonoid</code>. Actually, potentially this would be all you would need if you did want to get rid of <code>ˣ</code>... except it is defined in terms of Mˣ ultimately.</p>",
        "id": 412546695,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705066908
    },
    {
        "content": "<p>OK, it is already a mess. Do you mind writing a short description of the current situation (with all this definition) saying that sooner or later someone should clean up everything? You can put in the docstring of your file (in a section \"implementation details\" or something like that)</p>",
        "id": 412547260,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1705067129
    },
    {
        "content": "<h1>Implementation details</h1>\n<p>There are a number of other constructions which are multiplicatively equivalent to <code>S.units</code> but<br>\nwhich have a different type.</p>\n<table>\n<thead>\n<tr>\n<th>Definition</th>\n<th>Type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>S.units</code></td>\n<td><code>Subgroup Mˣ</code></td>\n</tr>\n<tr>\n<td><code>Sˣ</code></td>\n<td><code>Type u</code></td>\n</tr>\n<tr>\n<td><code>IsUnit.submonoid S</code></td>\n<td><code>Submonoid S</code></td>\n</tr>\n<tr>\n<td><code>S.units.ofUnits</code></td>\n<td><code>Submonoid M</code></td>\n</tr>\n</tbody>\n</table>\n<p>All of these are distinct from <code>S.leftInv</code>, which is the submonoid of <code>M</code> which contains<br>\nevery member of <code>M</code> with a right inverse in <code>S</code>.</p>",
        "id": 412549625,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705067952
    },
    {
        "content": "<p>How does this look?</p>",
        "id": 412549649,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705067959
    },
    {
        "content": "<p>I've pushed that anyway, I had rearranged a couple of things (trying to move things not dependent on the definitions introduced in the file to appropriate other files). We'll see if that passes CI fine and what you think of it then.</p>",
        "id": 412551187,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705068481
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> I had a look at your comments, acted on them. Do you happen to know if I can choose the name of <code>simps</code> lemmas? I have something called <code>val_apply</code> and I would prefer <code>coe_apply</code> in context.</p>",
        "id": 412843588,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705263511
    },
    {
        "content": "<p>You can have a look at <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Parser.Attr.simps#doc\">docs#Lean.Parser.Attr.simps</a> for the various options.</p>",
        "id": 412844918,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1705264810
    },
    {
        "content": "<p>I did do that, but if I'm honest I couldn't figure out if it's possible</p>",
        "id": 412844948,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705264844
    },
    {
        "content": "<p>The relevant part seems to be <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Parser.Command.initialize_simps_projections#doc\">docs#Lean.Parser.Command.initialize_simps_projections</a> but I've never done that, so I am not sure.</p>",
        "id": 412845170,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1705265046
    },
    {
        "content": "<p>Aha that sounds right</p>",
        "id": 412845182,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705265061
    },
    {
        "content": "<p>Ah, actually I think <code>val</code> is right. We should maybe rename <code>Units.coeHom</code> to <code>Units.valHom</code> or indeed <code>Units.ofUnit</code> but that's neither here nor there.</p>",
        "id": 412846789,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705266581
    },
    {
        "content": "<p>(I think honestly I'm not sure I love the coercion from Units, I would just use ofUnit and toUnit...)</p>",
        "id": 412847543,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705267330
    },
    {
        "content": "<p>I kind of dislike that you now have to learn the names of every coercion function. In cases like <code>Units</code> where there is a single sensible coercion, I would argue it makes sense to keep on saying <code>coe</code>.</p>",
        "id": 412847974,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705267735
    },
    {
        "content": "<p>I think that this should be discussed outside of the <a class=\"stream\" data-stream-id=\"144837\" href=\"/#narrow/stream/144837-PR-reviews\">#PR reviews</a> stream. Probably, in a new topic in <a class=\"stream\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4\">#mathlib4</a>.</p>",
        "id": 412848074,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705267815
    },
    {
        "content": "<p>Yes, I agree - I was just noting in fact that I think this is outside the context of this PR!</p>",
        "id": 412848502,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705268280
    },
    {
        "content": "<p>I've tried to polish this as much as possible but I think I've hit the limit.</p>",
        "id": 412865961,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705280530
    }
]