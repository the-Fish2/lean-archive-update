[
    {
        "content": "<p>I made a tactic called <code>subsingleton</code> in <a href=\"https://github.com/leanprover-community/mathlib4/pull/12525\">#12525</a> that proves equalities using some sort of subsingleton argument. It's like <code>intro; apply Subsingleton.elim</code>, but it has a couple other features, like you can give it instances with <code>subsingleton [inst]</code>. This is an improvement to <code>have := inst; subsingleton</code> since <code>inst</code> might be universe polymorphic and it might have unsolved placeholders (so it saves you from giving type ascriptions).</p>\n<p>Another thing is that <code>subsingleton</code> can be used places where types are <em>morally</em> subsingletons, like <code>BEq</code> instances that have <code>LawfulBEq</code> instances. This is useful when there are inescapable diamonds.</p>\n<p>I've been fixing merge conflicts for this PR a couple times a week for the last month, and it would be nice to get eyes on it.</p>",
        "id": 445225293,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718658428
    },
    {
        "content": "<p>Question without having looked at the PR: Can this be interfaced with <code>nontriviality</code>? Could it be used to discharge the subsingleton case created by <code>nontriviality</code>?</p>",
        "id": 445231299,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718660984
    },
    {
        "content": "<p>I haven't given that any thought. Does <code>nontriviality</code> prove equalities in the <code>Subsingleton</code> branch?</p>\n<p>The main application I had in mind was <code>congr! &lt;;&gt; subsingleton</code> to discharge side goals now that <code>congr!</code> uses the FastSubsingleton typeclass.</p>",
        "id": 445232596,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718661561
    },
    {
        "content": "<p>Yes, it does. I believe that currently all it uses in the subsingleton branch is some configured simp call</p>",
        "id": 445232931,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718661706
    },
    {
        "content": "<p>But of course, <code>nontriviality</code> does more than just equalities.</p>",
        "id": 445236824,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1718663042
    }
]