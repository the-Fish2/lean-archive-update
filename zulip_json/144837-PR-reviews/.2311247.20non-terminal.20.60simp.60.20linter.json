[
    {
        "content": "<p>Dear All,</p>\n<p>I made an attempt at writing a non-terminal <code>simp</code> linter in Lean: <a href=\"https://github.com/leanprover-community/mathlib4/pull/11247\">#11247</a>.  The implementation that Mathlib uses is a <a href=\"#narrow/stream/144837-PR-reviews/topic/.237496.20add.20nonterminal.20simp.20checker\">string-based linter</a>.</p>\n<p>The linter is very simple-minded: it looks for <code>simp *not* only</code> nodes that appear in a previous node that contains a tactic after them.  It emits a warning when it finds them.  This works very well most of the times, but it can err in either direction:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Basic</span>\n\n<span class=\"c1\">-- a false positive: `simp` is flagged, but it should not be</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">]</span>  <span class=\"c1\">-- the first `simp` is considered \"non-terminal\"</span>\n\n<span class=\"c1\">-- a false negative: `simp` should be flagged, but is not</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">False</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span>  <span class=\"c1\">-- an actual non-terminal `simp` that is not flagged</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h.elim</span>\n</code></pre></div>\n<p>I also opened <a href=\"https://github.com/leanprover-community/mathlib4/pull/11247\">#11247</a> showing some of the <code>simp</code> that I squeezed as a consequence of the linter.  There are <em>many</em> more!  (You can look at the output of <code>noisy stdout</code> in <a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/8206831632/job/22446798751?pr=11246\">this CI run</a>.)</p>\n<p>Any feedback/comments are welcome!</p>",
        "id": 425571459,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709922927
    },
    {
        "content": "<p>Also, it would be relatively straightforward to lint against <em>terminal</em> <code>refine</code>s as well in a similar manner.</p>",
        "id": 425571506,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709922954
    },
    {
        "content": "<p>14 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/Try.20this.3A.20suffices.20simpa\">#general &gt; Try this: suffices simpa</a> by <span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span>.</p>",
        "id": 425661061,
        "sender_full_name": "Notification Bot",
        "timestamp": 1709970213
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/11259\">#11259</a> removes some more non-terminal <code>simp</code>s.</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/11261\">#11261</a> collects the times where I had to mute the simp linter (as well as the latest squeeze-fest): you can see that there are very few added <code>set_option</code>s in this PR.</p>",
        "id": 425677062,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709981885
    },
    {
        "content": "<p>Btw, after hundreds of correct linter suggestions, the pattern <code>cases x &lt;;&gt; [simp; tactic]</code> seems to be the only false positive.</p>",
        "id": 425677343,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709982125
    },
    {
        "content": "<p>Merged <a href=\"https://github.com/leanprover-community/mathlib4/pull/11259\">#11259</a></p>",
        "id": 425786726,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1710088845
    },
    {
        "content": "<p>There is a new batch of squeezing found by the linter: <a href=\"https://github.com/leanprover-community/mathlib4/pull/11281\">#11281</a>.</p>",
        "id": 426116650,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1710247483
    },
    {
        "content": "<p>I changed how the linter acts, it is much more robust now (<span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I <em>love</em> your unreachable tactic linter!) and have found no false positives yet.</p>",
        "id": 426116774,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1710247531
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> is <a href=\"https://github.com/leanprover-community/mathlib4/pull/11509\">#11509</a> the PR for the linter itself? I'd like to make a PR to remove the string-based Python linter once we have the actual Lean linter merged</p>",
        "id": 427959262,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1710949461
    },
    {
        "content": "<p>The initial linter is actually the one at <a href=\"https://github.com/leanprover-community/mathlib4/pull/11246\">#11246</a>.  However, as you might have seen, there has been some discussion of changing the intention of the linter at <a href=\"#narrow/stream/287929-mathlib4/topic/.60simp.60.20followers\">this thread</a>.</p>",
        "id": 427961528,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1710950075
    }
]