[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/11019\">#11019</a> introduces a linter to make sure that <code>#</code>-commands do not appear in mathlib.</p>\n<p>Currently, the linter is emits a warning whenever a <code>#</code>-command <em>does not</em> emit a message.  This means that the \"noisy\" step of CI will pick on all <code>#</code>-commands since they always emit something either themselves or thanks to the linter.</p>\n<p>There was a proposal of making the linter emit a warning on all <code>#</code>-command <em>during CI</em> for better error reporting.  Since options cannot be different in CI/locally, this would be achieved by checking whether the flag for \"warning as errors\" is set, since that is different in CI/locally.</p>\n<p>Should the <code>#</code>-command flag also non-silent commands in CI?</p>",
        "id": 430446069,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1711860868
    },
    {
        "content": "<p>/poll<br>\nCI should flag all <code>#</code>-commands, silent or not<br>\nCI and local behaviour should match: flag only silent <code>#</code>-commands</p>",
        "id": 430446070,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1711860873
    },
    {
        "content": "<p>[I messed up the syntax for the poll, but hopefully it is clear as is!]</p>",
        "id": 430446204,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1711861032
    },
    {
        "content": "<p>Actually no it's not super clear. Does \"CI\" in your poll mean \"the new linter introduced by <a href=\"https://github.com/leanprover-community/mathlib4/pull/11019\">#11019</a>\"?</p>",
        "id": 430446464,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711861238
    },
    {
        "content": "<p>Hopefully I can make it clearer.</p>\n<p>CI has a step called \"noisy\" that check that there are no messages emitted at all in mathlib.  This is already present and flags uses of \"noisy\" commands, whether they are <code>#</code>-commands or not.  The linter simply makes sure that <code>#</code>-commands are <em>always</em> noisy, so that the (unchanged) CI process will flag them.</p>",
        "id": 430446747,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1711861530
    },
    {
        "content": "<p>Ah so \"silent\" in your poll means \"silent now\", not \"silent after <a href=\"https://github.com/leanprover-community/mathlib4/pull/11019\">#11019</a>\"?</p>",
        "id": 430446825,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711861600
    },
    {
        "content": "<p>Thus, now, the noisy step allows ' #guard true` in final code, since it is not noisy (a <em>different</em> CI step flags it, but it is a bash linter, as opposed to a lean linter).</p>",
        "id": 430446848,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1711861627
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2311019.3A.20a.20syntax.20linter.20for.20.23-commands/near/430446825\">said</a>:</p>\n<blockquote>\n<p>Ah so \"silent\" in your poll means \"silent now\", not \"silent after <a href=\"https://github.com/leanprover-community/mathlib4/pull/11019\">#11019</a>\"?</p>\n</blockquote>\n<p>Correct: I meant \"silent\" as in \"the command emits no message, so the linter makes noise\".</p>",
        "id": 430446872,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1711861674
    },
    {
        "content": "<p>I was making a distinction on where the source of the message was: the actual command or the linter as a consequence of the behaviour of the command.</p>",
        "id": 430446928,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1711861714
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2311019.3A.20a.20syntax.20linter.20for.20.23-commands/near/430446848\">said</a>:</p>\n<blockquote>\n<p>Thus, now, the noisy step allows ' #guard true` in final code, since it is not noisy (a <em>different</em> CI step flags it, but it is a bash linter, as opposed to a lean linter).</p>\n</blockquote>\n<p>So CI <em>does</em> flag everything right now already?</p>",
        "id": 430446938,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711861727
    },
    {
        "content": "<p>Yes, CI also has another step (find <code>#</code>-commands) that flags them, but it is string based linter, not a syntax based one.</p>",
        "id": 430446967,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1711861777
    },
    {
        "content": "<p>The string-based linter was intended as a temporary measure before a \"better\" implementation in lean.</p>",
        "id": 430447020,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1711861807
    },
    {
        "content": "<p>Yeah so I don't really get your poll then. \"CI should flag all <code>#</code>-commands, silent or not\" is already true</p>",
        "id": 430447023,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711861811
    },
    {
        "content": "<p>(Btw, I wrote also the bash-linter)</p>",
        "id": 430447035,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1711861829
    },
    {
        "content": "<p>Ok, let me redo the poll.</p>",
        "id": 430447048,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1711861850
    },
    {
        "content": "<p>Sorry, I guess all I did was to demonstrate your poll needed clarification <span aria-label=\"speak no evil\" class=\"emoji emoji-1f64a\" role=\"img\" title=\"speak no evil\">:speak_no_evil:</span></p>",
        "id": 430447061,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711861863
    },
    {
        "content": "<p>/poll The noisy step of should<br>\nflag all uses of <code>#</code>-commands, also the ones that are noisy without the linter (e.g. <code>#eval 0</code>)<br>\nonly flag uses of <code>#</code>-commands that do not emit any message themselves (e.g. <code>#guard true</code>)</p>",
        "id": 430447195,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1711862015
    },
    {
        "content": "<p>I should also add that the idea is for this linter to <em>replace</em> the string-based one, so that the <code>#</code>-command step of CI would eventually be entirely removed since the noisy check with the current linter would make <code>#</code>-commands noisy no matter what.</p>",
        "id": 430447529,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1711862413
    },
    {
        "content": "<p>For me, I think this is less about what the noisy stdout step of CI should do, and more about whether temporary <code>#</code>-commands should <em>always</em> produce a linting message (of the form “<code>#</code>-commands such as '#check' are not allowed in Mathlib”) during CI. To rephrase some things in case it’s useful in this thread:</p>\n<p>The thing is that we don’t actually <em>need</em> to lint <code>#</code>-commands which emit a message for CI to fail, as e.g. a stray <code>#check</code> will cause a failure at the “noisy stdout” step, even if we don’t lint it.</p>\n<p>So we have two (reasonable) choices for CI behavior:</p>\n<ol>\n<li>only lint <code>#</code>-commands which do <em>not</em> emit a message (like <code>#guard</code>) (the rest cause CI to fail only by virtue of a noisy stdout)</li>\n<li>lint all <code>#</code>-commands during CI (needs a bit of a hack to achieve this, but can be done)</li>\n</ol>\n<p>Both of these cause CI to fail when any stray <code>#</code>-command is left in code. The latter just adds a warning message like “<code>#</code>-commands are not allowed in Mathlib”.</p>\n<p>(Detail: in both cases, <em>outside</em> of CI, <code>#</code>-commands that do not emit a message should probably be linted against, and message-emitters like <code>#check</code> should <em>not</em> be linted.)</p>",
        "id": 430454801,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1711868582
    },
    {
        "content": "<p>Though, here’s a question: since CI is run with <code>warningAsError</code>, does a linting warning actually stop the build in its tracks (for files that depend on the one with the warning)?</p>",
        "id": 430454874,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1711868664
    },
    {
        "content": "<p>(That would be a point in favor of option 1, I think: probably useful to build as much as you can to see downstream errors without having to remove your <code>#check</code> commands first.)</p>",
        "id": 430454984,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1711868777
    },
    {
        "content": "<p>Thomas, thank you very much for explaining the issue much better than what I managed to do!</p>",
        "id": 430455139,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1711868943
    },
    {
        "content": "<p>We could make the linter emit an <code>Info</code>, if <code>warnAsError</code> is true, so that CI will continue <em>and</em> produce a message.</p>",
        "id": 430457757,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1711871755
    }
]