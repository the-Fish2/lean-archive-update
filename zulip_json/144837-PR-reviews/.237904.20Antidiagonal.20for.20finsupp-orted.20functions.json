[
    {
        "content": "<p>In this PR,   done with <span class=\"user-mention\" data-user-id=\"406490\">@María Inés de Frutos Fernández</span> after work by <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> for his proof of one of the 100 theorems of <span class=\"user-mention\" data-user-id=\"217807\">@Freek Wiedijk</span> 's list (Archive/Partition.lean), we  define a class <code>Finset.HasPiAntidiagonal</code> consisting of functions with finite support on a given <code>Finset</code> with given sum :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The HasPiAntidiagonal class -/</span>\n<span class=\"kd\">class</span> <span class=\"n\">HasPiAntidiagonal</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">μ</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- The piAntidiagonal function -/</span>\n  <span class=\"n\">piAntidiagonal</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">μ</span> <span class=\"bp\">→</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"n\">μ</span><span class=\"o\">)</span>\n  <span class=\"sd\">/-- A function belongs to `piAntidiagonal s n`</span>\n<span class=\"sd\">    iff its support is contained in s and the sum of its components is equal to `n` -/</span>\n  <span class=\"n\">mem_piAntidiagonal</span> <span class=\"o\">{</span><span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">f</span> <span class=\"bp\">∈</span> <span class=\"n\">piAntidiagonal</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"bp\">↔</span> <span class=\"n\">f.support</span> <span class=\"bp\">≤</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">sum</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>Using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=HasAntidiagonal#doc\">docs#HasAntidiagonal</a>, we define a member <code>Finset.HasAntidiagonal.HasPiAntidiagonal</code>.<br>\n We use this class to compute the coefficients of products of power series (in several or one variable) , <code>MvPowerSeries.coeff_prod </code>and <code>PowerSeries.coeff_prod</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Coefficients of a product of power series -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">coeff_prod</span> <span class=\"o\">[</span><span class=\"n\">HasPiAntidiagonal</span> <span class=\"n\">ι</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℕ</span><span class=\"o\">)]</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">MvPowerSeries</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">coeff</span> <span class=\"n\">R</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n      <span class=\"bp\">∑</span> <span class=\"n\">l</span> <span class=\"k\">in</span> <span class=\"n\">piAntidiagonal</span> <span class=\"n\">s</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n        <span class=\"bp\">∏</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">coeff</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"bp\">…</span>\n</code></pre></div>",
        "id": 410040949,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1703605701
    },
    {
        "content": "<p>I already mentioned it but I don't know whether you looked at the code: We have more <code>cut</code>  API <a href=\"https://github.com/YaelDillies/LeanAPAP/blob/master/LeanAPAP/Prereqs/Cut.lean\">here</a>.</p>",
        "id": 410041289,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703605931
    },
    {
        "content": "<p>I don't remember that…  In any case, most of this code seems to be there, in a form or another.<br>\n(One difference with your code, that spares us a decidable instance, is to have these cut stuff defined as <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finsupp#doc\">docs#Finsupp</a>.)</p>",
        "id": 410041781,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1703606248
    }
]