[
    {
        "content": "<p>I claim that there is no reason for <code>norm_num</code> to support these implementation details; if these are in your goal, then something has already gone wrong and <code>norm_num</code> isn't responsible for saving you.</p>\n<p>This PR removes all such cases where <code>norm_num</code> and <code>positivity</code> are special cased to these implementation details, and nothing breaks except the explicit tests for this behavior.</p>",
        "id": 420507739,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707413498
    },
    {
        "content": "<p>(recall that the canonical spelling is <code>a - b</code> aka <code>HSub.sub</code>)</p>",
        "id": 420507947,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707413565
    },
    {
        "content": "<p>(aka <code>HSub.hSub</code> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> )</p>",
        "id": 420508314,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707413685
    },
    {
        "content": "<p>I think it's reasonable for norm_num to be able to prove <code>Nat.add 2 2 = 4</code>, I don't see it as the job of any other tool (except <code>rfl</code> in this case) to do so</p>",
        "id": 420563948,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707437405
    },
    {
        "content": "<p>true, it's not a canonical form, but making norm_num fail just makes the non-canonical form that much more annoying and problematic to clean up</p>",
        "id": 420564042,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707437471
    },
    {
        "content": "<p>plus, it's almost no work to support</p>",
        "id": 420564097,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707437499
    },
    {
        "content": "<p>I'd argue it's the job of <code>dsimp</code> to put things in canonical form</p>",
        "id": 420586828,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707454713
    },
    {
        "content": "<p>It's extra work to support if you write the handlers using <code>~q</code> matching, which is a change I make in a later PR</p>",
        "id": 420587084,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707454865
    },
    {
        "content": "<p>It's also inconsistent to support <code>Nat.add</code> but not <code>Int.add</code> or <code>Rat.add</code> or <code>ADownstreamType.add</code></p>",
        "id": 420587149,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707454923
    },
    {
        "content": "<p>well you can add a norm_num attribute for that too</p>",
        "id": 420587207,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707454952
    },
    {
        "content": "<p>I would not recommend using <code>~q</code> matching, it's a performance issue</p>",
        "id": 420587277,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707454995
    },
    {
        "content": "<p>I don't think the benchmark on <a href=\"https://github.com/leanprover-community/mathlib4/pull/10196\">#10196</a> really supports that claim</p>",
        "id": 420587372,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707455082
    },
    {
        "content": "<p>That's about positivity, I don't have a good sense of how much we would actually expect to see it in the global benchmark</p>",
        "id": 420587639,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707455342
    },
    {
        "content": "<p>Ah, I guess I need to make the extended version of that PR to get the full benchmark I need to test your claim</p>",
        "id": 420587680,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707455398
    },
    {
        "content": "<p>My thinking is that while it probably is a (hopefully very small) performance issue, using Qq reduces the chance of correctness issues</p>",
        "id": 420588540,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707456199
    },
    {
        "content": "<p>there are also some subtleties in the order in which isDefEq checks are done which causes major performance differences if you aren't careful</p>",
        "id": 420589351,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707456991
    },
    {
        "content": "<p>this has to do with why the norm_num extension for addition has a <code>f = add</code> hypothesis</p>",
        "id": 420589465,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707457094
    }
]