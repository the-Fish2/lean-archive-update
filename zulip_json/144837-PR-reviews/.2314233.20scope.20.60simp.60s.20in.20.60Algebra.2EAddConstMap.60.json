[
    {
        "content": "<p>The keys for the left-hand-side's of the <code>simp</code> lemmas are pretty general. Whenever they are accessible, they will match quite often. However, this is a rather specialized structure. So we scope them to the <code>AddConstMapClass</code> namespace. This will ameliorate the performance regression in <a href=\"https://github.com/leanprover-community/mathlib4/pull/14201\">#14201</a>.</p>",
        "id": 447801642,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1719588603
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2867\">lean4#2867</a> is at fault here, right?</p>",
        "id": 447809608,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719590722
    },
    {
        "content": "<p>On some, but there are others that seem pretty general</p>",
        "id": 447809972,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1719590796
    },
    {
        "content": "<p>Actually, unless I misunderstand the title of that issue this is about matching too much</p>",
        "id": 447810170,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1719590835
    },
    {
        "content": "<p>With <code>FunLike</code> getting unbundled you have some very general keys for the lhs's so these match everywhere.</p>",
        "id": 447811071,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1719591003
    },
    {
        "content": "<p>I think the main issue is the <code>no_index</code>, which is required thanks to that Lean issue, but means that the lemma in question matches <code>f (x + y)</code> even though it is only supposed to match <code>f (x + 37)</code></p>",
        "id": 447814724,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719591682
    },
    {
        "content": "<p>And indeed the dfunlike unbundling meant that there was nothing else in the way of this overeager matching</p>",
        "id": 447814980,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719591728
    },
    {
        "content": "<p>I only count the use of <code>no_index</code> once though. That seems like a huge penalty for just one occurrence. </p>\n<p>We did pay a penalty in linting for the <code>FunLike</code> unbundling before. It was near this amount but came from way more changes</p>",
        "id": 447815882,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1719591970
    },
    {
        "content": "<p>I would guess the penalty is because everywhere <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=map_add#doc\">docs#map_add</a> would previously apply instantly (which I would guess is quite a lot) is now first asked to try <code>map_add_const</code></p>",
        "id": 447817049,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719592244
    },
    {
        "content": "<p>I did try to poke at the internal of <code>simpNF</code> to see if I could wrap a <code>profileitM</code></p>",
        "id": 447817316,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1719592301
    },
    {
        "content": "<p>I think one of them was just a coercion of a <code>FunLike</code> applied to a term of the source for the LHS...</p>",
        "id": 447817960,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1719592477
    },
    {
        "content": "<p>I guess if my theory is true, then only <code>map_add_ofNat'</code> is the one responsible for the performance hit</p>",
        "id": 447818021,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719592498
    },
    {
        "content": "<p>I've got to step away for a bit (I think). Maybe I come back to a better fix :) ?</p>",
        "id": 447818145,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1719592539
    },
    {
        "content": "<p>I think <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AddConstMapClass.map_const#doc\">docs#AddConstMapClass.map_const</a> is the winner here. The keys are </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">DFunLike.coe</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 448370766,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1719849015
    }
]