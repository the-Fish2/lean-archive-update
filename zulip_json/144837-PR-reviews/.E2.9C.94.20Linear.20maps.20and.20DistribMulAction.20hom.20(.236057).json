[
    {
        "content": "<p>As <span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span> made me observe, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap#doc\">docs#LinearMap</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=DistribMulActionHom#doc\">docs#DistribMulActionHom</a> are really the same thing, especially in view of PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/6057\">#6057</a> from <a href=\"https://github.com/leanprover-community/mathlib4/tree/SMulSemiHom\">branch#SMulSemiHom</a> where <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MulActionHom#doc\">docs#MulActionHom</a> is refactored so as to allow for a map between the two types that act:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Equivariant functions. -/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">MulActionHom</span> <span class=\"n\">where</span> <span class=\"c1\">-- parameters (φ) (X) (Y)</span>\n  <span class=\"sd\">/-- The underlying function. -/</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span>\n  <span class=\"sd\">/-- The proposition that the function commutes with the actions. -/</span>\n  <span class=\"n\">map_smul'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">toFun</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">toFun</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>I am tempted to rename <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=DistribMulActionHom#doc\">docs#DistribMulActionHom</a> as <code>LinearMap</code>. That would not make obsolete the file on linear maps for modules (on the opposite: what is done there takes into account the ring and module structures) but just suppress one type.</p>\n<p>A slight difference exists, though, because <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap#doc\">docs#LinearMap</a> does not assume <code>map_zero'</code> from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=DistribMulActionHom#doc\">docs#DistribMulActionHom</a>, but that property is proved in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap.toDistribMulActionHom#doc\">docs#LinearMap.toDistribMulActionHom</a><br>\nProbably, that just requires to define a new constructor for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap#doc\">docs#LinearMap</a> that provides <code>map_zero'</code>in the relevant context (and of course to adjust a bunch of files…).</p>\n<p>Any opinion?</p>",
        "id": 409711712,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1703332733
    },
    {
        "content": "<p>I think I tried merging these in Lean3 and the performance fallout was too awful</p>",
        "id": 409712373,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703333222
    },
    {
        "content": "<p>One obvious concern that isn't present in your code sample above is that you've demoted <code>(φ : R → S)</code> from a RingHom to a plain function; I think this change is reasonable, but it would be worth trying to make it to LinearMap before also trying to merge the two types</p>",
        "id": 409712533,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703333359
    },
    {
        "content": "<p>So you'd advise me to finish up <a href=\"https://github.com/leanprover-community/mathlib4/pull/6057\">#6057</a> before I do that. (I feel I won't have the courage to go back to this change afterwards, because it's far off my initial need of having equivariant MulActionHom to do group theory, primitive actions, etc.)</p>",
        "id": 409713138,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1703333935
    },
    {
        "content": "<p>I recommend not combining any of these things into the same PR</p>\n<ol>\n<li>Changing (semi)<code>LinearMap</code> to not require the argument be a RingHom</li>\n<li>Adding a <code>map_zero</code> field to <code>LinearMap</code></li>\n<li>Making <code>MulActionHom</code> equivariant</li>\n<li>Merging DistribMulActionHom and LinearMap</li>\n</ol>",
        "id": 409713944,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703334690
    },
    {
        "content": "<blockquote>\n<p>Probably, that just requires to define a new constructor for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap#doc\">docs#LinearMap</a> that provides map_zero'in the relevant context (and of course to adjust a bunch of files…).</p>\n</blockquote>\n<p>A probably less disruptive approach would be to define a default tactic for the <code>map_zero</code> field that allows the existing constructor to still be used.</p>",
        "id": 409714045,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703334783
    },
    {
        "content": "<p>I shall follow your recommendation. For the moment, my personal goal is to make step 3 and I shall begin with that.</p>",
        "id": 409729842,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1703348256
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> has marked this topic as resolved.</p>",
        "id": 409729960,
        "sender_full_name": "Notification Bot",
        "timestamp": 1703348392
    }
]