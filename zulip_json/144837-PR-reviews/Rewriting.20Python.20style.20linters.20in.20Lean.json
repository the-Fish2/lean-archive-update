[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/13339\">#13339</a> is one of the first steps towards rewriting all style linters in Python, blocking further progress. Can I interest somebody in reviewing it? It's almost all code motion (from a file in <code>scripts</code> to a new file in <code>Mathlib/Utils</code>), plus one easy refactoring.<br>\nCC <span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> who originally wrote the code</p>",
        "id": 441735560,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1717169285
    },
    {
        "content": "<p>Looks good. Perhaps we can add a note in the lakefile warning about the hardcoding?</p>",
        "id": 441898797,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1717244775
    },
    {
        "content": "<p>Done. While at this, I realised one possible defect in the code: <code>getLeanLibs</code> on mathlib also yields the the <code>lean_lib</code> <code>docs</code>; should this be excluded as well?</p>",
        "id": 441900302,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1717245720
    },
    {
        "content": "<p><a href=\"http://speed.lean-fro.org/mathlib4/run-detail/c08c756c-9478-422c-8729-73459c2ca228\">http://speed.lean-fro.org/mathlib4/run-detail/c08c756c-9478-422c-8729-73459c2ca228</a></p>",
        "id": 441918489,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1717254890
    },
    {
        "content": "<p>Oh, that seems unexpected. This PR was purely moving code...<br>\nCan you help me interpret these numbers - what does \"linting\" mean? Is this simply measuring \"there's a new file in mathlib\" (and the time was spent just on the script before) - I guess not, but I have very little idea what this means. Help welcome.</p>",
        "id": 441961576,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1717274820
    },
    {
        "content": "<p>This seems to not be a hiccup, instructions for linting jumped 14.2% and the linting wall clock jumped 17.3% (~90 seconds) and the instructions haven't come down. </p>\n<p>I am bit stumped by this atm. Perhaps I am being dense.</p>",
        "id": 444276811,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1718209055
    },
    {
        "content": "<p>We will see if it is real soon <a href=\"https://github.com/leanprover-community/mathlib4/pull/13779\">#13779</a></p>",
        "id": 444288932,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1718212364
    },
    {
        "content": "<p>Not fake</p>",
        "id": 444296453,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1718214737
    },
    {
        "content": "<p>I can't believe it is taking 90s to lint that single file but what is another explanation?</p>",
        "id": 444300126,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1718215852
    },
    {
        "content": "<p>Can confirm that just adding <code>Mathlib.Util.GetAllModules</code> alone is enough for the regression.</p>",
        "id": 444544547,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1718306758
    },
    {
        "content": "<p>By the way, the thread title is somewhat ambiguous, I wasn't sure if it meant rewriting style linters to use Python (instead of lean / something else?)</p>",
        "id": 444583770,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1718322887
    },
    {
        "content": "<p>Can an admin rename this to \"Rewriting Python style linters in Lean\", please? I just tried, but cannot any more?</p>",
        "id": 444643615,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1718352204
    },
    {
        "content": "<p>Done</p>",
        "id": 444643875,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1718352284
    },
    {
        "content": "<p>It was the <code>Lake</code> import</p>",
        "id": 444688671,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1718367791
    },
    {
        "content": "<p>Do we need <code>getLeanLibs</code> in <code>Mathlib</code> proper for whatever is coming next?</p>",
        "id": 444688952,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1718367889
    },
    {
        "content": "<p>I just approved your PR - short answer: no, I'm not aware of any reason we do.</p>",
        "id": 444692940,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1718369268
    },
    {
        "content": "<p>Filed <a href=\"https://github.com/leanprover-community/mathlib4/pull/13836\">#13836</a> to lint on importing <code>Lake</code> in Mathlib, with a clear warning explaining the reason.</p>",
        "id": 444694335,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1718369707
    },
    {
        "content": "<p>By the way: I'd love to rewrite this all in Lean. In Python, I have to choose between adding a second error variant or trying to thread extra data through it - Lean's inductive types are just much nicer. If you'd like to see this happen, you'd love to hear your opinion <a href=\"#narrow/stream/287929-mathlib4/topic/Style.20linter.20for.20broad.20imports\">here</a>.</p>",
        "id": 444695691,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1718370066
    },
    {
        "content": "<p>Status update: this is bottle-necked on a review of <a href=\"https://github.com/leanprover-community/mathlib4/pull/13620\">#13620</a>, for providing the equivalent infrastructure in Lean. Subsequent linters can be reviewed in parallel.</p>",
        "id": 445577446,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1718799924
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"634338\">Michael Rothgang</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/Rewriting.20Python.20style.20linters.20in.20Lean/near/445577446\">said</a>:</p>\n<blockquote>\n<p>Status update: this is bottle-necked on a review of <a href=\"https://github.com/leanprover-community/mathlib4/pull/13620\">#13620</a>, for providing the equivalent infrastructure in Lean. Subsequent linters can be reviewed in parallel.</p>\n</blockquote>\n<p>Thanks for the feedback! I responded.</p>",
        "id": 445853679,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1718891534
    },
    {
        "content": "<p>Okay, I'm happy with just an explanation in the comments of the difficulty with error handling there.</p>",
        "id": 445968951,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718924677
    },
    {
        "content": "<p>Thanks for the review! The next step could be to land <a href=\"https://github.com/leanprover-community/mathlib4/pull/14012\">#14012</a> - making <code>lake exe lint_style</code> produce human-readable output by default. (This also paves the way towards granular updates of file length exceptions, which <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> (and others before) asked for the other day.)</p>",
        "id": 446041860,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1718961410
    },
    {
        "content": "<p>I just realised that <a href=\"https://github.com/leanprover-community/mathlib4/pull/13620\">#13620</a> breaks <code>update-style-exceptions.py</code> on master: the style exception entries will be in the wrong format. Sorry for this! <a href=\"https://github.com/leanprover-community/mathlib4/pull/14012\">#14012</a> fixes this as well; I had not realised this changes was already required...</p>",
        "id": 446061029,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1718968462
    },
    {
        "content": "<p>Less urgent: <a href=\"https://github.com/leanprover-community/mathlib4/pull/13240\">#13240</a> rewrites the copyright header check in Lean; I just rebased this on master.</p>",
        "id": 446065321,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1718970176
    },
    {
        "content": "<p>Thanks for the reviews! <a href=\"https://github.com/leanprover-community/mathlib4/pull/14058\">#14058</a> rewrites the \"adaptation note\" linter in Lean; <a href=\"https://github.com/leanprover-community/mathlib4/pull/14059\">#14059</a> (depending on that, but is reviewable already) does the \"broad imports\" (e.g. Mathlib.Tactic) one.</p>",
        "id": 446462211,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1719169896
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/14093\">#14093</a> rewrite the line length check in Lean (and fixes some small oversights from the \"broad imports\" linter, which were inconsequential).</p>",
        "id": 446636719,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1719241002
    }
]