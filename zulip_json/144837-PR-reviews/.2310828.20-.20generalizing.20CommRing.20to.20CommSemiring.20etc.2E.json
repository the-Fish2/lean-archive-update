[
    {
        "content": "<p>PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/10828\">#10828</a> was supposed to be inoccuous, just replacing <code>CommRing</code> by <code>CommSemiring</code>,  <code>AddCommGroup</code> to <code>AddCommMonoid</code>, etc. in places where it is obviously sufficient. <br>\nBesides that, no definition is changed.</p>\n<p>BUT! There is some side effect in the compilation of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Module.Flat.directSum#doc\">docs#Module.Flat.directSum</a>, because Lean can't find an instance anymore, so I had to add this before the proof.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kn\">local</span> <span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">[(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n    <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"bp\">⨁</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">↥</span><span class=\"n\">I</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">instAddCommGroupDirectSumToAddCommMonoid</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"bp\">↥</span><span class=\"n\">I</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span> <span class=\"n\">i</span>\n</code></pre></div>",
        "id": 422684923,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1708541815
    },
    {
        "content": "<p>II found the proof using <code>apply?</code>, but <code>:= inferInstance</code> doesn't work.</p>",
        "id": 422685212,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1708541911
    },
    {
        "content": "<p>If we do </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">DirectSum</span> <span class=\"n\">ι</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">inferInstanceAs</span> <span class=\"o\">(</span><span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"bp\">Π₀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>and then have to unify anything on <code>DirectSum</code> with this, are we forced to unfold <code>DirectSum</code>?</p>",
        "id": 422690156,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708543897
    },
    {
        "content": "<p>I'm not sure I understand your question. What happens is that </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">[(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n    <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"bp\">⨁</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">N</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n<span class=\"c1\">--  instAddCommGroupDirectSumToAddCommMonoid fun i ↦ N ⊗[R] M i</span>\n\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">[(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n    <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"bp\">⨁</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">↥</span><span class=\"n\">I</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n   <span class=\"c1\">-- fails : inferInstance</span>\n\n<span class=\"sd\">/-- instance that a direct sum of tensor products is an add comm group -/</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">local</span> <span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">[(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n    <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"bp\">⨁</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">↥</span><span class=\"n\">I</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">instAddCommGroupDirectSumToAddCommMonoid</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"bp\">↥</span><span class=\"n\">I</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span> <span class=\"n\">i</span>\n</code></pre></div>\n<p>so it seems something has to do with having <code>↥I </code> instead of <code>N</code>.</p>",
        "id": 422694627,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1708545023
    },
    {
        "content": "<p>In the error message, after having set <code>trace.Meta.synthInstance</code> to <code> true</code> , I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"bp\">↥</span><span class=\"n\">I</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n        <span class=\"o\">[]</span> <span class=\"n\">result</span> <span class=\"bp\">&lt;</span><span class=\"n\">not</span><span class=\"bp\">-</span><span class=\"n\">available</span><span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"n\">cached</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 422695014,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1708545160
    },
    {
        "content": "<p>It seems to reset everything to meta-variables in failure vs success</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">tryResolve</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"bp\">⨁</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"bp\">↥</span><span class=\"n\">I</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">≟</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">DirectSum</span> <span class=\"bp\">?</span><span class=\"n\">m.94677</span> <span class=\"bp\">?</span><span class=\"n\">m.94678</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n<span class=\"bp\">—</span> <span class=\"n\">vs</span>\n<span class=\"o\">[</span><span class=\"n\">tryResolve</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"bp\">⨁</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"bp\">↥</span><span class=\"n\">N</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">≟</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"bp\">⨁</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"bp\">↥</span><span class=\"n\">N</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n</code></pre></div>",
        "id": 422697334,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708546123
    },
    {
        "content": "<p>The message you have comes from the fact that there is an instance available but it is black listed for this search due to transparency, depth, or something (afaik)</p>",
        "id": 422697473,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708546187
    },
    {
        "content": "<p>Indeed declaring </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">Ideal.addCommGroup</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">AddCommGroup</span> <span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"n\">Submodule.addCommGroup</span> <span class=\"n\">I</span>\n</code></pre></div>\n<p>fixes the problem. </p>\n<p>It seems like it has to create a meta variable to pass through the reducible definition of <code>Ideal</code> but this causes problems with the availability of <code>Submodule.addCommGroup</code> in the cache</p>",
        "id": 422711443,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708552766
    },
    {
        "content": "<p>This seems very similar to an issue in <a class=\"stream-topic\" data-stream-id=\"217875\" href=\"/#narrow/stream/217875-Is-there-code-for-X.3F/topic/Exterior.20powers\">#Is there code for X? &gt; Exterior powers</a></p>",
        "id": 422713490,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708553759
    },
    {
        "content": "<p>By the way, some proofs in that file already had to recall Lean of these instances, for example <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Module.Flat.iff_rTensor_injective#doc\">docs#Module.Flat.iff_rTensor_injective</a>.<br>\nSo in the proof, I just added :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"bp\">↥</span><span class=\"n\">I</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"n\">TensorProduct.addCommGroup</span>\n</code></pre></div>\n<p>and everything works fine again.</p>",
        "id": 422717426,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1708555834
    },
    {
        "content": "<p>I noticed something strange, though: I wondered whether <code>Submodule</code> would make things different, and yes, it works.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">[(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n    <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"bp\">⨁</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">N</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span> <span class=\"c1\">-- succeeds</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">[(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n    <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"bp\">⨁</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>  <span class=\"c1\">-- succeeds</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">[(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n    <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"bp\">⨁</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">↥</span><span class=\"n\">I</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"c1\">-- `inferInstance` fails</span>\n    <span class=\"n\">instAddCommGroupDirectSumToAddCommMonoid</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"bp\">↥</span><span class=\"n\">I</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span>  <span class=\"n\">i</span>\n</code></pre></div>",
        "id": 422717816,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1708556062
    }
]