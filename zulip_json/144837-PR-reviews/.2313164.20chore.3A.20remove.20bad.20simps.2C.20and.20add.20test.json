[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/13164\">#13164</a>, by identifying and removing some bad simp lemmas, takes 15% off the instructions/wallclock of the linting stage.</p>\n<p>Moreover, I think it likely significantly improves the experience of anyone working under <code>import Mathlib</code>.</p>\n<p>Bad simp lemmas in leaf files of Mathlib have barely any impact in our CI build times, but ruin the experience after <code>import Mathlib</code>. It would be good to work out how to have more tests against this!</p>",
        "id": 440491250,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716550403
    },
    {
        "content": "<p>In particular, my tutorial file times out with <code>import Mathlib</code> before this PR, but runs fast after it, so I would quite like this in. :-)</p>",
        "id": 440494652,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716551813
    },
    {
        "content": "<p>What is a bad simp lemma? — so that we can try to avoid writing them.</p>",
        "id": 440510354,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1716557597
    },
    {
        "content": "<p>It's a matter of how the lemma is indexed in the discrimination tree. When the left hand side is a lambda, there is nothing to index on (in the current <code>DiscrTree</code> implementation), and so it is applied <em>everywhere</em>.</p>",
        "id": 440510613,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716557675
    },
    {
        "content": "<p>We need a linter for this.</p>",
        "id": 440510619,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716557679
    },
    {
        "content": "<p>Among other things, a simp lemma with no head symbol on the LHS is a bad simp lemma. Eg <code>a + 0 = a</code> has head symbol <code>+</code> on the LHS, but <code>(fun x ↦ x + 0) a = a</code> is bad</p>",
        "id": 440510624,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716557681
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Kim Morrison</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2313164.20chore.3A.20remove.20bad.20simps.2C.20and.20add.20test/near/440510613\">said</a>:</p>\n<blockquote>\n<p>... and so it is applied <em>everywhere</em>.</p>\n</blockquote>\n<p>Do we agree that this is how the Lean 3 algorithm worked?</p>",
        "id": 440510784,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716557725
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span> posted some code <a href=\"#narrow/stream/348111-batteries/topic/print.20discrimination.20tree.20keys/near/439906866\">here</a> that lets you inspect the key.</p>",
        "id": 440510798,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716557730
    },
    {
        "content": "<p>And I think he is going to PR this to lean.</p>",
        "id": 440510847,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716557754
    },
    {
        "content": "<p>Yes I am. <span aria-label=\"salute\" class=\"emoji emoji-1fae1\" role=\"img\" title=\"salute\">:salute:</span></p>",
        "id": 440510974,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1716557789
    },
    {
        "content": "<p>In v4.9.0-rc1 (or nightly-testing already) there is a <code>simp (config := {index := false})</code> option, which allows you to disable the discrimination tree. This is really for the opposite problem: when a theorem is not being applied, rather than when it is being applied too often. Sometimes in this situation by inspecting the key you can work out where to insert a <code>no_index</code> in the statement to produce a more flexible key.</p>",
        "id": 440511145,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716557839
    },
    {
        "content": "<p>Now that we have <code>set_option diagnostics true</code>, I think a really useful thing to do is take random chunks of interesting code, paste them into a file with <code>import Mathlib</code>, and then look at the diagnostics output for apparently irrelevant things. These are then clues about bad simp lemmas, or insane type class searches, that are otherwise hard to find.</p>",
        "id": 440511424,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716557922
    },
    {
        "content": "<p>Though, in its current form, it is just <a href=\"#narrow/stream/270676-lean4/topic/Simp.20indexing.20failure/near/402007322\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Simp.20indexing.20failure/near/402007322</a> plus an tactic version</p>\n<p>It'll need to use the message data that Leo put in for <code>Array Key</code> and maybe also take a hypothesis in the local context.</p>",
        "id": 440511440,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1716557929
    },
    {
        "content": "<p>I've now opened <a href=\"https://github.com/leanprover-community/mathlib4/pull/13171\">#13171</a> to partially revert <a href=\"https://github.com/leanprover-community/mathlib4/pull/13164\">#13164</a></p>",
        "id": 440516648,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716559527
    },
    {
        "content": "<p>It looks like it overlaps significantly with <a href=\"https://github.com/leanprover-community/mathlib4/pull/8453\">#8453</a> . Review that one instead?</p>",
        "id": 440517291,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1716559701
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/13171\">#13171</a> passes CI while <a href=\"https://github.com/leanprover-community/mathlib4/pull/8453\">#8453</a> doesn't (and includes unnecessary changes), so I suggest we merge the former</p>",
        "id": 441810830,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717191309
    }
]