[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/13483\">#13483</a> introduces <code>lake exe auto_bump</code> that uses the cache to automatically replace deprecated declarations with the corresponding un-deprecated one.</p>\n<p>The current version does not handle namespacing and dot-notation: it performs the replacement when the fully-qualified deprecated name appears in the source syntax and replaces it with the fully-qualified new name.</p>\n<p>This is intended to be a first step in automating updates: combining this with a linter that emits appropriate warnings, the functionality of <code>lake exe auto_bump</code> can be extended to perform more complicated updates.</p>",
        "id": 442295393,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717430266
    },
    {
        "content": "<p>I'm happy to hear comments/issues!  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 442295543,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717430290
    },
    {
        "content": "<p>For reference, this is a modification of the script that I used to perform the <code>refine'</code> to <code>refine</code> replacements.</p>",
        "id": 442297759,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717430664
    },
    {
        "content": "<p>Maybe it should just be called <code>lake exe bump</code>? All <code>lake exe</code> are \"auto\"matic, right?</p>",
        "id": 442308434,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1717432635
    },
    {
        "content": "<p>I don't think this should be called \"bump\", this sounds like something related to bumping dependencies</p>",
        "id": 442369840,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717447924
    },
    {
        "content": "<p>Would <code>lake exe refactor</code> be better?  I was not especially happy with <code>(auto_)bump</code> myself (and I also agree that <code>auto</code> is superfluous).</p>",
        "id": 442374842,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717449427
    },
    {
        "content": "<p>I'm reserving <code>lake exe refactor</code> for a more general project which may subsume this</p>",
        "id": 442382491,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717452121
    },
    {
        "content": "<p>For now, just give it a very specific name like <code>update_deprecated</code>. There's no need to pick a super short name for something that rarely needs to be run, imo.</p>",
        "id": 442398599,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1717457619
    },
    {
        "content": "<p>I just renamed the command <code>update_deprecations</code>.</p>",
        "id": 442436188,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717475504
    },
    {
        "content": "<p>I also made the script handle non-fully-qualified names.</p>",
        "id": 442448103,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717481261
    },
    {
        "content": "<p>By the way, if you want to test the script in a branch with working cache, it should be easy:</p>\n<ul>\n<li>merge the PR (<code>adomani/auto-deprecations</code>) into your branch,</li>\n<li>run <code>lake build</code> (the added files are not imported by anything in mathlib and only import <code>Lean.Elab.Command</code> and <code>Cli.Basic</code>),</li>\n<li>run <code>lake exe update_deprecations</code>.</li>\n</ul>",
        "id": 442450038,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717482135
    },
    {
        "content": "<p>The script now also takes an optional list of target modules and performs the replacements on those modules only.</p>",
        "id": 442586823,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717522688
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> Do you think you can also test this out already on one of the on-going community projects that depends on mathlib? Maybe you can help with a bump of PNT+ or something like that?</p>\n<p>Or is that hard to pull of as long as the script isn't available in mathlib master?</p>",
        "id": 442722810,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1717575448
    },
    {
        "content": "<p>It should be very easy to make it a \"stand-alone\" tool.  The quickest way right now, would be to copy</p>\n<ul>\n<li>the two files (that I could probably merge into one) <code>Mathlib/Tactic/UpdateDeprecations.lean</code> and <code>scripts/update_deprecations.lean</code>;</li>\n<li>the part of the script inside the <code>lakefile</code>, acknowledging the existence of <code>update_deprecations</code></li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"w\">  </span><span class=\"sd\">/-- `lake exe update_deprecations` automatically updates deprecations. -/</span>\n<span class=\"w\">  </span><span class=\"n\">lean_exe</span><span class=\"w\"> </span><span class=\"n\">update_deprecations</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">srcDir</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"s2\">\"scripts\"</span>\n<span class=\"w\">  </span><span class=\"n\">supportInterpreter</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">true</span>\n</code></pre></div>\n<p>I can look into making this even simpler: the script has no actual mathlib dependecies, just a core and a lake dependency.</p>",
        "id": 442730566,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717577860
    },
    {
        "content": "<p>I have a few scattered meeting today, but I can try to detach the tool, so that it can be used more easily for other projects.</p>",
        "id": 442730752,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717577910
    },
    {
        "content": "<p>Arguably then it shouldn't live in mathlib either. Because it might also be a useful tool for projects that don't depend on mathlib.</p>",
        "id": 442731197,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1717578041
    },
    {
        "content": "<p>I created an <a href=\"https://github.com/adomani/UpdateDeprecations\">independent project</a>, though I am not sure how to use it: would this simply be adding a</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">require</span><span class=\"w\"> </span><span class=\"n\">UpdateDeprecations</span><span class=\"w\"> </span><span class=\"k\">from</span><span class=\"w\"> </span><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"s2\">\"https://github.com/adomani/UpdateDeprecations\"</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"w\"> </span><span class=\"s2\">\"master\"</span>\n</code></pre></div>\n<p>in the lakefile?</p>",
        "id": 442811152,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717599581
    },
    {
        "content": "<p>That should work.</p>",
        "id": 442812422,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1717599849
    },
    {
        "content": "<p>Ok, besides the PR directly to mathlib, I have created now a <a href=\"http://\">standalone project</a> with the <code>update_deprecations</code> script.</p>\n<p>Adding</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">require</span><span class=\"w\"> </span><span class=\"n\">updateDeprecations</span><span class=\"w\"> </span><span class=\"k\">from</span><span class=\"w\"> </span><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"s2\">\"https://github.com/adomani/UpdateDeprecations\"</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"w\"> </span><span class=\"s2\">\"master\"</span>\n</code></pre></div>\n<p>to the lakefile and the running</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">lake</span><span class=\"w\"> </span><span class=\"n\">update</span><span class=\"w\"> </span><span class=\"n\">updateDeprecations</span>\n</code></pre></div>\n<p>gives access to</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">lake</span><span class=\"w\"> </span><span class=\"n\">env</span><span class=\"w\"> </span><span class=\"n\">update_deprecations</span>\n</code></pre></div>\n<p>that will automatically rename all (non-dot-notational) deprecations in your project.  You can also pass an array of files via</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">lake</span><span class=\"w\"> </span><span class=\"n\">env</span><span class=\"w\"> </span><span class=\"n\">update_deprecations</span><span class=\"w\"> </span><span class=\"c1\">--mods Mathlib/whatever.lean,Mathlib.whateverelse,...</span>\n</code></pre></div>",
        "id": 442875707,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717616467
    },
    {
        "content": "<p>The command uses the cache either for the entire project (when ran with no target modules) or just for the listed modules.</p>",
        "id": 442875966,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717616540
    }
]