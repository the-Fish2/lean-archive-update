[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  Just to make sure I understand your suggestion correctly: adopting your proposal would mean that all operations on <code>HashMap.Imp</code> take a proof of <code>HashMap.Imp.WF</code> as an argument, right?</p>",
        "id": 434330117,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1713521304
    },
    {
        "content": "<p>oh whoops I forgot we had such a tier of functions. These should just take <code>0 &lt; buckets.size</code> as an argument, not the full WF (at least, this is what will minimize the proof burden on direct uses of the Imp functions, in addition to being the same as the current code up to tupling order so lemmas will be mostly unaffected)</p>",
        "id": 434330804,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713521538
    },
    {
        "content": "<p>this should probably be done via an ad hoc subtype</p>",
        "id": 434330889,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713521569
    },
    {
        "content": "<p>because we want the condition to stay as an \"intrinsic verification\" proof</p>",
        "id": 434330982,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713521616
    },
    {
        "content": "<p>e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">expand</span> <span class=\"o\">[</span><span class=\"n\">Hashable</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">size</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">buckets</span> <span class=\"o\">:</span> <span class=\"n\">Buckets</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Imp</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"bp\">//</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m.buckets.size</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 434331189,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713521692
    },
    {
        "content": "<p>Alright, thanks, I'll try that and see how it works out.</p>",
        "id": 434331263,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1713521719
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> okay, I tested this out for a bit in <a href=\"https://github.com/leanprover/std4/pull/754\">std4#754</a>, but I haven't really gotten it to work. There is now a lot of unpacking and repacking in the definitions of the operations, and this makes fixing the proofs quite tedious. Is what I did what you had in mind or were you thinking of a different/better approach? So far, I don't think that the new approach is simpler or produces a smaller diff than the previous one. I also don't love that working with <code>HashMap.Imp</code> always requires passing proofs around now, I think it would be nice to defer that to the rest of the verification work.</p>",
        "id": 434356330,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1713531198
    },
    {
        "content": "<p>I'll take a more detailed look after the meeting. I agree that it's not great to be packing and unpacking, I preferred the original version, but I understand the motivation for pursuing this. Attempt 1 had runtime overhead, which I think is not a worthwhile tradeoff for accomodating this nested-inductive-safe property</p>",
        "id": 434357422,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713531523
    },
    {
        "content": "<p>Is there any runtime overhead in addition to the array size check? I could try to take some measurements to see how large the impact of this is. Would you be otherwise happy with the change if it turned out that the impact is very small?</p>",
        "id": 434357822,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1713531648
    },
    {
        "content": "<p>I pushed some more changes to <a href=\"https://github.com/leanprover/std4/compare/mario/hashmap-positivity-2\">https://github.com/leanprover/std4/compare/mario/hashmap-positivity-2</a> . My impression is that it will be better if the conversion from <code>Imp</code> and <code>Buckets</code> is hidden even further, with simp lemmas such that one can treat <code>Imp</code> as having <code>Buckets</code> as a member</p>",
        "id": 434389622,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713541683
    },
    {
        "content": "<p>Another proposal: we take the type currently written <code>{m : Imp α β // 0 &lt; m.2.size}</code> and rename it to <code>Imp α β</code>, and rename <code>Imp α β</code>  to <code>Raw α β</code></p>",
        "id": 434389914,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713541790
    },
    {
        "content": "<p>yes, this is working a lot better than my previous suggestion <span class=\"user-mention\" data-user-id=\"260921\">@Markus Himmel</span> . The main thing that gets in the way is if the functions start with a pattern match like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"o\">⟨⟨</span><span class=\"n\">size</span><span class=\"o\">,</span> <span class=\"n\">bucketArray</span><span class=\"o\">⟩,</span> <span class=\"n\">hm</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">self</span>\n  <span class=\"k\">let</span> <span class=\"n\">buckets</span> <span class=\"o\">:</span> <span class=\"n\">Buckets</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">bucketArray</span><span class=\"o\">,</span> <span class=\"n\">hm</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>If it is instead</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">size</span> <span class=\"o\">:=</span> <span class=\"n\">m.1.1</span>\n  <span class=\"k\">let</span> <span class=\"n\">buckets</span> <span class=\"o\">:=</span> <span class=\"n\">m.buckets</span>\n</code></pre></div>\n<p>(which should be the same from the compiler's perspective), then simp works much more closely to the previous version</p>",
        "id": 434394744,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713543270
    }
]