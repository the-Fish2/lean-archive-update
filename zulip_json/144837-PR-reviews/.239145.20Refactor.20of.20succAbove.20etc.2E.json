[
    {
        "content": "<p>I recently have been having to work with <code>succAbove</code> and <code>predAbove</code> and finding their definitions and the lemmas availiable quite unergonomic and hard to use. In particular, not having a \"clean\" inverse of succAbove (there is an existence theorem for the z such that x not equal to y has <code>y.succAbove z = x</code>, but actually stating cleanly what <code>z</code> is was oddly annoying). In principle it is good to try and avoid using value coercion to split down to the arithmetic, as in my experience this often obscures what is going on and the structure therein.</p>\n<p>It also makes working with <code>insertNth</code> similarly annoying. Wheras with this proper inverse, one can do things like this, easily:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">insertNth_apply_ne</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">hij</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">insertNth</span> <span class=\"n\">j</span> <span class=\"n\">x</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">predAboveOfNe</span> <span class=\"n\">j</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">nth_rewrite</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">succAbove_predAboveOfNej</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">insertNth_apply_succAbove</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">insertNth_apply</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">:</span>\n  <span class=\"n\">insertNth</span> <span class=\"n\">j</span> <span class=\"n\">x</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span> <span class=\"k\">then</span> <span class=\"n\">x</span> <span class=\"k\">else</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">predAboveOfNe</span> <span class=\"n\">j</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"o\">(</span><span class=\"n\">eq_or_ne</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">insertNth_apply_same</span><span class=\"o\">,</span> <span class=\"n\">dif_pos</span> <span class=\"n\">rfl</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">insertNth_apply_ne</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">dif_neg</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>I was complaining about this here: <a href=\"#narrow/stream/287929-mathlib4/topic/Inconsistent.20behaviour.20of.20.60Fin.2EcastPred.60.2C.60Fin.2Epred.60.2C.20etc.2E\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/Inconsistent.20behaviour.20of.20.60Fin.2EcastPred.60.2C.60Fin.2Epred.60.2C.20etc.2E</a></p>\n<p>But I have put my effort where my mouth is, and begun a refactor. I've finished my first pass, but I expect that to break a lot of things elsewhere, and I'll need to fix that too. However, feedback and thoughts would be good. The file has got longer as I found more lemmas to add - and I think I probably have more than I need, and there's probably some good normal forms to choose for certain things - and arguably I suppose some of this content could be removed out to an adjunct file. But I think the core work is good.</p>\n<p>The PR is <a href=\"https://github.com/leanprover-community/mathlib4/pull/9145\">#9145</a>.</p>",
        "id": 408712323,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702946477
    },
    {
        "content": "<p>This refactor is now finished in the first draft, in the sense that I have extensively reworked <code>Data/Fin/Basic.lean</code> and made changes accordingly to fix the build.</p>\n<p>A summary of the changes:</p>\n<ul>\n<li><code>Fin.castPred</code> is now defined analogously to <code>Fin.pred</code> - i.e. it requires its input to be not-equal to \"last n\". It is defined before <code>predAbove</code>.</li>\n<li><code>predAbove</code> is now defined in terms of <code>castPred</code> and <code>pred</code>, and it is now defined in a way consistent with the way <code>succAbove</code> is defined.</li>\n<li>Many extra lemmas and theorems have been added. In particular, versions of the simplicial identities are now proven - they come up in non-categorial contexts and it is thus useful to have. In general, the priority for improvements has been to never \"cast to values\" and hammer stuff with <code>linarith</code>, but instead case split smartly and minimally. In many cases this has drastically reduced the size and complexity of proofs, both in this file and elsewhere. More improvements are possible, but I wanted feedback first.</li>\n<li>The new theorem <code>succAbove_predAbove_predAbove</code>, which states that for all <code>i, j : FIn (n + 1)</code> non-equal and <code>p : Fin n</code>, <code>succAbove j (predAbove (predAbove p j) i) = i</code>. In other words, this gives an explict way of determining the \"inverse\" of \"succAbove\". Note that it is possible to from this define a general inverse for it (by choosing a p) though one needs a little work to prove that such a <code>p</code> exists.</li>\n<li>A number of auxilary lemmas that we \"should\" have: e.g. <code>castSucc_le_castSucc_iff</code>, where we have the <code>lt</code> and <code>succ</code> versions of this, and similar things that came up in the course of this, have also been added. Potentially they could form smaller PRs on their own, but in the name of a working build I have not done that at this time.</li>\n</ul>\n<p>This has been quite a bit of work to get working (I went down some wrong alleys first), but having developed a strong intuition for how these proofs work, I am fairly confident that this is an improvement. What I need is careful feedback on the lemmas that are present, with suggestions on changes, removals, additions, and modifications to the <code>simp</code> set.</p>",
        "id": 411765082,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1704728899
    },
    {
        "content": "<p>(it's not passing CI)</p>",
        "id": 411765645,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704729086
    },
    {
        "content": "<p>Is it not? The build looks like it's still working, to me (and the one before that worked, and this last change was a relatively minor one).</p>",
        "id": 411765796,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1704729125
    },
    {
        "content": "<p>Oh so it isn't</p>",
        "id": 411765844,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1704729138
    },
    {
        "content": "<p>Irritating, one second.</p>",
        "id": 411765863,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1704729148
    },
    {
        "content": "<p>I was trying to change a file without having a build for it so this was probably inevitable.</p>",
        "id": 411766024,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1704729203
    },
    {
        "content": "<p>Unfortunately <code>succAboveCases</code> is made of tissue paper and hope, and that isn't anything I've done, it's just like that.</p>",
        "id": 411766421,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1704729315
    },
    {
        "content": "<p>OK - hopefully that has <em>actually</em> fixed it. Though it will probably be half an hour before I know for sure...</p>",
        "id": 411768839,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1704730011
    },
    {
        "content": "<p>It did! Calloo, callay, etc.</p>",
        "id": 411793346,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1704737975
    },
    {
        "content": "<p>I am going to resist the urge to tinker further until someone has had a chance to review what I currently have.</p>",
        "id": 411793895,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1704738179
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> You might appreciate the value here: you may recognise this statement you recently added in a PR.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">factor_δ_spec</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">([</span><span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">SimplexCategory</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"o\">[</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">hj</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)),</span> <span class=\"n\">f.toOrderHom</span> <span class=\"n\">k</span> <span class=\"bp\">≠</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">factor_δ</span> <span class=\"n\">f</span> <span class=\"n\">j</span> <span class=\"bp\">≫</span> <span class=\"n\">δ</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Hom.ext</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">OrderHom.ext</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">funext</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">succAbove_predAbove_predAbove</span> <span class=\"o\">(</span><span class=\"n\">hj</span> <span class=\"n\">k</span><span class=\"o\">))))</span>\n</code></pre></div>\n<p>Turns out I already effectively had the result... it's precisely the key one about inverting <code>succAbove</code>.</p>",
        "id": 412557645,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705070630
    },
    {
        "content": "<p>(And it's done without <code>linarith</code> or <code>omega</code>, don't worry about that, nothing expensive.)</p>",
        "id": 412557747,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705070653
    },
    {
        "content": "<p>Ooh, nice!</p>",
        "id": 412557940,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1705070730
    },
    {
        "content": "<p>Thanks for the ping. Will review right now.</p>",
        "id": 412557955,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1705070737
    },
    {
        "content": "<p>Wow! The diff is massive!</p>",
        "id": 412558078,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1705070766
    },
    {
        "content": "<p>Do you think there are ways to split this refactor into multiple stages?</p>",
        "id": 412559303,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1705071120
    },
    {
        "content": "<p>I think so, but I've somewhat lose sight of it. <span class=\"user-mention\" data-user-id=\"481133\">@Alex Keizer</span> suggested we could at least do the <code>castPred</code> one separately.</p>",
        "id": 412559556,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705071198
    },
    {
        "content": "<p>But essentially it's a root-and-branch refactor: I wanted to get rid of the need to unfold to ifs, split, and hammer with <code>omega</code> or <code>linarith</code>. A lot of the SimplexCategory proofs are in there now effectively, because I needed one or two in the mundane world.</p>",
        "id": 412559736,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705071247
    },
    {
        "content": "<p>So, if I am honest - and I know this is no small request - what I need is the help of a maintainer or someone to help me work out what needs to stay and go and push things forward. I am confident in the principles of the reform, but it doesn't mean I think every choice is a good one.</p>",
        "id": 412559925,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705071315
    },
    {
        "content": "<p>The summary here hits the key points I think.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"330967\">Wrenna Robson</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.239145.20Refactor.20of.20succAbove.20etc.2E/near/411765082\">said</a>:</p>\n<blockquote>\n<p>This refactor is now finished in the first draft, in the sense that I have extensively reworked <code>Data/Fin/Basic.lean</code> and made changes accordingly to fix the build.</p>\n<p>A summary of the changes:</p>\n<ul>\n<li><code>Fin.castPred</code> is now defined analogously to <code>Fin.pred</code> - i.e. it requires its input to be not-equal to \"last n\". It is defined before <code>predAbove</code>.</li>\n<li><code>predAbove</code> is now defined in terms of <code>castPred</code> and <code>pred</code>, and it is now defined in a way consistent with the way <code>succAbove</code> is defined.</li>\n<li>Many extra lemmas and theorems have been added. In particular, versions of the simplicial identities are now proven - they come up in non-categorial contexts and it is thus useful to have. In general, the priority for improvements has been to never \"cast to values\" and hammer stuff with <code>linarith</code>, but instead case split smartly and minimally. In many cases this has drastically reduced the size and complexity of proofs, both in this file and elsewhere. More improvements are possible, but I wanted feedback first.</li>\n<li>The new theorem <code>succAbove_predAbove_predAbove</code>, which states that for all <code>i, j : FIn (n + 1)</code> non-equal and <code>p : Fin n</code>, <code>succAbove j (predAbove (predAbove p j) i) = i</code>. In other words, this gives an explict way of determining the \"inverse\" of \"succAbove\". Note that it is possible to from this define a general inverse for it (by choosing a p) though one needs a little work to prove that such a <code>p</code> exists.</li>\n<li>A number of auxilary lemmas that we \"should\" have: e.g. <code>castSucc_le_castSucc_iff</code>, where we have the <code>lt</code> and <code>succ</code> versions of this, and similar things that came up in the course of this, have also been added. Potentially they could form smaller PRs on their own, but in the name of a working build I have not done that at this time.</li>\n</ul>\n<p>This has been quite a bit of work to get working (I went down some wrong alleys first), but having developed a strong intuition for how these proofs work, I am fairly confident that this is an improvement. What I need is careful feedback on the lemmas that are present, with suggestions on changes, removals, additions, and modifications to the <code>simp</code> set.</p>\n</blockquote>",
        "id": 412560014,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705071350
    },
    {
        "content": "<p>One issue with the diff is that you've moved definitions to different locations in the file, but you've also made significant changes to some definitions themselves, making it much harder to review</p>",
        "id": 412560154,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1705071382
    },
    {
        "content": "<p>Ok, I will try to find some time to review. But it will need a longer sitting. That's not going to happen in the next 5 mins before LT starts <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 412560167,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1705071386
    },
    {
        "content": "<p>Yes, if moving/renaming could be done in a separate PR, that would probably help a lot.</p>",
        "id": 412560267,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1705071422
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> can we use this PR as another test case for Leaff?</p>",
        "id": 412560343,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1705071444
    },
    {
        "content": "<p>This could also be a nice change to try out that leaff tool that was presented?</p>",
        "id": 412560352,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1705071447
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"481133\">Alex Keizer</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.239145.20Refactor.20of.20succAbove.20etc.2E/near/412560154\">said</a>:</p>\n<blockquote>\n<p>One issue with the diff is that you've moved definitions to different locations in the file, but you've also made significant changes to some definitions themselves, making it much harder to review</p>\n</blockquote>\n<p>Yeah, this is fair. To a degree some of the moving is inevitable, because I have changed the dependency graph. But I agree it can probably be minimised.</p>",
        "id": 412563699,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705072470
    },
    {
        "content": "<p>What is Leaff?</p>",
        "id": 412563709,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705072473
    },
    {
        "content": "<p>I'm very happy to do anything necessary to help this get through, though I find juggling multiple dependent PRs a little difficult (and I am worried that different threads might lead to it getting lost).</p>",
        "id": 412563867,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705072536
    },
    {
        "content": "<p>Would it be possible to move the definitions around to where you need them to be, without changing anything else, or does that not work with the current dependency graph?</p>",
        "id": 412563911,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1705072550
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330967\">Wrenna Robson</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.239145.20Refactor.20of.20succAbove.20etc.2E/near/412563709\">said</a>:</p>\n<blockquote>\n<p>What is Leaff?</p>\n</blockquote>\n<p><a href=\"https://github.com/alexjbest/leaff\">https://github.com/alexjbest/leaff</a></p>",
        "id": 412564202,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1705072654
    },
    {
        "content": "<p>Cool. Will wait until the cache updates and then see if that works.</p>",
        "id": 412565591,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705073099
    },
    {
        "content": "<p>(it seems like it needs a working build for each branch you are comparing?)</p>",
        "id": 412567719,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705073750
    },
    {
        "content": "<p>(I haven't used it myself, but I think you're right, yes)</p>",
        "id": 412567937,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1705073811
    },
    {
        "content": "<p>I'm now away for a couple of days so I'm not able to run it myself.</p>",
        "id": 412577199,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705076530
    },
    {
        "content": "<p>I'll try and run leaff on this pr later tonight, thanks for the ping!</p>",
        "id": 412583653,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1705078584
    },
    {
        "content": "<p>Brill.</p>",
        "id": 412590964,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705081210
    },
    {
        "content": "<p>Just checked and the last commit builds fine so should be a valid target.</p>",
        "id": 412601119,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705085089
    },
    {
        "content": "<p>If you've not had a chance to do it yet, I'm back today.</p>",
        "id": 412807730,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705232293
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> I got this error when running <a href=\"http://runleaff.sh\">runleaff.sh</a>:<br>\n<code>eval: line 22: syntax error near unexpected token </code>('`</p>",
        "id": 412833297,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705254211
    },
    {
        "content": "<p>I think it is objecting to the fact that my PATH contains <code>/mnt/c/Program Files (x86)/Wolfram Research/WolframScript/</code></p>",
        "id": 412833318,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705254242
    },
    {
        "content": "<p>Thought I'd fixed it, didn't.</p>",
        "id": 412834230,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705255144
    },
    {
        "content": "<p>(This is in WSL2)</p>",
        "id": 412834358,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705255260
    },
    {
        "content": "<p>Have temporarily fixed it I think by editing my WSL conf so it doesn't append the windows path</p>",
        "id": 412834598,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705255518
    },
    {
        "content": "<p>But you might wanna think about if there is another fix.</p>",
        "id": 412834692,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705255602
    },
    {
        "content": "<p>OK, that is fixed, but I now get:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">total</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0459</span><span class=\"n\">ms</span>\n<span class=\"n\">uncaught</span> <span class=\"n\">exception</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">package</span> <span class=\"bp\">'</span><span class=\"n\">Mathlib'</span>\n</code></pre></div>",
        "id": 412834736,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705255640
    },
    {
        "content": "<p>I am running <code>./runleaff.sh Mathlib ../mathlib4/ ../succAbove/</code></p>",
        "id": 412834747,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705255647
    },
    {
        "content": "<p>each directory contains a copy of Mathlib, checked out to the right branch</p>",
        "id": 412834792,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705255680
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">wrobson</span><span class=\"bp\">@</span><span class=\"n\">SESHAT</span><span class=\"o\">:</span><span class=\"bp\">~/</span><span class=\"n\">projects</span><span class=\"bp\">/</span><span class=\"n\">leaff</span><span class=\"bp\">$</span> <span class=\"n\">ls</span> <span class=\"bp\">../</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span>\n<span class=\"n\">Archive</span>       <span class=\"n\">CODE_OF_CONDUCT.md</span>  <span class=\"n\">Counterexamples</span>       <span class=\"n\">GNUmakefile</span>  <span class=\"n\">Mathlib</span>       <span class=\"n\">MathlibExtras</span>       <span class=\"n\">README.md</span>  <span class=\"n\">build</span>  <span class=\"n\">docs.lean</span>           <span class=\"n\">lakefile.lean</span>   <span class=\"n\">scripts</span>  <span class=\"n\">widget</span>\n<span class=\"n\">Archive.lean</span>  <span class=\"n\">Cache</span>               <span class=\"n\">Counterexamples.lean</span>  <span class=\"n\">LICENSE</span>      <span class=\"n\">Mathlib.lean</span>  <span class=\"n\">MathlibExtras.lean</span>  <span class=\"n\">bors.toml</span>  <span class=\"n\">docs</span>   <span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">manifest.json</span>  <span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">toolchain</span>  <span class=\"n\">test</span>\n<span class=\"n\">wrobson</span><span class=\"bp\">@</span><span class=\"n\">SESHAT</span><span class=\"o\">:</span><span class=\"bp\">~/</span><span class=\"n\">projects</span><span class=\"bp\">/</span><span class=\"n\">leaff</span><span class=\"bp\">$</span> <span class=\"n\">ls</span> <span class=\"bp\">../</span><span class=\"n\">succAbove</span><span class=\"bp\">/</span>\n<span class=\"n\">Archive</span>       <span class=\"n\">CODE_OF_CONDUCT.md</span>  <span class=\"n\">Counterexamples</span>       <span class=\"n\">GNUmakefile</span>  <span class=\"n\">LICENSE</span>  <span class=\"n\">Mathlib.lean</span>   <span class=\"n\">MathlibExtras.lean</span>  <span class=\"n\">bors.toml</span>  <span class=\"n\">docs.lean</span>           <span class=\"n\">lakefile.lean</span>   <span class=\"n\">scripts</span>  <span class=\"n\">widget</span>\n<span class=\"n\">Archive.lean</span>  <span class=\"n\">Cache</span>               <span class=\"n\">Counterexamples.lean</span>  <span class=\"n\">ImportGraph</span>  <span class=\"n\">Mathlib</span>  <span class=\"n\">MathlibExtras</span>  <span class=\"n\">README.md</span>           <span class=\"n\">docs</span>       <span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">manifest.json</span>  <span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">toolchain</span>  <span class=\"n\">test</span>\n</code></pre></div>",
        "id": 412834841,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705255695
    },
    {
        "content": "<p>I think you will get that error if that path isn't set correctly</p>",
        "id": 412866801,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1705280971
    },
    {
        "content": "<p>that script is indeed <del>windows</del> bash centric, but just helps you invoke lake directly with the right path</p>",
        "id": 412867074,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1705281115
    },
    {
        "content": "<p>so you should run something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">leaff</span> <span class=\"n\">Mathlib</span> <span class=\"bp\">../</span><span class=\"n\">test</span><span class=\"bp\">-</span><span class=\"n\">mathlib</span><span class=\"bp\">/.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">,</span><span class=\"bp\">../</span><span class=\"n\">test</span><span class=\"bp\">-</span><span class=\"n\">mathlib</span><span class=\"bp\">/.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Qq</span><span class=\"bp\">/.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">,</span><span class=\"bp\">../</span><span class=\"n\">test</span><span class=\"bp\">-</span><span class=\"n\">mathlib</span><span class=\"bp\">/.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">aesop</span><span class=\"bp\">/.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">,</span><span class=\"bp\">../</span><span class=\"n\">test</span><span class=\"bp\">-</span><span class=\"n\">mathlib</span><span class=\"bp\">/.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">proofwidgets</span><span class=\"bp\">/.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">,</span><span class=\"bp\">../</span><span class=\"n\">test</span><span class=\"bp\">-</span><span class=\"n\">mathlib</span><span class=\"bp\">/.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Cli</span><span class=\"bp\">/.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">,</span><span class=\"bp\">../</span><span class=\"n\">test</span><span class=\"bp\">-</span><span class=\"n\">mathlib</span><span class=\"bp\">/.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">,</span><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">alexanderbest</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---v4.5.0-rc1/lib/lean ../test-mathlib/.lake/packages/std/.lake/build/lib,../test-mathlib/.lake/packages/Qq/.lake/build/lib,../test-mathlib/.lake/packages/aesop/.lake/build/lib,../test-mathlib/.lake/packages/proofwidgets/.lake/build/lib,../test-mathlib/.lake/packages/Cli/.lake/build/lib,../test-mathlib/.lake/build/lib,/home/alexanderbest/.elan/toolchains/leanprover--lean4---v4.5.0-rc1/lib/lean</span>\n</code></pre></div>",
        "id": 412867166,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1705281151
    },
    {
        "content": "<p>except the second list of paths should be for the second repo</p>",
        "id": 412867198,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1705281175
    },
    {
        "content": "<p>Sorry I haven't had time to have a go at this myself in the end</p>",
        "id": 412867225,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1705281198
    },
    {
        "content": "<p>I'll see if I have a chance tomorrow.</p>",
        "id": 412869081,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705282253
    },
    {
        "content": "<p>The odd thing is I've now configured it so that only the Linux path is there. So I don't know why it wouldn't be working!</p>",
        "id": 412906384,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705307143
    },
    {
        "content": "<p>Are there any spaces in any of the path names or anything?</p>",
        "id": 412969720,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1705329171
    },
    {
        "content": "<p>Hmm - ah, yes I think so, there have to be because of the path of VS Code.</p>",
        "id": 412969863,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705329207
    },
    {
        "content": "<p>I closed them in quotes but even so.</p>",
        "id": 412969890,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705329220
    },
    {
        "content": "<p>Yeah I can at least reproduce that there are some issues with spaces in paths, I'll try and fix it</p>",
        "id": 412971403,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1705329690
    },
    {
        "content": "<p>Thanks</p>",
        "id": 412973475,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705330376
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"330967\">@Wrenna Robson</span> Considering the various review attempts, it seems to be a recurring theme that this diff is pretty hard to get a handle on.</p>\n<p>I know that it is non-trivial for you to split this PR into pieces. Still if there are some things that can be done independently from one another, that would help a lot. Let's also hope that leaff will soon give a better overview of this PR.</p>",
        "id": 413111623,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1705396887
    },
    {
        "content": "<p>Yeah. I'm sorry about that. I've not really had time to start cutting it up.</p>",
        "id": 413111717,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705396922
    },
    {
        "content": "<p>I think there are things that can be done independently but it's difficult, because to a degree I was developing stuff as I went.</p>",
        "id": 413111821,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705396947
    },
    {
        "content": "<p>I think the first thing to do will be to factor out the castPred changes. In theory I could also do them \"in place\" and then change the place in a subsequent PR.</p>",
        "id": 413111994,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705397011
    },
    {
        "content": "<p>Then there's the succAbove changes, which are more substantial but don't need any moving. Then there's the predAbove changes which are fairly substantial.</p>",
        "id": 413112143,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705397053
    },
    {
        "content": "<p>The succAbove changes also have some name changes. I think we could discuss this here first.</p>",
        "id": 413112198,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705397071
    },
    {
        "content": "<p>I'm sorry I've dropped this very large diff - I just didn't want to discuss all my ideas for how to improve this and not actually do the hard work myself.</p>",
        "id": 413112253,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705397096
    },
    {
        "content": "<p>I've also been working on closing out my other PRs so I can focus on this one.</p>",
        "id": 413112353,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705397128
    },
    {
        "content": "<p>Understood. And your work is certainly appreciated!</p>",
        "id": 413113537,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1705397479
    },
    {
        "content": "<p>I was also wondering if, before the PR is done in detail, we could have a further conversation about naming.</p>",
        "id": 413113768,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705397541
    },
    {
        "content": "<p>Specifically, one issue I had is that succAbove p i takes two arguments, with quite different roles, and so naming theorems is a bit tricky</p>",
        "id": 413113919,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705397599
    },
    {
        "content": "<p>for example, currently we have <code>succ_succAbove_succ</code>. But you could also call that <code>succAbove_succ_succ</code>, or, actually, if the theorem was the other way round (and arguably this would be more consistent, because it's really a distribution theorem, not a commutivity theorem) you could call it <code>succ_succAbove</code>.</p>",
        "id": 413114244,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705397715
    },
    {
        "content": "<p><code>succAbove p</code> is strictly mono, etc., you want to state theorems about that</p>",
        "id": 413114307,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705397739
    },
    {
        "content": "<p>But <code>succAbove</code> itself is also injective on p.</p>",
        "id": 413114466,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705397774
    },
    {
        "content": "<p>and also, (fun i =&gt; succAbove p i) is mono</p>",
        "id": 413114543,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705397806
    },
    {
        "content": "<p>What should all these be called? I think we have them currently, but they don't have memorable names.</p>",
        "id": 413114585,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705397824
    },
    {
        "content": "<p>Similarly, two very very key lemmas are <code>succAbove_above</code> and <code>succAbove_below</code>. I renamed these because I just couldn't remember which way round they went. How should they be named?</p>",
        "id": 413114713,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705397868
    },
    {
        "content": "<p>I'm hoping by opening this conversation we can have productive discussion without having to analyse the fairly intimidating diff.</p>",
        "id": 413114796,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705397892
    },
    {
        "content": "<p>I have now created <a href=\"https://github.com/leanprover-community/mathlib4/pull/9780\">#9780</a>.</p>",
        "id": 413199841,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705424531
    },
    {
        "content": "<p>I have created a new discussion thread for it here:<br>\n<a href=\"#narrow/stream/144837-PR-reviews/topic/.239780.20Redefinition.20of.20castPred\">https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/.239780.20Redefinition.20of.20castPred</a></p>\n<p>I have also updated <a href=\"https://github.com/leanprover-community/mathlib4/pull/9145\">#9145</a> so that it depends on <a href=\"https://github.com/leanprover-community/mathlib4/pull/9780\">#9780</a>.</p>",
        "id": 413200851,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705424827
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/9791\">#9791</a> and <a href=\"https://github.com/leanprover-community/mathlib4/pull/9793\">#9793</a> now exist. <a href=\"https://github.com/leanprover-community/mathlib4/pull/9791\">#9791</a> redefines <code>predAbove</code> to use <code>castpred</code>. <a href=\"https://github.com/leanprover-community/mathlib4/pull/9793\">#9793</a> redefines <code>succAbove</code> so that the inequality is <code>castSucc i &lt; p</code> rather than <code>i.1 &lt; p.1</code>, as we want to discourage reducing to the underlying Nat values. This ought to be the last definitional change coming from this refactoring effort.</p>",
        "id": 413249571,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705443800
    },
    {
        "content": "<p>Discussion of these patches is here: <a href=\"#narrow/stream/144837-PR-reviews/topic/.239791.20Redefine.20predAbove.20to.20use.20new.20castPred\">https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/.239791.20Redefine.20predAbove.20to.20use.20new.20castPred</a></p>",
        "id": 413249625,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705443825
    },
    {
        "content": "<p>I hope that this is the correct procedure for splitting these up - I am starting a new thread to discuss each new patch in general, though these seemed small enough that I wanted to combine them, and limiting this thread to discussion of the patches as a whole.</p>",
        "id": 413249843,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705443902
    },
    {
        "content": "<p>I want to raise the thorny issue of naming: first off,  <code>predAbove_below</code>,  <code>predAbove_above</code>, <code>succAbove_below</code> and <code>succAbove_above</code> . I think these names are not useful because it is unintuive what they mean. I want to replace them with <code>predAbove_of_castSucc_lt</code>, <code>predAbove_of_le_castSucc</code>, etc. and also add <code>predAbove_of_succ_le</code>, <code>predAbove_of_lt_succ</code>, etc. because while these are easy consequences of the others, it is often a pain to have to rewrite hypotheses to use them.</p>",
        "id": 415376075,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705444505
    },
    {
        "content": "<p>This is probably one patch.</p>",
        "id": 415376384,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705444625
    },
    {
        "content": "<p>I also want to add e.g. <code>succAbove_castSucc_of_lt</code>, which states that <code>succAbove (castSucc p) i = castSucc i</code> when (i &lt; p). There are various forms (<code>succAbove p (pred i hi)</code>, <code>predAbove p (succ i</code>), <code>predAbove (pred p hp) i)</code> where you have slightly more complicated statements but where the hypotheses are simpler, because <code>p</code> and <code>i</code> are of the same type. They all come from the above fundamental theorems, but as \"utility lemmas\" they have quite a bit of value.</p>",
        "id": 415376597,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705444714
    },
    {
        "content": "<p>That's another patch.</p>",
        "id": 415376605,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705444719
    },
    {
        "content": "<p>After that, I think mostly everything else is a) improving proofs of existing theorems, b) adding new theorems, c) further thorny name questions. Or d), improving proofs outside of Data/Fin/Basic.</p>",
        "id": 415376671,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705444749
    },
    {
        "content": "<p>My proposal then would be to a) do a patch of \"improve existing proofs when possible in Data/Fin/Basic\", b) Add patches that add substantial theorems in thematic chunks, c) Address name issues while also d) improving definitions outside Data/Fin/Basic: particular targets are Data/Fin/Tuple and the SimplexCategory file.</p>",
        "id": 415376953,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705444880
    },
    {
        "content": "<p>Oh: also, I am not sure what the type signature of <code>predAbove_below</code> etc. should be. At the moment all arguments are explicit - but you have <code>p</code>, <code>i</code>, and a hypothesis that <code>castSucc i &lt; p</code>: you COULD just have the latter.</p>",
        "id": 415377095,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705444940
    },
    {
        "content": "<p>Regarding the naming question: I don't have good ideas here, and am inclined to just follow your suggestions, since you've thought about it in detail.</p>",
        "id": 415961829,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1705473290
    },
    {
        "content": "<p>Righto. Thank you for the reviews!</p>",
        "id": 415971092,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1705478503
    },
    {
        "content": "<p>I have pushed <a href=\"https://github.com/leanprover-community/mathlib4/pull/10042\">#10042</a>, which is a slightly more substantive PR than the previous one that still doesn't push beyond the original scope of the file or add anything extraneous.</p>\n<p>Note that the original PR is now no longer passing the lint style for length.</p>\n<p>My proposal is that the longer lemmas - the ones that have a use for the simplex category, though they do have application elsewhere - get moved to a new file, <code>Data.Fin.SuccAbove</code> or <code>Data.Fin.Simplex</code> or similar. Broadly that file will probably contain as much of the properties of these functions used in Simplex Category as are still relevant outside of the categorical context. That way, we avoid the file length problem, and, probably, make this PR easier to further digest.</p>",
        "id": 418358348,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1706307224
    },
    {
        "content": "<p>Generally speaking, I'm a big fan of splitting up large files to make the whole a bit more understandable. I would name the file according to what is in it, rather than what it is (currently) used for, i.e., <code>Data.Fin.SuccAbove</code>.</p>",
        "id": 418823083,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1706616687
    },
    {
        "content": "<p>Great</p>",
        "id": 418831108,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1706619737
    }
]