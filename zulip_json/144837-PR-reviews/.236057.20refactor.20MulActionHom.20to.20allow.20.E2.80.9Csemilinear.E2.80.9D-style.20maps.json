[
    {
        "content": "<p>In this PR, I redefine <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MulActionHom#doc\">docs#MulActionHom</a> so as to allow a nontrivial maps between scalars, as for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap#doc\">docs#LinearMap</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Equivariant functions. -/</span>\n<span class=\"c1\">-- Porting note: This linter does not exist yet</span>\n<span class=\"kd\">structure</span> <span class=\"n\">MulActionHom</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- The underlying function. -/</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span>\n  <span class=\"sd\">/-- The proposition that the function commutes with the actions. -/</span>\n  <span class=\"n\">map_smul'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">toFun</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">toFun</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>Then <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap#doc\">docs#LinearMap</a> is redefined in a clearer way:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">LinearMap</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">M₂</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M₂</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">S</span> <span class=\"n\">M₂</span><span class=\"o\">]</span> <span class=\"kd\">extends</span>\n    <span class=\"n\">AddHom</span> <span class=\"n\">M</span> <span class=\"n\">M₂</span><span class=\"o\">,</span> <span class=\"n\">MulActionHom</span> <span class=\"n\">σ</span> <span class=\"n\">M</span> <span class=\"n\">M₂</span>\n</code></pre></div>\n<p>Many files had to be adjusted all over the way, but it now compiles smoothly.</p>",
        "id": 410037212,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1703603684
    },
    {
        "content": "<p>One question remains: as was the case for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap#doc\">docs#LinearMap</a>,  composition of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MulActionHom#doc\">docs#MulActionHom</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=DistribMulActionHom#doc\">docs#DistribMulActionHom</a> requires to know that the maps on scalars compose accordingly. <br>\nFor <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap#doc\">docs#LinearMap</a>, this is done via type classes, stored in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=RingHomCompTriple#doc\">docs#RingHomCompTriple</a>.<br>\nFor <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MulActionHom#doc\">docs#MulActionHom</a>, it is probably unreasonable to rely on the Typeclass system, but I defined classes of composing triples </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Class of composing triples -/</span>\n<span class=\"kd\">class</span> <span class=\"n\">CompTriple</span>  <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ψ</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">χ</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">P</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- The maps form a commuting triangle -/</span>\n  <span class=\"n\">comp_eq</span> <span class=\"o\">:</span> <span class=\"n\">ψ.comp</span> <span class=\"n\">φ</span> <span class=\"bp\">=</span> <span class=\"n\">χ</span>\n</code></pre></div>\n<p>I did not dare modifying <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=RingHomCompTriple#doc\">docs#RingHomCompTriple</a> yet but it is likely that the two systems can be unified.</p>",
        "id": 410037631,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1703603924
    }
]