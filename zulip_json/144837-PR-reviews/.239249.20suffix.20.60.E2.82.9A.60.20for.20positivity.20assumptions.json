[
    {
        "content": "<p>This PR, aside from replacing some lemmas with aliases to others which I am dubious about, renames many lemmas with <code>of_pos</code> hypotheses to <code>ₚ</code>. How do we feel about this?</p>\n<p>I view it as a somewhat significant change to our naming conventions, and so probably requires some community input.</p>",
        "id": 416601315,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1705593580
    },
    {
        "content": "<p>I am personally against renaming the existing lemmas. I would be unhappy (but fine-ish) with aliases.</p>",
        "id": 416602094,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705593786
    },
    {
        "content": "<p>Note: the <code>alias</code>es I'm dubious about are in some sense unrelated to the naming change (this PR is doing multiple things). I'm skeptical we want these aliases because we are replacing a lemma with a <code>StrictOrderedSemiring</code> hypothesis with an alias to a lemma with a bag of <code>PosMulMono</code>-like hypotheses, and I suspect this will make type class synthesis work unreasonably hard.</p>",
        "id": 416602889,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1705594025
    },
    {
        "content": "<p>Previous discussion: <a href=\"#narrow/stream/287929-mathlib4/topic/Renaming.20monotonicity.20of.20powers.20lemmas/near/409745422\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/Renaming.20monotonicity.20of.20powers.20lemmas/near/409745422</a></p>",
        "id": 416719033,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1705647467
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 416867587,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1705698474
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"2494\">@maintainers</span>  sorry to ping everyone, but I think it would be good to get a lot more eyes on this proposed naming change.</p>",
        "id": 416867804,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1705698551
    },
    {
        "content": "<p>I'm not sure I understand the rules for this <code>ₚ</code> naming convention, or how it generalizes if you have multiple positivity hypotheses, or what happens if you want to mention positivity before other hypotheses.</p>",
        "id": 416868300,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705698735
    },
    {
        "content": "<p>A naming convention that just came to mind that might solve the problems that (I think) this is aiming to solve is to write <code>_of_0lt</code> or <code>_of_0le</code> instead of <code>_of_pos</code> and <code>_of_nonneg</code></p>",
        "id": 416868426,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705698799
    },
    {
        "content": "<p>I personally don't like this change: I find myself searching \"of_pos\" and \"of_nonneg\" in the docs very frequently, and having this replaced by something that can't be typed easily outside of VSCode would be really annoying.</p>",
        "id": 416868428,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1705698800
    },
    {
        "content": "<p>Using <code>0</code> in a name like this is going against the usual convention of writing <code>_of_zero_lt</code> or <code>_of_zero_le</code>, but maybe the way it shortens the name is tempting. (While I was writing this, <span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> says \"no\" :laugh:)</p>",
        "id": 416868632,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705698877
    },
    {
        "content": "<p>The reason I don't like <code>zero_lt</code> (or any of the variants) is that, in many cases, the property of being positive has more significant consequences than just being <code>lt</code>, so in this case it makes sense to have a dedicated way to phrase this. I view it as akin to <a href=\"https://leanprover-community.github.io/contribute/naming.html#axiomatic-descriptions\">Axiomatic descriptions</a> where we don't describe the literal sequnce of symbols because we have names for these things.</p>",
        "id": 416869321,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1705699176
    },
    {
        "content": "<p>I think we should just have both - I get that maybe it's searchable to have <code>_of_pos</code> and such, but I find that the unnecessarily long names are also harmful when the condition is 'obvious'</p>",
        "id": 416943461,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1705715515
    },
    {
        "content": "<p>And often the 'expected' names are taken up by stuff that is more useful because of formalisation side effects than otherwise</p>",
        "id": 416943556,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1705715586
    },
    {
        "content": "<p>I would really like anyone to tell me seriously that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=le_self_mul#doc\">docs#le_self_mul</a> is the statement you'd expect it to be. And yes, maybe the name is imprecise, but to a mathematician the condition for le_self_mul to hold shouldn't need mentioning.</p>",
        "id": 416943796,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1705715794
    },
    {
        "content": "<p>Also, these axiomatic descriptions don't scale well to multiplicative conditions relating to 1</p>",
        "id": 416943864,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1705715881
    },
    {
        "content": "<p>Also I'd like to know what we should do with the <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=mul_lt_mul_of_nonneg_of_pos#doc\">docs#mul_lt_mul_of_nonneg_of_pos</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=mul_lt_mul_of_le_of_lt%27#doc\">docs#mul_lt_mul_of_le_of_lt'</a> if we use other methods. (This was introduced in <a href=\"https://github.com/leanprover-community/mathlib/pull/16447\">!3#16447</a>.)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">mul_lt_mul_of_nonneg_of_pos</span> <span class=\"o\">[</span><span class=\"n\">PosMulMono</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MulPosStrictMono</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">d</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">mul_lt_mul_of_le_of_lt'</span> <span class=\"o\">[</span><span class=\"n\">PosMulMono</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MulPosStrictMono</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">d</span>\n</code></pre></div>",
        "id": 416949566,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1705721606
    },
    {
        "content": "<p><code>_of_pos</code> and <code>_of_nonneg</code> are often not written in the name (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=mul_lt_mul#doc\">docs#mul_lt_mul</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=mul_self_lt_mul_self#doc\">docs#mul_self_lt_mul_self</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=lt_mul_of_lt_one_left#doc\">docs#lt_mul_of_lt_one_left</a>). Searching in the docs doesn't work in this case.</p>",
        "id": 416950277,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1705722384
    },
    {
        "content": "<p>The use of the suffix <code>ₚ</code> is just an attempt to mimic the use of the suffix <code>₀</code> (<a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Order/WithZero.html#mul_le_one%E2%82%80\">mul_le_one₀</a>), to solve the problem of inconsistent, conflicting, or too-long names. Other solutions are welcome.</p>",
        "id": 416950719,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1705722845
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"455791\">Yuyang Zhao</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.239249.20suffix.20.60.E2.82.9A.60.20for.20positivity.20assumptions/near/416950277\">said</a>:</p>\n<blockquote>\n<p><code>_of_pos</code> and <code>_of_nonneg</code> are often not written in the name (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=mul_lt_mul#doc\">docs#mul_lt_mul</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=mul_self_lt_mul_self#doc\">docs#mul_self_lt_mul_self</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=lt_mul_of_lt_one_left#doc\">docs#lt_mul_of_lt_one_left</a>). Searching in the docs doesn't work in this case.</p>\n</blockquote>\n<p>Yeah in fact I've been wanting to rename those.</p>",
        "id": 416965140,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705734693
    },
    {
        "content": "<p>Why are you introducing a new suffix instead of just using <code>\\_0</code>?</p>",
        "id": 416965203,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705734731
    },
    {
        "content": "<p>The suffix <code>₀</code> is for lemmas about <code>SomethingWithZero</code>.</p>",
        "id": 416984820,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1705751349
    },
    {
        "content": "<p>Yes, which is exactly what's happening here. You're proving lemmas about monoids with a zero, except that for technical reason you don't assume <code>MonoidWithZero</code>. but weaker things</p>",
        "id": 416984969,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705751483
    },
    {
        "content": "<p>Ok, then I'd like to see what everyone thinks about the suffix <code>₀</code>.</p>",
        "id": 416985366,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1705751801
    },
    {
        "content": "<p>I recall that there is <code>mul_lt_mul_of_lt_of_leₚ</code> in the PR but we also have <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Order/WithZero.html#mul_lt_mul_of_lt_of_le%E2%82%80\">mul_lt_mul_of_lt_of_le₀</a>. Although the latter may be easily obtained from the former (haven't tried).</p>",
        "id": 416988051,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1705754235
    },
    {
        "content": "<p>I think we should avoid unicode in theorem names for the reasons mentioned by <span class=\"user-mention silent\" data-user-id=\"311453\">Frédéric Dupuis</span></p>",
        "id": 417158074,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705899037
    },
    {
        "content": "<p>Then could we rename it to something like <code>mul_lt_mul_of_le_of_lt_of_nonneg_of_pos'</code>?</p>",
        "id": 417175418,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1705910630
    },
    {
        "content": "<p>As a hard rule, that would ban things like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=lift#doc\">docs#lift</a>_ι (maybe the fact the linkifier fails is telling...). It's also often more useful to see ₀ in autocompletion than it is <code>'</code></p>",
        "id": 417175526,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705910681
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"455791\">Yuyang Zhao</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.239249.20suffix.20.60.E2.82.9A.60.20for.20positivity.20assumptions/near/417175418\">said</a>:</p>\n<blockquote>\n<p>Then could we rename it to something like <code>mul_lt_mul_of_le_of_lt_of_nonneg_of_pos'</code>?</p>\n</blockquote>\n<p>If there are no objections to this, we can first make a PR of it.</p>",
        "id": 417183328,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1705914069
    },
    {
        "content": "<p>Despite my strong dislike of the positive/nonnegative terminology, an index p in a non-ascii letter seems worse. <br>\n0lt or 0le are not very legible.</p>",
        "id": 417216390,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1705925628
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/9904\">#9904</a></p>",
        "id": 417217666,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1705926143
    },
    {
        "content": "<p>(<a href=\"https://github.com/leanprover-community/mathlib4/pull/9904\">#9904</a>) I updated the PR description. It might help with reviewing.</p>",
        "id": 429069962,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1711190470
    }
]