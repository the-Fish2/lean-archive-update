[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/13719\">#13719</a> I extended <code>trans</code> to work with implications too, as it seems to be only a technical detail that implications are no \"transitive relations\" in Lean (i.e. they are different expressions, <code>.forallE</code> vs. <code>.app</code>).</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Prop</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">trans</span><span class=\"w\"> </span><span class=\"n\">B</span>\n<span class=\"w\">  </span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">h</span>\n<span class=\"w\">  </span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">g</span>\n</code></pre></div>\n<p>The main reason I advertise it here is because I have a few questions:</p>\n<ul>\n<li>is the ordering of the resulting goals correct? i.e. <code>A → B</code> comes before  <code>B → C</code></li>\n<li>I manually excluded dependent arrows <code>∀ i : A → C i</code> as it seems hard to formulate any transitivity statement in this case and it might not be useful in practice. Does that seem alright?</li>\n<li>I also manually excluded <code>u → v</code> where <code>u, v</code> are not in <code>Prop</code>. Mainly out of laziness because then a blank <code>trans</code> would need a fresh intermediate mvar of unknown type, whereas in the existing <code>trans</code> tactic the type of the middle term could always be inferred from the other two types. Moreover, I don't think one should use the tactic to construct data anyways. Should I add this case nevertheless?</li>\n</ul>",
        "id": 443962646,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1718100198
    },
    {
        "content": "<ul>\n<li>That looks correct</li>\n<li>Sounds like a fine limitation</li>\n<li>If you leave it like that, beginners will definitely be asking about why they can't use <code>trans</code> for types</li>\n</ul>",
        "id": 443962938,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718100294
    },
    {
        "content": "<ul>\n<li>Can and will it work with calc?</li>\n<li>If so, can you add <code>Implies.trans_iff</code> and <code>Iff.trans_imp</code> too in such a way that one can do this?</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"k\">calc</span><span class=\"w\"> </span><span class=\"n\">p</span>\n<span class=\"w\">    </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"w\">    </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"bp\">↔</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"w\">    </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 443964063,
        "sender_full_name": "Richard Copley",
        "timestamp": 1718100644
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2313719.3A.20trans.20for.20implications/near/443962938\">said</a>:</p>\n<blockquote>\n<ul>\n<li>If you leave it like that, beginners will definitely be asking about why they can't use <code>trans</code> for types</li>\n</ul>\n</blockquote>\n<p>You're right, I also just realised I had a mistake, so now it's not as bad: writing <code>trans</code> without argument in the example above will yield</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"bp\">⊢</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">1661</span>\n<span class=\"bp\">⊢</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">1661</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">C</span>\n<span class=\"bp\">⊢</span><span class=\"w\"> </span><span class=\"kt\">Sort</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">u</span><span class=\"bp\">.</span><span class=\"m\">1672</span>\n</code></pre></div>\n<p>which seems just fine :)</p>",
        "id": 443964794,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1718100920
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"400544\">Richard Copley</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2313719.3A.20trans.20for.20implications/near/443964063\">said</a>:</p>\n<blockquote>\n<ul>\n<li>Can and will it work with calc?</li>\n<li>If so, can you add <code>Implies.trans_iff</code> and <code>Iff.trans_imp</code> too in such a way that one can do this?</li>\n</ul>\n<p><div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"k\">calc</span><span class=\"w\"> </span><span class=\"n\">p</span>\n<span class=\"w\">    </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"w\">    </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"bp\">↔</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"w\">    </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Sorry I don't think I understand the example, and I'm not that used to <code>calc</code>. Could you write it up as an <code>example</code> that I can copy into a test file? Maybe it's just a <code>p</code> too many floating around or something.</p>",
        "id": 443965427,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1718101136
    },
    {
        "content": "<p>Or is the point that this doesn't work at all currently? In which case that's probably out-of-scope for my first PR, but I'll look at it quickly</p>",
        "id": 443965734,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1718101246
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"385895\">Jon Eugster</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2313719.3A.20trans.20for.20implications/near/443965734\">said</a>:</p>\n<blockquote>\n<p>Or is the point that this doesn't work at all currently? In which case that's probably out-of-scope for my first PR, but I'll look at it quickly</p>\n</blockquote>\n<p>That's right, it doesn't work currently. Maybe there are reasons that it cannot work, I don't know. But <code>calc</code> lets you chain \"transitivity lemmas\" grouped according to certain rules (whose implementation I also don't know), like this, for example (this is an MWE, no imports required):</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hab</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hbc</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hcd</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"k\">calc</span><span class=\"w\"> </span><span class=\"n\">a</span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">hab</span>\n<span class=\"w\">    </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">hbc</span>\n<span class=\"w\">    </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">hcd</span>\n</code></pre></div>",
        "id": 443966470,
        "sender_full_name": "Richard Copley",
        "timestamp": 1718101534
    },
    {
        "content": "<p>Ah I see what you mean. At first glance, I think this would be a RFC to Lean4 itself, whereas the <code>trans</code> tactic is in mathlib.</p>",
        "id": 443968144,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1718102008
    },
    {
        "content": "<p>Yes, I think this would basically require analogue adaptations to the file <a href=\"https://github.com/leanprover/lean4/blob/5f9dedfe5ee9972acdebd669f228f487844a6156/src/Lean/Elab/Calc.lean#L99-L100\"><code>Lean.Elab.Calc</code></a>, which seems definitely possible.</p>\n<p>However, I don't think I'll open a RFC for that, as currently it doesn't seem important enough for me (personally) to justify the effort needed from core developers to work that out. But if you have a strong use case, you could open a <a href=\"https://github.com/leanprover/lean4/issues/new/choose\">RFC</a>.</p>",
        "id": 443972148,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1718103199
    },
    {
        "content": "<p>Very fair!</p>",
        "id": 443973281,
        "sender_full_name": "Richard Copley",
        "timestamp": 1718103615
    }
]