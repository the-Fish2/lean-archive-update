[
    {
        "content": "<p>Can I ask for a review of <a href=\"https://github.com/leanprover-community/mathlib4/pull/10924\">#10924</a>? It is quite light and simply removes some non-needed assumptions in some parts of Birkhoff's representation theorem. Perhaps <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> ?</p>",
        "id": 423975965,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1709197428
    },
    {
        "content": "<p>Oooh sorry, I didn't click Send on my review</p>",
        "id": 423976088,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709197466
    },
    {
        "content": "<p>Now done</p>",
        "id": 423976131,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709197486
    },
    {
        "content": "<p>Now received <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 423976212,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1709197514
    },
    {
        "content": "<p>Oh, and I see your remark about the <code>defeq</code>. Good point, let me think about it and come back to you. Thanks!</p>",
        "id": 423976502,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1709197625
    },
    {
        "content": "<p>I'm not sure how much it matters. After all, the important point is that you want to recover <code>a</code> from <code>Iic a</code>, but I'm not sure anyone would think \"Ah, just take the supremum of course\".</p>",
        "id": 423976760,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709197748
    },
    {
        "content": "<p>Well, apparently this was something that <span class=\"user-mention\" data-user-id=\"411579\">@Sam van G</span> might wanted to do. On the other hand I am also not sure how much this matters. I would prefer to think a bit about some use-case of this iso (and its inverse) and do a couple of tests, then I will probably have a better idea and will report on the outcome.</p>",
        "id": 423977009,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1709197843
    },
    {
        "content": "<p>I would expect the defeq to not really matter. But you definitely should have the lemma somewhere</p>",
        "id": 423977104,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709197885
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> I made some changes in particular adding some basis lemmas for the inverse (that is of course still not <code>defeq</code> to what one expects, but as you remarked this is potentially not a big issue).</p>",
        "id": 425045652,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1709718840
    },
    {
        "content": "<p>Thanks for your further comments, <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> . I saw them only after I rewrote some of the doc-strings, so some of them were already resolved. I did not understand your comments \"you're making ... less general\".<br>\nI would have expected that removing variables like <code>[@DecidablePred α SupIrred]</code> and <code>[DecidableEq α]</code> would actually make the statements <em>more</em> general? But clearly there is something about Lean that I don't understand here yet..</p>\n<p>Do I understand correctly that your suggestion is to just put these extra variables back in?</p>",
        "id": 425094285,
        "sender_full_name": "Sam van G",
        "timestamp": 1709734046
    },
    {
        "content": "<p>If you ever have a theorem statement that has some term that's not just a variable like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>then you can make it more general by abstracting that term using a new hypothesis</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>In a similar way, if there are <code>Decidable</code> instances that appear in the theorem statement, it becomes <em>more</em> general if you make sure the <code>Decidable</code> instances are all coming directly from an instance argument, rather than being derived.</p>",
        "id": 425129109,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709742694
    },
    {
        "content": "<p>Oh great.</p>",
        "id": 425129442,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1709742775
    },
    {
        "content": "<p>If the Lean kernel could know that <code>Decidable</code> and <code>Fintype</code> are subsingleton types, then we wouldn't need to worry about this.</p>\n<p>Technically, we \"should\" do the same for any proof terms that appear in a theorem statement, but proof irrelevance means we don't have to. There are probably reasons somewhere to do that occasionally (I don't know them), but it would also make things more inconvenient in a number of ways.</p>",
        "id": 425130096,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709742947
    },
    {
        "content": "<p>Just to be sure I understand you correctly:</p>\n<ol>\n<li>When you say \"if there are <code>Decidable</code> instances that appear in the theorem statement, it becomes more general if you make sure the <code>Decidable</code> instances are all coming directly from an instance argument, rather than being derived.\" you are supposing that some of the things in the statement <em>require</em> decidability just to be <em>stated</em>?</li>\n<li>When you speak about the kernel knowing that these are subsingleton, you are saying that if the kernel would know that any decidability proof, when exists, is unique, then it would not really be <em>more</em> general to say where it comes from (like if all naturals were equal to <code>2</code>, your two examples would be identical).</li>\n</ol>\n<p>Is that correct?</p>",
        "id": 425131055,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1709743228
    },
    {
        "content": "<p>On the other hand, do we still agree that if the <em>same proof</em> holds when removing <code>Decidable X</code> then I am making it more general?</p>",
        "id": 425131642,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1709743402
    },
    {
        "content": "<blockquote>\n<p>you are supposing that some of the things in the statement require decidability just to be stated?</p>\n</blockquote>\n<p>Yes, that's the supposition. If it's only needed in the proof, then mathlib style is to delete the Decidable instance (and use <code>classical</code> in the proof).</p>",
        "id": 425133015,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709743769
    },
    {
        "content": "<p>Then I am not sure to understand <a href=\"https://github.com/leanprover-community/mathlib4/pull/10924/files#r1514383134\">this</a> remark about <a href=\"https://github.com/leanprover-community/mathlib4/pull/10924\">#10924</a></p>",
        "id": 425133283,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1709743835
    },
    {
        "content": "<blockquote>\n<p>When you speak about the kernel knowing that these are subsingleton, you are saying that if the kernel would know that any decidability proof, when exists, is unique, then it would not really be more general to say where it comes from</p>\n</blockquote>\n<p>Yes. One consequence to this is that we use the <code>convert</code> tactic to deal with these typeclasses, since it can generate the equality proof you need, but if the kernel could just believe different Decidable instances were defeq, then it wouldn't be needed. (I'm not saying that this is fixable — my understanding is that this could cause big issues — but this is a thought experiment to see how it relates to proof irrelevance.)</p>",
        "id": 425133887,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709743981
    },
    {
        "content": "<p>Yury's been working on removing unnecessary Decidable instances from theorem statements and inserting <code>classical</code> into the proofs where needed, and the same for switching <code>Fintype</code> to <code>Finite</code>. There's also a linter in the works to flag where this can be done.</p>",
        "id": 425134346,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709744118
    },
    {
        "content": "<p>I see.</p>",
        "id": 425134410,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1709744138
    },
    {
        "content": "<p>(<code>Finite</code> is nice because it's a proof, so it enjoys proof irrelevance.)</p>",
        "id": 425134503,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709744163
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2310924.3A.20remove.20unnecessary.20assumptions/near/425134503\">said</a>:</p>\n<blockquote>\n<p>(<code>Finite</code> is nice because it's a proof, so it enjoys proof irrelevance.)</p>\n</blockquote>\n<p>Yes, I am currently playing with it and learning to love it!</p>",
        "id": 425134614,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1709744186
    },
    {
        "content": "<p>For that remark on <a href=\"https://github.com/leanprover-community/mathlib4/pull/10924\">#10924</a>, I'm not really sure. The rules were about theorems, not definitions.</p>\n<p>I know that for some of the file, it appears that <code>[Fintype {a : α // SupIrred a}]</code> is arguably breaking the rule since it's missing, and it's being derived from <code>[Fintype α]</code> via <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subtype.fintype#doc\">docs#Subtype.fintype</a> and the <code>[@DecidablePred α SupIrred]</code> instance.</p>",
        "id": 425136175,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709744652
    },
    {
        "content": "<p>Oh, perhaps I see. Thanks, let's wait for <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> , they might have further explanations.</p>",
        "id": 425136332,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1709744707
    },
    {
        "content": "<p>I'd think for definitions, you want the <em>least</em> number of fintype or decidable instances you can get away with, but there's no hard rule here — that's a design question where you have to take into account how your theorems look.</p>",
        "id": 425136572,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709744770
    },
    {
        "content": "<p>But, you might want a definition to allow more instances if you care about computing, and you want downstream users of this definition to be able to plug in better algorithms for computing the Fintype or the truth of the predicate. (I haven't seen anyone seriously do this in mathlib yet.)</p>",
        "id": 425136827,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709744854
    },
    {
        "content": "<p>Yes, that makes sense. I do not think that this is what Yaël had in mind, but let's wait and see.</p>",
        "id": 425137263,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1709744986
    },
    {
        "content": "<p>I will check again the statements tomorrow, but I know I paid attention to this when first writing the file, so I'd be surprised if I got it wrong</p>",
        "id": 425193372,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709765775
    },
    {
        "content": "<p>No problem! At any rate I am <del>now (thinking about going to bed, and) addressing your other comment about your version of the inverse</del>. done! <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span></p>",
        "id": 425193450,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1709765821
    },
    {
        "content": "<p>Thanks for all these explanations <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>! <br>\n(I only just got caught up.) <br>\nI am far from understanding everything above, but if I summarize my understanding, it is that it has to do with proof-irrelevance and certain things becoming hard to derive if we don't add <code>Decidable</code> and <code>Fintype</code> as instances in the file.<br>\nIn any case on this point I'm happy to follow anything that <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> and <span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> agree on.</p>",
        "id": 425377536,
        "sender_full_name": "Sam van G",
        "timestamp": 1709839021
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> I have just bumped <code>mathlib</code> there and was wondering if you had time to progress in the review.</p>",
        "id": 426189685,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1710268362
    },
    {
        "content": "<p>Not until this weekend, sorry <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 426189762,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710268396
    },
    {
        "content": "<p>Please ping me next monday and I will do it on the TGV</p>",
        "id": 426189820,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710268421
    },
    {
        "content": "<p>No problem!</p>",
        "id": 426189853,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1710268434
    },
    {
        "content": "<p>I had a TGV trip yesterday and decided to polish some of my PR's, we risk of being charged by SNCF for this work... <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 426189995,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1710268479
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> , wishing you a nice and productive TGV trip... <span aria-label=\"angel\" class=\"emoji emoji-1f47c\" role=\"img\" title=\"angel\">:angel:</span> <span aria-label=\"high speed train\" class=\"emoji emoji-1f684\" role=\"img\" title=\"high speed train\">:high_speed_train:</span></p>",
        "id": 427388574,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1710751056
    }
]