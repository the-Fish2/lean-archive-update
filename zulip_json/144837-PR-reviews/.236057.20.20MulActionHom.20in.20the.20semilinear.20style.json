[
    {
        "content": "<p>The PR is not yet ready but strange side effects appear, and I'm in trouble.</p>\n<p>Everything starts in <a href=\"https://github.com/leanprover-community/mathlib4/blob/54ef8a5aa385656150f113688e7393e236178d5b/Mathlib/Algebra/Hom/GroupAction.lean#L138\">https://github.com/leanprover-community/mathlib4/blob/54ef8a5aa385656150f113688e7393e236178d5b/Mathlib/Algebra/Hom/GroupAction.lean#L138</a> with a definition of a “semilinear” map between sets with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=SMul#doc\">docs#SMul</a>, in the spirit of what exists for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap#doc\">docs#LinearMap</a><br>\nThe field is called <code>map_smul'</code> as it will be called for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap#doc\">docs#LinearMap</a>, to cope with inheritance of field names. (The beginning of the file contains material related to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CompTriple#doc\">docs#CompTriple</a> which will certainly have to be unified.)</p>\n<p>Then <a href=\"https://github.com/leanprover-community/mathlib4/blob/54ef8a5aa385656150f113688e7393e236178d5b/Mathlib/Algebra/Module/LinearMap.lean#L84\">https://github.com/leanprover-community/mathlib4/blob/54ef8a5aa385656150f113688e7393e236178d5b/Mathlib/Algebra/Module/LinearMap.lean#L84</a> I could update the definition of a <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap#doc\">docs#LinearMap</a> using this new definition.<br>\nIt was however not clear to me what to do for classes, since <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=SemiLinearMapClass#doc\">docs#SemiLinearMapClass</a> uses an <code>_sl</code> notation.</p>\n<p>Many updates have been done, it doesn't go to the end because of a problem about <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearEquiv#doc\">docs#LinearEquiv</a> where I seem to be forced to enter <code>e.toLinearMap m</code> instead of <code>e m</code> where<code>e : LinearEquiv M N</code> and <code>m : M</code>. The problem seems to first appear about <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PiTensorProduct#doc\">docs#PiTensorProduct</a>, <a href=\"https://github.com/leanprover-community/mathlib4/blob/54ef8a5aa385656150f113688e7393e236178d5b/Mathlib/LinearAlgebra/PiTensorProduct.lean#L420\">https://github.com/leanprover-community/mathlib4/blob/54ef8a5aa385656150f113688e7393e236178d5b/Mathlib/LinearAlgebra/PiTensorProduct.lean#L420</a> but may be due to a wrong (re)definition of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearEquiv#doc\">docs#LinearEquiv</a> at <a href=\"https://github.com/leanprover-community/mathlib4/blob/54ef8a5aa385656150f113688e7393e236178d5b/Mathlib/Algebra/Module/Equiv.lean#L48\">https://github.com/leanprover-community/mathlib4/blob/54ef8a5aa385656150f113688e7393e236178d5b/Mathlib/Algebra/Module/Equiv.lean#L48</a></p>",
        "id": 398528906,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1698253522
    },
    {
        "content": "<p>(I don't know how to link to files/lines of the PR, obviously…)</p>",
        "id": 398529488,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1698253757
    },
    {
        "content": "<p>(if you click on a line of the PR, then the URL will update to be to that line, then you can copy it)</p>",
        "id": 398543594,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698259816
    },
    {
        "content": "<p>So I would be definitely grateful if some of you could have a look and share some idea about what could happen here.<br>\nI'm definitely ready to start over if I started on the wrong foot, but having a more flexible version of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=SmulHom#doc\">docs#SmulHom</a> is a necessity for my work on primitive actions, and I don't believe one could have equivariant maps in mathlib disjoint from the analogous work on linear maps.<br>\nMaybe <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> , <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> ,  <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> or <span class=\"user-mention\" data-user-id=\"311453\">@Frédéric Dupuis</span> ?</p>",
        "id": 398670003,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1698320359
    },
    {
        "content": "<p>I managed to fix the <code>toLinearMap</code> issue, <a href=\"https://github.com/leanprover-community/mathlib4/pull/6057#discussion_r1374774280\">by adding a shortcut <code>FunLike</code> instance</a>. The other major suggestion I have is to make <a href=\"https://github.com/leanprover-community/mathlib4/pull/6057#discussion_r1374744432\"><code>map_smul</code> take a <code>MulActionHomClass</code></a> instead of a <a href=\"https://github.com/leanprover-community/mathlib4/pull/6057#discussion_r1374751941\"><code>LinearMapClass</code></a>.</p>",
        "id": 398927507,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1698422831
    },
    {
        "content": "<p>That's all I have time for until the weekend, unfortunately.</p>",
        "id": 398927539,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1698422846
    },
    {
        "content": "<p>This PR, <a href=\"https://github.com/leanprover-community/mathlib4/pull/6057\">#6057</a>, generalizes <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MulActionHom#doc\">docs#MulActionHom</a> to allow equivariant maps when the monoids that act are related by a morphism, and refactors the rest of the library in terms of it, especially <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap#doc\">docs#LinearMap</a>.</p>\n<p>In the course of it, I followed what <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> and <span class=\"user-mention\" data-user-id=\"311453\">@Frédéric Dupuis</span> had done, namely introducing a class <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=RingHomCompTriple#doc\">docs#RingHomCompTriple</a> of triples of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=RingHom#doc\">docs#RingHom</a> that compose correctly. <br>\nSo this PR has <code>CompTriple</code> (for functions),  <code>MonoidHomCompTriple</code> (for monoid homs) and the earlier <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=RingHomCompTriple#doc\">docs#RingHomCompTriple</a>. <br>\nFor the moment, the three classes are essentially disjoint.</p>\n<p>I wonder whether it wouldn't be clearer to define them on top one of another, and to use namespaces :</p>\n<ul>\n<li><code>Function.CompTriple</code></li>\n<li><code>MonoidHom.CompTriple</code></li>\n<li><code>RingHom.CompTriple</code></li>\n</ul>\n<p>What do you think?</p>",
        "id": 421844132,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1708084406
    },
    {
        "content": "<p>Can you not merge them all into a single class?</p>",
        "id": 421844355,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708084496
    },
    {
        "content": "<p>with a bunch of <code>outParam</code>?</p>",
        "id": 421845869,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1708085074
    },
    {
        "content": "<p>Why would you need <code>outParam</code>?</p>",
        "id": 421846719,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708085458
    },
    {
        "content": "<p>Can't the function version do them all?</p>",
        "id": 421846743,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708085468
    },
    {
        "content": "<p>That's what I'm trying to do.<br>\nThe first issue is there: from <code>CompTriple ⇑σ₁₂ ⇑σ₂₃ ⇑σ₁₃</code>, deduce<code>σ₂₃ (σ₁₂ r) = σ₁₃ r</code> by rewriting some <code>CompTriple.comp_apply</code>, without having to enter </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">σ₂₃</span> <span class=\"o\">(</span><span class=\"n\">σ₁₂</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">σ₁₃</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">apply</span> <span class=\"n\">NewCompTriple.apply</span>\n      <span class=\"n\">infer_instance</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 421848412,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1708086201
    },
    {
        "content": "<p>Can't you just make that a lemma?</p>",
        "id": 421848700,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708086334
    },
    {
        "content": "<p>Yes.<br>\nBut there's a bunch of similar lemmas to write, when some ring homs are identity, and the same for monoid homs, etc.<br>\nIn any case, there could be just one class and not three.</p>",
        "id": 421849393,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1708086648
    },
    {
        "content": "<p>(It seems to be going well…)</p>",
        "id": 421850061,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1708086994
    },
    {
        "content": "<p>(Not so well…)</p>",
        "id": 421851237,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1708087510
    },
    {
        "content": "<p>The point is that there is seems to be no <code>FunLike</code> way to tell mathlib that composition works the same for monoid homs, ring homs, with identities, etc., but by talking about categories (which is what it is about, of course!)</p>",
        "id": 421851419,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1708087583
    },
    {
        "content": "<p>Is it reasonable to define <code>CompTriple</code> in terms of categories?</p>",
        "id": 421851469,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1708087610
    },
    {
        "content": "<p>Hmm... I'm not sure what you mean</p>",
        "id": 421851560,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708087654
    },
    {
        "content": "<p>The point is that I need several instances, that compositions of monoid homs give a comp triple, that composition of ring homs give a comp triple, similar one for identities, etc.</p>",
        "id": 421852855,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1708088177
    },
    {
        "content": "<p>Maybe all lemmas/instances could be added, whenever needed, but everything could be said only once if one says that in a category, there are comp triples, provided mathlib knows that Semiring form a category, monoids form a category, etc.</p>",
        "id": 421852949,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1708088222
    },
    {
        "content": "<p>That doesn't seem lke an improvement to me, since now you need to show that every non-categorical construction in mathlib transfers to the categorical setting.</p>",
        "id": 421853572,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708088470
    },
    {
        "content": "<p>I understand.</p>",
        "id": 421862426,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1708091613
    },
    {
        "content": "<p>Anyway, what I tried to do didn't really work.<br>\nThe only question that remains is whether there should be a single class or not. Since semilinear maps use instances of <code>RingHomCompTriple</code>, I can imagine that as fewer there are of those, as better the typeclasses inference system will work.</p>",
        "id": 421862711,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1708091715
    },
    {
        "content": "<p>This is something that would be easily doable if we implemented <a href=\"https://github.com/leanprover-community/mathlib4/pull/2202\">#2202</a>, but otherwise it's a long standing known problem that the categorical properties don't play very well with bundled morphisms.</p>",
        "id": 421930428,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1708113870
    },
    {
        "content": "<p>In any case, the three comp triple classes are a bit different and I don't know whether it is important to unify them. The point is that for linear maps, there are instances that manage them so that they are automatically filled, and correctly, while this looks unrealistic for equivariant mul action homs.</p>",
        "id": 422032257,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1708193740
    },
    {
        "content": "<p>(I would be grateful if this PR could be merged, the rest of my work on group actions, primitive actions, Iwasawa criterion, a theorem of Jordan... depends on it.)</p>",
        "id": 422032351,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1708193817
    },
    {
        "content": "<p>This PR has made much progress, thanks to thorough review and help by <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span>  <br>\nbut I am stuck with a problem in the linter which complains that <br>\n<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Function.iterate_one#doc\">docs#Function.iterate_one</a> can by proved by <code>simp only [iterate_succ, iterate_zero, id_comp]</code><br>\n(of course it can).<br>\nI don't understand what <a href=\"https://github.com/leanprover-community/mathlib4/pull/6057\">#6057</a> has to do with that, <br>\nmaybe it's just that this file is being recompiled and then the linter sees the problem it didn't catch earlier.</p>",
        "id": 424838845,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1709634801
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.236057.20.20MulActionHom.20in.20the.20semilinear.20style/near/424838845\">said</a>:</p>\n<blockquote>\n<p>maybe it's just that this file is being recompiled and then the linter sees the problem it didn't catch earlier.</p>\n</blockquote>\n<p>That seems very implausible. I'll take a look if I see what else it might be</p>",
        "id": 424840241,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1709635210
    },
    {
        "content": "<p>The error I see claims that it can be proved by <code>simp only [@Function.iterate_succ, @Function.iterate_zero, @CompTriple.comp_eq]</code> where <code>CompTriple.comp_eq</code> is a new lemma you added</p>",
        "id": 424840668,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1709635360
    }
]