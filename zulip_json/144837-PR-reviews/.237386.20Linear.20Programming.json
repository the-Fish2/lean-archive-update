[
    {
        "content": "<p>Three definitions of linear programming in consideration:<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/7386\">#7386</a><br>\nNeither of them is finished.<br>\nI'd like to know which of the definitions you are interested in having in Mathlib (when finished).</p>",
        "id": 393662787,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1695892975
    },
    {
        "content": "<p>Note that if <code>K</code> is a semifield (has no negation), the last two definitions are not equivalent</p>",
        "id": 393665482,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695893918
    },
    {
        "content": "<p>(though probably no one cares at all about that)</p>",
        "id": 393666348,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695894223
    },
    {
        "content": "<p>It seems to me that we are now focused on \"formalizing the definition right\".<br>\nI'd like to temporarily change the subject to \"formalizing the right definition\".</p>",
        "id": 393679985,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1695898574
    },
    {
        "content": "<p>If that's the game, then the options should be presented as prose rather than as Lean code; otherwise it's hard to distinguish a formalization mistake from a weird definition</p>",
        "id": 393683160,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695899217
    },
    {
        "content": "<p>As a high-level picture, we are choosing \"the main definition\" between:<br>\n(1) LP in a canonical form <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mi>x</mi><mo>=</mo><mi>b</mi><mo separator=\"true\">,</mo><mi>x</mi><mo>≥</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">Ax = b , x \\ge 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span><br>\n(2) LP in a standard form <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mi>x</mi><mo>≤</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">Ax \\le b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span><br>\n(3) LP with some inequality constraints <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mi>x</mi><mo>≤</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">Ax \\le b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> and some equality constraints <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>A</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mi>x</mi><mo>=</mo><msup><mi>b</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">A&#x27;x =b&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7519em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7519em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span></p>",
        "id": 393710343,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1695905857
    },
    {
        "content": "<p>My claims are:</p>\n<ul>\n<li>3 is better than 2, because it is easy to turn 3 into 2 but hard to turn 2 into 3 (computably)</li>\n<li>1 is harder to use than 3, as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> no longer lives in the domain of the original problem space, but an extended domain with slack coefficients. But 1 is presumably easier to prove things about.</li>\n</ul>\n<p>So I think probably having both 1 and 3 is sensible, an showing their equivalence</p>",
        "id": 393721086,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695908361
    },
    {
        "content": "<p>But you should of course wait for more opinions</p>",
        "id": 393721436,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695908435
    },
    {
        "content": "<p>I dislike 3 for the redundancy it involves. 1 and 2 seem fine in that regard</p>",
        "id": 393721759,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695908495
    },
    {
        "content": "<p>LP problems are inherently redundant anyway though, for instance if your constraints include <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">1 \\le x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mo>≤</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">2 \\le x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span></p>",
        "id": 393723335,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695908766
    },
    {
        "content": "<p>Of course. But I mean that we could encode an inequality as both <code>a ≤ b ∧ b ≤ a</code> and <code>a = b</code>. This seems undesirable.</p>",
        "id": 393724009,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695908895
    },
    {
        "content": "<p>If you're a consumer of this API, I would expect you would much rather provide the equality and inequality constraints separately</p>",
        "id": 393724208,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695908937
    },
    {
        "content": "<p>Maybe that's only an argument for a <code>.mk'</code> function though</p>",
        "id": 393724270,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695908948
    },
    {
        "content": "<p>My thinking for the <code>eq</code> arguments is that having them available separately might be useful; for instance, you could have a <code>.restrict</code> method that restricts the domain to lie only on the subspace defined by the equalities, and sets <code>eq := []</code></p>",
        "id": 393724832,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695909061
    },
    {
        "content": "<p>Maybe that's an argument for not having equalities at all, and instead having a means to go from <code>LP K (some_affine_subspace)</code> to <code>LP K P</code></p>",
        "id": 393727846,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695909644
    },
    {
        "content": "<p>It seems to be that we want (2) but generalize it to the same abstraction as (3) currently has, plus create a second constructor that transforms a system of equalities into twice as many inequalities.</p>",
        "id": 393730138,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1695910062
    },
    {
        "content": "<p>Update: I have just reworked the definition to be (2) only, and added API for making LP containing equalities.</p>",
        "id": 393783459,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1695925856
    },
    {
        "content": "<p>I think it is important to be able to handle mixed problems, especially because when one adds some linear independence assumptions on the matrix <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>, the description gets very precise.<br>\nBut the basic theorem could/should just be about solving linear inequalities <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mi>x</mi><mo>≤</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">Ax\\leq b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span>, the rest can fall as corollaries.</p>",
        "id": 393912634,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1695986874
    },
    {
        "content": "<p>LP <a href=\"https://github.com/leanprover-community/mathlib4/pull/7386\">#7386</a> is feeling neglected because nobody noticed it for over three weeks.</p>",
        "id": 401182907,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1699544620
    },
    {
        "content": "<p>You should improve the title of the PR and add a description. The title \"LP defined\" is rather obscure and opening the PR does not tell us what it's about unless we read the code (I'm not saying that's the reason that  your PR has not been reviewed). Quick review comment: you should improve the file docstring to explain what a linear program is and how it is represented here.</p>",
        "id": 401184231,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1699545039
    },
    {
        "content": "<p>Is my description \"Minimizing a linear function on a region defined by linear inequalities\" a good answer to your first question? As for the representation, I'll try to document it better.</p>",
        "id": 401184702,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1699545182
    },
    {
        "content": "<p>It's definitely better than an empty description! Such a description (and the new title) clarifies for example that it's not a PR about one of our various lp spaces.</p>",
        "id": 401185380,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1699545382
    },
    {
        "content": "<p>Thanks for your comments!<br>\nWhat else needs to be done?</p>",
        "id": 401722756,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1699868322
    },
    {
        "content": "<p>I have many PRs open at the moment. Nonetheless, I would like to prioritize this one. Can we speed up the review process a bit, please?</p>",
        "id": 402655667,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1700213931
    },
    {
        "content": "<p>I think</p>\n<blockquote>\n<p>Quick review comment: you should improve the file docstring to explain what a linear program is and how it is represented here.</p>\n</blockquote>\n<p>Still applies</p>",
        "id": 402700243,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700228097
    },
    {
        "content": "<p>I would expect an example of how an <code>Ax &lt;= b</code> linear program should be set up in mathlib</p>",
        "id": 402700466,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700228165
    },
    {
        "content": "<p>Can you please help me with the former task? I am bad at expressing things in English.</p>",
        "id": 402702833,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1700228990
    },
    {
        "content": "<p>I have left comments.</p>",
        "id": 402803802,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700267515
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237386.20Linear.20Programming/near/402700466\">said</a>:</p>\n<blockquote>\n<p>I would expect an example of how an <code>Ax &lt;= b</code> linear program should be set up in mathlib</p>\n</blockquote>\n<p>Rather <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mi>x</mi><mo>≥</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">Ax \\ge b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> since the goal is to minimize the objective function, right?</p>",
        "id": 403959137,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1700829224
    },
    {
        "content": "<p>I am not competent to decide the current standing issues in the LP PR.<br>\nNevertheless, I would like it to be done, somehow.<br>\nI don't care much about what LP will look like in Mathlib, but I would like to have it in Mathlib soon.<br>\nIs there anybody with opinions who could drive it towards some conclusions?</p>",
        "id": 407510912,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1702396989
    },
    {
        "content": "<p>Hi, I just saw this PR. </p>\n<p>I'm curious about your choice of LP as a list of constraints instead of a single (or two) matrices. Wouldn't it be hard to work with this definition in practice? Like how would define the dual or just define the linear program with constraint Ax \\le b?</p>",
        "id": 407552377,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1702410289
    },
    {
        "content": "<p>Do you have a proof in mind that you're trying to formalize using this definition? To me even weak duality looks hard with this.</p>",
        "id": 407552937,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1702410460
    },
    {
        "content": "<p>IMO just adding a constructor that creates a LP in your sense from a matrix A and a vector b and your favorite inequality would be very helpful.</p>",
        "id": 407553767,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1702410724
    },
    {
        "content": "<p>Actually, the more I think about this the less I'm convinced about using a collection of constraints instead of a single affine transformation between affine spaces. It might be worthwhile to prove a small theorem (like weak duality) and see if this definition is actually usable before merging.</p>",
        "id": 407566464,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1702414853
    },
    {
        "content": "<p>I just realized that in the current form, I cannot even <em>state</em> the <em>type</em> of a dual program.</p>",
        "id": 412148896,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1704896455
    },
    {
        "content": "<p>Why not?</p>",
        "id": 412199562,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704912176
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237386.20Linear.20Programming/near/393710343\">said</a>:</p>\n<blockquote>\n<p>As a high-level picture, we are choosing \"the main definition\" between:<br>\n(1) LP in a canonical form <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mi>x</mi><mo>=</mo><mi>b</mi><mo separator=\"true\">,</mo><mi>x</mi><mo>≥</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">Ax = b , x \\ge 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span><br>\n(2) LP in a standard form <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mi>x</mi><mo>≤</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">Ax \\le b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span><br>\n(3) LP with some inequality constraints <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mi>x</mi><mo>≤</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">Ax \\le b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> and some equality constraints <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>A</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mi>x</mi><mo>=</mo><msup><mi>b</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">A&#x27;x =b&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7519em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7519em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span></p>\n</blockquote>\n<p>I think there is one more form worth considering.</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mi>x</mi><mo>≤</mo><mi>b</mi><mo separator=\"true\">,</mo><mi>x</mi><mo>≥</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">Ax \\le b , x \\ge 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span></p>\n<p>It might look like worse than the canonical form and worse than the standard form at the same time, but hold on, LP in this form has a dual of the same form.</p>\n<p>Brief summary of LP duality (some usual forms from literature):<br>\n<a href=\"/user_uploads/3121/ijrn1C7_8vflpmuL35D9FFZ4/image.png\">image.png</a><br>\n<a href=\"/user_uploads/3121/YWWt7LZ1SLEKrB16tLVmVbT7/image.png\">image.png</a><br>\n<a href=\"/user_uploads/3121/3Gd-J8JS1quv8230tGWM53d7/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/ijrn1C7_8vflpmuL35D9FFZ4/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/ijrn1C7_8vflpmuL35D9FFZ4/image.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/YWWt7LZ1SLEKrB16tLVmVbT7/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/YWWt7LZ1SLEKrB16tLVmVbT7/image.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/3Gd-J8JS1quv8230tGWM53d7/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/3Gd-J8JS1quv8230tGWM53d7/image.png\"></a></div>",
        "id": 412212896,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1704917831
    },
    {
        "content": "<p>Your second form $Ax \\le b$ is not the standard form btw. The standard form is $Ax \\le b, x \\ge 0$, which is the one you just posted.</p>",
        "id": 412233211,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1704927167
    },
    {
        "content": "<p>You are saying <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mi>x</mi><mo>≤</mo><mi>b</mi><mo separator=\"true\">,</mo><mi>x</mi><mo>≥</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">A x \\le b, x \\ge 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> is the standard form? Should we formalize this one? As I said, it is convenient for LP duality.</p>",
        "id": 412284108,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1704958272
    },
    {
        "content": "<p>It might possibly be implemented along these lines:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Notation</span>\n<span class=\"kn\">open</span> <span class=\"n\">Matrix</span>\n\n<span class=\"sd\">/-- Linear program in the standard form. -/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">StandardLP</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedField</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- Matrix of coefficients -/</span>\n  <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">K</span>\n  <span class=\"sd\">/-- Right-hand side -/</span>\n  <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">K</span>\n  <span class=\"sd\">/-- Objective function coefficients -/</span>\n  <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">K</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedField</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">StandardLP.Admits</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">StandardLP</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">P.A.mulVec</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">P.b</span> <span class=\"bp\">∧</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">StandardLP.Reaches</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">StandardLP</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">P.Admits</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">P.c</span> <span class=\"bp\">⬝ᵥ</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">StandardLP.dual</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">StandardLP</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">StandardLP</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">K</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"bp\">-</span><span class=\"n\">P.A</span><span class=\"bp\">ᵀ</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">P.c</span><span class=\"o\">,</span> <span class=\"n\">P.b</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">StandardLP.weakDuality</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">StandardLP</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hP</span> <span class=\"o\">:</span> <span class=\"n\">P.Reaches</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n    <span class=\"o\">{</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hD</span> <span class=\"o\">:</span> <span class=\"n\">P.dual.Reaches</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">≤</span> <span class=\"n\">w</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">hxb</span><span class=\"o\">,</span> <span class=\"n\">h0x</span><span class=\"o\">⟩,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hP</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">hyc</span><span class=\"o\">,</span> <span class=\"n\">h0y</span><span class=\"o\">⟩,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hD</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">StandardLP.dual</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hyc</span> <span class=\"bp\">⊢</span>\n  <span class=\"k\">have</span> <span class=\"n\">hxyb</span> <span class=\"o\">:</span> <span class=\"n\">P.A.mulVec</span> <span class=\"n\">x</span> <span class=\"bp\">⬝ᵥ</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">P.b</span> <span class=\"bp\">⬝ᵥ</span> <span class=\"n\">y</span>\n  <span class=\"bp\">·</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- multiply `hxb` by `y` using `h0y`</span>\n  <span class=\"k\">have</span> <span class=\"n\">hcy</span> <span class=\"o\">:</span> <span class=\"n\">P.c</span> <span class=\"bp\">≤</span> <span class=\"n\">P.A</span><span class=\"bp\">ᵀ.</span><span class=\"n\">mulVec</span> <span class=\"n\">y</span>\n  <span class=\"bp\">·</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- multiply `hyc` by `-1`</span>\n  <span class=\"k\">have</span> <span class=\"n\">hcxy</span> <span class=\"o\">:</span> <span class=\"n\">P.c</span> <span class=\"bp\">⬝ᵥ</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">P.A</span><span class=\"bp\">ᵀ.</span><span class=\"n\">mulVec</span> <span class=\"n\">y</span> <span class=\"bp\">⬝ᵥ</span> <span class=\"n\">x</span>\n  <span class=\"bp\">·</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- multiply `hcy` by `x` using `h0x`</span>\n  <span class=\"k\">have</span> <span class=\"n\">middle</span> <span class=\"o\">:</span> <span class=\"n\">P.A</span><span class=\"bp\">ᵀ.</span><span class=\"n\">mulVec</span> <span class=\"n\">y</span> <span class=\"bp\">⬝ᵥ</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">P.A.mulVec</span> <span class=\"n\">x</span> <span class=\"bp\">⬝ᵥ</span> <span class=\"n\">y</span>\n  <span class=\"bp\">·</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- transposition tricks</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">hcxy.trans_eq</span> <span class=\"n\">middle</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">hxyb</span>\n</code></pre></div>",
        "id": 412295249,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1704963400
    },
    {
        "content": "<p>It will be easy to develop a lot of theory with these definitions. </p>\n<p>Also, it is easy to recover a list of inequalities from matrices but going the other way is very hard. Here you get to use the well developed <code>Matrix</code> API.</p>\n<p>Later on it might make sense to add another structure, say <code>generalLP</code> which handles the other inequalities.</p>",
        "id": 412400558,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1704998492
    },
    {
        "content": "<p>Would you bake into the <code>StandardLP</code> definition that the objective is always to minimize? In such a case, the form <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mi>x</mi><mo>≥</mo><mi>b</mi><mo separator=\"true\">,</mo><mi>x</mi><mo>≥</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">A x \\ge b, x \\ge 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> would be more idiomatic...</p>",
        "id": 412407543,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1705001396
    },
    {
        "content": "<p>Wikipedia has enough details: <a href=\"https://en.m.wikipedia.org/wiki/Linear_programming\">https://en.m.wikipedia.org/wiki/Linear_programming</a></p>",
        "id": 412413945,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1705004078
    },
    {
        "content": "<p>It does but we need to make a strategic decision.</p>",
        "id": 412416157,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1705005029
    },
    {
        "content": "<p>Maybe a good first strategic decision is to go with Wikipedia?</p>",
        "id": 412417332,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705005538
    },
    {
        "content": "<p>Would it mean that we bake into the <code>StandardLP</code> definition that the objective is always to maximize?</p>",
        "id": 412419406,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1705006468
    },
    {
        "content": "<p>Sounds good to me. For a <code>generalLP</code> we can add a boolean variable that keeps track of whether we are maximizing or minimizing.</p>",
        "id": 412448075,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1705019783
    },
    {
        "content": "<p>Offtopic: makes me wonder if there's any way to simplify the job of the PR reviewers</p>",
        "id": 412458334,
        "sender_full_name": "Denis Gorbachev",
        "timestamp": 1705024162
    },
    {
        "content": "<p>I had the impression that in present-day literature with any kind of optimization, minimization is more popular than maximization (maybe because of the popularity of machine learning?), hence I wanted to make minimization the default. Nevertheless, if others prefer LP in form of maximization, I'll do maximization.</p>",
        "id": 412491974,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1705045402
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245078\">Apurva Nakade</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237386.20Linear.20Programming/near/407566464\">said</a>:</p>\n<blockquote>\n<p>Actually, the more I think about this the less I'm convinced about using a collection of constraints instead of a single affine transformation between affine spaces. It might be worthwhile to prove a small theorem (like weak duality) and see if this definition is actually usable before merging.</p>\n</blockquote>\n<p>Weak duality proved for the matrix form of LP: <a href=\"https://github.com/leanprover-community/mathlib4/pull/9693\">#9693</a> (a parallel PR, do not merge both)</p>",
        "id": 412554617,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1705069649
    },
    {
        "content": "<p>The way I like to state linear programming looks simpler, and every other program can be deduced from it.<br>\nHere is a copy of the statement from my lecture notes on tropical geometry.</p>\n<p><a href=\"/user_uploads/3121/B1drlwqTGRfrc4aL1H2uP1w0/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/B1drlwqTGRfrc4aL1H2uP1w0/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/B1drlwqTGRfrc4aL1H2uP1w0/image.png\"></a></div><p>(IIRC, this is more or less adapted from A. Schrijver (1998), <em>Theory of linear and integer programming</em>, Wiley- Interscience Series in Discrete Mathematics And Optimization, John Wiley &amp; Sons.</p>",
        "id": 412847166,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1705266958
    },
    {
        "content": "<p>Is it easy (easier?) to develop the rest of the theory using this definition?</p>",
        "id": 412847936,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1705267687
    },
    {
        "content": "<p>I think so, but of course, it depends of what is expected by “the rest of theory”. <br>\n(I found Schrijever's book a nice read.)</p>",
        "id": 412854452,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1705274124
    },
    {
        "content": "<p>Another remark is that linear programming is essentially linear algebra plus inequalities. <br>\nFor mathlib, the basic point of view is to do linear algebra coordinate-free, and I would hope that linear programming be done coordinate-free as well. Then, the main statements would be about linear forms on polyhedral cones. Probably something could be possible on arbitrary closed cones (with compact  base), as in topological vector spaces. Polyhedral cones are then showed to be either images of R_+^n under a linear map, or intersections of half spaces, equivalently (an important result which is not trivial, of course, and is essentially equivalent to linear programming).</p>",
        "id": 412854673,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1705274344
    },
    {
        "content": "<p>My expectation for linear programming would be to establish an abstract general theorem from which all typical instances can be deduced. Note, for example, that it is not necessary that the field of coefficients be the real numbers, and on the contrary, the case of rational numbers is important (for the theory of toric varieties, eg), and so are arbitrary ordered fields (for model theory).</p>",
        "id": 412854833,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1705274516
    },
    {
        "content": "<p>My statement above is given in coordinates but what really matters is the cone <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi>R</mi><mo>+</mo><mi>n</mi></msubsup></mrow><annotation encoding=\"application/x-tex\"> R_+^n </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9887em;vertical-align:-0.3053em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-2.453em;margin-left:-0.0077em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">+</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3053em;\"><span></span></span></span></span></span></span></span></span></span> in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>R</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">R^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> : it defines both the inequality <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ϕ</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>≤</mo><mi>v</mi></mrow><annotation encoding=\"application/x-tex\"> \\phi(x) \\leq v </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">ϕ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span> and the set of <em>positive</em> linear forms on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>R</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">R^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 412854925,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1705274620
    },
    {
        "content": "<p>Proofs of the above version of the theorem, and corollaries, etc. are given in my lecture notes <a href=\"https://webusers.imj-prg.fr/~antoine.chambert-loir/enseignement/2020-21/gt/toptrop.pdf\">Topics in tropical geometry</a> of a graduate course at Paris University.</p>",
        "id": 412855029,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1705274707
    },
    {
        "content": "<p>Intersection of half spaces is effectively the definition in <a href=\"https://github.com/leanprover-community/mathlib4/pull/7386\">#7386</a></p>",
        "id": 412901391,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705304894
    },
    {
        "content": "<p>But perhaps a <code>Polyhedral s</code> definition would be sensible</p>",
        "id": 412901484,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705304960
    },
    {
        "content": "<p>And a constructive choice of (non-redundant?) half planes could then be a <code>PolyhedralBasis</code> or something</p>",
        "id": 412901650,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705305041
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237386.20Linear.20Programming/near/412854452\">said</a>:</p>\n<blockquote>\n<p>I think so, but of course, it depends of what is expected by “the rest of theory”. <br>\n(I found Schrijever's book a nice read.)</p>\n</blockquote>\n<p>I was thinking about duality theorems (Strong duality) and then extending it to Convex optimization (Regular duality, Slater condition, KKT)</p>",
        "id": 412971681,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1705329783
    },
    {
        "content": "<p>I will look at the references you've provided, thanks!</p>",
        "id": 412971757,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1705329816
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237386.20Linear.20Programming/near/412847166\">said</a>:</p>\n<blockquote>\n<p>The way I like to state linear programming looks simpler, and every other program can be deduced from it.<br>\nHere is a copy of the statement from my lecture notes on tropical geometry.</p>\n<p><a href=\"/user_uploads/3121/B1drlwqTGRfrc4aL1H2uP1w0/image.png\">image.png</a></p>\n<p>(IIRC, this is more or less adapted from A. Schrijver (1998), <em>Theory of linear and integer programming</em>, Wiley- Interscience Series in Discrete Mathematics And Optimization, John Wiley &amp; Sons.</p>\n</blockquote>\n<p>I'm totally on board with coordinate free definitions - using linear transformations instead of matrices and linear functionals instead of vectors</p>",
        "id": 412972222,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1705329967
    },
    {
        "content": "<p>My only issue was with describing the constraint set using a list (set?) of inequalities instead of a single inequality - say using linear transformations and convex cones as in your definition.</p>",
        "id": 412973404,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1705330356
    },
    {
        "content": "<p>Bump <a href=\"https://github.com/leanprover-community/mathlib4/pull/9693\">#9693</a></p>",
        "id": 413152482,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1705411331
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245078\">Apurva Nakade</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237386.20Linear.20Programming/near/412973404\">said</a>:</p>\n<blockquote>\n<p>My only issue was with describing the constraint set using a list (set?) of inequalities instead of a single inequality - say using linear transformations and convex cones as in your definition.</p>\n</blockquote>\n<p>If this is needed, there could well be functions that transforms a list/set of inequalities into the relevant datum (linear maps/cones). (These functions would do not math, just build a math structure.)</p>",
        "id": 413172542,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1705417166
    },
    {
        "content": "<p>I have trouble constructing a dual program for a linear program in any of the coordinate-free definitions. Can you help me with it?</p>",
        "id": 413174648,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1705417690
    },
    {
        "content": "<p>Can you state here (in coordinates) what you want?</p>",
        "id": 415970790,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1705478378
    },
    {
        "content": "<p>I want:<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/blob/203733c24eaaf3c3407628926cc1d5642bcb9f49/Mathlib/LinearAlgebra/Matrix/LinearProgramming.lean#L63\">https://github.com/leanprover-community/mathlib4/blob/203733c24eaaf3c3407628926cc1d5642bcb9f49/Mathlib/LinearAlgebra/Matrix/LinearProgramming.lean#L63</a></p>\n<p>I will be very happy if somebody translates it to the coordinate-free definition.</p>",
        "id": 415973785,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1705479594
    },
    {
        "content": "<p>My claim, however, but I'll have to do the algebra later, is that the statement from my lecture notes I had given (as a screenshot) implies this result by considering the linear map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi><mo>→</mo><mi>V</mi><mo>⊕</mo><mi>W</mi></mrow><annotation encoding=\"application/x-tex\">V\\to V\\oplus W</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span></span></span></span> given by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><msup><mi>y</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">)</mo><mo>↦</mo><mo stretchy=\"false\">(</mo><mo>−</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x,y&#x27;)\\mapsto (-x,f(x))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0019em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">))</span></span></span></span> or something approaching.</p>",
        "id": 415979524,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1705481828
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 415979852,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1705481947
    },
    {
        "content": "<p>(messages like the above: I conjecture that you had no internet access when you tried to post, and then copy-pasted when trying again, which messes up all the latex)</p>",
        "id": 415983608,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705483140
    },
    {
        "content": "<p>I had internet access since the second message worked, but the message “took longer to process” with a turning red wheel...</p>",
        "id": 415984264,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1705483342
    },
    {
        "content": "<p>Let's do it again since my web browser lost it as well.</p>",
        "id": 415984728,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1705483499
    },
    {
        "content": "<p>I understand that your program  searches for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>∈</mo><msup><mi>R</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\"> x \\in R^n </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mi>x</mi><mo>≤</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">  Ax \\leq b </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>≤</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\"> 0 \\leq x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>, and maximizes <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>c</mi><mi>t</mi></msup><mi>x</mi></mrow><annotation encoding=\"application/x-tex\"> c^tx</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7936em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7936em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">t</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\">x</span></span></span></span>, while the dual program searches for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi><mo>∈</mo><msup><mi>R</mi><mi>m</mi></msup></mrow><annotation encoding=\"application/x-tex\"> y \\in R^m </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span></span></span></span></span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><msup><mi>A</mi><mi>t</mi></msup><mi>y</mi><mo>≤</mo><mo>−</mo><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">−A^ty \\leq −c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.988em;vertical-align:-0.1944em;\"></span><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7936em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">t</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mord mathnormal\">c</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>≤</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\"> 0\\leq y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span>, and maximizes <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>b</mi><mi>t</mi></msup><mi>y</mi></mrow><annotation encoding=\"application/x-tex\"> b^ty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.988em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7936em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">t</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span>.</p>\n<p>Here <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mo separator=\"true\">,</mo><mi>x</mi><mo>∈</mo><msup><mi>R</mi><mi>n</mi></msup><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">c,x \\in R^nc</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\">c</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi><mo separator=\"true\">,</mo><mi>y</mi><mo>∈</mo><msup><mi>R</mi><mi>m</mi></msup></mrow><annotation encoding=\"application/x-tex\"> b,y \\in R^m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span></span></span></span></span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> is an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mo>×</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">m\\times n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> matrix, and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo></mrow><annotation encoding=\"application/x-tex\">\\leq</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mrel\">≤</span></span></span></span>  on vectors is coefficientwise inequality (all vectors are column vectors).</p>",
        "id": 415985119,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1705483639
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 415985723,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1705483856
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 415985855,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1705483901
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 415986063,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1705483973
    },
    {
        "content": "<p>I now define a few algebraic objects:</p>",
        "id": 415986290,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1705484064
    },
    {
        "content": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi><mo>=</mo><msup><mi>R</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\"> V=R^n </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span>, a vector space , with dual <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>V</mi><mo>∗</mo></msup><mo>=</mo><msup><mi>R</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">V^∗=R^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6887em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6887em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mtext> </mtext><mspace></mspace><mspace width=\"0.1111em\"/><mo lspace=\"0em\" rspace=\"0.17em\"></mo><mtext> ⁣</mtext><mo lspace=\"0em\" rspace=\"0em\">:</mo><mspace width=\"0.3333em\"/><mi>x</mi><mo>↦</mo><msup><mi>c</mi><mi>t</mi></msup><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">c \\colon x\\mapsto c^tx</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.522em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mord\"> </span><span class=\"mspace nobreak\"></span><span class=\"mspace\" style=\"margin-right:0.1111em;\"></span><span class=\"mpunct\"></span><span class=\"mspace\" style=\"margin-right:-0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mrel\">:</span></span><span class=\"mspace\" style=\"margin-right:0.3333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7936em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7936em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">t</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\">x</span></span></span></span>, an element of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>V</mi><mo>∗</mo></msup></mrow><annotation encoding=\"application/x-tex\"> V^∗ </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6887em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6887em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo>=</mo><msubsup><mi>R</mi><mo>+</mo><mi>n</mi></msubsup></mrow><annotation encoding=\"application/x-tex\"> C=R_+^n </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9887em;vertical-align:-0.3053em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-2.453em;margin-left:-0.0077em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">+</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3053em;\"><span></span></span></span></span></span></span></span></span></span>​​, a cone in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\"> V </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span> with dual (polar) <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>C</mi><mo>∗</mo></msup></mrow><annotation encoding=\"application/x-tex\"> C^∗ </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6887em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6887em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span></span></span></span> consisting of linear forms which are positive on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\"> C </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> (and, by biduality, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> is the dual of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>C</mi><mo>∗</mo></msup></mrow><annotation encoding=\"application/x-tex\">C^∗</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6887em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6887em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span></span></span></span>)</p>",
        "id": 415986523,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1705484156
    },
    {
        "content": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>W</mi><mo>=</mo><msup><mi>R</mi><mi>m</mi></msup></mrow><annotation encoding=\"application/x-tex\"> W=R^m </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span></span></span></span></span></span></span></span>, another vector space, and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi><mo>∈</mo><mi>W</mi></mrow><annotation encoding=\"application/x-tex\"> b∈W </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi><mo>=</mo><msubsup><mi>R</mi><mo>+</mo><mi>m</mi></msubsup></mrow><annotation encoding=\"application/x-tex\">  D=R_+^m </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9887em;vertical-align:-0.3053em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-2.453em;margin-left:-0.0077em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">+</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3053em;\"><span></span></span></span></span></span></span></span></span></span>​, a cone in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>W</mi></mrow><annotation encoding=\"application/x-tex\"> W </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span></span></span></span> with dual <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>D</mi><mo>∗</mo></msup><mo>⊆</mo><msup><mi>W</mi><mo>∗</mo></msup></mrow><annotation encoding=\"application/x-tex\">D ^∗\\subseteq W^∗ </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8247em;vertical-align:-0.136em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6887em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6887em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6887em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span></span></span></span> consisting of linear forms on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>W</mi></mrow><annotation encoding=\"application/x-tex\"> W </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span></span></span></span> which are positive on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi></mrow><annotation encoding=\"application/x-tex\"> D </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mspace></mspace><mspace width=\"0.1111em\"/><mo lspace=\"0em\" rspace=\"0.17em\"></mo><mtext> ⁣</mtext><mo lspace=\"0em\" rspace=\"0em\">:</mo><mspace width=\"0.3333em\"/><mtext>⁣</mtext><mi>V</mi><mo>→</mo><mi>W</mi></mrow><annotation encoding=\"application/x-tex\"> f\\colon ⁣V\\to W </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace nobreak\"></span><span class=\"mspace\" style=\"margin-right:0.1111em;\"></span><span class=\"mpunct\"></span><span class=\"mspace\" style=\"margin-right:-0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mrel\">:</span></span><span class=\"mspace\" style=\"margin-right:0.3333em;\"></span><span class=\"mord\">⁣</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span></span></span></span>, the linear map defined by the matrix <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>.</p>",
        "id": 415987137,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1705484373
    },
    {
        "content": "<p>The cones <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo separator=\"true\">,</mo><msup><mi>C</mi><mo>∗</mo></msup><mo separator=\"true\">,</mo><mi>D</mi><mo separator=\"true\">,</mo><msup><mi>D</mi><mo>∗</mo></msup></mrow><annotation encoding=\"application/x-tex\">C, C^*, D, D^*</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8831em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6887em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6887em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span></span></span></span> define orderings on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi><mo separator=\"true\">,</mo><msup><mi>V</mi><mo>∗</mo></msup><mo separator=\"true\">,</mo><mi>W</mi><mo separator=\"true\">,</mo><msup><mi>W</mi><mo>∗</mo></msup></mrow><annotation encoding=\"application/x-tex\">V, V^*, W, W^*</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8831em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6887em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6887em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span></span></span></span> respectively.</p>",
        "id": 415987297,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1705484433
    },
    {
        "content": "<p>With this notation, the initial program considers <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>∈</mo><mi>V</mi></mrow><annotation encoding=\"application/x-tex\"> x\\in V</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>≤</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\"> f(x)≤b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mi>x</mi><mo>≤</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">−x≤0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord\">−</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>, and maximizes <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msup><mi>c</mi><mi>t</mi></msup><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">c(x)=c^tx</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7936em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7936em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">t</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\">x</span></span></span></span>.</p>",
        "id": 415987329,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1705484449
    },
    {
        "content": "<p>Then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>A</mi><mi>t</mi></msup></mrow><annotation encoding=\"application/x-tex\">A^t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7936em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7936em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">t</span></span></span></span></span></span></span></span></span></span></span> is the matrix of the transpose map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>f</mi><mi>t</mi></msup><mspace></mspace><mspace width=\"0.1111em\"/><mo lspace=\"0em\" rspace=\"0.17em\"></mo><mtext> ⁣</mtext><mo lspace=\"0em\" rspace=\"0em\">:</mo><mspace width=\"0.3333em\"/><mtext>⁣</mtext><msup><mi>W</mi><mo>∗</mo></msup><mo>→</mo><msup><mi>V</mi><mo>∗</mo></msup></mrow><annotation encoding=\"application/x-tex\">f^t\\colon ⁣W^*\\to V^∗</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.988em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7936em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">t</span></span></span></span></span></span></span></span><span class=\"mspace nobreak\"></span><span class=\"mspace\" style=\"margin-right:0.1111em;\"></span><span class=\"mpunct\"></span><span class=\"mspace\" style=\"margin-right:-0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mrel\">:</span></span><span class=\"mspace\" style=\"margin-right:0.3333em;\"></span><span class=\"mord\">⁣</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6887em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6887em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6887em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span></span></span></span> given by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ϕ</mi><mo>↦</mo><mi>ϕ</mi><mo>∘</mo><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">\\phi\\mapsto \\phi\\circ f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">ϕ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">ϕ</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∘</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ϕ</mi><mo>∈</mo><msup><mi>W</mi><mo>∗</mo></msup></mrow><annotation encoding=\"application/x-tex\">\\phi\\in W^*</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">ϕ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6887em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6887em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span></span></span></span>. For <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi><mo>∈</mo><msup><mi>W</mi><mo>∗</mo></msup></mrow><annotation encoding=\"application/x-tex\">y\\in W^∗</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6887em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6887em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span></span></span></span>, the condition <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><msup><mi>A</mi><mi>t</mi></msup><mi>y</mi><mo>≤</mo><mo>−</mo><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">−A^ty\\leq −c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.988em;vertical-align:-0.1944em;\"></span><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7936em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">t</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mord mathnormal\">c</span></span></span></span> rewrites <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><msup><mi>f</mi><mi>t</mi></msup><mo stretchy=\"false\">(</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>≤</mo><mo>−</mo><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">−f^t(y)\\leq −c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0436em;vertical-align:-0.25em;\"></span><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7936em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">t</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mord mathnormal\">c</span></span></span></span>.</p>",
        "id": 415987361,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1705484463
    },
    {
        "content": "<p>My claim, however, but I'll have to do the algebra later, is that the statement from my lecture notes I had given (as a screenshot) implies this result by considering the linear map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi><mo>→</mo><mi>V</mi><mo>⊕</mo><mi>W</mi></mrow><annotation encoding=\"application/x-tex\">V\\to V\\oplus W</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span></span></span></span> given by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><msup><mi>y</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">)</mo><mo>↦</mo><mo stretchy=\"false\">(</mo><mo>−</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x,y&#x27;)\\mapsto (-x,f(x))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0019em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">))</span></span></span></span> or something approaching.</p>",
        "id": 415987634,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1705484564
    },
    {
        "content": "<p>Nice recovery!</p>",
        "id": 415989617,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705485265
    },
    {
        "content": "<p>The big structure we don't have in Mathlib is the dual cone consisting of functionals. We have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.innerDualCone#doc\">docs#Set.innerDualCone</a> which is probably isomorphic but not defeq.</p>",
        "id": 416075684,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1705510136
    },
    {
        "content": "<p>This question came up in another thread. So, it might be worthwhile to add this structure to the library.</p>\n<p>Now that I think about it, it's weird that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.innerDualCone#doc\">docs#Set.innerDualCone</a> was added to the library before the canonical dual cone <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 416076440,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1705510294
    },
    {
        "content": "<p>Or alternately, how reasonable is it to keep working with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.innerDualCone#doc\">docs#Set.innerDualCone</a> (which is good enough for inner product spaces) and never bother with functionals and dual cones?</p>",
        "id": 416081325,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1705511745
    },
    {
        "content": "<p>Indeed, this part should be generalized !</p>",
        "id": 416084679,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1705512865
    },
    {
        "content": "<p>These coordinate-free approaches, no matter how elegant, look arcane to me.</p>\n<p>Most users will probably just want to pass a matrix (and if they have something other than matrix, they usually know how to translate it to the matrix form). Most literature defines LP in the in the matrix form as well. I think it will be easier for almost everybody if we stick to the matrix form.</p>\n<p>If we want to develop some very general theory, we can do it in the conic programming section and keep the linear programming simple and close to its typical applications.</p>",
        "id": 416578253,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1705586825
    },
    {
        "content": "<p>Does this mean that you only want your theory to work for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> instead of finite dimensional spaces ? That sounds very limiting, especially given our frequent use of type aliases…</p>",
        "id": 416589010,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1705590016
    },
    {
        "content": "<p>I probably want it to work for <code>Fin n → K</code> where <code>[LinearOrderedField K]</code>.<br>\nI am open to suggestions for other settings.</p>",
        "id": 416589614,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1705590165
    },
    {
        "content": "<p>Non-numeric coördinates might be useful tho.</p>",
        "id": 416591017,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1705590538
    },
    {
        "content": "<p>Well the obvious answer seems to be finite dimensional vector spaces over a linear ordered field. And this is not just a matter of loving coordinate-free theories, let’s say you want to work on the space of matrices ? Or on <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=euclideanSpace#doc\">docs#euclideanSpace</a> because you need the Euclidean norm ? You could insert isomorphisms sure, but that will be painful.</p>",
        "id": 416591325,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1705590627
    },
    {
        "content": "<p>Even if you really want to use coordinates for a proof, I think it will be much better to introduce them only in the proof (by picking a basis) than asking the vector space to have a specific form to begin with.</p>",
        "id": 416591556,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1705590707
    },
    {
        "content": "<p>I understand your point, but I think that \"how broadly applicable the definition is\" should not be the only criterion. Cognitive load is another. Let's say somebody proves in Lean that problem Z can be reduced to LP (for certain problem Z and certain notion of reducibility) and wants to publish. Will the reviewer immediately see that the formal definition claimed to be LP is indeed what their intuitive notion of LP is? Or will the reviewer have to spend 5 minutes thinking about if the definition has a loophole that allows more than just linear programs?</p>",
        "id": 416603197,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1705594113
    },
    {
        "content": "<p>I'm afraid this ship has sailed.</p>",
        "id": 416603395,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705594171
    },
    {
        "content": "<p>OT moved to:<br>\n<a href=\"#narrow/stream/287929-mathlib4/topic/Rename.20DFA.3F\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/Rename.20DFA.3F</a></p>",
        "id": 416604465,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1705594480
    },
    {
        "content": "<blockquote>\n<p>Will the reviewer immediately see that the formal definition claimed to be LP is indeed what their intuitive notion of LP is?</p>\n</blockquote>\n<p>This is the purpose behind the examples in <code>lean-liquid</code>; you convince the reviewer the definition is correct by showing it behaves correctly</p>",
        "id": 416611193,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705596633
    },
    {
        "content": "<p>And in that case I think it would be rather easy to explicitly state the translation, thus formally proving that the definition coincides with whichever one you want.</p>",
        "id": 416613017,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1705597262
    },
    {
        "content": "<p>All right, is everybody on board with <span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span> 's definition?</p>",
        "id": 417185431,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1705914747
    },
    {
        "content": "<p>Will <span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span> 's definition be compatible with <span class=\"user-mention\" data-user-id=\"245078\">@Apurva Nakade</span> 's recent development towards strong duality? I didn't check them in detail.</p>",
        "id": 417262167,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1705939283
    },
    {
        "content": "<p>There's not enough dual cone stuff in the library to answer this question.</p>",
        "id": 417435149,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1706012837
    },
    {
        "content": "<p>I'm fine with the above definition. But please also prove some basic theorem using it so there is some sanity check that the definition is workable.</p>",
        "id": 417435480,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1706012969
    },
    {
        "content": "<p>I guess it's job for me? Or is <span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span> interested in implementing his definition in Lean?</p>",
        "id": 417437537,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1706013715
    },
    {
        "content": "<p>The present week is nightmar-ish for me (sick + lot of work), but I am ready to help to implement things I suggested. Don't hesitate to add <code>sorry</code> when you think so and delegate them to me if needed.</p>",
        "id": 417463919,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1706021923
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/10026\">#10026</a><br>\nHow can I make <code>V</code> inherit ordering from <code>R</code> please?<br>\nIn order for the definition to compile, I temporarily added <code>[PartialOrder V]</code>, but I am pretty sure it is wrong this way (it allows an arbitrary ordering on <code>V</code> independently of <code>R</code>).</p>",
        "id": 418278201,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1706276833
    },
    {
        "content": "<p>You can't define an order on <code>V</code> from one of <code>R</code>, so it sounds logical to assume an order. Of course you'd also have to ask for some compatibility in theorems, probably some combination of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=OrderedSMul#doc\">docs#OrderedSMul</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=OrderedCommGroup#doc\">docs#OrderedCommGroup</a></p>",
        "id": 418280932,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1706277667
    },
    {
        "content": "<p>That said, do you really want to fix an ordering on the vector space, or is it better to allow the user to choose a cone representing an order ?</p>",
        "id": 418281021,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1706277702
    },
    {
        "content": "<p>So <code>[LinearOrderedRing R]</code> should be relaxed?</p>",
        "id": 418282900,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1706278193
    },
    {
        "content": "<p>No that part can stay. You have to orders at play, one on <code>R</code> and one on <code>V</code>. They have to be related but one does not impose the other.</p>",
        "id": 418294671,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1706282032
    },
    {
        "content": "<p>How do you do \"cone representing an order\" please?</p>",
        "id": 418310716,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1706286765
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ConvexCone.to_orderedSMul#doc\">docs#ConvexCone.to_orderedSMul</a> ?</p>",
        "id": 418349702,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1706302420
    },
    {
        "content": "<p>or maybe this one <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ConvexCone.toPreorder#doc\">docs#ConvexCone.toPreorder</a></p>",
        "id": 418350004,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1706302578
    },
    {
        "content": "<p>This one says more than simply a <code>Preorder</code>: it also gives the compatibility of the preorder with respect to multiplication by positive elements.</p>",
        "id": 418352308,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1706303820
    },
    {
        "content": "<p>No, sorry, I think one has to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ConvexCone.toOrderedAddCommGroup#doc\">docs#ConvexCone.toOrderedAddCommGroup</a> which gives an ordering on the ambient vector space from the cone.</p>",
        "id": 418353369,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1706304370
    },
    {
        "content": "<p>However, and maybe <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> will tell us more about this : his work on convex cones mostly starts from an ordering on the space which is given as an instance, but here, the cones will vary.</p>",
        "id": 418353684,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1706304566
    },
    {
        "content": "<p>So what you’re saying is that we should allow for any cone instead of a fixed order, right ?</p>",
        "id": 418359372,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1706307825
    },
    {
        "content": "<p>I am not sure.<br>\nI wonder whether we can't just apply <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=riesz_extension#doc\">docs#riesz_extension</a>.</p>",
        "id": 418360071,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1706308235
    },
    {
        "content": "<p>Also : I want the field to be any linearly ordered field, I am not sure I want to impose it to be dense.</p>",
        "id": 418360149,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1706308293
    },
    {
        "content": "<p>Maybe we want a notation for the ordering given by the cone, and another notation for a linear form to be positive relative to a cone.</p>",
        "id": 418365479,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1706311718
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AddCommGroup.PositiveCone#doc\">docs#AddCommGroup.PositiveCone</a></p>",
        "id": 418365574,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1706311801
    },
    {
        "content": "<p>... in case you forgot that existed</p>",
        "id": 418365633,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1706311827
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237386.20Linear.20Programming/near/418353684\">said</a>:</p>\n<blockquote>\n<p>However, and maybe <span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> will tell us more about this : his work on convex cones mostly starts from an ordering on the space which is given as an instance, but here, the cones will vary.</p>\n</blockquote>\n<p>What exactly do you reference as \"my work on convex cones\"? I'm busy this week-end (family duties), so I don't have time to read the whole thread.</p>",
        "id": 418461098,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706404745
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237386.20Linear.20Programming/near/418281021\">said</a>:</p>\n<blockquote>\n<p>That said, do you really want to fix an ordering on the vector space, or is it better to allow the user to choose a cone representing an order ?</p>\n</blockquote>\n<p>Is this <a href=\"https://github.com/leanprover-community/mathlib4/pull/10026\">#10026</a> what you meant?</p>",
        "id": 418584153,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1706516650
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237386.20Linear.20Programming/near/418461098\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237386.20Linear.20Programming/near/418353684\">said</a>:</p>\n<blockquote>\n<p>However, and maybe <span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> will tell us more about this : his work on convex cones mostly starts from an ordering on the space which is given as an instance, but here, the cones will vary.</p>\n</blockquote>\n<p>What exactly do you reference as \"my work on convex cones\"? I'm busy this week-end (family duties), so I don't have time to read the whole thread.</p>\n</blockquote>\n<p>My question was the following:  there is a correspondence between ordering relations on a (say, real) vector space (compatible with multiplication) and cones. In most of the things you defined, the ordering relation appears as instances <code> [OrderedSemiring 𝕜] [OrderedAddCommGroup E] [Module 𝕜 E] [OrderedSMul 𝕜 E]</code>.<br>\nFor linear programming, one may wish to reverse the way of thinking and start with <code> [OrderedSemiring 𝕜]  [Module 𝕜 E] </code>but get the two other instances through a given <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PointedCone#doc\">docs#PointedCone</a>. Then, for <code>C : PointedCone 𝕜 E</code>, t would be practical to get a notation <code>≤[C]</code>for an ordering relation on <code>E</code> which endows it with <code> [OrderedAddCommGroup E] [OrderedSMul 𝕜 E]</code> in such a way that <code>PointedCone.positive 𝕜 E = C</code>.</p>",
        "id": 418708375,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1706557718
    },
    {
        "content": "<p>May I get feedback on <a href=\"https://github.com/leanprover-community/mathlib4/pull/10026\">#10026</a> please? I need to know whether it is the definition you want and I should proceed.</p>",
        "id": 418806298,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1706610278
    },
    {
        "content": "<p>Essentially, yes, except that I can't tell if one should assume right away <code>LinearlyOrderedField R</code> and replace <code>s : PointedCone R V</code>. (I'm inclined to do that…)</p>",
        "id": 418807163,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1706610573
    },
    {
        "content": "<p>Ah so <code>PointedCone</code> would automatically define ordering on <code>V</code> from ordering on <code>R</code> ?</p>",
        "id": 418807807,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1706610801
    },
    {
        "content": "<p>[solved]</p>",
        "id": 418815545,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1706613704
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span> 's work in progress:<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/commits/ACL/lp/\">https://github.com/leanprover-community/mathlib4/commits/ACL/lp/</a></p>",
        "id": 418893562,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1706637988
    },
    {
        "content": "<p>After discussion with <span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span> we have these definitions: <a href=\"https://github.com/leanprover-community/mathlib4/pull/10026\">#10026</a></p>\n<p>I am eager to hear your feedback!</p>",
        "id": 418906954,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1706643315
    },
    {
        "content": "<p>Wait! Did we define cone programming (in its full scope) in <a href=\"https://github.com/leanprover-community/mathlib4/pull/10026\">#10026</a> instead of defining \"exactly\" linear programming?</p>",
        "id": 419022414,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1706701631
    },
    {
        "content": "<p>I am really confused. Don't we have to restrict the cone to be a polyhedron in order to have linear programming?</p>",
        "id": 419054945,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1706712112
    },
    {
        "content": "<p>No. There are cones in linear programming, what is linear is the objective function.<br>\n<a href=\"https://en.wikipedia.org/wiki/Linear_programming\">https://en.wikipedia.org/wiki/Linear_programming</a></p>",
        "id": 419077833,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1706718327
    },
    {
        "content": "<p>Nevertheless, despite what I said earlier, it might be worth to have a general notion of linear programming that is compatible with what people expect of a linear program in standard form.<br>\n<a href=\"/user_uploads/3121/JudHkbvP-tpMT247Gb49zg_K/image.png\">image.png</a><br>\nAlthough: the standard form has a natural self-duality.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/JudHkbvP-tpMT247Gb49zg_K/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/JudHkbvP-tpMT247Gb49zg_K/image.png\"></a></div>",
        "id": 419077913,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1706718354
    },
    {
        "content": "<p>That would mean defining a linear program as something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">V</span> <span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">OrderedSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">W</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">W</span><span class=\"o\">]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">LinearProgram</span> <span class=\"n\">where</span>\n  <span class=\"n\">coneV</span> <span class=\"o\">:</span> <span class=\"n\">PointedCone</span> <span class=\"n\">R</span> <span class=\"n\">V</span>\n  <span class=\"n\">linmap</span> <span class=\"o\">:</span> <span class=\"n\">LinearMap</span> <span class=\"n\">R</span> <span class=\"n\">V</span> <span class=\"n\">W</span>\n  <span class=\"n\">coneW</span> <span class=\"o\">:</span> <span class=\"n\">PointedCone</span> <span class=\"n\">R</span> <span class=\"n\">W</span>\n  <span class=\"n\">objective</span> <span class=\"o\">:</span> <span class=\"n\">Module.Dual</span> <span class=\"n\">R</span> <span class=\"n\">W</span>\n  <span class=\"n\">target</span> <span class=\"o\">:</span> <span class=\"n\">W</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">space</span> <span class=\"o\">(</span><span class=\"n\">LP</span> <span class=\"o\">:</span> <span class=\"n\">LinearProgram</span> <span class=\"n\">R</span> <span class=\"n\">V</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">LP.coneV</span> <span class=\"bp\">|</span> <span class=\"n\">exists</span> <span class=\"n\">y</span> <span class=\"k\">in</span> <span class=\"n\">LP.coneW</span><span class=\"o\">,</span> <span class=\"n\">Lp.linmap</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">LP.target</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 419078167,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1706718426
    },
    {
        "content": "<p>As I said, the duality is as follows :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">LinearProgram.Dual</span> <span class=\"o\">(</span><span class=\"n\">LP</span> <span class=\"o\">:</span> <span class=\"n\">LinearProgram</span> <span class=\"n\">R</span> <span class=\"n\">V</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">LinearProgram</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">Module.Dual</span> <span class=\"n\">R</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Module.Dual</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n   <span class=\"n\">coneV</span> <span class=\"o\">:=</span> <span class=\"n\">LP.coneW.polar</span>\n  <span class=\"n\">linmap</span> <span class=\"o\">:=</span> <span class=\"n\">LP.linmap.transpose</span>\n  <span class=\"n\">coneW</span> <span class=\"o\">:=</span> <span class=\"n\">LP.coneV.polar</span>\n  <span class=\"n\">objective</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- write LP.target as a linear form on Module.Dual R W</span>\n  <span class=\"n\">target</span> <span class=\"o\">:=</span> <span class=\"n\">LP.objective</span>\n</code></pre></div>",
        "id": 419079397,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1706718803
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237386.20Linear.20Programming/near/419078167\">said</a>:</p>\n<blockquote>\n<p>That would mean defining a linear program as something like</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">V</span> <span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">OrderedSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">W</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">W</span><span class=\"o\">]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">LinearProgram</span> <span class=\"n\">where</span>\n  <span class=\"n\">coneV</span> <span class=\"o\">:</span> <span class=\"n\">PointedCone</span> <span class=\"n\">R</span> <span class=\"n\">V</span>\n  <span class=\"n\">linmap</span> <span class=\"o\">:</span> <span class=\"n\">LinearMap</span> <span class=\"n\">R</span> <span class=\"n\">V</span> <span class=\"n\">W</span>\n  <span class=\"n\">coneW</span> <span class=\"o\">:</span> <span class=\"n\">PointedCone</span> <span class=\"n\">R</span> <span class=\"n\">W</span>\n  <span class=\"n\">objective</span> <span class=\"o\">:</span> <span class=\"n\">Module.Dual</span> <span class=\"n\">R</span> <span class=\"n\">W</span>\n  <span class=\"n\">target</span> <span class=\"o\">:</span> <span class=\"n\">W</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">space</span> <span class=\"o\">(</span><span class=\"n\">LP</span> <span class=\"o\">:</span> <span class=\"n\">LinearProgram</span> <span class=\"n\">R</span> <span class=\"n\">V</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">LP.coneV</span> <span class=\"bp\">|</span> <span class=\"n\">exists</span> <span class=\"n\">y</span> <span class=\"k\">in</span> <span class=\"n\">LP.coneW</span><span class=\"o\">,</span> <span class=\"n\">Lp.linmap</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">LP.target</span> <span class=\"o\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>bump <a href=\"https://github.com/leanprover-community/mathlib4/pull/10026\">#10026</a></p>",
        "id": 419223155,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1706785809
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237386.20Linear.20Programming/near/419079397\">said</a>:</p>\n<blockquote>\n<p>As I said, the duality is as follows :</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">LinearProgram.Dual</span> <span class=\"o\">(</span><span class=\"n\">LP</span> <span class=\"o\">:</span> <span class=\"n\">LinearProgram</span> <span class=\"n\">R</span> <span class=\"n\">V</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">LinearProgram</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">Module.Dual</span> <span class=\"n\">R</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Module.Dual</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n   <span class=\"n\">coneV</span> <span class=\"o\">:=</span> <span class=\"n\">LP.coneW.polar</span>\n  <span class=\"n\">linmap</span> <span class=\"o\">:=</span> <span class=\"n\">LP.linmap.transpose</span>\n  <span class=\"n\">coneW</span> <span class=\"o\">:=</span> <span class=\"n\">LP.coneV.polar</span>\n  <span class=\"n\">objective</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- write LP.target as a linear form on Module.Dual R W</span>\n  <span class=\"n\">target</span> <span class=\"o\">:=</span> <span class=\"n\">LP.objective</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I didn't succeed at implementing this.</p>",
        "id": 419223217,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1706785832
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237386.20Linear.20Programming/near/419077833\">said</a>:</p>\n<blockquote>\n<p>No. There are cones in linear programming, what is linear is the objective function.<br>\n<a href=\"https://en.wikipedia.org/wiki/Linear_programming\">https://en.wikipedia.org/wiki/Linear_programming</a></p>\n</blockquote>\n<p>I am not sure whether we are using the same terms here.<br>\nAre suggesting that, for example, SDP is not an expressible using <code>LinearProgram</code> from <a href=\"https://github.com/leanprover-community/mathlib4/pull/10026\">#10026</a> ?</p>",
        "id": 419223726,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1706786011
    },
    {
        "content": "<p>9 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/broken.20glyphs.20in.20github\">#general &gt; broken glyphs in github</a> by <span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span>.</p>",
        "id": 419231842,
        "sender_full_name": "Notification Bot",
        "timestamp": 1706789043
    },
    {
        "content": "<p>Following a comment by <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> on <a href=\"https://github.com/leanprover-community/mathlib4/pull/10026\">#10026</a> \"I think it probably makes sense to generalize M to an affine space, though I guess you'd be trading no negation for no origin, as we don't have a typeclass that means neither...\" , I tried to make a new version in <a href=\"https://github.com/leanprover-community/mathlib4/pull/10159\">#10159</a> that allows affine maps and affine spaces.</p>\n<p>Currently we have four PRs proposing an LP definition, incompatible with each other:<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/7386\">#7386</a> (list of constraints)<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/9693\">#9693</a> (matrix form)<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/10026\">#10026</a> (Antoine Chambert-Loir's definition; semirings, linear)<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/10159\">#10159</a> (Antoine Chambert-Loir's definition; rings, affine)</p>",
        "id": 419241838,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1706792741
    },
    {
        "content": "<p>/poll Which definition do you think makes the most sense to continue working on?<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/7386\">#7386</a> (list of constraints)<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/9693\">#9693</a> (matrix form)<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/10026\">#10026</a> (Antoine Chambert-Loir's; semirings, linear)<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/10159\">#10159</a> (Antoine Chambert-Loir's; rings, affine)</p>",
        "id": 419242116,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1706792836
    },
    {
        "content": "<p>PS: I still don't know whether <a href=\"https://github.com/leanprover-community/mathlib4/pull/10026\">#10026</a> and <a href=\"https://github.com/leanprover-community/mathlib4/pull/10159\">#10159</a> implement linear programming or cone programming.</p>",
        "id": 419254099,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1706796684
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237386.20Linear.20Programming/near/419078167\">said</a>:</p>\n<blockquote>\n<p>That would mean defining a linear program as something like</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">V</span> <span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">OrderedSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">W</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">W</span><span class=\"o\">]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">LinearProgram</span> <span class=\"n\">where</span>\n  <span class=\"n\">coneV</span> <span class=\"o\">:</span> <span class=\"n\">PointedCone</span> <span class=\"n\">R</span> <span class=\"n\">V</span>\n  <span class=\"n\">linmap</span> <span class=\"o\">:</span> <span class=\"n\">LinearMap</span> <span class=\"n\">R</span> <span class=\"n\">V</span> <span class=\"n\">W</span>\n  <span class=\"n\">coneW</span> <span class=\"o\">:</span> <span class=\"n\">PointedCone</span> <span class=\"n\">R</span> <span class=\"n\">W</span>\n  <span class=\"n\">objective</span> <span class=\"o\">:</span> <span class=\"n\">Module.Dual</span> <span class=\"n\">R</span> <span class=\"n\">W</span>\n  <span class=\"n\">target</span> <span class=\"o\">:</span> <span class=\"n\">W</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">space</span> <span class=\"o\">(</span><span class=\"n\">LP</span> <span class=\"o\">:</span> <span class=\"n\">LinearProgram</span> <span class=\"n\">R</span> <span class=\"n\">V</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">LP.coneV</span> <span class=\"bp\">|</span> <span class=\"n\">exists</span> <span class=\"n\">y</span> <span class=\"k\">in</span> <span class=\"n\">LP.coneW</span><span class=\"o\">,</span> <span class=\"n\">Lp.linmap</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">LP.target</span> <span class=\"o\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This is a general cone program. You get an LP when you require the cones to be <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PointedCone.positive#doc\">docs#PointedCone.positive</a></p>",
        "id": 419254184,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1706796711
    },
    {
        "content": "<p>FYI, I proved the weak duality for all versions but <a href=\"https://github.com/leanprover-community/mathlib4/pull/7386\">#7386</a> (list of constraints – over here I don't even know how to define the type of the dual program).</p>",
        "id": 419314137,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1706814170
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237386.20Linear.20Programming/near/412199562\">said</a>:</p>\n<blockquote>\n<p>Why not?</p>\n</blockquote>\n<p>For the dual, I need a condition for every variable of the primal.</p>",
        "id": 419314409,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1706814268
    },
    {
        "content": "<p>(I suggest that this discussion is moved outside of the stream PR reviews, because it as gone far away of reviewing a definite PR.)</p>",
        "id": 419332193,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1706821137
    },
    {
        "content": "<p>Having basic notions of linear programming in Lean makes sense, but one needs to agree about the mathematical results that have to be implemented. The basic definitions (such as those present in any of the versions of this PR) are only the beginning of the story, they allow to <em>state</em> the kind of optimization problem,. However, as far as I understand the subject,  the core of the theory lies in the characterization of the optimum in terms of duality (weak/strong duality theorems).<br>\nIn my opinion, it is only with a reasonable formulation of these duality theorems in Lean (at least their statements) that one will be able to decide whether a given formalization goes in the correct direction.</p>",
        "id": 419332947,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1706821401
    },
    {
        "content": "<p>We can probably return here:<br>\n<a href=\"#narrow/stream/236449-Program-verification/topic/Linear.20programming\">https://leanprover.zulipchat.com/#narrow/stream/236449-Program-verification/topic/Linear.20programming</a></p>",
        "id": 419332951,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1706821402
    },
    {
        "content": "<p>The classic formulation of a standard problem uses coordinates and a mixin of affine/linear real inequalities. Up to their noninvariant formulations, I believe that it can be formulated in an invariant way (one just needs to replace the inequalities by cones).</p>",
        "id": 419333765,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1706821714
    },
    {
        "content": "<p>A more general formulation would consider a polyhedron (= finite intersection of half-spaces delimited by affine forms), and its dual polyhedron (affine forms which are positive on it). In this framework, the main duality theorem is essentially Hahn-Banach, which Mathlib knows. (However, Mathlib doesn't seem to know about the relative interior of a convex set, etc., so some work is still needed.) [Update: it knows a bit about it, but some work is still needed…]</p>",
        "id": 419333905,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1706821780
    },
    {
        "content": "<p>You mean <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=intrinsicInterior#doc\">docs#intrinsicInterior</a> ?</p>",
        "id": 419334136,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1706821879
    },
    {
        "content": "<p>There is one reason, though, to give new proofs of these results, because they don't need the coefficients of the linear/affine forms to be real numbers. In fact, the appropriate generality considers inequalities of the form <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∑</mo><msub><mi>a</mi><mi>i</mi></msub><msub><mi>x</mi><mi>i</mi></msub><mo>≤</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\"> \\sum a_i x_i \\leq b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span>, where the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> belong to a linearly field <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Q</mi></mrow><annotation encoding=\"application/x-tex\">Q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">Q</span></span></span></span>, the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> to a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Q</mi></mrow><annotation encoding=\"application/x-tex\">Q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">Q</span></span></span></span>-module  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> which is linearly ordered. (Examples : Take <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Q</mi><mo>=</mo><mi>R</mi><mo>=</mo><mi mathvariant=\"bold\">R</mi></mrow><annotation encoding=\"application/x-tex\">Q=R=\\mathbf R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">Q</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6861em;\"></span><span class=\"mord mathbf\">R</span></span></span></span>, or take <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Q</mi><mo>=</mo><mi mathvariant=\"bold\">Q</mi></mrow><annotation encoding=\"application/x-tex\">Q=\\mathbf Q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">Q</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8805em;vertical-align:-0.1944em;\"></span><span class=\"mord mathbf\">Q</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo>=</mo><mi mathvariant=\"bold\">R</mi></mrow><annotation encoding=\"application/x-tex\">R=\\mathbf R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6861em;\"></span><span class=\"mord mathbf\">R</span></span></span></span>, or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Q</mi><mo>=</mo><mi>R</mi><mo>=</mo><mi mathvariant=\"bold\">Q</mi></mrow><annotation encoding=\"application/x-tex\">Q=R=\\mathbf Q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">Q</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8805em;vertical-align:-0.1944em;\"></span><span class=\"mord mathbf\">Q</span></span></span></span>…) Indeed, this is necessary to understand rational polytopes etc. which are prevalent in tropical geometry, toric geometry, etc. Also, one needs to have finiteness results of vertices, rays, etc. which only hold for polyhedral sets.</p>",
        "id": 419334630,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1706822112
    },
    {
        "content": "<p>I thought <a href=\"https://github.com/leanprover-community/mathlib4/pull/10026\">#10026</a> was going in the direction yall wanted to be going. Don't you think so?</p>",
        "id": 419423271,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1706867997
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245078\">Apurva Nakade</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237386.20Linear.20Programming/near/419254184\">said</a>:</p>\n<blockquote>\n<p>This is a general cone program. You get an LP when you require the cones to be <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PointedCone.positive#doc\">docs#PointedCone.positive</a></p>\n</blockquote>\n<p>Thank you!! I updated <a href=\"https://github.com/leanprover-community/mathlib4/pull/10026\">#10026</a> and <a href=\"https://github.com/leanprover-community/mathlib4/pull/10159\">#10159</a> with this in mind.</p>",
        "id": 419792281,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1707124119
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237386.20Linear.20Programming/near/419242116\">said</a>:</p>\n<blockquote>\n<p>/poll Which definition do you think makes the most sense to continue working on?<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/7386\">#7386</a> (list of constraints)<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/9693\">#9693</a> (matrix form)<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/10026\">#10026</a> (Antoine Chambert-Loir's; semirings, linear)<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/10159\">#10159</a> (Antoine Chambert-Loir's; rings, affine)</p>\n</blockquote>\n<p>I would like to know which PR I should continue working on.</p>",
        "id": 420420765,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1707385751
    },
    {
        "content": "<p>Does anybody know why this <code>nolint</code> isn't nolinting?<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/blob/8ae82f099138c7fab14b74a9a6ce5dc96dbc7801/Mathlib/LinearAlgebra/LinearProgramming.lean#L64\">https://github.com/leanprover-community/mathlib4/blob/8ae82f099138c7fab14b74a9a6ce5dc96dbc7801/Mathlib/LinearAlgebra/LinearProgramming.lean#L64</a></p>",
        "id": 424860658,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1709642708
    },
    {
        "content": "<p>I take it you are seeing a warning on the line of code itself? If so, that's the core unused-variables linter, not the std linter (which triggers on <code>#lint</code> and in a separate CI build step). You need to use <code>set_option linter.unusedVariables false in</code> to turn off the former</p>",
        "id": 424878179,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709648065
    },
    {
        "content": "<p>Thank you Mario!</p>",
        "id": 424894121,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1709652348
    },
    {
        "content": "<p>There haven't been any new inputs for a long time...<br>\nWhat needs to be done to <a href=\"https://github.com/leanprover-community/mathlib4/pull/10026\">#10026</a> so it can be accepted to Mathlib?</p>",
        "id": 424894348,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1709652408
    },
    {
        "content": "<p>At least the \"TODO\" comment needs to be fixed :)</p>",
        "id": 424897915,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1709653377
    },
    {
        "content": "<p>Yes, I will document it — if Mathlib moderators indicate they are in favor of accepting this PR.</p>",
        "id": 424911052,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1709656675
    },
    {
        "content": "<p>I have just finished a proof of the strong duality theorem — currently only for one version of LP:<br>\n<a href=\"https://github.com/madvorak/vcsp/blob/3559045c0e83658f9acef3888aa4d34cb7887abc/VCSP/LinearProgramming.lean#L120\">https://github.com/madvorak/vcsp/blob/3559045c0e83658f9acef3888aa4d34cb7887abc/VCSP/LinearProgramming.lean#L120</a><br>\nI think it is time to revisit the topic of which definition of LP should go to Mathlib.</p>",
        "id": 441227993,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1716985115
    },
    {
        "content": "<p>Here is Strong LP duality for matrix over any <code>LinearOrderedField</code>:<br>\n<a href=\"https://github.com/madvorak/vcsp/blob/d95316e33b18d0251db17c6bfb60e2b10e60752d/VCSP/LinearProgramming.lean#L259\">https://github.com/madvorak/vcsp/blob/d95316e33b18d0251db17c6bfb60e2b10e60752d/VCSP/LinearProgramming.lean#L259</a></p>\n<p>I am happy to continue working on further generalizations.<br>\nCan we please agree on the LP <em>definition</em> now?</p>",
        "id": 441787493,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1717183765
    }
]