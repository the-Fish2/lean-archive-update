[
    {
        "content": "<p>Let <code>α : Type</code> with <code>Fintype α</code> (and <code>DecidableEq α</code>).<br>\nThe main goal of this PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/9359\">#9359</a> is to compute the cardinality of conjugacy classes in <code>Equiv.Perm α</code> and <code>alternatingGroup α</code>.</p>\n<p>Every <code>g : Equiv.Perm α</code> has a <code>cycleType α : Multiset ℕ</code>.</p>\n<p>By <code>Equiv.Perm.isConj_iff_cycleType_eq</code>, two permutations are conjugate in <code>Equiv.Perm α</code> iff their cycle types are equal. To compute the cardinality of the conjugacy classes, we could use a purely combinatorial approach and compute the number of permutations with given cycle type but we resorted to a more algebraic approach.</p>\n<p>Given <code>g : Equiv.Perm α</code>, the conjugacy class of <code>g</code> is the orbit of <code>g</code> under the action <code>ConjAct (Equiv.Perm α)</code>, and we use the orbit-stabilizer theorem <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MulAction.card_orbit_mul_card_stabilizer_eq_card_group#doc\">docs#MulAction.card_orbit_mul_card_stabilizer_eq_card_group</a> to reduce the computation to the computation of the centralizer of <code>g</code>, the subgroup of <code>Equiv.Perm α</code> consisting of all permutations which commute with <code>g</code>. It is accessed here as <code>MulAction.stabilizer (ConjAct (Equiv.Perm α)) g</code>.</p>\n<p>We compute this subgroup as follows.</p>\n<ul>\n<li>\n<p>If <code>h : MulAction.stabilizer (ConjAct (Equiv.Perm α)) g</code>, then the action  of <code>h</code> by conjugation on <code>Equiv.Perm α</code> stabilizes <code>g.cycleFactorsFinset</code>.  That induces an action of <code>MulAction.stabilizer (ConjAct (Equiv.Perm α)) g</code>  on <code>g.cycleFactorsFinset</code> which is defined via  <code>Equiv.Perm.OnCycleFactors.subMulActionOnCycleFactors </code></p>\n</li>\n<li>\n<p>This action defines a group morphism <code>Equiv.Perm.OnCycleFactors.φ g</code> from  <code>MulAction.stabilizer (ConjAct (Equiv.Perm α)) g</code>  to <code>Equiv.Perm (g.cycleFactorsFinset)</code></p>\n</li>\n<li>\n<p><code>Equiv.Perm.OnCycleFactors.Iφ_eq_range</code> shows that the range of <code>Equiv.Perm.OnCycleFactors.φ g</code>  is the subgroup <code>Iφ g</code> of <code>Equiv.Perm (g.cycleFactorsFinset)</code>  consisting of permutations <code>τ</code> which preserve the length of the cycles.  This is showed by constructing a right inverse <code>Equiv.Perm.OnCycleFactors.φ'</code>  in <code>Equiv.Perm.OnCycleFactors.hφ'_is_rightInverse</code>.</p>\n</li>\n<li>\n<p><code>Equiv.Perm.OnCycleFactors.hφ_range_card</code> computes the cardinality of  <code>range (Equiv.Perm.OnCycleFactors.φ g)</code> as a product of factorials.</p>\n</li>\n<li>\n<p>For an element <code>z : Equiv.Perm α</code>, we then prove in  <code>Equiv.Perm.OnCycleFactors.hφ_mem_ker_iff</code> that <code>ConjAct.toConjAct z</code> belongs to  the kernel of <code>Equiv.Perm.OnCycleFactors.φ g</code> if and only if it permutes <code>g.fixedPoints</code>  and it acts on each cycle of <code>g</code> as a power of that cycle.  This gives a description of the kernel of <code>Equiv.Perm.OnCycleFactors.φ g</code> as the product  of a symmetric group and of a product of cyclic groups.<br>\n  This analysis starts with the morphism <code>Equiv.Perm.OnCycleFactors.θ</code>,  its injectivity <code>Equiv.Perm.OnCycleFactors.hθ_injective</code>,  its range <code>Equiv.Perm.OnCycleFactors.hφ_ker_eq_θ_range</code>,<br>\n  and  its cardinality <code>Equiv.Perm.OnCycleFactors.hθ_range_card</code>.</p>\n</li>\n<li>\n<p><code>Equiv.Perm.conj_stabilizer_card g</code> computes the cardinality  of the centralizer of <code>g</code></p>\n</li>\n<li>\n<p><code>Equiv.Perm.conj_class_card_mul_eq g</code> computes the cardinality  of the conjugacy class of <code>g</code>.</p>\n</li>\n<li>\n<p>We now can compute the cardinality of the set of permutations with given cycle type.  The condition for this cardinality to be zero is given by  <code>Equiv.Perm.card_of_cycleType_eq_zero_iff</code>  which is itself derived from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Equiv.Perm.exists_with_cycleType_iff#doc\">docs#Equiv.Perm.exists_with_cycleType_iff</a>.</p>\n</li>\n<li>\n<p><code>Equiv.Perm.card_of_cycleType_mul_eq m</code> and <code>Equiv.Perm.card_of_cycleType m</code>  compute this cardinality.</p>\n</li>\n<li>\n<p><code>AlternatingGroup.of_cycleType_eq m</code>, <code>AlternatingGroup.of_cycleType_eq m</code>  and <code>AlternatingGroup.card_of_cycleType m</code> give the same result  in the subgroup <code>alternatingGroup α</code></p>\n</li>\n<li>\n<p><code>Equiv.Perm.OnCycleFactors.sign_ψ</code> computes the signature of the permutation induced given by <code>θ</code>.</p>\n</li>\n<li>\n<p>We finally compute on which condition the centralizer of an even permutation  is contained in <code>alternatingGroup α</code> and deduce the formula  for the cardinality of the centralizers and conjugacy classes  in <code>alternatingGroup α</code>.</p>\n</li>\n</ul>\n<p>Among things that remain to be done, and for which some advice will be appreciated :</p>\n<ul>\n<li>The file is long but it is not clear how to split it for the PR to be studied easily. There are various steps, and many functions of general interest, some pertaining to the cycles of a permutation. Maybe, some golfing will show how to get rid of most of them. </li>\n<li>Finding better names than <code>Equiv.Perm.OnCycleFactors.φ</code> or <code>Equiv.Perm.OnCycleFactors.θ</code> for the various functions and lemmas…</li>\n</ul>",
        "id": 410633662,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1704028850
    }
]