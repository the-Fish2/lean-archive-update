[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/10640\">#10640</a>, we remove uses of <code>have</code> in the Lean 3 way, where the goal is closed with a focusing dot instead of <code>:= by</code>. A little bit tedious to do throughout the library, but mostly straightforward (438 files touched, still). However, I have a problem with a <code>slim_test</code> test which becomes noisy. The test used to be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">_this</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">],</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span>\n  <span class=\"bp\">·</span> <span class=\"n\">slim_check</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">randomSeed</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"mi\">257</span><span class=\"o\">,</span> <span class=\"n\">quiet</span> <span class=\"o\">:=</span> <span class=\"n\">true</span> <span class=\"o\">})</span>\n    <span class=\"c1\">-- success</span>\n  <span class=\"n\">trivial</span>\n</code></pre></div>\n<p>where <code>slim_check</code> doesn't find any counterexample to the <code>have</code>, so it succeeds with <code>admit</code>.<br>\nIt is now </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">_this</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">],</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">slim_check</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">randomSeed</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"mi\">257</span><span class=\"o\">,</span> <span class=\"n\">quiet</span> <span class=\"o\">:=</span> <span class=\"n\">true</span> <span class=\"o\">})</span>\n    <span class=\"c1\">-- success</span>\n  <span class=\"n\">trivial</span>\n</code></pre></div>\n<p>The first version is not noisy (i.e., the <code>example</code> does not mention that <code>sorry</code> is used), the second one is noisy, and I don't know why. What would be the correct way to write the test to make it not noisy with the second spelling?</p>",
        "id": 421988885,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1708156980
    },
    {
        "content": "<p>Imports are</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.SlimCheck</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.SuccessIfFailWithMsg</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finsupp.Notation</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Testing.SlimCheck.Functions</span>\n</code></pre></div>",
        "id": 421989328,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1708157224
    },
    {
        "content": "<p>Is the sorry coming from an auxiliary declaration?</p>",
        "id": 421997797,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708163003
    },
    {
        "content": "<p>No, the <code>sorry</code> is coming from <code>slim_check</code>: when it doesn't find a counterexample upon 100 iterations, it accepts the goal with a <code>sorry</code>. So it's normal that the test is noisy, and surprising that the first version wasn't.</p>",
        "id": 421998718,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1708163943
    },
    {
        "content": "<p>What I mean is, is the <code>by</code> generating an auxiliary declaration which emits the <code>sorry</code> warning?</p>",
        "id": 422006084,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708171204
    },
    {
        "content": "<p>In the original presumably the unused have is eliminated so no warning is generated</p>",
        "id": 422006122,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708171226
    },
    {
        "content": "<p>It seems that new-style <code>have</code>s are not eliminated if unused:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.SlimCheck</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.SuccessIfFailWithMsg</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finsupp.Notation</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Testing.SlimCheck.Functions</span>\n\n<span class=\"n\">whatsnew</span> <span class=\"k\">in</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">_this</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">],</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span>\n  <span class=\"bp\">·</span> <span class=\"n\">slim_check</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">randomSeed</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"mi\">257</span><span class=\"o\">,</span> <span class=\"n\">quiet</span> <span class=\"o\">:=</span> <span class=\"n\">true</span> <span class=\"o\">})</span>\n    <span class=\"c1\">-- success</span>\n  <span class=\"n\">trivial</span>\n\n<span class=\"n\">whatsnew</span> <span class=\"k\">in</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">_this</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">],</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">slim_check</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">randomSeed</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"mi\">257</span><span class=\"o\">,</span> <span class=\"n\">quiet</span> <span class=\"o\">:=</span> <span class=\"n\">true</span> <span class=\"o\">})</span>\n    <span class=\"c1\">-- success</span>\n  <span class=\"n\">trivial</span>\n</code></pre></div>",
        "id": 422006235,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708171323
    }
]