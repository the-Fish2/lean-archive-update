[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/10910\">#10910</a> goes through all the diamond checks and adds <code>with_reducible_and_instances</code> if possible or a mention of issue <a href=\"https://github.com/leanprover-community/mathlib4/pull/10906\">#10906</a> if not</p>",
        "id": 423121388,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708739974
    },
    {
        "content": "<p>The good news is that all the ones that failed are localized to <code>Algebra</code> (if I remember correctly)</p>",
        "id": 423121536,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708740065
    },
    {
        "content": "<p>It's not good news if you're interested in algebra :-)</p>",
        "id": 423181876,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708789469
    },
    {
        "content": "<p>Well now we have a <code>SMul</code> too</p>",
        "id": 423197345,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708802650
    },
    {
        "content": "<p>Which <code>SMul</code> instance?</p>",
        "id": 423209944,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708814679
    },
    {
        "content": "<p>(Thanks for updating these tests!)</p>",
        "id": 423209953,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708814695
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span>  <span class=\"n\">Polynomial.hasSMulPi'</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">Polynomial.hasSMulPi</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">â†’</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]))</span>  <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 423277890,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708881436
    }
]