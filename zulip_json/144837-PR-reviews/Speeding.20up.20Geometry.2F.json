[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/13454\">#13454</a>, <a href=\"https://github.com/leanprover-community/mathlib4/pull/13456\">#13456</a>, <a href=\"https://github.com/leanprover-community/mathlib4/pull/13458\">#13458</a>, <a href=\"https://github.com/leanprover-community/mathlib4/pull/13459\">#13459</a> and <a href=\"https://github.com/leanprover-community/mathlib4/pull/13497\">#13497</a> each apply a few presumably-standard tricks to speed up the files in <code>Geometry/Manifolds</code>. Review is welcome.<br>\nOne particular question: When making these improvements, I commented these declarations (and also ones which I could not speed up, though I wanted to): is some form of these (if any) worth preserving? I'll happily take these out if desired.</p>",
        "id": 442527188,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1717506899
    },
    {
        "content": "<p>Thanks Michael. <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> did you see the sphere instance file in particular? I think it is a serious issue that those calculation-heavy file are so slow or so ugly depending on how much automation we use.</p>",
        "id": 442586984,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1717522742
    },
    {
        "content": "<p>There are also lots of short-cut instances that hide issues we should probably work on. <span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span> did you see that?</p>",
        "id": 442587195,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1717522807
    },
    {
        "content": "<p>Michael, could you make sure to create issues and clear annotations in the Lean code referring to those issues?</p>",
        "id": 442587492,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1717522898
    },
    {
        "content": "<p>I am a bit sad to see this (especially since the sphere file already got somewhat de-automated in the port).  Is there a consensus that speedup is an intrinsic good?   I think that there is real content conveyed by the statement that \"this problem can be solved by <code>simp</code> with the standard simp-set\" and this is lost when a <code>simp</code> is squeezed.</p>\n<p>I'd also flag the <code>field_simp</code>s and the <code>convert .. using 1</code>s in particular -- I don't really understand why these should be slow, we should have fast tactics for these tasks!</p>",
        "id": 442657973,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1717546177
    },
    {
        "content": "<p>I think \"field_simp is slow\" is a known phenomenon but as far as I know nobody is working on it, even though we know some ways to speed it up (eg \"don't just multiply by the product of all terms occurring to the right of a <code>/</code> sign, especially if several of them are powers or multiples of other ones\")</p>",
        "id": 442696392,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717564200
    },
    {
        "content": "<p>I don't think it's even what <code>field_simp</code> is doing that is bad, it's the implementation that is bad. It is doing bad things with the simp discharger.</p>",
        "id": 442696536,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1717564294
    },
    {
        "content": "<p>Thanks for the comments! Let me respond to a few points:<br>\nFirst of all: I agree that ideally, adding short-cut instances, squeezing simps or avoid <code>field_simp</code> should not be necessary. I would also prefer living in a world where none of these were needed. That said, particularly <code>Sphere</code> and <code>ContDiff/NormedSpace</code> are really slow: that's beyond the point at which I can work on them nicely. I don't think this is a satisfactory state of affairs. I consider a temporary improvement which can be reverted once tactics have improved worth it.</p>\n<p>I will happily file tracking issues for all these problems: slow nlinarith, slow field_simps and also the short-cut instances. (These are not close to all, by the way. There are enough remaining issues to be debugged :-))</p>",
        "id": 442762985,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1717587738
    },
    {
        "content": "<p>For field_simp in particular: the root fix is improving this tactic! (In fact, I was wondering how much effort this would be, and if I have a moment in the summer to work on this.) When this happens, my band-aid fixes should be taken out again.<br>\nIn the mean-time, I personally think we should rather save the CI (and/or local development) time from not taking <em>ages</em> for a slow field_simp call.</p>",
        "id": 442763034,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1717587752
    },
    {
        "content": "<p>I was wondering: would using <code>simp? says</code> for all the changes help? At least, this documents the intent (which I agree is nice to preserve).</p>",
        "id": 442763155,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1717587790
    },
    {
        "content": "<p>If I'm not mistaken, the <code>simp? says</code> syntax will be as slow as the original <code>simp</code>, so this would not help with speeding up things. I would think a comment to the effect \"<code>simp [minimal set of lemmas]</code> can do this, but is slow\" at the relevant points would allow to revert to the un-squeezed version whenever desired.</p>",
        "id": 442763891,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1717587979
    },
    {
        "content": "<p><code>simp? says</code> is only slow in CI, but not locally. <code>tac1 says tac2</code> will run <code>tac2</code> locally, but in CI it will run <code>tac1</code> and check that it prints <code>Try this: tac2</code>.</p>",
        "id": 442764440,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1717588138
    },
    {
        "content": "<p>So it's OK when working on a file, but misses the goal of speeding up CI.</p>",
        "id": 442767840,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1717589070
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"634338\">Michael Rothgang</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/Speeding.20up.20Geometry.2F/near/442762985\">said</a>:</p>\n<blockquote>\n<p>That said, particularly <code>Sphere</code> and <code>ContDiff/NormedSpace</code> are really slow: that's beyond the point at which I can work on them nicely. I don't think this is a satisfactory state of affairs.</p>\n</blockquote>\n<p>Did you test the <code>bump/v4.9.0</code> branch? <a href=\"https://github.com/leanprover/lean4/pull/3636\">lean4#3636</a> might help, and 4.9.0-rc1 will probably be released in a few days.</p>",
        "id": 442777698,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1717591790
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"325367\">Mauricio Collares</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/Speeding.20up.20Geometry.2F/near/442777698\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"634338\">Michael Rothgang</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/Speeding.20up.20Geometry.2F/near/442762985\">said</a>:</p>\n<blockquote>\n<p>That said, particularly <code>Sphere</code> and <code>ContDiff/NormedSpace</code> are really slow: that's beyond the point at which I can work on them nicely. I don't think this is a satisfactory state of affairs.</p>\n</blockquote>\n<p>Did you test the <code>bump/v4.9.0</code> branch? <a href=\"https://github.com/leanprover/lean4/pull/3636\">lean4#3636</a> might help, and 4.9.0-rc1 will probably be released in a few days.</p>\n</blockquote>\n<p>Not yet - I'll do so. Thanks for the pointer!</p>",
        "id": 442784183,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1717593346
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/Speeding.20up.20Geometry.2F/near/442587195\">said</a>:</p>\n<blockquote>\n<p>There are also lots of short-cut instances that hide issues we should probably work on. <span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> did you see that?</p>\n</blockquote>\n<p>Can someone point to a precise line and I can try to take a look?</p>",
        "id": 444280200,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1718209810
    },
    {
        "content": "<p>I guess the diff view in <a href=\"https://github.com/leanprover-community/mathlib4/pull/13458\">#13458</a> is a good start. Another option is line 81 in <code>Instances/Sphere</code> in <a href=\"https://github.com/leanprover-community/mathlib4/pull/13456\">#13456</a>. (I cannot seem to permalink these, sorry.)<br>\nAlso: thanks a lot for taking a look!</p>",
        "id": 444293729,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1718213892
    },
    {
        "content": "<p>The first <code>local instance</code> in <a href=\"https://github.com/leanprover-community/mathlib4/pull/13458\">#13458</a> is  almost surely tripping <code>synthPendingDepth</code></p>",
        "id": 444296767,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1718214853
    },
    {
        "content": "<p>Maybe the second also</p>",
        "id": 444296799,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1718214867
    },
    {
        "content": "<p>For <a href=\"https://github.com/leanprover-community/mathlib4/pull/13456\">#13456</a>, making <code>Submodule.span</code> return a type a'la <a href=\"https://github.com/leanprover-community/mathlib4/pull/12386\">#12386</a> might help</p>",
        "id": 444298993,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1718215535
    }
]