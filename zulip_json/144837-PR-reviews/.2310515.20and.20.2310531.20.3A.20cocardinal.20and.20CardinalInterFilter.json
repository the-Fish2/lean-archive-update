[
    {
        "content": "<p>Hi, could someone take a peek at these two PRs? They introduce <br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/10515\">#10515</a>: a constructor for filters from set-properties that are preserved under certain unions/intersections and a corresponding family of new filters. This extends <code>cofinite</code> and introduces <code>cocountable</code>. <br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/10531\">#10531</a>: <code>CardinalInterFilter</code>, a new property for filters respectively, which extends <code>CountableInterFilter</code>. </p>\n<p>I'd recommend starting with <a href=\"https://github.com/leanprover-community/mathlib4/pull/10531\">#10531</a>, that one should probably be leading in its definitions as it will be the key ingredient in defining K-Lindelöf sets and spaces in the future. The former is an example of such CardinalInterFilters. I'm open to any suggestions!</p>",
        "id": 422786811,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1708597491
    },
    {
        "content": "<p>Can someone take a look at these two at some point? (Especially <a href=\"https://github.com/leanprover-community/mathlib4/pull/10531\">#10531</a>). I'm curious if this is the approach that I should take before formalising K-Lindelöf sets and spaces!</p>",
        "id": 423810044,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1709124360
    },
    {
        "content": "<p>I'm bringing this one up again, would be great to know if this is the way to go or another approach is preferred. I could also define K-Lindelöf sets and spaces immediately, but that'd make the PR quite large!</p>",
        "id": 428332420,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1711114978
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"673728\">@Josha Dekker</span> I just left some review. Many apologies for making you wait so long.</p>",
        "id": 430043627,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1711624391
    },
    {
        "content": "<p>Thank you, I will take a look at it this weekend! With respect to writing CountableInterFilter as a CardinalInterFilter: this was exactly my thought, but as I can see that one being a bit more controversial (e.g. w.r.t the imports of ordinals), I thought I could better put that one in a separate PR after this one merges, as that one might benefit from some broader discussion.</p>",
        "id": 430051895,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1711627224
    },
    {
        "content": "<p>Changes submitted!</p>",
        "id": 430090878,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1711638873
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2310515.20and.20.2310531.20.3A.20cocardinal.20and.20CardinalInterFilter/near/430043627\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"673728\">Josha Dekker</span> I just left some review. Many apologies for making you wait so long.</p>\n</blockquote>\n<p>Thank you! No worries!</p>",
        "id": 430092200,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1711639222
    },
    {
        "content": "<p>Thanks for the quick follow-up <span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span>, I'm checking if it builds with the new changes (should be no problem), then I'll <code>bors r+</code> it. </p>\n<p>Can I have your thoughts on how to follow this through? The way I see it, there are still several results from <code>CountableInterFilter</code> that should have a suitable generalisation from <code>CardinalInterFilter</code> (I literally stopped after a while to keep the PR small). I would like to add the following to Mathlib; my suggested order is as listed, but I'm very open to feedback.</p>\n<ol>\n<li>Generalise the relevant results of <code>CountableInterFilter</code> to <code>CardinalInterFilter</code>. </li>\n<li>Define k-Lindelöf spaces (also called k-compact) as exactly those with a certain CardinalInterFilter property. Lindelöf spaces will then be refactored as a special case. I think the way I set up Lindelöf spaces in the first place should make it very easy to obtain all the analogous results for k-Lindelöf spaces, but I might need some results that would be added under 1. Although compact spaces could be refactored as another special case of this, I'm not sure if that is desirable (again with the same fact in mind that we may not want to import all the order-theory at this point). </li>\n<li>Define Lindelöf degree/number of a space (smallest cardinal such that every open cover has a subcover of size at most this cardinal)</li>\n</ol>\n<p>Also, I think it would be nice to have <code>cocountable</code> and <code>cocardinal</code> filters as prototypical examples of filters with the CardinalInterFilter property, which I defined in <a href=\"https://github.com/leanprover-community/mathlib4/pull/10515\">#10515</a>. Once I've completed point (1), I'll update that PR and check that these filters have the correct properties, so I'll remove the 'awaiting review' label from that one for now.</p>",
        "id": 430128409,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1711646992
    },
    {
        "content": "<p>This plan seems reasonable to me, and we can take it one step at a time.</p>\n<p>After <a href=\"https://github.com/leanprover-community/mathlib4/pull/10531\">#10531</a> is in master (or maybe even after the docs have been refreshed) I also encourage you to start a new thread in <a class=\"stream\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4\">#mathlib4</a> highlighting that we now have the two typeclasses <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CountableInterFilter#doc\">docs#CountableInterFilter</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CardinalInterFilter#doc\">docs#CardinalInterFilter</a> . The goal would be  to see if there are any other opinions on the cost / benefit of more definitions+API vs heavier imports for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CountableInterFilter#doc\">docs#CountableInterFilter</a>.</p>",
        "id": 430131193,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1711647782
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2310515.20and.20.2310531.20.3A.20cocardinal.20and.20CardinalInterFilter/near/430131193\">said</a>:</p>\n<blockquote>\n<p>This plan seems reasonable to me, and we can take it one step at a time.</p>\n<p>After <a href=\"https://github.com/leanprover-community/mathlib4/pull/10531\">#10531</a> is in master (or maybe even after the docs have been refreshed) I also encourage you to start a new thread in <a class=\"stream\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4\">#mathlib4</a> highlighting that we now have the two typeclasses <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CountableInterFilter#doc\">docs#CountableInterFilter</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CardinalInterFilter#doc\">docs#CardinalInterFilter</a> . The goal would be  to see if there are any other opinions on the cost / benefit of more definitions+API vs heavier imports for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CountableInterFilter#doc\">docs#CountableInterFilter</a>.</p>\n</blockquote>\n<p>Yes, that sounds like a very good idea, thank you! I guess this would only happen once 1 has been completed, so I will start working on that soon!</p>",
        "id": 430132626,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1711648203
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span>, I think that <a href=\"https://github.com/leanprover-community/mathlib4/pull/11758\">#11758</a> contains all of point 1 now, I'm juist waiting for it to build!</p>",
        "id": 430250070,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1711715913
    },
    {
        "content": "<p><del>I've closed <a href=\"https://github.com/leanprover-community/mathlib4/pull/10515\">#10515</a> and openend a new PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/11774\">#11774</a>, which depends on <a href=\"https://github.com/leanprover-community/mathlib4/pull/11758\">#11758</a> and defines the cocardinal and cocountable filters again, but making better use of the results in there. I'm not sure how much API we'll want for these, as I'm not sure what the main usage would be other than showing they are filters that have the <code>CardinalInterFilter</code> property.</del></p>",
        "id": 430275725,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1711727186
    },
    {
        "content": "<p>As <a href=\"https://github.com/leanprover-community/mathlib4/pull/11758\">#11758</a> has merged, <a href=\"https://github.com/leanprover-community/mathlib4/pull/11774\">#11774</a> is now ready for review. It defines some basic API for <code>cocardinal</code> filters (and derives <code>cocountable</code> filters as a special case). These are filters that are naturally <code>CardinalInterFilter</code>s. The API closely follows that of the first part of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=cofinite#doc\">docs#cofinite</a>, so I hope that reviewing will be easy!</p>",
        "id": 431232893,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1712211818
    }
]