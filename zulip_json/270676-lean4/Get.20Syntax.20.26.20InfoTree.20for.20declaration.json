[
    {
        "content": "<p>Can I obtain the original <code>Syntax</code> and the <code>InfoTree</code> with all the elaborated goodies for a given declaration? I do not want to delaborate an expression, as I might wrap some expressions in marker syntax to fine-tune how the generated typst will look like (e.g. text color).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"#typst\"</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"c1\">-- get `Syntax` and infoTree for `n`</span>\n  <span class=\"c1\">-- generate some typst based on that</span>\n</code></pre></div>",
        "id": 437680742,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1715184121
    },
    {
        "content": "<p>What should it return for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=add_right_comm#src\">src#add_right_comm</a>?</p>",
        "id": 437700606,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715190531
    },
    {
        "content": "<p>I have not thought that far... I guess just throw an error is fine, or default to the delaborated version? I was going to use this for making a presentation.</p>",
        "id": 437700840,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1715190620
    },
    {
        "content": "<p>The idea is to have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"n\">color</span> <span class=\"o\">:=</span> <span class=\"s2\">\"red\"</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"s2\">\"green\"</span>\n<span class=\"n\">macro</span> <span class=\"s2\">\"#text\"</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">color</span> <span class=\"s2\">\")\"</span> <span class=\"s2\">\"[\"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">t</span>\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"mi\">5</span> <span class=\"bp\">+</span> <span class=\"bp\">#</span><span class=\"n\">text</span><span class=\"o\">(</span><span class=\"n\">green</span><span class=\"o\">)[</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>and then generate typst from that.</p>",
        "id": 437708341,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1715193329
    },
    {
        "content": "<p>You might find <code>#typst def</code> easier to work with, if you're only applying this to code that is yours</p>",
        "id": 437728207,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715201515
    },
    {
        "content": "<p>That way you get the <code>stx:command</code> directly as an argument to your elaborator</p>",
        "id": 437728301,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715201538
    },
    {
        "content": "<p>Yeah that is what I have settled on so far. However, then I don't have access to the InfoTree with the elaborated goodies, so I can't generate typst based on semantic information. I can elaborate certain expressions myself via <code>elabTerm</code>, yes, but that feels very hacky.</p>",
        "id": 437790333,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1715245776
    },
    {
        "content": "<p>I know the information I need exists somewhere, since that is how the language server works. You work in the <code>RequestM</code> monad which has the syntactic document, Snapshots between each command, InfoTree, and so on.</p>",
        "id": 437790506,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1715245889
    },
    {
        "content": "<p>And I know you add <code>addTermInfo</code> to the <code>InfoTree</code> during elaboration, but I can't figure out how to <em>get</em> stuff from the <code>InfoTree</code>.</p>",
        "id": 437790819,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1715246076
    },
    {
        "content": "<p>You can't (?) do this from within the document you are trying to extract information from. Instead you need to run a source document (or generally, text) through a frontend.</p>",
        "id": 437793684,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715247875
    },
    {
        "content": "<p>e.g. <a href=\"https://github.com/semorrison/lean-training-data/blob/master/TrainingData/Frontend.lean\">https://github.com/semorrison/lean-training-data/blob/master/TrainingData/Frontend.lean</a></p>",
        "id": 437793728,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715247906
    },
    {
        "content": "<p>I can find you some other examples later if you need them.</p>",
        "id": 437793747,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715247916
    },
    {
        "content": "<p>Here's how to get the info trees from within a command. I probably didn't need to reset info trees and restore them, but this guarantees that we're only looking at the info trees from elaborating the inner command.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span> <span class=\"k\">in</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"#info \"</span> <span class=\"n\">c</span><span class=\"o\">:</span><span class=\"n\">command</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">initInfoTrees</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">getResetInfoTrees</span>\n  <span class=\"n\">try</span>\n    <span class=\"n\">elabCommand</span> <span class=\"n\">c</span>\n    <span class=\"k\">let</span> <span class=\"n\">trees</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">getInfoTrees</span>\n    <span class=\"n\">for</span> <span class=\"n\">tree</span> <span class=\"k\">in</span> <span class=\"n\">trees</span> <span class=\"k\">do</span>\n      <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{‚Üê tree.format}\"</span>\n  <span class=\"n\">finally</span>\n    <span class=\"n\">modify</span> <span class=\"k\">fun</span> <span class=\"n\">st</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"o\">{</span> <span class=\"n\">st</span> <span class=\"k\">with</span> <span class=\"n\">infoState</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">st.infoState</span> <span class=\"k\">with</span> <span class=\"n\">trees</span> <span class=\"o\">:=</span> <span class=\"n\">initInfoTrees</span> <span class=\"bp\">++</span> <span class=\"n\">st.infoState.trees</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n\n\n<span class=\"bp\">#</span><span class=\"n\">info</span>\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">‚Ä¢ command @ ‚ü®36, 0‚ü©-‚ü®36, 32‚ü© @ Lean.Elab.Command.elabDeclaration</span>\n<span class=\"cm\">  ‚Ä¢ ‚Ñï : Type @ ‚ü®36, 13‚ü©-‚ü®36, 16‚ü© @ Lean.Elab.Term.elabIdent</span>\n<span class=\"cm\">    ‚Ä¢ [.] Nat : some Sort.{?_uniq.33235} @ ‚ü®36, 13‚ü©-‚ü®36, 16‚ü©</span>\n<span class=\"cm\">    ‚Ä¢ ‚Ñï : Type @ ‚ü®36, 13‚ü©-‚ü®36, 16‚ü©</span>\n<span class=\"cm\">  ‚Ä¢ x (isBinder := true) : ‚Ñï @ ‚ü®36, 7‚ü©-‚ü®36, 8‚ü©</span>\n<span class=\"cm\">  ‚Ä¢ ‚Ñï : Type @ ‚ü®36, 13‚ü©-‚ü®36, 16‚ü© @ Lean.Elab.Term.elabIdent</span>\n<span class=\"cm\">    ‚Ä¢ [.] Nat : some Sort.{?_uniq.33237} @ ‚ü®36, 13‚ü©-‚ü®36, 16‚ü©</span>\n<span class=\"cm\">    ‚Ä¢ ‚Ñï : Type @ ‚ü®36, 13‚ü©-‚ü®36, 16‚ü©</span>\n<span class=\"cm\">  ‚Ä¢ y (isBinder := true) : ‚Ñï @ ‚ü®36, 9‚ü©-‚ü®36, 10‚ü©</span>\n<span class=\"cm\">  ‚Ä¢ ‚Ñï : Type @ ‚ü®36, 20‚ü©-‚ü®36, 23‚ü© @ Lean.Elab.Term.elabIdent</span>\n<span class=\"cm\">    ‚Ä¢ [.] Nat : some Sort.{?_uniq.33239} @ ‚ü®36, 20‚ü©-‚ü®36, 23‚ü©</span>\n<span class=\"cm\">    ‚Ä¢ ‚Ñï : Type @ ‚ü®36, 20‚ü©-‚ü®36, 23‚ü©</span>\n<span class=\"cm\">  ‚Ä¢ f (isBinder := true) : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï @ ‚ü®36, 4‚ü©-‚ü®36, 5‚ü©</span>\n<span class=\"cm\">  ‚Ä¢ x (isBinder := true) : ‚Ñï @ ‚ü®36, 7‚ü©-‚ü®36, 8‚ü©</span>\n<span class=\"cm\">  ‚Ä¢ y (isBinder := true) : ‚Ñï @ ‚ü®36, 9‚ü©-‚ü®36, 10‚ü©</span>\n<span class=\"cm\">  ‚Ä¢ x + y : ‚Ñï @ ‚ü®36, 27‚ü©-‚ü®36, 32‚ü© @ ¬´_aux_Init_Notation___macroRules_term_+__2¬ª</span>\n<span class=\"cm\">    ‚Ä¢ Macro expansion</span>\n<span class=\"cm\">      x + y</span>\n<span class=\"cm\">      ===&gt;</span>\n<span class=\"cm\">      binop% HAdd.hAdd‚úù x y</span>\n<span class=\"cm\">      ‚Ä¢ x + y : ‚Ñï @ ‚ü®36, 27‚ü©‚Ä†-‚ü®36, 32‚ü©‚Ä† @ Lean.Elab.Term.Op.elabBinOp</span>\n<span class=\"cm\">        ‚Ä¢ x + y : ‚Ñï @ ‚ü®36, 27‚ü©‚Ä†-‚ü®36, 32‚ü©‚Ä†</span>\n<span class=\"cm\">          ‚Ä¢ [.] HAdd.hAdd‚úù : none @ ‚ü®36, 27‚ü©‚Ä†-‚ü®36, 32‚ü©‚Ä†</span>\n<span class=\"cm\">          ‚Ä¢ x : ‚Ñï @ ‚ü®36, 27‚ü©-‚ü®36, 28‚ü© @ Lean.Elab.Term.elabIdent</span>\n<span class=\"cm\">            ‚Ä¢ [.] x : none @ ‚ü®36, 27‚ü©-‚ü®36, 28‚ü©</span>\n<span class=\"cm\">            ‚Ä¢ x : ‚Ñï @ ‚ü®36, 27‚ü©-‚ü®36, 28‚ü©</span>\n<span class=\"cm\">          ‚Ä¢ y : ‚Ñï @ ‚ü®36, 31‚ü©-‚ü®36, 32‚ü© @ Lean.Elab.Term.elabIdent</span>\n<span class=\"cm\">            ‚Ä¢ [.] y : none @ ‚ü®36, 31‚ü©-‚ü®36, 32‚ü©</span>\n<span class=\"cm\">            ‚Ä¢ y : ‚Ñï @ ‚ü®36, 31‚ü©-‚ü®36, 32‚ü©</span>\n<span class=\"cm\">  ‚Ä¢ f (isBinder := true) : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï @ ‚ü®36, 4‚ü©-‚ü®36, 5‚ü©</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 437844079,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715270483
    },
    {
        "content": "<p>(By the way, <code>set_option trace.Elab.info true</code> causes infotrees to be dumped in this format. That's not useful for programming ‚Äî instead you want to work with the info tree objects directly ‚Äî but I thought I'd mention it.)</p>",
        "id": 437844486,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715270608
    },
    {
        "content": "<p>Oh, amazing, this is ideal!</p>",
        "id": 437844584,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1715270629
    },
    {
        "content": "<p>And that is also very useful to know. Thank you tons!</p>",
        "id": 437844719,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1715270648
    },
    {
        "content": "<p>The <code>Frontend</code> approach is also very useful to know! Sounds like what I'm trying to do is way more doable than I thought.</p>",
        "id": 437845300,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1715270874
    }
]