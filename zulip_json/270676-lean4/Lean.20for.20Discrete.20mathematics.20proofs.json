[
    {
        "content": "<p>Hi everyone, </p>\n<p>I am new to Lean and need help formalizing discrete math (intro) proofs. I use Lean as a part of my project, but I don't have much time to master the language. I would like to know what guides, libraries (with already formalized proofs) or parts of the Lean I need to use to be able to formalize very specific stuff like: sum of two odd is even; there is infinite amount of primes, product of odd is odd and so on..</p>\n<p>Could someone help me with that?</p>",
        "id": 425466788,
        "sender_full_name": "Anthony Chapov",
        "timestamp": 1709885131
    },
    {
        "content": "<p>Welcome Anthony!</p>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Odd.odd_add#doc\">docs#Odd.odd_add</a><br>\n<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.exists_infinite_primes#doc\">docs#Nat.exists_infinite_primes</a> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n<p>To find these, I typed a bunch of relevant keywords in the search bar at the top. I've seen other people use \"Loogle\" or \"Moogle\" which are more sophisticated versions of this.</p>",
        "id": 425486992,
        "sender_full_name": "Chris Wong",
        "timestamp": 1709892691
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 425487084,
        "sender_full_name": "Chris Wong",
        "timestamp": 1709892725
    },
    {
        "content": "<p>BTW, are you looking into discrete math in general, or only number theory? I think graphs, automata, and matroids all have significant gaps.</p>",
        "id": 425489271,
        "sender_full_name": "Chris Wong",
        "timestamp": 1709893553
    },
    {
        "content": "<p>Yet another approach is asking Lean itself:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">Odd</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">Odd</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span><span class=\"bp\">?</span>\n<span class=\"c1\">-- Try this: exact Odd.add_odd ha hb</span>\n</code></pre></div>",
        "id": 425489551,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1709893678
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"294142\">Chris Wong</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean.20for.20Discrete.20mathematics.20proofs/near/425489271\">писал/а</a>:</p>\n<blockquote>\n<p>BTW, are you looking into discrete math in general, or only number theory? I think graphs, automata, and matroids all have significant gaps.</p>\n</blockquote>\n<p>Hey thank you for reply! I am working on translating informal proofs into formal proofs and look for proofs used in undergraduate discrete math courses. The ones that ask you to prove very basic stuff about primes, odds, evens, square roots of 2 is irrational, rational numbers and so on. I guess more like a properties of different numbers rather than Boolean algebra or graphs. </p>\n<p>Because I try to translate the informal proofs (What student would write on paper) into formal proofs, I cant really use the simplified and implicit steps and need proofs in that form: theorem even_sum_even: ∀ x y, even x -&gt; even y -&gt; even (x + y) := by<br>\n  intros x y h1 h2<br>\n  unfold even at h1<br>\n  unfold even at h2<br>\n  cases h1 with<br>\n  | intro k1 hk1 =&gt;<br>\n    cases h2 with<br>\n    | intro k2 hk2 =&gt;<br>\n      exists (k1 + k2)<br>\n      rw [hk1]<br>\n      rw [hk2]<br>\n      linarith</p>\n<p>Instead of this  (because the one below is not as explicit as the one above)</p>\n<p>theorem Odd.add_odd : Odd m → Odd n → Even (m + n) := by<br>\n  rintro ⟨m, rfl⟩ ⟨n, rfl⟩<br>\n  refine' ⟨n + m + 1, _⟩<br>\n  rw [two_mul, two_mul]<br>\n  ac_rfl\"</p>",
        "id": 425626588,
        "sender_full_name": "Anthony Chapov",
        "timestamp": 1709943246
    }
]