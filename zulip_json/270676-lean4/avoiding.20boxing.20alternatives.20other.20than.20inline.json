[
    {
        "content": "<p>Hi. I am testing Lean4 performance as a general purpose programming language for scientific computing as Lean4 itself intrigues me along with the ability to prove things about code, but I'm also kind of a performance nut.</p>\n<p>Can anything to be done, that doesn't create an abomination, to increase the performance of this code? I am a beginner in Lean, so I feel I am likely missing something. </p>\n<p>(The code approximates pi via Monte Carlo simulation using Xoshitor256+.) </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">inline</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">calcPi</span> <span class=\"o\">(</span><span class=\"n\">hits</span> <span class=\"n\">trials</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Float</span> <span class=\"o\">:=</span>\n  <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">hits.toFloat</span> <span class=\"bp\">/</span> <span class=\"n\">trials.toFloat</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Xoshiro256plus</span> <span class=\"n\">where</span>\n  <span class=\"n\">s0</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span>\n  <span class=\"n\">s1</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span>\n  <span class=\"n\">s2</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span>\n  <span class=\"n\">s3</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span>\n\n\n<span class=\"kd\">@[</span><span class=\"n\">inline</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">rotl</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">&lt;&lt;&lt;</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">|||</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"o\">(</span><span class=\"mi\">64</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Xoshiro256plus.next</span> <span class=\"o\">(</span><span class=\"n\">state</span> <span class=\"o\">:</span> <span class=\"n\">Xoshiro256plus</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span> <span class=\"bp\">×</span> <span class=\"n\">Xoshiro256plus</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">state.s1</span> <span class=\"bp\">&lt;&lt;&lt;</span> <span class=\"mi\">17</span>\n  <span class=\"k\">let</span> <span class=\"n\">s2'</span> <span class=\"o\">:=</span> <span class=\"n\">state.s2</span> <span class=\"bp\">^^^</span> <span class=\"n\">state.s0</span>\n  <span class=\"k\">let</span> <span class=\"n\">s3'</span> <span class=\"o\">:=</span> <span class=\"n\">state.s3</span> <span class=\"bp\">^^^</span> <span class=\"n\">state.s1</span>\n  <span class=\"k\">let</span> <span class=\"n\">s1'</span> <span class=\"o\">:=</span> <span class=\"n\">state.s1</span> <span class=\"bp\">^^^</span> <span class=\"n\">state.s2</span>\n  <span class=\"k\">let</span> <span class=\"n\">s0'</span> <span class=\"o\">:=</span> <span class=\"n\">state.s0</span> <span class=\"bp\">^^^</span> <span class=\"n\">state.s3</span>\n  <span class=\"k\">let</span> <span class=\"n\">state'</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">s0</span> <span class=\"o\">:=</span> <span class=\"n\">s0'</span><span class=\"o\">,</span>\n    <span class=\"n\">s1</span> <span class=\"o\">:=</span> <span class=\"n\">s1'</span><span class=\"o\">,</span>\n    <span class=\"n\">s2</span> <span class=\"o\">:=</span> <span class=\"n\">s2'</span> <span class=\"bp\">^^^</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n    <span class=\"n\">s3</span> <span class=\"o\">:=</span> <span class=\"n\">rotl</span> <span class=\"n\">s3'</span> <span class=\"mi\">45</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"o\">(</span><span class=\"n\">state.s0</span> <span class=\"bp\">+</span> <span class=\"n\">state.s3</span><span class=\"o\">,</span> <span class=\"n\">state'</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">seededXoshiro256plus</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Xoshiro256plus</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">s0</span> <span class=\"o\">:=</span> <span class=\"n\">ByteArray.toUInt64LE</span><span class=\"bp\">!</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">IO.getRandomBytes</span> <span class=\"mi\">8</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">s1</span> <span class=\"o\">:=</span> <span class=\"n\">ByteArray.toUInt64LE</span><span class=\"bp\">!</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">IO.getRandomBytes</span> <span class=\"mi\">8</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">s2</span> <span class=\"o\">:=</span> <span class=\"n\">ByteArray.toUInt64LE</span><span class=\"bp\">!</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">IO.getRandomBytes</span> <span class=\"mi\">8</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">s3</span> <span class=\"o\">:=</span> <span class=\"n\">ByteArray.toUInt64LE</span><span class=\"bp\">!</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">IO.getRandomBytes</span> <span class=\"mi\">8</span><span class=\"o\">)</span>\n  <span class=\"n\">pure</span> <span class=\"o\">{</span> <span class=\"n\">s0</span> <span class=\"o\">:=</span> <span class=\"n\">s0</span><span class=\"o\">,</span> <span class=\"n\">s1</span> <span class=\"o\">:=</span> <span class=\"n\">s1</span><span class=\"o\">,</span> <span class=\"n\">s2</span> <span class=\"o\">:=</span> <span class=\"n\">s2</span><span class=\"o\">,</span> <span class=\"n\">s3</span> <span class=\"o\">:=</span> <span class=\"n\">s3</span>  <span class=\"o\">}</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">inline</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">randFloat</span> <span class=\"o\">(</span><span class=\"n\">gen</span> <span class=\"o\">:</span> <span class=\"n\">Xoshiro256plus</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Float</span> <span class=\"bp\">×</span> <span class=\"n\">Xoshiro256plus</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">gen'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">inline</span> <span class=\"n\">gen.next</span>\n  <span class=\"k\">let</span> <span class=\"n\">x'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"mi\">11</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toFloat</span> <span class=\"bp\">/</span> <span class=\"o\">((</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">UInt64</span><span class=\"o\">)</span> <span class=\"bp\">&lt;&lt;&lt;</span> <span class=\"o\">(</span><span class=\"mi\">53</span><span class=\"o\">:</span><span class=\"n\">UInt64</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">toFloat</span>\n  <span class=\"o\">(</span><span class=\"n\">x'</span><span class=\"o\">,</span> <span class=\"n\">gen'</span><span class=\"o\">)</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">doHits</span> <span class=\"o\">(</span><span class=\"n\">gen</span> <span class=\"o\">:</span> <span class=\"n\">Xoshiro256plus</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">numTrials</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">numTrials</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">gen'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">randFloat</span> <span class=\"n\">gen</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">gen'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">randFloat</span> <span class=\"n\">gen'</span>\n    <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"n\">y</span> <span class=\"bp\">&lt;=</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n    <span class=\"k\">match</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">doHits</span> <span class=\"n\">gen'</span> <span class=\"o\">(</span><span class=\"n\">numTrials</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">doHits</span> <span class=\"n\">gen'</span> <span class=\"o\">(</span><span class=\"n\">numTrials</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"c1\">-- termination_by numTrials</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">gen</span> <span class=\"bp\">←</span> <span class=\"n\">seededXoshiro256plus</span>\n  <span class=\"k\">let</span> <span class=\"n\">trials</span> <span class=\"o\">:=</span> <span class=\"mi\">2000000</span>\n  <span class=\"k\">let</span> <span class=\"n\">hits</span> <span class=\"o\">:=</span> <span class=\"n\">doHits</span> <span class=\"n\">gen</span> <span class=\"n\">trials</span>\n  <span class=\"k\">let</span> <span class=\"n\">stdout</span> <span class=\"bp\">←</span> <span class=\"n\">IO.getStdout</span>\n  <span class=\"n\">stdout.putStrLn</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"pi is approx {calcPi hits trials}\"</span>\n</code></pre></div>\n<p>Notably, I had to inline  the call to <code>Xoshiro256plus.next</code> in <code>randFloat</code> to achieve code 2x <em>slower</em> than C++. That is impressive! </p>\n<p>But if <code>Xoshiro256plus.next</code> is not inlined then it is 10x <em>slower</em>. Granted, that is not really a good apples to apples comparison, since the C++ is aggressively inlined... but all that boxing and unboxing also really hurts. The issue may also be exacerbated by function call overhead since the C compiler is unlikely to inline calls to the huge functions generated by the Lean compiler.</p>\n<p>By the way, 10x <em>slower</em> is also still very impressive.</p>",
        "id": 430917552,
        "sender_full_name": "Jeff Packer",
        "timestamp": 1712118893
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"706542\">@Jeff Packer</span> To avoid inlining the whole of <code>Xoshiro256plus.next</code>, you could split the state advancement from the value generation like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Xoshiro256plus.nextState</span> <span class=\"o\">(</span><span class=\"n\">state</span> <span class=\"o\">:</span> <span class=\"n\">Xoshiro256plus</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Xoshiro256plus</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">state.s1</span> <span class=\"bp\">&lt;&lt;&lt;</span> <span class=\"mi\">17</span>\n  <span class=\"k\">let</span> <span class=\"n\">s2'</span> <span class=\"o\">:=</span> <span class=\"n\">state.s2</span> <span class=\"bp\">^^^</span> <span class=\"n\">state.s0</span>\n  <span class=\"k\">let</span> <span class=\"n\">s3'</span> <span class=\"o\">:=</span> <span class=\"n\">state.s3</span> <span class=\"bp\">^^^</span> <span class=\"n\">state.s1</span>\n  <span class=\"k\">let</span> <span class=\"n\">s1'</span> <span class=\"o\">:=</span> <span class=\"n\">state.s1</span> <span class=\"bp\">^^^</span> <span class=\"n\">state.s2</span>\n  <span class=\"k\">let</span> <span class=\"n\">s0'</span> <span class=\"o\">:=</span> <span class=\"n\">state.s0</span> <span class=\"bp\">^^^</span> <span class=\"n\">state.s3</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">s0</span> <span class=\"o\">:=</span> <span class=\"n\">s0'</span><span class=\"o\">,</span>\n    <span class=\"n\">s1</span> <span class=\"o\">:=</span> <span class=\"n\">s1'</span><span class=\"o\">,</span>\n    <span class=\"n\">s2</span> <span class=\"o\">:=</span> <span class=\"n\">s2'</span> <span class=\"bp\">^^^</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n    <span class=\"n\">s3</span> <span class=\"o\">:=</span> <span class=\"n\">rotl</span> <span class=\"n\">s3'</span> <span class=\"mi\">45</span>\n  <span class=\"o\">}</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">inline</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">Xoshiro256plus.next</span> <span class=\"o\">(</span><span class=\"n\">state</span> <span class=\"o\">:</span> <span class=\"n\">Xoshiro256plus</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span> <span class=\"bp\">×</span> <span class=\"n\">Xoshiro256plus</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">state.s0</span> <span class=\"bp\">+</span> <span class=\"n\">state.s3</span><span class=\"o\">,</span> <span class=\"n\">state.nextState</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This would avoid any <code>UInt64</code> boxing.</p>",
        "id": 431815991,
        "sender_full_name": "Mac Malone",
        "timestamp": 1712523589
    },
    {
        "content": "<p>Also, as an aside, my style for writing <code>Xoshiro256plus.nextState</code> would be:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Xoshiro256plus.nextState</span> <span class=\"o\">(</span><span class=\"n\">state</span> <span class=\"o\">:</span> <span class=\"n\">Xoshiro256plus</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Xoshiro256plus</span> <span class=\"n\">where</span>\n  <span class=\"n\">s0</span> <span class=\"o\">:=</span> <span class=\"n\">state.s0</span> <span class=\"bp\">^^^</span> <span class=\"n\">state.s3</span>\n  <span class=\"n\">s1</span> <span class=\"o\">:=</span> <span class=\"n\">state.s1</span> <span class=\"bp\">^^^</span> <span class=\"n\">state.s2</span>\n  <span class=\"n\">s2</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">state.s2</span> <span class=\"bp\">^^^</span> <span class=\"n\">state.s0</span><span class=\"o\">)</span> <span class=\"bp\">^^^</span> <span class=\"o\">(</span><span class=\"n\">state.s1</span> <span class=\"bp\">&lt;&lt;&lt;</span> <span class=\"mi\">17</span><span class=\"o\">)</span>\n  <span class=\"n\">s3</span> <span class=\"o\">:=</span> <span class=\"n\">rotl</span> <span class=\"o\">(</span><span class=\"n\">state.s3</span> <span class=\"bp\">^^^</span> <span class=\"n\">state.s1</span><span class=\"o\">)</span> <span class=\"mi\">45</span>\n</code></pre></div>",
        "id": 431816211,
        "sender_full_name": "Mac Malone",
        "timestamp": 1712523745
    }
]