[
    {
        "content": "<p>I want to use <a href=\"https://github.com/dwrensha/tryAtEachStep\">tryAtEachStep</a> to run <a href=\"https://github.com/lean-dojo/LeanCopilot\">LeanCopilot</a>'s <code>search_proof</code> tactic at every tactic step in a Lean file.</p>\n<p>When I attempt to do so, I get this error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">.</span><span class=\"n\">libc</span><span class=\"bp\">++</span><span class=\"n\">abi</span><span class=\"o\">:</span> <span class=\"n\">terminating</span> <span class=\"n\">due</span> <span class=\"n\">to</span> <span class=\"n\">uncaught</span> <span class=\"n\">exception</span> <span class=\"n\">of</span> <span class=\"n\">type</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">exception</span><span class=\"o\">:</span> <span class=\"n\">Could</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"n\">native</span> <span class=\"n\">implementation</span> <span class=\"n\">of</span> <span class=\"n\">external</span> <span class=\"n\">declaration</span> <span class=\"bp\">'</span><span class=\"n\">LeanCopilot.FFI.isGeneratorInitialized'</span> <span class=\"o\">(</span><span class=\"n\">symbols</span> <span class=\"bp\">'</span><span class=\"n\">l_LeanCopilot_FFI_isGeneratorInitialized___boxed'</span> <span class=\"n\">or</span> <span class=\"bp\">'</span><span class=\"n\">l_LeanCopilot_FFI_isGeneratorInitialized'</span><span class=\"o\">)</span><span class=\"bp\">.</span>\n<span class=\"n\">For</span> <span class=\"n\">declarations</span> <span class=\"k\">from</span> <span class=\"bp\">`</span><span class=\"n\">Init</span><span class=\"bp\">`</span> <span class=\"n\">or</span> <span class=\"bp\">`</span><span class=\"n\">Lean</span><span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"n\">you</span> <span class=\"n\">need</span> <span class=\"n\">to</span> <span class=\"n\">set</span> <span class=\"bp\">`</span><span class=\"n\">supportInterpreter</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"bp\">`</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">relevant</span> <span class=\"bp\">`</span><span class=\"n\">lean_exe</span><span class=\"bp\">`</span> <span class=\"n\">statement</span> <span class=\"k\">in</span> <span class=\"n\">your</span> <span class=\"bp\">`</span><span class=\"n\">lakefile.lean</span><span class=\"bp\">`.</span>\n</code></pre></div>\n<p>I believe that I'm already setting <code>supportInterpreted := true</code> in every place that I can.</p>\n<p><code>tryAtEachStep</code> works by calling <code>Frontend.processCommand</code> on each command in the input Lean file, to re-elaborate everything. How can i make that work in the presence of FFI?</p>",
        "id": 433520382,
        "sender_full_name": "David Renshaw",
        "timestamp": 1713273443
    },
    {
        "content": "<p>My code is at <a href=\"https://github.com/dwrensha/compfiles/tree/lean-copilot\">compfiles/lean-copilot</a>.</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>lake<span class=\"w\"> </span>exe<span class=\"w\"> </span>cache<span class=\"w\"> </span>get\n<span class=\"gp\">$ </span>lake<span class=\"w\"> </span>exe<span class=\"w\"> </span>LeanCopilot/download\n<span class=\"gp\">$ </span>lake<span class=\"w\"> </span>build\n<span class=\"gp\">$ </span>lake<span class=\"w\"> </span>exe<span class=\"w\"> </span>tryAtEachStep<span class=\"w\"> </span>--imports<span class=\"w\"> </span>LeanCopilot<span class=\"w\"> </span>search_proof<span class=\"w\"> </span>Compfiles/Imo1992P2.lean\n\n<span class=\"go\">info: [1/4] Building tryAtEachStep</span>\n<span class=\"go\">info: [3/4] Compiling tryAtEachStep</span>\n<span class=\"go\">info: [4/4] Linking tryAtEachStep</span>\n<span class=\"go\">.libc++abi: terminating due to uncaught exception of type lean::exception: Could not find native implementation of external declaration 'LeanCopilot.FFI.isGeneratorInitialized' (symbols 'l_LeanCopilot_FFI_isGeneratorInitialized___boxed' or 'l_LeanCopilot_FFI_isGeneratorInitialized').</span>\n<span class=\"go\">For declarations from `Init` or `Lean`, you need to set `supportInterpreter := true` in the relevant `lean_exe` statement in your `lakefile.lean`.</span>\n</code></pre></div>",
        "id": 433521450,
        "sender_full_name": "David Renshaw",
        "timestamp": 1713273745
    },
    {
        "content": "<p>I assume you tested that it works in the editor?</p>",
        "id": 433524755,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713274698
    },
    {
        "content": "<p>Yes, it works interactively in emacs.</p>",
        "id": 433524809,
        "sender_full_name": "David Renshaw",
        "timestamp": 1713274714
    },
    {
        "content": "<p>If I manually type in <code>search_proof</code>, it successfully executes the tactic.</p>",
        "id": 433524881,
        "sender_full_name": "David Renshaw",
        "timestamp": 1713274740
    },
    {
        "content": "<p>I notice that you have some funny link args</p>",
        "id": 433524944,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713274761
    },
    {
        "content": "<p>you may need to pass those link args to the executable (i.e. <code>tryAtEachStep</code>)</p>",
        "id": 433525017,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713274787
    },
    {
        "content": "<p><a href=\"https://github.com/dwrensha/compfiles/blob/1b5c16d41d0ba00ef88932f2b5eada7eccb15f59/lakefile.lean#L11-L14\">linker args</a></p>",
        "id": 433525151,
        "sender_full_name": "David Renshaw",
        "timestamp": 1713274822
    },
    {
        "content": "<p>^ this are what LeanCopilot's README instructs me to add</p>",
        "id": 433525240,
        "sender_full_name": "David Renshaw",
        "timestamp": 1713274857
    },
    {
        "content": "<p>right, that makes lean able to find the necessary function</p>",
        "id": 433525298,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713274881
    },
    {
        "content": "<p>but now you need to make tryAtEachStep also find the function</p>",
        "id": 433525341,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713274894
    },
    {
        "content": "<p>so you need to link tryAtEachStep with those arguments</p>",
        "id": 433525376,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713274906
    },
    {
        "content": "<p>(I'm aware this is a layering violation but try it anyway to see if this is the issue)</p>",
        "id": 433525680,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713274994
    },
    {
        "content": "<p>I don't know how to pass in such information</p>",
        "id": 433525945,
        "sender_full_name": "David Renshaw",
        "timestamp": 1713275067
    },
    {
        "content": "<p>setting <code>LD_LIBRARY_PATH</code> does not seem to help</p>",
        "id": 433525994,
        "sender_full_name": "David Renshaw",
        "timestamp": 1713275085
    },
    {
        "content": "<p>try adding <code>moreLinkArgs</code> to the lakefile of tryAtEachStep</p>",
        "id": 433526062,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713275108
    },
    {
        "content": "<p>ah, okay. Yeah, layering violation indeed...</p>",
        "id": 433526157,
        "sender_full_name": "David Renshaw",
        "timestamp": 1713275137
    },
    {
        "content": "<p>I vendored <code>tryEachStepLean</code> into <code>compfiles/scripts</code> and then added this to the compfiles lakefile.lean:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">default_target</span><span class=\"kd\">]</span>\n<span class=\"n\">lean_exe</span> <span class=\"n\">tryAtEachStepVendored</span> <span class=\"n\">where</span>\n  <span class=\"n\">root</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">scripts.tryAtEachStep</span>\n  <span class=\"n\">supportInterpreter</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n  <span class=\"n\">moreLinkArgs</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span>\n    <span class=\"s2\">\"-L./.lake/packages/LeanCopilot/.lake/build/lib\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"-lctranslate2\"</span>\n  <span class=\"o\">]</span>\n</code></pre></div>",
        "id": 433527108,
        "sender_full_name": "David Renshaw",
        "timestamp": 1713275401
    },
    {
        "content": "<p>... and got the same error when running <code>lake exe tryAtEachStepVendored  ...</code></p>",
        "id": 433527182,
        "sender_full_name": "David Renshaw",
        "timestamp": 1713275414
    },
    {
        "content": "<p><del>hm... actually it seems that the error is not coming from <code>Frontend.processCommand</code></del></p>",
        "id": 433528287,
        "sender_full_name": "David Renshaw",
        "timestamp": 1713275730
    },
    {
        "content": "<p>it's coming from here: <a href=\"https://github.com/dwrensha/tryAtEachStep/blob/6d1dcdf8c28c005fa3e1795cbac773870109d80d/tryAtEachStep.lean#L75-L78\">https://github.com/dwrensha/tryAtEachStep/blob/6d1dcdf8c28c005fa3e1795cbac773870109d80d/tryAtEachStep.lean#L75-L78</a></p>",
        "id": 433528311,
        "sender_full_name": "David Renshaw",
        "timestamp": 1713275738
    },
    {
        "content": "<p>where I try to run the <code>search_proof</code> tactic, using the snapshotted <code>MetaM</code> state that I extracted from <code>Frontend.processCommand</code>.</p>",
        "id": 433528470,
        "sender_full_name": "David Renshaw",
        "timestamp": 1713275777
    },
    {
        "content": "<p>Does <code>ldd</code> list the shared lib in question on your new executable?</p>",
        "id": 433528486,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1713275780
    },
    {
        "content": "<p><code>LD_PRELOAD</code> not <code>LD_LIBRARY_PATH</code> is the correct env var to smuggle a solib into an executable that does not require the lib btw</p>",
        "id": 433528631,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1713275820
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">ldd</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">tryAtEachStepVendored</span>\n    <span class=\"n\">linux</span><span class=\"bp\">-</span><span class=\"n\">vdso.so.1</span> <span class=\"o\">(</span><span class=\"mi\">0x00007ffd59f7c000</span><span class=\"o\">)</span>\n    <span class=\"n\">libctranslate2.so.4</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">not</span> <span class=\"n\">found</span>\n    <span class=\"n\">libm.so.6</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">x86_64</span><span class=\"bp\">-</span><span class=\"n\">linux</span><span class=\"bp\">-</span><span class=\"n\">gnu</span><span class=\"bp\">/</span><span class=\"n\">libm.so.6</span> <span class=\"o\">(</span><span class=\"mi\">0x00007ee817319000</span><span class=\"o\">)</span>\n    <span class=\"n\">libdl.so.2</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">x86_64</span><span class=\"bp\">-</span><span class=\"n\">linux</span><span class=\"bp\">-</span><span class=\"n\">gnu</span><span class=\"bp\">/</span><span class=\"n\">libdl.so.2</span> <span class=\"o\">(</span><span class=\"mi\">0x00007ee81b37d000</span><span class=\"o\">)</span>\n    <span class=\"n\">libpthread.so.0</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">x86_64</span><span class=\"bp\">-</span><span class=\"n\">linux</span><span class=\"bp\">-</span><span class=\"n\">gnu</span><span class=\"bp\">/</span><span class=\"n\">libpthread.so.0</span> <span class=\"o\">(</span><span class=\"mi\">0x00007ee81b378000</span><span class=\"o\">)</span>\n    <span class=\"n\">libc.so.6</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">x86_64</span><span class=\"bp\">-</span><span class=\"n\">linux</span><span class=\"bp\">-</span><span class=\"n\">gnu</span><span class=\"bp\">/</span><span class=\"n\">libc.so.6</span> <span class=\"o\">(</span><span class=\"mi\">0x00007ee817000000</span><span class=\"o\">)</span>\n    <span class=\"n\">librt.so.1</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">x86_64</span><span class=\"bp\">-</span><span class=\"n\">linux</span><span class=\"bp\">-</span><span class=\"n\">gnu</span><span class=\"bp\">/</span><span class=\"n\">librt.so.1</span> <span class=\"o\">(</span><span class=\"mi\">0x00007ee81b371000</span><span class=\"o\">)</span>\n    <span class=\"bp\">/</span><span class=\"n\">lib64</span><span class=\"bp\">/</span><span class=\"n\">ld</span><span class=\"bp\">-</span><span class=\"n\">linux</span><span class=\"bp\">-</span><span class=\"n\">x86</span><span class=\"bp\">-</span><span class=\"mi\">64</span><span class=\"bp\">.</span><span class=\"n\">so.2</span> <span class=\"o\">(</span><span class=\"mi\">0x00007ee81b3a0000</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 433530819,
        "sender_full_name": "David Renshaw",
        "timestamp": 1713276385
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243791\">David Renshaw</span> <a href=\"#narrow/stream/270676-lean4/topic/how.20to.20use.20Frontend.2EprocessCommand.20when.20command.20uses.20FFI.3F/near/433528287\">said</a>:</p>\n<blockquote>\n<p>hm... actually it seems that the error is not coming from <code>Frontend.processCommand</code></p>\n</blockquote>\n<p><del>Indeed, when I add <code>search_proof</code> to a proof in the Lean file and then try <code>tryAtEachStep exact?</code>, it succeeds. So <code>Frontend.processCommand</code> is able to run the <code>search_proof</code> tactic. The problem is that my later injected tactic execution is not able to run the <code>search_proof</code> tactic.</del></p>",
        "id": 433531991,
        "sender_full_name": "David Renshaw",
        "timestamp": 1713276719
    },
    {
        "content": "<p><del>So now I'm trying to figure out where <code>Frontend.processCommand</code> is getting its linker state, and how I can make sure to pass that on to my own <code>TermElabM</code>...</del></p>",
        "id": 433532196,
        "sender_full_name": "David Renshaw",
        "timestamp": 1713276770
    },
    {
        "content": "<p>well \"linker state\" isn't really a thing, the linking state (such as it is) is global and is not passed around</p>",
        "id": 433549649,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713281397
    },
    {
        "content": "<p>Oops -- I was using an invocation of <code>search_proof</code> that succeeded before it needed to run FFI code.<br>\nSo, correction : <code>Frontend.processCommand</code> does fail, and with the same error \"<code>Could not find native implementation of external declaration</code>\"</p>",
        "id": 433589701,
        "sender_full_name": "David Renshaw",
        "timestamp": 1713295214
    },
    {
        "content": "<p>So my question is: why does the LSP FileWorker process succeed at linking (it successfully executes the <code>search_proof</code> tactic) while my <code>tryAtEachStep</code> program fails?</p>",
        "id": 433590600,
        "sender_full_name": "David Renshaw",
        "timestamp": 1713295585
    },
    {
        "content": "<p>The fileworker isn't linking, I don't think? It's perhaps using the <code>lean -dynlib</code> flag to load the <code>search_proof</code> library into the lean runtime, but it's not linking anything against it</p>",
        "id": 433592739,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713296413
    },
    {
        "content": "<p>Aha! This seems to be working (with my vendored <code>tryAtEachStep</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$<span class=\"w\"> </span><span class=\"nv\">LD_LIBRARY_PATH</span><span class=\"o\">=</span>./.lake/packages/std/.lake/build/lib:./.lake/packages/aesop/.lake/build/lib:./.lake/packages/mathlib/.lake/build/lib:./.lake/packages/LeanCopilot/.lake/build/lib:./.lake/build/lib:/home/dwrensha/.elan/toolchains/leanprover--lean4---v4.7.0/lib/lean:/home/dwrensha/.elan/toolchains/leanprover--lean4---v4.7.0/lib<span class=\"w\">  </span><span class=\"nv\">LD_PRELOAD</span><span class=\"o\">=</span>.lake/packages/LeanCopilot/.lake/build/lib/libLeanCopilot-Tactics-1.so<span class=\"w\">  </span>lake<span class=\"w\"> </span>exe<span class=\"w\"> </span>tryAtEachStepVendored<span class=\"w\"> </span>--imports<span class=\"w\"> </span>LeanCopilot<span class=\"w\"> </span>search_proof<span class=\"w\"> </span>Compfiles/Imo1992P2.lean\n</code></pre></div>",
        "id": 433593747,
        "sender_full_name": "David Renshaw",
        "timestamp": 1713296884
    },
    {
        "content": "<p>That <code>LD_LIBRARY_PATH</code> was stolen from a fileworker.</p>",
        "id": 433593834,
        "sender_full_name": "David Renshaw",
        "timestamp": 1713296931
    },
    {
        "content": "<p>And then I just started trying random things with <code>LD_PRELOAD</code>.</p>",
        "id": 433593875,
        "sender_full_name": "David Renshaw",
        "timestamp": 1713296949
    },
    {
        "content": "<p>Here's where <code>FileWorker</code> loads dynlibs: <a href=\"https://github.com/leanprover/lean4/blob/75e68e7565708361e117c5f56b66fdbe013de667/src/Lean/Server/FileWorker/SetupFile.lean#L125\">https://github.com/leanprover/lean4/blob/75e68e7565708361e117c5f56b66fdbe013de667/src/Lean/Server/FileWorker/SetupFile.lean#L125</a></p>",
        "id": 433596557,
        "sender_full_name": "David Renshaw",
        "timestamp": 1713297988
    },
    {
        "content": "<p><code>lake setup-file</code> seems relevant...</p>",
        "id": 433596583,
        "sender_full_name": "David Renshaw",
        "timestamp": 1713298003
    }
]