[
    {
        "content": "<p>I am trying to create a promise (context: doing some <a href=\"https://github.com/Kiiyya/lean-wgpu/blob/async/Wgpu.lean#L82-L89\">wgpu bindings</a>).<br>\nI have the following code MWE. Oddly enough, <code>lean_io_promise_new</code> does return something, but it doesn't seem to return a valid lean object, since the tag is <code>0</code>, so I am confused. I expect the tag to be <code>252</code>, which is a <code>LeanTask</code>. What's the proper way to create a promise in FFI?</p>\n<p>There are functions for managing tasks in <code>lean.h</code>, which work and I can spawn a lean task object with the 252 tag.<br>\nBut <code>lean_io_promise_new</code> is from the runtime, not from <code>lean.h</code>, so maybe that breaks things in some way. Is there a reason why <code>lean.h</code> doesn't have functions for managing promises?</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Alloy</span><span class=\"bp\">.</span><span class=\"n\">C</span>\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"kn\">scoped</span><span class=\"w\"> </span><span class=\"n\">Alloy</span><span class=\"bp\">.</span><span class=\"n\">C</span>\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">IO</span>\n\n<span class=\"n\">alloy</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"kn\">section</span>\n<span class=\"w\">  </span><span class=\"bp\">#</span><span class=\"n\">include</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"n\">stdio</span><span class=\"bp\">.</span><span class=\"n\">h</span><span class=\"bp\">&gt;</span>\n<span class=\"w\">  </span><span class=\"bp\">#</span><span class=\"n\">include</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"n\">stdlib</span><span class=\"bp\">.</span><span class=\"n\">h</span><span class=\"bp\">&gt;</span>\n<span class=\"w\">  </span><span class=\"bp\">#</span><span class=\"n\">include</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">h</span><span class=\"bp\">&gt;</span>\n\n<span class=\"w\">  </span><span class=\"c1\">-- hacky. Copied from the compiled output from lean runtime, search `lean_io_promise_new` in the lean4 repo source.</span>\n<span class=\"w\">  </span><span class=\"n\">extern</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">lean_io_promise_new</span><span class=\"o\">(</span><span class=\"n\">lean_object</span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">seemsNotUsed</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n<span class=\"w\">  </span><span class=\"n\">extern</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">lean_io_promise_resolve</span><span class=\"o\">(</span><span class=\"n\">lean_object</span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">promise</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">seemsNotUsed</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">alloy</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"n\">extern</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">IO</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Promise</span><span class=\"w\"> </span><span class=\"n\">UInt32</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">{</span>\n<span class=\"w\">  </span><span class=\"n\">lean_object</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"n\">promise</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">lean_io_promise_new</span><span class=\"o\">(</span><span class=\"n\">lean_box</span><span class=\"o\">(</span><span class=\"mi\">1337</span><span class=\"o\">))</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"c1\">-- call Promise.new</span>\n<span class=\"w\">  </span><span class=\"n\">fprintf</span><span class=\"o\">(</span><span class=\"n\">stderr</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"s2\">\"promise tag is %d</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">lean_ptr_tag</span><span class=\"o\">(</span><span class=\"n\">promise</span><span class=\"o\">))</span><span class=\"bp\">;</span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">lean_ptr_tag</span><span class=\"o\">((</span><span class=\"n\">lean_object</span><span class=\"bp\">*</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">promise</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">!=</span><span class=\"w\"> </span><span class=\"n\">LeanTask</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">{</span>\n<span class=\"w\">    </span><span class=\"n\">abort</span><span class=\"o\">()</span><span class=\"bp\">;</span>\n<span class=\"w\">  </span><span class=\"o\">}</span>\n<span class=\"w\">  </span><span class=\"n\">fprintf</span><span class=\"o\">(</span><span class=\"n\">stderr</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"s2\">\"checkpoint</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n<span class=\"w\">  </span><span class=\"n\">return</span><span class=\"w\"> </span><span class=\"n\">lean_io_result_mk_ok</span><span class=\"o\">(</span><span class=\"n\">promise</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>And then in another file:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">TheAboveFile</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">IO</span><span class=\"w\"> </span><span class=\"n\">Unit</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Promise</span><span class=\"w\"> </span><span class=\"n\">UInt32</span><span class=\"w\"> </span><span class=\"bp\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">foo</span>\n<span class=\"w\">  </span><span class=\"n\">eprintln</span><span class=\"w\"> </span><span class=\"n\">s!</span><span class=\"s2\">\"got {p.result.get}\"</span>\n</code></pre></div>",
        "id": 443576437,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1717925080
    },
    {
        "content": "<p><code>lean_io_promise_new</code> returns an <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=EStateM.Result#doc\">docs#EStateM.Result</a>, I think?</p>",
        "id": 443576595,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717925239
    },
    {
        "content": "<p>So you need to unpack that to get at the task</p>",
        "id": 443576670,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717925288
    },
    {
        "content": "<p>You probably want to call <a href=\"https://github.com/leanprover/lean4/blob/master/src/util/io.h#L15C24-L15C37\"><code>get_io_result</code></a>?</p>",
        "id": 443576687,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717925318
    },
    {
        "content": "<p>The signature is the following, which doesn't mention <code>Result</code>. Whatever it returns, shouldn't it still return a valid lean object though? The tag <code>0</code> doesn't seem to denote any valid lean object.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">extern</span><span class=\"w\"> </span><span class=\"s2\">\"lean_io_promise_new\"</span><span class=\"kd\">]</span>\n<span class=\"kn\">opaque</span><span class=\"w\"> </span><span class=\"n\">Promise</span><span class=\"bp\">.</span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Nonempty</span><span class=\"w\"> </span><span class=\"n\">Œ±</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">BaseIO</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Promise</span><span class=\"w\"> </span><span class=\"n\">Œ±</span><span class=\"o\">)</span>\n</code></pre></div>\n<p><code>get_io_result</code> is a c++ thing in the runtime and not tagged <code>extern</code> :/</p>",
        "id": 443576850,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1717925483
    },
    {
        "content": "<p>Ohhh wait I think you are right, it's just called differently in lean.h</p>",
        "id": 443576976,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1717925587
    },
    {
        "content": "<p>Yep the following works. Awesome. Thanks.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"w\">  </span><span class=\"n\">lean_object</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"n\">io_res</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">lean_io_promise_new</span><span class=\"o\">(</span><span class=\"n\">lean_box</span><span class=\"o\">(</span><span class=\"mi\">1337</span><span class=\"o\">))</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"c1\">-- call Promise.new</span>\n<span class=\"w\">  </span><span class=\"n\">lean_object</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"n\">promise</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">lean_io_result_get_value</span><span class=\"o\">(</span><span class=\"n\">io_res</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n</code></pre></div>",
        "id": 443577061,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1717925665
    },
    {
        "content": "<blockquote>\n<p>The signature is the following, which doesn't mention¬†<code>Result</code>.</p>\n</blockquote>\n<p>It returns <code>BaseIO</code>, which is</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"c1\">-- fun Œ± =&gt; IO.RealWorld ‚Üí EStateM.Result Empty PUnit.{1} Œ±</span>\n<span class=\"bp\">#</span><span class=\"n\">reduce</span><span class=\"w\"> </span><span class=\"n\">BaseIO</span>\n</code></pre></div>",
        "id": 443577230,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717925837
    },
    {
        "content": "<p>I think this means that <code>lean_io_promise_new</code> is incorrect, and should take an extra (ignored) <code>IO.RealWorld</code> argument?</p>",
        "id": 443577321,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717925901
    },
    {
        "content": "<p>Yeah that's what I thought as well, but if you look at the generated C code, it only takes one lean_object. And this way I do get a closure back, so it works.</p>",
        "id": 443577390,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1717925983
    },
    {
        "content": "<p>Great success!</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">triangle</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">IO</span><span class=\"w\"> </span><span class=\"n\">Unit</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">desc</span><span class=\"w\"> </span><span class=\"bp\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">WGPUInstanceDescriptor</span><span class=\"bp\">.</span><span class=\"n\">mk</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">inst</span><span class=\"w\"> </span><span class=\"bp\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">WGPUInstance</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"w\"> </span><span class=\"n\">desc</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">adapter</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Promise</span><span class=\"w\"> </span><span class=\"n\">WGPUAdapter</span><span class=\"w\"> </span><span class=\"bp\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">WGPUAdapter</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"w\"> </span><span class=\"n\">inst</span>\n<span class=\"w\">  </span><span class=\"n\">eprintln</span><span class=\"w\"> </span><span class=\"s2\">\"created adapter promise!\"</span>\n<span class=\"w\">  </span><span class=\"n\">dostuff</span><span class=\"w\"> </span><span class=\"n\">adapter</span><span class=\"bp\">.</span><span class=\"n\">result</span><span class=\"bp\">.</span><span class=\"n\">get</span>\n</code></pre></div>",
        "id": 443578235,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1717926759
    },
    {
        "content": "<p>Ah nevermind; what I meant is that you should be using <code>lean_io_promise_new(io_mk_world())</code></p>",
        "id": 443584886,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717931391
    },
    {
        "content": "<p>Ah yeah. But it‚Äôs irrelevant because the argument is entirely ignored.</p>",
        "id": 443584968,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1717931431
    },
    {
        "content": "<p>Thanks for you help!</p>",
        "id": 443585020,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1717931481
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/FFI.3A.20lean_io_promise_new/near/443584886\">said</a>:</p>\n<blockquote>\n<p>Ah nevermind; what I meant is that you should be using <code>lean_io_promise_new(io_mk_world())</code></p>\n</blockquote>\n<p>Usually we just use the world argument that we get passed in over the FFI boundary</p>",
        "id": 443589819,
        "sender_full_name": "Henrik B√∂ving",
        "timestamp": 1717935057
    },
    {
        "content": "<p>What does that look like in alloy?</p>",
        "id": 443596197,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717940605
    },
    {
        "content": "<p>Good question actually. <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> did you think about that?</p>",
        "id": 443596469,
        "sender_full_name": "Henrik B√∂ving",
        "timestamp": 1717940800
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik B√∂ving</span> <a href=\"#narrow/stream/270676-lean4/topic/FFI.3A.20lean_io_promise_new/near/443589819\">said</a>:</p>\n<blockquote>\n<p>Usually we just use the world argument that we get passed in over the FFI boundary</p>\n</blockquote>\n<p>While one might think you would do this (and did at first as well), Lean C code usually just creates a new world rather than reusing the old. Part of the reason is that a world is just the scalar <code>1</code> (<code>box(0)</code>).</p>",
        "id": 443600146,
        "sender_full_name": "Mac Malone",
        "timestamp": 1717943577
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik B√∂ving</span> <a href=\"#narrow/stream/270676-lean4/topic/FFI.3A.20lean_io_promise_new/near/443596469\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> did you think about that?</p>\n</blockquote>\n<p>Unnamed arguments (such as the embedded in <code>BaseIO</code>) are named by their numerical index. In this case, it would be <code>_0</code>.</p>",
        "id": 443600440,
        "sender_full_name": "Mac Malone",
        "timestamp": 1717943793
    }
]