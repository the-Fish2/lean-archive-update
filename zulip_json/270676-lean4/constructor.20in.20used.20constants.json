[
    {
        "content": "<p>I came across something curious today:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">Foo.mk</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">Foo.mk : Nat → Foo</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">find</span><span class=\"bp\">?</span> <span class=\"bp\">`</span><span class=\"n\">Foo.mk</span> <span class=\"bp\">|</span> <span class=\"n\">unreachable</span><span class=\"bp\">!</span>\n  <span class=\"n\">for</span> <span class=\"n\">d</span> <span class=\"k\">in</span> <span class=\"n\">c.getUsedConstantsAsSet</span> <span class=\"k\">do</span>\n    <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"n\">d</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">Foo</span>\n<span class=\"cm\">Nat</span>\n<span class=\"cm\">Foo.mk</span>\n\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>Why does <code>Foo.mk</code> appear as a used constant in <code>Foo.mk</code>? Is this expected?</p>",
        "id": 437759245,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1715222299
    },
    {
        "content": "<p>I mean, it's clear why this is the case, given the code for <code>getUsedConstantsAsSet</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Return all names appearing in the type or value of a `ConstantInfo`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">getUsedConstantsAsSet</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ConstantInfo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">NameSet</span> <span class=\"o\">:=</span>\n  <span class=\"n\">c.type.getUsedConstantsAsSet</span> <span class=\"bp\">++</span> <span class=\"k\">match</span> <span class=\"n\">c.value</span><span class=\"bp\">?</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">v.getUsedConstantsAsSet</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">c</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inductInfo</span> <span class=\"n\">val</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">ofList</span> <span class=\"n\">val.ctors</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">opaqueInfo</span> <span class=\"n\">val</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">val.value.getUsedConstantsAsSet</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ctorInfo</span> <span class=\"n\">val</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">({}</span> <span class=\"o\">:</span> <span class=\"n\">NameSet</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">insert</span> <span class=\"n\">val.name</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">recInfo</span> <span class=\"n\">val</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">ofList</span> <span class=\"n\">val.all</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{}</span>\n</code></pre></div>\n<p>I guess I'm curious why the <code>ctorInfo</code> case includes <code>val.name</code>.</p>",
        "id": 437759437,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1715222462
    }
]