[
    {
        "content": "<p>What is the current status of compiling tactics? I wrote simproc that I want to run compiled. Is the only option adding <code>precompileModules := true</code> to my lakefile and compile my whole library? And that is not feasible as I would have to compile mathlib. Can I select just one file to compile?</p>",
        "id": 421335891,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1707863275
    },
    {
        "content": "<p>I think this is effectively a Lake feature request for applying options to a subset of a library (and/or robust support for overlapping libraries)? This also came up at <a href=\"https://github.com/leanprover-community/mathlib4/pull/3575#discussion_r1173937573\">https://github.com/leanprover-community/mathlib4/pull/3575#discussion_r1173937573</a>. /cc <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span></p>",
        "id": 421420707,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1707908390
    },
    {
        "content": "<p>While precompiling a subset of a package is certainly part of this feature request, that is not the whole problem here. When a module is precompiled, Lake also precompiles any of its transitive imports. This is because definitions within the module may make use of functions inits imports and the compiled shared library cannot have any unresolved symbols to such functions. So, if the simproc <span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span> wants compiled makes use of some mathlib utiltities, he would have to compile those modules as well. However, if he can isolated the code he wants precompiled into a module with no such imports, he can avoid this issue.</p>\n<p>To precompile a single module, you can define an overlapping <code>lean_lib</code> whose root is just that module or subtree and set <code>precompileModules := true</code> only on it. That is, the issue <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> linked has since been resolved by <a href=\"https://github.com/leanprover/lean4/pull/2521/commits/64425cbf250629361908afbda4e2071aafaea992\">lean4#64425cb</a> and  <a href=\"https://github.com/leanprover/lean4/pull/2937\">lean4#2937</a>. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">package</span> <span class=\"n\">scilean</span> <span class=\"n\">where</span>\n  <span class=\"c1\">-- options shared across package Lean libraries</span>\n\n<span class=\"n\">lean_lib</span> <span class=\"n\">SciLean</span> <span class=\"n\">where</span>\n  <span class=\"c1\">-- options for SciLean (and below) modules without a more specific library</span>\n\n<span class=\"n\">lean_lib</span> <span class=\"n\">SciLean.Tactic.MySimpProc</span> <span class=\"n\">where</span>\n  <span class=\"c1\">-- options for SciLean.Tactic.MySimpProc (and below) modules</span>\n  <span class=\"n\">precompileModules</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n</code></pre></div>",
        "id": 421481127,
        "sender_full_name": "Mac Malone",
        "timestamp": 1707927349
    },
    {
        "content": "<p>When running <code>lake build</code> I get the expected</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">...</span>\n<span class=\"o\">[</span><span class=\"mi\">1730</span><span class=\"bp\">/</span><span class=\"mi\">1732</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">SciLean.Tactic.LSimp.LetNormalize</span>\n<span class=\"o\">[</span><span class=\"mi\">1731</span><span class=\"bp\">/</span><span class=\"mi\">1732</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">SciLean</span>\n</code></pre></div>\n<p>but when I run </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lake</span> <span class=\"n\">env</span> <span class=\"n\">lean</span> <span class=\"n\">SciLean</span><span class=\"bp\">/</span><span class=\"n\">Tactic</span><span class=\"bp\">/</span><span class=\"n\">LSimp</span><span class=\"bp\">/</span><span class=\"n\">LetNormalizeTest.lean</span>\n</code></pre></div>\n<p>I'm still getting</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">interpretation</span> <span class=\"n\">of</span> <span class=\"n\">SciLean.Tactic.let_normalize</span> <span class=\"n\">took</span> <span class=\"mi\">23</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"n\">ms</span>\n</code></pre></div>",
        "id": 421494693,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1707931287
    },
    {
        "content": "<p>Rebuild with <code>lake build -v</code> to see the correct <code>lean</code> invocation :)</p>",
        "id": 421494866,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1707931342
    },
    {
        "content": "<p>Ohh so running <code>lean env lean *.lean</code> is not enough? Do I have to really call <code>lake env lean SciLean/Tactic/LSimp/LetNormalizeTest.lean --load-dynlib=./.lake/build/lib/libSciLean-Tactic-LSimp-LetNormalize-1.so</code>? </p>\n<p>I would love to run the compiled tactic in my editor, the speed gain is insane :) </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">interpretation</span> <span class=\"n\">of</span> <span class=\"n\">SciLean.Tactic.let_normalize</span> <span class=\"n\">took</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">00367</span><span class=\"n\">ms</span>\n</code></pre></div>\n<p>(not sure why does it still say \"interpretation\")</p>",
        "id": 421496272,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1707931762
    },
    {
        "content": "<p>Oh it should just work in your editor! If it doesn't, that's a bug. It's only when you go the manual <code>lean</code> way that you have to be that specific.</p>",
        "id": 421496498,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1707931831
    },
    {
        "content": "<blockquote>\n<p>(not sure why does it still say \"interpretation\")</p>\n</blockquote>\n<p>Looks like an edge case, the interpreter is the one responsible for locating and invoking native code but we could avoid the profile entry if the top function is already native</p>",
        "id": 421496682,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1707931902
    },
    {
        "content": "<p>Ohh there is a bug in  emacs command <code>(lean4-std-exe)</code></p>",
        "id": 421497060,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1707932041
    },
    {
        "content": "<p>When I look at the output in the infoview it shows the blazing speed :)</p>",
        "id": 421497150,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1707932065
    },
    {
        "content": "<p>Why doesn't mathlib compile tactics this way?</p>",
        "id": 421497468,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1707932168
    },
    {
        "content": "<p>The PR I linked above was exploring that! At that point, it turned out the minor speedups did not warrant looking into resolving the remaining issues. In the end, Mathlib spends most of its tactic time in core code. The precompilation overhead, for both precompiling and runtime-loading, also increases for tactics with many dependencies.</p>",
        "id": 421498128,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1707932420
    },
    {
        "content": "<p>I believe the recently added tactic <code>fun_prop</code> could greatly benefit from that. </p>\n<p>Is there at least a way to compile it in my project? i.e. depend on mathlib and add to my project</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lean_lib</span> <span class=\"n\">mathlib_tactics_compile</span> <span class=\"n\">where</span>\n  <span class=\"n\">precompileModules</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n  <span class=\"n\">roots</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">Mathlib.Tactic.FunProp</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>I'm getting an error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">'</span><span class=\"n\">Mathlib.Tactic.FunProp'</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">such</span> <span class=\"n\">file</span> <span class=\"n\">or</span> <span class=\"n\">directory</span> <span class=\"o\">(</span><span class=\"n\">error</span> <span class=\"n\">code</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"n\">file</span><span class=\"o\">:</span> <span class=\"bp\">./././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Tactic</span><span class=\"bp\">/</span><span class=\"n\">FunProp.lean</span>\n</code></pre></div>\n<p>and modifying lakefile of mathlib seems to invalidate cache</p>",
        "id": 421500493,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1707933168
    },
    {
        "content": "<p>You should be able to do this, but I think you need to use a file in the current project as your <code>roots</code>, so just have a <code>MathlibTacticsCompile.lean</code> file containing <code>import Mathlib.Tactic.FunProp</code> and make a lib from that</p>",
        "id": 421570391,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707965361
    },
    {
        "content": "<p>That is a neat trick. I will try it out tomorrow.</p>",
        "id": 421570496,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1707965429
    }
]