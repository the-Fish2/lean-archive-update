[
    {
        "content": "<p>How can I stop Lean from unfolding definitions that would lead to large terms?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Hyperoperation</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">googol</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">10</span> <span class=\"bp\">^</span> <span class=\"mi\">100</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">googolplex</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">10</span> <span class=\"bp\">^</span> <span class=\"n\">googol</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">googolplex_gt_ho425</span> <span class=\"o\">:</span> <span class=\"n\">hyperoperation</span> <span class=\"mi\">4</span> <span class=\"mi\">2</span> <span class=\"mi\">5</span> <span class=\"bp\">&lt;</span> <span class=\"n\">googolplex</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hyperoperation</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"bp\">=</span><span class=\"mi\">2</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hyperoperation</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">googol</span>\n  <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">pow_lt_pow_right</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">decide</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">googol</span> <span class=\"bp\">&lt;</span> <span class=\"n\">googolplex</span>\n  <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">pow_lt_pow_left</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">decide</span>\n  <span class=\"k\">have</span> <span class=\"n\">result</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">googolplex</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- h1.trans h2</span>\n  <span class=\"n\">exact</span> <span class=\"n\">result</span>\n</code></pre></div>\n<p>Uncommenting <code>h1.trans h2</code> leads to a crash.<br>\nMaybe I am naïve, but I think that Lean should be able to check that <code>h1.trans h2</code> has type <code>2 ^ 2 ^ 2 ^ 2 ^ 2 &lt; googolplex</code> without unfolding what <code>googolplex</code> is.</p>",
        "id": 418336973,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1706296535
    },
    {
        "content": "<p>My workaround for a similar issue: <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/how.20to.20ask.20Lean.20to.20*not*.20normalize.20a.20numeric.20expression.3F/near/394218219\">https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/how.20to.20ask.20Lean.20to.20*not*.20normalize.20a.20numeric.20expression.3F/near/394218219</a></p>",
        "id": 418337365,
        "sender_full_name": "David Renshaw",
        "timestamp": 1706296687
    },
    {
        "content": "<p>This seems to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">googolplex_gt_ho425</span> <span class=\"o\">:</span> <span class=\"n\">hyperoperation</span> <span class=\"mi\">4</span> <span class=\"mi\">2</span> <span class=\"mi\">5</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">10</span> <span class=\"bp\">^</span> <span class=\"n\">googol</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hyperoperation</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"bp\">=</span><span class=\"mi\">2</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hyperoperation</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">googol</span> <span class=\"o\">:=</span>\n    <span class=\"n\">pow_lt_pow_right</span> <span class=\"n\">one_lt_two</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">[</span><span class=\"n\">googol</span><span class=\"o\">])</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">googol</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">10</span> <span class=\"bp\">^</span> <span class=\"n\">googol</span> <span class=\"o\">:=</span>\n    <span class=\"n\">pow_lt_pow_left</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span> <span class=\"n\">zero_le_two</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ_ne_zero</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h1.trans</span> <span class=\"n\">h2</span>\n</code></pre></div>",
        "id": 418360571,
        "sender_full_name": "David Renshaw",
        "timestamp": 1706308553
    },
    {
        "content": "<p>I think the problem boils down to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">googleplex_def</span> <span class=\"o\">:</span> <span class=\"n\">googolplex</span> <span class=\"bp\">=</span> <span class=\"mi\">10</span> <span class=\"bp\">^</span> <span class=\"n\">googol</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 418360713,
        "sender_full_name": "David Renshaw",
        "timestamp": 1706308623
    },
    {
        "content": "<p>I haven't found a way to prove that.</p>",
        "id": 418360732,
        "sender_full_name": "David Renshaw",
        "timestamp": 1706308634
    },
    {
        "content": "<p>Pulled into a self-contained example (no imports needed):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">googol</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">10</span> <span class=\"bp\">^</span> <span class=\"mi\">100</span>\n<span class=\"kd\">def</span> <span class=\"n\">googolplex</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">10</span> <span class=\"bp\">^</span> <span class=\"n\">googol</span>\n\n<span class=\"c1\">-- How can we prove this?</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">googolplex_def</span> <span class=\"o\">:</span> <span class=\"n\">googolplex</span> <span class=\"bp\">=</span> <span class=\"mi\">10</span> <span class=\"bp\">^</span> <span class=\"n\">googol</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n  <span class=\"c1\">-- The proof should be `rfl`</span>\n  <span class=\"c1\">-- or perhaps `unfold googolplex; rfl`,</span>\n  <span class=\"c1\">-- but those hit \"INTERNAL PANIC: Nat.pow exponent is too big\"</span>\n\n  <span class=\"c1\">-- Adding @[irreducible] to the above defs does not help.</span>\n</code></pre></div>",
        "id": 418366189,
        "sender_full_name": "David Renshaw",
        "timestamp": 1706312295
    },
    {
        "content": "<p>It seems that mathlibs <code>irreducible_def</code> is enough:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.IrreducibleDef</span>\n\n<span class=\"n\">irreducible_def</span> <span class=\"n\">googol</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">10</span> <span class=\"bp\">^</span> <span class=\"mi\">100</span>\n<span class=\"kd\">def</span> <span class=\"n\">googolplex</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">10</span> <span class=\"bp\">^</span> <span class=\"n\">googol</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">googleplex_def</span> <span class=\"o\">:</span> <span class=\"n\">googolplex</span> <span class=\"bp\">=</span> <span class=\"mi\">10</span> <span class=\"bp\">^</span> <span class=\"n\">googol</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 418384238,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706327558
    },
    {
        "content": "<p>and the initial result also works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Hyperoperation</span>\n\n<span class=\"n\">irreducible_def</span> <span class=\"n\">googol</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">10</span> <span class=\"bp\">^</span> <span class=\"mi\">100</span>\n<span class=\"kd\">def</span> <span class=\"n\">googolplex</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">10</span> <span class=\"bp\">^</span> <span class=\"n\">googol</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">googolplex_gt_ho425</span> <span class=\"o\">:</span> <span class=\"n\">hyperoperation</span> <span class=\"mi\">4</span> <span class=\"mi\">2</span> <span class=\"mi\">5</span> <span class=\"bp\">&lt;</span> <span class=\"n\">googolplex</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hyperoperation</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"bp\">=</span><span class=\"mi\">2</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hyperoperation</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">googol</span>\n  <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">pow_lt_pow_right</span>\n    <span class=\"bp\">·</span> <span class=\"n\">decide</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">googol_def</span><span class=\"o\">]</span>\n      <span class=\"n\">decide</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">googol</span> <span class=\"bp\">&lt;</span> <span class=\"n\">googolplex</span>\n  <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">pow_lt_pow_left</span>\n    <span class=\"bp\">·</span> <span class=\"n\">decide</span>\n    <span class=\"bp\">·</span> <span class=\"n\">decide</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">googol_def</span><span class=\"o\">]</span>\n      <span class=\"n\">decide</span>\n  <span class=\"k\">have</span> <span class=\"n\">result</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">googolplex</span> <span class=\"o\">:=</span> <span class=\"n\">h1.trans</span> <span class=\"n\">h2</span>\n  <span class=\"n\">exact</span> <span class=\"n\">result</span>\n</code></pre></div>",
        "id": 418384479,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706327864
    }
]