[
    {
        "content": "<p><strong>Caution: the following thoughts are primitive and may just be a wrong approach.</strong></p>\n<hr>\n<p>Consider the following loop that add 1 to every elements in a <code>FloatArray</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">add1</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">FloatArray</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">FloatArray</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">loop</span> <span class=\"o\">(</span><span class=\"kd\">@[</span><span class=\"n\">exclusive</span><span class=\"kd\">]</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">FloatArray</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">FloatArray</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r.size</span> <span class=\"k\">then</span>\n      <span class=\"k\">let</span> <span class=\"n\">idx</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">r.size</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">⟩</span>\n      <span class=\"n\">loop</span> <span class=\"o\">(</span><span class=\"n\">r.set</span> <span class=\"n\">idx</span> <span class=\"o\">(</span><span class=\"n\">r.get</span> <span class=\"n\">idx</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">r</span>\n  <span class=\"n\">loop</span> <span class=\"n\">x</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>The code effectively compiles to</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"n\">LEAN_EXPORT</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">l_add1_loop</span><span class=\"p\">(</span><span class=\"n\">lean_object</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">x_1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">x_2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"nl\">_start</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">lean_object</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">x_3</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"kt\">uint8_t</span><span class=\"w\"> </span><span class=\"n\">x_4</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">x_3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_float_array_size</span><span class=\"p\">(</span><span class=\"n\">x_1</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"n\">x_4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_nat_dec_lt</span><span class=\"p\">(</span><span class=\"n\">x_2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x_3</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"n\">lean_dec</span><span class=\"p\">(</span><span class=\"n\">x_3</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x_4</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">lean_dec</span><span class=\"p\">(</span><span class=\"n\">x_2</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">x_1</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kt\">double</span><span class=\"w\"> </span><span class=\"n\">x_5</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kt\">double</span><span class=\"w\"> </span><span class=\"n\">x_6</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kt\">double</span><span class=\"w\"> </span><span class=\"n\">x_7</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">lean_object</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">x_8</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">lean_object</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">x_9</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">lean_object</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">x_10</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">x_5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_float_array_fget</span><span class=\"p\">(</span><span class=\"n\">x_1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x_2</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">x_6</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">l_add1_loop___closed__1</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">x_7</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_float_add</span><span class=\"p\">(</span><span class=\"n\">x_5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x_6</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">x_8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_float_array_fset</span><span class=\"p\">(</span><span class=\"n\">x_1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x_2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x_7</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">x_9</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_unsigned_to_nat</span><span class=\"p\">(</span><span class=\"mi\">1u</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">x_10</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_nat_add</span><span class=\"p\">(</span><span class=\"n\">x_2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x_9</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">lean_dec</span><span class=\"p\">(</span><span class=\"n\">x_2</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">x_1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x_8</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">x_2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x_10</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">goto</span><span class=\"w\"> </span><span class=\"n\">_start</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Which, however, cannot be vectorized due to control dependences from <code>lean_float_array_fset</code> and <code>lean_dec</code>.</p>\n<p>The <code>lean_dec</code> thing is not hard to solve, we could simply provide something like <code>lean_float_array_fset_usize</code> or <code>lean_float_array_fget_usize</code> that uses scalars as induction variables. One can also wrap it as <code>FinUsize</code> in the language to make it type-safe.</p>\n<p>The exclusivity check in <code>lean_float_array_fset</code>is somehow more complicated to resolve. The compiler needs to have the knowledge of \"once being exclusive, always being exclusive\", and compile the function in a \"flow-sensitive\" way that lifts exclusivity checking outside the loop. Or, we just have a uniqueness type system (with linear with affine linear types) alongside FBIP. However, this may separate the runtime into two parts: RC-tracked objects and unique-boxed objects.</p>\n<p><a href=\"https://www.bing.com/search?q=fp%5E2+koka&amp;cvid=c4e6d507f3734d4497683d93f8092ed6&amp;gs_lcrp=EgZjaHJvbWUyBggAEEUYOTIGCAEQABhA0gEINzkwNGowajSoAgCwAgA&amp;FORM=ANAB01&amp;PC=U531\">FP^2: Fully in-Place Functional Programming</a> is definitely a good attempt to reduce such complication. Basically, FP^2 colors functions and embed fully in-place updates into RC-based reuse analysis. However, it seems to me that it still performs dynamic uniqueness checking within the functions colored as <code>fip</code>.</p>\n<p>I wonder if we can actually have a more adaptive way in <code>lean</code>. Looking into the definition of <code>ensure_exclusivity</code> of <code>array</code> (<code>sarray</code> is similar).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">static</span> <span class=\"n\">inline</span> <span class=\"n\">lean_obj_res</span> <span class=\"n\">lean_ensure_exclusive_array</span><span class=\"o\">(</span><span class=\"n\">lean_obj_arg</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">lean_is_exclusive</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"n\">return</span> <span class=\"n\">a</span><span class=\"bp\">;</span>\n    <span class=\"n\">return</span> <span class=\"n\">lean_copy_array</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>We can actually see that this operation should be easily generalized to all <code>lean</code> objects (Just provide \"shallow copy\" for all objects). So, how about having a <code>lean_ensure_exclusive</code> in the IR (just as <code>inc/dec</code>)? </p>\n<p>Then, we can mark the loop as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">add1</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">FloatArray</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">FloatArray</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">loop</span> <span class=\"o\">(</span><span class=\"kd\">@[</span><span class=\"n\">exclusive</span><span class=\"kd\">]</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">FloatArray</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">FloatArray</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r.size</span> <span class=\"k\">then</span>\n      <span class=\"k\">let</span> <span class=\"n\">idx</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">r.size</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">⟩</span>\n      <span class=\"n\">loop</span> <span class=\"o\">(</span><span class=\"n\">r.set</span> <span class=\"n\">idx</span> <span class=\"o\">(</span><span class=\"n\">r.get</span> <span class=\"n\">idx</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">r</span>\n  <span class=\"n\">loop</span> <span class=\"n\">x</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>Inside the loop function, all uniqueness checking can be removed. Instead, upon calling the function from a normal function, we call <code>lean_ensure_exclusivity</code> on the objects being passed. What's more, calls between \"exclusive\" functions should not require such checks.</p>\n<p>There should still be (affine-)linearity check inside the exclusive\" functions, to ensure that the \"exclusive\" object:</p>\n<ul>\n<li>either dropped</li>\n<li>or used (passed to other function or returned exactly once)<br>\n(Besides, the \"exclusive\" object can be used multiple times by <code>borrow</code> functions. Here <code>borrow</code> may be more restrictive than what we already have in lean in the sense that it should not modify the RC count).</li>\n</ul>\n<p>However, such checks are only performed locally within the \"exclusive\" functions without polluting the whole type system. Also, the runtime implementation is not complicated. Compared with linear types, this does seem more \"adaptive\" as you can still make calls between \"normal\" functions and \"exclusive\" functions without propagating the \"color\" of functions.</p>",
        "id": 411397204,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1704472330
    }
]