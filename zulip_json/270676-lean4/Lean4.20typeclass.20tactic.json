[
    {
        "content": "<p>Is there a useful tactic for proving instance in lean4? I think refine_struct would do the role in lean3, but I can't find any reference for lean4 and it seems that lean4 doesn't understand the tactic.</p>",
        "id": 411600184,
        "sender_full_name": "Won Seong",
        "timestamp": 1704633630
    },
    {
        "content": "<p>What kind of instance do you want to construct?</p>",
        "id": 411600464,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1704633861
    },
    {
        "content": "<p>I want to construct an instance for module. I'm proving myself this fact<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/blob/526457f3dc192dd9195993e0a48c9374b81af9c7/Mathlib/Algebra/Module/Basic.lean#L159-L165\">https://github.com/leanprover-community/mathlib4/blob/526457f3dc192dd9195993e0a48c9374b81af9c7/Mathlib/Algebra/Module/Basic.lean#L159-L165</a></p>",
        "id": 411600603,
        "sender_full_name": "Won Seong",
        "timestamp": 1704634015
    },
    {
        "content": "<p>While I don't understand the code in the link, I'm approaching in a more straightforward but tedious way. But using an instance expression like { smul := ... } doesn't seem like a good style.</p>",
        "id": 411600699,
        "sender_full_name": "Won Seong",
        "timestamp": 1704634116
    },
    {
        "content": "<p>Moreover it's good to fill the fields for the typeclass one by one for my copilot to autocomplete my code well.</p>",
        "id": 411601019,
        "sender_full_name": "Won Seong",
        "timestamp": 1704634487
    },
    {
        "content": "<p>we usually use the <code>where</code> syntax  for instances when they are not being constructed in this fashion</p>",
        "id": 411601562,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1704635113
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/ZSNwJB7d10x7yLK32cQ6snNA/image.png\">image.png</a><br>\nI'm struggling here. How can I make the notation for 1 • b work? I need an instance HSMul R M M.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/ZSNwJB7d10x7yLK32cQ6snNA/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/ZSNwJB7d10x7yLK32cQ6snNA/image.png\"></a></div>",
        "id": 411603318,
        "sender_full_name": "Won Seong",
        "timestamp": 1704636730
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/pvHMNeze8UvNMyc3AR2RKFkA/image.png\">image.png</a><br>\nIs there any way to simplify this precoess?</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/pvHMNeze8UvNMyc3AR2RKFkA/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/pvHMNeze8UvNMyc3AR2RKFkA/image.png\"></a></div>",
        "id": 411604747,
        "sender_full_name": "Won Seong",
        "timestamp": 1704638237
    },
    {
        "content": "<p>Yes, your entire theorem is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Module.compHom#doc\">docs#Module.compHom</a></p>",
        "id": 411605788,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704639161
    },
    {
        "content": "<p>But the proofs don't use show clause. How can I construct instances during a proof and use a show clause?</p>",
        "id": 411606592,
        "sender_full_name": "Won Seong",
        "timestamp": 1704639793
    },
    {
        "content": "<p>Can you paste your code using <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> above rather than an image?</p>",
        "id": 411624392,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704653841
    }
]