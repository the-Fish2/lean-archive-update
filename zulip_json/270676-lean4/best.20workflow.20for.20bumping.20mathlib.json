[
    {
        "content": "<p>Has anybody found a good workflow to bump lean and (several months of) mathlib versions in big libraries of proofs that depend on it? There's probably not a catch-all answer to this, but is there anything better than to have two copies of the code and compare proof states manually? Any tools that give you the point of divergence or that would track renamings or other changes in mathlib and apply parallel changes to another codebase?</p>",
        "id": 446571408,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1719223469
    },
    {
        "content": "<p>The only tooling that exists at present is the deprecation warnings, which we are trying to be more consistent about!</p>",
        "id": 446571698,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719223531
    },
    {
        "content": "<p>Search for <code>leanup</code> for discussion of an ambitious but as yet non-existent tool to help.</p>",
        "id": 446571799,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719223556
    },
    {
        "content": "<p>The deprecation warnings are already super helpful <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 446571965,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1719223586
    },
    {
        "content": "<p>Are you able to share which library? (Possibly privately?)</p>",
        "id": 446571974,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719223588
    },
    {
        "content": "<p>My main piece of advice would be to bump one version at a time -- i.e. using the <code>v4.X.0</code> tags.</p>",
        "id": 446572274,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719223677
    },
    {
        "content": "<p>Mostly verifications of functions using <a href=\"https://github.com/lindy-labs/aegis\">Aegis</a>, including verifying fixed-point arithmetics approximations of real-valued specifications, so changes regarding <code>ZMod</code> and casts cause most of the breakage.</p>",
        "id": 446573132,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1719223876
    },
    {
        "content": "<p>We create a <code>v4.X.0</code> for the first commit when Mathlib has moved to the new release <code>v4.X.0</code>.</p>",
        "id": 446580611,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719225953
    },
    {
        "content": "<p>You could even try bumping to both these tags (at which point you need to deal with language changes) and between, bumping to the commits immediately prior to those tags (the language has not changed, but Mathlib has evolved).</p>",
        "id": 446580853,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719225995
    },
    {
        "content": "<p>Thanks, I'll try that!</p>",
        "id": 446587877,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1719227802
    },
    {
        "content": "<p>At some point I also brought up the idea of using conventional commit's <code>!</code> (e.g. \"feat!\", \"refactor!\"). Maybe too hard though.</p>",
        "id": 446633503,
        "sender_full_name": "llllvvuu",
        "timestamp": 1719240233
    }
]