[
    {
        "content": "<p>This is maybe a very stupid question, but how do I convince <code>ext</code> to use different variable names for different subgoals? Consider this example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">β</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">×</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">γ</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">δ</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">ι</span><span class=\"o\">)}</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">ext</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">z</span>\n</code></pre></div>\n<p>I'd like to have the variable in the first subgoal be named <code>x</code>, and the ones in the second <code>y</code> and <code>z</code>. The invocation above uses <code>x</code> for the first subgoal and <code>x</code> and <code>y</code> for the second. I've tried a bunch of alternatives, but none of them seem to be up to the task.</p>\n<p>Use case: I'm trying to generate <code>ext</code> calls in <code>aesop?</code> without introducing inaccessible hypotheses. I could use <code>unhygienic</code> or <code>rename_i</code>, but that's not very nice.</p>",
        "id": 441888077,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1717238297
    },
    {
        "content": "<p>there isn't one, IIRC the idea is to use multiple <code>ext</code> or <code>ext1</code> calls</p>",
        "id": 441890525,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717239589
    },
    {
        "content": "<p>I could explode the <code>ext</code> call into a tree of <code>ext1</code>s. Would this be better or worse than <code>unhygienic ext</code> in practice? More robust, I guess, but cumbersome for deep <code>ext</code> chains.</p>",
        "id": 441892284,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1717240483
    },
    {
        "content": "<p>From your description, I guess Mathlib style would be something like this, where <code>n, m, k</code> are natural numbers:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">ext</span><span class=\"w\"> </span><span class=\"n\">n</span>\n<span class=\"bp\">.</span><span class=\"w\"> </span><span class=\"n\">ext</span><span class=\"w\"> </span><span class=\"n\">m</span>\n<span class=\"w\">  </span><span class=\"bp\">.</span><span class=\"w\"> </span><span class=\"bp\">...</span>\n<span class=\"bp\">.</span><span class=\"w\"> </span><span class=\"n\">ext</span><span class=\"w\"> </span><span class=\"n\">k</span>\n<span class=\"w\">  </span><span class=\"bp\">.</span><span class=\"w\"> </span><span class=\"bp\">...</span>\n<span class=\"bp\">.</span><span class=\"w\"> </span><span class=\"bp\">...</span>\n</code></pre></div>\n<p>So <code>n</code> straight-line <code>ext1</code>s are combined into <code>ext n</code>, then we make new <code>ext</code> calls for each of the subgoals, etc. This should also be implementable, though it's a bit of a pain.</p>",
        "id": 441893013,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1717241070
    },
    {
        "content": "<p>Would that not be the preferred structure for the remaining generated proof anyway?</p>",
        "id": 441895413,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1717242801
    },
    {
        "content": "<p>A similar wish for legibility in <code>congr</code> calls led to the tactic <code>congrm</code>, so that instead of writing e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">congr!</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"n\">congr</span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n<span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"n\">congr!</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">  </span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"w\">  </span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>one can now write </p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">congrm</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"bp\">?_</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"bp\">?_</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">?_</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Here's the discussion where this was worked out:<br>\n<a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/variant.20syntax.20for.20.60congr'.60/near/282252485\">https://leanprover.zulipchat.com/#narrow/stream/239415-metaprogramming-.2F-tactics/topic/variant.20syntax.20for.20.60congr'.60/near/282252485</a></p>\n<p>Can you think of a syntax which would express the \"tree\" of ext variables you want to introduce in an easy-for-human-parsing way?</p>",
        "id": 441896812,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1717243604
    },
    {
        "content": "<p>My first question would be whether it's important to be able to <code>rintro</code> any inner node of the tree, i.e. the result of some <code>ext1</code> call that is followed by more <code>ext1</code> calls during an <code>ext</code> invocation.</p>\n<p>If not, we only need intro patterns for the subgoals produced at the end. A possible syntax for this would be</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">ext</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Each element of the list would be a space-separated list of <code>rintro</code> patterns, so we'd have one list of patterns for each subgoal and thus one pattern for each variable in a subgoal.</p>",
        "id": 442030397,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1717321627
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span> <a href=\"#narrow/stream/270676-lean4/topic/.60ext.60.20patterns.20for.20multiple.20goals/near/441893013\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">ext</span><span class=\"w\"> </span><span class=\"n\">n</span>\n<span class=\"bp\">.</span><span class=\"w\"> </span><span class=\"n\">ext</span><span class=\"w\"> </span><span class=\"n\">m</span>\n<span class=\"w\">  </span><span class=\"bp\">.</span><span class=\"w\"> </span><span class=\"bp\">...</span>\n<span class=\"bp\">.</span><span class=\"w\"> </span><span class=\"n\">ext</span><span class=\"w\"> </span><span class=\"n\">k</span>\n<span class=\"w\">  </span><span class=\"bp\">.</span><span class=\"w\"> </span><span class=\"bp\">...</span>\n<span class=\"bp\">.</span><span class=\"w\"> </span><span class=\"bp\">...</span>\n</code></pre></div>\n<p>So <code>n</code> straight-line <code>ext1</code>s are combined into <code>ext n</code>, then we make new <code>ext</code> calls for each of the subgoals, etc.</p>\n</blockquote>\n<p>I've implemented this now, so Aesop will generate scripts of this form.</p>",
        "id": 443184485,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1717719447
    }
]