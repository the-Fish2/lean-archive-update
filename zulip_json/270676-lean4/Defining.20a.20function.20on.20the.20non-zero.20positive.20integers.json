[
    {
        "content": "<p>Hi all. I am new to LEAN. So please bear with me if this question is too basic. I have been able to define functions on the natural numbers. But I need to define an arithmetic function, that is, a function that acts on the non-zero positive integers and inherit all the properties of the natural numbers (addition, multiplication etc) naturally. Is there a type for positive integers? If not, how do I approach the arithmetic functions in lean?</p>",
        "id": 434611032,
        "sender_full_name": "Subhajit Bandyopadhyay",
        "timestamp": 1713725737
    },
    {
        "content": "<p>Are you aware of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ArithmeticFunction#doc\">docs#ArithmeticFunction</a> ?</p>",
        "id": 434611591,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713726241
    },
    {
        "content": "<p>About positive integers: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PNat#doc\">docs#PNat</a></p>",
        "id": 434612135,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1713726707
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/Defining.20a.20function.20on.20the.20non-zero.20positive.20integers/near/434611591\">said</a>:</p>\n<blockquote>\n<p>Are you aware of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ArithmeticFunction#doc\">docs#ArithmeticFunction</a> ?</p>\n</blockquote>\n<p>I was not aware of this library. Thank you for pointing this out.</p>",
        "id": 434613289,
        "sender_full_name": "Subhajit Bandyopadhyay",
        "timestamp": 1713727761
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/270676-lean4/topic/Defining.20a.20function.20on.20the.20non-zero.20positive.20integers/near/434612135\">said</a>:</p>\n<blockquote>\n<p>About positive integers: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PNat#doc\">docs#PNat</a></p>\n</blockquote>\n<p>I tried to use this. But I got a \"failed to synthesize instance\" error in the following definition of a function.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">pow_of_two_factor</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">n</span><span class=\"bp\">%</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"k\">then</span>\n    <span class=\"mi\">0</span>\n  <span class=\"k\">else</span>\n    <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">pow_of_two_factor</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 434613357,
        "sender_full_name": "Subhajit Bandyopadhyay",
        "timestamp": 1713727837
    },
    {
        "content": "<p>You should try <code>if (n : Nat) % 2 = 1</code>, otherwise it tries to find an instance for <code>Mod</code> on <code>PNat</code> and fails.</p>",
        "id": 434617082,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1713731387
    },
    {
        "content": "<p>Note this function exists already, I think it's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.log#doc\">docs#Nat.log</a></p>",
        "id": 434626633,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713741501
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.maxPowDiv#doc\">docs#Nat.maxPowDiv</a> 2</p>",
        "id": 434627359,
        "sender_full_name": "Richard Copley",
        "timestamp": 1713742332
    },
    {
        "content": "<p>I guess we should link that to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.floorRoot#doc\">docs#Nat.floorRoot</a> in the docs somehow, cc <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span></p>",
        "id": 434627583,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713742629
    },
    {
        "content": "<p>This is not the same?</p>",
        "id": 434655277,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1713764261
    },
    {
        "content": "<p><code>maxPowDiv</code> corresponds to <code>padicValNat</code>, not <code>floorRoot</code></p>",
        "id": 434655370,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1713764304
    },
    {
        "content": "<p>Aren't they related as <code>log</code> is to <code>nthRoot</code>? Or alternatively, by flipping the arguments to <code>^</code>? I guess I'm surprised to use <code>floor</code> used in one name but <code>max</code> in the other.</p>",
        "id": 434735877,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713788962
    },
    {
        "content": "<p>(I'm not suggesting we merge them, only make the names more similar)</p>",
        "id": 434736071,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713789004
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/Defining.20a.20function.20on.20the.20non-zero.20positive.20integers/near/434735877\">said</a>:</p>\n<blockquote>\n<p>Aren't they related as <code>log</code> is to <code>nthRoot</code>?</p>\n</blockquote>\n<p>Yes, that's correct</p>",
        "id": 434749171,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1713792398
    },
    {
        "content": "<p>What I'm suggesting then is to unify the floor/max parts of the name</p>",
        "id": 435327352,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714029724
    }
]