[
    {
        "content": "<p>Hi. Currently, functions like <code>forallTelescope</code> and <code>lambdaTelescope</code> are useful in that they allow one to traverse terms easily, but don't allow the user to i.e influence the values/types of variables added in the local context. <br>\nTake for example the following function in <a href=\"https://github.com/leanprover/lean4/blob/eefcbbb37bdc897e66ec1bea5fec98b0aecc4e7f/src/Lean/Meta/Reduce.lean#L12\">Lean.Meta.Reduce</a>, which is used to elaborate the <code>#reduce</code> command:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">reduce</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">explicitOnly</span> <span class=\"n\">skipTypes</span> <span class=\"n\">skipProofs</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">visit</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MonadCacheT</span> <span class=\"n\">Expr</span> <span class=\"n\">Expr</span> <span class=\"n\">MetaM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span>\n    <span class=\"n\">checkCache</span> <span class=\"n\">e</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Core.withIncRecDepth</span> <span class=\"k\">do</span>\n      <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"n\">skipTypes</span> <span class=\"bp\">&lt;&amp;&amp;&gt;</span> <span class=\"n\">isType</span> <span class=\"n\">e</span><span class=\"o\">))</span> <span class=\"k\">then</span>\n        <span class=\"n\">return</span> <span class=\"n\">e</span>\n      <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"n\">skipProofs</span> <span class=\"bp\">&lt;&amp;&amp;&gt;</span> <span class=\"n\">isProof</span> <span class=\"n\">e</span><span class=\"o\">))</span> <span class=\"k\">then</span>\n        <span class=\"n\">return</span> <span class=\"n\">e</span>\n      <span class=\"k\">else</span>\n        <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">whnf</span> <span class=\"n\">e</span>\n        <span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"n\">Expr.app</span> <span class=\"bp\">..</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"k\">let</span> <span class=\"n\">f</span>     <span class=\"bp\">←</span> <span class=\"n\">visit</span> <span class=\"n\">e.getAppFn</span>\n          <span class=\"k\">let</span> <span class=\"n\">nargs</span> <span class=\"o\">:=</span> <span class=\"n\">e.getAppNumArgs</span>\n          <span class=\"k\">let</span> <span class=\"n\">finfo</span> <span class=\"bp\">←</span> <span class=\"n\">getFunInfoNArgs</span> <span class=\"n\">f</span> <span class=\"n\">nargs</span>\n          <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">args</span>  <span class=\"o\">:=</span> <span class=\"n\">e.getAppArgs</span>\n          <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[:</span><span class=\"n\">args.size</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n            <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">finfo.paramInfo.size</span> <span class=\"k\">then</span>\n              <span class=\"k\">let</span> <span class=\"n\">info</span> <span class=\"o\">:=</span> <span class=\"n\">finfo.paramInfo</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span><span class=\"bp\">!</span>\n              <span class=\"k\">if</span> <span class=\"bp\">!</span><span class=\"n\">explicitOnly</span> <span class=\"bp\">||</span> <span class=\"n\">info.isExplicit</span> <span class=\"k\">then</span>\n                <span class=\"n\">args</span> <span class=\"bp\">←</span> <span class=\"n\">args.modifyM</span> <span class=\"n\">i</span> <span class=\"n\">visit</span>\n            <span class=\"k\">else</span>\n              <span class=\"n\">args</span> <span class=\"bp\">←</span> <span class=\"n\">args.modifyM</span> <span class=\"n\">i</span> <span class=\"n\">visit</span>\n          <span class=\"k\">if</span> <span class=\"n\">f.isConstOf</span> <span class=\"bp\">``</span><span class=\"n\">Nat.succ</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">args.size</span> <span class=\"bp\">==</span> <span class=\"mi\">1</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">args</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">!.</span><span class=\"n\">isNatLit</span> <span class=\"k\">then</span>\n            <span class=\"n\">return</span> <span class=\"n\">mkRawNatLit</span> <span class=\"o\">(</span><span class=\"n\">args</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">!.</span><span class=\"n\">natLit</span><span class=\"bp\">?.</span><span class=\"n\">get</span><span class=\"bp\">!</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n          <span class=\"k\">else</span>\n            <span class=\"n\">return</span> <span class=\"n\">mkAppN</span> <span class=\"n\">f</span> <span class=\"n\">args</span>\n        <span class=\"bp\">|</span> <span class=\"n\">Expr.lam</span> <span class=\"bp\">..</span>        <span class=\"bp\">=&gt;</span> <span class=\"n\">lambdaTelescope</span> <span class=\"n\">e</span> <span class=\"k\">fun</span> <span class=\"n\">xs</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">mkLambdaFVars</span> <span class=\"n\">xs</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">visit</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n        <span class=\"bp\">|</span> <span class=\"n\">Expr.forallE</span> <span class=\"bp\">..</span>    <span class=\"bp\">=&gt;</span> <span class=\"n\">forallTelescope</span> <span class=\"n\">e</span> <span class=\"k\">fun</span> <span class=\"n\">xs</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">mkForallFVars</span> <span class=\"n\">xs</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">visit</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n        <span class=\"bp\">|</span> <span class=\"n\">Expr.proj</span> <span class=\"n\">n</span> <span class=\"n\">i</span> <span class=\"n\">s</span> <span class=\"bp\">..</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">mkProj</span> <span class=\"n\">n</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">visit</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n        <span class=\"bp\">|</span> <span class=\"n\">_</span>                  <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">e</span>\n  <span class=\"n\">visit</span> <span class=\"n\">e</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">run</span>\n</code></pre></div>\n<p>This function visits and reduces every redex. However, it doesn't reduce binder types. For example, <code>#reduce (x : id Nat) -&gt; Fin x</code> doesn't reduce <code>id Nat</code>. My initial attempt at fixing such things has been to manipulate the local context during the traversal, by overwriting variables to the local context and modifying their types/values, as such:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">forallTelescope</span> <span class=\"n\">e</span> <span class=\"k\">fun</span> <span class=\"n\">xs</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">lctx</span> <span class=\"bp\">←</span> <span class=\"n\">getLCtx</span>\n  <span class=\"n\">for</span> <span class=\"n\">e</span> <span class=\"k\">in</span> <span class=\"n\">xs</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">lcdl</span> <span class=\"o\">:=</span> <span class=\"n\">lctx.findFVar</span><span class=\"bp\">?</span> <span class=\"n\">e</span> <span class=\"bp\">|</span> <span class=\"n\">unreachable</span><span class=\"bp\">!</span>\n    <span class=\"k\">let</span> <span class=\"n\">value</span> <span class=\"bp\">←</span> <span class=\"n\">withReader</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">ctx</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span><span class=\"n\">ctx</span> <span class=\"k\">with</span> <span class=\"n\">lctx</span> <span class=\"o\">:=</span> <span class=\"n\">lctx</span><span class=\"o\">})</span>\n      <span class=\"o\">(</span><span class=\"n\">visit</span> <span class=\"n\">lcdl.value</span><span class=\"o\">)</span>\n    <span class=\"n\">lctx</span> <span class=\"o\">:=</span> <span class=\"n\">LocalContext.addDecl</span> <span class=\"n\">lctx</span> <span class=\"o\">(</span><span class=\"n\">lcdl.setValue</span> <span class=\"n\">value</span><span class=\"o\">)</span>\n  <span class=\"n\">withReader</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">ctx</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span><span class=\"n\">ctx</span> <span class=\"k\">with</span> <span class=\"n\">lctx</span> <span class=\"o\">:=</span> <span class=\"n\">lctx</span><span class=\"o\">})</span>\n    <span class=\"o\">(</span><span class=\"n\">mkForallFVars</span> <span class=\"n\">xs</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">visit</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>but this doesn't look elegant nor efficient to me. Is there any nice way to do something like this, apart from writing separate <code>telescope</code> functions ?</p>",
        "id": 411755332,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1704726099
    },
    {
        "content": "<p>This is one example where I've encountered the need to do such a thing, a second one, which occurred to me now, happens <a href=\"https://github.com/leanprover/lean4/blob/eefcbbb37bdc897e66ec1bea5fec98b0aecc4e7f/src/Lean/Elab/StructInst.lean#L775\">here</a>: the <code>let</code> declarations' bodies don't get reduced before being added to the local context, leading to some metavariables not getting assigned. Fixing this resolves <a href=\"https://github.com/leanprover/lean4/issues/3146\">#3146</a></p>",
        "id": 411756344,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1704726372
    }
]