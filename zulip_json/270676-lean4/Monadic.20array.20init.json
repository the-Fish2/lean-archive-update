[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Array.initM</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">fn</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">arr</span> <span class=\"o\">:=</span> <span class=\"n\">Array.mkEmpty</span> <span class=\"n\">n</span>\n  <span class=\"n\">for</span> <span class=\"n\">i_in_range</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[:</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"k\">have</span> <span class=\"n\">ok</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">Membership.get_elem_helper</span> <span class=\"n\">i_in_range</span> <span class=\"n\">rfl</span>\n    <span class=\"n\">arr</span> <span class=\"o\">:=</span> <span class=\"n\">arr.push</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">fn</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">ok</span><span class=\"o\">⟩)</span>\n  <span class=\"n\">return</span> <span class=\"n\">arr</span>\n</code></pre></div>\n<p>It would be nice to have something this in the standard library. What do you think?</p>",
        "id": 436387474,
        "sender_full_name": "James Sully",
        "timestamp": 1714534898
    },
    {
        "content": "<p>we have <code>Array.ofFn.{u} {α : Type u} {n : Nat} (f : Fin n → α) : Array α</code>. To be consistent maybe the monadic version should be called <code>ofFnM</code>?</p>",
        "id": 436387818,
        "sender_full_name": "James Sully",
        "timestamp": 1714535242
    },
    {
        "content": "<p>Technically it should be <code>Applicative</code> I think, but I'm not sure how to write that. I think I'd need <code>Traversable</code>, but that's in mathlib.</p>",
        "id": 436387936,
        "sender_full_name": "James Sully",
        "timestamp": 1714535333
    },
    {
        "content": "<p>One thing I'm confused about is why <code>n</code> is implicit in <code>ofFn</code>? It seems like in most cases it wouldn't be possible to infer it, and <code>Array.ofFn 10 f</code> seems more ergonomic than <code>Array.ofFn (n := 10) f</code></p>",
        "id": 436419390,
        "sender_full_name": "James Sully",
        "timestamp": 1714536470
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"621161\">James Sully</span> <a href=\"#narrow/stream/270676-lean4/topic/Monadic.20array.20init/near/436387474\">said</a>:</p>\n<blockquote>\n<p>It would be nice to have something this in the standard library. What do you think?</p>\n</blockquote>\n<p>I'd like to add it to the LeanColls <a href=\"https://gallicch.io/LeanColls/docs/LeanColls/Classes/Seq.html\">Seq</a> class and put that implementation in the <code>Seq Array</code> instance, if that's alright with you?</p>",
        "id": 436563303,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1714593375
    },
    {
        "content": "<p>feel free!</p>",
        "id": 436591681,
        "sender_full_name": "James Sully",
        "timestamp": 1714607433
    }
]