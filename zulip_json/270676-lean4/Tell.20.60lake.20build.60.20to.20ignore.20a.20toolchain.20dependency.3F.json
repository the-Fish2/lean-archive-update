[
    {
        "content": "<p>My scenario is that I'm working with a custom lean toolchain that differs from some version X of Lean in a minor way that does not affect the generation of <code>.olean</code> files. I want to use this toolchain with a project that has been compiled for toolchain X, but when I change the <code>lean-toolchain</code> file and run <code>lake build</code>, this causes the entire project to rebuild (which is not ideal for mathlib4, for example).</p>\n<p>So, my question is, is there a way to make lake ignore any changes to the toolchain, in the case that the user is confident that using the new toolchain doesn't require a rebuild?</p>",
        "id": 425940331,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1710172335
    },
    {
        "content": "<p>A feature for this use case was recently implemented in <a href=\"https://github.com/leanprover/lean4/pull/3609\">lean4#3609</a>. However, this only works if the custom Lean toolchain is built with <code>CHECK_OLEAN_VERSION=OFF</code> (the default for development versions, but not Lean releases). As otherwsie, Lean itself will fail to load oleans from a different Lean version.</p>",
        "id": 426000025,
        "sender_full_name": "Mac Malone",
        "timestamp": 1710187599
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span>  That worked perfectly, and just in time, thanks so much! I have a couple follow-up questions:</p>\n<ol>\n<li>I now have to use the <code>lake</code> binary that has been patched with your change, which is in <code>stage1/bin</code>. Is there a \"correct\" way to replace my current <code>lake</code> with this using Lean tooling? I guess I could always replace the binary in <code>.elan/bin/lake</code>, but that doesn't feel right.</li>\n<li>When I do <code>export LEAN_GITHASH=...</code> and open a file importing mathlib in my editor, it seems that interactively, Lean is still trying to re-build all of the mathlib dependencies. Is this feature indeed limited to just <code>lake build</code>, or is there perhaps something wrong on my end?</li>\n</ol>",
        "id": 426143312,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1710255107
    },
    {
        "content": "<ol>\n<li>The way to switch between versions of <code>lake</code> is to use either toolchain overrides or <code>+version</code>. <code>.elan/bin/lake</code> is just a symlink to <code>elan</code>, you don't want to replace it. For example I have a toolchain called <code>lean4</code> pointing to my development directory (i.e. <code>path/to/lean4/build/release/stage1</code>), set up via <code>elan toolchain link lean4 &lt;path&gt;</code>, so if I write <code>lake +lean4 ...</code>  and it will run the development version of <code>lake</code> in the current directory.</li>\n</ol>",
        "id": 426168210,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710261373
    },
    {
        "content": "<ol start=\"2\">\n<li>Most likely the issue is that the lean server is not using your patched version. If you use a toolchain override it will affect the server as well, but I think there is also a place you can specify this in the vscode settings</li>\n</ol>",
        "id": 426168946,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710261569
    },
    {
        "content": "<p>Also, on (2), if you are using <code>export</code> rather than the VSCode setting for configuring server environment variables, you need to start VSCode from terminal after the <code>export</code> (which I imagine you are doing, but just wanted to make sure).</p>",
        "id": 426169344,
        "sender_full_name": "Mac Malone",
        "timestamp": 1710261705
    },
    {
        "content": "<p>I seem to be having trouble with adding mathlib as a dependency in general. I've followed <a href=\"https://github.com/leanprover-community/mathlib4/wiki/Using-mathlib4-as-a-dependency\">the instructions here</a>, but with the attached example project when I do <code>lake update &amp;&amp; lake exe cache get! &amp;&amp; lake build</code>, it looks like it is still attempting to re-build all of mathlib. Do you notice anything wrong with it?<br>\n<a href=\"/user_uploads/3121/CxerkukgcIqVr_m0FouBTaKQ/Laketest.tar.gz\">Laketest.tar.gz</a></p>",
        "id": 426354898,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1710340778
    },
    {
        "content": "<p>Oh, I noticed that the output of <code>cat .lake/packages/*/lean-toolchain lean-toolchain</code> gives me a few different toolchains (though mathlib, std and the project's toolchains are in sync). Could that be why?</p>",
        "id": 426355279,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1710340881
    },
    {
        "content": "<p>No, if yours and mathlib's are in sync, that should be enough</p>",
        "id": 426355501,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1710340934
    },
    {
        "content": "<p>Try removing the <code>.lake</code> folder in your project and <code>lake exe cache get</code> again</p>",
        "id": 426355580,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1710340955
    },
    {
        "content": "<p>Hmm, unfortunately that didn't work for me either... I don't know if the start of my build trace would be informative at all:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">15</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Laketest.Basic</span>\n<span class=\"o\">[</span><span class=\"mi\">1131</span><span class=\"bp\">/</span><span class=\"mi\">1166</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Laketest</span>\n<span class=\"o\">[</span><span class=\"mi\">4287</span><span class=\"bp\">/</span><span class=\"mi\">4293</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Laketest.Basic</span>\n<span class=\"o\">[</span><span class=\"mi\">4287</span><span class=\"bp\">/</span><span class=\"mi\">4294</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Laketest</span>\n<span class=\"o\">[</span><span class=\"mi\">4287</span><span class=\"bp\">/</span><span class=\"mi\">4295</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Mathlib.Init.Data.Nat.Notation</span>\n<span class=\"o\">[</span><span class=\"mi\">4287</span><span class=\"bp\">/</span><span class=\"mi\">4295</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Mathlib.Mathport.Rename</span>\n<span class=\"o\">[</span><span class=\"mi\">4287</span><span class=\"bp\">/</span><span class=\"mi\">4814</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.CodeAction.Basic</span>\n<span class=\"o\">[</span><span class=\"mi\">4287</span><span class=\"bp\">/</span><span class=\"mi\">4814</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Tactic.Init</span>\n<span class=\"o\">[</span><span class=\"mi\">4287</span><span class=\"bp\">/</span><span class=\"mi\">4814</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Mathlib.Lean.EnvExtension</span>\n<span class=\"o\">[</span><span class=\"mi\">4287</span><span class=\"bp\">/</span><span class=\"mi\">4814</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Lean.Meta.Basic</span>\n<span class=\"o\">[</span><span class=\"mi\">4287</span><span class=\"bp\">/</span><span class=\"mi\">4814</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Tactic.OpenPrivate</span>\n<span class=\"o\">[</span><span class=\"mi\">4287</span><span class=\"bp\">/</span><span class=\"mi\">4814</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.CodeAction.Deprecated</span>\n<span class=\"o\">[</span><span class=\"mi\">4287</span><span class=\"bp\">/</span><span class=\"mi\">4814</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.CodeAction.Attr</span>\n<span class=\"o\">[</span><span class=\"mi\">4287</span><span class=\"bp\">/</span><span class=\"mi\">4814</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Lean.Position</span>\n<span class=\"o\">[</span><span class=\"mi\">4287</span><span class=\"bp\">/</span><span class=\"mi\">4814</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Data.Nat.Lemmas</span>\n<span class=\"o\">[</span><span class=\"mi\">4287</span><span class=\"bp\">/</span><span class=\"mi\">4814</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Mathlib.Lean.Meta.Simp</span>\n<span class=\"o\">[</span><span class=\"mi\">4287</span><span class=\"bp\">/</span><span class=\"mi\">4814</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Data.Nat.Basic</span>\n<span class=\"o\">[</span><span class=\"mi\">4287</span><span class=\"bp\">/</span><span class=\"mi\">5081</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Mathlib.Util.MemoFix</span>\n<span class=\"o\">[</span><span class=\"mi\">4287</span><span class=\"bp\">/</span><span class=\"mi\">5092</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Tactic.Alias</span>\n<span class=\"o\">[</span><span class=\"mi\">4287</span><span class=\"bp\">/</span><span class=\"mi\">5240</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Mathlib.Lean.Expr.ReplaceRec</span>\n<span class=\"o\">[</span><span class=\"mi\">4287</span><span class=\"bp\">/</span><span class=\"mi\">5240</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Tactic.Relation.Rfl</span>\n<span class=\"o\">[</span><span class=\"mi\">4287</span><span class=\"bp\">/</span><span class=\"mi\">5240</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Data.Int.Order</span>\n<span class=\"o\">[</span><span class=\"mi\">4289</span><span class=\"bp\">/</span><span class=\"mi\">5876</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Util.LibraryNote</span>\n<span class=\"o\">[</span><span class=\"mi\">4289</span><span class=\"bp\">/</span><span class=\"mi\">5876</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Tactic.Lint.Basic</span>\n<span class=\"o\">[</span><span class=\"mi\">4290</span><span class=\"bp\">/</span><span class=\"mi\">6604</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Tactic.Lint</span>\n<span class=\"o\">[</span><span class=\"mi\">4291</span><span class=\"bp\">/</span><span class=\"mi\">8385</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Mathlib.Lean.Meta</span>\n<span class=\"o\">[</span><span class=\"mi\">4292</span><span class=\"bp\">/</span><span class=\"mi\">8463</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Data.List.Basic</span>\n<span class=\"o\">[</span><span class=\"mi\">4293</span><span class=\"bp\">/</span><span class=\"mi\">8577</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Tactic.Lint.Misc</span>\n<span class=\"o\">[</span><span class=\"mi\">4294</span><span class=\"bp\">/</span><span class=\"mi\">8577</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Mathlib.Lean.Elab.Tactic.Basic</span>\n<span class=\"o\">[</span><span class=\"mi\">4295</span><span class=\"bp\">/</span><span class=\"mi\">8577</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Mathlib.Tactic.Relation.Trans</span>\n</code></pre></div>",
        "id": 426356531,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1710341198
    },
    {
        "content": "<p>8577 dependencies? That's very odd</p>",
        "id": 426357332,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1710341398
    },
    {
        "content": "<p>What does your lake-manifest.json look like?</p>",
        "id": 426357723,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1710341486
    },
    {
        "content": "<p>Here it is:</p>\n<div class=\"codehilite\" data-code-language=\"JSON\"><pre><span></span><code><span class=\"p\">{</span><span class=\"nt\">\"version\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"p\">,</span>\n<span class=\"w\"> </span><span class=\"nt\">\"packagesDir\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\".lake/packages\"</span><span class=\"p\">,</span>\n<span class=\"w\"> </span><span class=\"nt\">\"packages\"</span><span class=\"p\">:</span>\n<span class=\"w\"> </span><span class=\"p\">[{</span><span class=\"nt\">\"url\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"https://github.com/leanprover/std4\"</span><span class=\"p\">,</span>\n<span class=\"w\">   </span><span class=\"nt\">\"type\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"git\"</span><span class=\"p\">,</span>\n<span class=\"w\">   </span><span class=\"nt\">\"subDir\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">null</span><span class=\"p\">,</span>\n<span class=\"w\">   </span><span class=\"nt\">\"rev\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"ff9850c4726f6b9fb8d8e96980c3fcb2900be8bd\"</span><span class=\"p\">,</span>\n<span class=\"w\">   </span><span class=\"nt\">\"name\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"std\"</span><span class=\"p\">,</span>\n<span class=\"w\">   </span><span class=\"nt\">\"manifestFile\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"lake-manifest.json\"</span><span class=\"p\">,</span>\n<span class=\"w\">   </span><span class=\"nt\">\"inputRev\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"main\"</span><span class=\"p\">,</span>\n<span class=\"w\">   </span><span class=\"nt\">\"inherited\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span>\n<span class=\"w\">   </span><span class=\"nt\">\"configFile\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"lakefile.lean\"</span><span class=\"p\">},</span>\n<span class=\"w\">  </span><span class=\"p\">{</span><span class=\"nt\">\"url\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"https://github.com/leanprover-community/quote4\"</span><span class=\"p\">,</span>\n<span class=\"w\">   </span><span class=\"nt\">\"type\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"git\"</span><span class=\"p\">,</span>\n<span class=\"w\">   </span><span class=\"nt\">\"subDir\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">null</span><span class=\"p\">,</span>\n<span class=\"w\">   </span><span class=\"nt\">\"rev\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"fd760831487e6835944e7eeed505522c9dd47563\"</span><span class=\"p\">,</span>\n<span class=\"w\">   </span><span class=\"nt\">\"name\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Qq\"</span><span class=\"p\">,</span>\n<span class=\"w\">   </span><span class=\"nt\">\"manifestFile\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"lake-manifest.json\"</span><span class=\"p\">,</span>\n<span class=\"w\">   </span><span class=\"nt\">\"inputRev\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"master\"</span><span class=\"p\">,</span>\n<span class=\"w\">   </span><span class=\"nt\">\"inherited\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span>\n<span class=\"w\">   </span><span class=\"nt\">\"configFile\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"lakefile.lean\"</span><span class=\"p\">},</span>\n<span class=\"w\">  </span><span class=\"p\">{</span><span class=\"nt\">\"url\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"https://github.com/leanprover-community/aesop\"</span><span class=\"p\">,</span>\n<span class=\"w\">   </span><span class=\"nt\">\"type\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"git\"</span><span class=\"p\">,</span>\n<span class=\"w\">   </span><span class=\"nt\">\"subDir\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">null</span><span class=\"p\">,</span>\n<span class=\"w\">   </span><span class=\"nt\">\"rev\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"056ca0fa8f5585539d0b940f532d9750c3a2270f\"</span><span class=\"p\">,</span>\n<span class=\"w\">   </span><span class=\"nt\">\"name\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"aesop\"</span><span class=\"p\">,</span>\n<span class=\"w\">   </span><span class=\"nt\">\"manifestFile\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"lake-manifest.json\"</span><span class=\"p\">,</span>\n<span class=\"w\">   </span><span class=\"nt\">\"inputRev\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"master\"</span><span class=\"p\">,</span>\n<span class=\"w\">   </span><span class=\"nt\">\"inherited\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span>\n<span class=\"w\">   </span><span class=\"nt\">\"configFile\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"lakefile.lean\"</span><span class=\"p\">},</span>\n<span class=\"w\">  </span><span class=\"p\">{</span><span class=\"nt\">\"url\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"https://github.com/leanprover-community/ProofWidgets4\"</span><span class=\"p\">,</span>\n<span class=\"w\">   </span><span class=\"nt\">\"type\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"git\"</span><span class=\"p\">,</span>\n<span class=\"w\">   </span><span class=\"nt\">\"subDir\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">null</span><span class=\"p\">,</span>\n<span class=\"w\">   </span><span class=\"nt\">\"rev\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"fb65c476595a453a9b8ffc4a1cea2db3a89b9cd8\"</span><span class=\"p\">,</span>\n<span class=\"w\">   </span><span class=\"nt\">\"name\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"proofwidgets\"</span><span class=\"p\">,</span>\n<span class=\"w\">   </span><span class=\"nt\">\"manifestFile\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"lake-manifest.json\"</span><span class=\"p\">,</span>\n<span class=\"w\">   </span><span class=\"nt\">\"inputRev\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"v0.0.30\"</span><span class=\"p\">,</span>\n<span class=\"w\">   </span><span class=\"nt\">\"inherited\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span>\n<span class=\"w\">   </span><span class=\"nt\">\"configFile\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"lakefile.lean\"</span><span class=\"p\">},</span>\n<span class=\"w\">  </span><span class=\"p\">{</span><span class=\"nt\">\"url\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"https://github.com/leanprover/lean4-cli\"</span><span class=\"p\">,</span>\n<span class=\"w\">   </span><span class=\"nt\">\"type\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"git\"</span><span class=\"p\">,</span>\n<span class=\"w\">   </span><span class=\"nt\">\"subDir\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">null</span><span class=\"p\">,</span>\n<span class=\"w\">   </span><span class=\"nt\">\"rev\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"a751d21d4b68c999accb6fc5d960538af26ad5ec\"</span><span class=\"p\">,</span>\n<span class=\"w\">   </span><span class=\"nt\">\"name\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Cli\"</span><span class=\"p\">,</span>\n<span class=\"w\">   </span><span class=\"nt\">\"manifestFile\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"lake-manifest.json\"</span><span class=\"p\">,</span>\n<span class=\"w\">   </span><span class=\"nt\">\"inputRev\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"main\"</span><span class=\"p\">,</span>\n<span class=\"w\">   </span><span class=\"nt\">\"inherited\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span>\n<span class=\"w\">   </span><span class=\"nt\">\"configFile\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"lakefile.lean\"</span><span class=\"p\">},</span>\n<span class=\"w\">  </span><span class=\"p\">{</span><span class=\"nt\">\"url\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"https://github.com/leanprover-community/import-graph.git\"</span><span class=\"p\">,</span>\n<span class=\"w\">   </span><span class=\"nt\">\"type\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"git\"</span><span class=\"p\">,</span>\n<span class=\"w\">   </span><span class=\"nt\">\"subDir\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">null</span><span class=\"p\">,</span>\n<span class=\"w\">   </span><span class=\"nt\">\"rev\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"64d082eeaad1a8e6bbb7c23b7a16b85a1715a02f\"</span><span class=\"p\">,</span>\n<span class=\"w\">   </span><span class=\"nt\">\"name\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"importGraph\"</span><span class=\"p\">,</span>\n<span class=\"w\">   </span><span class=\"nt\">\"manifestFile\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"lake-manifest.json\"</span><span class=\"p\">,</span>\n<span class=\"w\">   </span><span class=\"nt\">\"inputRev\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"main\"</span><span class=\"p\">,</span>\n<span class=\"w\">   </span><span class=\"nt\">\"inherited\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span>\n<span class=\"w\">   </span><span class=\"nt\">\"configFile\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"lakefile.lean\"</span><span class=\"p\">},</span>\n<span class=\"w\">  </span><span class=\"p\">{</span><span class=\"nt\">\"url\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"https://github.com/leanprover-community/mathlib4\"</span><span class=\"p\">,</span>\n<span class=\"w\">   </span><span class=\"nt\">\"type\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"git\"</span><span class=\"p\">,</span>\n<span class=\"w\">   </span><span class=\"nt\">\"subDir\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">null</span><span class=\"p\">,</span>\n<span class=\"w\">   </span><span class=\"nt\">\"rev\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"fa48894a5d2780c6593a224003a660ca039e3e8f\"</span><span class=\"p\">,</span>\n<span class=\"w\">   </span><span class=\"nt\">\"name\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"mathlib\"</span><span class=\"p\">,</span>\n<span class=\"w\">   </span><span class=\"nt\">\"manifestFile\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"lake-manifest.json\"</span><span class=\"p\">,</span>\n<span class=\"w\">   </span><span class=\"nt\">\"inputRev\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"v4.7.0-rc1\"</span><span class=\"p\">,</span>\n<span class=\"w\">   </span><span class=\"nt\">\"inherited\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">,</span>\n<span class=\"w\">   </span><span class=\"nt\">\"configFile\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"lakefile.lean\"</span><span class=\"p\">}],</span>\n<span class=\"w\"> </span><span class=\"nt\">\"name\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Laketest\"</span><span class=\"p\">,</span>\n<span class=\"w\"> </span><span class=\"nt\">\"lakeDir\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\".lake\"</span><span class=\"p\">}</span>\n</code></pre></div>",
        "id": 426357996,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1710341549
    },
    {
        "content": "<p>I'm stumped</p>",
        "id": 426358770,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1710341750
    },
    {
        "content": "<p>That's expected behaviour. <code>Compiling</code> steps (which generate native <code>.o</code> files and not oleans) are not cached, just <code>Building</code> ones. You're getting them because your target is a <code>lean_exe</code>. On the bright side, <code>Compiling</code> the whole of mathlib should be fast since it is mostly theorems. Most projects using mathlib as a dependency have no <code>lean_exe</code> targets, just <code>lean_lib</code> ones, and therefore you don't see that often.</p>",
        "id": 426373963,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1710345682
    },
    {
        "content": "<p>Ugh, I can never remember which is which</p>",
        "id": 426375352,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1710346026
    },
    {
        "content": "<p>I'm not saying this is desired behaviour, though. Being able to use mathlib's theorems without <code>Compiling</code> everything would be nice.</p>",
        "id": 426377666,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1710346667
    },
    {
        "content": "<p>Alright, I guess I will accept it then, fortunately it does finish compiling everything within a reasonable amount of time.</p>\n<p>However, I guess that making use of this new feature with a project that has a mathlib dependency means that you'll break the practice of keeping your project toolchain the same as that of your mathlib dependency (if you want to take advantage of pre-compiled olean files). <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span>  I noticed that this led to the following issues:</p>\n<ol>\n<li>When I run <code>lake update</code>, it overrides my <code>lean-toolchain</code> file with that of the mathlib dependency.</li>\n<li>If I then reset the <code>lean-toolchain</code> file to the custom toolchain, I can no longer run <code>lake exe cache get</code>, it results in the error:</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Dependency</span> <span class=\"n\">Mathlib</span> <span class=\"n\">uses</span> <span class=\"n\">a</span> <span class=\"n\">different</span> <span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">toolchain</span>\n  <span class=\"n\">Project</span> <span class=\"n\">uses</span> <span class=\"n\">rish987</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">lean2dk</span><span class=\"bp\">-</span><span class=\"n\">v1</span>\n  <span class=\"n\">Mathlib</span> <span class=\"n\">uses</span> <span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">v4.7.0</span><span class=\"bp\">-</span><span class=\"n\">rc2</span>\n\n<span class=\"n\">The</span> <span class=\"n\">cache</span> <span class=\"n\">will</span> <span class=\"n\">not</span> <span class=\"n\">work</span> <span class=\"n\">unless</span> <span class=\"n\">your</span> <span class=\"n\">project's</span> <span class=\"n\">toolchain</span> <span class=\"n\">matches</span> <span class=\"n\">Mathlib's</span> <span class=\"n\">toolchain</span>\n<span class=\"n\">This</span> <span class=\"n\">can</span> <span class=\"n\">be</span> <span class=\"n\">achieved</span> <span class=\"kd\">by</span> <span class=\"n\">copying</span> <span class=\"n\">the</span> <span class=\"n\">contents</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">file</span> <span class=\"bp\">`.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">toolchain</span><span class=\"bp\">`</span>\n<span class=\"n\">into</span> <span class=\"n\">the</span> <span class=\"bp\">`</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">toolchain</span><span class=\"bp\">`</span> <span class=\"n\">file</span> <span class=\"n\">at</span> <span class=\"n\">the</span> <span class=\"n\">root</span> <span class=\"n\">directory</span> <span class=\"n\">of</span> <span class=\"n\">your</span> <span class=\"n\">project</span>\n</code></pre></div>\n<p>I think I would expect both of these to not happen if did an <code>export LEAN_GITHASH=[hash of v4.7.0-rc2]</code> first (though I understand this is a separate feature request to what was handled in <a href=\"https://github.com/leanprover/lean4/pull/3609\">lean4#3609</a>).</p>",
        "id": 426572693,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1710431565
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"373814\">@Rish Vaishnav</span> Ideally. you should not be changing the <code>lean-toolchain</code> file for mathlib-dependent projects. Mathlib relies on the toolchain matching itself for things like cache to work (as you observed). Instead, you should use <code>elan override</code> to override the package toolchain with your custom one.</p>",
        "id": 426573295,
        "sender_full_name": "Mac Malone",
        "timestamp": 1710431735
    },
    {
        "content": "<p>If you need to use a different toolchain for your dependent package (e.g., a PR toolchain) but want to still use mathlib's cache, that would be a feature request for Mathlib. IIRC, I believe it could work (the cache could download the files for mathlib's toolchain and just let Lake handle whether to rebuild). It would probably need a flag on Cache itself, though, b/c it still wants to present that error for the standard use case.</p>",
        "id": 426575069,
        "sender_full_name": "Mac Malone",
        "timestamp": 1710432150
    },
    {
        "content": "<p>Alright, I'm actually quite happy with using <code>elan override</code>(along with setting <code>LEAN_GITHASH</code>). I won't insist on any new feature in Mathlib (for now), since my problem seems to be very specific. Thank you so much for the help!</p>",
        "id": 426603498,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1710440923
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"373814\">@Rish Vaishnav</span>, your alternative is to create a branch of Mathlib that uses your desired toolchain, and then refer directly that that in your lakefile.lean.</p>",
        "id": 426638440,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710454395
    },
    {
        "content": "<p>As soon as you push a branch to Mathlib, CI will start generating oleans that <code>cache</code> can use.</p>",
        "id": 426638471,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710454418
    },
    {
        "content": "<p>Oh cool, I think I will be taking advantage of that in the CI for my project repo. This <code>LEAN_GITHASH</code> trick should still be very useful for me as I iterate locally on my custom lean4 toolchain.</p>",
        "id": 426705111,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1710495336
    }
]