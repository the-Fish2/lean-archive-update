[
    {
        "content": "<p>In the spirit of Patrick's <a href=\"#narrow/stream/287929-mathlib4/topic/monad.20puzzle\">recent post</a>, here is another puzzle: can you guess the error in the code below, without using Lean?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"bp\">↔</span> <span class=\"n\">False</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>Trivia: there are a couple of porting notes about this.</p>",
        "id": 426043583,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1710210732
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>It helped knowing that there was an error to be able to figure it out: <code>cases</code> supports multiple targets if the recursor for the types supports it (which I've never seen used in the wild yet), and the syntax is <code>cases x,y,z</code></p>\n<p>This fixes it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"bp\">↔</span> <span class=\"n\">False</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">),</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n</code></pre></div>\n</div></div>",
        "id": 426044639,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710211570
    },
    {
        "content": "<p>Correct!</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>also this fixes it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"bp\">↔</span> <span class=\"n\">False</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"bp\">;</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n</code></pre></div>\n</div></div>",
        "id": 426045222,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1710212056
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/error.20puzzle/near/426044639\">said</a>:</p>\n<blockquote>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>It helped knowing that there was an error to be able to figure it out: <code>cases</code> supports multiple targets if the recursor for the types supports it (which I've never seen used in the wild yet), and the syntax is <code>cases x,y,z</code></p>\n<p>This fixes it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"bp\">↔</span> <span class=\"n\">False</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">),</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p></div></div><br>\n</p>\n</blockquote>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>This is useful for induction with for example <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.le_induction#doc\">docs#Nat.le_induction</a>, but what's the expected usecase for this <code>cases</code> extension? A similar thing? </p>\n</div></div>",
        "id": 426045713,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1710212430
    },
    {
        "content": "<p>By the way, <code>use</code> has a similar issue</p>",
        "id": 426166617,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710260936
    },
    {
        "content": "<p>Another one: what is the error in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"bp\">∨</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨⟩</span>\n    <span class=\"bp\">|</span> <span class=\"n\">false</span>\n              <span class=\"n\">exact</span> <span class=\"bp\">.</span><span class=\"n\">intro</span>\n              <span class=\"n\">exact</span> <span class=\"bp\">.</span><span class=\"n\">intro</span>\n    <span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"bp\">.</span><span class=\"n\">intro</span>\n</code></pre></div>",
        "id": 426230648,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1710286855
    }
]