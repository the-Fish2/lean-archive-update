[
    {
        "content": "<p>I want to create a GUI which can interface with Lean. Can you point me in the right direction for how to interface with lean? For example if I was making a GUI in C++ or python how would I call the Lean library and get results back? Alternatively is there a web API? Can I run Lean from the command line?</p>\n<p>Thanks.</p>",
        "id": 443507479,
        "sender_full_name": "Mr Proof",
        "timestamp": 1717870995
    },
    {
        "content": "<p>I see I can call it from the command line with:<br>\nlean --stdin<br>\nAnd then press control+Z to run it. Is there a more interactive way to use it?</p>",
        "id": 443535882,
        "sender_full_name": "Mr Proof",
        "timestamp": 1717891408
    },
    {
        "content": "<p>When you say \"interface with Lean\", do you mean interface with a program written in lean, or with lean itself? For the latter, is there a reason you can't just invoke it with a shell?</p>",
        "id": 443537442,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1717893175
    },
    {
        "content": "<blockquote>\n<p>how would I call the Lean library and get results back</p>\n</blockquote>\n<p>I'm not sure what you mean by this, but it sounds like maybe there is a misunderstanding of what Lean does.</p>\n<p>If you are writing (or reading) proofs in Lean, the standard, interactive way to use Lean is through an IDE which allows you to step through a proof and see the goal state at each step. I recommend starting with one of the tutorials at <a href=\"https://leanprover-community.github.io/learn.html\">https://leanprover-community.github.io/learn.html</a></p>",
        "id": 443538031,
        "sender_full_name": "Ted Hwa",
        "timestamp": 1717893862
    },
    {
        "content": "<p>For example if I make a Windows Form in C++ with buttons, and text boxes, I want to call the lean program by sending it commands and receive the results such as current goals etc. <br>\nI couldn't really see any C++ API or such like to call Lean for example as you would do with a C++ DLL.<br>\nAlso, I couldn't find the documentation for interacting with Lean via the command line</p>",
        "id": 443538036,
        "sender_full_name": "Mr Proof",
        "timestamp": 1717893870
    },
    {
        "content": "<p>Yes, basically I want to make my own IDE. Which will have menus and graphical interface and typsetting. Preferably running Lean as a server which I can send code to and get back results.</p>",
        "id": 443538044,
        "sender_full_name": "Mr Proof",
        "timestamp": 1717893895
    },
    {
        "content": "<p>Lean implements the Language Server Protocol, which afaik also the vs code plugin uses to interface with lean.</p>",
        "id": 443547341,
        "sender_full_name": "Ira Fesefeldt",
        "timestamp": 1717900866
    },
    {
        "content": "<p>Thanks. That seems to be what I'm looking for. If anyone has any examples of using the LSP that would be very useful.</p>",
        "id": 443549656,
        "sender_full_name": "Mr Proof",
        "timestamp": 1717903203
    },
    {
        "content": "<p>I would look at the lean vscode exension: <a href=\"https://github.com/leanprover/vscode-lean4/tree/master\">https://github.com/leanprover/vscode-lean4/tree/master</a></p>\n<p>Some of the machinery for working nicely with LSP is built in, I believe it's in the docs under <code>Lean/Server</code> or some stuff that has the LSP namespace: <a href=\"https://leanprover-community.github.io/mathlib4_docs/\">https://leanprover-community.github.io/mathlib4_docs/</a></p>",
        "id": 443550258,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1717903804
    },
    {
        "content": "<p>Also the nvim extension: <a href=\"https://github.com/Julian/lean.nvim\">https://github.com/Julian/lean.nvim</a></p>",
        "id": 443550282,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1717903834
    },
    {
        "content": "<p>The nvim one might actually be more useful than the vscode extension to get you off the ground. I suspect vscode itself might be a more noisy middleman in the conversation between the Lean server and the client.</p>",
        "id": 443550416,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1717903974
    },
    {
        "content": "<p>I think neovim also implements its own lsp client and its plugins \"only\" do the details.</p>",
        "id": 443551182,
        "sender_full_name": "Ira Fesefeldt",
        "timestamp": 1717904731
    },
    {
        "content": "<p>I managed to access Lean from python via its <a href=\"https://github.com/leanprover-community/repl\">repl</a></p>\n<p>Some code for a function call:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>function code</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">json</span>\n<span class=\"kn\">import</span> <span class=\"nn\">subprocess</span>\n<span class=\"kn\">import</span> <span class=\"nn\">tempfile</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">run_lean</span><span class=\"p\">(</span><span class=\"n\">command</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Create a temporary Lean file with the desired content</span>\n    <span class=\"k\">with</span> <span class=\"n\">tempfile</span><span class=\"o\">.</span><span class=\"n\">NamedTemporaryFile</span><span class=\"p\">(</span><span class=\"n\">delete</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">suffix</span><span class=\"o\">=</span><span class=\"s2\">\".lean\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">temp_file</span><span class=\"p\">:</span>\n        <span class=\"n\">temp_file</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">command</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">())</span>\n        <span class=\"n\">temp_file_path</span> <span class=\"o\">=</span> <span class=\"n\">temp_file</span><span class=\"o\">.</span><span class=\"n\">name</span>\n\n    <span class=\"c1\"># Prepare the JSON command to be passed to the Lean REPL</span>\n    <span class=\"n\">json_command</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">({</span><span class=\"s2\">\"path\"</span><span class=\"p\">:</span> <span class=\"n\">temp_file_path</span><span class=\"p\">,</span> <span class=\"s2\">\"allTactics\"</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">})</span>\n\n    <span class=\"c1\"># Run the command using subprocess</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span>\n        <span class=\"sa\">f</span><span class=\"s1\">'echo </span><span class=\"se\">\\'</span><span class=\"si\">{</span><span class=\"n\">json_command</span><span class=\"si\">}</span><span class=\"se\">\\'</span><span class=\"s1\"> | lake exe repl'</span><span class=\"p\">,</span>\n        <span class=\"n\">shell</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">stdout</span><span class=\"o\">=</span><span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">PIPE</span><span class=\"p\">,</span>\n        <span class=\"n\">stderr</span><span class=\"o\">=</span><span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">PIPE</span><span class=\"p\">,</span>  <span class=\"c1\"># Capture stderr but do not print</span>\n        <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">30</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"c1\"># Capture the response and clean up the temporary file</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span>\n    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">temp_file_path</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">response</span>\n</code></pre></div>\n</div></div>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>sample function call</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"c1\"># Example usage</span>\n<span class=\"n\">lean_command</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"\"</span>\n<span class=\"s2\">import Mathlib</span>\n<span class=\"s2\">example {x y : Real} (h : x ≤ y ∧ x ≠ y) : ¬ y ≤ x := by</span>\n<span class=\"s2\">intro h1</span>\n<span class=\"s2\">have h2 : x = y := le_antisymm h.1 h1</span>\n<span class=\"s2\">exact h.2 h2</span>\n<span class=\"s2\">\"\"\"</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">run_lean</span><span class=\"p\">(</span><span class=\"n\">lean_command</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"Response: </span><span class=\"si\">{</span><span class=\"n\">response</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n</code></pre></div>\n</div></div>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>response from the repl</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>Response: {\"tactics\":<br>\n [{\"tactic\": \"intro h1\",<br>\n   \"proofState\": 0,<br>\n   \"pos\": {\"line\": 4, \"column\": 0},<br>\n   \"goals\": \"x y : ℝ h : x ≤ y ∧ x ≠ y ⊢ ¬y ≤ x\",<br>\n   \"endPos\": {\"line\": 4, \"column\": 8}},<br>\n  {\"tactic\": \"have h2 : x = y := le_antisymm h.1 h1\",<br>\n   \"proofState\": 1,<br>\n   \"pos\": {\"line\": 5, \"column\": 0},<br>\n   \"goals\": \"x y : ℝ h : x ≤ y ∧ x ≠ y h1 : y ≤ x ⊢ False\",<br>\n   \"endPos\": {\"line\": 5, \"column\": 37}},<br>\n  {\"tactic\": \"exact h.2 h2\",<br>\n   \"proofState\": 2,<br>\n   \"pos\": {\"line\": 6, \"column\": 0},<br>\n   \"goals\": \"x y : ℝ h : x ≤ y ∧ x ≠ y h1 : y ≤ x h2 : x = y ⊢ False\",<br>\n   \"endPos\": {\"line\": 6, \"column\": 12}}],<br>\n \"env\": 0}</p>\n</div></div>",
        "id": 443571335,
        "sender_full_name": "Neil Ramsamooj",
        "timestamp": 1717920318
    },
    {
        "content": "<p>Unless you really want to implement a <em>text editor</em> for Lean, using the REPL or implementing your own frontend on top of the language processing architecture is the way to go. LSP is very specific to the interaction mode of text editors.</p>",
        "id": 443574069,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1717922989
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"221921\">@Marc Huisinga</span> Yes, REPL might be better. <br>\nAh I see it here. <a href=\"https://github.com/leanprover-community/repl\">https://github.com/leanprover-community/repl</a> I believe this is what is being used with the Lean-Jupyter experiment. </p>\n<p>Yes that seems to be working. I need some help still understanding what all the different parts do such as \"lake\". According to the instructions I can make this work with the standard stdin and stdout.</p>\n<p>Ideally I'd just like to send REPL commands to lean which is running as a server or client and then get back the replies. So the next step is to work out how to run lean as a client or server. Although I could probably get it working by reading and writing to the stdin/stdout from my program. @Neil Ramsamooj code thanks your code will be useful. Although it would be nice to be able to keep the state in a more interactive way.</p>\n<p>I see OpenAI uses something similar: <a href=\"https://github.com/openai/lean-gym\">https://github.com/openai/lean-gym</a></p>\n<p>BTW when I call \"lean --run repl\" it give me \"REPL is unknown package\" because repl.lean has imports like REPL.JSON . I can see those files in the REPL folder. So not sure why it's not seeing them. my commandline is on the folder with repl.lean in it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">repl</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">unknown</span><span class=\"w\"> </span><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"n\">REPL'</span>\n<span class=\"n\">You</span><span class=\"w\"> </span><span class=\"n\">might</span><span class=\"w\"> </span><span class=\"n\">need</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"n\">C</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\</span><span class=\"n\">me</span><span class=\"bp\">\\</span><span class=\"n\">Documents</span><span class=\"bp\">\\</span><span class=\"n\">REPL</span><span class=\"bp\">\\</span><span class=\"n\">repl</span><span class=\"bp\">-</span><span class=\"n\">master'</span><span class=\"w\"> </span><span class=\"n\">as</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">workspace</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">your</span><span class=\"w\"> </span><span class=\"n\">editor</span>\n</code></pre></div>\n<p><strong>Update</strong><br>\nI've got it working from C#. Starting a  process calling \"cmd\" with arguments:</p>\n<p><code>p.StartInfo.Arguments =\"echo #eval 2+3| lean --stdin\"</code></p>\n<p>from the folder with repl.lean in it. It's progress but this only will call one command at a time. And I'm trying to have it be interactive. So it's still not quite right yet. But perhaps this is the best I can do for now.</p>\n<p><strong>Update 2</strong><br>\nI got it working with the  </p>\n<p><code>p.StartInfo.Arguments =\"echo {\"cmd\":\"#eval 2+3\"} | lake exe repl.\"</code></p>\n<p>So progress..</p>\n<p>Now when I send commands to the stdin, if I put two \\n\\n at the end then it exits out. But if I only put one \\n then it doesn't send me a message. So I'm still working out how to get it working interactively.</p>\n<p>I must be missing something because I am not getting the replies until it quits out or an error occurs. I think REPL is not flushing it's buffer or something.</p>",
        "id": 443635953,
        "sender_full_name": "Mr Proof",
        "timestamp": 1717964617
    },
    {
        "content": "<p>Note that the LSP is not a lean thing, it’s a standard protocol (developed by Microsoft) that’s commonly used in vscode, and now other IDEs. Lean merely implements it. But iirc lean also goes beyond it, with the infoview which isn’t part of the LSP spec officially?</p>\n<p>The infoview can display arbitrary react components, and it can even be interactive with buttons. Maybe you could write your app in there. Look at Lean ProofWidgets for examples.</p>\n<p>But either way, I wish you luck if you do decide to go the c++ way. Can learn a lot about LSP etc that way :)</p>",
        "id": 443694828,
        "sender_full_name": "Max Nowak 🐉",
        "timestamp": 1718002257
    },
    {
        "content": "<p>Yes, LSP looks good but it's probably too powerful for my needs. The repl seems about right if I can get it working. I'll try both. I might need LSP if I need it to have a searchable set of tactics.<br>\nI prefer to make it in a separate program so I can use custom graphics and latex and such like. I have already been able to get it to interface with maxima.  The idea is to kind of hide some of the type theory behind the scenes and make the theorem proving a bit more intuitive.  Whether that's achievable I don't know.</p>",
        "id": 443837061,
        "sender_full_name": "Mr Proof",
        "timestamp": 1718044063
    }
]