[
    {
        "content": "<p>What would be best place to look within the lean 4 C source in order to construct a Lean 4 AST programmatically using C or C++.</p>\n<p>The goal is to use Lean but develope a different frontend DSL that once parsed constructs a Lean 4 AST.</p>",
        "id": 410063682,
        "sender_full_name": "Suresh Kannan",
        "timestamp": 1703622049
    },
    {
        "content": "<p>So, most of the lean compiler is written in Lean. Here is the quick rundown of how Lean is compiled:</p>\n<ol>\n<li><strong>parsing</strong> takes an input file and returns a concrete syntax tree (CST)</li>\n<li><strong>elaboration</strong> takes the CST down to lean expressions (<code>Lean.Expr</code>)</li>\n<li><strong>typechecking</strong> occurs on expressions (I think it's actually mutually recursive with elaboration? this part is complicated)</li>\n<li><strong>code generation</strong> takes expressions to an intermediate representation (<code>Lean.IR.Expr</code> I think?) and then from the IR down to C</li>\n</ol>\n<p>So, if you want to use Lean's typechecker, you'll have to interact with the frontend components, which are written in Lean. This is called \"reverse FFI\" and I think people have discussed how to do this on other Zulip threads.</p>",
        "id": 410072969,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1703629401
    },
    {
        "content": "<p>Most of the time the easiest language to interface with Lean compilation is Lean itself. So, the easiest way to build Lean CSTs and Exprs programmatically is to write your program in Lean.</p>\n<p>There are a few projects which provide alternate frontends to Lean -- off the top of my head, <a href=\"https://github.com/leanprover-community/lean4game\">lean4game</a> and <a href=\"https://github.com/PatrickMassot/lean-verbose\">lean-verbose</a>, both of them are written in Lean itself</p>",
        "id": 410073301,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1703629682
    },
    {
        "content": "<p>Thank you James. Very useful, I will grok some of this and take heed of writing it in lean itself.</p>",
        "id": 410074500,
        "sender_full_name": "Suresh Kannan",
        "timestamp": 1703630708
    },
    {
        "content": "<p>The other alternative frontend is the <a href=\"https://github.com/leanprover-community/repl\">REPL</a>.</p>",
        "id": 411100121,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1704326414
    },
    {
        "content": "<p>There's also an frontend API at <a href=\"https://github.com/semorrison/lean-training-data/blob/master/TrainingData/Frontend.lean\">https://github.com/semorrison/lean-training-data/blob/master/TrainingData/Frontend.lean</a> that may be useful.</p>",
        "id": 411100229,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1704326464
    }
]