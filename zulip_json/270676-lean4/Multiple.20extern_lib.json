[
    {
        "content": "<p>Can multiple <code>extern_lib</code>s use symbols from each other? Can one in package A depend on one from package B? It fails for me when compiling a lean file. The command line in the error ends with a single \"--load-dynlib=.../externA.so\". While looking at other threads here it seems like there also should be an \"<a href=\"http://externB.so\">externB.so</a>\"?</p>",
        "id": 446752726,
        "sender_full_name": "Daniil Kisel",
        "timestamp": 1719278641
    },
    {
        "content": "<p>Unfortunately, the order of <code>extern_lib</code> within a package is not controllable and thus they cannot reliable depend on symbols from one another. Between packages, they follow the topological order of the dependencies (i.e., the order  of <code>require</code> statements and the order in the manifest). The issue in question will be fixed in the fiuture (and the FFI experience as a whole improved), but it will still be a while until then. In the meantime, the standard workaround is define the <code>extern_lib</code> as an ordinary <code>target</code> and just link to the libraries manualyl via <code>moreLinkArgs</code> (and <code>moreLeanArgs</code> in the case of precompiled modules). </p>\n<p>As to your second question, external libraries from the packages of imports should be inherited by modules as-is. So, that sounds like an unexpected problem. Do you have an example (ideally a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>) you should share?</p>",
        "id": 446990574,
        "sender_full_name": "Mac Malone",
        "timestamp": 1719348023
    },
    {
        "content": "<p>Here is a minimal example:<br>\n<a href=\"https://github.com/KislyjKisel/mwe-require-externlib\">A</a>, <a href=\"https://github.com/KislyjKisel/mwe-require-externlib2\">B</a>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">trace</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">.&gt;</span><span class=\"w\"> </span><span class=\"n\">LEAN_PATH</span><span class=\"bp\">=././.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">b</span><span class=\"bp\">/.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">././.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"w\"> </span><span class=\"n\">LD_LIBRARY_PATH</span><span class=\"bp\">=././.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">././.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">oopa</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">stable</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"w\"> </span><span class=\"bp\">././././</span><span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"bp\">./././.</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"bp\">././.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">olean</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"bp\">././.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">ilean</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"bp\">././.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">ir</span><span class=\"bp\">/</span><span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"c1\">--load-dynlib=././.lake/build/lib/libleanffia.so --json</span>\n<span class=\"n\">info</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">stderr</span><span class=\"o\">:</span>\n<span class=\"n\">libc</span><span class=\"bp\">++</span><span class=\"n\">abi</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">terminating</span><span class=\"w\"> </span><span class=\"n\">due</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">uncaught</span><span class=\"w\"> </span><span class=\"n\">exception</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">type</span><span class=\"w\"> </span><span class=\"n\">lean</span><span class=\"bp\">::</span><span class=\"n\">exception</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"n\">loading</span><span class=\"w\"> </span><span class=\"n\">library</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">././.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">libleanffia</span><span class=\"bp\">.</span><span class=\"n\">so</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">undefined</span><span class=\"w\"> </span><span class=\"n\">symbol</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">b_class</span>\n<span class=\"n\">error</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"w\"> </span><span class=\"n\">exited</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"mi\">134</span>\n<span class=\"n\">Some</span><span class=\"w\"> </span><span class=\"n\">builds</span><span class=\"w\"> </span><span class=\"n\">logged</span><span class=\"w\"> </span><span class=\"n\">failures</span><span class=\"o\">:</span>\n<span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"n\">A</span>\n<span class=\"n\">error</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">build</span><span class=\"w\"> </span><span class=\"n\">failed</span>\n</code></pre></div>",
        "id": 446997809,
        "sender_full_name": "Daniil Kisel",
        "timestamp": 1719349881
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"587706\">@Daniil Kisel</span> Oh, I see that your <code>A</code> library / module does not import anything from the package <code>b</code>. This is the problem. Lake only considers the dependencies of a module to be that of its imports (not everything the package it is in depends on). Thus, to make this work you need a <code>B</code> module (of a <code>lean_lib B</code>)  in the package <code>b</code> that the <code>A</code> module imports. If the goal is just to inherit the <code>extern_lib</code>, the <code>B</code> module can be empty.</p>",
        "id": 447010995,
        "sender_full_name": "Mac Malone",
        "timestamp": 1719354612
    },
    {
        "content": "<p>I've updated A to use B and it still produces the same error.</p>",
        "id": 447011387,
        "sender_full_name": "Daniil Kisel",
        "timestamp": 1719354806
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"587706\">@Daniil Kisel</span> <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span> That does seem like a bug. I will take a deeper look into it when I can. In the meantime, could you file an issue on the <a href=\"https://github.com/leanprover/lean4\">lean4 repository</a> about this? That will help me keep track of it. <span aria-label=\"thank you\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"thank you\">:thank_you:</span></p>",
        "id": 447012827,
        "sender_full_name": "Mac Malone",
        "timestamp": 1719355374
    },
    {
        "content": "<p>Done (<a href=\"https://github.com/leanprover/lean4/pull/4565\">lean4#4565</a>)</p>",
        "id": 447014606,
        "sender_full_name": "Daniil Kisel",
        "timestamp": 1719356202
    },
    {
        "content": "<p>Thanks! <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span></p>",
        "id": 447015277,
        "sender_full_name": "Mac Malone",
        "timestamp": 1719356508
    },
    {
        "content": "<p>A fix for thiss issue is up at <a href=\"https://github.com/leanprover/lean4/pull/4566\">lean4#4566</a>. I discovered that the issue here is actually that Lake is using <code>--load-dynlib</code> to load <code>extern_lib</code> of the main package (e.g.,  <code>mwe-require-externlib</code>) when it should notbe,  rather than not loading the <code>extern_lib</code> of the dependent package when it should. That is, since <code>precompileModules</code> is not turned on for either package, it should not be passing any <code>--load-dynlib</code> at all.</p>",
        "id": 447041566,
        "sender_full_name": "Mac Malone",
        "timestamp": 1719366933
    },
    {
        "content": "<p>(In other words, for the examples, it should only be linking in the external libaries when building the final executable, not while compiling the Lean modules.)</p>",
        "id": 447041811,
        "sender_full_name": "Mac Malone",
        "timestamp": 1719367049
    }
]