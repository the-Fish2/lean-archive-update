[
    {
        "content": "<p>I have the following example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">StateM.get_set_get_set</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">StateM</span> <span class=\"n\">σ</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">s'</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">get</span>\n      <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">s'</span><span class=\"o\">)</span>\n      <span class=\"k\">let</span> <span class=\"n\">s''</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">get</span>\n      <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">s''</span><span class=\"o\">)</span>\n      <span class=\"n\">q</span> <span class=\"n\">s''</span><span class=\"o\">)</span>\n    <span class=\"bp\">=</span>\n    <span class=\"o\">(</span><span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">s'</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">get</span>\n      <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">f</span> <span class=\"n\">s'</span><span class=\"o\">)</span>\n      <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">s'</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"n\">s'</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">StateT.run_bind</span><span class=\"o\">,</span> <span class=\"n\">StateT.run_set</span><span class=\"o\">,</span> <span class=\"n\">StateT.run_get</span><span class=\"o\">,</span> <span class=\"n\">Id.bind_eq</span><span class=\"o\">,</span> <span class=\"n\">Id.pure_eq</span><span class=\"o\">]</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">test</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">StateM</span> <span class=\"n\">ℕ</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">get</span>\n    <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">get</span>\n    <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">get</span>\n    <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">get</span>\n    <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">get</span>\n    <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">get</span>\n    <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo'</span> <span class=\"o\">:</span> <span class=\"n\">StateM</span> <span class=\"n\">ℕ</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">get</span>\n    <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">6</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"n\">foo'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"n\">foo'</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- simp_rw [StateM.get_set_get_set] -- simp made no progress</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">StateM.get_set_get_set</span><span class=\"o\">]</span> <span class=\"c1\">-- works fine</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">StateM.get_set_get_set</span><span class=\"o\">]</span> <span class=\"c1\">-- works fine</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">StateM.get_set_get_set</span><span class=\"o\">]</span> <span class=\"c1\">-- works fine</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Why does <code>rw</code> work, but <code>simp_rw</code>/<code>simp only</code> doesn't? Is there a way to get the simplifier to work here?</p>",
        "id": 410812029,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1704184645
    },
    {
        "content": "<p>your simp lemma has a spurious <code>(s : σ)</code> argument</p>",
        "id": 410812989,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704185278
    },
    {
        "content": "<p>So it does. This fixes it, thanks.</p>",
        "id": 410813151,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1704185352
    },
    {
        "content": "<p>I don't seem to get any unused argument warning on the lemma for that, though.</p>",
        "id": 410813299,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1704185431
    },
    {
        "content": "<p><code>#lint</code> spots it</p>",
        "id": 410813402,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704185506
    },
    {
        "content": "<p>(among other issues)</p>",
        "id": 410813459,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704185526
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/cneX35ITnPiDdhMWonJHri-X/Screenshot-2024-01-02-at-12.52.54-AM.png\">Screenshot-2024-01-02-at-12.52.54-AM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/cneX35ITnPiDdhMWonJHri-X/Screenshot-2024-01-02-at-12.52.54-AM.png\" title=\"Screenshot-2024-01-02-at-12.52.54-AM.png\"><img src=\"/user_uploads/3121/cneX35ITnPiDdhMWonJHri-X/Screenshot-2024-01-02-at-12.52.54-AM.png\"></a></div>",
        "id": 410813544,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1704185582
    },
    {
        "content": "<p>Here you can see it catches the <code>h</code> argument as unused, so clearly the VSCode linter is working on some level, but it doesn't catch the <code>n</code> or <code>s</code> argument.</p>",
        "id": 410813689,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1704185651
    },
    {
        "content": "<p>It seems to have something to do with autoimplicits:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">StateM</span> <span class=\"n\">σ</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span> <span class=\"c1\">-- q unused</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">StateM</span> <span class=\"n\">σ</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span> <span class=\"c1\">-- a, q unused</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">StateM</span> <span class=\"n\">σ</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span> <span class=\"c1\">-- a, q unused</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">StateM</span> <span class=\"n\">σ</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span> <span class=\"c1\">-- a, q unused</span>\n</code></pre></div>",
        "id": 410813949,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704185808
    },
    {
        "content": "<p>my guess is that there is some not-yet-solved metavariable involved and the unused argument linter pessimistically assumes it could depend on <code>a</code></p>",
        "id": 410814112,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704185886
    }
]