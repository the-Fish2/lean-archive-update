[
    {
        "content": "<p>For the umpteenth time now, specifying universe levels explicitly significantly speeds up a file and I would like to understand why. </p>\n<p>The new example comes from taking <a href=\"https://github.com/leanprover/lean4/pull/4085\">lean#4085</a>, which imposes some reducibility constraints when trying to insert coercions for elaborating binary operations, and seeing the impact. </p>\n<p>For simplicity, I just cherry picked that on top of v4.8.0-rc1 and benchmarked it in <a href=\"https://github.com/leanprover-community/mathlib4/pull/12718\">#12718</a>.</p>",
        "id": 437471287,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715093635
    },
    {
        "content": "<p>This resulted in a +800B increase in instructions for one file -- <code>AlgebraicGeometry.Restrict</code></p>",
        "id": 437471602,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715093733
    },
    {
        "content": "<p>The cause was the attempts to synthesize <code>CoeT</code> instances using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.coerceSimple%3F#doc\">docs#Lean.Meta.coerceSimple?</a>.</p>",
        "id": 437472452,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715093998
    },
    {
        "content": "<p>Specifying the universe levels for <code>Scheme</code> makes it much faster. The failing attempts are about 10x faster</p>",
        "id": 437473161,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715094190
    },
    {
        "content": "<p>Universe metavariables are creeping in from looking at the trace and slowing down things.</p>",
        "id": 437474124,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715094486
    },
    {
        "content": "<p>Why is the private function <code>Lean.Meta.preprocessLevels</code> in <code>Lean.Meta.SynthInstance</code> not hooked into anything?</p>",
        "id": 437504107,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715105164
    },
    {
        "content": "<p>It become dead code in 99e8a98f067054ef70fcf15ad4af87d0c27ed7a5, back in 2021. Not sure beyond that.</p>",
        "id": 437751156,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715215016
    },
    {
        "content": "<p>Oh, and Leo has just removed it in <a href=\"https://github.com/leanprover/lean4/pull/4112\">lean4#4112</a>.</p>",
        "id": 437751210,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715215066
    },
    {
        "content": "<p>I managed to isolate one difference in the massive trace. Compare </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000002</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Prefunctor.obj.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n                          <span class=\"o\">(</span><span class=\"n\">CategoryTheory.Functor.toPrefunctor.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n                            <span class=\"o\">(</span><span class=\"n\">CategoryTheory.Functor.comp.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n                              <span class=\"o\">(</span><span class=\"n\">CategoryTheory.Functor.rightOp.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n                                <span class=\"n\">AlgebraicGeometry.Spec.toLocallyRingedSpace.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span>\n                              <span class=\"n\">AlgebraicGeometry.LocallyRingedSpace.</span><span class=\"bp\">Γ.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}))</span>\n                          <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Prefunctor.obj.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n                          <span class=\"o\">(</span><span class=\"n\">CategoryTheory.Functor.toPrefunctor.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n                            <span class=\"o\">(</span><span class=\"n\">AlgebraicGeometry.PresheafedSpace.presheaf.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n                              <span class=\"o\">(</span><span class=\"n\">AlgebraicGeometry.SheafedSpace.toPresheafedSpace.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n                                <span class=\"o\">(</span><span class=\"n\">AlgebraicGeometry.LocallyRingedSpace.toSheafedSpace.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span>\n                                  <span class=\"o\">(</span><span class=\"n\">AlgebraicGeometry.Scheme.toLocallyRingedSpace.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span>\n                                    <span class=\"o\">(</span><span class=\"n\">Prefunctor.obj.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n                                      <span class=\"o\">(</span><span class=\"n\">CategoryTheory.Functor.toPrefunctor.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n                                        <span class=\"n\">AlgebraicGeometry.Scheme.Spec.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span>\n                                      <span class=\"o\">(</span><span class=\"n\">Opposite.op.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"n\">R</span><span class=\"o\">)))))))</span>\n                          <span class=\"o\">(</span><span class=\"n\">Opposite.op.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Top.top.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}))</span>\n</code></pre></div>\n<p>and <a href=\"https://gist.github.com/mattrobball/e172874c729012664bc50f19d30a31a8\">this</a></p>",
        "id": 437978913,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715346270
    },
    {
        "content": "<p>It starts out as </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">011830</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Prefunctor.obj.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.170686</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.170686</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.170686</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n                            <span class=\"bp\">?</span><span class=\"n\">u.170686</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n                          <span class=\"o\">(</span><span class=\"n\">CategoryTheory.Functor.toPrefunctor.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.170686</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.170686</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.170686</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.170686</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n                            <span class=\"o\">(</span><span class=\"n\">CategoryTheory.Functor.comp.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.170686</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.170686</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.170686</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.170686</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.170686</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n                                <span class=\"bp\">?</span><span class=\"n\">u.170686</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n                              <span class=\"o\">(</span><span class=\"n\">CategoryTheory.Functor.rightOp.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.170686</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.170686</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.170686</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.170686</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n                                <span class=\"n\">AlgebraicGeometry.Spec.toLocallyRingedSpace.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.170686</span><span class=\"o\">})</span>\n                              <span class=\"n\">AlgebraicGeometry.LocallyRingedSpace.</span><span class=\"bp\">Γ.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.170686</span><span class=\"o\">}))</span>\n                          <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Prefunctor.obj.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.170686</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.170686</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.170686</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.170686</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n                          <span class=\"o\">(</span><span class=\"n\">CategoryTheory.Functor.toPrefunctor.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.170686</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.170686</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.170686</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.170686</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n                            <span class=\"o\">(</span><span class=\"n\">AlgebraicGeometry.PresheafedSpace.presheaf.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.170686</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.170686</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.170686</span><span class=\"o\">}</span>\n                              <span class=\"o\">(</span><span class=\"n\">AlgebraicGeometry.SheafedSpace.toPresheafedSpace.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.170686</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.170686</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.170686</span><span class=\"o\">}</span>\n                                <span class=\"o\">(</span><span class=\"n\">AlgebraicGeometry.LocallyRingedSpace.toSheafedSpace.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.170686</span><span class=\"o\">}</span>\n                                  <span class=\"o\">(</span><span class=\"n\">AlgebraicGeometry.Scheme.toLocallyRingedSpace.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.170686</span><span class=\"o\">}</span>\n                                    <span class=\"o\">(</span><span class=\"n\">Prefunctor.obj.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.170686</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.170686</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.170686</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.170686</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n                                      <span class=\"o\">(</span><span class=\"n\">CategoryTheory.Functor.toPrefunctor.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.170686</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.170686</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.170686</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n                                          <span class=\"bp\">?</span><span class=\"n\">u.170686</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n                                        <span class=\"n\">AlgebraicGeometry.Scheme.Spec.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.170686</span><span class=\"o\">})</span>\n                                      <span class=\"o\">(</span><span class=\"n\">Opposite.op.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.170686</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"n\">R</span><span class=\"o\">)))))))</span>\n                          <span class=\"o\">(</span><span class=\"n\">Opposite.op.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.170686</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Top.top.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.170686</span><span class=\"o\">}))</span>\n</code></pre></div>\n<p>and then finishes 2000+ lines later with </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.isLevelDefEq</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000000</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">u.170686</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">u.170686</span>\n</code></pre></div>",
        "id": 437979357,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715346479
    },
    {
        "content": "<p>There are 33 such rfl checks in the trace</p>",
        "id": 437980290,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715346868
    },
    {
        "content": "<p>I am guessing unification is going to a cache for the first one since I cannot tell they are defeq from looking at them and it dispatches it immediately.</p>",
        "id": 437980460,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715346943
    },
    {
        "content": "<p>Moderate improvement if you allow caching of level metavariables</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"w\"> </span> Benchmark                                                    Metric         Change\n<span class=\"w\"> </span> ==================================================================================\n<span class=\"gi\">+ ~Mathlib.Algebra.Category.ModuleCat.Basic                    instructions   -34.7%</span>\n<span class=\"gi\">+ ~Mathlib.Algebra.Category.ModuleCat.ChangeOfRings            instructions    -7.6%</span>\n<span class=\"gi\">+ ~Mathlib.Algebra.Homology.Bifunctor                          instructions    -9.9%</span>\n<span class=\"gi\">+ ~Mathlib.Algebra.Homology.HomotopyCategory.Pretriangulated   instructions    -5.1%</span>\n<span class=\"gi\">+ ~Mathlib.AlgebraicGeometry.GammaSpecAdjunction               instructions   -19.9%</span>\n<span class=\"gi\">+ ~Mathlib.CategoryTheory.Closed.FunctorCategory               instructions   -33.9%</span>\n<span class=\"gi\">+ ~Mathlib.CategoryTheory.GradedObject.Trifunctor              instructions    -6.5%</span>\n<span class=\"gi\">+ ~Mathlib.CategoryTheory.Idempotents.FunctorExtension         instructions    -6.9%</span>\n<span class=\"gi\">+ ~Mathlib.CategoryTheory.Triangulated.Functor                 instructions   -15.3%</span>\n<span class=\"gi\">+ ~Mathlib.CategoryTheory.Triangulated.Opposite                instructions   -17.7%</span>\n<span class=\"gi\">+ ~Mathlib.Geometry.RingedSpace.OpenImmersion                  instructions    -8.3%</span>\n<span class=\"gi\">+ ~Mathlib.Geometry.RingedSpace.PresheafedSpace                instructions   -22.0%</span>\n</code></pre></div>\n<p>-600B instructions overall</p>",
        "id": 438023843,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715363783
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/12807\">#12807</a> for reference</p>",
        "id": 438023938,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715363825
    },
    {
        "content": "<p>Well, at least it worked for the naughty declaration that generated the trace. <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AlgebraicGeometry#doc\">docs#AlgebraicGeometry</a>.SpecΓIdentity no longer needs the flag <code>backward.isDefEq.lazyWhnfCore false</code> set and doesn't need a heartbeat bump (previously 800000)</p>",
        "id": 438035214,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715369167
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">getDefEqCacheKind</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">DefEqCacheKind</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n<span class=\"bp\">-</span>  <span class=\"k\">if</span> <span class=\"n\">t.hasMVar</span> <span class=\"bp\">||</span> <span class=\"n\">s.hasMVar</span> <span class=\"bp\">||</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">read</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">canUnfold</span><span class=\"bp\">?.</span><span class=\"n\">isSome</span> <span class=\"k\">then</span>\n<span class=\"bp\">+</span>  <span class=\"k\">if</span> <span class=\"n\">t.data.hasExprMVar</span> <span class=\"bp\">||</span> <span class=\"n\">s.data.hasExprMVar</span> <span class=\"bp\">||</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">read</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">canUnfold</span><span class=\"bp\">?.</span><span class=\"n\">isSome</span> <span class=\"k\">then</span>\n     <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">transient</span>\n   <span class=\"k\">else</span>\n     <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">permanent</span>\n</code></pre></div>\n<p>actual change for reference</p>",
        "id": 438036404,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715369874
    },
    {
        "content": "<p>So we are now about one week, two weeks in and still nobody has a clue about why we get these crazy speedups just by randomly adding explicit universe annotations?</p>",
        "id": 438055602,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1715380440
    },
    {
        "content": "<p>The results are cached with the explicit universes but not with the universe metavariables. So when Lean sees it again it can use the fact in the cache in the former situation whereas in the latter it has to redo the check.</p>",
        "id": 438056169,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715380751
    },
    {
        "content": "<p>(Any reason you wrote <code>t.data.hasExprMVar</code> instead of <code>t.hasExprMVar</code>? I'm guessing you unfolded the definition of <code>t.hasMVar</code> and then deleted the level mvar case?)</p>",
        "id": 438056809,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715381112
    },
    {
        "content": "<p>Yes. I just wanted to do what existed except for the level mvar check.</p>",
        "id": 438060033,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715383028
    },
    {
        "content": "<p>I'm sceptical that it's going to be possible to cache more here, but not particularly sceptical. :-)</p>\n<p>Actually, mostly in these examples I'm surprised that the universe metavariables don't get assigned way earlier. Perhaps we're missing some opportunity to assign them, and fixing that would then remove the desire for caching with metavariables present?</p>",
        "id": 438067699,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715390253
    }
]