[
    {
        "content": "<p>Consider the following MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"n\">where</span>\n<span class=\"w\">  </span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">‚Ñ§</span>\n\n<span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"n\">‚Ñ§</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">s.n</span>\n\n<span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">test1</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n\n<span class=\"kd\">theorem</span><span class=\"w\"> </span><span class=\"n\">test1_eq</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"n\">s.n</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">test1</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"kd\">by</span>\n<span class=\"w\">  </span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">H</span>\n<span class=\"w\">  </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">test1</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">rfl</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"gr\">sorry</span><span class=\"w\"> </span><span class=\"c1\">-- what to do here?</span>\n</code></pre></div>\n<p>Is there a way in Lean 4 (or plans) to support something that enable a user to refute _in_ the fallthrough case, that is the value of the matched is not equal to any of the previous case?</p>\n<p>Or is there a guideline on how to do this sort of reasoning on functions? I know that <code>split</code> can explode the <code>match</code> in multiple cases and add the correct hypothesis, but in my non-trivial example, I have more cases and <code>split</code>-ing this way is undesirable. <code>by_cases</code> would work only for 2 branches, not N branches, I would assume.</p>",
        "id": 441198382,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1716973819
    },
    {
        "content": "<p>Many ways to skin this particular cat.<br>\nYou can for example name the <code>m s</code> in the match:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"bp\">...</span>\n<span class=\"w\">  </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">rfl</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 441200996,
        "sender_full_name": "Franti≈°ek Silv√°≈°i ü¶â",
        "timestamp": 1716974790
    },
    {
        "content": "<p>Oh, I didn't know we could name the hypothesis in <code>match</code>, awesome.</p>",
        "id": 441201061,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1716974823
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"364929\">Franti≈°ek Silv√°≈°i ü¶â</span> <a href=\"#narrow/stream/270676-lean4/topic/Match.20pattern.20refutations/near/441200996\">said</a>:</p>\n<blockquote>\n<p>Many ways to skin this particular cat.<br>\nYou can for example name the <code>m s</code> in the match:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"bp\">...</span>\n<span class=\"w\">  </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">rfl</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"o\">]</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Actually, this technique make use of the fact that you can reprove the conclusion in the fallthrough case, that's not always the case, especially if the proof in one of the branch can be particularly complicated, is there a way to obtain an hypothesis that the previous cases are neither of those? I can craft a more complicated MWE that prevent a user to use this sort of technique, I'd say.</p>",
        "id": 441220849,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1716982277
    },
    {
        "content": "<p><a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20unreachable.20match.20case\">(2242) #lean4 &gt; ‚úî unreachable match case - Lean - Zulip (zulipchat.com)</a></p>",
        "id": 441223946,
        "sender_full_name": "Franti≈°ek Silv√°≈°i ü¶â",
        "timestamp": 1716983576
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"364929\">Franti≈°ek Silv√°≈°i ü¶â</span> <a href=\"#narrow/stream/270676-lean4/topic/Match.20pattern.20refutations/near/441223946\">said</a>:</p>\n<blockquote>\n<p><a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20unreachable.20match.20case\">(2242) #lean4 &gt; ‚úî unreachable match case - Lean - Zulip (zulipchat.com)</a></p>\n</blockquote>\n<p>Awesome, thanks!</p>",
        "id": 441223984,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1716983591
    },
    {
        "content": "<p>To add an extra 2 cents here - practically speaking,  IME, <code>split</code> is usually the best way to do this _anyway_, and then manually cleaning up your proof state. Alternatively, rewrite with something first so that <code>split</code> splits in the manner you desire.</p>",
        "id": 441225193,
        "sender_full_name": "Franti≈°ek Silv√°≈°i ü¶â",
        "timestamp": 1716984059
    },
    {
        "content": "<p>Yep, that makes sense.</p>",
        "id": 441225280,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1716984081
    }
]