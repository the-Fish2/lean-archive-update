[
    {
        "content": "<p>Hi. I'm working on verifying an algorithm and wondering if there is a better way to reason about the intermediate steps/values that appear on the program.</p>\n<p>Let's consider the following (contrived) example. The <code>doSomething</code> is a program that does some pattern matching and computation, and I'd like to prove some properties like the example.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Data</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Data</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Data</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">doSomething</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">data</span> <span class=\"o\">:</span> <span class=\"n\">Data</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">data</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">foo</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">a.push</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">bar</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">a'</span> <span class=\"o\">:=</span> <span class=\"n\">a.push</span> <span class=\"n\">n</span>\n    <span class=\"k\">let</span> <span class=\"n\">index</span> <span class=\"o\">:=</span> <span class=\"n\">a'.size</span>\n    <span class=\"k\">let</span> <span class=\"n\">a''</span> <span class=\"o\">:=</span> <span class=\"n\">a'.push</span> <span class=\"n\">index</span>\n    <span class=\"o\">(</span><span class=\"n\">a''</span><span class=\"o\">,</span> <span class=\"n\">index</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">eq</span> <span class=\"o\">:</span> <span class=\"n\">doSomething</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">bar</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">result</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">result.2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">result.1.size</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Since the result is composed of the intermediate values declared with <code>let</code>, I often find myself repeating these <code>let</code> declarations and reasnoning about them in the proofs. One trick I came up with is to extract that part as a theorem like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- helper theorem</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">doSomething.bar</span>\n  <span class=\"o\">{</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a'</span> <span class=\"n\">index</span> <span class=\"n\">a''</span><span class=\"o\">,</span> <span class=\"n\">a'</span> <span class=\"bp\">=</span> <span class=\"n\">a.push</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">a'.size</span> <span class=\"bp\">=</span> <span class=\"n\">index</span> <span class=\"bp\">→</span> <span class=\"n\">a''</span> <span class=\"bp\">=</span> <span class=\"n\">a'.push</span> <span class=\"n\">index</span> <span class=\"bp\">→</span> <span class=\"n\">doSomething</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">bar</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a''</span><span class=\"o\">,</span> <span class=\"n\">index</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">P</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">eq</span> <span class=\"o\">:</span> <span class=\"n\">doSomething</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">bar</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">result</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">a'</span> <span class=\"o\">:=</span> <span class=\"n\">a.push</span> <span class=\"n\">n</span>\n  <span class=\"k\">let</span> <span class=\"n\">index</span> <span class=\"o\">:=</span> <span class=\"n\">a'.size</span>\n  <span class=\"k\">let</span> <span class=\"n\">a''</span> <span class=\"o\">:=</span> <span class=\"n\">a'.push</span> <span class=\"n\">index</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">result</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a''</span><span class=\"o\">,</span> <span class=\"n\">index</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">subst</span> <span class=\"n\">eq</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">doSomething</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">motive</span> <span class=\"n\">a'</span> <span class=\"n\">index</span> <span class=\"n\">a''</span> <span class=\"n\">rfl</span> <span class=\"n\">rfl</span> <span class=\"n\">rfl</span> <span class=\"o\">(</span><span class=\"n\">this</span> <span class=\"bp\">▸</span> <span class=\"n\">eq</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">eq</span> <span class=\"o\">:</span> <span class=\"n\">doSomething</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">bar</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">result</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">result.2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">result.1.size</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- apply helper and extract the let declarations with equations</span>\n  <span class=\"n\">apply</span> <span class=\"n\">doSomething.bar</span> <span class=\"n\">eq</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a'</span> <span class=\"n\">index</span> <span class=\"n\">a''</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"n\">h₃</span> <span class=\"n\">eq'</span>\n\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eq'</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">eq</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">eq.symm</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h₃</span><span class=\"o\">,</span> <span class=\"n\">h₂.symm</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Nat.lt_succ_self</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>I'm curious if Lean/Mathlib provides something similar out of the box.</p>",
        "id": 409559543,
        "sender_full_name": "pandaman",
        "timestamp": 1703241279
    },
    {
        "content": "<p>No, there isn't yet anything that will construct these kind of proofs. Equation lemmas of this form are planned to be a part of the in-development <code>cbv</code> tactic.</p>",
        "id": 409560054,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703241471
    },
    {
        "content": "<p>actually the lemmas cbv would construct are the other way around, e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">doSomething.bar</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">a'</span> <span class=\"n\">index</span> <span class=\"n\">a''</span><span class=\"o\">,</span> <span class=\"n\">a'</span> <span class=\"bp\">=</span> <span class=\"n\">a.push</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">a'.size</span> <span class=\"bp\">=</span> <span class=\"n\">index</span> <span class=\"bp\">→</span> <span class=\"n\">a''</span> <span class=\"bp\">=</span> <span class=\"n\">a'.push</span> <span class=\"n\">index</span> <span class=\"bp\">→</span> <span class=\"n\">doSomething</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">bar</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a''</span><span class=\"o\">,</span> <span class=\"n\">index</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 409560712,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703241722
    },
    {
        "content": "<p>Thank you! I can write them manually while waiting for it <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 409561956,
        "sender_full_name": "pandaman",
        "timestamp": 1703242246
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395416\">pandaman</span> has marked this topic as resolved.</p>",
        "id": 409561975,
        "sender_full_name": "Notification Bot",
        "timestamp": 1703242252
    }
]