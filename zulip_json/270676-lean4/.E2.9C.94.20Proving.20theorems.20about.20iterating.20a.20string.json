[
    {
        "content": "<p>What is the idiomatic way to reasoning about functions that iterates characters in a string? In particular, I'm interested in how we can show the equivalance between the <code>List Char</code> version.</p>\n<p>For example, let's say we have the following <code>length</code> functions:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">length₁</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String.Iterator</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">accum</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">s.atEnd</span> <span class=\"k\">then</span>\n    <span class=\"n\">accum</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">length₁</span> <span class=\"n\">s.next</span> <span class=\"o\">(</span><span class=\"n\">accum</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">length₂</span> <span class=\"o\">(</span><span class=\"n\">cs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">accum</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">cs</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">accum</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">::</span> <span class=\"n\">cs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">length₂</span> <span class=\"n\">cs</span> <span class=\"o\">(</span><span class=\"n\">accum</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I would like to prove something along this line:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">eq_length</span> <span class=\"o\">:</span> <span class=\"n\">length₁</span> <span class=\"o\">(</span><span class=\"n\">String.mk</span> <span class=\"n\">cs</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">iter</span> <span class=\"n\">accum</span> <span class=\"bp\">=</span> <span class=\"n\">length₂</span> <span class=\"n\">cs</span> <span class=\"n\">accum</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Thanks!</p>",
        "id": 411192217,
        "sender_full_name": "pandaman",
        "timestamp": 1704376252
    },
    {
        "content": "<p>There kinda isn't an idiomatic approach yet. We've been working in a few different places on making idiomatic ways to reason about iteration, but it's not super straightforward.</p>\n<p>In general though, in the <code>theorem</code> you want to do some generalization to set up a quantity that you can induct on, and then you do induction on that quantity. So here you probably want to induct on difference between the <code>String.Pos</code> contained in <code>s</code> and the <code>String.length</code> of the string in <code>s</code>.</p>",
        "id": 411295097,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1704419818
    },
    {
        "content": "<p>that said, last I checked, a few functions in the <code>String</code> API are partial or otherwise opaque to proving. So you may not even be able to prove this yet.</p>",
        "id": 411295225,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1704419894
    },
    {
        "content": "<p>Thanks for the info. Do you have examples of such inductions?</p>",
        "id": 411297278,
        "sender_full_name": "pandaman",
        "timestamp": 1704420916
    },
    {
        "content": "<p>It turned out <code>String.Iterator.ValidFor</code> from Std4 is quite nice to work with (at least for my use case): <a href=\"https://github.com/leanprover/std4/blob/0f6bc5b32bf5b0498902d3b5f0806c75530539d5/Std/Data/String/Lemmas.lean#L521\">https://github.com/leanprover/std4/blob/0f6bc5b32bf5b0498902d3b5f0806c75530539d5/Std/Data/String/Lemmas.lean#L521</a></p>\n<p>I could prove the theorem like this <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">eq_length</span> <span class=\"o\">{</span><span class=\"n\">cs</span> <span class=\"n\">cs'</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">it</span> <span class=\"o\">:</span> <span class=\"n\">String.Iterator</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">accum</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">it.ValidFor</span> <span class=\"n\">cs</span> <span class=\"n\">cs'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">length₁</span> <span class=\"n\">it</span> <span class=\"n\">accum</span> <span class=\"bp\">=</span> <span class=\"n\">length₂</span> <span class=\"n\">cs'</span> <span class=\"n\">accum</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">cs'</span> <span class=\"n\">generalizing</span> <span class=\"n\">it</span> <span class=\"n\">cs</span> <span class=\"n\">accum</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">length₁</span> <span class=\"n\">length₂</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">v.atEnd.mpr</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">c</span> <span class=\"n\">cs'</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">length₁</span> <span class=\"n\">length₂</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">it.atEnd</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">intro</span> <span class=\"n\">h</span>\n      <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">v.atEnd.mp</span> <span class=\"n\">h</span>\n      <span class=\"n\">contradiction</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ih</span> <span class=\"o\">(</span><span class=\"n\">v.next</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">eq_length'</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">length₁</span> <span class=\"n\">s.iter</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">length₂</span> <span class=\"n\">s.data</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">s.iter.ValidFor</span> <span class=\"o\">[]</span> <span class=\"n\">s.data</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">String.validFor_mkIterator</span>\n  <span class=\"n\">exact</span> <span class=\"n\">eq_length</span> <span class=\"n\">this</span>\n</code></pre></div>",
        "id": 411337088,
        "sender_full_name": "pandaman",
        "timestamp": 1704448150
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395416\">pandaman</span> has marked this topic as resolved.</p>",
        "id": 411350761,
        "sender_full_name": "Notification Bot",
        "timestamp": 1704453151
    }
]