[
    {
        "content": "<p>Is there an easier way to prove the example?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">add_mul_of_self</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_mul</span><span class=\"o\">,</span> <span class=\"n\">Nat.one_mul</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_comm</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">List</span> <span class=\"k\">in</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">replicate_join_length</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">join</span> <span class=\"o\">(</span><span class=\"n\">replicate</span> <span class=\"n\">n</span> <span class=\"n\">xs</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">length</span> <span class=\"n\">xs</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">m</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp_all</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_mul_of_self</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">list3</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">List.replicate</span> <span class=\"mi\">100</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">])</span><span class=\"bp\">.</span><span class=\"n\">join</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">list3.length</span> <span class=\"bp\">=</span> <span class=\"mi\">300</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">replicate_join_length</span>\n</code></pre></div>",
        "id": 429832266,
        "sender_full_name": "James Sully",
        "timestamp": 1711536781
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Join</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.GroupAction.Defs</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">List.replicate_join_length</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">List.replicate</span> <span class=\"n\">n</span> <span class=\"n\">xs</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">join.length</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">xs.length</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">list3</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">List.replicate</span> <span class=\"mi\">100</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">])</span><span class=\"bp\">.</span><span class=\"n\">join</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">list3.length</span> <span class=\"bp\">=</span> <span class=\"mi\">300</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">List.replicate_join_length</span>\n</code></pre></div>",
        "id": 429837050,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1711538701
    },
    {
        "content": "<p>Truly, a proof from the book. :-)</p>",
        "id": 429837322,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1711538810
    },
    {
        "content": "<p>This version could actually go to Mathlib:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Join</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">List.replicate_join_length</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">List.replicate</span> <span class=\"n\">n</span> <span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">join.length</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">l.length</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">length_join</span><span class=\"o\">,</span> <span class=\"n\">map_replicate</span><span class=\"o\">,</span> <span class=\"n\">sum_replicate</span><span class=\"o\">]</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 429837787,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1711539001
    },
    {
        "content": "<p><code>rewrite</code> + <code>rfl</code> is just <code>rw</code></p>",
        "id": 429852662,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1711544093
    },
    {
        "content": "<p>I think <code>rw</code> is <code>rewrite</code> + <code>with_reducible rfl</code> :-)</p>",
        "id": 429861779,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711546934
    },
    {
        "content": "<p>Ah, indeed. Martin's code doesn't work with just <code>rw</code>. I should have checked. Thanks for the correction!</p>",
        "id": 429892970,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1711554823
    },
    {
        "content": "<p>Yeah, the equivalence between <code>n • l.length</code> and <code>n * l.length</code> is not reducible.<br>\nHowever, if you import <code>Mathlib.GroupTheory.GroupAction.Defs</code> then <code>simp</code> has a lemma <code>smul_eq_mul</code> that normalizes both to the <code>*</code> version and finishes the goal without needing \"full rfl\".</p>",
        "id": 429900392,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1711556801
    },
    {
        "content": "<p>I guess I'm going to have to start using mathlib</p>",
        "id": 429954223,
        "sender_full_name": "James Sully",
        "timestamp": 1711575708
    },
    {
        "content": "<p>we should be selling t-shirts saying that</p>",
        "id": 429954694,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711575939
    },
    {
        "content": "<p>when I compile, only the modules I use end up in the binary, right?</p>",
        "id": 429955491,
        "sender_full_name": "James Sully",
        "timestamp": 1711576324
    },
    {
        "content": "<p>You shouldn't need to compile anything! Why are you making a binary?</p>",
        "id": 429955982,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711576558
    },
    {
        "content": "<p>I don't understand the question? Lean is intended to be a general purpose programming language in addition to being a theorem prover isn't it?</p>",
        "id": 429957611,
        "sender_full_name": "James Sully",
        "timestamp": 1711577379
    },
    {
        "content": "<p>Yes but your message seemed to imply that you were trying to make a binary out of mathlib</p>",
        "id": 429957746,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711577455
    },
    {
        "content": "<p>You may have issues compiling too much of mathlib, especially on windows</p>",
        "id": 429957753,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711577457
    },
    {
        "content": "<p>I think there are still some open issues regarding this, although I think the FRO hasn't really been fixing this issue so much as using it as a reason to stop people from using mathlib</p>",
        "id": 429957804,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711577503
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"621161\">James Sully</span> <a href=\"#narrow/stream/270676-lean4/topic/proof.20of.20length.20of.20.60.28join.20.28replicate.20n.20xs.29.29.60/near/429955491\">said</a>:</p>\n<blockquote>\n<p>when I compile, only the modules I use end up in the binary, right?</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/270676-lean4/topic/proof.20of.20length.20of.20.60.28join.20.28replicate.20n.20xs.29.29.60/near/429957746\">said</a>:</p>\n<blockquote>\n<p>Yes but your message seemed to imply that you were trying to make a binary out of mathlib</p>\n</blockquote>\n<p>What I meant to ask by that question was, suppose I want to write a normal program that depends on some part of mathlib, how big does the binary end up being?</p>",
        "id": 429957814,
        "sender_full_name": "James Sully",
        "timestamp": 1711577513
    },
    {
        "content": "<p>in theory it should work, those extra files should contribute very little to the compiled code</p>",
        "id": 429957894,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711577557
    },
    {
        "content": "<p>in practice... try it and see</p>",
        "id": 429957904,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711577567
    },
    {
        "content": "<p>luckily I'm not on windows :)<br>\nwhat's an FRO?</p>",
        "id": 429957921,
        "sender_full_name": "James Sully",
        "timestamp": 1711577582
    },
    {
        "content": "<p><a href=\"https://lean-fro.org/\">https://lean-fro.org/</a></p>",
        "id": 429957948,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711577599
    },
    {
        "content": "<p>the current organization leading the development of Lean</p>",
        "id": 429957968,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711577619
    },
    {
        "content": "<p>Cheers</p>",
        "id": 429957984,
        "sender_full_name": "James Sully",
        "timestamp": 1711577634
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/proof.20of.20length.20of.20.60.28join.20.28replicate.20n.20xs.29.29.60/near/429957804\">said</a>:</p>\n<blockquote>\n<p>I think there are still some open issues regarding this, although I think the FRO hasn't really been fixing this issue so much as using it as a reason to stop people from using mathlib</p>\n</blockquote>\n<p>mathlib does seem very monolithic. From my humble perspective, I can see why mathematicians would be fine with it for theorem proving, but it doesn't seem ideal for depending on for proving things about your program. Is this the motivation for FRO de-emphasising it or is it something else?</p>",
        "id": 429958317,
        "sender_full_name": "James Sully",
        "timestamp": 1711577804
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> and I are trying to make it less monolithic, FWIW</p>",
        "id": 429958562,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711577925
    },
    {
        "content": "<p>That's exciting!</p>",
        "id": 429959085,
        "sender_full_name": "James Sully",
        "timestamp": 1711578253
    },
    {
        "content": "<p>I'd be curious to hear if people can actually compile Mathlib's <code>nightly-testing</code> branch (or a project depending on it) on windows. Mac and Sebastian did make some changes here, but perhaps they don't actually help with Mathlib; I'm not sure.</p>",
        "id": 429965147,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1711581632
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/270676-lean4/topic/proof.20of.20length.20of.20.60.28join.20.28replicate.20n.20xs.29.29.60/near/429958562\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> and I are trying to make it less monolithic, FWIW</p>\n</blockquote>\n<p>I'm curious to hear if there are any details on this, or what this might look like</p>",
        "id": 429965895,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1711582106
    },
    {
        "content": "<p>The tentative idea (no decision to go ahead, but nevertheless the preliminary work is useful) is that while everything would still live inside the same git repository, we would be able to split the Mathlib library (in the lake sense) into a collection of libraries, perhaps something like <code>Algebra</code> / <code>Order</code> / <code>Data</code> / <code>TheRest</code> (possibly also <code>FiniteStuff</code>?).</p>\n<p>After such a split, these sublibraries would form a DAG in terms of dependencies. This adds some constraints to future refactors, as that DAG would essentially become immutable.</p>\n<p>The benefits?</p>\n<ul>\n<li>working towards to requires drastically cleaning up the import graph, which currently is full of \"horizontal gene transfer\".</li>\n<li>the sublibrary DAG being immutable is also helpful: it prevents some dependency regressions!</li>\n<li>even though everything will remain in one repository (this is important to minimise the cost of cross-repository refactors), it will be possible in <code>lake</code> to specify that you only want to depend on a subset of these libraries. </li>\n</ul>\n<p>(And I should say that <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> is doing the serious work of trying to make this happen. Mostly I just complain and wish it were already the case. :-)</p>",
        "id": 429966816,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1711582724
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/proof.20of.20length.20of.20.60.28join.20.28replicate.20n.20xs.29.29.60/near/429966816\">said</a>:</p>\n<blockquote>\n<ul>\n<li>even though everything will remain in one repository (this is important to minimise the cost of cross-repository refactors), it will be possible in <code>lake</code> to specify that you only want to depend on a subset of these libraries.</li>\n</ul>\n</blockquote>\n<p>is there a way to do this already? Like a way to specify a subfolder of a repository to use as a package?</p>",
        "id": 429974793,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1711587923
    },
    {
        "content": "<p>No, this will still require a change in <code>lake</code>, but I think there is in principle agreement that depending on a single <code>lean_lib</code> in a repo is a desirable feature.</p>",
        "id": 429975108,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1711588182
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"621161\">James Sully</span> has marked this topic as resolved.</p>",
        "id": 430442536,
        "sender_full_name": "Notification Bot",
        "timestamp": 1711856653
    }
]