[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">K_polar_convex</span><span class=\"o\">:</span> <span class=\"n\">Convex</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">K_polar</span> <span class=\"n\">vmatrix</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">Convex</span><span class=\"o\">]</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span> <span class=\"n\">hab</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">K_polar</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span>\n  <span class=\"n\">intro</span> <span class=\"n\">z</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hz</span>\n  <span class=\"k\">calc</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">•</span> <span class=\"n\">hx</span><span class=\"o\">)</span> <span class=\"bp\">⬝ᵥ</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">⬝ᵥ</span> <span class=\"n\">z</span>  <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">•</span> <span class=\"n\">hx</span><span class=\"o\">)</span><span class=\"bp\">⬝ᵥ</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">•</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 438883456,
        "sender_full_name": "Katherine Wei",
        "timestamp": 1715806365
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"709200\">@Katherine Wei</span>, please read <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>! It will help you ask questions that get much better answers.</p>",
        "id": 438905240,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715817507
    },
    {
        "content": "<p>Also please don't double post: <a href=\"#narrow/stream/287929-mathlib4/topic/how.20to.20prove.20the.20convex.20here.2E/near/438880062\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/how.20to.20prove.20the.20convex.20here.2E/near/438880062</a></p>",
        "id": 438929619,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715833302
    }
]