[
    {
        "content": "<p>I have this error below. What is the <code>Deriving Inhabited</code> line doing? I thought it basically either does what the commented out part does, or else errors. How can I see what instance it creates?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Lagrange</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">SparseMatrix</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">row</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">k</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">col</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">k</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">k</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Inhabited</span> <span class=\"c1\">-- Doesn't work with this</span>\n\n<span class=\"c1\">-- -- Works fine with this uncommented</span>\n<span class=\"c1\">-- instance : Inhabited (SparseMatrix u v α) where</span>\n<span class=\"c1\">--   default := {</span>\n<span class=\"c1\">--     k := 0</span>\n<span class=\"c1\">--     row := Fin.elim0</span>\n<span class=\"c1\">--     col := Fin.elim0</span>\n<span class=\"c1\">--     val := Fin.elim0</span>\n<span class=\"c1\">--   }</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">R1CSStmt</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n_stmt</span> <span class=\"n\">n_wit</span> <span class=\"n\">rows</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">SparseMatrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">rows</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n_stmt</span> <span class=\"bp\">+</span> <span class=\"n\">n_wit</span><span class=\"o\">))</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n  <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n_stmt</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">SquareR1CSStmt</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n_stmt</span> <span class=\"n\">n_wit</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">R1CSStmt</span> <span class=\"n\">F</span> <span class=\"n\">n_stmt</span> <span class=\"n\">n_wit</span> <span class=\"o\">(</span><span class=\"n\">n_stmt</span> <span class=\"bp\">+</span> <span class=\"n\">n_wit</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">SquareR1CSStmt</span> <span class=\"n\">F</span> <span class=\"n\">n_stmt</span> <span class=\"n\">n_wit</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">default</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">default</span> <span class=\"c1\">-- failed to synthesize instance Inhabited (SparseMatrix</span>\n    <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">default</span>\n  <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 420091566,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1707238507
    },
    {
        "content": "<p><code>whatsnew in &lt;command&gt;</code> gives you a list of all the things <code>&lt;command&gt;</code> does to the environment.</p>",
        "id": 420093505,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1707239038
    },
    {
        "content": "<p>so you can write <code>whatsnew in structure ...</code></p>",
        "id": 420093640,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1707239064
    },
    {
        "content": "<p>That's awesome, seems like what's happening is that the derived instance requires Inhabited of <code>u,v,a</code>, which makes sense in retrospect. Thanks!</p>",
        "id": 420094258,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1707239251
    },
    {
        "content": "<p>TIL! I was pondering asking for such a command just earlier today :-)</p>",
        "id": 420129672,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1707251268
    },
    {
        "content": "<p>Yes, <code>whatsnew</code> should move up to Std or Core. PRs doing so welcome. :-)</p>",
        "id": 420152700,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1707261634
    },
    {
        "content": "<p>I don't like <code>whatsnew</code>'s implementation, it is very inefficient. If we upstream it I would prefer to get some tools in core to have better first class support for this</p>",
        "id": 420235889,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707307160
    },
    {
        "content": "<p>It's not quite near-term but work on parallelism will necessarily make it easier to track what was added to the environment by a command</p>",
        "id": 420236657,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1707307473
    },
    {
        "content": "<p>I'm hoping for something more like lean 3's \"environment modifications\" list</p>",
        "id": 420236729,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707307503
    },
    {
        "content": "<p>this is problematic for lean4lean as well, because we lose track of the order in which declarations are added</p>",
        "id": 420236797,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707307535
    },
    {
        "content": "<p>and there was some <a href=\"https://github.com/leanprover/lean4/commit/90e228818702510290cd6008609010eedf4cb511#commitcomment-119105402\">bug in environment extensions</a> related to this as well IIRC</p>",
        "id": 420236830,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707307550
    },
    {
        "content": "<p>(Aesop could also use this. :))</p>",
        "id": 420237570,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1707307818
    },
    {
        "content": "<p>I am surprised that <code>deriving Inhabited</code> does not use the default values, is this expected?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"s2\">\"baz\"</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Inhabited</span>\n\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">default</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">bar</span>  <span class=\"c1\">-- returns  \"\"</span>\n</code></pre></div>",
        "id": 426643261,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1710456881
    },
    {
        "content": "<p>Well, I suppose I would expect it to use the <code>default</code> value rather than the default value. That is, I would expect the derived <code>Inhabited</code> instance of the structure to come from the <code>Inhabited</code> instance of the fields, just like I would expect a derived <code>AddCommMonoid</code> instance to be derived from <code>AddCommMonoid</code> instances of the fields.</p>",
        "id": 426643477,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1710456969
    }
]