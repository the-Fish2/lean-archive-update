[
    {
        "content": "<p>In the following code,  a call to tactic <code>bar</code> is meant to expand to the same call to <code>foo</code>. But I don't know how to pass the optional syntax. Both variations below fail.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Parser</span> <span class=\"n\">Tactic</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"foo\"</span> <span class=\"o\">(</span><span class=\"n\">location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">done</span><span class=\"o\">)</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"bar\"</span> <span class=\"n\">loc</span><span class=\"o\">:(</span><span class=\"n\">location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">foo</span> <span class=\"bp\">$</span><span class=\"n\">loc</span><span class=\"o\">)</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"bar\"</span> <span class=\"n\">loc</span><span class=\"o\">:(</span><span class=\"n\">location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">foo</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkOptionalNode</span> <span class=\"n\">loc</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 375574239,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1689434293
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>  <code>$[...]?</code> is used for optional syntax:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"bar\"</span> <span class=\"n\">loc</span><span class=\"bp\">?</span><span class=\"o\">:(</span><span class=\"n\">location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">foo</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">loc</span><span class=\"bp\">?</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 375577581,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689435124
    },
    {
        "content": "<p>Thanks a lot. It almost work in my real use case. It fails in the presence of a mysterious <code>&amp;</code> in the original syntax;</p>",
        "id": 375578736,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1689435471
    },
    {
        "content": "<p>Something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"foo\"</span> <span class=\"o\">(</span><span class=\"bp\">&amp;</span><span class=\"s2\">\"baz\"</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">done</span><span class=\"o\">)</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"bar\"</span> <span class=\"n\">ba</span><span class=\"o\">:(</span><span class=\"bp\">&amp;</span><span class=\"s2\">\"baz\"</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"n\">loc</span><span class=\"o\">:(</span><span class=\"n\">location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">foo</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">ba</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">loc</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 375579019,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1689435538
    },
    {
        "content": "<p>The syntax for individual tokens is a bit different</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"bar\"</span> <span class=\"n\">ba</span><span class=\"o\">:(</span><span class=\"bp\">&amp;</span><span class=\"s2\">\"baz\"</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"n\">loc</span><span class=\"o\">:(</span><span class=\"n\">location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">foo</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">baz</span><span class=\"bp\">%$</span><span class=\"n\">ba</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">loc</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 375581940,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1689436412
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 375583383,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1689436848
    },
    {
        "content": "<p>Next I need to remember how to write a macro which expand to several tactic calls, fighting the difference between <code>tactic</code> and <code>tactic_seq</code>.</p>",
        "id": 375587676,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1689438101
    },
    {
        "content": "<p>Say I want to add <code>done</code> after <code>foo $[baz%$ba]? $[$loc]?</code>, how do I do that?</p>",
        "id": 375587854,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1689438141
    },
    {
        "content": "<p>You can use parentheses to turn a tactic sequence into a single tactic</p>",
        "id": 375588298,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1689438265
    },
    {
        "content": "<p>I knew there was a simple trick but I couldn't remember it. Thanks!</p>",
        "id": 375588460,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1689438321
    },
    {
        "content": "<p>I hit again the same issue as in July but I can't get the above answer to work. If have a tactic whose definition starts with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"n\">tok</span><span class=\"o\">:</span><span class=\"s2\">\"rw_ineq\"</span> <span class=\"n\">rules</span><span class=\"o\">:</span><span class=\"n\">rwRuleSeq</span> <span class=\"n\">loc</span><span class=\"o\">:(</span><span class=\"n\">location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"n\">withArg</span><span class=\"o\">:((</span><span class=\"s2\">\" with \"</span> <span class=\"o\">(</span><span class=\"n\">colGt</span> <span class=\"n\">binderIdent</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n</code></pre></div>\n<p>and I want a macro <code>rwa_ineq</code> with the exact same syntax that call <code>rw_ineq</code> and then <code>assumption</code>. I tried</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"rwa_ineq \"</span> <span class=\"n\">rws</span><span class=\"o\">:</span><span class=\"n\">rwRuleSeq</span> <span class=\"n\">loc</span><span class=\"o\">:(</span><span class=\"n\">location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"n\">withArg</span><span class=\"o\">:(</span><span class=\"s2\">\" with \"</span> <span class=\"o\">(</span><span class=\"n\">colGt</span> <span class=\"n\">binderIdent</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">rw_ineq</span> <span class=\"bp\">$</span><span class=\"n\">rws</span><span class=\"o\">:</span><span class=\"n\">rwRuleSeq</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">loc</span><span class=\"o\">:</span><span class=\"n\">location</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">withArg</span><span class=\"o\">:</span><span class=\"n\">location</span><span class=\"o\">]</span><span class=\"bp\">?;</span> <span class=\"n\">assumption</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>but that doesn't work.</p>\n<p>Full code is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Parser</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span> <span class=\"n\">Tactic</span>\n\n<span class=\"n\">elab</span> <span class=\"n\">tok</span><span class=\"o\">:</span><span class=\"s2\">\"rw_ineq\"</span> <span class=\"n\">rules</span><span class=\"o\">:</span><span class=\"n\">rwRuleSeq</span> <span class=\"n\">loc</span><span class=\"o\">:(</span><span class=\"n\">location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"n\">withArg</span><span class=\"o\">:((</span><span class=\"s2\">\" with \"</span> <span class=\"o\">(</span><span class=\"n\">colGt</span> <span class=\"n\">Lean.binderIdent</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">pure</span> <span class=\"o\">()</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"rwa_ineq \"</span> <span class=\"n\">rws</span><span class=\"o\">:</span><span class=\"n\">rwRuleSeq</span> <span class=\"n\">loc</span><span class=\"o\">:(</span><span class=\"n\">location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"n\">withArg</span><span class=\"o\">:(</span><span class=\"s2\">\" with \"</span> <span class=\"o\">(</span><span class=\"n\">colGt</span> <span class=\"n\">Lean.binderIdent</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">rw_ineq</span> <span class=\"bp\">$</span><span class=\"n\">rws</span><span class=\"o\">:</span><span class=\"n\">rwRuleSeq</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">loc</span><span class=\"o\">:</span><span class=\"n\">location</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">withArg</span><span class=\"o\">:</span><span class=\"n\">location</span><span class=\"o\">]</span><span class=\"bp\">?;</span> <span class=\"n\">assumption</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 400040337,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698972339
    },
    {
        "content": "<p>Here's one way:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Parser</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span> <span class=\"n\">Tactic</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">withClause</span> <span class=\"o\">:=</span> <span class=\"s2\">\" with \"</span> <span class=\"o\">(</span><span class=\"n\">colGt</span> <span class=\"n\">Lean.binderIdent</span><span class=\"o\">)</span><span class=\"bp\">?</span>\n\n<span class=\"n\">elab</span> <span class=\"n\">tok</span><span class=\"o\">:</span><span class=\"s2\">\"rw_ineq\"</span> <span class=\"n\">rules</span><span class=\"o\">:</span><span class=\"n\">rwRuleSeq</span> <span class=\"n\">loc</span><span class=\"o\">:(</span><span class=\"n\">location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"n\">withArg</span><span class=\"o\">:(</span><span class=\"n\">withClause</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">pure</span> <span class=\"o\">()</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"rwa_ineq \"</span> <span class=\"n\">rws</span><span class=\"o\">:</span><span class=\"n\">rwRuleSeq</span> <span class=\"n\">loc</span><span class=\"o\">:(</span><span class=\"n\">location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"n\">withArg</span><span class=\"o\">:(</span><span class=\"n\">withClause</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">rw_ineq</span> <span class=\"bp\">$</span><span class=\"n\">rws</span><span class=\"o\">:</span><span class=\"n\">rwRuleSeq</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">loc</span><span class=\"o\">:</span><span class=\"n\">location</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">withArg</span><span class=\"o\">]</span><span class=\"bp\">?;</span> <span class=\"n\">assumption</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 400041416,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698972970
    },
    {
        "content": "<p>Here's another:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Parser</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span> <span class=\"n\">Tactic</span>\n\n<span class=\"n\">elab</span> <span class=\"n\">tok</span><span class=\"o\">:</span><span class=\"s2\">\"rw_ineq\"</span> <span class=\"n\">rules</span><span class=\"o\">:</span><span class=\"n\">rwRuleSeq</span> <span class=\"n\">loc</span><span class=\"o\">:(</span><span class=\"n\">location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"n\">withArg</span><span class=\"o\">:((</span><span class=\"s2\">\" with \"</span> <span class=\"o\">(</span><span class=\"n\">colGt</span> <span class=\"n\">Lean.binderIdent</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">pure</span> <span class=\"o\">()</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"rwa_ineq \"</span> <span class=\"n\">rwRuleSeq</span> <span class=\"o\">(</span><span class=\"n\">location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"s2\">\" with \"</span> <span class=\"o\">(</span><span class=\"n\">colGt</span> <span class=\"n\">Lean.binderIdent</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">rwa_ineq</span> <span class=\"bp\">$</span><span class=\"n\">rws</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">loc</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"k\">with</span> <span class=\"bp\">$</span><span class=\"n\">args</span><span class=\"bp\">*</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">rw_ineq</span> <span class=\"bp\">$</span><span class=\"n\">rws</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">loc</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"k\">with</span> <span class=\"bp\">$</span><span class=\"n\">args</span><span class=\"bp\">*</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 400041655,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698973086
    },
    {
        "content": "<p>Great, the first solution works (with minor ajustements to the code)! Thanks!</p>",
        "id": 400041896,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698973226
    },
    {
        "content": "<p>I'm still curious to understand why my original code didn't work (and it would be really great to have any of this documented somewhere).</p>",
        "id": 400042080,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698973308
    },
    {
        "content": "<p>I'm running into similar issues: I currently have a macro like this</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">macro</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"o\">:</span><span class=\"n\">mlir_op_operand</span><span class=\"w\"> </span><span class=\"s2\">\" = \"</span><span class=\"w\"> </span><span class=\"s2\">\"llvm.mlir.constant\"</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">num</span><span class=\"w\"> </span><span class=\"s2\">\" : \"</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">mlir_type</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">mlir_op</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n</code></pre></div>\n<p>I'd like to make the <code>\" : \" t:mlir_type</code> part optional. In a <code>macro_rules</code>, I can write <code>$[: $t]?</code> and everything works, but in a <code>macro</code> this doesn't seem to work. Going by the messages in this thread, the syntax for <code>macro</code> seems to be <code>t:(\" : \" mlir_type)</code>, but now the bound <code>t</code> is of type <code>TSyntax Name.anonymous</code>, rather than the <code>t : TSyntax `mlir_type</code> I originally had. </p>\n<p>I guess I could index into it, but I'd rather not. Is there not an equivalent of <code>$[: $t]?</code> which allows me to bind just the part I actually want?</p>",
        "id": 442249264,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1717420342
    },
    {
        "content": "<p>Not to my knowledge. I would suggest either the <code>withClause</code> example or writing a separate <code>syntax</code> and using <code>macro_rules</code> instead.</p>",
        "id": 442254013,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1717421505
    },
    {
        "content": "<p>The annoying thing is that the \" : \" token occurs only in the input, in the thing I'm rewriting to I <em>only</em> want the actual <code>t</code>.  I was hoping to avoid the duplication <code>macro_rules</code> gives, but knowing there's no good alternatiove will let me stop worrying about it, thanks!</p>",
        "id": 442255546,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1717421841
    },
    {
        "content": "<p>I've got another question about optional syntax and macros, now about how to deal with optional parts that are just atomic tokens. How do I combine the two match arms into one in the following MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Lean</span>\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Lean</span>\n\n<span class=\"n\">syntax</span><span class=\"w\"> </span><span class=\"n\">neg_num</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"s2\">\"-\"</span><span class=\"bp\">?</span><span class=\"w\"> </span><span class=\"n\">num</span>\n\n<span class=\"sd\">/-- Convert a possibly negated numeral into a term representing the same value -/</span>\n<span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">negNumToTerm</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">TSyntax</span><span class=\"w\"> </span><span class=\"ss\">``neg_num</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">MacroM</span><span class=\"w\"> </span><span class=\"n\">Term</span>\n<span class=\"c1\">-- This works, but I'd like to combine the first two cases</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">neg_num</span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">num</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">num</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">neg_num</span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">-$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">num</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">-$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">num</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Macro.throwUnsupported</span>\n\n\n<span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">negNumToTerm₂</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">TSyntax</span><span class=\"w\"> </span><span class=\"ss\">``neg_num</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">MacroM</span><span class=\"w\"> </span><span class=\"n\">Term</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">neg_num</span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">num</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">  </span><span class=\"c1\">--           ^^^^^ I can match this part optionally</span>\n<span class=\"w\">    </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">num</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"c1\">--        ^^^^^ This, however, Lean does not like (`unexpected token ...`)</span>\n<span class=\"w\">  </span><span class=\"c1\">-- I'm unsure how to then output the minus conditionally, or even how to</span>\n<span class=\"w\">  </span><span class=\"c1\">-- give a name to the matched minus to check whether it was present or not in</span>\n<span class=\"w\">  </span><span class=\"c1\">-- the macro body</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Macro.throwUnsupported</span>\n</code></pre></div>",
        "id": 442554185,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1717514025
    },
    {
        "content": "<p>You can give a name to the token, by using the syntax <code>$[-%$minus]?</code>.</p>\n<p>I'm not sure how to feed <code>minus</code> back into the syntax, though.</p>",
        "id": 442559100,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717515258
    },
    {
        "content": "<p>Actually, this seems to work, but I am not sure if it is what you want:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">neg_num</span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">-%$</span><span class=\"n\">minus</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">num</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"bp\">⟨</span><span class=\"n\">minus</span><span class=\"bp\">.</span><span class=\"n\">getD</span><span class=\"w\"> </span><span class=\"n\">default</span><span class=\"bp\">⟩</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">num</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 442559455,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717515357
    },
    {
        "content": "<p>Thanks! I didn't know about the <code>%</code> syntax. It'd be cool if we could somehow control which token controls a <code>$[...]?</code> antiquotation (i.e., on the RHS), without that token being part of the actual output. <br>\nFor now, I'll just accept the two-match arms version is probably the most concise it gets, without impacting readability too much</p>",
        "id": 442563751,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1717516329
    },
    {
        "content": "<p>The <code>-</code> isn't just a token here; in <code>-$x:num</code> it's parsing as the syntax for negation. It looks something like this:</p>\n<ul>\n<li>Syntax of kind <code>«term-_»</code><ul>\n<li>arg[0]: <code>-</code> atom</li>\n<li>arg[1]: ... syntax for $x ...</li>\n</ul>\n</li>\n</ul>\n<p>You can't conditionally include <code>-</code> or not because this <code>«term-_»</code> node is an essential part of it being negation.</p>",
        "id": 442588604,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1717523201
    },
    {
        "content": "<p>If you want to combine the cases, you could at least do this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">negNumToTerm</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">TSyntax</span><span class=\"w\"> </span><span class=\"ss\">``neg_num</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">MacroM</span><span class=\"w\"> </span><span class=\"n\">Term</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">neg_num</span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">-%$</span><span class=\"n\">min</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">num</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">min</span><span class=\"bp\">.</span><span class=\"n\">isSome</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">      </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">-$</span><span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"k\">else</span>\n<span class=\"w\">      </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Macro</span><span class=\"bp\">.</span><span class=\"n\">throwUnsupported</span>\n</code></pre></div>",
        "id": 442589013,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1717523322
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/270676-lean4/topic/Pass.20optional.20syntax.20in.20macro/near/442559455\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">neg_num</span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">-%$</span><span class=\"n\">minus</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">num</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"bp\">⟨</span><span class=\"n\">minus</span><span class=\"bp\">.</span><span class=\"n\">getD</span><span class=\"w\"> </span><span class=\"n\">default</span><span class=\"bp\">⟩</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">num</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This is surely not correct. If you're ever writing <code>$(⟨x⟩)</code> you have to proceed <em>very</em> carefully because it's converting <code>x</code> to have type <code>Syntax</code> and then allowing it to be used as <code>TSyntax k</code> for any <code>k</code>, even if it's not correct.</p>\n<p>If you look at what this code expands to (using <code>#print negNumToTerm</code>) you can see that it takes <code>minus</code>, uses <code>default</code> if it's missing (which for syntax is <code>Syntax.missing</code>, which will signal an error during elaboration), and then creates a function application Syntax with this result as the function and <code>$x</code> as the argument.</p>",
        "id": 442589987,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1717523603
    },
    {
        "content": "<p>Oh, right: juxtaposition is function application!</p>",
        "id": 442594523,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717524942
    }
]