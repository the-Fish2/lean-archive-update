[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.List.Lemmas</span>\n\n<span class=\"c1\">-- the following works as expected</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">xs</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">xs</span> <span class=\"bp\">≠</span> <span class=\"o\">[])</span> <span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">xs.length</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">):</span>\n    <span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">xs.head</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">exact</span><span class=\"bp\">?</span>  <span class=\"c1\">-- exact List.get_mk_zero h2</span>\n\n<span class=\"c1\">-- now combine h1 and h2 into one hypothesis</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">xs</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">xs</span> <span class=\"bp\">≠</span> <span class=\"o\">[]</span> <span class=\"bp\">∧</span> <span class=\"n\">xs.length</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">):</span>\n    <span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">xs.head</span> <span class=\"n\">h.1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">exact</span><span class=\"bp\">?</span>  <span class=\"c1\">-- very long proof involving Lean.Omega which doesn't work when copied in</span>\n</code></pre></div>",
        "id": 437572414,
        "sender_full_name": "Ted Hwa",
        "timestamp": 1715141021
    },
    {
        "content": "<p>Note that the suggestion can be successfully replaced with <code>exact List.get_mk_zero (by omega)</code>.</p>",
        "id": 437572842,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715141310
    },
    {
        "content": "<p>I think this is \"not really <code>exact?</code>'s fault\". An argument gets filled in by an autoparam, and there's no mechanism available to pretty-print the tactic invocation, rather than the proof the tactic produced.</p>",
        "id": 437572868,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715141349
    },
    {
        "content": "<p>The fact that the proof produced by <code>omega</code> doesn't round trip is sad, but not hugely surprising.</p>",
        "id": 437572876,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715141362
    }
]