[
    {
        "content": "<p>I know how to use <code>CoreM.addAndCompile</code> to add a new declaration, given a <em>quoted</em> expression and its type. But what if I have an honest expression (not quoted), and would like to bind it to a declaration? (I  need this so that in the next step I can add a instance using <code>Meta.addInstance</code>).</p>",
        "id": 433710681,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1713345700
    },
    {
        "content": "<p>when you say a \"quoted expression\" I guess you mean an element of type <code>Expr</code>?</p>",
        "id": 433711393,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713345939
    },
    {
        "content": "<p>For things of other types, these are just runtime values and not really expressions at all. E.g if you have a <code>Nat</code> in a metaprogram it can only ever be a numeral. You can reflect things of various types into <code>Expr</code> using the <code>ToExpr</code> class but it won't be the same as the original expression, it will be a representation of the normal form itself. And of course for function types you can't do it at all.</p>",
        "id": 433711833,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713346077
    },
    {
        "content": "<p>This all leads me to believe there is some element of <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> problem here. How did you obtain this \"unquoted expression\"?</p>",
        "id": 433711954,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713346110
    },
    {
        "content": "<p>The whole scenario is this:</p>\n<ol>\n<li>Using <code>Lean.FromJson</code> I obtain a value <code>v</code> of type <code>structure CowData .... deriving Lean.FromJson</code>.</li>\n<li>There is a type class <code>class Cow (P : Pasture) extends CowData</code> (it's literally just that). Note that I do not have a <code>P</code> when <code>v</code> is created in step 1.</li>\n<li>I obtain a <code>P : Pasture</code> and would like to install <code>Cow.mk v</code> as an instance of <code>Cow P</code>.</li>\n</ol>",
        "id": 433712458,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1713346275
    },
    {
        "content": "<p>In that case you most likely do want to use <code>ToExpr</code> on the <code>CowData</code>. Whether you need it for the <code>P : Pasture</code> depends on how it is \"obtained\"</p>",
        "id": 433713115,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713346457
    },
    {
        "content": "<p>It's generated by <code>JsonData.loadJsonData</code> from a file.</p>",
        "id": 433713338,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1713346530
    },
    {
        "content": "<p>The only thing that lean knows how to handle in its generic infrastructure is the <code>Expr</code> type. If you want to make a declaration the contents of that declaration have to be an <code>Expr</code>. There are very few places which allow general types, usually as opaque blobs for \"user data\" which lean can preserve</p>",
        "id": 433713681,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713346644
    },
    {
        "content": "<p>Does the <code>eval%</code> elaborator help at all here?</p>",
        "id": 433713723,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713346659
    },
    {
        "content": "<p>I am happy to use <code>ToExpr</code> if that won't anger the Lean high priests.</p>",
        "id": 433713793,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1713346681
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> my guess is that Andrej is doing all of this inside an <code>elab</code> which plays a role similar to <code>eval%</code></p>",
        "id": 433714065,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713346773
    },
    {
        "content": "<p>(<code>eval%</code> also uses <code>ToExpr</code> to perform the conversion: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Mathlib.Meta.elabEvalExpr#doc\">docs#Mathlib.Meta.elabEvalExpr</a> )</p>",
        "id": 433714282,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713346840
    },
    {
        "content": "<p><code>CowData</code> is just a bunch of optional <code>Nat</code> and <code>Bool</code> fields, but like 30, so it would be nice not to have to write too much boiler-plate code. (And yes, it's all inside <code>Elab</code>.)</p>",
        "id": 433714361,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1713346867
    },
    {
        "content": "<p>It can't find an instance of <code>ToExpr</code> for <code>CowData</code>.</p>",
        "id": 433714404,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1713346884
    },
    {
        "content": "<p>you should be able to <code>derive ToExpr</code> on your type</p>",
        "id": 433714430,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713346891
    },
    {
        "content": "<p>oh but you will need <a href=\"https://tqft.net/mathlib4files/Mathlib/Tactic/DeriveToExpr\">file#Mathlib/Tactic/DeriveToExpr</a></p>",
        "id": 433714562,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713346932
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> should this be upstreamed to std4 or lean core?</p>",
        "id": 433714644,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713346964
    },
    {
        "content": "<p>This was held up by <a href=\"https://github.com/leanprover-community/mathlib4/pull/5952\">#5952</a>, which perhaps I should go back to (but adds a <code>Qq</code> dependency which makes upstreaming impossible)</p>",
        "id": 433715725,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713347293
    },
    {
        "content": "<p>I can derive <code>ToExpr</code> on <code>CowData</code> easily, but not on <code>Cow</code> because <code>Pasture</code> is \"complicated\". So I could do it if there were a way to convert <code>CowData</code> to <code>Q(CowData)</code>.</p>",
        "id": 433715857,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1713347339
    },
    {
        "content": "<p>That's exactly <code>ToExpr</code> (on <code>CowData</code>)</p>",
        "id": 433715970,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713347390
    },
    {
        "content": "<p>Ah, perhaps I should not force it to have type <code>Expr</code>...</p>",
        "id": 433716066,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1713347409
    },
    {
        "content": "<p>The return value of <code>toExpr (c : CowData)</code> is <code>Expr</code> but you can coerce it to <code>Q(CowData)</code></p>",
        "id": 433716197,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713347441
    },
    {
        "content": "<p>(Does Qq have a well typed version of <code>ToExpr</code>?)</p>",
        "id": 433716316,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713347479
    },
    {
        "content": "<p>(In <a href=\"https://github.com/leanprover-community/mathlib4/pull/5952\">#5952</a>, yes)</p>",
        "id": 433716341,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713347489
    },
    {
        "content": "<p><code>ToExpr</code> did the trick, it seems. Thanks. Also, why are you people awake?</p>",
        "id": 433716717,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1713347591
    },
    {
        "content": "<p>You will probably have to implement <code>ToExpr (Cow P)</code> manually, or write a function that does what you want with some related type signature. You can make use of <code>ToExpr CowData</code> in the implementation though</p>",
        "id": 433716805,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713347617
    },
    {
        "content": "<p>I just derived <code>ToExpr CowData</code>  and then used <code>$(@Cow.mk $cowData)</code> to circumvent deriving <code>ToExpr (Cow P)</code>.</p>",
        "id": 433717304,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1713347766
    }
]