[
    {
        "content": "<p>The tactic <code>rfl</code> is now spelt the same as the term <code>rfl</code> and I think historically we have plenty of justification for the claim that this is less confusing for beginners (there are several examples on this Zulip of people asking what the difference is between <code>rfl</code> and <code>refl</code> in Lean 3). Similarly the tactic <code>sorry</code> and the term <code>sorry</code> are spelt the same. Would it be a good idea to hence unify the spelling of the term <code>inferInstance</code> and the tactic <code>infer_instance</code>? This just came up in my teaching.</p>",
        "id": 413030641,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705353804
    },
    {
        "content": "<p>In principle: Since it has an underscore/two words this would go against our typical name scheme of snek case for tactics and proof stuff and camel case for proper values. I don't know if it is reasonable to make an exception here? If we do make an exception we should make it consistent, i.e. every term that has a corresponding tactic should be named the same style.</p>",
        "id": 413031000,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1705354023
    },
    {
        "content": "<p><code>instance</code>?</p>",
        "id": 413031022,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1705354038
    },
    {
        "content": "<p>That's a keyword, not such a good idea</p>",
        "id": 413031056,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1705354056
    },
    {
        "content": "<p><code>inst</code>?</p>",
        "id": 413033450,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1705355391
    },
    {
        "content": "<p><code>inst</code> is frequently used as a variable name, so I'm not a fan of changing to that.</p>",
        "id": 413038044,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1705357724
    },
    {
        "content": "<p>I think this is a nice lesson in \"tactics use a different naming convention to definitions\", and everything is working as intended</p>",
        "id": 413046225,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705362708
    },
    {
        "content": "<p>If you want to allow both spellings in your course or local repository, then it's easy to do.</p>",
        "id": 413050143,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705364590
    },
    {
        "content": "<p>I think it would be better if they were called <code>synth_instance</code>. It is confusing that the command is called <code>#synth</code> but I can never remember if the tactic is called <code>infer_instance</code> or <code>apply_instance</code> or <code>synth_instance</code></p>",
        "id": 413052161,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705365237
    },
    {
        "content": "<p>(or conversely I suppose we could rename the other command to <code>#infer</code>)</p>",
        "id": 413052307,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705365286
    },
    {
        "content": "<p>Come to think of it, <code>synth</code> could probably be used alone, without the \"instance\" part, resulting in a <code>synth</code> term/tactic and <code>#synth</code> command</p>",
        "id": 413052423,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705365331
    },
    {
        "content": "<p>It certainly makes sense to use consistent terminology for operations. Is \"synthesis\" the appropriate thing to be consistent with?</p>\n<p>As far as I know, no other system uses this terminology. Coq calls it \"inference\", while Haskell and Agda call it \"resolution\". Usually, I would expect synthesis to be something done either in the tradition of bidirectional type checking or in the field of program synthesis, which is not really the heritage of this feature.</p>",
        "id": 413121001,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1705399902
    },
    {
        "content": "<p>The original reason for synthesis to surface to the user is probably that it is internally refererred to as synthesis as well, you have e.g. synthInstance tracing etc.</p>",
        "id": 413122100,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1705400270
    },
    {
        "content": "<p>Considering the abstract (CS) meanings of \"synthesis\" and \"inference\", I think that typeclass inference leans much more on the \"synthesis\" side than \"inference\" - it's constructing a term not by unification but by sticking pieces together in ~arbitrary order, with non-unique results which don't really resemble any of the inputs directly. IMO it's not too far from program synthesis</p>",
        "id": 413123869,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705400837
    },
    {
        "content": "<p>Lean does \"inference\", when it infers <code>_</code> in terms by unification. Seems like a good idea to keep this concept distinct from the exploratory thing that is typeclass inference</p>",
        "id": 413124112,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705400914
    },
    {
        "content": "<p>So should we start calling it \"typeclass synthesis\" instead?</p>",
        "id": 413126706,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1705401784
    },
    {
        "content": "<p>So <code>synthInstance</code> and <code>synth_instance</code>?</p>",
        "id": 413127201,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705401954
    },
    {
        "content": "<p>or just <code>synth</code> as I mentioned above</p>",
        "id": 413134327,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705404494
    },
    {
        "content": "<p>Just <code>synth</code> I think is nice, and I like the distinction between instance synthesis and inference of holes.</p>",
        "id": 413184279,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1705420109
    }
]