[
    {
        "content": "<p>I am deeply confused. I have the following </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">UniformSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">UniformSpace</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">instTopologicalSpaceProd</span> <span class=\"o\">:</span> <span class=\"n\">TopologicalSpace</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">UniformSpace.toTopologicalSpace</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n <span class=\"n\">with_reducible_and_instances</span> <span class=\"n\">rfl</span> <span class=\"bp\">—</span> <span class=\"n\">works</span>\n</code></pre></div>\n<p>but I get the following error when tracing <code>simp</code> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.discharge</span><span class=\"o\">]</span> <span class=\"bp\">@</span><span class=\"n\">ContinuousLinearMap.strongUniformity_topology_eq</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">assign</span> <span class=\"kd\">instance</span>\n      <span class=\"n\">TopologicalSpace</span> <span class=\"o\">(</span><span class=\"n\">M₁</span> <span class=\"bp\">×</span> <span class=\"n\">M₃</span><span class=\"o\">)</span>\n    <span class=\"n\">sythesized</span> <span class=\"n\">value</span>\n      <span class=\"n\">instTopologicalSpaceProd</span>\n    <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">definitionally</span> <span class=\"n\">equal</span> <span class=\"n\">to</span>\n      <span class=\"n\">UniformSpace.toTopologicalSpace</span>\n</code></pre></div>\n<p>What am I missing here?</p>",
        "id": 418149725,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1706210806
    },
    {
        "content": "<p>The error comes from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.Simp.synthesizeArgs.synthesizeInstance#doc\">docs#Lean.Meta.Simp.synthesizeArgs.synthesizeInstance</a> in the block</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">withReducibleAndInstances</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">isDefEq</span> <span class=\"n\">x</span> <span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n        <span class=\"n\">return</span> <span class=\"n\">true</span>\n      <span class=\"k\">else</span>\n        <span class=\"n\">trace</span><span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.discharge</span><span class=\"o\">]</span> <span class=\"s2\">\"{← ppOrigin thmId}, failed to assign instance{indentExpr type}</span><span class=\"se\">\\n</span><span class=\"s2\">sythesized value{indentExpr val}</span><span class=\"se\">\\n</span><span class=\"s2\">is not definitionally equal to{indentExpr x}\"</span>\n        <span class=\"n\">return</span> <span class=\"n\">false</span>\n</code></pre></div>",
        "id": 418150620,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1706211131
    },
    {
        "content": "<p>Your <code>--works</code> line doesn't work for me.</p>",
        "id": 418151480,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1706211456
    },
    {
        "content": "<p>Is the error suppressed somehow in your actual code?</p>",
        "id": 418151575,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1706211486
    },
    {
        "content": "<p>Of course </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">UniformSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">UniformSpace</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">instTopologicalSpaceProd</span> <span class=\"o\">:</span> <span class=\"n\">TopologicalSpace</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">UniformSpace.toTopologicalSpace</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>works</p>",
        "id": 418151601,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1706211504
    },
    {
        "content": "<p>Sorry I should have prefaced that I am working in <a href=\"https://github.com/leanprover-community/mathlib4/tree/mrb%2Freducible_uniform_space_comap\">branch#mrb/reducible_uniform_space_comap</a></p>",
        "id": 418151995,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1706211664
    },
    {
        "content": "<p>The only change is that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=UniformSpace.comap#doc\">docs#UniformSpace.comap</a> is reducible there</p>",
        "id": 418152028,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1706211681
    },
    {
        "content": "<p>Actually <a href=\"https://github.com/leanprover-community/mathlib4/tree/mrb%2Foperator_norm\">branch#mrb/operator_norm</a> might be better if you want try to replicate the error also.</p>",
        "id": 418152356,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1706211823
    },
    {
        "content": "<p>I can't reproduce the error in your branch with </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.Tactic.simp.discharge</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">UniformSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">UniformSpace</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">instTopologicalSpaceProd</span> <span class=\"o\">:</span> <span class=\"n\">TopologicalSpace</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">UniformSpace.toTopologicalSpace</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">with_reducible_and_instances</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 418153016,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1706212089
    },
    {
        "content": "<p>Oh the error is in a different file!</p>",
        "id": 418153096,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1706212116
    },
    {
        "content": "<p>Yes, sorry. To reproduce the error, checkout <a href=\"https://github.com/leanprover-community/mathlib4/tree/mrb%2Foperator_norm\">branch#mrb/operator_norm</a> and in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContinuousLinearMap.prodMapL#doc\">docs#ContinuousLinearMap.prodMapL</a> remove the <code>(_)</code> from the last simp call in the proof</p>",
        "id": 418153533,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1706212290
    },
    {
        "content": "<p>I'm going straight to <code>strongUniformity_topology_eq</code></p>",
        "id": 418153662,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1706212327
    },
    {
        "content": "<p>It looks like unification is <del>taking</del> using a different instance in <code>simp</code> than just before.</p>",
        "id": 418155777,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1706213029
    },
    {
        "content": "<p><del>Should this be expected?</del> Better version of the question below</p>",
        "id": 418155967,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1706213092
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">instTopologicalSpaceProd</span> <span class=\"o\">:</span> <span class=\"n\">TopologicalSpace</span> <span class=\"o\">(</span><span class=\"n\">M₁</span> <span class=\"bp\">×</span> <span class=\"n\">M₃</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">PseudoMetricSpace.toUniformSpace.toTopologicalSpace</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">with_reducible_and_instances</span>  <span class=\"bp\">—</span> <span class=\"n\">fails</span>\n</code></pre></div>\n<p>This is where it ends up in the <code>simp</code> call</p>",
        "id": 418156452,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1706213279
    },
    {
        "content": "<p>Do previous <code>simp</code> steps affect the priority of instances? Is it going to some cache that it didn’t have before?</p>",
        "id": 418156805,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1706213411
    }
]