[
    {
        "content": "<p>A stupid question. I am a beginner of Lean.<br>\nWhy can \"rw [pow_two]\" be omitted?</p>\n<p>Code as follows:<br>\nexample : x âˆ£ x ^ 2 := by<br>\n  -- rw [pow_two] <br>\n  apply dvd_mul_left</p>",
        "id": 416562756,
        "sender_full_name": "Hallon",
        "timestamp": 1705581575
    },
    {
        "content": "<p>because <code>x ^ 2</code> and <code>x * x</code> are <em>definitionally equal</em>, although this is not obvious</p>",
        "id": 416562948,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705581641
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span>\n<span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n<span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 416563153,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705581713
    },
    {
        "content": "<p>where at each stage I just unfolded the recursive definition of <code>^</code>, <code>*</code> or <code>+</code></p>",
        "id": 416563250,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705581738
    },
    {
        "content": "<p>I know it is definitional equal. So all equation which is definitonal equal dont need explain?</p>",
        "id": 416563589,
        "sender_full_name": "Hallon",
        "timestamp": 1705581859
    },
    {
        "content": "<p>lean will unfold definitions if required to make a theorem application typecheck</p>",
        "id": 416563647,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705581886
    },
    {
        "content": "<p>so yes, in some circumstances</p>",
        "id": 416563740,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705581920
    },
    {
        "content": "<p>got. thanks! <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 416563823,
        "sender_full_name": "Hallon",
        "timestamp": 1705581945
    },
    {
        "content": "<p>Many tactics like <code>rw</code> are more picky about the form of the input though, which is why theorems like <code>pow_two</code> exist so that you can control what the goal looks like more precisely</p>",
        "id": 416563934,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705581976
    },
    {
        "content": "<p>uh-huh</p>",
        "id": 416564126,
        "sender_full_name": "Hallon",
        "timestamp": 1705582041
    },
    {
        "content": "<p>May I ask where you are from?</p>",
        "id": 416564278,
        "sender_full_name": "Hallon",
        "timestamp": 1705582091
    },
    {
        "content": "<p>normally we stick to Lean questions on this forum</p>",
        "id": 416668094,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705620874
    },
    {
        "content": "<p>You can find Mario's current affiliation at <a href=\"https://leanprover-community.github.io/teams/maintainers.html\">this</a> webpage. Also, his Zulip user profile has geographic coordinates which adds him to <a href=\"https://leanprover-community.github.io/meet.html\">this</a> map.</p>",
        "id": 416669048,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705621374
    }
]