[
    {
        "content": "<p>I’m bumping Mathematics in Lean from 4.6.0 to 4.8.0rc1 and <code>lake build</code> ends with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Some</span> <span class=\"n\">build</span> <span class=\"n\">steps</span> <span class=\"n\">logged</span> <span class=\"n\">failures</span><span class=\"o\">:</span>\n<span class=\"bp\">-</span> <span class=\"n\">Computing</span> <span class=\"n\">build</span> <span class=\"n\">jobs</span>\n<span class=\"bp\">-</span> <span class=\"n\">Building</span> <span class=\"n\">MIL.C02_Basics.S04_More_on_Order_and_Divisibility</span>\n<span class=\"bp\">-</span> <span class=\"n\">Building</span> <span class=\"n\">MIL.C02_Basics.S05_Proving_Facts_about_Algebraic_Structures</span>\n<span class=\"bp\">-</span> <span class=\"n\">Building</span> <span class=\"n\">MIL.C03_Logic.S02_The_Existential_Quantifier</span>\n<span class=\"bp\">-</span> <span class=\"n\">Building</span> <span class=\"n\">MIL.C03_Logic.S06_Sequences_and_Convergence</span>\n<span class=\"bp\">-</span> <span class=\"n\">Building</span> <span class=\"n\">MIL.C04_Sets_and_Functions.S03_The_Schroeder_Bernstein_Theorem</span>\n<span class=\"bp\">-</span> <span class=\"n\">Building</span> <span class=\"n\">MIL.C05_Elementary_Number_Theory.S01_Irrational_Roots</span>\n<span class=\"bp\">-</span> <span class=\"n\">Building</span> <span class=\"n\">MIL.C05_Elementary_Number_Theory.S02_Induction_and_Recursion</span>\n</code></pre></div>\n<p>This is so much nicer than crawling through the output to search for file names! Thanks a lot <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span>!</p>",
        "id": 436720212,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714663709
    },
    {
        "content": "<p>Oh this is very cool! This is a great improvement! Thanks a lot Mac!</p>",
        "id": 436723956,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714664837
    },
    {
        "content": "<p>I recently noticed that the \"lint mathlib\" step of CI runs even if the \"build mathlib\" fails. As a consequence, all the build errors resurface during linting (which fails quickly), making it super practical to debug a PR.</p>",
        "id": 436724701,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1714665038
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> this was probably a consequence of <a href=\"https://github.com/leanprover-community/mathlib4/pull/11454\">#11454</a>: I intended for CI to continue after <code>shake</code>, but it seems that it just... <em>continues</em>!</p>",
        "id": 436729140,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1714666314
    },
    {
        "content": "<p>Oh I see. Serendipitous!</p>",
        "id": 436729272,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1714666347
    },
    {
        "content": "<p>I have fixed all errors except for</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Some</span> <span class=\"n\">build</span> <span class=\"n\">steps</span> <span class=\"n\">logged</span> <span class=\"n\">failures</span><span class=\"o\">:</span>\n<span class=\"bp\">-</span> <span class=\"n\">Computing</span> <span class=\"n\">build</span> <span class=\"n\">jobs</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">build</span> <span class=\"n\">failed</span>\n</code></pre></div>\n<p>which is not very useful. Here I need to go at the very beginning of the lake output to find the error (a non-existent import). The Summary message would a be lot more useful if <code>Computing build jobs</code> could be replaced (or extended) with something mentioning the missing file and where it is imported.</p>",
        "id": 436743134,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714671106
    },
    {
        "content": "<p>That is a consequence of a import errors causing the main Lake process to fail. Yael already reported this as an issue in <a href=\"https://github.com/leanprover/lean4/pull/3809\">lean4#3809</a>. Fixing that should fix this as well.</p>",
        "id": 436759633,
        "sender_full_name": "Mac Malone",
        "timestamp": 1714677003
    },
    {
        "content": "<p>Thanks Mac. I understand where this comes from. I simply say it could be nicer. And, since you recently improved those messages a lot, I thought now may be a good time.</p>",
        "id": 436769488,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714680760
    },
    {
        "content": "<p>I've edited the issue to mention that the error message doesn't where the bad import is</p>",
        "id": 436771128,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1714681473
    },
    {
        "content": "<p>And now I am super confused. I think I got rid of all errors, but lake does not become silent, it still seems to go through files and print messages.</p>",
        "id": 436771459,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714681615
    },
    {
        "content": "<p>But it exits with code 0. Does this mean lean is happy?</p>",
        "id": 436771657,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714681694
    },
    {
        "content": "<p>Yes I believe that's another recent change</p>",
        "id": 436772803,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1714682196
    },
    {
        "content": "<p>Then it is a bit disturbing. Maybe ending with a friendly message telling that everything is ok would be nice.</p>",
        "id": 436772980,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714682279
    },
    {
        "content": "<p>Does lake know these are no-ops? If so, a message like <code>make</code>'s in this situation can be emitted to indicate that nothing needs to be done. <code>make</code>'s message makes it clear that it has check all targets/tasks (nothing is missing), and nothing further needs to be done (no todo, no failure), so the user is rest assured.</p>",
        "id": 436816302,
        "sender_full_name": "Utensil Song",
        "timestamp": 1714710869
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"296911\">@Utensil Song</span> Sadly, no, not at the top-level were the progress is now managed.</p>",
        "id": 436842068,
        "sender_full_name": "Mac Malone",
        "timestamp": 1714726044
    },
    {
        "content": "<p>Ah, I see. I assumed that the information is propagated like task todo/done/no-op.</p>",
        "id": 436846292,
        "sender_full_name": "Utensil Song",
        "timestamp": 1714727883
    }
]