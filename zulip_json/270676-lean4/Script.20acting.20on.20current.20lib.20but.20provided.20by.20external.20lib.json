[
    {
        "content": "<p>I’m slowly working on improving the UX for leanblueprint and I reached the point where I need to check that some declaration names exists in the current project. Say I want a blueprint for FLT. The python side of leanblueprint creates a text file with declaration names, with one name per line. Say this file is called <code>lean_decls.txt</code>.  I would like to simply add a line to <code>flt/lakefile.lean</code> which says </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">require</span> <span class=\"n\">checkdecls</span> <span class=\"k\">from</span> <span class=\"k\">from</span> <span class=\"n\">git</span> <span class=\"s2\">\"https://github.com/leanprover-community/checkdecls.git\"</span>\n</code></pre></div>\n<p>and then, from inside the <code>flt</code> folder, I want to be able to run <code>lake exe checkdecls lean_decls.txt</code> and that should execute some code sitting at the – currently non-existent – <code>https://github.com/leanprover-community/checkdecls.git</code> that either succeeds (i.e. exists with a zero exit code) or prints the list of non-existing declaration if the main target lib designated in <code>flt/lakefile.lean</code> (including declaration defined in libs imported by flt). I have no trouble writing meta code that check whether a name is in the current environment. What I don’t know about is the required lake magic to execute a script defined by a required lib and make sure it has access to the current library.</p>",
        "id": 420559327,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707434769
    },
    {
        "content": "<p>I guess this is mostly a question for <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> but <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> and everybody else is welcome to answer. There is extra credit for answers that wouldn’t break every month with each new Lean release.</p>",
        "id": 420559457,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707434850
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> The extra credit is hard (I believe this program already looked different in v4.5.0), but it is now possible (though awkward) to access properties of the current lake project by using the lake API. Here's an implementation of your <code>checkdecls</code> command, minus the file parsing part:</p>\n<p><code>lakefile.lean</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">package</span> <span class=\"n\">test</span>\n<span class=\"n\">lean_lib</span> <span class=\"n\">Test</span>\n\n<span class=\"n\">lean_exe</span> <span class=\"n\">checkdecls</span> <span class=\"n\">where</span>\n  <span class=\"n\">root</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">CheckDecls.Main</span>\n  <span class=\"n\">supportInterpreter</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n</code></pre></div>\n<p><code>Test.lean</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p><code>CheckDecls/Main.lean</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lake.CLI.Main</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lake</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">UInt32</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">elanInstall</span><span class=\"bp\">?</span><span class=\"o\">,</span> <span class=\"n\">leanInstall</span><span class=\"bp\">?</span><span class=\"o\">,</span> <span class=\"n\">lakeInstall</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">findInstall</span><span class=\"bp\">?</span>\n  <span class=\"k\">let</span> <span class=\"n\">config</span> <span class=\"bp\">←</span> <span class=\"n\">MonadError.runEIO</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">mkLoadConfig.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"n\">elanInstall</span><span class=\"bp\">?</span><span class=\"o\">,</span> <span class=\"n\">leanInstall</span><span class=\"bp\">?</span><span class=\"o\">,</span> <span class=\"n\">lakeInstall</span><span class=\"bp\">?</span> <span class=\"o\">}</span>\n  <span class=\"k\">let</span> <span class=\"n\">ws</span> <span class=\"bp\">←</span> <span class=\"n\">MonadError.runEIO</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"n\">loadWorkspace</span> <span class=\"n\">config</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">run</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">eio</span> <span class=\"bp\">.</span><span class=\"n\">normal</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">imports</span> <span class=\"o\">:=</span> <span class=\"n\">ws.root.leanLibs.concatMap</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">config.roots.map</span> <span class=\"k\">fun</span> <span class=\"n\">module</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">module</span> <span class=\"o\">})</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.importModules</span> <span class=\"n\">imports</span> <span class=\"o\">{}</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">ok</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n  <span class=\"n\">for</span> <span class=\"n\">n</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">bar</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"n\">unless</span> <span class=\"n\">env.contains</span> <span class=\"n\">n</span> <span class=\"k\">do</span>\n      <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"s2\">\"{n} is missing\"</span>\n      <span class=\"n\">ok</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n  <span class=\"n\">return</span> <span class=\"k\">if</span> <span class=\"n\">ok</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>result:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">checkdecls</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">CheckDecls.Main</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"bp\">/</span><span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">CheckDecls.Main</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"bp\">/</span><span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">checkdecls</span>\n<span class=\"n\">bar</span> <span class=\"n\">is</span> <span class=\"n\">missing</span>\n</code></pre></div>\n<p>The <code>CheckDecls</code> exe can be defined in a dependency. This implementation looks at all <code>lean_lib</code>s - originally I wrote it to use only the <code>default_target</code> ones but <code>lean_exe</code> targets have inaccessible module names which makes them a bit weird. In practice you will only have one <code>lean_lib</code> so this should be fine.</p>",
        "id": 420582280,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707450468
    },
    {
        "content": "<p>Thanks! Don’t worry, the extra credit part was a joke. I know this isn’t currently possible (but one can still dream).</p>",
        "id": 420664944,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707489511
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> this doesn’t seem to work. I pushed your code at <a href=\"https://github.com/PatrickMassot/checkdecls\">https://github.com/PatrickMassot/checkdecls</a> and then if I had to the sphere eversion project lakefile a line saying </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">require</span> <span class=\"n\">checkdecls</span> <span class=\"k\">from</span> <span class=\"n\">git</span> <span class=\"s2\">\"https://github.com/PatrickMassot/checkdecls.git\"</span>\n</code></pre></div>\n<p>and run inside the sphere eversion repo <code>lake exe checkdecls</code> then I get the error message</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">uncaught</span> <span class=\"n\">exception</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">package</span> <span class=\"bp\">'</span><span class=\"n\">SphereEversion'</span>\n<span class=\"n\">You</span> <span class=\"n\">might</span> <span class=\"n\">need</span> <span class=\"n\">to</span> <span class=\"kn\">open</span> <span class=\"bp\">'/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">pmassot</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">sphere</span><span class=\"bp\">-</span><span class=\"n\">eversion'</span> <span class=\"n\">as</span> <span class=\"n\">a</span> <span class=\"n\">workspace</span> <span class=\"k\">in</span> <span class=\"n\">your</span> <span class=\"n\">editor</span>\n</code></pre></div>",
        "id": 420706358,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707502604
    },
    {
        "content": "<p>did you compile the project first?</p>",
        "id": 420706655,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707502740
    },
    {
        "content": "<p>Ah. Maybe not.</p>",
        "id": 420706841,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707502805
    },
    {
        "content": "<p>Indeed this fixes the issue. Thanks! And sorry about the noise.</p>",
        "id": 420707011,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707502883
    },
    {
        "content": "<p>The hilarious thing is that this script reports <code>bar</code> is missing from the Sphere eversion project, but <code>foo</code> is ok (and it’s true).</p>",
        "id": 420707585,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707503130
    }
]