[
    {
        "content": "<p>So far, the only examples of parallelized Lean code that I've seen print something in each thread.  This is because the only examples of parallelized Lean code that I've seen is <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>'s <a href=\"https://github.com/kmill/lean4-raytracer/blob/master/Main.lean\">https://github.com/kmill/lean4-raytracer/blob/master/Main.lean</a>.</p>\n<p>Is there a way to parallelize Lean code without printing (at least until after the parallelism completes)?  E.g., here is some code that runs nicely in parallel (it pins 2 CPUs), but if I remove the print in <code>loud_count</code> it runs in serial (presumably because of hoisting):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Data.Nat.Basic</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">!</span>\n<span class=\"cm\">## Try to do trial division for primes in parallel</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">slow_prime_loop</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n<span class=\"bp\">|</span> <span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">!=</span> <span class=\"mi\">0</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">slow_prime_loop</span> <span class=\"n\">n</span> <span class=\"n\">k</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">slow_prime</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">slow_prime_loop</span> <span class=\"n\">n</span> <span class=\"n\">n.sqrt</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">count</span> <span class=\"o\">(</span><span class=\"n\">lo</span> <span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"bp\">-</span> <span class=\"n\">lo</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fold</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"n\">t</span> <span class=\"bp\">↦</span> <span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"k\">if</span> <span class=\"n\">slow_prime</span> <span class=\"o\">(</span><span class=\"n\">lo</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">loud_count</span> <span class=\"o\">(</span><span class=\"n\">lo</span> <span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">IO.lazyPure</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">count</span> <span class=\"n\">lo</span> <span class=\"n\">hi</span><span class=\"o\">)</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"count {lo} {hi}\"</span>  <span class=\"c1\">-- Removing this breaks parallelism</span>\n  <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">IO.wait'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Task</span> <span class=\"o\">(</span><span class=\"n\">Except</span> <span class=\"n\">IO.Error</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">IO.ofExcept</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">IO.wait</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"mi\">1000</span> <span class=\"bp\">*</span> <span class=\"mi\">1000</span> <span class=\"bp\">*</span> <span class=\"mi\">10</span>\n  <span class=\"k\">let</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n  <span class=\"k\">let</span> <span class=\"n\">t0</span> <span class=\"bp\">←</span> <span class=\"n\">IO.asTask</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">loud_count</span> <span class=\"mi\">0</span> <span class=\"n\">k</span>\n  <span class=\"k\">let</span> <span class=\"n\">t1</span> <span class=\"bp\">←</span> <span class=\"n\">IO.asTask</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">loud_count</span> <span class=\"n\">k</span> <span class=\"n\">n</span>\n  <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">IO.wait'</span> <span class=\"n\">t0</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">IO.wait'</span> <span class=\"n\">t1</span><span class=\"o\">)</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"π(n) = {r}\"</span>\n</code></pre></div>",
        "id": 424281182,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1709310333
    },
    {
        "content": "<p>Separately, it seems like <code>Task.spawn</code> is intended to allow parallelism within purely functional code, but after some trying I've failed to construct an example where it parallelizes (I can only get parallelism out of <code>IO.asTask</code>, and there only if I have some interleaved side effect like printing).</p>",
        "id": 424281608,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1709310460
    },
    {
        "content": "<p>I used a pattern like this with <code>Task</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>         <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">workers</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">Task</span> <span class=\"o\">(</span><span class=\"n\">MyComputation</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n            <span class=\"k\">let</span> <span class=\"n\">task</span> <span class=\"o\">:=</span> <span class=\"n\">Task.spawn</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>  <span class=\"n\">myComputation</span>\n            <span class=\"n\">workers</span> <span class=\"o\">:=</span> <span class=\"n\">workers.push</span> <span class=\"n\">task</span>\n         <span class=\"n\">for</span> <span class=\"n\">worker</span> <span class=\"k\">in</span> <span class=\"n\">workers</span> <span class=\"k\">do</span>\n            <span class=\"k\">let</span> <span class=\"n\">myResult</span> <span class=\"o\">:=</span> <span class=\"n\">worker.get</span>\n</code></pre></div>\n<p>(this is in <code>Id.run</code> for the <code>do</code> notation in a pure context).</p>\n<p><a href=\"https://github.com/goens/lost-pop-lean/blob/b1cfa33e37f44c9e5dd932e1a39ec0ec3c78edfc/Pop/Exploration.lean#L321C1-L355C32\">Here's the full version</a> of that in case you want to see an example</p>",
        "id": 424283103,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1709310851
    },
    {
        "content": "<p>This gets all my 20 CPUs working:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- `m` number of threads</span>\n<span class=\"sd\">    `n` number of operations per thread -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">parallelReduce</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">unit</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">tasks</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">Task</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Array.mkEmpty</span> <span class=\"n\">m</span>\n\n  <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">partialReduce</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">unit</span>\n      <span class=\"n\">for</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"n\">i</span><span class=\"bp\">*</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n        <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">op</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span><span class=\"gr\">sorry</span><span class=\"o\">⟩)</span>\n      <span class=\"n\">a</span>\n    <span class=\"n\">tasks</span> <span class=\"o\">:=</span> <span class=\"n\">tasks.push</span> <span class=\"o\">(</span><span class=\"n\">Task.spawn</span> <span class=\"n\">partialReduce</span><span class=\"o\">)</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">unit</span>\n  <span class=\"n\">for</span> <span class=\"n\">t</span> <span class=\"k\">in</span> <span class=\"n\">tasks</span> <span class=\"k\">do</span>\n    <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">op</span> <span class=\"n\">a</span> <span class=\"n\">t.get</span>\n  <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"mi\">1000000</span>\n<span class=\"kd\">def</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"mi\">10</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"n\">m</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"c1\">-- expected result</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">parallelReduce</span> <span class=\"mi\">10000000</span> <span class=\"mi\">20</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">·+·</span><span class=\"o\">)</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 424284926,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1709311276
    },
    {
        "content": "<p>Hmm, so is the principle just: you have to make things complicated enough so the compiler doesn't bother to see through it?  Is there a way to more directly fix the simple case of parallelizing two tasks?</p>",
        "id": 424285229,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1709311360
    },
    {
        "content": "<p>Indeed if it mask what's going on with a mutable array of tasks, it works without the printing and with <code>Task.spawn</code>.  But this seems a bit unsatisfying.</p>",
        "id": 424285494,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1709311438
    },
    {
        "content": "<p>To elaborate: the reason I was hitting the \"simple, two case\" example in my original complicated application is that I was doing recursive splitting, so each function was dealing with one or two subtasks with clear control flow.</p>",
        "id": 424285904,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1709311537
    },
    {
        "content": "<p>In any case, I suppose I'm unblocked, since I can rearchitect my code to hide what's going on and then it will work. :)</p>\n<p>Thank you!</p>",
        "id": 424286593,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1709311755
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"514145\">Geoffrey Irving</span> <a href=\"#narrow/stream/270676-lean4/topic/Parallelism.20without.20printing.20things/near/424285229\">said</a>:</p>\n<blockquote>\n<p>Hmm, so is the principle just: you have to make things complicated enough so the compiler doesn't bother to see through it?  Is there a way to more directly fix the simple case of parallelizing two tasks?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"514145\">@Geoffrey Irving</span> I was a bit skeptical of this claim because the compiler isn't that smart, and indeed I can't replicate the original example: running your test with the <code>println</code> commented out results in a program that uses 2 CPUs like I would expect. The main thing to watch out for is that if both arguments to <code>count</code> are constants (closed terms) such that the <code>count</code> call itself is a closed term, then it will be calculated at initialization time, and this is not parallelized. The original code is at risk of this because you have hard-coded <code>n</code> and <code>k</code> instead of taking them via stdin or laundering them through <code>let n &lt;- pure 100</code> etc. Having <code>loud_count</code> as an intermediate also blocks this though, as long as it is not inlined (which you can ensure using <code>@[noinline]</code>).</p>",
        "id": 424365988,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709356344
    },
    {
        "content": "<p>Yep, that makes sense, and <code>@[noinline]</code> will help!</p>",
        "id": 424408280,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1709383218
    },
    {
        "content": "<p>Ah, to clarify: initialization is not parallelized even if Task is used?  I think this would explain my initial difficulties as well.  Is there a bug tracking that, or a reason why it's unfixable?</p>",
        "id": 424409040,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1709383949
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"514145\">Geoffrey Irving</span> <a href=\"#narrow/stream/270676-lean4/topic/Parallelism.20without.20printing.20things/near/424409040\">said</a>:</p>\n<blockquote>\n<p>Ah, to clarify: initialization is not parallelized even if Task is used?  I think this would explain my initial difficulties as well.  Is there a bug tracking that, or a reason why it's unfixable?</p>\n</blockquote>\n<p>IO things are never hoisted to initialization time. Pure tasks using <code>Task.mk</code> could be hoisted, and they will be parallelized the same way as they would be if run at runtime because they are evaluated in basically the same way, just before main. But this example uses <code>IO.asTask</code> and that will have to run at runtime.</p>",
        "id": 424531091,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709489677
    },
    {
        "content": "<p>Will the arguments of Task.spawn will also get hoisted out of the spawn, if they are constant?</p>",
        "id": 424534234,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1709492005
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 426292091,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1710321950
    }
]