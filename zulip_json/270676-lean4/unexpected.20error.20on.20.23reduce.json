[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"s2\">\"hello, \"</span><span class=\"w\"> </span><span class=\"bp\">++</span><span class=\"w\"> </span><span class=\"n\">x</span>\n\n<span class=\"k\">#check</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"s2\">\"hello\"</span>\n\n<span class=\"k\">#eval</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"s2\">\"hello\"</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">maximum recursion depth has been reached</span>\n<span class=\"cm\">use `set_option maxRecDepth &lt;num&gt;` to increase limit</span>\n<span class=\"cm\">use `set_option diagnostics true` to get diagnostic information</span>\n<span class=\"cm\">-/</span>\n<span class=\"k\">#reduce</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"s2\">\"hello\"</span>\n</code></pre></div>",
        "id": 444941290,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1718513843
    },
    {
        "content": "<p>why this error occurs?</p>",
        "id": 444943613,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1718515971
    },
    {
        "content": "<p>Because Unicode is huge?</p>",
        "id": 444952278,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1718523755
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> maybe...?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">square</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Int</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">x</span>\n\n<span class=\"c1\">-- this does not throw error</span>\n<span class=\"k\">#reduce</span><span class=\"w\"> </span><span class=\"n\">square</span><span class=\"w\"> </span><span class=\"mi\">19</span>\n</code></pre></div>",
        "id": 444964042,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1718533548
    },
    {
        "content": "<p>Here's a more minimal <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">reduce</span><span class=\"w\"> </span><span class=\"n\">Char</span><span class=\"bp\">.</span><span class=\"n\">ofNat</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">nat_lit</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 444964870,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718534350
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/issues/4465\">https://github.com/leanprover/lean4/issues/4465</a></p>",
        "id": 444965237,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718534668
    },
    {
        "content": "<p>This is probably because it needs to execute <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.isValidChar#doc\">docs#Nat.isValidChar</a> which executes less than with a very wide range of bounds. The decision procedure that's synthesized for this has an efficient extern but no efficient kernel implementation. Unless you can convince core to add native support for reducing <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.ble#doc\">docs#Nat.ble</a> in the kernel there is pretty much no chance of this working out.</p>",
        "id": 444965468,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1718534893
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"626349\">Asei Inoue</span> <a href=\"#narrow/stream/270676-lean4/topic/unexpected.20error.20on.20.23reduce/near/444964042\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> maybe...?</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">square</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Int</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">x</span>\n\n<span class=\"c1\">-- this does not throw error</span>\n<span class=\"k\">#reduce</span><span class=\"w\"> </span><span class=\"n\">square</span><span class=\"w\"> </span><span class=\"mi\">19</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This on the other hand works out because it is backed by <code>Nat.mul</code> which does already have a native kernel implementation</p>",
        "id": 444965495,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1718534930
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/unexpected.20error.20on.20.23reduce/near/444965468\">said</a>:</p>\n<blockquote>\n<p>This is probably because it needs to execute <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.isValidChar#doc\">docs#Nat.isValidChar</a> which executes less than with a very wide range of bounds. The decision procedure that's synthesized for this has an efficient extern but no efficient kernel implementation. Unless you can convince core to add native support for reducing <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.ble#doc\">docs#Nat.ble</a> in the kernel there is pretty much no chance of this working out.</p>\n</blockquote>\n<p>Not exactly. These definitions compute well enough in the kernel, but the problem is that <code>#reduce</code> also reduces proofs, and does not stop until it reaches a normal form. What is the normal form of a proof of <code>0 &lt;= 0x10FFFF</code>? It's a sequence of <code>0x10FFFF</code> applications of <code>Nat.le.step</code>, so it's impossible for <code>#reduce</code> not to take that long because the correct output itself is huge.</p>",
        "id": 444980461,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1718548089
    },
    {
        "content": "<p>I guess if you apply toNat to the result it will be fast again</p>",
        "id": 444980523,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1718548180
    },
    {
        "content": "<p>It's a little more complicated to do this for strings but this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"s2\">\"hello, \"</span><span class=\"w\"> </span><span class=\"bp\">++</span><span class=\"w\"> </span><span class=\"n\">x</span>\n\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"s2\">\"hello\"</span>\n\n<span class=\"bp\">#</span><span class=\"n\">eval</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"s2\">\"hello\"</span>\n\n<span class=\"bp\">#</span><span class=\"n\">reduce</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"s2\">\"hello\"</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"n\">Char</span><span class=\"bp\">.</span><span class=\"n\">toNat</span>\n<span class=\"c1\">-- [104, 101, 108, 108, 111, 44, 32, 104, 101, 108, 108, 111]</span>\n</code></pre></div>",
        "id": 444980678,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1718548306
    }
]