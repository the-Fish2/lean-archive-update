[
    {
        "content": "<p>Hey there, I have an example where I have a function that does pattern matching (for simplifying an expression let's say), and I want to prove a lemma that the expression and it's simplified version are equivalent.</p>\n<p>For examples:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Pair</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">Z</span>\n<span class=\"bp\">|</span> <span class=\"n\">P</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Pair</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Pair.sum</span><span class=\"o\">:</span> <span class=\"n\">Pair</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">Z</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">P</span> <span class=\"n\">n1</span> <span class=\"n\">n2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n1</span> <span class=\"bp\">+</span> <span class=\"n\">n2</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Pair.simplify</span><span class=\"o\">:</span> <span class=\"n\">Pair</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Pair</span>\n<span class=\"bp\">|</span> <span class=\"n\">Z</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Z</span>\n<span class=\"bp\">|</span> <span class=\"n\">P</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Z</span>\n<span class=\"bp\">|</span> <span class=\"n\">P</span> <span class=\"n\">n1</span> <span class=\"n\">n2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">P</span> <span class=\"n\">n2</span> <span class=\"n\">n1</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Pair.simplify.same_sum</span> <span class=\"o\">{</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">Pair</span><span class=\"o\">}:</span> <span class=\"n\">p.sum</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">p.simplify</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Here I would like to make an induction on <code>P</code> but with the patterns of <code>Pair.simplify</code> as patterns. Do I hav a way to do that ?</p>\n<p>Note that I really need the induction hypotheses to be generated in my original case but there are no induction hypotheses in this example.</p>",
        "id": 433734195,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1713353918
    },
    {
        "content": "<p>Note that the following proof does not work because lean cannot deconstruct the match statements in the last case:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Pair.simplify.same_sum</span> <span class=\"o\">{</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">Pair</span><span class=\"o\">}:</span> <span class=\"n\">p.sum</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">p.simplify</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"k\">match</span> <span class=\"n\">p</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">Z</span> <span class=\"bp\">|</span> <span class=\"n\">P</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">simplify</span><span class=\"o\">,</span> <span class=\"n\">sum</span><span class=\"o\">]</span>\n<span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"n\">P</span> <span class=\"n\">n1</span> <span class=\"n\">n2</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">simplify</span><span class=\"o\">,</span> <span class=\"n\">sum</span><span class=\"o\">]</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 433734989,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1713354198
    },
    {
        "content": "<p>The only solution I found is through returning a subtype instead of the original type:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Pair</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">Z</span>\n<span class=\"bp\">|</span> <span class=\"n\">P</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Pair</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Pair.sum</span><span class=\"o\">:</span> <span class=\"n\">Pair</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">Z</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">P</span> <span class=\"n\">n1</span> <span class=\"n\">n2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n1</span> <span class=\"bp\">+</span> <span class=\"n\">n2</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Pair.simplify</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">Pair</span><span class=\"o\">):</span> <span class=\"o\">{</span> <span class=\"n\">p'</span> <span class=\"o\">:</span> <span class=\"n\">Pair</span> <span class=\"bp\">//</span> <span class=\"n\">p'.sum</span> <span class=\"bp\">=</span> <span class=\"n\">p.sum</span> <span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">p</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">Z</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n  <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">Z</span><span class=\"o\">,</span>\n  <span class=\"n\">property</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"n\">P</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n  <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">Z</span><span class=\"o\">,</span>\n  <span class=\"n\">property</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">sum</span><span class=\"o\">]</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"n\">P</span> <span class=\"n\">n1</span> <span class=\"n\">n2</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n  <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">P</span> <span class=\"n\">n2</span> <span class=\"n\">n1</span><span class=\"o\">,</span>\n  <span class=\"n\">property</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">sum</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_comm</span><span class=\"o\">]</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 433736888,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1713354833
    },
    {
        "content": "<p>Try <code>unfold .simplify; split</code>, the first exposes the match statement that simplify is built with, the next goes into the three branches.</p>",
        "id": 433737076,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1713354882
    },
    {
        "content": "<p>Yeah but in this case I need <code>rename_i</code> and I need to manually build my induction hypotheses if I have an inductive type</p>",
        "id": 433737236,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1713354933
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"658705\">Thomas Vigouroux</span> <a href=\"#narrow/stream/270676-lean4/topic/.22Deep.22.20induction/near/433736888\">said</a>:</p>\n<blockquote>\n<p>The only solution I found is through returning a subtype instead of the original type:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Pair</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">Z</span>\n<span class=\"bp\">|</span> <span class=\"n\">P</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Pair</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Pair.sum</span><span class=\"o\">:</span> <span class=\"n\">Pair</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">Z</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">P</span> <span class=\"n\">n1</span> <span class=\"n\">n2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n1</span> <span class=\"bp\">+</span> <span class=\"n\">n2</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Pair.simplify</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">Pair</span><span class=\"o\">):</span> <span class=\"o\">{</span> <span class=\"n\">p'</span> <span class=\"o\">:</span> <span class=\"n\">Pair</span> <span class=\"bp\">//</span> <span class=\"n\">p'.sum</span> <span class=\"bp\">=</span> <span class=\"n\">p.sum</span> <span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">p</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">Z</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n  <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">Z</span><span class=\"o\">,</span>\n  <span class=\"n\">property</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"n\">P</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n  <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">Z</span><span class=\"o\">,</span>\n  <span class=\"n\">property</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">sum</span><span class=\"o\">]</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"n\">P</span> <span class=\"n\">n1</span> <span class=\"n\">n2</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n  <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">P</span> <span class=\"n\">n2</span> <span class=\"n\">n1</span><span class=\"o\">,</span>\n  <span class=\"n\">property</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">sum</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_comm</span><span class=\"o\">]</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>So that version is nice-ish but it does not allow me to prove lemmas that I might need within my proofs of equality. Let met find an example that reproduces that.</p>",
        "id": 433773110,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1713362924
    },
    {
        "content": "<p>This is not quite good yet because it does not require lemmas, but you can see that it even works for inductive types:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Expr</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">Const</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">Plus</span><span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Expr.compute</span><span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">Const</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">c</span>\n<span class=\"bp\">|</span> <span class=\"n\">Plus</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">e₁.compute</span> <span class=\"bp\">+</span> <span class=\"n\">e₂.compute</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Expr.simplify</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">{</span> <span class=\"n\">p'</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">//</span> <span class=\"n\">p'.compute</span> <span class=\"bp\">=</span> <span class=\"n\">p.compute</span> <span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"n\">Const</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n  <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">Const</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"n\">property</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n<span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"n\">Plus</span> <span class=\"o\">(</span><span class=\"n\">Const</span> <span class=\"n\">n₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Const</span> <span class=\"n\">n₂</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n  <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">Const</span> <span class=\"o\">(</span><span class=\"n\">n₁</span> <span class=\"bp\">+</span> <span class=\"n\">n₂</span><span class=\"o\">),</span>\n  <span class=\"n\">property</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">compute</span><span class=\"o\">]</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"n\">Plus</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n  <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">Plus</span> <span class=\"n\">e₂.simplify</span> <span class=\"n\">e₁.simplify</span><span class=\"o\">,</span>\n  <span class=\"n\">property</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">e₁'</span><span class=\"o\">,</span> <span class=\"n\">he₁'</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">e₁.simplify</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">e₂'</span><span class=\"o\">,</span> <span class=\"n\">he₂'</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">e₂.simplify</span>\n\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">compute</span><span class=\"o\">,</span> <span class=\"n\">he₁'</span><span class=\"o\">,</span> <span class=\"n\">he₂'</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_comm</span><span class=\"o\">]</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 433777174,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1713363389
    },
    {
        "content": "<p>I feel like this is just a simple extension of the induction tactic to allow pattern matching, am I missing something ?</p>",
        "id": 434059500,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1713450144
    },
    {
        "content": "<p>I ended up writing a custom recursion principle for my definition, which allows me to write my proofs more easily</p>",
        "id": 434099501,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1713452648
    },
    {
        "content": "<p>There is a feature on the latest nightlies that hasn't made it into a release candidate yet called <code>derive_functional_induction</code>. I think here writing <code>derive_functional_induction Pair.simplify</code> and then <code>by induction p using Pair.simplify.induct</code> would do what you want</p>",
        "id": 434178970,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1713457241
    },
    {
        "content": "<p>Oho, I'll look into how I can do that then</p>",
        "id": 434207924,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1713461367
    },
    {
        "content": "<p>It seems that this is exactly what I did with my \"custom\" recursor</p>",
        "id": 434207989,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1713461396
    }
]