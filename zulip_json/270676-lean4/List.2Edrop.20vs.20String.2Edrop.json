[
    {
        "content": "<p>Is there a design consideration behind the fact that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=String.drop#doc\">docs#String.drop</a> takes the string as the first argument, while <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.drop#doc\">docs#List.drop</a> takes the list as the second one (and the same for <code>take</code> etc)? Of course, it's irrelevant when using dot notation, but it can lead to some minor inconveniences without (e.g. switching from <code>String</code> to <code>List Char</code> in a large codebase)</p>",
        "id": 419463309,
        "sender_full_name": "Horațiu Cheval",
        "timestamp": 1706882542
    },
    {
        "content": "<p>I believe the preference is to take the main argument first</p>",
        "id": 419463516,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706882613
    },
    {
        "content": "<p>which differs from the haskell convention to put the main argument last</p>",
        "id": 419463556,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706882631
    },
    {
        "content": "<p>Yes, though many list functions seem to go against this preference</p>",
        "id": 419464068,
        "sender_full_name": "Horațiu Cheval",
        "timestamp": 1706882773
    },
    {
        "content": "<p>I think a motivation for number first is that <code>List.drop n</code> is an operator that drops <code>n</code> elements, like how <code>List.map f</code> is an operator that maps <code>f</code> over the elements, and so on.</p>",
        "id": 419508182,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1706897180
    },
    {
        "content": "<p>that's the reason haskell does it, but I think it's not a strong argument in lean because <code>(·.drop n)</code> also does this</p>",
        "id": 419508563,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706897322
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/List.2Edrop.20vs.20String.2Edrop/near/419508563\">said</a>:</p>\n<blockquote>\n<p>that's the reason haskell does it, but I think it's not a strong argument in lean because <code>(·.drop n)</code> also does this</p>\n</blockquote>\n<p>However, <code>(·.drop n)</code>only works if the expected type is know to be a <code>List</code> operator. If not, the <code>List.drop n</code> style is the necessary form. I have encoutered this problem a number of times in the wild (for types other than <code>List</code>).</p>",
        "id": 419520310,
        "sender_full_name": "Mac Malone",
        "timestamp": 1706901926
    }
]