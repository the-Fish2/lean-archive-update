[
    {
        "content": "<p>How could I show the following thing involving type casts via ▸?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">l_len</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">l.length</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">l.get</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">l.get</span> <span class=\"o\">(</span><span class=\"n\">l_len</span> <span class=\"bp\">▸</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I tried using <code>subst l_len</code> but it gives me the error <code>tactic 'subst' failed, 'n' occurs at List.length l</code>, which I don't really know how to proceed from.</p>",
        "id": 420332424,
        "sender_full_name": "Jure Taslak",
        "timestamp": 1707336081
    },
    {
        "content": "<p>I think you can get there by first proving the more general</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l_len</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">l.length</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">l.get</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">l.get</span> <span class=\"o\">(</span><span class=\"n\">l_len</span> <span class=\"bp\">▸</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>where <code>subst l_len</code> will work</p>",
        "id": 420347384,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707341922
    },
    {
        "content": "<p>This indeed worked. Thank you very much!<br>\nThe proof is just</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l_len</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">l.length</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">l.get</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">l.get</span> <span class=\"o\">(</span><span class=\"n\">l_len</span> <span class=\"bp\">▸</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">subst</span> <span class=\"n\">l_len</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 420485256,
        "sender_full_name": "Jure Taslak",
        "timestamp": 1707406992
    },
    {
        "content": "<p>Here's a way to power through your original <code>example</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">l_len</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">l.length</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">}</span>\n    <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">l.get</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">l.get</span> <span class=\"o\">(</span><span class=\"n\">l_len</span> <span class=\"bp\">▸</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n  <span class=\"n\">use</span><span class=\"bp\">!</span> <span class=\"n\">j</span>\n  <span class=\"bp\">·</span> <span class=\"n\">convert</span> <span class=\"n\">h</span>\n  <span class=\"bp\">·</span> <span class=\"n\">congr</span>\n    <span class=\"n\">generalize</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">X</span> <span class=\"n\">at</span> <span class=\"n\">l</span>\n    <span class=\"n\">subst</span> <span class=\"n\">l_len</span>\n    <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 420510719,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1707414548
    },
    {
        "content": "<p>I'd suggest using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fin.cast#doc\">docs#Fin.cast</a> rather than the triangle. It's got better properties. Usually it's that there are better simp lemmas, but <code>rfl</code> somehow closes the goal in this case.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">l_len</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">l.length</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">}</span>\n    <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">l.get</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">l.get</span> <span class=\"o\">(</span><span class=\"n\">j.cast</span> <span class=\"n\">l_len</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n  <span class=\"n\">use</span><span class=\"bp\">!</span> <span class=\"n\">j</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">l_len</span><span class=\"o\">]</span> <span class=\"c1\">-- alternative to `convert h`</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 420511346,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1707414771
    }
]