[
    {
        "content": "<p>My project structure is roughly as follows:</p>\n<ul>\n<li>projectName<br>\n    - Basic.lean<br>\n    - FFI.lean</li>\n<li>native<br>\n    - src<br>\n    - CMAKELISTS.txt</li>\n<li>projectName.lean</li>\n<li>lake-manifest.json</li>\n<li>lakefile.lean</li>\n<li>lean-toolchain</li>\n<li>Main.lean</li>\n</ul>\n<p>Now, in lakefile.lean ,  I want lake to compile the library in the native folder (which is defined by cmake). In the ffi example I see how to do it for a single c/c++ file, but not how you could do it for a cmake project. How can make lean call cmake to build the library? If Lake can't do it is there a way to have lake run a bash script that can handle compiling the native library? </p>\n<p>Thanks in advance</p>",
        "id": 410472216,
        "sender_full_name": "Akhil Reddimalla",
        "timestamp": 1703879627
    },
    {
        "content": "<p>Lake targets (e.g., <code>extern_lib</code>, <code>target</code>) can have arbitrary Lean code. For running external processes, Lake provides a helper called <code>proc</code> to hook the output into Lake's standard logging facilities. For example, you could run the CMake configuration step like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">cmakeBuildDir</span> <span class=\"o\">:=</span> <span class=\"n\">pkg.buildDir</span> <span class=\"bp\">/</span> <span class=\"s2\">\"native\"</span>\n<span class=\"n\">IO.FS.createDirAll</span> <span class=\"n\">cmakeBuildDir</span>\n<span class=\"n\">proc</span> <span class=\"o\">{</span>\n  <span class=\"n\">cmd</span> <span class=\"o\">:=</span> <span class=\"s2\">\"cmake\"</span>\n  <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"-S\"</span><span class=\"o\">,</span> <span class=\"n\">pkg.dir</span> <span class=\"bp\">/</span> <span class=\"s2\">\"native\"</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">toString</span><span class=\"o\">,</span> <span class=\"s2\">\"-B\"</span><span class=\"o\">,</span> <span class=\"n\">cmakeBuildDir.toString</span><span class=\"o\">]</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 410489370,
        "sender_full_name": "Mac Malone",
        "timestamp": 1703893029
    },
    {
        "content": "<p>With the configured directory you could then run the configured build system via another <code>proc</code>. For instance, if you are ouputting makefiles (e.g., <code>-G \"Unix Makefiles\"</code>) the next step would be:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">proc</span> <span class=\"o\">{</span>\n  <span class=\"n\">cmd</span> <span class=\"o\">:=</span> <span class=\"s2\">\"make\"</span>\n  <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"-C\"</span><span class=\"o\">,</span> <span class=\"n\">cmakeBuildDir.toString</span><span class=\"o\">,</span> <span class=\"s2\">\"-j\"</span><span class=\"o\">,</span> <span class=\"s2\">\"4\"</span><span class=\"o\">]</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 410489677,
        "sender_full_name": "Mac Malone",
        "timestamp": 1703893267
    },
    {
        "content": "<p>This could be wrapped in a target like the following and then <code>lake build native</code> would run the cmake build:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">target</span> <span class=\"n\">native</span> <span class=\"n\">pkg</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">cmakeBuildDir</span> <span class=\"o\">:=</span> <span class=\"n\">pkg.buildDir</span> <span class=\"bp\">/</span> <span class=\"s2\">\"native\"</span>\n  <span class=\"n\">IO.FS.createDirAll</span> <span class=\"n\">cmakeBuildDir</span>\n  <span class=\"n\">proc</span> <span class=\"o\">{</span>\n    <span class=\"n\">cmd</span> <span class=\"o\">:=</span> <span class=\"s2\">\"cmake\"</span>\n    <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"-S\"</span><span class=\"o\">,</span> <span class=\"n\">pkg.dir</span> <span class=\"bp\">/</span> <span class=\"s2\">\"native\"</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">toString</span><span class=\"o\">,</span> <span class=\"s2\">\"-B\"</span><span class=\"o\">,</span> <span class=\"n\">cmakeBuildDir.toString</span><span class=\"o\">]</span>\n  <span class=\"o\">}</span>\n  <span class=\"n\">proc</span> <span class=\"o\">{</span>\n    <span class=\"n\">cmd</span> <span class=\"o\">:=</span> <span class=\"s2\">\"make\"</span>\n    <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"-C\"</span><span class=\"o\">,</span> <span class=\"n\">cmakeBuildDir.toString</span><span class=\"o\">,</span> <span class=\"s2\">\"-j\"</span><span class=\"o\">,</span> <span class=\"s2\">\"4\"</span><span class=\"o\">]</span>\n  <span class=\"o\">}</span>\n  <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">nil</span>\n</code></pre></div>",
        "id": 410489935,
        "sender_full_name": "Mac Malone",
        "timestamp": 1703893469
    }
]