[
    {
        "content": "<p>I have this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Vector</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Scalar</span> <span class=\"o\">:=</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">data</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Scalar</span>\n  <span class=\"n\">pf</span> <span class=\"o\">:</span> <span class=\"n\">data.size</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span><span class=\"o\">,</span> <span class=\"n\">BEq</span>\n<span class=\"kd\">def</span> <span class=\"n\">testVector</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">data</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">]}</span>\n</code></pre></div>\n<p>Is there  a way to do something like <code>(Vector 2).mk #[1,2]</code>?</p>",
        "id": 437785205,
        "sender_full_name": "Alok Singh",
        "timestamp": 1715242806
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Vector</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Scalar</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"n\">data</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Scalar</span>\n  <span class=\"n\">pf</span> <span class=\"o\">:</span> <span class=\"n\">data.size</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Repr</span><span class=\"o\">,</span> <span class=\"n\">BEq</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">testVector</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">Vector.mk</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 437786485,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715243553
    },
    {
        "content": "<p>Or even just <code>`def testVector : Vector 2 := .mk #[3, 7]</code> without the repeated <code>Vector</code></p>",
        "id": 437787324,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715244038
    },
    {
        "content": "<p>Is there a way that doesn't rely on something inferring the 2 from type<br>\nconstraints like those examples?</p>",
        "id": 437788540,
        "sender_full_name": "Alok Singh",
        "timestamp": 1715244828
    },
    {
        "content": "<p>May be worse than the above, but one way of not specifying 2 is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">testVector'</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">Vector.mk</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">]</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 437790530,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1715245905
    },
    {
        "content": "<p>Does <code>(.mk #[3, 7] : Vector 2)</code> meet your requirement?</p>",
        "id": 437802639,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715253028
    },
    {
        "content": "<p><a href=\"http://Vector.mk\">Vector.mk</a> should take <code>n</code> as an implicit argument that you can just explicitly specific with <code>(n := foo)</code> no?</p>",
        "id": 437804231,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1715254009
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Vector.mk#doc\">docs#Vector.mk</a></p>",
        "id": 437896295,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1715293573
    },
    {
        "content": "<p>Hmm, bit disappointing that we get a 404 link for that</p>",
        "id": 437896792,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1715293868
    },
    {
        "content": "<p>Why, does that function exist? I don't see it</p>",
        "id": 437897154,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1715294075
    },
    {
        "content": "<p><code>Vector.mk = Subtype.mk</code></p>",
        "id": 437897757,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1715294421
    },
    {
        "content": "<p>Right, but this function does not exist under this name. if you <code>#check Vector.mk</code> with vector imported you will not get it.</p>",
        "id": 437898121,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1715294650
    },
    {
        "content": "<p>I mean it exists in the code that Kim provided above</p>",
        "id": 437898136,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1715294660
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/kRWEtgg1K7YLof6jDy1tHjLV/Screenshot-2024-05-09-at-5.44.29PM.png\">Screenshot-2024-05-09-at-5.44.29PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/kRWEtgg1K7YLof6jDy1tHjLV/Screenshot-2024-05-09-at-5.44.29PM.png\" title=\"Screenshot-2024-05-09-at-5.44.29PM.png\"><img src=\"/user_uploads/3121/kRWEtgg1K7YLof6jDy1tHjLV/Screenshot-2024-05-09-at-5.44.29PM.png\"></a></div>",
        "id": 437898152,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1715294678
    },
    {
        "content": "<p>I am able to mouseover it in the lean web editor, so why can't we have a docs entry for it?</p>",
        "id": 437898190,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1715294712
    },
    {
        "content": "<p>Yeah because <code>Vector</code> up there is a customly defined structure and not an alias for Subtype like the real vector, what's your point with respect to the docs?</p>",
        "id": 437898224,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1715294738
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/cbcScCBslJLFTZ_nGNewD8qP/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/cbcScCBslJLFTZ_nGNewD8qP/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/cbcScCBslJLFTZ_nGNewD8qP/image.png\"></a></div><p>this is the \"real\" vector, it's a def, not a structure</p>",
        "id": 437898313,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1715294775
    },
    {
        "content": "<p>Ah, I see, I did not realize that this definition was different.</p>",
        "id": 437898325,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1715294784
    },
    {
        "content": "<p>Frankly, I somehow didn't make the connection that there was a definition five lines above that has the same name as a Mathlib definition, I guess its only possible because mathlib isn't imported.</p>",
        "id": 437898986,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1715295125
    }
]