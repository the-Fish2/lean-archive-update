[
    {
        "content": "<p>How can I prove this to create this range</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Int.sizeOf_lt</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">sizeOf</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">eq_refl</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Int.range</span> <span class=\"o\">(</span><span class=\"n\">start</span> <span class=\"n\">stop</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">start</span> <span class=\"bp\">&lt;</span> <span class=\"n\">stop</span> <span class=\"k\">then</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">sizeOf</span> <span class=\"o\">(</span><span class=\"n\">stop</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">start</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sizeOf</span> <span class=\"o\">(</span><span class=\"n\">stop</span> <span class=\"bp\">-</span> <span class=\"n\">start</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Int.sizeOf_lt</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span>\n        <span class=\"n\">Int.sub_eq_add_neg</span><span class=\"o\">,</span> <span class=\"n\">Int.neg_add</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">Int.add_assoc</span><span class=\"o\">,</span>\n        <span class=\"n\">Int.sub_eq_add_neg</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">Int.sub_eq_add_neg</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">Int.sub_eq_add_neg</span>\n      <span class=\"o\">]</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Int.sub_lt_self</span> <span class=\"o\">(</span><span class=\"n\">stop</span><span class=\"bp\">-</span><span class=\"n\">start</span><span class=\"o\">)</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Int.zero_lt_one</span>\n    <span class=\"o\">}</span>\n    <span class=\"n\">start</span> <span class=\"o\">::</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">start</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">stop</span>\n  <span class=\"k\">else</span>\n    <span class=\"o\">[]</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">range</span> <span class=\"n\">start</span> <span class=\"n\">stop</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">stop</span> <span class=\"bp\">-</span> <span class=\"n\">start</span>\n</code></pre></div>",
        "id": 410297212,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1703771860
    },
    {
        "content": "<p>Isn't Int.sizeOf_lt pretty obvious?</p>",
        "id": 410299918,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1703773025
    },
    {
        "content": "<p>unfortunately it is untrue:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Int.sizeOf_lt</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">sizeOf</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Int.sizeOf_lt</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">)</span>\n  <span class=\"n\">revert</span> <span class=\"n\">this</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">imp_false</span><span class=\"o\">,</span> <span class=\"n\">Nat.not_lt</span><span class=\"o\">]</span>\n  <span class=\"n\">decide</span>\n</code></pre></div>",
        "id": 410368145,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1703811859
    },
    {
        "content": "<p>Maybe try <code>Int.natAbs (stop - start)</code> as the measure? There should be lemmas for then manipulating such terms correctly. The Int <code>sizeOf</code> instance seems to not be intended for general use.</p>",
        "id": 410368380,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1703812018
    },
    {
        "content": "<p>(This seems like an easy footgun for beginners... <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> would it be reasonable to add a WF instance to Std with <code>invImage Int.natAbs</code> as the measure? I think that is what most people would expect the behavior to be here)</p>",
        "id": 410368690,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1703812206
    },
    {
        "content": "<p>I think those are the same?</p>",
        "id": 410368736,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703812247
    },
    {
        "content": "<p>I believe the sizeOf instance adds 1 for negations.</p>",
        "id": 410368755,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1703812264
    },
    {
        "content": "<p>it might add 1 in both cases but otherwise it should be the same</p>",
        "id": 410368779,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703812284
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">sizeOf</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">sizeOf</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span>\n</code></pre></div>",
        "id": 410368820,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1703812320
    },
    {
        "content": "<p><span aria-label=\"face with raised eyebrow\" class=\"emoji emoji-1f928\" role=\"img\" title=\"face with raised eyebrow\">:face_with_raised_eyebrow:</span> which is NOT what I was expecting</p>",
        "id": 410368879,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1703812334
    },
    {
        "content": "<p>(also the Int sizeOf has ~no lemmas in mathlib or std, whereas natAbs has many)</p>",
        "id": 410368917,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1703812366
    },
    {
        "content": "<p>oh right of course, <code>-1</code> is <code>negSucc 0</code> so it has size <code>0 + 1</code></p>",
        "id": 410368954,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703812398
    },
    {
        "content": "<p>I keep forgetting we don't use one of the fancy Z encodings from HoTT  &gt;_&gt;</p>",
        "id": 410369056,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1703812456
    },
    {
        "content": "<p>I think it would be best not to try to guess a measure here</p>",
        "id": 410369062,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703812459
    },
    {
        "content": "<p>The example above actually wants <code>toNat (stop - start)</code> not <code>natAbs (stop - start)</code> as the measure</p>",
        "id": 410369100,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703812490
    },
    {
        "content": "<p>which is the same as <code>subNatNat stop start</code></p>",
        "id": 410369138,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703812513
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/Proving.20sizeOf.20lt.20for.20Int.20is.20the.20same.20as.20Int.20lt/near/410368145\">said</a>:</p>\n<blockquote>\n<p>unfortunately it is untrue:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Int.sizeOf_lt</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">sizeOf</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Int.sizeOf_lt</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">)</span>\n  <span class=\"n\">revert</span> <span class=\"n\">this</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">imp_false</span><span class=\"o\">,</span> <span class=\"n\">Nat.not_lt</span><span class=\"o\">]</span>\n  <span class=\"n\">decide</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>could slimcheck have falsified this?</p>",
        "id": 410369255,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1703812596
    },
    {
        "content": "<p><code>sizeOf</code> is not computable so maybe not</p>",
        "id": 410369278,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703812620
    },
    {
        "content": "<p>My gut says either <code>toNat</code> or <code>natAbs</code> would be better than the status quo with it defaulting to sizeOf. Either <code>toNat</code> or <code>natAbs</code> work in Anders' case since we have <code>start &lt; stop</code>, and most use cases are going to be in the same boat.</p>",
        "id": 410369440,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1703812744
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Util.CompileInductive</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.SlimCheck</span>\n\n<span class=\"n\">compile_inductive</span><span class=\"bp\">%</span> <span class=\"n\">Int</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Int.sizeOf_lt</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">sizeOf</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">slim_check</span>\n<span class=\"c1\">-- ===================</span>\n<span class=\"c1\">-- Found problems!</span>\n<span class=\"c1\">-- a := -1</span>\n<span class=\"c1\">-- b := 0</span>\n<span class=\"c1\">-- guard: -1 &lt; 0</span>\n<span class=\"c1\">-- issue: 1 &lt; 1 does not hold</span>\n<span class=\"c1\">-- (0 shrinks)</span>\n<span class=\"c1\">-- -------------------</span>\n</code></pre></div>",
        "id": 410369472,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703812770
    },
    {
        "content": "<p>huzzah</p>",
        "id": 410369481,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1703812781
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/Proving.20sizeOf.20lt.20for.20Int.20is.20the.20same.20as.20Int.20lt/near/410369440\">said</a>:</p>\n<blockquote>\n<p>My gut says either <code>toNat</code> or <code>natAbs</code> would be better than the status quo with it defaulting to sizeOf. Either <code>toNat</code> or <code>natAbs</code> work in Anders' case since we have <code>start &lt; stop</code>, and most use cases are going to be in the same boat.</p>\n</blockquote>\n<p>No defaulted sizeOf would help here, because the definition is not decreasing on <code>start</code> or <code>stop</code> or <code>(start, stop)</code></p>",
        "id": 410369716,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703812925
    },
    {
        "content": "<p>so you need to give a <code>termination_by</code> anyway, and in that case you can choose to use a useful measure</p>",
        "id": 410369759,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703812957
    },
    {
        "content": "<p>The builtin decreasing tactics are structured to work well on the compiler-generated <code>sizeOf</code>. If that doesn't work, then just specify your own termination measure and ignore <code>sizeOf</code> entirely</p>",
        "id": 410369825,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703813013
    },
    {
        "content": "<p>I guess my discomfort is because anders' code <em>has</em> a <code>termination_by</code> measure, but the <code>sizeOf</code> was still inserted into that measure because of the default <code>WellFoundedRelation</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"n\">low</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">SizeOf</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">WellFoundedRelation</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">sizeOfWFRel</span>\n</code></pre></div>\n<p>which seems like an easy footgun to overlook here.</p>",
        "id": 410371322,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1703813741
    },
    {
        "content": "<p>I think anders' code should be treated as incorrect, the integers are not well founded</p>",
        "id": 410371746,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703813914
    },
    {
        "content": "<p>it's just unfortunate that because termination checking in lean is a ball of heuristics we can't just come out and say that, and instead we give some misleading hints relating to the compiler-internal <code>sizeOf</code> function</p>",
        "id": 410372260,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703814127
    },
    {
        "content": "<p>Is that default WFR instance used extensively?</p>",
        "id": 410372335,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1703814162
    },
    {
        "content": "<p>I'm wondering if maybe it leads to more confusion than it is worth..??</p>",
        "id": 410372377,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1703814183
    },
    {
        "content": "<p>well of course, it is used by termination proofs when you don't use <code>termination_by</code> at all</p>",
        "id": 410372413,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703814201
    },
    {
        "content": "<p>hm. unfortunate.</p>",
        "id": 410372537,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1703814254
    },
    {
        "content": "<p>removing that instance (and the default <code>SizeOf</code> instance that sets everything to <code>1</code>) would mean that not finding an instance is a new failure mode of definitions, which is something we would have to explain and I'm not sure that's better than the status quo</p>",
        "id": 410372645,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703814306
    },
    {
        "content": "<p>How do I show <code>0 &lt; stop -start</code> when I already have <code>start &lt; stop</code>? And why is showing something so trivial so complex? Shouldn't there be tactics and lemmas that solve these pretty easily?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Int</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">Int.range</span> <span class=\"o\">(</span><span class=\"n\">start</span> <span class=\"n\">stop</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">start</span> <span class=\"bp\">&lt;</span> <span class=\"n\">stop</span> <span class=\"k\">then</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">natAbs</span> <span class=\"o\">(</span><span class=\"n\">stop</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">start</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">&lt;</span> <span class=\"n\">natAbs</span> <span class=\"o\">(</span><span class=\"n\">stop</span> <span class=\"bp\">-</span> <span class=\"n\">start</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span>\n        <span class=\"n\">Int.sub_eq_add_neg</span><span class=\"o\">,</span> <span class=\"n\">Int.neg_add</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">Int.add_assoc</span><span class=\"o\">,</span>\n        <span class=\"n\">Int.sub_eq_add_neg</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">Int.sub_eq_add_neg</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">Int.sub_eq_add_neg</span>\n      <span class=\"o\">]</span>\n      <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">stop</span> <span class=\"bp\">-</span> <span class=\"n\">start</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"bp\">←</span><span class=\"n\">Int.lt_of_sub_pos</span> <span class=\"n\">stop</span> <span class=\"n\">start</span><span class=\"bp\">;</span><span class=\"n\">apply</span> <span class=\"n\">h</span>\n      <span class=\"n\">generalize</span> <span class=\"n\">stop</span> <span class=\"bp\">-</span> <span class=\"n\">start</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n      <span class=\"n\">apply</span> <span class=\"bp\">←</span><span class=\"n\">h</span> <span class=\"c1\">-- here I want to be able to replace 0 &lt;= a -&gt; natAbs a = a</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Int.natAbs_lt_natAbs_of_nonneg_of_lt</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Int.sub_lt_self</span> <span class=\"n\">a</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Int.zero_lt_one</span>\n    <span class=\"o\">}</span>\n    <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">start</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">start</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">stop</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span>\n    <span class=\"bp\">#</span><span class=\"o\">[]</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">range</span> <span class=\"n\">start</span> <span class=\"n\">stop</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">natAbs</span> <span class=\"o\">(</span><span class=\"n\">stop</span> <span class=\"bp\">-</span> <span class=\"n\">start</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 410571962,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1703969139
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Int.sub_pos_of_lt#doc\">docs#Int.sub_pos_of_lt</a></p>",
        "id": 410572133,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703969285
    },
    {
        "content": "<p>if you are using mathlib, then yes there are things like <code>linarith</code> that will take care of problems like this</p>",
        "id": 410572153,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703969312
    },
    {
        "content": "<p>I'm not using mathlib currently. Just Std. I'm trying to make a game.</p>",
        "id": 410573603,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1703970853
    },
    {
        "content": "<p>Here's a simpler (and faster) implementation which avoids the need for a messy termination proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Int.range</span> <span class=\"o\">(</span><span class=\"n\">start</span> <span class=\"n\">stop</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">go</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">arr</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">arr</span>\n    <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">start</span><span class=\"o\">,</span> <span class=\"n\">arr</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">go</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">start</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">arr.push</span> <span class=\"n\">start</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">stop</span> <span class=\"bp\">-</span> <span class=\"n\">start</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toNat</span>\n  <span class=\"n\">go</span> <span class=\"n\">n</span> <span class=\"n\">start</span> <span class=\"o\">(</span><span class=\"n\">Array.mkEmpty</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 410573734,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703971051
    },
    {
        "content": "<p>Thanks</p>",
        "id": 410573747,
        "sender_full_name": "Anders Christiansen Sørby",
        "timestamp": 1703971078
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"433842\">@Anders Christiansen Sørby</span> these sorts of things work out of the box via <code>omega</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.Omega.Frontend</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">omega</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Int.natAbs</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Int.natAbs</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">omega</span>\n</code></pre></div>",
        "id": 411098773,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1704325394
    }
]