[
    {
        "content": "<p>I am not a fan of the new <code>…</code> that appear in “deeply nested” expressions. The issue is that it seems to use a definition of depth that is not the relevant one, at least for mathematics. In <code>a + b + c + d</code>, all letters are at the same depth for mathematicians. More generally, a function taking several (explicit) arguments has all its arguments at the same depth in general. This is very different from <code>a (b (c d))</code>. If we can’t agree on this, could the elision be opt-in? At the very least, can the popup you get when clicking on <code>…</code> mention how to configure the depth that is showed? And is there an option you can put in the lakefile to set the default depth for the project?</p>",
        "id": 426133597,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1710252619
    },
    {
        "content": "<p>Do you have an MWE where you see the ellipses for a non-proof-term? <code>pp.deepTerms</code> is <code>true</code> by default, so deep terms should not be omitted by default.</p>",
        "id": 426138336,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1710253865
    },
    {
        "content": "<p>Actually I was confused, the example I saw yesterday was indeed a proof. But I was misled by the example showed during the FRO meeting.</p>",
        "id": 426142471,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1710254913
    },
    {
        "content": "<p>I think this is a performance optimization, if you see any <code>...</code> at all then you should interpret this as lean trying not to run out of memory or take too long while processing your request. Unfortunately this doesn't necessarily match the \"mathematical\" notion of depth, and using that definition could still cause the same issues, i.e. if your goal is that a sequence of 10000 terms added together is equal to something then this will cause something to break in lean and/or vscode even though the \"mathematical depth\" is small</p>",
        "id": 426169972,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710261900
    },
    {
        "content": "<p>I'm not sure why the hover isn't showing the docstring for the omission symbol. This is what you're supposed to see:</p>\n<blockquote>\n<p>Denotes a term that was omitted by the pretty printer. This is only meant to be used for pretty printing, however for copy/paste friendliness it elaborates like <code>_</code> while logging a warning. The presence of <code>⋯</code> in pretty printer output is controlled by the <code>pp.deepTerms</code> and <code>pp.proofs</code> options.</p>\n</blockquote>",
        "id": 426171805,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710262430
    },
    {
        "content": "<p>Oh right, this is why:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ofOmissionInfo</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">none</span> <span class=\"c1\">-- Do not display the docstring of ⋯ for omitted terms</span>\n</code></pre></div>",
        "id": 426172346,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710262586
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Here's a PR to show the docstring for the omission symbol on hover: <a href=\"https://github.com/leanprover/lean4/pull/3663\">lean4#3663</a></p>\n<p><a href=\"/user_uploads/3121/iDwLyoc6Zdj7FCgYoV17pKNS/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/iDwLyoc6Zdj7FCgYoV17pKNS/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/iDwLyoc6Zdj7FCgYoV17pKNS/image.png\"></a></div><p>Does this explain <code>⋯</code> satisfactorily now?</p>",
        "id": 426250623,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710298866
    },
    {
        "content": "<p>It's potentially still a bit confusing to show the expanded term and the docstring for <code>⋯</code> under it, since normally it'd be the docstring for the term. But maybe it's clear enough from context.</p>",
        "id": 426252317,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1710299976
    },
    {
        "content": "<p>I'd say it's confusing, but it's better to have this information than not have it.</p>\n<p>Maybe the docstring should mention that it's for <code>⋯</code> in the first couple words?</p>",
        "id": 426252563,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710300137
    },
    {
        "content": "<p>Maybe this is a little less confusing?</p>\n<p><a href=\"/user_uploads/3121/NMgbHVoB4JoYoQYFFykPmFRA/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/NMgbHVoB4JoYoQYFFykPmFRA/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/NMgbHVoB4JoYoQYFFykPmFRA/image.png\"></a></div>",
        "id": 426253239,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710300720
    },
    {
        "content": "<p>Yup, that's quite clear!</p>",
        "id": 426254286,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1710301529
    },
    {
        "content": "<p>I'm curious, what would it take to be able to have brief and full docstrings for the hovers? The way it would work is that when you initially hover, you get the brief docstring, and if you either click on an \"expand\"-type button (or maybe wait long enough), you get the full docstring?</p>\n<p>An encoding hack would be to use html comments to indicate a point in the docstring, where everything before it is the brief docstring, like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/--</span>\n<span class=\"sd\">The `⋯` term denotes a term that was omitted by the pretty printer.&lt;!--brief--&gt;</span>\n<span class=\"sd\">The presence of `⋯` in pretty printer output is controlled by the `pp.deepTerms` and `pp.proofs` options,</span>\n<span class=\"sd\">and these options can be further adjusted using `pp.deepTerms.threshold` and `pp.proofs.threshold`.</span>\n\n<span class=\"sd\">It is only meant to be used for pretty printing.</span>\n<span class=\"sd\">However, in case it is copied and pasted from the Infoview, `⋯` logs a warning and elaborates like `_`.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">@[</span><span class=\"n\">builtin_term_parser</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">omission</span> <span class=\"o\">:=</span> <span class=\"n\">leading_parser</span>\n  <span class=\"s2\">\"⋯\"</span>\n</code></pre></div>\n<p>The reason why hovering over <code>⋯</code> doesn't show the docstring at all is that it's mostly noise that just increases the size of the hover box. You get the idea of what <code>⋯</code> is pretty quickly, so you don't need the full docstring.</p>\n<p>This applies to many other hovers too. One that comes to mind is hovering over <code>=</code>, which at some point you don't feel like you need a full explanation of it anymore :-)</p>",
        "id": 426389497,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710349973
    },
    {
        "content": "<p>That would be really nice.</p>",
        "id": 426389636,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1710350017
    },
    {
        "content": "<p>FWIW I've trying to write all my docstrings in the</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Short docstring.</span>\n\n<span class=\"sd\">Longer docstring. -/</span>\n</code></pre></div>\n<p>style for the past few months.</p>",
        "id": 426413020,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710358360
    }
]