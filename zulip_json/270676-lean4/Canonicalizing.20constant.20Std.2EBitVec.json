[
    {
        "content": "<p>Hi,<br>\nHow can I canonicalize a constant Std.BitVec</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span> <span class=\"n\">toFin</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"c1\">-- assume that its bitwidth is 4</span>\n</code></pre></div>\n<p>into <code>3#4</code>?</p>\n<p>This is some example that I am interested in:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.BitVec.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Std.BitVec</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Std.BitVec</span> <span class=\"mi\">4</span> <span class=\"bp\">×</span> <span class=\"n\">Std.BitVec</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">Std.BitVec</span> <span class=\"mi\">4</span> <span class=\"bp\">×</span> <span class=\"n\">Std.BitVec</span> <span class=\"mi\">4</span><span class=\"o\">))</span>\n         <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Std.BitVec</span> <span class=\"mi\">4</span> <span class=\"bp\">×</span> <span class=\"n\">Std.BitVec</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f_g_same</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">Std.BitVec</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">))</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">hyp1</span><span class=\"o\">:</span><span class=\"mi\">3</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hyp2</span><span class=\"o\">:</span><span class=\"mi\">5</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">6</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"o\">)):</span>\n  <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"bp\">#</span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"bp\">#</span><span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span>\n    <span class=\"o\">({</span> <span class=\"n\">toFin</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"n\">hyp1</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n     <span class=\"o\">{</span> <span class=\"n\">toFin</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"n\">hyp2</span> <span class=\"o\">}</span> <span class=\"o\">})</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"bp\">#</span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"bp\">#</span><span class=\"mi\">4</span><span class=\"o\">)</span>\n  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- How can I change the goal to 'f (3#4,5#4) (g (3#4,5#4) s) = (3#4,5#4)?</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 421309057,
        "sender_full_name": "Juneyoung Lee",
        "timestamp": 1707851601
    },
    {
        "content": "<p>If your desired goal statement is def-eq to your current goal (which is the case in your example), you can use <code>show</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">hyp1</span><span class=\"o\">:</span><span class=\"mi\">3</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hyp2</span><span class=\"o\">:</span><span class=\"mi\">5</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">6</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"o\">)):</span>\n  <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"bp\">#</span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"bp\">#</span><span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span>\n    <span class=\"o\">({</span> <span class=\"n\">toFin</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"n\">hyp1</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n     <span class=\"o\">{</span> <span class=\"n\">toFin</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"n\">hyp2</span> <span class=\"o\">}</span> <span class=\"o\">})</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"bp\">#</span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"bp\">#</span><span class=\"mi\">4</span><span class=\"o\">)</span>\n  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">show</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"bp\">#</span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"bp\">#</span><span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"bp\">#</span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"bp\">#</span><span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"bp\">#</span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"bp\">#</span><span class=\"mi\">4</span><span class=\"o\">)</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>If you don't want to manually write out the desired goal statement, you could also prove the following lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">ofFin_mk_eq_ofNat</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ofFin</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"bp\">#</span><span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Std.BitVec.ofNat</span><span class=\"o\">,</span> <span class=\"n\">Fin.ofNat'</span><span class=\"o\">,</span> <span class=\"n\">Nat.mod_eq_of_lt</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">hyp1</span><span class=\"o\">:</span><span class=\"mi\">3</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hyp2</span><span class=\"o\">:</span><span class=\"mi\">5</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">6</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"o\">)):</span>\n  <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"bp\">#</span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"bp\">#</span><span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span>\n    <span class=\"o\">({</span> <span class=\"n\">toFin</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"n\">hyp1</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n     <span class=\"o\">{</span> <span class=\"n\">toFin</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"n\">hyp2</span> <span class=\"o\">}</span> <span class=\"o\">})</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"bp\">#</span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"bp\">#</span><span class=\"mi\">4</span><span class=\"o\">)</span>\n  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ofFin_mk_eq_ofNat</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- ⊢ f (3#4, 5#4) (g (3#4, 5#4) s) = (3#4, 5#4)</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 421314254,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1707853679
    }
]