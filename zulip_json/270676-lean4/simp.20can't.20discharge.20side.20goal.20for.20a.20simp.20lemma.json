[
    {
        "content": "<p>Why can't the side goal be discharged here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">opaque</span> <span class=\"n\">P</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">opaque</span> <span class=\"n\">Q</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"n\">d</span><span class=\"o\">):</span> <span class=\"n\">P</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">P</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"mi\">1</span><span class=\"o\">):</span> <span class=\"n\">P</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.Tactic.simp</span> <span class=\"n\">true</span> <span class=\"k\">in</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>  <span class=\"c1\">-- fails because can't discharge side goal</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">    [Meta.Tactic.simp.discharge] foo discharge ❌</span>\n<span class=\"cm\">        Q ?d ▼</span>\n<span class=\"cm\">    [unify] h:1000, failed to unify</span>\n<span class=\"cm\">          Q 1</span>\n<span class=\"cm\">        with</span>\n<span class=\"cm\">          Q ?d</span>\n<span class=\"cm\">  -/</span>\n</code></pre></div>\n<p>It says \"failed to unify\" when it should clearly unify.<br>\nInstead, I have to write <code>simp [foo 1 h]</code> (or <code>rw</code>) in which case I didn't need to register <code>foo</code> as a <code>simp</code> lemma.</p>",
        "id": 439393090,
        "sender_full_name": "Ted Hwa",
        "timestamp": 1716078376
    },
    {
        "content": "<p>If you do <code>simp [foo 1, h]</code> it works. I'm guessing this is by design, that dischargers unify at a greater depth, making the metavariable for <code>d</code> not assignable when discharging. (Though I looked through the code and it didn't look like there were any <code>withNewMCtxDepth</code>s that would inhibit this unification...)</p>",
        "id": 439395388,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1716080789
    },
    {
        "content": "<p>All the theorem arguments are initialized to meta variables at new depth <a href=\"https://github.com/leanprover/lean4/blob/239ade80dc6258f68b7ea92e52ef15066f58a791/src/Lean/Meta/Tactic/Simp/Rewrite.lean#L175\">here</a> but I'm not sure if this extra depth is really causing this unification failure.</p>",
        "id": 439410776,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1716096765
    }
]