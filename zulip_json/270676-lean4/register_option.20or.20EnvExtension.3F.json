[
    {
        "content": "<p>This is more of a conceptional question. I'm reasonably far writing a i18n package (somewhat inspired by <a href=\"#narrow/stream/270676-lean4/topic/Internationalization/near/402576630\">this snippet</a> by <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> ). One missing part is how to save the input- and output-language and especially how the user sets them. I imagine roughly the following:</p>\n<ul>\n<li>user <code>require</code> the <code>I18n</code> package in their lakefile</li>\n<li>They set their preferred input-language and output-language once. (where?) In all files in that directory the commands <code>t!\"...\"</code> and <code>String.translate</code> should have access to these options in order to provide the translation.</li>\n<li>ideally, a user could also overwrite the output-language for a single file.</li>\n</ul>\n<p>What's the best option to provide such \"global\" options?</p>\n<p>I see a few options:</p>\n<ul>\n<li><code>register_option</code>: as far as I can tell this requires to add <code>set_option i18n.lang \"en\"</code> in each single file. There is no option to set a custom option globally (e.g. in the lakefile), is there?</li>\n<li><code>PersistentEnvExtension</code>: This has the limitation that the user's project needs somewhat a \"root file\" which is imported everywhere and which sets the language (say with a <code>SetLanguage en</code> command).</li>\n<li>The user could also provide these options with <code>lake build -R -Klang=fr</code>. That feels like the hackiest option...</li>\n</ul>\n<p>Is there a better option I haven't thought of?</p>",
        "id": 423689834,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1709065508
    },
    {
        "content": "<p>I could have sworn you could globally <code>set_option</code> in a lakefile</p>",
        "id": 423690093,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1709065621
    },
    {
        "content": "<p>I thought only the core ones but not custom ones. But maybe I misremember</p>",
        "id": 423690204,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1709065663
    },
    {
        "content": "<p>Oh maybe</p>",
        "id": 423690292,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1709065687
    },
    {
        "content": "<p>Could you make an issue about setting non-builtin options on the Lean command line? I recently hit this as well with two use cases:</p>\n<ul>\n<li>Aesop has various <code>check</code> options that enable internal consistency checks. These are off by default for performance reasons, but it would be nice to be able to build Mathlib with these checks just by editing the lakefile.</li>\n<li>Similarly, Aesop has a benchmarking option that I'd like to enable for the entirety of Mathlib.</li>\n</ul>",
        "id": 423695142,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1709067537
    },
    {
        "content": "<p>That's probably a good idea if there is no issue already. In another project I just abused the option <code>-Dtrace.debug</code> for my own usage. I have no idea what implications that has, I just hoped that option wasn't really used in any meaningful way <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 423695817,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1709067750
    },
    {
        "content": "<p>Looks like there is at least already a relevant issue: <a href=\"https://github.com/leanprover/lean4/issues/3403\">https://github.com/leanprover/lean4/issues/3403</a></p>",
        "id": 423699231,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1709069061
    },
    {
        "content": "<p>I <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> â€™d it</p>",
        "id": 423700716,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1709069692
    }
]