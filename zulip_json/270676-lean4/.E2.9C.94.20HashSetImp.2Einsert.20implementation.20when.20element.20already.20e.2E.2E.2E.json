[
    {
        "content": "<p>Hi,</p>\n<p>the implementation of HashSetImp.insert in Lean4 is currently defined in the following way:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">insert</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Hashable</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">HashSetImp</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">HashSetImp</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">m</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">size</span><span class=\"o\">,</span> <span class=\"n\">buckets</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">mkIdx</span> <span class=\"o\">(</span><span class=\"n\">hash</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">buckets.property</span>\n    <span class=\"k\">let</span> <span class=\"n\">bkt</span>    <span class=\"o\">:=</span> <span class=\"n\">buckets.val</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span>\n    <span class=\"k\">if</span> <span class=\"n\">bkt.contains</span> <span class=\"n\">a</span>\n    <span class=\"k\">then</span> <span class=\"o\">⟨</span><span class=\"n\">size</span><span class=\"o\">,</span> <span class=\"n\">buckets.update</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">bkt.replace</span> <span class=\"n\">a</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n    <span class=\"k\">else</span>\n      <span class=\"k\">let</span> <span class=\"n\">size'</span>    <span class=\"o\">:=</span> <span class=\"n\">size</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n      <span class=\"k\">let</span> <span class=\"n\">buckets'</span> <span class=\"o\">:=</span> <span class=\"n\">buckets.update</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">bkt</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n      <span class=\"k\">if</span> <span class=\"n\">size'</span> <span class=\"bp\">≤</span> <span class=\"n\">buckets.val.size</span>\n      <span class=\"k\">then</span> <span class=\"o\">{</span> <span class=\"n\">size</span> <span class=\"o\">:=</span> <span class=\"n\">size'</span><span class=\"o\">,</span> <span class=\"n\">buckets</span> <span class=\"o\">:=</span> <span class=\"n\">buckets'</span> <span class=\"o\">}</span>\n      <span class=\"k\">else</span> <span class=\"n\">expand</span> <span class=\"n\">size'</span> <span class=\"n\">buckets'</span>\n</code></pre></div>\n<p>When <code>a</code> is already contained in the bucket for its hash value, we replace it by itself  in the bucket, which should not change the bucket itself. Then the bucket is replaced by itself. This seems unnecessary to me. I would just return  <code>⟨size, buckets⟩ </code>.  Am I missing something or is there a specific reason for this implementation ?</p>",
        "id": 425305786,
        "sender_full_name": "Johannes Tantow",
        "timestamp": 1709819248
    },
    {
        "content": "<p>Your <code>BEq</code> instance can say that two objects are equal even though they're really different (and this is sometimes useful). In that case, the given implementation ensures that the last inserted element wins, so we have <code>lookup k (insert k v m) = v</code>. With the implementation you suggest, that lemma only holds under the assumption that <code>BEq</code> is faithful to propositional equality.</p>",
        "id": 425322146,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1709822856
    },
    {
        "content": "<p>Ah, so this would require the <code>LawfulBEq</code> instance. Thank you and sorry for cluttering this stream with such a basic question. Looked like more to me.</p>",
        "id": 425324911,
        "sender_full_name": "Johannes Tantow",
        "timestamp": 1709823457
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"619540\">Johannes Tantow</span> has marked this topic as resolved.</p>",
        "id": 425324943,
        "sender_full_name": "Notification Bot",
        "timestamp": 1709823464
    },
    {
        "content": "<p>Yes, exactly. No worries, it's a good question.</p>",
        "id": 425327195,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1709823906
    }
]