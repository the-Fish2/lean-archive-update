[
    {
        "content": "<p>Is it possible to loop over a range of Fin? I have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std</span>\n<span class=\"kn\">open</span> <span class=\"n\">Std</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">twoSum</span> <span class=\"o\">(</span><span class=\"n\">nums</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">target</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">nums.size</span> <span class=\"bp\">×</span> <span class=\"n\">Fin</span> <span class=\"n\">nums.size</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">seen</span> <span class=\"o\">:</span> <span class=\"n\">HashMap</span> <span class=\"n\">Int</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">nums.size</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">HashMap.empty</span>\n\n  <span class=\"n\">for</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"n\">index_</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">nums.size</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">index</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">nums.size</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">index_</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩</span>\n    <span class=\"k\">let</span> <span class=\"n\">complement</span> <span class=\"o\">:=</span> <span class=\"n\">target</span> <span class=\"bp\">-</span> <span class=\"n\">x</span>\n    <span class=\"k\">match</span> <span class=\"n\">seen.find</span><span class=\"bp\">?</span> <span class=\"n\">complement</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">complementIndex</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">complementIndex</span><span class=\"o\">,</span> <span class=\"n\">index</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">seen</span> <span class=\"o\">:=</span> <span class=\"n\">seen.insert</span> <span class=\"n\">x</span> <span class=\"n\">index</span>\n\n  <span class=\"n\">none</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">twoSum</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"mi\">11</span><span class=\"o\">,</span> <span class=\"mi\">15</span><span class=\"o\">]</span> <span class=\"mi\">9</span> <span class=\"bp\">==</span> <span class=\"n\">some</span> <span class=\"o\">(⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩)</span>\n<span class=\"k\">#eval</span> <span class=\"n\">twoSum</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"mi\">6</span> <span class=\"bp\">==</span> <span class=\"n\">some</span> <span class=\"o\">(⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩)</span>\n<span class=\"k\">#eval</span> <span class=\"n\">twoSum</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"mi\">6</span> <span class=\"bp\">==</span> <span class=\"n\">some</span> <span class=\"o\">(⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩)</span>\n</code></pre></div>\n<p>I'd like <code>index_</code> to somehow be a <code>Fin nums.size</code> instead of a <code>Nat</code>, so that I don't have to fill in the <code>sorry</code>.</p>",
        "id": 423751923,
        "sender_full_name": "James Sully",
        "timestamp": 1709099918
    },
    {
        "content": "<p>(It's not what you've asked for on the nose, but you can use the syntax <code>for ... h : index_ in [0:nums.size] do</code> to include the hypothesis that <code>index_</code> is in <code>[0:nums.size]</code> in the local context, which you can use to prove that sorry! You might be aware of this, but I wanted to make sure it was mentioned just in case.)</p>",
        "id": 423753748,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1709101164
    },
    {
        "content": "<p>I actually tried that, with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">for</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">index_</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">nums.size</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n</code></pre></div>\n<p>I'm getting </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">▶</span> <span class=\"mi\">7</span><span class=\"o\">:</span><span class=\"mi\">18</span><span class=\"bp\">-</span><span class=\"mi\">7</span><span class=\"o\">:</span><span class=\"mi\">21</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span>\n<span class=\"n\">the</span> <span class=\"n\">proof</span> <span class=\"n\">annotation</span> <span class=\"n\">here</span> <span class=\"n\">has</span> <span class=\"n\">not</span> <span class=\"n\">been</span> <span class=\"n\">implemented</span> <span class=\"n\">yet</span>\n</code></pre></div>\n<p>In the infoview. Presumably the parallel looping syntax is incomplete</p>",
        "id": 423753922,
        "sender_full_name": "James Sully",
        "timestamp": 1709101294
    },
    {
        "content": "<p>I'm sure there's some workaround. But yeah, ofc I would prefer not to have to prove it</p>",
        "id": 423754002,
        "sender_full_name": "James Sully",
        "timestamp": 1709101353
    },
    {
        "content": "<p>Ok, having searched some more, it seems like <span class=\"user-mention\" data-user-id=\"354934\">@David Thrane Christiansen</span> has implemented exactly what I'm wanting here<br>\n<a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Iterating.20over.20array.20indices/near/421224993\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/.E2.9C.94.20Iterating.20over.20array.20indices/near/421224993</a></p>\n<p>Would be cool to see this in the standard library</p>",
        "id": 423754281,
        "sender_full_name": "James Sully",
        "timestamp": 1709101571
    },
    {
        "content": "<p>Unfortunately when I copy it in, I'm getting </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">▶</span> <span class=\"mi\">15</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"mi\">15</span><span class=\"o\">:</span><span class=\"mi\">43</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span>\n<span class=\"n\">Too</span> <span class=\"n\">many</span> <span class=\"n\">extra</span> <span class=\"kd\">parameters</span> <span class=\"n\">bound</span><span class=\"bp\">;</span> <span class=\"n\">the</span> <span class=\"n\">function</span> <span class=\"kd\">definition</span> <span class=\"n\">only</span> <span class=\"n\">has</span> <span class=\"mi\">0</span> <span class=\"n\">extra</span> <span class=\"kd\">parameters</span><span class=\"bp\">.</span>\n</code></pre></div>\n<p>On the line</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"n\">ff</span> <span class=\"n\">action</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">ff.start</span>\n</code></pre></div>",
        "id": 423754650,
        "sender_full_name": "James Sully",
        "timestamp": 1709101837
    },
    {
        "content": "<p>Ah, gotcha, oops! I think the conventional way to do this at the moment would be <code>for h : index in [:nums.size] do</code>, where we simply access <code>nums</code> via <code>nums[index]</code> and construct the <code>Fin</code> element in the loop. Being able to iterate through <code>Fin n</code> with <code>for</code> doesn't seem like a bad idea, though—I wonder if it exists in mathlib/std anywhere yet, in some form, at least.</p>",
        "id": 423754821,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1709101965
    },
    {
        "content": "<p>Yeah, that's what I was doing before. In this particular case it would be slightly nicer to be iterating <code>Fin</code> because I'm returning the indices as <code>Fin</code>s, so I have to get the proof of <code>index &lt; nums.size</code> somehow anyway.</p>",
        "id": 423755160,
        "sender_full_name": "James Sully",
        "timestamp": 1709102216
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"621161\">James Sully</span> <a href=\"#narrow/stream/270676-lean4/topic/For.20loop.20over.20Fin.20range/near/423754650\">said</a>:</p>\n<blockquote>\n<p>Unfortunately when I copy it in, I'm getting</p>\n</blockquote>\n<p>I don't really understand <code>termination_by</code>, but after some programming-by-permutation, changing it to <code>termination_by n - ff.start</code> seems to have made the typechecker happy</p>",
        "id": 423756333,
        "sender_full_name": "James Sully",
        "timestamp": 1709102922
    },
    {
        "content": "<p>the next thing is that for parallel for loops, apparently I need to implement <code>ToStream</code> for the thing I'm looping over</p>",
        "id": 423756566,
        "sender_full_name": "James Sully",
        "timestamp": 1709103073
    },
    {
        "content": "<p>Actually maybe I can get away without it if I commute them</p>",
        "id": 423756581,
        "sender_full_name": "James Sully",
        "timestamp": 1709103086
    },
    {
        "content": "<p>yep, that worked. Full code, using David's <code>FinsFrom</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std</span>\n<span class=\"kn\">open</span> <span class=\"n\">Std</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">FinsFrom</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">start</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">ok</span> <span class=\"o\">:</span> <span class=\"n\">start</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fins</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">FinsFrom</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">FinsFrom.forM</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">ff</span> <span class=\"o\">:</span> <span class=\"n\">FinsFrom</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">action</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ff.start</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">action</span> <span class=\"o\">⟨</span><span class=\"n\">ff.start</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">omega</span><span class=\"o\">⟩</span>\n    <span class=\"n\">forM</span> <span class=\"o\">⟨</span><span class=\"n\">ff.start</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">omega</span><span class=\"o\">⟩</span> <span class=\"n\">action</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">ff.start</span>\n<span class=\"n\">decreasing_by</span> <span class=\"n\">simp_wf</span><span class=\"bp\">;</span> <span class=\"n\">omega</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ForM</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">FinsFrom</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">forM</span> <span class=\"o\">:=</span> <span class=\"n\">FinsFrom.forM</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ForIn</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">FinsFrom</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">forIn</span> <span class=\"o\">:=</span> <span class=\"n\">ForM.forIn</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">twoSum</span> <span class=\"o\">(</span><span class=\"n\">nums</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">target</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">nums.size</span> <span class=\"bp\">×</span> <span class=\"n\">Fin</span> <span class=\"n\">nums.size</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">seen</span> <span class=\"o\">:</span> <span class=\"n\">HashMap</span> <span class=\"n\">Int</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">nums.size</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">HashMap.empty</span>\n\n  <span class=\"n\">for</span> <span class=\"n\">index</span> <span class=\"k\">in</span> <span class=\"n\">fins</span> <span class=\"n\">nums.size</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">nums</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">complement</span> <span class=\"o\">:=</span> <span class=\"n\">target</span> <span class=\"bp\">-</span> <span class=\"n\">x</span>\n    <span class=\"k\">match</span> <span class=\"n\">seen.find</span><span class=\"bp\">?</span> <span class=\"n\">complement</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">complementIndex</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">complementIndex</span><span class=\"o\">,</span> <span class=\"n\">index</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">seen</span> <span class=\"o\">:=</span> <span class=\"n\">seen.insert</span> <span class=\"n\">x</span> <span class=\"n\">index</span>\n\n  <span class=\"n\">none</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">twoSum</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"mi\">11</span><span class=\"o\">,</span> <span class=\"mi\">15</span><span class=\"o\">]</span> <span class=\"mi\">9</span> <span class=\"bp\">==</span> <span class=\"n\">some</span> <span class=\"o\">(⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩)</span>\n<span class=\"k\">#eval</span> <span class=\"n\">twoSum</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"mi\">6</span> <span class=\"bp\">==</span> <span class=\"n\">some</span> <span class=\"o\">(⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩)</span>\n<span class=\"k\">#eval</span> <span class=\"n\">twoSum</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"mi\">6</span> <span class=\"bp\">==</span> <span class=\"n\">some</span> <span class=\"o\">(⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩)</span>\n</code></pre></div>",
        "id": 423756748,
        "sender_full_name": "James Sully",
        "timestamp": 1709103184
    },
    {
        "content": "<p>Proposal to overload <code>[i:j]</code> syntax via typeclass is relevant<br>\n<a href=\"https://github.com/leanprover/lean4/issues/1962\">https://github.com/leanprover/lean4/issues/1962</a></p>",
        "id": 423784282,
        "sender_full_name": "James Sully",
        "timestamp": 1709114748
    },
    {
        "content": "<p>Honestly it would be nice to be able to simply write <code>for x in Fin n do</code>, but the current nature of <code>ForIn</code> makes using types <code>A</code> in that position awkward, since you would need an instance of <code>ForIn m (Type u) A</code>.</p>\n<p>I wonder what the best way to solve this is: you could either have some \"formalizing\" map <code>inductive F (α : Type v) where | formal</code> (plus nice syntax) to force it to fit the current shape of the instance (this is kind of a hack), or you could overload the <code>for ... in</code> syntax to also try to use an instance of a new class <code>ForInType m A</code>, for example. (Or something else?)</p>",
        "id": 423899566,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1709153037
    },
    {
        "content": "<p>LeanColls lets you write <code>for x in IndexType.univ (Fin n) do</code> for example, using a trivial wrapper structure</p>",
        "id": 423902080,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1709153940
    },
    {
        "content": "<p>you might be able to write the similar <code>Finset.univ (Fin n)</code> if you have Mathlib, but that is not made for computation</p>",
        "id": 423902420,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1709154080
    },
    {
        "content": "<p>Nice! I wonder if <code>IndexType.univ</code> could somehow be a coercion from <code>Type</code>s to <code>IndexType</code>s, and if that could be picked up by <code>for</code>. (Or if that would mess with other things.)</p>",
        "id": 423909037,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1709156952
    },
    {
        "content": "<p>Probably doable. I'd happily accept a PR if it works :-)</p>",
        "id": 423914387,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1709159462
    }
]