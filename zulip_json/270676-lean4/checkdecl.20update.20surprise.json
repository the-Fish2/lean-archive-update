[
    {
        "content": "<p>I bumped FLT to Lean 4.8 and the lean code in the project builds but <code>leanblueprint</code> fails because <code>checkdecls</code> is apparently out of date now. So I tried <code>lake update checkdecls</code> (with <code>Lake version 5.0.0-dcccfb7 (Lean version 4.8.0-rc1)</code>) and I got this diff:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/lake-manifest.json b/lake-manifest.json</span>\n<span class=\"gh\">index 7d95526..7d09aaa 100644</span>\n<span class=\"gd\">--- a/lake-manifest.json</span>\n<span class=\"gi\">+++ b/lake-manifest.json</span>\n<span class=\"gu\">@@ -67,47 +67,11 @@</span>\n<span class=\"w\"> </span>  {\"url\": \"https://github.com/PatrickMassot/checkdecls.git\",\n<span class=\"w\"> </span>   \"type\": \"git\",\n<span class=\"w\"> </span>   \"subDir\": null,\n<span class=\"gd\">-   \"rev\": \"2ee81a0269048010900117b675876a1d8db5883c\",</span>\n<span class=\"gi\">+   \"rev\": \"a216896749fcb030091156552be5bcddc50eb7cb\",</span>\n<span class=\"w\"> </span>   \"name\": \"checkdecls\",\n<span class=\"w\"> </span>   \"manifestFile\": \"lake-manifest.json\",\n<span class=\"w\"> </span>   \"inputRev\": null,\n<span class=\"w\"> </span>   \"inherited\": false,\n<span class=\"gd\">-   \"configFile\": \"lakefile.lean\"},</span>\n<span class=\"gd\">-  {\"url\": \"https://github.com/xubaiw/CMark.lean\",</span>\n<span class=\"gd\">-   \"type\": \"git\",</span>\n<span class=\"gd\">-   \"subDir\": null,</span>\n<span class=\"gd\">-   \"rev\": \"ba7b47bd773954b912ecbf5b1c9993c71a166f05\",</span>\n<span class=\"gd\">-   \"name\": \"CMark\",</span>\n<span class=\"gd\">-   \"manifestFile\": \"lake-manifest.json\",</span>\n<span class=\"gd\">-   \"inputRev\": \"main\",</span>\n<span class=\"gd\">-   \"inherited\": true,</span>\n<span class=\"gd\">-   \"configFile\": \"lakefile.lean\"},</span>\n<span class=\"gd\">-  {\"url\": \"https://github.com/fgdorais/lean4-unicode-basic\",</span>\n<span class=\"gd\">-   \"type\": \"git\",</span>\n<span class=\"gd\">-   \"subDir\": null,</span>\n<span class=\"gd\">-   \"rev\": \"8b53cc65534bc2c6888c3d4c53a3439648213f74\",</span>\n<span class=\"gd\">-   \"name\": \"UnicodeBasic\",</span>\n<span class=\"gd\">-   \"manifestFile\": \"lake-manifest.json\",</span>\n<span class=\"gd\">-   \"inputRev\": \"main\",</span>\n<span class=\"gd\">-   \"inherited\": true,</span>\n<span class=\"gd\">-   \"configFile\": \"lakefile.lean\"},</span>\n<span class=\"gd\">-  {\"url\": \"https://github.com/hargonix/LeanInk\",</span>\n<span class=\"gd\">-   \"type\": \"git\",</span>\n<span class=\"gd\">-   \"subDir\": null,</span>\n<span class=\"gd\">-   \"rev\": \"f1f904e00d79a91ca6a76dec6e318531a7fd2a0f\",</span>\n<span class=\"gd\">-   \"name\": \"leanInk\",</span>\n<span class=\"gd\">-   \"manifestFile\": \"lake-manifest.json\",</span>\n<span class=\"gd\">-   \"inputRev\": \"doc-gen\",</span>\n<span class=\"gd\">-   \"inherited\": true,</span>\n<span class=\"gd\">-   \"configFile\": \"lakefile.lean\"},</span>\n<span class=\"gd\">-  {\"url\": \"https://github.com/leanprover/doc-gen4\",</span>\n<span class=\"gd\">-   \"type\": \"git\",</span>\n<span class=\"gd\">-   \"subDir\": null,</span>\n<span class=\"gd\">-   \"rev\": \"2756f6603c992f133c1157bfc07ab11b5a7a6738\",</span>\n<span class=\"gd\">-   \"name\": \"«doc-gen4»\",</span>\n<span class=\"gd\">-   \"manifestFile\": \"lake-manifest.json\",</span>\n<span class=\"gd\">-   \"inputRev\": \"main\",</span>\n<span class=\"gd\">-   \"inherited\": false,</span>\n<span class=\"w\"> </span>   \"configFile\": \"lakefile.lean\"}],\n<span class=\"w\"> </span> \"name\": \"FLT\",\n<span class=\"w\"> </span> \"lakeDir\": \".lake\"}\n</code></pre></div>\n<p>which, as I understand it, means that lake just deleted my docgen? Is that expected?</p>",
        "id": 437300239,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1715013818
    },
    {
        "content": "<p>Kevin, are you aware of <a href=\"#narrow/stream/113488-general/topic/Create.20new.20Lean.20mathlib4.20project.20with.20leanblueprint.20support\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Create.20new.20Lean.20mathlib4.20project.20with.20leanblueprint.20support</a> ?</p>",
        "id": 437300727,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715013998
    },
    {
        "content": "<p>And you want <code>lake update -R -Kenv=dev</code></p>",
        "id": 437305759,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1715015983
    },
    {
        "content": "<p>I guess Ruben means  <code>lake update -R -Kenv=dev checkdecls</code></p>",
        "id": 437308254,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715017009
    },
    {
        "content": "<p>Please do not ever tell people to run <code>lake update</code> without a library name.</p>",
        "id": 437308323,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715017043
    },
    {
        "content": "<p>Why are you making people use <code>-Kenv=dev</code>? This seems bad design. Either only include doc-gen during CI, and users don't even see it (yes, even if this makes experts who have to deal with doc-gen jump through an extra hoop), or just include it for everyone, without any flags.</p>\n<p>The current setup is leading people to make (in my opinion, bad) suggestions to overcomplicate instructions e.g. at <a href=\"https://github.com/leanprover-community/leanprover-community.github.io/pull/487/files\">https://github.com/leanprover-community/leanprover-community.github.io/pull/487/files</a></p>",
        "id": 444838422,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718436636
    },
    {
        "content": "<p>Most users of leanblueprint would need doc-gen4 locally, and even if it's only run in CI, since CI shares the same manifest with local development, a user runs lake update locally will destroy CI too (it happens every once a while someone forgets this caveat).</p>",
        "id": 444838656,
        "sender_full_name": "Utensil Song",
        "timestamp": 1718436898
    },
    {
        "content": "<p>If you are suggesting that people should start requiring doc-gen4 without the condition, I agree, because it's just a (nowadays not so applicable) convention that's followed along.</p>",
        "id": 444838763,
        "sender_full_name": "Utensil Song",
        "timestamp": 1718437006
    },
    {
        "content": "<p>My comments in the PR merely explain the status quo for formalization projects, and such longer one-liner is necessary for now, but I'm definitely happy to see the situation change, i.e. maybe in the default lakefile generated by leanblueprint could use unconditional require.</p>\n<p>But this was not really a deliberate design choice for leanblueprint, only something followed along from the early days that doc-gen4 wishes to be a non-mandatory dependency. It was not a bad thing to do so in other package management systems, e.g. pip, node.js, rust etc. only that it's causing issues for lean/lake users because this conditional requiring is not part of the standard and has surprising consequences.</p>",
        "id": 444839149,
        "sender_full_name": "Utensil Song",
        "timestamp": 1718437422
    },
    {
        "content": "<p>To make the situation more complicated, I've also seen projects using <code>-Kenv=ci</code> and even <code>-Kdoc=on</code> for conditionally requiring doc-gen4.</p>",
        "id": 444839571,
        "sender_full_name": "Utensil Song",
        "timestamp": 1718437814
    },
    {
        "content": "<p>I would love to see <code>leanblueprint</code>, and the maintainers of the large projects using it, removing these conditional requires and making life sane for their users.</p>\n<p>Also note that in the medium term we would like to <em>remove</em> <code>meta if</code>, or at least discourage users from using it at all, in favour of the new <code>lake install</code> for dev tools.</p>",
        "id": 444839860,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718438138
    },
    {
        "content": "<p>If you upgrade doc-gen4 from dev dependency to dependency will that make downstream packages also get doc-gen4 as a dependency?</p>\n<p>(A nice thing about dev dependencies in npm is that <code>npm install</code> installs your dev dependencies but not upstream dev dependencies)</p>",
        "id": 444839930,
        "sender_full_name": "llllvvuu",
        "timestamp": 1718438201
    },
    {
        "content": "<p>Yes, <code>lake install</code> will do that too.</p>",
        "id": 444839952,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718438239
    },
    {
        "content": "<p>For now, I'm not sure if we have an example of a project using doc-gen4, and a downstream dependency not using doc-gen4, and it that is the case I'd prefer we don't make things complicated just for hypotheticals!</p>",
        "id": 444840027,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718438291
    },
    {
        "content": "<p>Yes, it would be nice to see a standard way to declare an optional dependency, that would always be seen by lake and handle accordingly, unlike the meta if making lake not seeing it sometimes and behavior surprisingly.</p>",
        "id": 444841702,
        "sender_full_name": "Utensil Song",
        "timestamp": 1718439742
    },
    {
        "content": "<p>For now, it's pretty safe to assume downstream of a project using doc-gen4 would not worry about some unused extra packages.</p>",
        "id": 444841825,
        "sender_full_name": "Utensil Song",
        "timestamp": 1718439844
    },
    {
        "content": "<p>I have no opinion about that discussion. <span class=\"user-mention\" data-user-id=\"110087\">@Kim Morrison</span> if you know what should be done for blueprints then I will happily merge a PR from you in the leanblueprint repo.</p>",
        "id": 444842627,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1718440634
    },
    {
        "content": "<p>Am I right that the outtake of this discussion is that <code>lake update -R -Kenv=dev</code> <em>is</em> necessary until <code>lake install</code> becomes a thing?</p>",
        "id": 444849612,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718446199
    },
    {
        "content": "<p>Yes, or until leanblueprint starts producing unconditional doc-gen4 requiring, and all existing formalization projects are PRed to do the same, as the old lakefiles are there to cause issues once generated.</p>",
        "id": 444850401,
        "sender_full_name": "Utensil Song",
        "timestamp": 1718446564
    },
    {
        "content": "<p>And actually I don't think it's a bad one-liner compared to <code>curl -sSfL https://raw.githubusercontent.com/leanprover/elan/master/elan-init.sh | sh -s -- -y --default-toolchain none</code> that everyone is already used to.</p>",
        "id": 444850579,
        "sender_full_name": "Utensil Song",
        "timestamp": 1718446644
    },
    {
        "content": "<p>Hmm, actually I never had to use that one(-liner)</p>",
        "id": 444850604,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718446670
    },
    {
        "content": "<p>It's definitely a better idea to include <a href=\"https://github.com/YaelDillies/LeanAPAP/blob/master/scripts/update_mathlib.sh\">a simple script</a> generated by leanblueprint to bump mathlib (until the situation is changed).</p>",
        "id": 444850654,
        "sender_full_name": "Utensil Song",
        "timestamp": 1718446688
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/270676-lean4/topic/checkdecl.20update.20surprise/near/444850604\">said</a>:</p>\n<blockquote>\n<p>Hmm, actually I never had to use that one(-liner)</p>\n</blockquote>\n<p>What did you use (for installing elan) ?</p>",
        "id": 444850881,
        "sender_full_name": "Utensil Song",
        "timestamp": 1718446888
    },
    {
        "content": "<p>It already comes installed in my gitpod workspace</p>",
        "id": 444851152,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1718447074
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/270676-lean4/topic/checkdecl.20update.20surprise/near/444851152\">said</a>:</p>\n<blockquote>\n<p>It already comes installed in my gitpod workspace</p>\n</blockquote>\n<p>which in turn uses the one-liner in <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/.docker/gitpod/Dockerfile\">the Dockerfile</a>.</p>",
        "id": 444852327,
        "sender_full_name": "Utensil Song",
        "timestamp": 1718448138
    },
    {
        "content": "<p>The thing I don't understand in this discussion is why we can't have a conditional doc-gen4 require, but no human <em>ever</em> turns it on, thereby removing the need for <code>-Kenv=dev</code> (or <code>-R</code>, which ideally would never have existed in the first place).</p>",
        "id": 446553036,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719218904
    },
    {
        "content": "<p>doc-gen4 should only be run by CI, and that can take care of using <code>-K</code>.</p>",
        "id": 446553063,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719218920
    },
    {
        "content": "<p>This is, after all, what Mathlib does, and I don't understand why it is any different for downstream projects.</p>",
        "id": 446553093,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719218936
    }
]