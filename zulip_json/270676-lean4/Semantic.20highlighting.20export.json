[
    {
        "content": "<p>Does anyone know a way to somehow export semantic highlighting to LaTeX? I recently wrote a paper where all code snippets are ugly compared to what I see in VSCode or vim because they make crucial use of semantic highlighting. If no easy solution exist, I will probably have to use screenshots in the final versionâ€¦</p>",
        "id": 427739316,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1710859644
    },
    {
        "content": "<p>Maybe in the similar spirit of <a href=\"https://stu.dev/using-vs-code-for-my-blog-code-formatting/\">https://stu.dev/using-vs-code-for-my-blog-code-formatting/</a> or <a href=\"https://marketplace.visualstudio.com/items?itemName=pdconsec.vscode-print\">https://marketplace.visualstudio.com/items?itemName=pdconsec.vscode-print</a> . </p>\n<p>The idea underneath is that VSCode has rendered the code to HTML and it's just one step away from getting the HTML to SVG, PDF etc.</p>",
        "id": 427746879,
        "sender_full_name": "Utensil Song",
        "timestamp": 1710861391
    },
    {
        "content": "<p>Also note that the default copy action in VS Code is the same as the command \"Copy With Syntax Highlighting\". That means  one can copy and paste highlighted code into a rich text editor like Word or a Web based one, then save it as PDF, without any extra technical support. I had done this before on Win/Mac, Linux should also have good support for rich text copy-paste.</p>",
        "id": 427749496,
        "sender_full_name": "Utensil Song",
        "timestamp": 1710861993
    },
    {
        "content": "<p>Some level of highlighting is done in the listings package, for example <a href=\"https://math.iisc.ac.in/~gadgil/poplws24cppmain-gardam-final.pdf\">this paper</a> but I don't know if that is good enough.</p>",
        "id": 427751517,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1710862425
    },
    {
        "content": "<p>The lstlean.tex file in lean4 repo is ancient (I used it anyway), it's got stuff from lean 2 in it</p>",
        "id": 427828768,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710891377
    },
    {
        "content": "<p>Hopefully pygments will do a release soon, then lean4 will be supported by default with <code>minted</code></p>",
        "id": 427829173,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710891636
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/Semantic.20highlighting.20export/near/427829173\">said</a>:</p>\n<blockquote>\n<p>Hopefully pygments will do a release soon, then lean4 will be supported by default with <code>minted</code></p>\n</blockquote>\n<p>As long as Lean LSP is not involved, there can't be semantic highlighting in such workflows, particularly for metaprogramming-rich Lean code.</p>",
        "id": 427829893,
        "sender_full_name": "Utensil Song",
        "timestamp": 1710892113
    },
    {
        "content": "<p>My (mid-term) bet is on Verso, it has access to Lean environment, supports multiple output format (which could be a series of tex or directly small PDF images for the consumption of LaTeX and the main TeX file can simplely reference them by IDs), it only needs be able to interface with existing themes for other highlighters like the one used by VSCode.</p>",
        "id": 427829958,
        "sender_full_name": "Utensil Song",
        "timestamp": 1710892159
    },
    {
        "content": "<p>The <a href=\"https://github.com/leanprover/subverso\">subverso</a> library is what Verso uses for subprocesses in different Lean versions. It's supposed to be a tool for querying compiler metadata that maintains compatibility with a variety of Lean versions (specific policies TBD). It includes a step that exports marked examples to a JSON format, and a Lean library that parses this. I don't yet have a TeX tenderer for it (only HTML), but it could be a reasonable easy starting point to build proper TeX output.</p>\n<p>To use it, add a dependency on the library and then run <code>lake build :examples</code>. That'll get you JSON files.</p>\n<p><a href=\"https://github.com/leanprover/subverso/blob/7d742a803cce869cb4eaeb0a693b415867cd1305/src/examples/SubVerso/Examples.lean#L170\">This function</a> will go ahead and build the JSON for a Lean project, then parse it into a more convenient datatype. A command-line wrapper for this that then emits TeX should be fairly easy to write.</p>\n<p>Warning: this is rapidly evolving software. I won't yet be able to support many external users, but I hope it will settle down and stably support many Lean versions in the future.</p>",
        "id": 427978594,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1710954821
    }
]