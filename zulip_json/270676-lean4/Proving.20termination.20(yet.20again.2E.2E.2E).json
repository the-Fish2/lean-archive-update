[
    {
        "content": "<p>I'm trying to formalize Epistemic Action Logic, and constantly run into some issues with termination.<br>\nWithout posting the mess I've experimented with, I think I can resolve most of it if I know how to show termination for the examples below.</p>\n<p>Here, <code>height</code> terminates:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> Prove termination automatically. -/</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">Inferred</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Tree</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span>\n  <span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"o\">(</span><span class=\"n\">pre</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Tree</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">height</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">node</span> <span class=\"n\">pre</span> <span class=\"n\">val</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">height</span> <span class=\"o\">(</span><span class=\"n\">pre</span> <span class=\"n\">val</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Inferred</span>\n</code></pre></div>\n<p>But not in the next two examples, although they are basically the same:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> Definition with mutual inductives. -/</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">Mutual</span>\n\n<span class=\"kd\">mutual</span>\n  <span class=\"kd\">inductive</span> <span class=\"n\">Node</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n    <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">pre</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Tree</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n  <span class=\"kd\">inductive</span> <span class=\"n\">Tree</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n    <span class=\"bp\">|</span> <span class=\"n\">nil</span>\n    <span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Node</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Node.pre</span> <span class=\"o\">:</span> <span class=\"n\">Node</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Tree</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">pre</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pre</span>\n<span class=\"kd\">def</span> <span class=\"n\">Node.val</span> <span class=\"o\">:</span> <span class=\"n\">Node</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>            <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">_</span> <span class=\"n\">val</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">val</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">height</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">node</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">height</span> <span class=\"o\">(</span><span class=\"n\">n.pre</span> <span class=\"n\">n.val</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Mutual</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> Definition with parametrized structures. -/</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">Structure</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Node</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">pre</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n  <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Tree</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span>\n  <span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Node</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">Tree</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">height</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">node</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">height</span> <span class=\"o\">(</span><span class=\"n\">n.pre</span> <span class=\"n\">n.val</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Structure</span>\n</code></pre></div>\n<p>How can I prove termination for the latter two examples?</p>",
        "id": 426548904,
        "sender_full_name": "Alexander Fasching",
        "timestamp": 1710425133
    },
    {
        "content": "<p>Lean does not support structural recursion, like in the first example, with mutually recursive data types (yet).</p>\n<p>So the other way of proving termination is with well-founded recursion, e.g. using <code>termination_by t =&gt; height t</code>. Of course this doesn't help when you are trying to define <code>height</code> itself…<br>\nIt seems that there is a <code>sizeOf</code> function defined automatically for your <code>Tree</code>/<code>Node</code> pair, but it seems to ignore function types (not unexpected, hardly possible to assign them a size measured in <code>Nat</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Mutual.Node._sizeOf_2.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">SizeOf</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"n\">Tree</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">SizeOf</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Tree.rec</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">pre</span> <span class=\"n\">val</span> <span class=\"n\">pre_ih</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">sizeOf</span> <span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"n\">n_ih</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">n_ih</span><span class=\"o\">)</span> <span class=\"n\">t</span>\n</code></pre></div>\n<p>If you only want to prove stuff about it, but not compile or <code>#eval</code>, you can use<code>Tree.rec</code> manually:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">height</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">Tree.rec</span>\n  <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">pre</span> <span class=\"n\">val</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">ih</span> <span class=\"n\">val</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">nil</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">ih</span><span class=\"o\">)</span>\n\n<span class=\"k\">#reduce</span> <span class=\"n\">height</span> <span class=\"o\">(</span><span class=\"n\">Tree.node</span> <span class=\"o\">(</span><span class=\"n\">Node.mk</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">()</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">nil</span><span class=\"o\">)</span> <span class=\"o\">()))</span>\n</code></pre></div>",
        "id": 426554977,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1710426734
    },
    {
        "content": "<p>With that non-computable height you can actually define a computable version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">height'</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">Tree.rec</span>\n  <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">pre</span> <span class=\"n\">val</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ih</span> <span class=\"n\">val</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">nil</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">ih</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">height</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">node</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">height</span> <span class=\"o\">(</span><span class=\"n\">n.pre</span> <span class=\"n\">n.val</span><span class=\"o\">)</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">height'</span> <span class=\"n\">t</span>\n<span class=\"n\">decreasing_by</span>\n  <span class=\"n\">simp_wf</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Node.pre</span><span class=\"o\">,</span> <span class=\"n\">Node.val</span><span class=\"o\">,</span> <span class=\"n\">height'</span><span class=\"o\">]</span>\n  <span class=\"n\">omega</span>\n</code></pre></div>",
        "id": 426556681,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1710427212
    },
    {
        "content": "<p>The example with a parametrized structure is not much different from the mutual one, because Lean has do implement nested inductive types using mutual types.</p>",
        "id": 426556884,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1710427286
    },
    {
        "content": "<p>Thanks!<br>\nI think I can work with this.</p>",
        "id": 426582440,
        "sender_full_name": "Alexander Fasching",
        "timestamp": 1710434285
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/270676-lean4/topic/Proving.20termination.20.28yet.20again.2E.2E.2E.29/near/426554977\">said</a>:</p>\n<blockquote>\n<p>If you only want to prove stuff about it, but not compile or <code>#eval</code>, you can use<code>Tree.rec</code> manually:</p>\n</blockquote>\n<p>You can get the best of all worlds (except the one where you don't have to do this dance) by defining a <code>partial</code> computable version and use <code>@[implemented_by]</code> to the one defined using <code>Tree.rec</code></p>",
        "id": 426644335,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710457385
    },
    {
        "content": "<p>Except that <code>implemented_by</code> is untrusted, so if you care about that, you can define one with <code>Tree.rec</code>, then one using <code>termination_by</code>, then prove them equivalent, and then slap the <code>csimp</code> attribute on that proof. Then you have the best of all worlds, besides having had to far too much for a very simple function :-)</p>",
        "id": 426645673,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1710458150
    }
]