[
    {
        "content": "<p>Is it possible for (delayed or not) metavariable's assignments to contain a cycle? e.g. <code>?m1 := f ?m.2</code> <code>?m.2 := g ?m.1</code>. If so is there a way to detect this?</p>",
        "id": 438934495,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1715835549
    },
    {
        "content": "<p>I'm not an expert, but if I was going to gamble on this, I'd say it's not possible to have a cycle. I think this because to create a metavariable using <code>mkFreshExprMVar</code> you need to provide the type and there's no way to change the type of the metavariable later as far as I'm aware.</p>\n<p>Here is my attempt at seeing if I could create a metavariable loop,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Expr</span> <span class=\"n\">Meta</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">mkFreshMVarId</span>\n<span class=\"k\">#check</span> <span class=\"n\">mkFreshExprMVar</span>\n<span class=\"k\">#check</span> <span class=\"n\">setMVarType</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mVarCycle</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">id₁</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshMVarId</span>\n  <span class=\"k\">let</span> <span class=\"n\">id₂</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshMVarId</span>\n  <span class=\"k\">let</span> <span class=\"n\">m₁</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"n\">none</span>\n  <span class=\"k\">let</span> <span class=\"n\">m₂</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"n\">none</span>\n  <span class=\"k\">let</span> <span class=\"n\">l</span> <span class=\"bp\">←</span> <span class=\"n\">setMVarType</span> <span class=\"n\">id₁</span> <span class=\"n\">m₁</span>\n  <span class=\"k\">let</span> <span class=\"n\">l</span> <span class=\"bp\">←</span> <span class=\"n\">setMVarType</span> <span class=\"n\">id₂</span> <span class=\"n\">m₂</span>\n</code></pre></div>\n<p>If you can figure it out, I'd like to know. </p>\n<p>I don't know if you know, but there's the metaprogramming book, which has a good chapter on expressions.<br>\n<code>https://github.com/leanprover-community/lean4-metaprogramming-book</code></p>",
        "id": 438963447,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1715846814
    },
    {
        "content": "<p>Nothing stops you from assigning an expr of the wrong type to an MVar if I recall #mpil correctly</p>",
        "id": 438965280,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1715847483
    },
    {
        "content": "<p>There is/was even an explicit warning to ensure this</p>",
        "id": 438965338,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1715847497
    },
    {
        "content": "<p>Indeed, as far as the API is concerned, you can put arbitrary garbage into metavariable declarations and assignments. But it is expected that you don't, and in particular mvar assignments should indeed be non-cyclic.</p>",
        "id": 438985047,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1715854533
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"209436\">Lucas Allen</span> <a href=\"#narrow/stream/270676-lean4/topic/Cyclic.20metavariable.20assignment/near/438963447\">said</a>:</p>\n<blockquote>\n<p>I'm not an expert, but if I was going to gamble on this, I'd say it's not possible to have a cycle. I think this because to create a metavariable using <code>mkFreshExprMVar</code> you need to provide the type </p>\n</blockquote>\n<p>Also, this is not true. The type argument can be <code>none</code></p>",
        "id": 439007918,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1715862389
    },
    {
        "content": "<p>It's a metaprogramming bug for metavariable assignments to contain a cycle.</p>\n<p>The function <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.occursCheck#doc\">docs#Lean.occursCheck</a> is supposed to succeed before assigning.</p>",
        "id": 439051191,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715874537
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"599027\">Leni Aniva</span> has marked this topic as resolved.</p>",
        "id": 439069339,
        "sender_full_name": "Notification Bot",
        "timestamp": 1715880821
    },
    {
        "content": "<p>So cycles of metavariables can occur, good to know. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 439103278,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1715894354
    },
    {
        "content": "<p>In fact, it is really easy to crash Lean using a cycle in metavariables:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">use</span> <span class=\"bp\">?</span><span class=\"n\">n</span>\n  <span class=\"n\">use</span> <span class=\"o\">⟨</span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"n\">on_goal</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">?</span><span class=\"n\">m</span>\n</code></pre></div>",
        "id": 439358003,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716041460
    },
    {
        "content": "<p>That's a bug in <code>exact</code> though: <a href=\"https://github.com/leanprover/lean4/pull/2504\">lean4#2504</a></p>",
        "id": 439361622,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1716044742
    },
    {
        "content": "<p>My example seems to work with <code>apply</code> as well. Are you sure it is not a more fundamental issue with lean's metavariables? <del>I don't recall seeing any occurs check in the implementation of <code>isDefEq</code></del>. edit: it does seem to do it</p>",
        "id": 439361893,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716044954
    },
    {
        "content": "<p><code>apply</code> is also missing an occurs check</p>",
        "id": 439362314,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1716045337
    },
    {
        "content": "<p>It's not an issue with metavariables, but with the way tactics use the low-level <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.MVarId.assign#doc\">docs#Lean.MVarId.assign</a> without all the necessary checks.</p>",
        "id": 439362401,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1716045408
    }
]