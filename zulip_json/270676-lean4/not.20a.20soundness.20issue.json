[
    {
        "content": "<p>I have a soundness issue in my installation of lean:</p>\n<blockquote>\n<p>Lake version 5.0.0-be6c489 (Lean version 4.9.0-rc1)</p>\n</blockquote>\n<p>Specifically, I can prove False like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Data</span><span class=\"bp\">.</span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">ModEq</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Tactic</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">mod_3_add_3_under_exponent</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"w\"> </span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">≡</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">MOD</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">])</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">zero</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">rfl</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">    </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">IH</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">mod_3_add_3_under_exponent</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">n</span>\n<span class=\"w\">    </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">first_step</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">^</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">^</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">ring</span>\n<span class=\"w\">    </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">third_step</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">≡</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">MOD</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">add_modEq_right</span>\n<span class=\"w\">    </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">fourth_step</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">^</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">^</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">ring</span>\n<span class=\"w\">    </span><span class=\"k\">calc</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">^</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">≡</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">^</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">MOD</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">first_step</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">≡</span><span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">^</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">MOD</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">ModEq</span><span class=\"bp\">.</span><span class=\"n\">mul</span><span class=\"w\"> </span><span class=\"n\">IH</span><span class=\"w\"> </span><span class=\"n\">rfl</span>\n<span class=\"w\">    </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">≡</span><span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">^</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">MOD</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">ModEq</span><span class=\"bp\">.</span><span class=\"n\">mul</span><span class=\"w\"> </span><span class=\"n\">rfl</span><span class=\"w\"> </span><span class=\"n\">third_step</span>\n<span class=\"w\">    </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">≡</span><span class=\"w\">  </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">^</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">MOD</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">fourth_step</span><span class=\"o\">]</span>\n\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">mod_3_add_3_under_exponent</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">soundness_issue</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">False</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"bp\">≡</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">MOD</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">mod_3_add_3_under_exponent</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">  </span><span class=\"n\">contradiction</span>\n\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">soundness_issue</span>\n</code></pre></div>\n<p>I've checked in <a href=\"https://github.com/picrin/compfiles/blob/f0fd974807185e9ebf64e969054f4794acea6fd9/Compfiles/soundness_issue.lean\">the code to github</a> if looking at lake-manifest.json would be helpful.</p>\n<p>I've also checked with the web browser version of lean live, <a href=\"https://live.lean-lang.org/#code=import%20Mathlib.Data.Nat.ModEq%0Aimport%20Mathlib.Tactic%0A%0Alemma%20mod_3_add_3_under_exponent%20(m%20n%20%3A%20%E2%84%95%20)%20%3A%20(2%20*%20n%20%E2%89%A1%200%20%5BMOD%203%5D)%20%3A%3D%20by%0A%20%20cases%20n%20with%0A%20%20%7C%20zero%20%3D%3E%0A%20%20%20%20rfl%0A%20%20%7C%20succ%20n%20%3D%3E%0A%20%20%20%20have%20IH%20%3A%3D%20%40mod_3_add_3_under_exponent%20m%20n%0A%20%20%20%20have%20first_step%20%3A%20(m%20%2B%203)%20%5E%20(n%20%2B%201)%20%3D%20(m%20%2B%203)%20%5E%20n%20*%20(m%20%2B%203)%20%3A%3D%20by%20ring%0A%20%20%20%20have%20third_step%20%3A%20(m%20%2B%203)%20%E2%89%A1%20m%20%5BMOD%203%5D%20%3A%3D%20Nat.add_modEq_right%0A%20%20%20%20have%20fourth_step%20%3A%20(m%20%5E%20n%20*%20m)%20%3D%20m%20%5E%20(n%20%2B%201)%20%3A%3D%20by%20ring%0A%20%20%20%20calc%20(m%20%2B%203)%20%5E%20(n%20%2B%201)%20%E2%89%A1%20(m%20%2B%203)%20%5E%20n%20*%20(m%20%2B%203)%20%5BMOD%203%5D%20%3A%3D%20by%20rw%5Bfirst_step%5D%0A%20%20%20%20_%20%E2%89%A1%20%20(m%20%5E%20n%20*%20(m%20%2B%203))%20%5BMOD%203%5D%20%3A%3D%20Nat.ModEq.mul%20IH%20rfl%0A%20%20%20%20_%20%E2%89%A1%20%20(m%20%5E%20n%20*%20m%20)%20%5BMOD%203%5D%20%3A%3D%20Nat.ModEq.mul%20rfl%20third_step%0A%20%20%20%20_%20%E2%89%A1%20%20m%20%5E%20(n%20%2B%201)%20%5BMOD%203%5D%20%3A%3D%20by%20rw%5Bfourth_step%5D%0A%0A%23check%20mod_3_add_3_under_exponent%0A%0Alemma%20soundness_issue%20%3A%20False%20%3A%3D%20by%0A%20%20have%20A%20%3A%202%20*%201%20%E2%89%A1%200%20%5BMOD%203%5D%20%3A%3D%20mod_3_add_3_under_exponent%200%201%0A%20%20contradiction%0A%0A%23check%20soundness_issue\">and it is not affected</a> (the proof is appropriately rejected). So it looks like I've either done something wrong or there's a bug in the version of Lean that I'm using. But I'm struggling to work out which one it is.</p>",
        "id": 444888997,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1718473377
    },
    {
        "content": "<p>The live viewers seems to be on 4.9.0-rc2, if you want to try that</p>",
        "id": 444890004,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1718473973
    },
    {
        "content": "<p>You mean try the live viewer? Or try to install 4.9.0-rc2 locally? I've tried the former (link in the original message), but for the latter it will take a long time for Mathlib to compile, right? Like a few hours?</p>",
        "id": 444890185,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1718474065
    },
    {
        "content": "<p>If you update to current mathlib master, you can use the cache (mathlib moved to rc2 yesterday)</p>",
        "id": 444890419,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1718474189
    },
    {
        "content": "<p>OK I'll try that. Just to confirm, I have to modify lake-manifest.json and run <code>lake exe cache get</code> and then <code>lake build</code>?</p>",
        "id": 444890529,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1718474271
    },
    {
        "content": "<p>Hold on, the file is <code>lean-toolchain</code>, right?</p>",
        "id": 444890630,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1718474354
    },
    {
        "content": "<p>I'm pinned to a particular version of mathlib. Hopefully this will work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"o\">{</span><span class=\"s2\">\"url\"</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s2\">\"https://github.com/leanprover-community/mathlib4\"</span><span class=\"o\">,</span>\n<span class=\"w\">   </span><span class=\"s2\">\"type\"</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s2\">\"git\"</span><span class=\"o\">,</span>\n<span class=\"w\">   </span><span class=\"s2\">\"subDir\"</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">null</span><span class=\"o\">,</span>\n<span class=\"w\">   </span><span class=\"s2\">\"rev\"</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s2\">\"303e71911e1c040ac1278de13fc2032102888a6e\"</span><span class=\"o\">,</span>\n<span class=\"w\">   </span><span class=\"s2\">\"name\"</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s2\">\"mathlib\"</span><span class=\"o\">,</span>\n<span class=\"w\">   </span><span class=\"s2\">\"manifestFile\"</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s2\">\"lake-manifest.json\"</span><span class=\"o\">,</span>\n<span class=\"w\">   </span><span class=\"s2\">\"inputRev\"</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s2\">\"master\"</span><span class=\"o\">,</span>\n<span class=\"w\">   </span><span class=\"s2\">\"inherited\"</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">false</span><span class=\"o\">,</span>\n<span class=\"w\">   </span><span class=\"s2\">\"configFile\"</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s2\">\"lakefile.lean\"</span><span class=\"o\">},</span>\n</code></pre></div>",
        "id": 444890931,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1718474475
    },
    {
        "content": "<p>Try running <code>lake update mathlib</code>, probably this will update <code>lean-toolchain</code> as well</p>",
        "id": 444890970,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1718474489
    },
    {
        "content": "<p>OK I'll do that.</p>",
        "id": 444891002,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1718474504
    },
    {
        "content": "<p><code>303e71911e1c040ac1278de13fc2032102888a6e</code> is too old</p>",
        "id": 444891068,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1718474523
    },
    {
        "content": "<p>Well, that's what Compfiles uses</p>",
        "id": 444891108,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1718474536
    },
    {
        "content": "<p>Hmm, this might break everything, right?</p>",
        "id": 444891142,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1718474556
    },
    {
        "content": "<p>That's OK, I copied the whole directory</p>",
        "id": 444891164,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1718474567
    },
    {
        "content": "<p>Thankfully it's not a soundness issue, but there's definitely an issue here. One of the tactics seems to be creating <code>sorry</code> without reporting it.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Data</span><span class=\"bp\">.</span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">ModEq</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Tactic</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">mod_3_add_3_under_exponent</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"w\"> </span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">≡</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">MOD</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">])</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">zero</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">rfl</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">    </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">IH</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">mod_3_add_3_under_exponent</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">n</span>\n<span class=\"w\">    </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">first_step</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">^</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">^</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">ring</span>\n<span class=\"w\">    </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">third_step</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">≡</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">MOD</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">add_modEq_right</span>\n<span class=\"w\">    </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">fourth_step</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">^</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">^</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">ring</span>\n<span class=\"w\">    </span><span class=\"k\">calc</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">^</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">≡</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">^</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">MOD</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">first_step</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">≡</span><span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">^</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">MOD</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">ModEq</span><span class=\"bp\">.</span><span class=\"n\">mul</span><span class=\"w\"> </span><span class=\"n\">IH</span><span class=\"w\"> </span><span class=\"n\">rfl</span>\n<span class=\"w\">    </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">≡</span><span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">^</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">MOD</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">ModEq</span><span class=\"bp\">.</span><span class=\"n\">mul</span><span class=\"w\"> </span><span class=\"n\">rfl</span><span class=\"w\"> </span><span class=\"n\">third_step</span>\n<span class=\"w\">    </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">≡</span><span class=\"w\">  </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">^</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">MOD</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">fourth_step</span><span class=\"o\">]</span>\n\n<span class=\"bp\">#</span><span class=\"n\">print</span><span class=\"w\"> </span><span class=\"n\">axioms</span><span class=\"w\"> </span><span class=\"n\">mod_3_add_3_under_exponent</span>\n<span class=\"c1\">-- 'mod_3_add_3_under_exponent' depends on axioms: [sorryAx]</span>\n</code></pre></div>",
        "id": 444891467,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718474726
    },
    {
        "content": "<p>I'm currently re-running with an up-to-date mathlib, so let's see</p>",
        "id": 444891572,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1718474765
    },
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> you can reproduce this? Which version of Lean/Mathlib are you at?</p>",
        "id": 444891674,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1718474825
    },
    {
        "content": "<p>Yeah, I just reproduced it with a recent mathlib, 4.9.0-rc1</p>",
        "id": 444891929,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718474964
    },
    {
        "content": "<p>OK, so whatever this was, updating Mathlib fixed it. Thank <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span>!</p>",
        "id": 444891934,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1718474968
    },
    {
        "content": "<p>Oh, is this something that's fixed in 4.9.0-rc2 then?</p>",
        "id": 444891971,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718474995
    },
    {
        "content": "<p>The problem no longer affects Lake version 5.0.0-7ed9b73 (Lean version 4.9.0-rc2)</p>",
        "id": 444891975,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1718474998
    },
    {
        "content": "<p>It fails to typecheck, yes.</p>",
        "id": 444892046,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1718475018
    },
    {
        "content": "<p>I mean, I still get</p>\n<p><code>'mod_3_add_3_under_exponent' depends on axioms: [sorryAx]</code></p>\n<p>But at least it fails to typecheck in line 13:</p>\n<p>soundness_issue.lean:13:4</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"bp\">'</span><span class=\"k\">calc</span><span class=\"bp\">'</span><span class=\"w\"> </span><span class=\"n\">tactic</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">has</span><span class=\"w\"> </span><span class=\"n\">type</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">^</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">≡</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">^</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">MOD</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">]</span>\n<span class=\"n\">but</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">type</span>\n<span class=\"w\">  </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">≡</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">MOD</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 444892175,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1718475099
    },
    {
        "content": "<p>Maybe there's still a way to prove False, I'm not sure. But at least this code is not it :)</p>",
        "id": 444892295,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1718475158
    },
    {
        "content": "<p>I guess somehow it's fixed because of <a href=\"https://github.com/leanprover/lean4/pull/4335\">lean4#4335</a>, which seems plausible because the <code>have</code>s preceding <code>calc</code> are one of the ways to trigger the issue.</p>",
        "id": 444892352,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718475198
    },
    {
        "content": "<p>Oh I'm not surprised Heather reported it, she loves her calcs :). I've done her course, it's full of them.</p>",
        "id": 444892568,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1718475300
    },
    {
        "content": "<p>I'm happy to leave it here then if you are.</p>",
        "id": 444892623,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1718475328
    },
    {
        "content": "<p>It looks like everything's now as it should be :-)</p>",
        "id": 444892726,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718475366
    }
]