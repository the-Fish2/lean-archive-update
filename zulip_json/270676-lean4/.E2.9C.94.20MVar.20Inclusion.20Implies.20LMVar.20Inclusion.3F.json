[
    {
        "content": "<p>Given a quantified equality type <code>∀ a b c ..., lhs = rhs</code>, if I instantiate the quantified variables with mvars, then does the following statement hold?<br>\nIf the mvars in <code>lhs</code> are a subset of the mvars in <code>rhs</code>, then the level mvars in <code>lhs</code> are also a subset of the level mvars in <code>rhs</code>. </p>\n<p>Or expressed in Lean code, can the following ever print <code>no</code>?</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Test Code</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Lean.HashSet</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Level.levelMVars</span> <span class=\"o\">:</span> <span class=\"n\">Level</span> <span class=\"bp\">→</span> <span class=\"n\">HashSet</span> <span class=\"n\">LMVarId</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mvar</span> <span class=\"n\">id</span>                <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span><span class=\"n\">id</span><span class=\"o\">}</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">|</span> <span class=\"n\">param</span> <span class=\"n\">_</span>         <span class=\"bp\">=&gt;</span> <span class=\"bp\">∅</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">l</span>                 <span class=\"bp\">=&gt;</span> <span class=\"n\">l.levelMVars</span>\n  <span class=\"bp\">|</span> <span class=\"n\">max</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"bp\">|</span> <span class=\"n\">imax</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">l₁.levelMVars.merge</span> <span class=\"n\">l₂.levelMVars</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Expr.levelMVars</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">HashSet</span> <span class=\"n\">LMVarId</span>\n  <span class=\"bp\">|</span> <span class=\"n\">sort</span> <span class=\"n\">lvl</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">lvl.levelMVars</span>\n  <span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"n\">_</span> <span class=\"n\">lvls</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">lvls.foldl</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">merge</span> <span class=\"bp\">·.</span><span class=\"n\">levelMVars</span><span class=\"o\">)</span> <span class=\"bp\">∅</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bvar</span> <span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"n\">fvar</span> <span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"n\">mvar</span> <span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"n\">lit</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∅</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mdata</span> <span class=\"n\">_</span> <span class=\"n\">e</span> <span class=\"bp\">|</span> <span class=\"n\">proj</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">e.levelMVars</span>\n  <span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span> <span class=\"bp\">|</span> <span class=\"n\">lam</span> <span class=\"n\">_</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span> <span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"n\">forallE</span> <span class=\"n\">_</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">e₁.levelMVars.merge</span> <span class=\"n\">e₂.levelMVars</span>\n  <span class=\"bp\">|</span> <span class=\"n\">letE</span> <span class=\"n\">_</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span> <span class=\"n\">e₃</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">e₁.levelMVars.merge</span> <span class=\"n\">e₂.levelMVars</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">merge</span> <span class=\"n\">e₃.levelMVars</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"#test\"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">none</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">body</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">forallMetaTelescopeReducing</span> <span class=\"n\">e</span>\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">lhs</span><span class=\"o\">,</span> <span class=\"n\">rhs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">body.eq</span><span class=\"bp\">?</span> <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"not an equality\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">lhs</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"n\">lhs</span>\n  <span class=\"k\">let</span> <span class=\"n\">rhs</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"n\">rhs</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">lhsMVars</span> <span class=\"bp\">←</span> <span class=\"n\">getMVars</span> <span class=\"n\">lhs</span>\n  <span class=\"k\">let</span> <span class=\"n\">rhsMVars</span> <span class=\"bp\">←</span> <span class=\"n\">getMVars</span> <span class=\"n\">rhs</span>\n  <span class=\"k\">let</span> <span class=\"n\">lhsLMVars</span> <span class=\"o\">:=</span> <span class=\"n\">lhs.levelMVars</span>\n  <span class=\"k\">let</span> <span class=\"n\">rhsLMVars</span> <span class=\"o\">:=</span> <span class=\"n\">rhs.levelMVars</span>\n\n  <span class=\"k\">if</span> <span class=\"n\">lhsMVars.all</span> <span class=\"n\">rhsMVars.contains</span> <span class=\"k\">then</span>\n    <span class=\"k\">if</span> <span class=\"n\">lhsLMVars.all</span> <span class=\"n\">rhsLMVars.contains</span>\n    <span class=\"k\">then</span> <span class=\"n\">return</span> <span class=\"n\">mkStrLit</span> <span class=\"s2\">\"ok\"</span>\n    <span class=\"k\">else</span> <span class=\"n\">return</span> <span class=\"n\">mkStrLit</span> <span class=\"s2\">\"no\"</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">return</span> <span class=\"n\">mkStrLit</span> <span class=\"s2\">\"ok\"</span>\n\n<span class=\"c1\">-- Example:</span>\n<span class=\"k\">#eval</span> <span class=\"bp\">#</span><span class=\"n\">test</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">c</span>\n</code></pre></div>\n</div></div>",
        "id": 422213586,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1708342099
    },
    {
        "content": "<p>Yes, this prints <code>no</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"bp\">#</span><span class=\"n\">test</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">ULift.down</span> <span class=\"o\">(</span><span class=\"n\">ULift.up</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">c</span>\n</code></pre></div>",
        "id": 422214975,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708342659
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"372804\">Marcus Rossel</span> has marked this topic as resolved.</p>",
        "id": 422233679,
        "sender_full_name": "Notification Bot",
        "timestamp": 1708349671
    }
]