[
    {
        "content": "<p>The current element access notation currently does not allow you to write <code>fun i =&gt; x[i]</code> as the type of <code>i</code> does not get inferred. This is particularly unfortunate for types like <code>Vector α n</code>. Here is my attempt at fixing it. I would like know if there is a cleaner solution to this problem.</p>\n<p>I'm using James' LeanColls library which defines <a href=\"https://github.com/JamesGallicchio/LeanColls/blob/48d79ab8907fe61dfbeaee24bd040ef0df3c3ac7/LeanColls/Classes/Indexed/Basic.lean#L27C1-L27C75\"><code>Indexed</code></a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Indexed</span> <span class=\"o\">(</span><span class=\"n\">Cont</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Idx</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Elem</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n   <span class=\"bp\">...</span>\n</code></pre></div>\n<p>which determined the canonical index type <code>Idx</code> for the container type <code>Cont</code>. This is unlike <code>GetElem</code> class where the index type is not marked as <code>outParam</code>. I want to uses this class to determine the index type.</p>\n<p>Here is my solution:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>code</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Function.Basic</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">ArrayN</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">data</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span>\n  <span class=\"n\">h_size</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">data.size</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Indexed</span> <span class=\"o\">(</span><span class=\"n\">Cont</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Idx</span> <span class=\"n\">Elem</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">get</span> <span class=\"o\">:</span> <span class=\"n\">Cont</span> <span class=\"bp\">→</span> <span class=\"n\">Idx</span> <span class=\"bp\">→</span> <span class=\"n\">Elem</span>\n  <span class=\"n\">ofFn</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Idx</span> <span class=\"bp\">→</span> <span class=\"n\">Elem</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Cont</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Indexed</span> <span class=\"o\">(</span><span class=\"n\">ArrayN</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">get</span> <span class=\"n\">c</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">c.data.get</span> <span class=\"o\">(</span><span class=\"n\">c.h_size</span> <span class=\"bp\">▸</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"n\">ofFn</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Array.ofFn</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Indexed</span> <span class=\"n\">Cont</span> <span class=\"n\">Idx</span> <span class=\"n\">Elem</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">GetElem</span> <span class=\"n\">Cont</span> <span class=\"n\">Idx</span> <span class=\"n\">Elem</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">getElem</span> <span class=\"n\">c</span> <span class=\"n\">i</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">Indexed.get</span> <span class=\"n\">c</span> <span class=\"n\">i</span>\n\n\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span> <span class=\"n\">Meta</span> <span class=\"k\">in</span>\n<span class=\"kd\">@[</span><span class=\"n\">inherit_doc</span> <span class=\"n\">getElem</span><span class=\"kd\">]</span>\n<span class=\"n\">elab</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">priority</span><span class=\"o\">:=</span><span class=\"n\">high</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"n\">noWs</span> <span class=\"s2\">\"[\"</span> <span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">try</span>\n    <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">x</span> <span class=\"n\">none</span>\n    <span class=\"k\">let</span> <span class=\"n\">X</span> <span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">x</span>\n    <span class=\"k\">let</span> <span class=\"n\">Idx</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshTypeMVar</span>\n    <span class=\"k\">let</span> <span class=\"n\">Elem</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshTypeMVar</span>\n    <span class=\"k\">let</span> <span class=\"n\">cls</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">mkAppN</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkConstWithFreshMVarLevels</span> <span class=\"bp\">``</span><span class=\"n\">Indexed</span><span class=\"o\">)</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">Idx</span><span class=\"o\">,</span> <span class=\"n\">Elem</span><span class=\"o\">])</span>\n    <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"bp\">←</span> <span class=\"n\">synthInstance</span> <span class=\"n\">cls</span>\n    <span class=\"k\">let</span> <span class=\"n\">Dom</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"n\">none</span>\n    <span class=\"k\">let</span> <span class=\"n\">cls</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">mkAppN</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkConstWithFreshMVarLevels</span> <span class=\"bp\">``</span><span class=\"n\">GetElem</span><span class=\"o\">)</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"n\">Idx</span><span class=\"o\">),</span> <span class=\"n\">Elem</span><span class=\"o\">,</span> <span class=\"n\">Dom</span><span class=\"o\">])</span>\n    <span class=\"k\">let</span> <span class=\"n\">instGetElem</span> <span class=\"bp\">←</span> <span class=\"n\">synthInstance</span> <span class=\"n\">cls</span>\n    <span class=\"k\">let</span> <span class=\"n\">i</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">i</span> <span class=\"n\">Idx</span>\n    <span class=\"k\">let</span> <span class=\"n\">dom</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"o\">(</span><span class=\"n\">mkAppN</span> <span class=\"n\">Dom</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">i</span><span class=\"o\">])</span>\n    <span class=\"n\">dom.mvarId</span><span class=\"bp\">!.</span><span class=\"n\">assign</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">``</span><span class=\"n\">True.intro</span> <span class=\"o\">[])</span>\n    <span class=\"n\">return</span> <span class=\"bp\">←</span> <span class=\"n\">mkAppOptM</span> <span class=\"bp\">``</span><span class=\"n\">getElem</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">,</span><span class=\"n\">Idx</span><span class=\"o\">,</span><span class=\"n\">Elem</span><span class=\"o\">,</span><span class=\"n\">Dom</span><span class=\"o\">,</span><span class=\"n\">instGetElem</span><span class=\"o\">,</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">dom</span><span class=\"o\">]</span>\n  <span class=\"n\">catch</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">return</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">getElem</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">get_elem_tactic</span><span class=\"o\">)))</span> <span class=\"n\">none</span>\n</code></pre></div>\n</div></div>\n<p>And few test cases that I found out to be challenging when trying different approach</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">Cont</span> <span class=\"n\">Idx</span> <span class=\"n\">Elem</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Indexed</span> <span class=\"n\">Cont</span> <span class=\"n\">Idx</span> <span class=\"n\">Elem</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">Elem</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">Cont'</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Indexed</span> <span class=\"n\">Cont'</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"n\">Elem</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Cont</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c'</span> <span class=\"o\">:</span> <span class=\"n\">Cont'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Idx</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">b.size</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">c</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span>\n<span class=\"k\">#check</span> <span class=\"n\">c'</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span>\n<span class=\"k\">#check</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">c</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span>\n<span class=\"k\">#check</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">],</span><span class=\"n\">c</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">])</span>\n<span class=\"k\">#check</span> <span class=\"bp\">↿</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">],</span><span class=\"n\">c</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">])</span>\n<span class=\"k\">#check</span> <span class=\"n\">b</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Idx</span> <span class=\"bp\">→</span> <span class=\"n\">Elem</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Function.invFun</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Idx</span> <span class=\"bp\">→</span> <span class=\"n\">Elem</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Indexed.ofFn</span> <span class=\"o\">(</span><span class=\"n\">Cont</span><span class=\"o\">:=</span><span class=\"n\">Cont</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"bp\">=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 425932003,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1710170131
    },
    {
        "content": "<p>An <code>outParam</code> is not used on the index type in core because some container types like <code>Array</code> support multiple different index types (e.g., <code>Array</code> supports <code>Nat</code>, <code>Fin</code>, and <code>USize</code>).</p>",
        "id": 426001427,
        "sender_full_name": "Mac Malone",
        "timestamp": 1710188207
    },
    {
        "content": "<p>Yes it is completely understandable that the index type is not outParam in general. But for certain types, like <code>Vector</code>, it would be nice to have a canonical index type.</p>",
        "id": 426004381,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1710189381
    }
]