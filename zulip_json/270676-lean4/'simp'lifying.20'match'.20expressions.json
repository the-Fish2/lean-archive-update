[
    {
        "content": "<p>Consider</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Data</span><span class=\"bp\">.</span><span class=\"n\">ZMod</span><span class=\"bp\">.</span><span class=\"n\">Defs</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ZMod</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"mi\">37</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"mi\">389</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"mi\">5077</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∃</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"c\">/-</span><span class=\"cm\"> ⊢ ∃ n,</span>\n<span class=\"cm\">  (match 2 with</span>\n<span class=\"cm\">    | 0 =&gt; 37</span>\n<span class=\"cm\">    | 2 =&gt; 37</span>\n<span class=\"cm\">    | 1 =&gt; 389</span>\n<span class=\"cm\">    | 3 =&gt; 5077) =</span>\n<span class=\"cm\">    n</span>\n<span class=\"cm\">  -/</span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>How can I get the <code>(match 2 with ...)</code> simplified to <code>37</code>? (They are defeq, so <code>change ∃ n,37 = n</code> would work, but I'd like to get this automatically.)</p>\n<p>Note:</p>\n<ul>\n<li>Replacing <code>foo 2</code> by <code>foo 0</code> or <code>foo 1</code> works (i.e., <code>simp only [foo]</code> resolves the <code>match</code>).</li>\n<li>Replacing <code>ZMod 4</code> by <code>Fin 4</code> in the definition of <code>foo</code> also works.</li>\n<li><code>dsimp</code> does not work.</li>\n</ul>\n<p>Of course, one could add <code>simp</code> lemmas <code>lemma foo_two : foo 2 = 37 := rfl</code> etc., but when <code>4</code> is a bit larger, that gets tedious...</p>",
        "id": 443851685,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1718049081
    },
    {
        "content": "<p>Any ideas?</p>",
        "id": 444227542,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1718196631
    },
    {
        "content": "<p>On the webserver, <code>simp only [foo, exists_eq']</code> works: is this not suitable?</p>",
        "id": 444228499,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718196827
    },
    {
        "content": "<p>Or do you want <code>simp</code> to stop before closing the goal?</p>",
        "id": 444228650,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718196857
    },
    {
        "content": "<p>This is cheating and an artifact of the MWE <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span><br>\nMaybe this is better:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Data</span><span class=\"bp\">.</span><span class=\"n\">ZMod</span><span class=\"bp\">.</span><span class=\"n\">Defs</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ZMod</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"mi\">37</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"mi\">389</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"mi\">5077</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">95</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>The point is that <code>simp</code> does not resolve the <code>match</code> (when the argument is at least <code>2</code>).</p>",
        "id": 444228934,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1718196921
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">AtLeastTwo</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">95</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>?</p>\n<p>EDIT: this looked correct, but it was probably due to some cached state.</p>",
        "id": 444229419,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718197028
    },
    {
        "content": "<p>This still doesn't resolve the <code>match</code>.</p>",
        "id": 444229708,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1718197086
    },
    {
        "content": "<p>Does <code>split</code> split the <code>match</code>?</p>",
        "id": 444234400,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1718198161
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">95</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"n\">split</span>\n<span class=\"w\">  </span><span class=\"n\">all_goals</span><span class=\"w\"> </span><span class=\"n\">try</span><span class=\"w\"> </span><span class=\"n\">tauto</span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>works, but seems a bit clumsy. ( <code>split</code> leaves four goals.)</p>",
        "id": 444234752,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1718198251
    },
    {
        "content": "<p>Yeah I agree. What if you tag <code>foo</code> with simp?</p>",
        "id": 444234892,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1718198284
    },
    {
        "content": "<p><code>split</code> is also what <code>aesop</code> uses.</p>",
        "id": 444234900,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718198286
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/270676-lean4/topic/'simp'lifying.20'match'.20expressions/near/444234892\">said</a>:</p>\n<blockquote>\n<p>Yeah I agree. What if you tag <code>foo</code> with simp?</p>\n</blockquote>\n<p>That does not seem to change anything (except that I don't have to give <code>foo</code> explicitly to <code>simp</code>).</p>",
        "id": 444235097,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1718198350
    },
    {
        "content": "<p>I would say resolving <code>match</code> expressions may look like something a simproc could do.</p>\n<p>In any case, I find it a bit strange that <code>simp only [foo]</code> <em>does</em> work when <code>foo</code> is defined as <code>Fin 4 → Nat</code>.</p>",
        "id": 444238500,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1718199282
    },
    {
        "content": "<p>I know why. <code>ZMod</code> is a <code>def</code></p>",
        "id": 444242039,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1718200208
    },
    {
        "content": "<p>See this. I just redefined <code>ZMod</code> as it is in mathlib except it is now <code>reducible</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Data</span><span class=\"bp\">.</span><span class=\"n\">ZMod</span><span class=\"bp\">.</span><span class=\"n\">Defs</span>\n\n<span class=\"kn\">namespace</span><span class=\"w\"> </span><span class=\"n\">Play</span>\n<span class=\"kn\">abbrev</span><span class=\"w\"> </span><span class=\"n\">ZMod</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"kt\">Type</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">ℤ</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"kn\">abbrev</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ZMod</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"mi\">37</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"mi\">389</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"mi\">5077</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∃</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"n\">done</span>\n<span class=\"w\">  </span><span class=\"c\">/-</span><span class=\"cm\"> ⊢ ∃ n,37 =n</span>\n<span class=\"cm\">  -/</span>\n\n\n<span class=\"kn\">end</span><span class=\"w\"> </span><span class=\"n\">Play</span>\n</code></pre></div>",
        "id": 444242218,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1718200257
    },
    {
        "content": "<p>But <code>simp [foo, ZMod]</code> does not work either...</p>",
        "id": 444243326,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1718200585
    },
    {
        "content": "<p>Does it work if you use <code>Fin</code> instead of <code>Zmod</code>?</p>",
        "id": 444243543,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1718200643
    },
    {
        "content": "<p>Yes, as already mentioned.</p>",
        "id": 444243591,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1718200659
    },
    {
        "content": "<p>Sorry, I’m on mobile so I missed it</p>",
        "id": 444243938,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1718200752
    },
    {
        "content": "<p>You can also use <code>change foo (a : Fin _) = _</code> before the simp and it should (hopefully!) work</p>",
        "id": 444245102,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1718201043
    },
    {
        "content": "<p><del>simp has no occurrences of <code>ZMod</code> to rewrite I suppose</del></p>",
        "id": 444245134,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1718201046
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 444245167,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1718201054
    },
    {
        "content": "<p>That was not the case. Once the def of foo was unfolded, even if you had changed 2's type to Fin, it gets rewritten as ZMod.</p>",
        "id": 444245841,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1718201258
    },
    {
        "content": "<p>Add </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span><span class=\"w\"> </span><span class=\"n\">ZMod.instOfNat</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">OfNat</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ZMod</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">m</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">inferInstanceAs</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">OfNat</span><span class=\"w\"> </span><span class=\"n\">ℤ</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">inferInstanceAs</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">OfNat</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>to L105 of <a href=\"https://tqft.net/mathlib4files/Data/ZMod/Defs\">file#Data/ZMod/Defs</a></p>",
        "id": 444269587,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1718207255
    },
    {
        "content": "<p>OK, let me make a PR...</p>",
        "id": 444269786,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1718207306
    },
    {
        "content": "<p>I didn't check the resulting diamond though</p>",
        "id": 444270358,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1718207463
    },
    {
        "content": "<p>I'll see how it goes.</p>",
        "id": 444270451,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1718207486
    },
    {
        "content": "<p>This runs into problems:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Data</span><span class=\"bp\">.</span><span class=\"n\">ZMod</span><span class=\"bp\">.</span><span class=\"n\">Defs</span>\n\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"n\">ZMod</span><span class=\"bp\">.</span><span class=\"n\">instOfNat</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">AtLeastTwo</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">OfNat</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ZMod</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">inferInstance</span>\n</code></pre></div>\n<p>shows that there is (of course) another <code>OfNat</code> instance on <code>ZMod n</code>, and having both makes (perhaps among other problems) <code>ring</code>/<code>ring_nf</code> stop working on <code>ZMod n</code>. (And of course it violates the principle that instances should be \"morally unique\".)  But this other instance (which comes from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=instOfNatAtLeastTwo#doc\">docs#instOfNatAtLeastTwo</a>) does not help with reducing the <code>match</code>.</p>",
        "id": 444293799,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1718213916
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/270676-lean4/topic/'simp'lifying.20'match'.20expressions/near/444269587\">said</a>:</p>\n<blockquote>\n<p>Add </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span><span class=\"w\"> </span><span class=\"n\">ZMod.instOfNat</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">OfNat</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ZMod</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">m</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">inferInstanceAs</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">OfNat</span><span class=\"w\"> </span><span class=\"n\">ℤ</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">inferInstanceAs</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">OfNat</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>to L105 of <a href=\"https://tqft.net/mathlib4files/Data/ZMod/Defs\">file#Data/ZMod/Defs</a></p>\n</blockquote>\n<p><code>m</code> should not be part of the match here</p>",
        "id": 444361544,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718242641
    },
    {
        "content": "<p>0 should map to 11, right?</p>",
        "id": 444670703,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1718361564
    }
]