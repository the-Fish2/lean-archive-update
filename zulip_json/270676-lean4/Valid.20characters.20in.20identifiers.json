[
    {
        "content": "<p>I just tried to use the \"subscript minus\" character U+208B in a Lean variable name and discovered it was not valid.  Is there a list somewhere of what is valid and what is not?  And selfishly, would it be possible to add subscript minus/plus to that list?</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">u₁</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"c1\">-- works</span>\n<span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">₋</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"c1\">-- expected token</span>\n</code></pre></div>",
        "id": 443101791,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1717690382
    },
    {
        "content": "<p>Here's the full definition of what's accepted (minus rules about guillemets). The <code>isIdFirst</code> function is for the first character of an identifier, and <code>isIdRest</code> is for all the characters after that.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">isLetterLike</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Char</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Bool</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"n\">x3b1</span><span class=\"w\">  </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"bp\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x3c9</span><span class=\"w\"> </span><span class=\"bp\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"bp\">≠</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x3bb</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">||</span><span class=\"w\">                  </span><span class=\"c1\">-- Lower greek, but lambda</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"n\">x391</span><span class=\"w\">  </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"bp\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x3A9</span><span class=\"w\"> </span><span class=\"bp\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"bp\">≠</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x3A0</span><span class=\"w\"> </span><span class=\"bp\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"bp\">≠</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x3A3</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">||</span><span class=\"w\"> </span><span class=\"c1\">-- Upper greek, but Pi and Sigma</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"n\">x3ca</span><span class=\"w\">  </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"bp\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x3fb</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">||</span><span class=\"w\">                                   </span><span class=\"c1\">-- Coptic letters</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"n\">x1f00</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"bp\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x1ffe</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">||</span><span class=\"w\">                                  </span><span class=\"c1\">-- Polytonic Greek Extended Character Set</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"n\">x2100</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"bp\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x214f</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">||</span><span class=\"w\">                                  </span><span class=\"c1\">-- Letter like block</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"n\">x1d49c</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"bp\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x1d59f</span><span class=\"o\">)</span><span class=\"w\">                                   </span><span class=\"c1\">-- Latin letters, Script, Double-struck, Fractur</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">isNumericSubscript</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Char</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Bool</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"mi\">0</span><span class=\"n\">x2080</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"bp\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x2089</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">isSubScriptAlnum</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Char</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Bool</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"n\">isNumericSubscript</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"bp\">||</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"n\">x2090</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"bp\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x209c</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">||</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"n\">x1d62</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"bp\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x1d6a</span><span class=\"o\">)</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">isIdFirst</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Char</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Bool</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">isAlpha</span><span class=\"w\"> </span><span class=\"bp\">||</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"bp\">'_'</span><span class=\"w\"> </span><span class=\"bp\">||</span><span class=\"w\"> </span><span class=\"n\">isLetterLike</span><span class=\"w\"> </span><span class=\"n\">c</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">isIdRest</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Char</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Bool</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">isAlphanum</span><span class=\"w\"> </span><span class=\"bp\">||</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"bp\">'_'</span><span class=\"w\"> </span><span class=\"bp\">||</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"bp\">'\\''</span><span class=\"w\"> </span><span class=\"bp\">||</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"bp\">==</span><span class=\"w\"> </span><span class=\"bp\">'!'</span><span class=\"w\"> </span><span class=\"bp\">||</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"bp\">==</span><span class=\"w\"> </span><span class=\"bp\">'?'</span><span class=\"w\"> </span><span class=\"bp\">||</span><span class=\"w\"> </span><span class=\"n\">isLetterLike</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"bp\">||</span><span class=\"w\"> </span><span class=\"n\">isSubScriptAlnum</span><span class=\"w\"> </span><span class=\"n\">c</span>\n</code></pre></div>\n<p>(I think this code needs to be kept in sync with the C++ functions in <code>src/util/name.cpp</code>)</p>",
        "id": 443110281,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1717692612
    },
    {
        "content": "<p>A question regarding making subscript minus into an identifier is whether it's worth making it not be a postfix operator. People would have to write <code>u ₋</code> rather than <code>u₋</code>, just like <code>n !</code> instead of <code>n!</code> for factorial.</p>",
        "id": 443110792,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1717692777
    },
    {
        "content": "<p>I see. I <em>think</em> that mathematical practice would be much more likely to treat a subscript-minus as a name component than as an operator, but it's hard to know whether this impression is field-dependent. And maybe there are non-mathematician unicode users too ....</p>",
        "id": 443116118,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1717694309
    },
    {
        "content": "<p>Here's a previous question about subscripts and superscripts: <a href=\"#narrow/stream/113488-general/topic/add.20characters.20to.20lean.20core.3F/near/261235230\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/add.20characters.20to.20lean.20core.3F/near/261235230</a></p>",
        "id": 443120763,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1717695575
    },
    {
        "content": "<p>Ah: <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> says he can imagine use cases of <code>⁺</code> being an operator.  Floris, have you encountered this in \"real life\"?  The name-component usage definitely occurs (case at hand: section 2 <a href=\"https://perso.univ-rennes1.fr/sebastien.gouezel/articles/morse_lemma.pdf\">here</a>).</p>",
        "id": 443122694,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1717696194
    },
    {
        "content": "<p>We already have the superscripts as operators: <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Order/Group/PosPart.html#%C2%ABterm_%E2%81%BA%C2%BB\">«term_⁺»</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Order/Group/PosPart.html#%C2%ABterm_%E2%81%BB%C2%BB\">«term_⁻»</a>, although I really wish this was either <em>not</em> global notation, or else a notation class existed for these.</p>",
        "id": 443133274,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1717699117
    },
    {
        "content": "<p>This is clearly yet another notation that should not be global.</p>",
        "id": 443137155,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1717700237
    },
    {
        "content": "<p>I was indeed thinking about <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=posPart#doc\">docs#posPart</a> for that postfix notation. I'm fine with that notation being scoped (to the <code>Order</code> namespace?)</p>",
        "id": 443138088,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1717700521
    },
    {
        "content": "<p>Then again, <code>₂</code> could also be a postfix operator (for various things, including <code>Prod.snd</code>), and that is allowed in a valid identifier. But I prefer to keep <code>⁺</code> available for notation.</p>",
        "id": 443138635,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1717700683
    },
    {
        "content": "<p>Personally, I would prefer that the <code>posPart</code> notation was made into a class (and if preferred, instances could be scoped), as that way I can use it for C*-algebras. (This would cause diamonds if we had both instances available simultaneously, but only in certain contexts.)</p>",
        "id": 443143427,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1717702164
    },
    {
        "content": "<p>My intuition is that subscripts tend to be part of a term, but superscripts are operators. Is this a reasonable stance for lean to have?</p>",
        "id": 443143469,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1717702178
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/270676-lean4/topic/Valid.20characters.20in.20identifiers/near/443143427\">said</a>:</p>\n<blockquote>\n<p>Personally, I would prefer that the <code>posPart</code> notation was made into a class</p>\n</blockquote>\n<p>Actually there were originally a class with a single instance, so I deleted the class.</p>",
        "id": 443146709,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717703202
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/270676-lean4/topic/Valid.20characters.20in.20identifiers/near/443143427\">said</a>:</p>\n<blockquote>\n<p>that way I can use it for C*-algebras</p>\n</blockquote>\n<p>Can't you <em>already</em> use it for C*-algebras? Like, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=posPart#doc\">docs#posPart</a> is the correct notion, right?</p>",
        "id": 443147123,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717703321
    },
    {
        "content": "<p>It's not a lattice (not even the selfadjoint elements)</p>",
        "id": 443157275,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1717706470
    },
    {
        "content": "<p>I feel the default rules for what's accepted in identifiers should be based on XID_Start and XID_Continue in UAX # 31 (as updated for each new Unicode version), with Lean-specific changes only as needed, rather than having something heavily Lean-specific. That might or might not help with these specific issues, but it's the Unicode recommendation for identifiers in programming languages in general.</p>",
        "id": 443181904,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1717717581
    },
    {
        "content": "<p>Would that rule out many of the identifiers we already know and love? I am afraid the general consensus on this is probably pretty far from our traditions.</p>",
        "id": 443182850,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1717718272
    },
    {
        "content": "<p>I think characters already used in identifiers such as <code>'</code> count as \"as needed\", but it would probably add many reasonable identifier characters that no-one has got round to adding individually.</p>",
        "id": 443184108,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1717719134
    }
]