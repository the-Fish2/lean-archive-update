[
    {
        "content": "<p>hello! I've recently spent some time working on a prototype library that implements a sort of stream fusion for key-value data structures. The efficiency of the code depends quite a lot on inlining and specialization behavior, so I've been digging into generated code and made a few confusing observations. I intend to figure out as much as possible by exploring the compiler, but of course I would greatly appreciate any help navigating.</p>\n<p>[See code below; I'm happy to provide more background on what this program is meant to do, but this message is already rather long, and I suppose explaining the compiler behavior might not require digging into the program too much.]<br>\nThis example compares two stream fold functions which are the same, except for where they construct a subtype value (see lines marked \"HERE\").<br>\nAn example using the first (<code>t1</code>) is full inlined (all stream functions inlined to fold) whereas the second isn't.<br>\nThe mental model I've heard before is that subtypes don't exist at runtime, so this difference is surprising.<br>\nLooking at the trace from <code>trace.compiler.inline</code> shows an extra instance of inlining <code>Function.comp</code> in the latter which does not exist in the former.<br>\nIndeed, replacing the call to <code>∘</code> with a lambda eliminates the issue (both results are the same).<br>\nMy guess is that the Subtype might be a red herring, and actually lambda expressions just sometimes defeat inlining? I have another example where this seems to be the case. It is surprising nevertheless that <code>Function.comp</code> leads to such an issue.</p>\n<p>In this and more complex examples I have trouble tracing through what the compiler sees; any suggestions for other trace options to turn on for this investigation?</p>\n<p>other questions:</p>\n<p>1. Is it expected that replacing <code>inline</code> with <code>always_inline</code> reduces the amount of inlining that occurs? (try doing this anywhere in the code below). I took a quick look at <code>inlineCandidate?</code> and can't see why this is the case; maybe it has to do with how attributes are assigned to internally generated code?<br>\n  2. Even after specialization, the fold functions have more than two parameters (the rest of which are not referenced). For instance, in the examples here a stream is constructed and passed to <code>fold.go</code> even though <code>go</code> is parametrized to not even textually reference the stream! This leads to unnecessary allocations at run time. Is there a way to understand this and ensure that it doesn't happen?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">mwe</span>\n\n<span class=\"kd\">notation</span> <span class=\"s2\">\"ℕ\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat</span>\n\n<span class=\"c1\">-- This represents a streaming representation of an associative container</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Stream'</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"n\">valid</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n  <span class=\"n\">index</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">valid</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">ι</span>\n  <span class=\"n\">seek</span>  <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">valid</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">ι</span> <span class=\"bp\">×</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">σ</span>\n  <span class=\"n\">ready</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">valid</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n  <span class=\"n\">value</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">ready</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"c1\">-- stream plus a state</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Stream</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Stream'</span> <span class=\"n\">ι</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">σ</span>\n\n<span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"s2\">\" →ₛ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Stream</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">inline</span><span class=\"kd\">]</span> <span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">Stream.fold</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→ₛ</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"kd\">@[</span><span class=\"n\">specialize</span><span class=\"kd\">]</span> <span class=\"n\">go</span> <span class=\"o\">{</span><span class=\"n\">σ</span><span class=\"o\">}</span> <span class=\"n\">f</span>\n      <span class=\"o\">(</span><span class=\"n\">valid</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">index</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">valid</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">ι</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">seek</span>  <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">valid</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">ready</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">valid</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">valid</span> <span class=\"n\">x</span><span class=\"o\">})</span> <span class=\"bp\">→</span> <span class=\"n\">ready</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"c1\">-- HERE</span>\n      <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">acc</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">hv</span> <span class=\"o\">:</span> <span class=\"n\">valid</span> <span class=\"n\">q</span> <span class=\"k\">then</span>\n      <span class=\"k\">let</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">hv</span><span class=\"o\">⟩</span>\n      <span class=\"k\">let</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">index</span> <span class=\"n\">q</span>\n      <span class=\"k\">let</span> <span class=\"n\">hr</span> <span class=\"o\">:=</span> <span class=\"n\">ready</span> <span class=\"n\">q</span>\n      <span class=\"k\">let</span> <span class=\"n\">acc'</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">hr</span>\n        <span class=\"k\">then</span> <span class=\"n\">f</span> <span class=\"n\">acc</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"n\">q</span> <span class=\"n\">hr</span><span class=\"o\">)</span> <span class=\"c1\">-- HERE</span>\n        <span class=\"k\">else</span> <span class=\"n\">acc</span>\n      <span class=\"k\">let</span> <span class=\"n\">q'</span> <span class=\"o\">:=</span> <span class=\"n\">seek</span> <span class=\"n\">q</span> <span class=\"n\">i</span> <span class=\"n\">hr</span>\n      <span class=\"n\">go</span> <span class=\"n\">f</span> <span class=\"n\">valid</span> <span class=\"n\">index</span> <span class=\"n\">seek</span> <span class=\"n\">ready</span> <span class=\"n\">value</span> <span class=\"n\">q'</span> <span class=\"n\">acc'</span>\n    <span class=\"k\">else</span> <span class=\"n\">acc</span>\n  <span class=\"n\">go</span> <span class=\"n\">f</span> <span class=\"n\">s.valid</span> <span class=\"n\">s.index</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">q</span> <span class=\"n\">i</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s.seek</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"n\">s.ready</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s.value</span> <span class=\"o\">⟨</span><span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">⟩)</span>\n     <span class=\"n\">s.q</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">inline</span><span class=\"kd\">]</span> <span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">Stream.fold'</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→ₛ</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"kd\">@[</span><span class=\"n\">specialize</span><span class=\"kd\">]</span> <span class=\"n\">go</span> <span class=\"o\">{</span><span class=\"n\">σ</span><span class=\"o\">}</span> <span class=\"n\">f</span>\n        <span class=\"o\">(</span><span class=\"n\">valid</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"n\">index</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">valid</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">ι</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"n\">seek</span>  <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">valid</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"n\">ready</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">valid</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">ready</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"c1\">-- HERE</span>\n        <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">acc</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n      <span class=\"k\">if</span> <span class=\"n\">hv</span> <span class=\"o\">:</span> <span class=\"n\">valid</span> <span class=\"n\">q</span> <span class=\"k\">then</span>\n        <span class=\"k\">let</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">hv</span><span class=\"o\">⟩</span>\n        <span class=\"k\">let</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">index</span> <span class=\"n\">q</span>\n        <span class=\"k\">let</span> <span class=\"n\">hr</span> <span class=\"o\">:=</span> <span class=\"n\">ready</span> <span class=\"n\">q</span>\n        <span class=\"k\">let</span> <span class=\"n\">acc'</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">hr</span>\n          <span class=\"k\">then</span> <span class=\"n\">f</span> <span class=\"n\">acc</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">⟨</span><span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">hr</span><span class=\"o\">⟩)</span> <span class=\"c1\">-- HERE</span>\n          <span class=\"k\">else</span> <span class=\"n\">acc</span>\n        <span class=\"k\">let</span> <span class=\"n\">q'</span> <span class=\"o\">:=</span> <span class=\"n\">seek</span> <span class=\"n\">q</span> <span class=\"n\">i</span> <span class=\"n\">hr</span>\n        <span class=\"n\">go</span> <span class=\"n\">f</span> <span class=\"n\">valid</span> <span class=\"n\">index</span> <span class=\"n\">seek</span> <span class=\"n\">ready</span> <span class=\"n\">value</span> <span class=\"n\">q'</span> <span class=\"n\">acc'</span>\n    <span class=\"k\">else</span> <span class=\"n\">acc</span>\n  <span class=\"n\">go</span> <span class=\"n\">f</span> <span class=\"n\">s.valid</span> <span class=\"n\">s.index</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">q</span> <span class=\"n\">i</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s.seek</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"n\">s.ready</span> <span class=\"n\">s.value</span>  <span class=\"n\">s.q</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">inline</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">Stream.map</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→ₛ</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→ₛ</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"k\">with</span> <span class=\"n\">value</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">s.value</span> <span class=\"o\">}</span>\n<span class=\"c1\">-- @[inline] def Stream.map (f : α → β) (s : ι →ₛ α) : ι →ₛ β := { s with value := fun x =&gt; f (s.value x) } -- fixes demonstrated issue</span>\n\n<span class=\"c1\">-- example stream; traverse values from `lo` to `hi`</span>\n<span class=\"kd\">@[</span><span class=\"n\">inline</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">lo</span> <span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→ₛ</span> <span class=\"n\">Bool</span> <span class=\"n\">where</span>\n  <span class=\"n\">σ</span> <span class=\"o\">:=</span> <span class=\"n\">ℕ</span>\n  <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">lo</span>\n  <span class=\"n\">valid</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">q</span> <span class=\"bp\">&lt;</span> <span class=\"n\">hi</span>\n  <span class=\"n\">ready</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n  <span class=\"n\">index</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">q</span>\n  <span class=\"n\">value</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n  <span class=\"n\">seek</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">r</span> <span class=\"k\">then</span> <span class=\"k\">if</span> <span class=\"n\">q</span> <span class=\"bp\">≤</span> <span class=\"n\">j</span> <span class=\"k\">then</span> <span class=\"n\">q</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"n\">q</span>\n         <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">q</span> <span class=\"bp\">&lt;</span> <span class=\"n\">j</span> <span class=\"k\">then</span> <span class=\"n\">q</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"n\">q</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">inline</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">t1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"mi\">0</span> <span class=\"mi\">10</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">map</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fold</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"mi\">0</span>\n<span class=\"kd\">@[</span><span class=\"n\">inline</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">t2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"mi\">0</span> <span class=\"mi\">10</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">map</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fold'</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"mi\">0</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.compiler.stage2</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.compiler.inline</span> <span class=\"n\">true</span>\n<span class=\"c1\">-- This line demonstrates that all stream component functions have been inlined into fold:</span>\n<span class=\"kd\">example</span> <span class=\"o\">:=</span> <span class=\"n\">t1</span>\n<span class=\"c1\">-- However, calls to _x_2 and _x_7 are not inlined here; somehow Function.comp is the culprit</span>\n<span class=\"kd\">example</span> <span class=\"o\">:=</span> <span class=\"n\">t2</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- lower-level view of resulting code</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.compiler.ir.result</span> <span class=\"n\">true</span>\n<span class=\"kd\">example</span> <span class=\"o\">:=</span> <span class=\"n\">t1</span>\n<span class=\"kd\">example</span> <span class=\"o\">:=</span> <span class=\"n\">t2</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">mwe</span>\n</code></pre></div>",
        "id": 425427567,
        "sender_full_name": "Scott Kovach",
        "timestamp": 1709861435
    },
    {
        "content": "<p>I don’t know anything about the compiler but I can already tell you that somewhat strange things are expected. There is a new compiler planned (and already started) but it is currently not a priority. So bugs or counter-intuitive behavior in the old compiler won’t be worked on, but the proper fix won’t come soon, sorry.</p>",
        "id": 425428295,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709861989
    }
]