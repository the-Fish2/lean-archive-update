[
    {
        "content": "<p>I have a tiny reverse FFI example that works on Lean 4.7.0-rc2. However when I try to call the <code>lean_initialize_thread</code> function in the <a href=\"https://lean-lang.org/lean4/doc/dev/ffi.html\">FFI manual</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lean_initialize_thread</span><span class=\"o\">()</span><span class=\"bp\">;</span>\n</code></pre></div>\n<p>There is an error about undefined symbol:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"bp\">=</span> <span class=\"n\">note</span><span class=\"o\">:</span> <span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/</span><span class=\"n\">store</span><span class=\"bp\">/</span><span class=\"n\">p0p56gzz837fgmfd7lyisghcd7x2fdlc</span><span class=\"bp\">-</span><span class=\"n\">binutils</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">40</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">ld</span><span class=\"o\">:</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">aniva</span><span class=\"bp\">/</span><span class=\"n\">Projects</span><span class=\"bp\">/</span><span class=\"n\">examples</span><span class=\"bp\">/</span><span class=\"n\">rust</span><span class=\"bp\">-</span><span class=\"n\">call</span><span class=\"bp\">-</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">target</span><span class=\"bp\">/</span><span class=\"n\">debug</span><span class=\"bp\">/</span><span class=\"n\">deps</span><span class=\"bp\">/</span><span class=\"n\">caller</span><span class=\"bp\">-</span><span class=\"mi\">932217</span><span class=\"n\">f92f536a11.52zithdtfqc2z9d9.rcgu.o</span><span class=\"o\">:</span> <span class=\"k\">in</span> <span class=\"n\">function</span> <span class=\"bp\">`</span><span class=\"n\">caller</span><span class=\"o\">::</span><span class=\"n\">main'</span><span class=\"o\">:</span>\n          <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">aniva</span><span class=\"bp\">/</span><span class=\"n\">Projects</span><span class=\"bp\">/</span><span class=\"n\">examples</span><span class=\"bp\">/</span><span class=\"n\">rust</span><span class=\"bp\">-</span><span class=\"n\">call</span><span class=\"bp\">-</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">main.rs</span><span class=\"o\">:</span><span class=\"mi\">154</span><span class=\"o\">:</span> <span class=\"n\">undefined</span> <span class=\"n\">reference</span> <span class=\"n\">to</span> <span class=\"bp\">`</span><span class=\"n\">lean_initialize_thread'</span>\n          <span class=\"n\">clang</span><span class=\"bp\">-</span><span class=\"mi\">16</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">linker</span> <span class=\"n\">command</span> <span class=\"n\">failed</span> <span class=\"k\">with</span> <span class=\"n\">exit</span> <span class=\"n\">code</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">-</span><span class=\"n\">v</span> <span class=\"n\">to</span> <span class=\"n\">see</span> <span class=\"n\">invocation</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Without calling <code>lean_initialize_thread</code>, the whole example works with no problems.</p>\n<p>The <a href=\"https://github.com/leanprover/lean4/blob/master/src/lake/examples/reverse-ffi/Makefile\">Reverse FFI example</a> in the Lean repository calls for linking</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">OUT_DIR</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"n\">main</span><span class=\"o\">:</span> <span class=\"n\">main.c</span> <span class=\"n\">lake</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">OUT_DIR</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span> <span class=\"n\">Add</span> <span class=\"n\">library</span> <span class=\"n\">paths</span> <span class=\"n\">for</span> <span class=\"n\">Lake</span> <span class=\"n\">package</span> <span class=\"n\">and</span> <span class=\"n\">for</span> <span class=\"n\">Lean</span> <span class=\"n\">itself</span>\n    <span class=\"n\">cc</span> <span class=\"bp\">-</span><span class=\"n\">o</span> <span class=\"bp\">$@</span> <span class=\"bp\">$&lt;</span> <span class=\"bp\">-</span><span class=\"n\">I</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">LEAN_SYSROOT</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"kn\">include</span> <span class=\"bp\">-</span><span class=\"n\">L</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">LEAN_LIBDIR</span><span class=\"o\">)</span> <span class=\"bp\">-</span><span class=\"n\">L</span> <span class=\"n\">lib</span><span class=\"bp\">/.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span> <span class=\"bp\">-</span><span class=\"n\">lRFFI</span> <span class=\"bp\">-</span><span class=\"n\">lInit_shared</span> <span class=\"bp\">-</span><span class=\"n\">lleanshared</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">LINK_FLAGS</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and I currently have linker flags for <code>libInit_shared.so</code> and <code>libleanshared.so</code>. Is there anything I need to link against for this to work?</p>\n<p>I also tried linking with <code>libleanrt.a</code> and it still has the same issue</p>",
        "id": 426746246,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1710510110
    },
    {
        "content": "<p>The relevant linker flags are:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"s2\">\"-Wl,-Bdynamic\"</span> <span class=\"s2\">\"-lleanshared\"</span> <span class=\"s2\">\"-lInit_shared\"</span> <span class=\"s2\">\"-lCallee\"</span> <span class=\"s2\">\"-Wl,-Bstatic\"</span> <span class=\"s2\">\"-lleanrt\"</span>\n</code></pre></div>\n<p>There are no errors from the linker about missing libraries so all these libraries were found</p>",
        "id": 426747432,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1710510469
    },
    {
        "content": "<p>This symbol only exists on master/4.8.0</p>",
        "id": 426778589,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1710519791
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Reverse.20FFI.20undefined.20reference.20to.20symbol/near/426778589\">said</a>:</p>\n<blockquote>\n<p>This symbol only exists on master/4.8.0</p>\n</blockquote>\n<p>why is it in the FFI guide? is there an equivalent form of this symbol before 4.8.0?</p>",
        "id": 426787232,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1710522499
    },
    {
        "content": "<p>I'd assume the docs follow the latest <code>master</code>.</p>\n<p>Do you find what your looking for at <a href=\"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/doc/dev/ffi.md\">this older version of the guide (v4.7.0-rc2)</a></p>",
        "id": 426789775,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1710523313
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"385895\">Jon Eugster</span> <a href=\"#narrow/stream/270676-lean4/topic/Reverse.20FFI.20undefined.20reference.20to.20symbol/near/426789775\">said</a>:</p>\n<blockquote>\n<p>I'd assume the docs follow the latest <code>master</code>.</p>\n<p>Do you find what your looking for at <a href=\"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/doc/dev/ffi.md\">this older version of the guide (v4.7.0-rc2)</a></p>\n</blockquote>\n<p>There is no mention of calling Lean from multiple threads, and when I try to do it Lean segfaults</p>",
        "id": 426798765,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1710526711
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"599027\">@Leni Aniva</span> yes, calling Lean from multiple threads in reverse FFI is a newly supported feature in master/4.8.0 with those new functions (e.g., <code>lean_initialize_thread</code>). It was added in <a href=\"https://github.com/leanprover/lean4/pull/3632\">lean4#3632</a>.</p>",
        "id": 426925047,
        "sender_full_name": "Mac Malone",
        "timestamp": 1710626460
    }
]