[
    {
        "content": "<p>What do you think the following code does? :)</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Qq</span>\n\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"w\"> </span><span class=\"n\">Qq</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">etaNatQ</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">MetaM</span><span class=\"w\"> </span><span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">eta</span>\n<span class=\"w\">  </span><span class=\"n\">logInfo</span><span class=\"w\"> </span><span class=\"n\">m!</span><span class=\"s2\">\"{a}\"</span>\n<span class=\"w\">  </span><span class=\"n\">return</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"n\">eval</span><span class=\"w\"> </span><span class=\"n\">etaNatQ</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 445958500,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1718919869
    },
    {
        "content": "<p>Is this a hygiene issue in Qq?</p>",
        "id": 445961132,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1718921185
    },
    {
        "content": "<p>This is <a href=\"https://github.com/leanprover-community/quote4/pull/11\">https://github.com/leanprover-community/quote4/pull/11</a> I think</p>",
        "id": 445961164,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718921207
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>The <code>let a</code> is of type <code>Expr</code> so is not visible in the context of <code>q($a)</code>, and so the original <code>a</code> is unshadowed</p>\n</div></div>",
        "id": 445961297,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718921255
    },
    {
        "content": "<p>Ah, nice! I checked the issues, but not the PRs...</p>",
        "id": 445961452,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1718921301
    },
    {
        "content": "<p>I think maybe the thing to do here is copy how <code> `() </code> quotes work</p>",
        "id": 445962110,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718921486
    },
    {
        "content": "<p>That is, they just show the whole context:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Term</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">MetaM</span><span class=\"w\"> </span><span class=\"n\">Term</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">id</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">i</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and produce a type error on bad variables</p>",
        "id": 445962174,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718921505
    },
    {
        "content": "<p>But I guess then you lose the niceness of the <code>Q()</code> wrappers going away</p>",
        "id": 445962268,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718921530
    }
]