[
    {
        "content": "<p>When using <code>aesop?</code> (and when <code>aesop?</code> successfully finds a proof), I observed the proof script in the infoview having a weird format. Specially there are multiple unexpected new lines &amp; indentations (see screenshot below for a minimal example). </p>\n<p><a href=\"/user_uploads/3121/vCipxyLe2D78dKtwbFTWfkob/aesop_format_issue.png\">aesop_format_issue.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/vCipxyLe2D78dKtwbFTWfkob/aesop_format_issue.png\" title=\"aesop_format_issue.png\"><img src=\"/user_uploads/3121/vCipxyLe2D78dKtwbFTWfkob/aesop_format_issue.png\"></a></div><p>FYI I tried aesop versions at commits <code>056ca0fa8f5585539d0b940f532d9750c3a2270f</code> (which supports Lean v4.7.0-rc1) and <code>ca8e6e3244120cd1137705552b72446be3cd0824</code> (latest commit, which supports Lean v4.7.0-rc2). The above issue appeared on both. I feel this may look like a potential bug? Gently ping <span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> who is the author of aesop :)</p>",
        "id": 430927508,
        "sender_full_name": "Peiyang Song",
        "timestamp": 1712125682
    },
    {
        "content": "<p>I have found this too. In particular <code>rename_i</code> messes up badly with some arguments on a new line so interpreted as tactic calls (hence errors).</p>",
        "id": 430931694,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1712127651
    },
    {
        "content": "<p>Don't put MWEs in screenshots</p>",
        "id": 430942511,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712131817
    },
    {
        "content": "<p>Thank you for the tip. Here is a typed MWE.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Aesop</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">PEmpty.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">aesop</span><span class=\"bp\">?</span>\n</code></pre></div>",
        "id": 430945307,
        "sender_full_name": "Peiyang Song",
        "timestamp": 1712132643
    },
    {
        "content": "<p>I wonder if this is the formatter being optimised for some weird width</p>",
        "id": 430971294,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1712140204
    },
    {
        "content": "<p>The mis-indentation of the first tactic in the infoview is a known bug. I tried fairly hard to fix it but didn't manage, so I'm not inclined to put more work into this. Relevant code is <a href=\"https://github.com/leanprover-community/aesop/blob/5fefb40a7c9038a7150e7edd92e43b1b94c49e79/Aesop/Util/Basic.lean#L297\">here</a> in case someone wants to take a look.</p>",
        "id": 431114921,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1712156688
    },
    {
        "content": "<p>The linebreaks look like intended behaviour of the formatter, but they probably hurt more than they help. Maybe I can direct the formatter to use a very large line width to get around this.</p>",
        "id": 431114940,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1712156694
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"266304\">Siddhartha Gadgil</span> <a href=\"#narrow/stream/270676-lean4/topic/Aesop.20script.20.28.60aesop.3F.60.29.20formatting.20issue/near/430931694\">said</a>:</p>\n<blockquote>\n<p>I have found this too. In particular <code>rename_i</code> messes up badly with some arguments on a new line so interpreted as tactic calls (hence errors).</p>\n</blockquote>\n<p>This is very bad since it's not just a cosmetic issue. Could you give me an MWE for this (doesn't need to be super minimal)?</p>",
        "id": 431115147,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1712156749
    },
    {
        "content": "<p>(I'm on holiday for a week, so won't be super quick to fix these issues, but they're going on the list.)</p>",
        "id": 431115250,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1712156771
    },
    {
        "content": "<p>I see! Thank you very much Jannis for the detailed information!</p>",
        "id": 431135792,
        "sender_full_name": "Peiyang Song",
        "timestamp": 1712162969
    },
    {
        "content": "<blockquote>\n<p>This is very bad since it's not just a cosmetic issue. Could you give me an MWE for this (doesn't need to be super minimal)?</p>\n</blockquote>\n<p>I just tried some random thing and got lucky first time:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">7</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">aesop</span><span class=\"bp\">?</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">Try this:</span>\n<span class=\"cm\">    apply</span>\n<span class=\"cm\">    h2</span>\n<span class=\"cm\">  apply</span>\n<span class=\"cm\">    h</span>\n<span class=\"cm\">  simp_all only</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>If I click on the blue output in the infoview then it doesn't compile because of the wacky newlines/spacing (the first <code>apply</code> is indented too much). Edit: oh, sorry, is this the \"first tactic misaligned\" bug, not the more complicated one?</p>",
        "id": 431163445,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1712173522
    },
    {
        "content": "<p>I recently had a similar problem with formatting (multiple lines, renaming, indentation) where it also suggested some ‘unhygenic’ stuff. Is the desired approach for Mathlib to just write Aesop and forget about it, or to find a way to get rid of the ‘unhygenic’ stuff manually? (I’m assuming we don’t want ‘unhygenic’ in Mathlib?). I’m not near Mathlib now, could try to reproduce this issue tomorrow if wanted.</p>",
        "id": 431168959,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1712175504
    },
    {
        "content": "<p>In the past I've used Aesop when developing, then used Aesop? and then manually tidied up the output when PRing.</p>",
        "id": 431178790,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1712179397
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span> <a href=\"#narrow/stream/270676-lean4/topic/Aesop.20script.20.28.60aesop.3F.60.29.20formatting.20issue/near/431115147\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"266304\">Siddhartha Gadgil</span> <a href=\"#narrow/stream/270676-lean4/topic/Aesop.20script.20.28.60aesop.3F.60.29.20formatting.20issue/near/430931694\">said</a>:</p>\n<blockquote>\n<p>I have found this too. In particular <code>rename_i</code> messes up badly with some arguments on a new line so interpreted as tactic calls (hence errors).</p>\n</blockquote>\n<p>This is very bad since it's not just a cosmetic issue. Could you give me an MWE for this (doesn't need to be super minimal)?</p>\n</blockquote>\n<p>There seems to be a short MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}[</span><span class=\"n\">LinearOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">)(</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">l₁</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">l₂</span> <span class=\"bp\">↔</span>\n  <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">l₁</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">l₂</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop</span><span class=\"bp\">?</span>\n</code></pre></div>",
        "id": 431273524,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1712224582
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> In the above the arguments of <code>rename_i</code> overflow the end, go to the next line and give errors.</p>",
        "id": 431273683,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1712224625
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"601076\">Peiyang Song</span> <a href=\"#narrow/stream/270676-lean4/topic/Aesop.20script.20.28.60aesop.3F.60.29.20formatting.20issue/near/430945307\">said</a>:</p>\n<blockquote>\n<p>Thank you for the tip. Here is a typed MWE.</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Aesop</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">PEmpty.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">aesop</span><span class=\"bp\">?</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>For me, the given example is also a failure.</p>",
        "id": 431273861,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712224652
    },
    {
        "content": "<p>This specific case could be resolved simply by \"unindenting\" the first <code>have</code>.</p>",
        "id": 431274393,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712224738
    },
    {
        "content": "<p>That resolves the syntax errors.  Even then, \"pretty\" printing is still far...</p>",
        "id": 431274768,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712224802
    },
    {
        "content": "<p>I finally fixed this, sorry for the delay. <code>aesop?</code> should be usable again once Mathlib updates to the current version. Turns out I was passing the wrong arguments to the pretty-printer, so it was using a very small line width.</p>",
        "id": 440888089,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1716827804
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/13303\">#13303</a> is the Mathlib bump</p>",
        "id": 440998514,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716888119
    }
]