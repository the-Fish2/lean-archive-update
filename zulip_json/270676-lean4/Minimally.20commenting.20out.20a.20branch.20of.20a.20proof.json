[
    {
        "content": "<p>If I put a <code>sorry</code> at the beginning of a block of a proof, any following tactic statements produce errors.  Is there a variant of <code>sorry</code> that would be silent, to allow quickly commenting out a branch (in particular to save time during proving)?</p>\n<p>Example that I would like to work</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">simple</span> <span class=\"o\">:</span> <span class=\"mi\">7</span> <span class=\"bp\">=</span> <span class=\"mi\">7</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">sorryVariant</span>\n  <span class=\"n\">norm_num</span>  <span class=\"c1\">-- I'd like this not to produce an error</span>\n</code></pre></div>",
        "id": 410864364,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1704210074
    },
    {
        "content": "<p>In Lean 3 you could do <code>sorry { tac1, tac2 }</code>. We should get that to work again.</p>",
        "id": 410864698,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1704210221
    },
    {
        "content": "<p>Having to add the <code>{ }</code> doesn't look as nice alongside Lean 4's indentation style, though.</p>",
        "id": 410864796,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1704210254
    },
    {
        "content": "<p>Use <code>stop</code> instead</p>",
        "id": 410865255,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1704210477
    },
    {
        "content": "<p>Perfect, terrific that it already exists!</p>",
        "id": 410865575,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1704210608
    },
    {
        "content": "<p>I didn't know either, and the implementation looks like a miraculous hack to me.</p>",
        "id": 410866440,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1704210968
    },
    {
        "content": "<p>But it makes sense when you think of it.</p>",
        "id": 410866604,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1704211055
    },
    {
        "content": "<p>The miracle clears up with <a href=\"https://github.com/leanprover/std4/blob/main/Std/Linter/UnreachableTactic.lean#L35-L38\">https://github.com/leanprover/std4/blob/main/Std/Linter/UnreachableTactic.lean#L35-L38</a>. This stop tactic is actually special-cased by the unreachable tactic linter.</p>",
        "id": 410866846,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1704211190
    },
    {
        "content": "<p>Now it completely makes sense.</p>",
        "id": 410866923,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1704211209
    },
    {
        "content": "<p>For people who are curious but not curious enough to track it down, the implementation of <code>stop</code> is in core Lean, it says:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"stop\"</span> <span class=\"n\">tacticSeq</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">repeat</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 410867141,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1704211303
    },
    {
        "content": "<p>So <code>stop</code> consumes a sequence of tactics (this is the <code>tacticSeq</code>) so the parser eats up every following tactics (without triggering the unreachable tactic linter, this was the confusing part until I looked at the linter implementation) and replaces them with <code>repeat sorry</code>.</p>",
        "id": 410867511,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1704211409
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"221921\">@Marc Huisinga</span>  It would be nice to get <code>stop</code> syntax-highlighted the same way <code>sorry</code> is.</p>",
        "id": 410867961,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1704211544
    },
    {
        "content": "<p><code>stop</code> is already marked as <code>leanSorryLike</code> semantically <a href=\"https://github.com/leanprover/lean4/blob/cc1dcf804359276f0f7e8a673c04b2a2b7d69951/src/Lean/Server/FileWorker/RequestHandling.lean#L424\">https://github.com/leanprover/lean4/blob/cc1dcf804359276f0f7e8a673c04b2a2b7d69951/src/Lean/Server/FileWorker/RequestHandling.lean#L424</a>. So I have </p>\n<div class=\"codehilite\" data-code-language=\"JSON\"><pre><span></span><code><span class=\"w\">    </span><span class=\"nt\">\"editor.semanticTokenColorCustomizations\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nt\">\"enabled\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nt\">\"rules\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"nt\">\"leanSorryLike\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"#FF0000\"</span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"p\">},</span>\n</code></pre></div>\n<p>in my vscode settings to acheive this</p>",
        "id": 410869661,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1704212330
    },
    {
        "content": "<p>And indeed it works!</p>",
        "id": 410870199,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1704212584
    },
    {
        "content": "<p>Hmm, it doesn't work like I was hoping, though.  If I do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">simple</span> <span class=\"o\">:</span> <span class=\"mi\">7</span> <span class=\"bp\">=</span> <span class=\"mi\">7</span> <span class=\"bp\">∧</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">stop</span>\n  <span class=\"bp\">·</span>\n</code></pre></div>\n<p>and put my cursor after the second <code>·</code>, it says <code>No goals</code>.  Though it also says</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unsolved</span> <span class=\"n\">goals</span>\n<span class=\"n\">case</span> <span class=\"n\">right</span>\n<span class=\"bp\">⊢</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span>\n</code></pre></div>",
        "id": 410876049,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1704215033
    },
    {
        "content": "<p>Maybe a better implementation would be <code>macro \"stop\" (colGe tacticSeq)? : tactic =&gt; `(tactic| repeat sorry)</code>? <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span></p>",
        "id": 410877096,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1704215370
    },
    {
        "content": "<p>I think you'd need to use sorry for that example? but stop if there are other following tactics indeed</p>",
        "id": 410877393,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1704215515
    },
    {
        "content": "<p>Hmm, so stop requires a nonzero number of following tactics?</p>",
        "id": 410877493,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1704215550
    },
    {
        "content": "<p>Well it always eats a tacticSeq, which could be empty, but in this case I think it's matching your second <code>.</code> as the following tacticSeq, which Patrick's version should avoid</p>",
        "id": 410877947,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1704215768
    },
    {
        "content": "<p>That's a little odd. <code>stop; done</code> works as intended</p>",
        "id": 410877980,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1704215782
    }
]