[
    {
        "content": "<p>Is there a way to check whether two <code>Expr</code>s are equal up to renaming of mvars? So something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">TermElabM</span> <span class=\"n\">Unit</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">comm₁</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">forallMetaTelescope</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Nat.add_comm</span><span class=\"o\">))</span> <span class=\"n\">none</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">comm₂</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">forallMetaTelescope</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Nat.add_comm</span><span class=\"o\">))</span> <span class=\"n\">none</span>\n  <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"n\">equalUpToMVars</span> <span class=\"n\">comm₁</span> <span class=\"n\">comm₂</span> <span class=\"c1\">-- prints true</span>\n</code></pre></div>",
        "id": 438107907,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1715432414
    },
    {
        "content": "<p>In the implementation of type class resolution, type class goals are stored in a HashMap up to metavariable renaming. They use the function <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.SynthInstance.mkTableKey#doc\">docs#Lean.Meta.SynthInstance.mkTableKey</a> to rename the metavariables. So this should do the job:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span> <span class=\"n\">SynthInstance</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">TermElabM</span> <span class=\"n\">Unit</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">comm₁</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">forallMetaTelescope</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Nat.add_comm</span><span class=\"o\">))</span> <span class=\"n\">none</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">comm₂</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">forallMetaTelescope</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Nat.add_comm</span><span class=\"o\">))</span> <span class=\"n\">none</span>\n  <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkTableKey</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"n\">comm₁</span><span class=\"o\">))</span> <span class=\"bp\">==</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkTableKey</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"n\">comm₂</span><span class=\"o\">))</span> <span class=\"c1\">-- prints true</span>\n</code></pre></div>",
        "id": 438113711,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1715438448
    },
    {
        "content": "<p>Wow, that is not the answer I was expecting <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span> Thanks!</p>",
        "id": 438114908,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1715439732
    },
    {
        "content": "<p>I'd be wary of making use of APIs like this not for their intended purpose.</p>\n<p>By the way, this does not check that the mvars can be permuted. For example, this prints <code>true</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">TermElabM</span> <span class=\"n\">Unit</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">comm₁</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)))</span> <span class=\"n\">none</span>\n  <span class=\"k\">let</span> <span class=\"n\">comm₂</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)))</span> <span class=\"n\">none</span>\n  <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkTableKey</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"n\">comm₁</span><span class=\"o\">))</span> <span class=\"bp\">==</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkTableKey</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"n\">comm₂</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 438119511,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715444919
    },
    {
        "content": "<p>Another function you could use is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.abstractMVars#doc\">docs#Lean.Meta.abstractMVars</a> and then check that the results are <code>==</code>.</p>",
        "id": 438119630,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715445066
    }
]