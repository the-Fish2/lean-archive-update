[
    {
        "content": "<p>In this file I see 2 type errors that I cannot understand. Would appreciate any help</p>\n<p><a href=\"https://live.lean-lang.org/#code=class%20Queue%20%28%CE%B1%20%3A%20outParam%20%28Type%29%29%20%28%CE%B3%20%3A%20Type%29%20where%0A%20%20empty%20%3A%20%CE%B3%0A%20%20enqueue%3A%20%CE%B3%20%E2%86%92%20%CE%B1%20%E2%86%92%20%CE%B3%0A%20%20dequeue%20%3A%20%CE%B3%20%E2%86%92%20Option%20%28%CE%B3%20%C3%97%20%CE%B1%29%0A%0A%20%20dequeue_empty%20%3A%20dequeue%20empty%20%3D%20none%0A%20%20dequeue_none%20%3A%20dequeue%20q%20%3D%20none%20%E2%86%92%20q%20%3D%20empty%0A%0A%20%20dequeue_enqueue%20%3A%0A%20%20%20%20dequeue%20%28enqueue%20q%20x%29%20%3D%20some%20%28match%20dequeue%20q%20with%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20none%20%3D%3E%20%28empty%2C%20x%29%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20some%20%28q'%2C%20y%29%20%3D%3E%20%28enqueue%20q'%20x%2C%20y%29%29%0A%0Anamespace%20ListQueue%0A%0Aabbrev%20empty%20%3A%20List%20%CE%B1%20%3A%3D%20%5B%5D%0A%0Adef%20enqueue%20%28q%20%3A%20List%20%CE%B1%29%20%28x%20%3A%20%CE%B1%29%20%3A%20List%20%CE%B1%20%3A%3D%20List.cons%20x%20q%0A%0Adef%20dequeue%20%3A%20List%20%CE%B1%20%E2%86%92%20Option%20%28List%20%CE%B1%20%C3%97%20%CE%B1%29%0A%20%20%7C%20%5B%5D%20%3D%3E%20none%0A%20%20%7C%20x%20%3A%3A%20q%20%3D%3E%0A%20%20%20%20match%20dequeue%20q%20with%0A%20%20%20%20%7C%20none%20%3D%3E%20some%20%28%5B%5D%2C%20x%29%0A%20%20%20%20%7C%20some%20%28q'%2C%20y%29%20%3D%3E%20some%20%28x%20%3A%3A%20q'%2C%20y%29%0A%0Adef%20dequeue_empty%20%3A%20%40dequeue%20%CE%B1%20empty%20%3D%20none%20%3A%3D%20by%20rfl%0A%0Adef%20dequeue_none%20%3A%20dequeue%20q%20%3D%20none%20%E2%86%92%20q%20%3D%20empty%20%3A%3D%20by%0A%20%20%20%20cases%20q%20%3C%3B%3E%20simp%20%5Bdequeue%5D%20%3C%3B%3E%20%28try%20split%29%20%3C%3B%3E%20simp%0A%0A--%20This%20is%20what%20I%20would%20write%20but%20doesn't%20compile%3A%0Adef%20dequeue_enqueue'%20%3A%20%0A%20%20%20%20dequeue%20%28enqueue%20q%20x%29%20%3D%20some%20%28match%20dequeue%20q%20with%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20none%20%3D%3E%20%28empty%2C%20x%29%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20some%20%28q'%2C%20y%29%20%3D%3E%20%28enqueue%20q'%20x%2C%20y%29%29%20%3A%3D%20sorry%0A%0A--%20As%20a%20workaround%20I%20make%20the%20type%20variable%20explicit%3A%0Adef%20dequeue_enqueue%20%3A%20%0A%20%20%20%20%40dequeue%20%CE%B1%20%28enqueue%20q%20x%29%20%3D%20some%20%28match%20dequeue%20q%20with%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20none%20%3D%3E%20%28empty%2C%20x%29%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20some%20%28q'%2C%20y%29%20%3D%3E%20%28enqueue%20q'%20x%2C%20y%29%29%20%3A%3D%20by%0A%20%20split%20%3C%3B%3E%20rename_i%20h%0A%20%20%C2%B7%20cases%20q%0A%20%20%20%20%C2%B7%20simp%20%5Bdequeue%5D%0A%20%20%20%20%C2%B7%20simp%20%5Bdequeue%5D%20at%20h%0A%20%20%20%20%20%20split%20at%20h%20%3C%3B%3E%20contradiction%0A%20%20%C2%B7%20simp%20%5Bdequeue%2C%20enqueue%2C%20h%5D%0A%0Ainstance%20%28%CE%B1%20%3A%20Type%29%20%3A%20Queue%20%CE%B1%20%28List%20%CE%B1%29%20where%0A%20%20empty%20%3A%3D%20empty%0A%20%20enqueue%20%3A%3D%20enqueue%0A%20%20dequeue%20%3A%3D%20dequeue%0A%20%20dequeue_empty%20%3A%3D%20dequeue_empty%0A%20%20dequeue_none%20%3A%3D%20dequeue_none%0A%20%20dequeue_enqueue%20%3A%3D%20dequeue_enqueue%20--%20Compiler%20says%20type%20mismatch%20but%20they%20look%20the%20same%20to%20me%0A%0Aend%20ListQueue\">live.lean-lang.org</a></p>",
        "id": 443515423,
        "sender_full_name": "Francisco Giordano",
        "timestamp": 1717876161
    },
    {
        "content": "<p>The error message is:</p>\n<blockquote>\n<p>invalid match-expression, pattern contains metavariables<br>\n  none</p>\n</blockquote>\n<p>Lean uses metavariables for types it could not (yet) infer, so in this error message indicates, that Lean wasn't able to figure out the type of all your variables. You can fix this by specifying the type of <code>q</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">class</span><span class=\"w\"> </span><span class=\"n\">Queue</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">outParam</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kt\">Type</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">γ</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">empty</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">γ</span>\n<span class=\"w\">  </span><span class=\"n\">enqueue</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">γ</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">γ</span>\n<span class=\"w\">  </span><span class=\"n\">dequeue</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">γ</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Option</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">γ</span><span class=\"w\"> </span><span class=\"bp\">×</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"w\">  </span><span class=\"n\">dequeue_empty</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">dequeue</span><span class=\"w\"> </span><span class=\"n\">empty</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">none</span>\n<span class=\"w\">  </span><span class=\"n\">dequeue_none</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">dequeue</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">none</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">empty</span>\n\n<span class=\"w\">  </span><span class=\"n\">dequeue_enqueue</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"n\">dequeue</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">enqueue</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">dequeue</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">                                   </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">none</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">empty</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"w\">                                   </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">q'</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">enqueue</span><span class=\"w\"> </span><span class=\"n\">q'</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">))</span>\n\n<span class=\"kn\">namespace</span><span class=\"w\"> </span><span class=\"n\">ListQueue</span>\n\n<span class=\"kn\">abbrev</span><span class=\"w\"> </span><span class=\"n\">empty</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">[]</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">enqueue</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"bp\">.</span><span class=\"n\">cons</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">q</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">dequeue</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Option</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">×</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">none</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">dequeue</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">    </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">none</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"o\">([],</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">q'</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">q'</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">dequeue_empty</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">dequeue</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">empty</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">none</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">rfl</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">dequeue_none</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">dequeue</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">none</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">empty</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">    </span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"bp\">&lt;;&gt;</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">dequeue</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">&lt;;&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">try</span><span class=\"w\"> </span><span class=\"n\">split</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">&lt;;&gt;</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n\n<span class=\"c1\">-- This is what I would write but doesn't compile:</span>\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">dequeue_enqueue'</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"n\">dequeue</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">enqueue</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">dequeue</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">                                   </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">none</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">empty</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"w\">                                   </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">q'</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">enqueue</span><span class=\"w\"> </span><span class=\"n\">q'</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 443518764,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1717878304
    },
    {
        "content": "<p>You can also use <code>variable</code> to specify the type of <code>q</code> for the whole section</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">namespace</span><span class=\"w\"> </span><span class=\"n\">ListQueue</span>\n\n<span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"kn\">abbrev</span><span class=\"w\"> </span><span class=\"n\">empty</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">[]</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">enqueue</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"bp\">.</span><span class=\"n\">cons</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">q</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">dequeue</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Option</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">×</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">none</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">dequeue</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">    </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">none</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"o\">([],</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">q'</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">q'</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">dequeue_empty</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">dequeue</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">empty</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">none</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">rfl</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">dequeue_none</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">dequeue</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">none</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">empty</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">    </span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"bp\">&lt;;&gt;</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">dequeue</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">&lt;;&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">try</span><span class=\"w\"> </span><span class=\"n\">split</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">&lt;;&gt;</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n\n<span class=\"c1\">-- This is what I would write but doesn't compile:</span>\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">dequeue_enqueue'</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"n\">dequeue</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">enqueue</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">dequeue</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">                                   </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">none</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">empty</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"w\">                                   </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">q'</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">enqueue</span><span class=\"w\"> </span><span class=\"n\">q'</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 443518938,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1717878396
    },
    {
        "content": "<p>I see. So I understand why in the <code>none</code> branch it is not able to infer a type for <code>q</code>, because there is nothing constraining it, but I'd expect the inference be completed by the <code>some</code> branch.</p>\n<p>The other thing that is confusing to me is that the same expression seems to be inferred correctly in the class method declaration</p>",
        "id": 443524273,
        "sender_full_name": "Francisco Giordano",
        "timestamp": 1717881704
    },
    {
        "content": "<p>If you hover over the terms you can see which types Lean is able to figure out and which not. In the class, lean is able to figure out that <code>q</code> is <code>γ</code> and all is well. In the theorem, Lean is able to figure out that <code>q</code> is a <code>List</code>, but it cannot figure out of what that list may contain, so it is stuck with <code>List ?m.2019</code>with the meta variable <code>?m.2019</code>. The error is then caused by <code>match</code> which doesn't want to deal with a type with unresolved meta variables.</p>",
        "id": 443854454,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1718050111
    },
    {
        "content": "<p>Oh this makes total sense to me now. Thanks!</p>",
        "id": 443875688,
        "sender_full_name": "Francisco Giordano",
        "timestamp": 1718059169
    }
]