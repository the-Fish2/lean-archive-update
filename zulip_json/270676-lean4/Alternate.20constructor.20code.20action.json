[
    {
        "content": "<p>Kevin highlighted this very nice PR <a href=\"https://github.com/leanprover/std4/pull/577\">https://github.com/leanprover/std4/pull/577</a> to me earlier this morning. It makes me wonder if we could ask for even more!</p>\n<p>There are various places in Mathlib where we have multiple constructors available for a given structure and it would be lovely if the \"generate skeleton\" code action could offer the user a choice in such cases.</p>",
        "id": 419435381,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1706872145
    },
    {
        "content": "<p>So for example in this situation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Group</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 419436113,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1706872433
    },
    {
        "content": "<p>The code action would provide a little menu allowing me to choose to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Group.ofLeftAxioms#doc\">docs#Group.ofLeftAxioms</a> and leaving me in the new state:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Group</span> <span class=\"n\">H</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Group.ofLeftAxioms</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 419436237,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1706872467
    },
    {
        "content": "<p>Any thoughts <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> ?</p>",
        "id": 419436278,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1706872480
    },
    {
        "content": "<p>PSA: don't be afraid to ask for features in this regard! The behavior Kevin <a href=\"#narrow/stream/113489-new-members/topic/A.20simple.20equivalence.20between.20topological.20vector.20spaces/near/419287273\">highlighted</a> is easily solved, the main question is determining what users want in the first place</p>",
        "id": 419437140,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706872792
    },
    {
        "content": "<p>To implement this, we would need some tagging system for \"smart constructors\"</p>",
        "id": 419437362,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706872869
    },
    {
        "content": "<p><code>@[constructor]</code>?</p>",
        "id": 419437390,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1706872881
    },
    {
        "content": "<p>would it work on non-structures?</p>",
        "id": 419437570,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706872945
    },
    {
        "content": "<p>another observation is that we might want to phase out smart constructors in favor of something more like haskell's minimal sets in the future, in which case you wouldn't even need to mention <code>ofLeftAxioms</code> by name</p>",
        "id": 419437807,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706873038
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Alternate.20constructor.20code.20action/near/419437570\">said</a>:</p>\n<blockquote>\n<p>would it work on non-structures?</p>\n</blockquote>\n<p>I don't think I get this point: to me Lean has only three things, <code>def</code>, <code>structure</code>, <code>theorem</code>.</p>",
        "id": 419437926,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1706873067
    },
    {
        "content": "<p>right, so would it work on <code>def</code>s</p>",
        "id": 419437983,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706873091
    },
    {
        "content": "<p>I think it would be better (performance-wise) if the answer was 'no'</p>",
        "id": 419438090,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706873143
    },
    {
        "content": "<p>I say no, but I might change my mind if someone comes up with an example where this would be desirable.</p>",
        "id": 419438101,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1706873149
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Alternate.20constructor.20code.20action/near/419437807\">said</a>:</p>\n<blockquote>\n<p>another observation is that we might want to phase out smart constructors in favor of something more like haskell's minimal sets in the future, in which case you wouldn't even need to mention <code>ofLeftAxioms</code> by name</p>\n</blockquote>\n<p>what would this do?</p>",
        "id": 419438344,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1706873243
    },
    {
        "content": "<p>I think we might want to have a more extensible notion of what a 'structure' is in the future, such that structure instances and the like work even though they aren't literally inductive types implemented by the <code>structure</code> command</p>",
        "id": 419438352,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706873247
    },
    {
        "content": "<p>for example, coinductive types really need this to be usable</p>",
        "id": 419438381,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706873263
    },
    {
        "content": "<p>I'm also confused why using lemmas tagged as <code>@[constructor]</code> for non-structures would be slow</p>",
        "id": 419438394,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1706873271
    },
    {
        "content": "<p>because it's no good defining a thing which is isomorphic to the coinductive type you want but then tactics like <code>cases</code> and <code>induction</code> totally ignore the inductive-like view and just complain that it has some other implementation detail definition</p>",
        "id": 419438564,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706873326
    },
    {
        "content": "<p>Unfortunately I have a call now so I must disappear but I'm already very grateful that this idea is being considered.</p>",
        "id": 419438630,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1706873354
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/270676-lean4/topic/Alternate.20constructor.20code.20action/near/419438394\">said</a>:</p>\n<blockquote>\n<p>I'm also confused why using lemmas tagged as <code>@[constructor]</code> for non-structures would be slow</p>\n</blockquote>\n<p>Code actions are performance-sensitive, it's the difference between running this code on every <code>_</code> and on ones that have structure type</p>",
        "id": 419438704,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706873391
    },
    {
        "content": "<p>oh, I see, because you need to identify that <code>_</code> is actually wanting to trigger a code action. Maybe it should have a different syntax? or is it desired that, e.g., <code>refine ?_  ?_ ?_ _ _</code> would let you run code actions on the end two <code>_</code>s?</p>",
        "id": 419438907,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1706873469
    },
    {
        "content": "<p>hole code actions run on any <code>_</code> or <code>?_</code></p>",
        "id": 419438966,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706873497
    },
    {
        "content": "<p>I think it'd be nice to have <code>@[constructor]</code> on anything, likely with a different signifier for code actions, but I think that's probably way beyond what this feature needs; I think it'd be fine to limit it to structures as-is</p>",
        "id": 419439108,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1706873552
    },
    {
        "content": "<p>what else would you use <code>@[constructor]</code> for?</p>",
        "id": 419439152,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706873572
    },
    {
        "content": "<p>type synonyms are the only things that come to mind quickly, hmm</p>",
        "id": 419439388,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1706873679
    },
    {
        "content": "<p>no, I mean what other purpose would you put them to, besides the code action</p>",
        "id": 419439435,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706873706
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Could the code action just be \"Fill in a skeleton for <code>_</code>\", and only when the user selects it, the code action starts looking up available <code>@[constructor]</code>s?</p>",
        "id": 419439447,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1706873710
    },
    {
        "content": "<p>That would mean that it could even be an expensive action, because it almost never runs. Only when the user intends it to.</p>",
        "id": 419439482,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1706873733
    },
    {
        "content": "<p>no, because code actions don't have staged evaluation</p>",
        "id": 419439499,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706873742
    },
    {
        "content": "<p>you present options, the user selects one, the text is edited</p>",
        "id": 419439557,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706873764
    },
    {
        "content": "<p>And we can't hack them to do that?</p>",
        "id": 419439596,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1706873767
    },
    {
        "content": "<p>not that I know of</p>",
        "id": 419439619,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706873778
    },
    {
        "content": "<p>The text is edited to become <code>(by choose_skeleton)</code>. And <code>choose_skeleton</code> is a tactic that displays options in a widget view.</p>",
        "id": 419439675,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1706873806
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Alternate.20constructor.20code.20action/near/419439435\">said</a>:</p>\n<blockquote>\n<p>no, I mean what other purpose would you put them to, besides the code action</p>\n</blockquote>\n<p>oh I meant some other <code>_</code>-like thing, so as to not slow down normal code actions. Maybe something used more rarely within normal Lean code</p>",
        "id": 419439690,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1706873812
    },
    {
        "content": "<p>lol</p>",
        "id": 419439693,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706873814
    },
    {
        "content": "<p>It's not as bad as that <span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> , it only runs on the <code>_</code> where the cursor is</p>",
        "id": 419439813,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706873863
    },
    {
        "content": "<p>the main performance issue is that it runs on every cursor motion</p>",
        "id": 419439912,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706873893
    },
    {
        "content": "<p>but if you don't put the cursor over a <code>_</code> then the framework never calls the hole code action</p>",
        "id": 419439991,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706873931
    },
    {
        "content": "<p>I say we just declare that this is a <code>structure</code>-only feature then.</p>",
        "id": 419444799,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1706875809
    },
    {
        "content": "<p>As I've said in the other thread, the place where this would be great for me is when undergraduates are making an type with two terms and then attempting to put a group structure on it without being totally bamboozled by (a) DivInvMonoids (which is what happens if you read the source code) or (b) nsmul (which is what happens if you use the code action).</p>",
        "id": 419445754,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706876202
    },
    {
        "content": "<p>But Chris Hughes wrote some really nice (minimal) constructors for <code>Group</code>and if we can use those then even better!</p>",
        "id": 419446488,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706876510
    },
    {
        "content": "<p>A related feature, when building instances, would be to not generate fields that can be found by <code>inferInstance</code></p>",
        "id": 419599596,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706958622
    },
    {
        "content": "<p>If I've already shown <code>AddCommGroup X</code> I don't want to generate a skeleton with all the fields again when proving <code>NormedGroup X</code></p>",
        "id": 419599617,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706958656
    },
    {
        "content": "<p>I think the \"minimal structure\" PR will do that automatically, let me double check</p>",
        "id": 419599668,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706958722
    },
    {
        "content": "<p>it's supposed to yield the same list of fields that you would get in the error message if you omitted everything</p>",
        "id": 419599721,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706958751
    },
    {
        "content": "<p>Yeah -- I'm pretty sure that's a good strat because it's the one I use in practice when I can't be bothered to delete all the nsmul's</p>",
        "id": 419600313,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706959286
    },
    {
        "content": "<p>I think I'm requesting a variant that fills in all the fields that <code>inferInstance</code> implies, but not the ones with default values</p>",
        "id": 419621762,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706977501
    },
    {
        "content": "<p>Though maybe that would be better handled by my previous suggestion to replace default values with <code>nsmul := by default</code> or something explicit in the source code that makes it clear that a default is being used behind the scenes</p>",
        "id": 419621829,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706977560
    },
    {
        "content": "<p>It shouldn’t be terrible to log a more informative error during elaboration of the default values. Even with that, there is value in wrapping default values in a tactic</p>",
        "id": 419623440,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1706978940
    }
]