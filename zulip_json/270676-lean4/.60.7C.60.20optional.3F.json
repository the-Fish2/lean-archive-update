[
    {
        "content": "<p>Is there any place in Lean 4 syntax where <code>|</code> is optional?</p>",
        "id": 409987756,
        "sender_full_name": "Martin Dvo콏치k",
        "timestamp": 1703576798
    },
    {
        "content": "<p>That's a very vague question. What syntaxes are you interested in?</p>",
        "id": 409987931,
        "sender_full_name": "Ya칢l Dillies",
        "timestamp": 1703576968
    },
    {
        "content": "<p>Any (Lean 4 syntax for pattern matching, any standard tactics, ...).</p>",
        "id": 409988717,
        "sender_full_name": "Martin Dvo콏치k",
        "timestamp": 1703577577
    },
    {
        "content": "<p><code>induction</code>, <code>match</code>, <code>first</code>, <code>inductive</code> all take a list of alternatives starting with <code>|</code>, so I think the answer is yes, almost everywhere</p>",
        "id": 410025473,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703597521
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> has marked this topic as resolved.</p>",
        "id": 410025886,
        "sender_full_name": "Notification Bot",
        "timestamp": 1703597696
    },
    {
        "content": "<p>But is the <code>|</code> optional in these places?</p>",
        "id": 410029872,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1703599609
    },
    {
        "content": "<p>In the sense that you can not have a <code>|</code> in that position and now the tactic/command means something else</p>",
        "id": 410030064,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703599724
    },
    {
        "content": "<p>In the places where the parser reads a <code>|</code>, the parser is not sure whether the thing to be read is <code>|</code> vs something else</p>",
        "id": 410030152,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703599796
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> has marked this topic as unresolved.</p>",
        "id": 410034645,
        "sender_full_name": "Notification Bot",
        "timestamp": 1703602289
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/.60.7C.60.20optional.3F/near/410025473\">said</a>:</p>\n<blockquote>\n<p><code>induction</code>, <code>match</code>, <code>first</code>, <code>inductive</code> all take a list of alternatives starting with <code>|</code>, so I think the answer is yes, almost everywhere</p>\n</blockquote>\n<p>Yeah but what does it do if I delete <code>|</code> and keep everything else in place? Is it ignored the same way a bullet point would be ignored? I don't think so.</p>",
        "id": 410049064,
        "sender_full_name": "Martin Dvo콏치k",
        "timestamp": 1703611112
    },
    {
        "content": "<p>bullet points are not ignored, they change the structure and behavior of the code</p>",
        "id": 410050426,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703612163
    },
    {
        "content": "<p>there are very few keywords in lean that are optional and don't cause some behavioral difference</p>",
        "id": 410050506,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703612195
    },
    {
        "content": "<p>True.</p>",
        "id": 410050972,
        "sender_full_name": "Martin Dvo콏치k",
        "timestamp": 1703612502
    },
    {
        "content": "<p>You can sometimes (mis?)use <code>.</code>(\"focus goal\") instead of <code>|</code> with e.g. <code>cases</code>, which imo is a mildly confusing inconsistency.</p>",
        "id": 410144903,
        "sender_full_name": "Max Nowak 游낼",
        "timestamp": 1703678803
    },
    {
        "content": "<p>It's probably a style choice, I prefer <code>.</code> over <code>|</code> in proofs, particularly <code>obtain</code> and <code>rintro</code> with <code>.</code> over <code>cases</code> with <code>|</code>. <code>|</code> feels more functional programming than proving for me.</p>",
        "id": 410239217,
        "sender_full_name": "Utensil Song",
        "timestamp": 1703737502
    },
    {
        "content": "<p>Simple search shows that Mathlib4 also seldom uses <code>|</code> in proofs except when it's more about basic data types and closer to the area of software verification, and Std4 seems to use that more.</p>",
        "id": 410240187,
        "sender_full_name": "Utensil Song",
        "timestamp": 1703738116
    },
    {
        "content": "<p>note that this is biased by the fact that mathport never uses <code>cases x with</code></p>",
        "id": 410241550,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703739160
    },
    {
        "content": "<p>The nearest equivalent in mathported code would be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cases</span> <span class=\"n\">x</span>\n<span class=\"n\">case</span> <span class=\"n\">foo</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n<span class=\"n\">case</span> <span class=\"n\">bar</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 410241607,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703739230
    },
    {
        "content": "<p>Is there a reason why <code>.</code> is preferred for proofs while <code>|</code> is preferred for programming? Intuitively, since we're in the world of MLTT, they are the same concept, so I don't get why we have two different syntaxes.</p>",
        "id": 410316432,
        "sender_full_name": "Max Nowak 游낼",
        "timestamp": 1703780870
    },
    {
        "content": "<p>I'm not sure that's true</p>",
        "id": 410316632,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1703780983
    },
    {
        "content": "<p>I mean <code>.</code> in a <code>cases</code> \"block\" or similar.</p>",
        "id": 410316751,
        "sender_full_name": "Max Nowak 游낼",
        "timestamp": 1703781038
    },
    {
        "content": "<p>I suppose I'm just biased since I come from a programming background and want proofs to resemble programs :P.</p>",
        "id": 410316936,
        "sender_full_name": "Max Nowak 游낼",
        "timestamp": 1703781133
    },
    {
        "content": "<p>The reason that mathlib doesn't use <code>cases with | ..</code> much is mostly a historical accident; I see no reason not to use it in new proofs</p>",
        "id": 410317232,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1703781310
    },
    {
        "content": "<p>I'm working on a PR to change the above <code>cases ... case</code> pattern into <code>cases with |</code> in mathlib</p>",
        "id": 410322342,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703784454
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416280\">Max Nowak 游낼</span> <a href=\"#narrow/stream/270676-lean4/topic/.60.7C.60.20optional.3F/near/410144903\">said</a>:</p>\n<blockquote>\n<p>You can sometimes (mis?)use <code>.</code>(\"focus goal\") instead of <code>|</code> with e.g. <code>cases</code>, which imo is a mildly confusing inconsistency.</p>\n</blockquote>\n<p>It is never in the same tactic, right?</p>",
        "id": 410324358,
        "sender_full_name": "Martin Dvo콏치k",
        "timestamp": 1703785734
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/9321\">#9321</a></p>",
        "id": 410340320,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703796335
    },
    {
        "content": "<p>I didn't know <code>if</code> was a tactic!</p>",
        "id": 410341044,
        "sender_full_name": "Martin Dvo콏치k",
        "timestamp": 1703796806
    },
    {
        "content": "<p>Even <code>match</code> works just fine inside tactic mode. I like the <code>|</code>, <code>if</code>, <code>match</code>, etc a lot because they show the structure of proofs more clearly, just like programs often do, as opposed to a list of tactics. The infoview is great, but the less I <em>have</em> to use it in order to understand what a proof does, the better.</p>",
        "id": 410355813,
        "sender_full_name": "Max Nowak 游낼",
        "timestamp": 1703805470
    },
    {
        "content": "<p>Coming back to the original question, I believe when defining an inductive type the | before the first constructor is optional.</p>",
        "id": 410739738,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1704129212
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129120\">@Alexander Bentkamp</span> I thought I remembered that, but it ever was like that, it doesn't seem to be optional anymore.</p>",
        "id": 410741357,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1704130950
    }
]