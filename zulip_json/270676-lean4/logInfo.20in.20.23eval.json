[
    {
        "content": "<p>This log message seems to be going into the abyss:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"k\">from</span> <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"I am invisible\"</span>\n</code></pre></div>\n<p>is this expected behavior?</p>",
        "id": 409412941,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703172885
    },
    {
        "content": "<p>Seems pretty normal. The return value is unit. #eval doesn't seem to care about doing anything other than<del>in the kernel</del> evaluating expressions in the VM, getting the returned expr back, and printing it. See for example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"o\">((</span><span class=\"k\">do</span>\n        <span class=\"n\">logInfo</span> <span class=\"s2\">\"something\"</span>\n        <span class=\"n\">return</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 409414598,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1703173450
    },
    {
        "content": "<p>It certainly isn't behaviour that has changed recently.<br>\nYou can use <code>dbg_trace</code> in such evals, but normally I just make a command elab for testing such small things rather than <code>#eval</code></p>",
        "id": 409415253,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1703173660
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"466334\">@Shreyas Srinivas</span> <code>#eval</code> knows about different monads due to the <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MetaEval#doc\">docs#MetaEval</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Eval#doc\">docs#Eval</a> classes.</p>\n<p>In principle, it seems to me that the <code>MetaM</code> instances should be able to collect the logged info and report it somehow. Maybe the immediate problem is that these classes target <code>IO</code> instead of some monad supporting <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.MonadLog#doc\">docs#Lean.MonadLog</a> so there's nowhere for the messages to go, short of printing the messages.</p>",
        "id": 409421548,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1703175569
    },
    {
        "content": "<p>Note that if you use an elaboration monad instead, then the message is shown: <code>#eval show Elab.Command.CommandElabM Unit from logInfo m!\"I am visible\"</code>. This kind of inconsistency should count as a bug IMO.</p>",
        "id": 445938317,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1718912391
    },
    {
        "content": "<p>Since this thread came up again, I should probably mention that I have learnt since that eval can basically bypass the type checker when a prop is involved.</p>",
        "id": 445939204,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1718912717
    },
    {
        "content": "<p>(by bypass, I mean insert <code>sorry</code> and move on)</p>",
        "id": 445939331,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1718912767
    }
]