[
    {
        "content": "<p>Mostly for the sake of practice with the new notation system, I'm trying to implement the syntax psuedocoded below:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">Σ|</span> <span class=\"n\">WalkingPair</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">if_left</span> <span class=\"bp\">|</span> <span class=\"n\">if_right</span><span class=\"o\">⟩</span> <span class=\"c1\">-- =&gt; Σ (x: WalkingPair), x |&gt; fun | left =&gt; if_left | right =&gt; if_right</span>\n<span class=\"bp\">Σ|</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">Bool</span><span class=\"o\">),</span> <span class=\"o\">⟨</span><span class=\"n\">if_none</span><span class=\"bp\">|</span> <span class=\"n\">if_false</span> <span class=\"bp\">|</span> <span class=\"n\">if_true</span><span class=\"o\">⟩</span>\n   <span class=\"c1\">-- =&gt; Σ (x: Option Bool), x |&gt; fun | none =&gt; if_none | some.false =&gt; if_false |  some.true =&gt; if_true</span>\n<span class=\"c1\">-- ... and so on for arbitrary finitely constructible types</span>\n</code></pre></div>\n<p>So far, I've managed to come up with this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.Elab.definition</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">sigma_rcases</span><span class=\"o\">)</span> <span class=\"s2\">\"Σ| \"</span> <span class=\"n\">term</span> <span class=\"s2\">\", \"\"⟨\"</span><span class=\"n\">sepBy1</span><span class=\"o\">(</span><span class=\"n\">ppSpace</span> <span class=\"n\">colGt</span> <span class=\"n\">term</span><span class=\"o\">,</span> <span class=\"s2\">\" | \"</span><span class=\"o\">)</span><span class=\"s2\">\"⟩\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Elab.definition</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">Σ|</span> <span class=\"bp\">$</span><span class=\"n\">btype</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"bp\">$</span><span class=\"n\">ctr_cases</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"bp\">|*</span><span class=\"o\">⟩)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">fresh</span> <span class=\"bp\">←</span> <span class=\"n\">Elab.Term.mkFreshIdent</span> <span class=\"n\">btype</span> <span class=\"n\">true</span>\n      <span class=\"k\">let</span> <span class=\"n\">freshRef</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">casesTarget</span><span class=\"bp\">|$</span><span class=\"n\">fresh</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span>\n      <span class=\"k\">let</span> <span class=\"n\">exacts</span> <span class=\"bp\">←</span> <span class=\"n\">ctr_cases.getElems.mapM</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">exact</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">))</span>\n      <span class=\"k\">let</span> <span class=\"n\">binders</span> <span class=\"bp\">←</span> <span class=\"n\">ctr_cases.getElems.mapM</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">rcasesPat</span><span class=\"bp\">|$</span><span class=\"o\">(⟨</span><span class=\"n\">mkHole</span> <span class=\"n\">x</span> <span class=\"n\">true</span><span class=\"o\">⟩)))</span>\n      <span class=\"k\">let</span> <span class=\"n\">byTactic</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rcases</span> <span class=\"bp\">$</span><span class=\"n\">freshRef</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">binders</span><span class=\"bp\">|*</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"bp\">$</span><span class=\"n\">exacts</span><span class=\"bp\">;*</span><span class=\"o\">)</span>\n      <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"bp\">$</span><span class=\"n\">fresh</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">byTactic</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I'm using <code>by rcases</code> to generate the constructor names I need, and assuming that the user knows what they're doing/how many blanks they need.</p>\n<p>Unfortunately, while it type-checks, it doesn't quite work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">Σ</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">WalkingPair</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rcases</span> <span class=\"n\">fresh</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">ℕ</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">ℤ</span>\n<span class=\"c1\">-- (x : WalkingPair) × WalkingPair.casesOn x ℕ ℤ : Type</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">Σ|</span> <span class=\"n\">WalkingPair</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">ℤ</span><span class=\"o\">⟩)</span>\n <span class=\"c1\">-- unexpected syntax</span>\n<span class=\"c1\">--   rcases x✝ with (_ | _)</span>\n</code></pre></div>\n<p>Any advice? Also, does this belong here or under <a class=\"stream\" data-stream-id=\"239415\" href=\"/#narrow/stream/239415-metaprogramming-.2F-tactics\">#metaprogramming / tactics</a> ?</p>",
        "id": 422911147,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1708638793
    },
    {
        "content": "<p>In case anyone runs across this in the future: the error was at </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">binders</span> <span class=\"bp\">←</span> <span class=\"n\">ctr_cases.getElems.mapM</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">rcasesPat</span><span class=\"bp\">|$</span><span class=\"o\">(⟨</span><span class=\"n\">mkHole</span> <span class=\"n\">x</span> <span class=\"n\">true</span><span class=\"o\">⟩)))</span>\n</code></pre></div>\n<p><code> `(rcasesPat|...</code> starts a parser for the parser category <code>rcasesPat</code>; rather than trying to synthesize the syntax, the solution was to just replace that line with </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">binders</span> <span class=\"bp\">←</span> <span class=\"n\">ctr_cases.getElems.mapM</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">rcasesPat</span><span class=\"bp\">|</span><span class=\"n\">_</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>The full solution is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Macro</span> <span class=\"n\">Parser</span> <span class=\"n\">Parser.Term</span> <span class=\"n\">Syntax</span> <span class=\"n\">Tactic</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"Σ| \"</span> <span class=\"n\">term</span> <span class=\"s2\">\", \"\"⟨\"</span><span class=\"n\">sepBy1</span><span class=\"o\">(</span><span class=\"n\">ppSpace</span> <span class=\"n\">colGt</span> <span class=\"n\">term</span><span class=\"o\">,</span> <span class=\"s2\">\" | \"</span><span class=\"o\">)</span><span class=\"s2\">\"⟩\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">Σ|</span> <span class=\"bp\">$</span><span class=\"n\">btype</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"bp\">$</span><span class=\"n\">ctr_cases</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"bp\">|*</span><span class=\"o\">⟩)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">fresh</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshIdent</span> <span class=\"n\">btype</span> <span class=\"n\">true</span>\n      <span class=\"k\">let</span> <span class=\"n\">binders</span> <span class=\"bp\">←</span> <span class=\"n\">ctr_cases.getElems.mapM</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">rcasesPat</span><span class=\"bp\">|</span><span class=\"n\">_</span><span class=\"o\">))</span>\n      <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"bp\">$</span><span class=\"n\">fresh</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">:</span><span class=\"bp\">$</span><span class=\"n\">btype</span><span class=\"o\">,</span> <span class=\"kd\">by</span>\n          <span class=\"n\">rcases</span> <span class=\"bp\">$</span><span class=\"n\">fresh</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">binders</span><span class=\"bp\">|*</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"bp\">$</span><span class=\"n\">ctr_cases</span><span class=\"o\">]</span><span class=\"bp\">;*</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">Σ|</span> <span class=\"n\">WalkingPair</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">ℤ</span><span class=\"o\">⟩)</span> <span class=\"c1\">-- (x : WalkingPair) × WalkingPair.casesOn x ℕ ℤ : Type</span>\n</code></pre></div>",
        "id": 425035339,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1709715677
    }
]