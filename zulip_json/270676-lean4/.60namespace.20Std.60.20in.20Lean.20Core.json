[
    {
        "content": "<p>Out of curiosity, why are there declarations in <code>lean4</code>'s file <code>Init.Core</code> which are placed in the <code>Std</code> namespace? e.g. <a href=\"https://github.com/leanprover/lean4/blob/67c9498892bfb3bd20e24ceca4c94b467e735ad4/src/Init/Core.lean#L1947\">Std.Commutative</a> I found that quite surprising.</p>",
        "id": 424022125,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1709214403
    },
    {
        "content": "<p>The FRO is currently moving large parts of <code>std4</code> into the core repository to enable a more plug and play experience for Lean users.</p>",
        "id": 424022603,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1709214581
    },
    {
        "content": "<p>I see. Does that mean they will stay in there with that namespace or will they likely loose the <code>Std</code> namespace eventually?</p>",
        "id": 424023376,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1709214813
    },
    {
        "content": "<p>That's probably a question for <span class=\"user-mention\" data-user-id=\"110994\">@Joe Hendrix</span></p>",
        "id": 424032881,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1709217474
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"385895\">@Jon Eugster</span>  They should be moved eventually.  Those declarations were initially prefixed with <code>Lean</code> (e.g., <code>Lean.Associative</code>) and used purely in the <code>ac_rfl</code> tactic.</p>\n<p>I wanted them in <code>Std</code>, but Mathlib already has <code>Associative</code> and <code>IsAssociative</code> and both are pretty widely used in the algebraic hierarchy, and that is not going to move to Lean proper for a variety of reasons.  </p>\n<p>I'd like to push those forward more and get operations and instances more widely available (e.g., a compatible <code>List.sum</code>).  I think that can happen after the next release candidate is out.</p>",
        "id": 424064765,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1709225849
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110994\">Joe Hendrix</span> <a href=\"#narrow/stream/270676-lean4/topic/.60namespace.20Std.60.20in.20Lean.20Core/near/424064765\">said</a>:</p>\n<blockquote>\n<p>I wanted them in <code>Std</code>, but Mathlib already has <code>Associative</code> and <code>IsAssociative</code> and both are pretty widely used in the algebraic hierarchy, and that is not going to move to Lean proper for a variety of reasons.  </p>\n</blockquote>\n<p>Mathlib only has <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsAssociative#doc\">docs#IsAssociative</a> because it inherited them from Lean3 core; it can probably be merged with the new Lean 4 version</p>",
        "id": 424069703,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709227337
    },
    {
        "content": "<p>Indeed, it's already deprecated!</p>",
        "id": 424069756,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709227356
    },
    {
        "content": "<blockquote>\n<p>and both are pretty widely used in the algebraic hierarchy</p>\n</blockquote>\n<p>I think this isn't very true. The unbundled typeclasses are effectively not used in the algebraic hierarchy at all.</p>",
        "id": 424069904,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709227398
    },
    {
        "content": "<p>Ok, what's your proposal then?   Will Mathlib rename <code>_root_.Associative</code> to <code>Mathlib.Associative</code> (or something similar then)?</p>",
        "id": 424073460,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1709228422
    },
    {
        "content": "<p>It's great to see that is deprecated now, incidentally.</p>",
        "id": 424073862,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1709228534
    },
    {
        "content": "<p>I think we'll just delete it</p>",
        "id": 424098849,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709237231
    },
    {
        "content": "<p>I think you're confusing:</p>\n<ul>\n<li><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsAssociative#doc\">docs#IsAssociative</a>: deprecated, the same as <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Std.Associative#doc\">docs#Std.Associative</a>, from core's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_associative\">docs3#is_associative</a> in <code>init.algebra.classes</code>)</li>\n<li><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Associative#doc\">docs#Associative</a>: not deprecated, from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/associative\">docs3#associative</a> in core's <code>init.logic</code>, and differs by not being a typeclass)</li>\n</ul>",
        "id": 424119434,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709245315
    },
    {
        "content": "<p>I don't think so. Both are remnants from Lean 3 core and the failed algebra refactor. I don't think mathlib wants either of them, really.</p>",
        "id": 424119994,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709245549
    },
    {
        "content": "<p>I'm pretty sure <code>associative</code> is not from that refactor</p>",
        "id": 424120240,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709245646
    },
    {
        "content": "<p>The one from the refactor seems to be the one that Lean 4 kept!</p>",
        "id": 424120268,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709245660
    },
    {
        "content": "<p>I mean \"Each is a remnant from Lean 3 core or a remnant from the failed algebra refactor\"</p>",
        "id": 424120432,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709245718
    },
    {
        "content": "<p>Anything that's under <code>Mathlib.Init</code> is de facto on an ejectable seat to the deprecation bin</p>",
        "id": 424120528,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709245764
    },
    {
        "content": "<p>It does provide a nice example of how the naming rules don't have any advice on how to distinguish <code>class Associative : Prop</code> from <code>structure Associative : Prop</code></p>",
        "id": 424120677,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709245812
    },
    {
        "content": "<p>Mathlib itself has a hard time deciding, with <code>class IsClosed</code> but <code>structure IsOpen</code></p>",
        "id": 424120819,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709245879
    },
    {
        "content": "<p>As I stumbled across a problem with the same part of <code>Mathlib.Init.Logic</code> here's a PR removing Mathlib's <code>Commutative</code> and <code>Associative</code>, replacing them with the core definitions <code>Std.Commutative</code> and <code>Std.Associative</code>:</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/11415\">#11415</a></p>\n<p>From that section, only <code>RightInverse</code>, <code>LeftInverse</code>, <code>left_comm</code>, and <code>right_comm</code> are ever used in Mathlib at all. I wonder if they should get a new home?</p>",
        "id": 426920701,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1710622010
    },
    {
        "content": "<p>Probably. Init is vestigial</p>",
        "id": 426921305,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1710622619
    },
    {
        "content": "<p>I'm not convinced by this replacement. My understanding was that we should either have <code>[Std.Associative f]</code> or <code>(h : Associative f)</code>, and the choice depends on whether you want a type class or a hypothesis</p>",
        "id": 426942472,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710633077
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/.60namespace.20Std.60.20in.20Lean.20Core/near/426942472\">said</a>:</p>\n<blockquote>\n<p>I'm not convinced by this replacement. My understanding was that we should either have <code>[Std.Associative f]</code> or <code>(h : Associative f)</code>, and the choice depends on whether you want a type class or a hypothesis</p>\n</blockquote>\n<p>That does makes sense to some extend, but are there any benefits of not having <code>(h : Std.Associative)</code> if <code>h.assoc</code> is then exactly equivalent to <code>h' : Associative f</code>?</p>\n<p>Or is your point that it shouldn't be a simple replacement, but using the typeclass system as much as possible?</p>",
        "id": 427079457,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1710671423
    },
    {
        "content": "<p>The non-std versions have a nicer defeq (one that is not possible for <code>class</code> but easy for <code>def</code>), which is an argument in favor of keeping them</p>",
        "id": 427082160,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710672144
    },
    {
        "content": "<p>See also how we have both <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Covariant#doc\">docs#Covariant</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CovariantClass#doc\">docs#CovariantClass</a></p>",
        "id": 427082269,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710672172
    },
    {
        "content": "<p>ok. I mean what I'd really want is to put <code>_root_.RightInverse</code> in a namespace or delete it. It's never used in all of Mathlib...</p>\n<p>Maybe I'll just make a PR for one of these options and leave <code>Commutative</code> and <code>Associative</code> untouched?</p>",
        "id": 427082807,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1710672313
    }
]