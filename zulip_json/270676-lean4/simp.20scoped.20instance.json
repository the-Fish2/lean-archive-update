[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">A</span>\n\n<span class=\"n\">scoped</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">HAdd</span> <span class=\"n\">String</span> <span class=\"n\">String</span> <span class=\"n\">String</span> <span class=\"n\">where</span>\n  <span class=\"n\">hAdd</span> <span class=\"o\">:=</span> <span class=\"n\">String.append</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">A</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"kn\">open</span> <span class=\"n\">A</span> <span class=\"k\">in</span> <span class=\"s2\">\"a\"</span> <span class=\"bp\">+</span> <span class=\"s2\">\"b\"</span> <span class=\"bp\">=</span> <span class=\"s2\">\"ab\"</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">HAdd.hAdd</span><span class=\"o\">]</span> <span class=\"c1\">-- simp made no progress</span>\n</code></pre></div>\n<p>is this a symptom of instance resynth that will be resolved once the core change reaches my project?</p>",
        "id": 423898871,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1709152787
    },
    {
        "content": "<p>On the master branch it still makes no progress</p>",
        "id": 423900815,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709153492
    },
    {
        "content": "<p>You can use <code>unfold HAdd.hAdd</code> though</p>",
        "id": 423900851,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709153503
    },
    {
        "content": "<p>yeah, it's not a huge deal, just a weird side effect of the pre v4.6 behavior</p>",
        "id": 423901964,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1709153897
    },
    {
        "content": "<p>I guess you're expected to write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"kn\">open</span> <span class=\"n\">A</span> <span class=\"k\">in</span> <span class=\"s2\">\"a\"</span> <span class=\"bp\">+</span> <span class=\"s2\">\"b\"</span> <span class=\"bp\">=</span> <span class=\"s2\">\"ab\"</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"kn\">open</span> <span class=\"n\">A</span> <span class=\"k\">in</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">HAdd.hAdd</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 423913531,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709159046
    },
    {
        "content": "<p>yep. I've just been playing with scoped instances a bit and you can kinda quickly end up in weird situations like this.</p>\n<p>another one that came up is when you use scoped instances with outParams and auto-opening namespaces in the body of defs. You can end up in a situation where you can't actually write what you want to write at all:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">SEntails</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"bp\">$</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">entails</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">notation</span> <span class=\"n\">x</span> <span class=\"s2\">\" ⊨ \"</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">SEntails.entails</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">A</span>\n<span class=\"n\">scoped</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">SEntails</span> <span class=\"n\">String</span> <span class=\"n\">Nat</span> <span class=\"n\">where</span>\n  <span class=\"n\">entails</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">toString</span> <span class=\"n\">b</span>\n<span class=\"kd\">end</span> <span class=\"n\">A</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">B</span>\n<span class=\"n\">scoped</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">SEntails</span> <span class=\"n\">String</span> <span class=\"n\">Bool</span> <span class=\"n\">where</span>\n  <span class=\"n\">entails</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">toString</span> <span class=\"n\">b</span>\n<span class=\"kd\">end</span> <span class=\"n\">B</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">A</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">B.hello</span> <span class=\"o\">:</span> <span class=\"s2\">\"0\"</span> <span class=\"bp\">⊨</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- failed to synthesize instance</span>\n</code></pre></div>\n<p>I think this counts as abuse of <code>outParam</code>s, but we have essentially this code in LeanSAT and no great alternative</p>",
        "id": 423929407,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1709167802
    }
]