[
    {
        "content": "<p>The <code>unusedVariable</code> linter does not report the <code>cmd</code> unused variable <em>sometimes</em> with a <code>set</code> State:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Elab</span><span class=\"bp\">.</span><span class=\"n\">Command</span>\n\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Lean</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">unreportedUnused_cmd</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Linter</span><span class=\"w\"> </span><span class=\"kn\">where</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">cmd</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">get</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"o\">}</span><span class=\"w\">  </span><span class=\"c1\">-- comment `set` to realize that `cmd` is unused</span>\n<span class=\"w\">  </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">get</span><span class=\"o\">)</span><span class=\"w\">           </span><span class=\"c1\">-- this, on the other hand, plays no role</span>\n<span class=\"w\">  </span><span class=\"n\">return</span>\n</code></pre></div>",
        "id": 445303858,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718700307
    },
    {
        "content": "<p>In fact, even an unused <code>let</code> triggers the same behaviour:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Elab</span><span class=\"bp\">.</span><span class=\"n\">Command</span>\n\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Lean</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">unreportedUnused_cmd</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Linter</span><span class=\"w\"> </span><span class=\"kn\">where</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">cmd</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">get</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"o\">}</span><span class=\"w\">  </span><span class=\"c1\">-- comment me to realize that `cmd` is unused</span>\n<span class=\"w\">  </span><span class=\"n\">return</span>\n</code></pre></div>",
        "id": 445308984,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718701909
    },
    {
        "content": "<p>The second example produces an error. </p>\n<blockquote>\n<p>invalid {...} notation, expected type is not of the form (C ...)<br>\nLinterLean 4</p>\n</blockquote>",
        "id": 445310252,
        "sender_full_name": "Anders Larsson",
        "timestamp": 1718702321
    },
    {
        "content": "<p>Oh, sorry, I meant it to have the same imports and open as before: let me edit.</p>",
        "id": 445310381,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718702353
    },
    {
        "content": "<p>I suspect that it is the autofilled <code>name</code> field that is disturbing the unusedVariable linter.</p>",
        "id": 445310569,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718702403
    },
    {
        "content": "<p>Ok, this is further minimized (no <code>import</code>s or <code>open</code>s necessary):</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">structure</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Unit</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Unit</span>\n<span class=\"w\">  </span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Name</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">decl_name</span><span class=\"bp\">%</span>\n\n<span class=\"kn\">structure</span><span class=\"w\"> </span><span class=\"n\">nothing</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">unreportedUnused</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"c1\">-- if `name` is provided, `cmd` is always unused,</span>\n<span class=\"w\">  </span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"ss\">`h</span>\n<span class=\"w\">  </span><span class=\"c1\">-- otherwise, the `{ ... with }`-syntax interferes with the unused variable linter</span>\n<span class=\"w\">  </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"n\">cmd</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">⟨⟩</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">nothing</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"o\">}</span><span class=\"w\">   </span><span class=\"c1\">-- if `name` is commented, then comment me to realize that `cmd` is unused</span>\n<span class=\"w\">    </span><span class=\"o\">()</span>\n</code></pre></div>",
        "id": 445313612,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718703363
    }
]