[
    {
        "content": "<p>Hello! I'm relatively new to Lean but I'm enjoying playing with it so far.</p>\n<p>I'm curious how one might go about passing compiler flags to the C compiler <a href=\"https://github.com/tydeu/lean4-alloy\">Alloy</a> (the library for C interop created by <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span>) invokes.<br>\nThe reason I ask this is because I've tried doing the following (minimized example):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Alloy.C</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Alloy.C</span>\n\n<span class=\"n\">alloy</span> <span class=\"n\">c</span> <span class=\"kn\">include</span> <span class=\"bp\">&lt;</span><span class=\"n\">stdio.h</span><span class=\"bp\">&gt;</span> <span class=\"bp\">&lt;</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">lean.h</span><span class=\"bp\">&gt;</span>\n\n<span class=\"n\">alloy</span> <span class=\"n\">c</span> <span class=\"n\">extern</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">UInt32</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">PUnit</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">fprintf</span><span class=\"o\">(</span><span class=\"n\">stderr</span><span class=\"o\">,</span> <span class=\"s2\">\"oops!\"</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n  <span class=\"n\">return</span> <span class=\"n\">lean_io_result_mk_ok</span><span class=\"o\">(</span><span class=\"n\">lean_box</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">))</span><span class=\"bp\">;</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>When compiling this (importing it into Main), I get the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>error: &gt; /home/david/.elan/toolchains/stable/bin/leanc -shared -o ./.lake/build/lib/libSlim-Basic-1.so ./.lake/build/ir/Slim/Basic.c.o ./.lake/build/ir/Slim/Basic.alloy.c.o -L./.lake/packages/alloy/.lake/build/lib -L./.lake/build/lib -lAlloy-Util-Parser-1 -lAlloy-C-Grammar-1 -lAlloy-C-Syntax-1 -lAlloy-Util-Shim-1 -lAlloy-Util-Extension-1 -lAlloy-Util-Command-1 -lAlloy-Util-Syntax-1 -lAlloy-Util-ShimElab-1 -lAlloy-C-Shim-1 -lAlloy-Util-Server-Capabilities-1 -lAlloy-Util-Server-Initialize-1 -lAlloy-Util-Server-Methods-1 -lAlloy-C-Server-Clangd-1 -lAlloy-Util-Server-Worker-1 -lAlloy-Util-Server-Extra-1 -lAlloy-Util-Server-1 -lAlloy-C-Server-Worker-1 -lAlloy-C-Server-Location-1 -lAlloy-C-Server-SemanticTokens-1 -lAlloy-C-Server-1 -lAlloy-C-ShimElab-1 -lAlloy-C-Translator-1 -lAlloy-C-Enum-1 -lAlloy-C-IR-1 -lAlloy-Util-Binder-1 -lAlloy-C-ExternImpl-1 -lAlloy-C-ExternDef-1 -lAlloy-Util-OpaqueType-1 -lAlloy-C-ExternType-1 -lAlloy-C-1 -lSlim-Alloy-1 -fPIC\nerror: stderr:\nld.lld: error: relocation R_X86_64_PC32 cannot be used against symbol 'stderr'; recompile with -fPIC\n&gt;&gt;&gt; defined in /home/david/.elan/toolchains/stable/lib/glibc/libc.so\n&gt;&gt;&gt; referenced by Basic.alloy.c\n&gt;&gt;&gt;               ./.lake/build/ir/Slim/Basic.alloy.c.o:(_alloy_c_l_Slim_foo)\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\nerror: external command `/home/david/.elan/toolchains/stable/bin/leanc` exited with code 1\n</code></pre></div>\n<p>As you can see by the first line showing the <code>leanc</code> invocation, I've added <code>-fPIC</code> to my <code>moreLinkArgs</code> in my <code>lakefile.lean</code>-- but this seems to have no effect on Alloy specifically.</p>\n<p>I've also tried using <code>addServerFlag</code> (both via the <code>#eval</code> and <code>initialize</code> methods I found described in some code comments) and those don't seem to do what I want either.</p>\n<p>Apologies if I've missed anything obvious-- thank you for reading my question (and thank you to Mac especially for the nifty library!)<br>\nI hope I've posted this in the right place and haven't broken any sort of etiquette, this is my first time using Zulip.</p>",
        "id": 412847686,
        "sender_full_name": "David Garland",
        "timestamp": 1705267468
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"681327\">@David Garland</span> Welcome to the Lean Zulip! No worries about etiquette, your post is great! I believe the problem is that you need to pass <code>-fPIC</code> via <code>moreLeancArgs</code> rather than <code>moreLinkArgs</code> (as it a C compiler flag, not a linker flag).</p>",
        "id": 412848121,
        "sender_full_name": "Mac Malone",
        "timestamp": 1705267890
    },
    {
        "content": "<p>Thank you! That fixed it ^^</p>",
        "id": 412850865,
        "sender_full_name": "David Garland",
        "timestamp": 1705270526
    }
]