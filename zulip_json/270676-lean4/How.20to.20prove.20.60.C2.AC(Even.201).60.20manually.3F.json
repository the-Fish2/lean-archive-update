[
    {
        "content": "<p>I am wondering how to manually prove some falsity in Lean4, such as proving <code>0 ≠ 1</code> and <code>¬(Even 1)</code>.</p>\n<p>Although the <code>cases</code> tactic can eliminate those impossible subgoals, I prefer to solve them manually for enjoyment.</p>\n<div class=\"codehilite\" data-code-language=\"lean4\"><pre><span></span><code>-- by simp\nexample : 1 ≠ 0 := by simp\n\n-- by cases\nexample : 1 ≠ 0 := by\n  intro h\n  cases h\n</code></pre></div>\n<p>I am able to prove <code>0 ≠ 1</code> using the <code>rewrite</code> tactic.</p>\n<div class=\"codehilite\" data-code-language=\"lean4\"><pre><span></span><code>-- by rewrite\ndef is_zero : Nat → Prop\n  | .zero =&gt; True\n  | .succ _ =&gt; False\n\nexample : (0 = 1) → False := by\n  have h_0_eq_0 : is_zero 0 = is_zero 0 := rfl\n  intro h_0_eq_1\n  conv at h_0_eq_0 =&gt; {\n    left\n    rw [h_0_eq_1]\n  }\n  have h_false_eq_true : False = True := h_0_eq_0\n  rewrite [h_false_eq_true]\n  exact trivial\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"lean4\"><pre><span></span><code>-- even by crazy recOn!\ndef f : Nat → Prop :=\n  @Nat.rec (fun _ =&gt; Prop) False (fun _ _ =&gt; True)\n\nexample (n : Nat) : (.succ n = 0) → False :=\n  fun e =&gt; @Eq.subst _ f (.succ n) 0 e True.intro\n</code></pre></div>\n<p>And to prove <code>Even 1</code> is false by <code>cases</code>.</p>\n<div class=\"codehilite\" data-code-language=\"lean4\"><pre><span></span><code>example : ¬(Even 1) := by\n  intro h\n  cases h\n</code></pre></div>\n<p>But I am unsure how to prove <code>¬(Even 1)</code> manually, can someone show the proof and put some materials about this?</p>\n<div class=\"codehilite\" data-code-language=\"lean4\"><pre><span></span><code>inductive Even : Nat → Prop where\n  | zero : Even 0\n  | add_two : (k : Nat) → Even k → Even (k + 2)\n\nexample : ¬(Even 1) := by\n  intro h\n  sorry -- How?\n</code></pre></div>\n<p>Thank you all!</p>",
        "id": 407911689,
        "sender_full_name": "y-samuel",
        "timestamp": 1702544093
    },
    {
        "content": "<p>You can always #print a lemma to see the proof. This will be using <code>noConfusion</code></p>",
        "id": 407912785,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1702544509
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/270676-lean4/topic/How.20to.20prove.20.60.C2.AC.28Even.201.29.60.20manually.3F/near/407912785\">said</a>:</p>\n<blockquote>\n<p>You can always #print a lemma to see the proof. This will be using <code>noConfusion</code></p>\n</blockquote>\n<p>Magic #print! Thank you!</p>",
        "id": 407922681,
        "sender_full_name": "y-samuel",
        "timestamp": 1702547630
    },
    {
        "content": "<p>I wonder if there is a method based on typed pattern matching?</p>",
        "id": 407934173,
        "sender_full_name": "y-samuel",
        "timestamp": 1702551256
    },
    {
        "content": "<p>If you try pattern match, it will give you type errors. You need to use the <code>nomatch</code> keyword, or the <code>match h with .</code> extension in Std (Std/Tactic/NoMatch)</p>",
        "id": 407934465,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1702551363
    },
    {
        "content": "<p>(sorry, I think <code>nomatch</code> is mathlib/std)</p>",
        "id": 407934684,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1702551428
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">Even</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"n\">nomatch</span> <span class=\"n\">h</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">as</span>\n</code></pre></div>",
        "id": 407934743,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1702551446
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/270676-lean4/topic/How.20to.20prove.20.60.C2.AC.28Even.201.29.60.20manually.3F/near/407934684\">said</a>:</p>\n<blockquote>\n<p>(sorry, I think <code>nomatch</code> is mathlib/std)</p>\n</blockquote>\n<p>it's actually the other way round!</p>",
        "id": 407935392,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1702551657
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/270676-lean4/topic/How.20to.20prove.20.60.C2.AC.28Even.201.29.60.20manually.3F/near/407934465\">said</a>:</p>\n<blockquote>\n<p>If you try pattern match, it will give you type errors. You need to use the <code>nomatch</code> keyword, or the <code>match h with .</code> extension in Std (Std/Tactic/NoMatch)</p>\n</blockquote>\n<p>Oh, Very Thank You!<br>\nI thought how to turn type errors in pattern matching into some information (like mata-programming, I am not sure) indeed!<br>\nI think I should read \"The Little Typer\" because I remember this book use recursor directly.</p>",
        "id": 407938154,
        "sender_full_name": "y-samuel",
        "timestamp": 1702552620
    },
    {
        "content": "<p>Generally speaking, programming and proving with recursors directly is quite dreadful. Tactics and pattern matching is much easier! But knowing how they work is part of the fun, and that's what you're doing here, so in that spirit I'll translate a bit of code from The Little Typer into Lean for you. Apologies in advance for unidiomatic Lean - I'm trying to connect Lean syntax to the book, rather than follow proper Lean naming conventions.</p>\n<p>The first step is getting your hands on a recursor. Lean makes one for each inductive type, and it's used to justify the termination of recursive definitions with pattern matching, but let's pretend that we need to write our own in order to get something that looks more like the one in Pie:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">indNat</span> <span class=\"o\">(</span><span class=\"n\">mot</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"n\">mot</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">step</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">mot</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">mot</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">tgt</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">mot</span> <span class=\"n\">tgt</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">base</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">step</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">indNat</span> <span class=\"n\">mot</span> <span class=\"n\">base</span> <span class=\"n\">step</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>It sounds like you understand recursors already, so I won't get into this more. To check your understanding, write the equivalent for lists and binary trees.</p>\n<p>To do the kind of thing you want to do, we need to build the \"no confusion\" lemma for <code>Nat</code>. This states that the constructors of <code>Nat</code> are disjoint (that is, zero never equals successor) and injective (equal successors means their arguments are equal). The way we do this is a bit formulaic, but the explanations in the literature are not so accessible in my opinion - I had a hard time learning them, at least!</p>\n<p>Note that \"no confusion\" says \"assume that these Nats are equal\" and then after that says what the consequences of that equality are. If they're both zero, there's nothing learned. If they're a mix of zero and successor, then their equality implies falsehood (this is the disjointness bit). If they're both successor, then their equality implies the equality of the smaller <code>Nat</code>s under the <code>succ</code> constructor. The \"consequences of equality\" bit can be captured in this function:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">IfEqual</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">k</span>\n</code></pre></div>\n<p>Generally, there's $n^2$ cases for $n$ constructors, and all the off-diagonal ones are <code>False</code> while the on-diagonal ones are the conjunction of the equalities of the constructor arguments.</p>\n<p>Exercises:</p>\n<ol>\n<li>Rewrite <code>IfEqual</code> using <code>indNat</code></li>\n<li>Create the corresponding <code>IfEqual</code> for lists and for binary trees</li>\n</ol>\n<p>The type of \"no confusion\" is now <code>(n k : Nat) (eq : n = k) : IfEqual n k</code>. Check your understanding by instantiating it with some concrete <code>Nat</code>s and see what the resulting statement says.</p>\n<p>Proving this by induction on <code>n</code> and <code>k</code> is not the way forward, however - the false cases are simply disjointness, but that's what we're trying to prove! A little trick is needed: prove only the on-diagonal cases!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ifEqualSelf</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IfEqual</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"n\">indNat</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">IfEqual</span> <span class=\"n\">k</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">True.intro</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>Like <code>IfEqual</code>, this isn't really recursive. Here's another exercise: use <code>indNat</code> to define <code>casesNat</code>, which is like <code>indNat</code> without an induction hypothesis, and then use it here.</p>\n<p>Given the diagonal case, substitution can be used with the equality assumption to prove \"no confusion\" (which I've renamed a bit here to match The Little Typer as best as I remember it - my PDF is on the other computer and the paper version under a pile of stuff right now):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ifEqualThenWhat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">eq</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IfEqual</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n  <span class=\"n\">eq</span> <span class=\"bp\">▸</span> <span class=\"n\">ifEqualSelf</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>This says that if two numbers are equal, then the consequences of that equality hold. Expanding out the four cases for <code>n</code> and <code>k</code>, this is injectivity and disjointness of constructors.</p>\n<p>This is super annoying to use. Here's some examples:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">zeroNotOne</span> <span class=\"o\">(</span><span class=\"n\">eq</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"n\">ifEqualThenWhat</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"n\">eq</span>\n<span class=\"kd\">def</span> <span class=\"n\">zeroNotTwo</span> <span class=\"o\">(</span><span class=\"n\">eq</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"n\">ifEqualThenWhat</span> <span class=\"mi\">0</span> <span class=\"mi\">2</span> <span class=\"n\">eq</span>\n<span class=\"kd\">def</span> <span class=\"n\">oneNotThree</span> <span class=\"o\">(</span><span class=\"n\">eq</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">ifEqualThenWhat</span> <span class=\"mi\">1</span> <span class=\"mi\">3</span> <span class=\"n\">eq</span>\n  <span class=\"n\">ifEqualThenWhat</span> <span class=\"mi\">0</span> <span class=\"mi\">2</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>Exercise: prove that eight doesn't equal fifteen. Write it out in full with no underscores.</p>\n<p>This can be used with the recursor to implement decidable equality of <code>Nat</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Decidable</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">decNatEq</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">indNat</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">indNat</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"n\">isTrue</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">k'</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isFalse</span> <span class=\"o\">(</span><span class=\"n\">ifEqualThenWhat</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">k'</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))))</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n'</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">indNat</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">n'</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"o\">))</span>\n        <span class=\"o\">(</span><span class=\"n\">isFalse</span> <span class=\"o\">(</span><span class=\"n\">ifEqualThenWhat</span> <span class=\"o\">(</span><span class=\"n\">n'</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n        <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">k'</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n           <span class=\"k\">match</span> <span class=\"n\">ih</span> <span class=\"n\">k'</span> <span class=\"k\">with</span>\n           <span class=\"bp\">|</span> <span class=\"n\">isTrue</span> <span class=\"n\">eq</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isTrue</span> <span class=\"o\">(</span><span class=\"n\">congrArg</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">eq</span><span class=\"o\">)</span>\n           <span class=\"bp\">|</span> <span class=\"n\">isFalse</span> <span class=\"n\">notEq</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isFalse</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n'</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">k'</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n             <span class=\"n\">notEq</span> <span class=\"o\">(</span><span class=\"n\">ifEqualThenWhat</span> <span class=\"o\">(</span><span class=\"n\">n'</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k'</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>Exercises:</p>\n<ol>\n<li>Extract the three non-recursive cases into helper lemmas</li>\n<li>Replace the uses of <code>▸</code> and pattern matching on <code>Decidable</code> with recursors a la <code>indNat</code></li>\n<li>Use your dependent cases operation from earlier to simplify <code>decNatEq</code></li>\n<li>Generalize this definition to <code>List</code> and binary trees - the list case will require an input proof that the elements have decidable equality. Do all this with recursors.</li>\n</ol>\n<p>By the time you've done all this, you'll have a good idea of what happens behind the scenes! For more info, read <a href=\"http://www.e-pig.org/downloads/concon.pdf\">A Few Constructions on Constructors</a> by McBride, Goguen, and McKinna - it's got all this and more, and its techniques are an important part of what goes on in Lean.</p>",
        "id": 407979870,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1702566264
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"354934\">David Thrane Christiansen</span> <a href=\"#narrow/stream/270676-lean4/topic/How.20to.20prove.20.60.C2.AC.28Even.201.29.60.20manually.3F/near/407979870\">said</a>:</p>\n<blockquote>\n<p>Generally speaking, programming and proving with recursors directly is quite dreadful. Tactics and pattern matching is much easier! But knowing how they work is part of the fun, and that's what you're doing here, so in that spirit I'll translate a bit of code from The Little Typer into Lean for you. Apologies in advance for unidiomatic Lean - I'm trying to connect Lean syntax to the book, rather than follow proper Lean naming conventions.</p>\n<p>The first step is getting your hands on a recursor. Lean makes one for each inductive type, and it's used to justify the termination of recursive definitions with pattern matching, but let's pretend that we need to write our own in order to get something that looks more like the one in Pie:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">indNat</span> <span class=\"o\">(</span><span class=\"n\">mot</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"n\">mot</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">step</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">mot</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">mot</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">tgt</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">mot</span> <span class=\"n\">tgt</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">base</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">step</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">indNat</span> <span class=\"n\">mot</span> <span class=\"n\">base</span> <span class=\"n\">step</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>It sounds like you understand recursors already, so I won't get into this more. To check your understanding, write the equivalent for lists and binary trees.</p>\n<p>To do the kind of thing you want to do, we need to build the \"no confusion\" lemma for <code>Nat</code>. This states that the constructors of <code>Nat</code> are disjoint (that is, zero never equals successor) and injective (equal successors means their arguments are equal). The way we do this is a bit formulaic, but the explanations in the literature are not so accessible in my opinion - I had a hard time learning them, at least!</p>\n<p>Note that \"no confusion\" says \"assume that these Nats are equal\" and then after that says what the consequences of that equality are. If they're both zero, there's nothing learned. If they're a mix of zero and successor, then their equality implies falsehood (this is the disjointness bit). If they're both successor, then their equality implies the equality of the smaller <code>Nat</code>s under the <code>succ</code> constructor. The \"consequences of equality\" bit can be captured in this function:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">IfEqual</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">k</span>\n</code></pre></div>\n<p>Generally, there's $n^2$ cases for $n$ constructors, and all the off-diagonal ones are <code>False</code> while the on-diagonal ones are the conjunction of the equalities of the constructor arguments.</p>\n<p>Exercises:</p>\n<ol>\n<li>Rewrite <code>IfEqual</code> using <code>indNat</code></li>\n<li>Create the corresponding <code>IfEqual</code> for lists and for binary trees</li>\n</ol>\n<p>The type of \"no confusion\" is now <code>(n k : Nat) (eq : n = k) : IfEqual n k</code>. Check your understanding by instantiating it with some concrete <code>Nat</code>s and see what the resulting statement says.</p>\n<p>Proving this by induction on <code>n</code> and <code>k</code> is not the way forward, however - the false cases are simply disjointness, but that's what we're trying to prove! A little trick is needed: prove only the on-diagonal cases!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ifEqualSelf</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IfEqual</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"n\">indNat</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">IfEqual</span> <span class=\"n\">k</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">True.intro</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>Like <code>IfEqual</code>, this isn't really recursive. Here's another exercise: use <code>indNat</code> to define <code>casesNat</code>, which is like <code>indNat</code> without an induction hypothesis, and then use it here.</p>\n<p>Given the diagonal case, substitution can be used with the equality assumption to prove \"no confusion\" (which I've renamed a bit here to match The Little Typer as best as I remember it - my PDF is on the other computer and the paper version under a pile of stuff right now):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ifEqualThenWhat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">eq</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IfEqual</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n  <span class=\"n\">eq</span> <span class=\"bp\">▸</span> <span class=\"n\">ifEqualSelf</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>This says that if two numbers are equal, then the consequences of that equality hold. Expanding out the four cases for <code>n</code> and <code>k</code>, this is injectivity and disjointness of constructors.</p>\n<p>This is super annoying to use. Here's some examples:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">zeroNotOne</span> <span class=\"o\">(</span><span class=\"n\">eq</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"n\">ifEqualThenWhat</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"n\">eq</span>\n<span class=\"kd\">def</span> <span class=\"n\">zeroNotTwo</span> <span class=\"o\">(</span><span class=\"n\">eq</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"n\">ifEqualThenWhat</span> <span class=\"mi\">0</span> <span class=\"mi\">2</span> <span class=\"n\">eq</span>\n<span class=\"kd\">def</span> <span class=\"n\">oneNotThree</span> <span class=\"o\">(</span><span class=\"n\">eq</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">ifEqualThenWhat</span> <span class=\"mi\">1</span> <span class=\"mi\">3</span> <span class=\"n\">eq</span>\n  <span class=\"n\">ifEqualThenWhat</span> <span class=\"mi\">0</span> <span class=\"mi\">2</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>Exercise: prove that eight doesn't equal fifteen. Write it out in full with no underscores.</p>\n<p>This can be used with the recursor to implement decidable equality of <code>Nat</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Decidable</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">decNatEq</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">indNat</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">indNat</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"n\">isTrue</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">k'</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isFalse</span> <span class=\"o\">(</span><span class=\"n\">ifEqualThenWhat</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">k'</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))))</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n'</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">indNat</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">n'</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"o\">))</span>\n        <span class=\"o\">(</span><span class=\"n\">isFalse</span> <span class=\"o\">(</span><span class=\"n\">ifEqualThenWhat</span> <span class=\"o\">(</span><span class=\"n\">n'</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n        <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">k'</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n           <span class=\"k\">match</span> <span class=\"n\">ih</span> <span class=\"n\">k'</span> <span class=\"k\">with</span>\n           <span class=\"bp\">|</span> <span class=\"n\">isTrue</span> <span class=\"n\">eq</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isTrue</span> <span class=\"o\">(</span><span class=\"n\">congrArg</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">eq</span><span class=\"o\">)</span>\n           <span class=\"bp\">|</span> <span class=\"n\">isFalse</span> <span class=\"n\">notEq</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isFalse</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n'</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">k'</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n             <span class=\"n\">notEq</span> <span class=\"o\">(</span><span class=\"n\">ifEqualThenWhat</span> <span class=\"o\">(</span><span class=\"n\">n'</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k'</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>Exercises:</p>\n<ol>\n<li>Extract the three non-recursive cases into helper lemmas</li>\n<li>Replace the uses of <code>▸</code> and pattern matching on <code>Decidable</code> with recursors a la <code>indNat</code></li>\n<li>Use your dependent cases operation from earlier to simplify <code>decNatEq</code></li>\n<li>Generalize this definition to <code>List</code> and binary trees - the list case will require an input proof that the elements have decidable equality. Do all this with recursors.</li>\n</ol>\n<p>By the time you've done all this, you'll have a good idea of what happens behind the scenes! For more info, read <a href=\"http://www.e-pig.org/downloads/concon.pdf\">A Few Constructions on Constructors</a> by McBride, Goguen, and McKinna - it's got all this and more, and its techniques are an important part of what goes on in Lean.</p>\n</blockquote>\n<p>Thankkkkkk uuuuuuuuu!<br>\nYes, it is fun for me and I want to know the \"details\".<br>\nI will take the time to exercise your ideas!<br>\nAgain, thank you!</p>",
        "id": 408325042,
        "sender_full_name": "y-samuel",
        "timestamp": 1702719864
    },
    {
        "content": "<p>I'm back from vacation. How did the exercises go?</p>",
        "id": 411434164,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1704489469
    },
    {
        "content": "<p>Hi David! I am suprised and happy that you wait my homeworks!Good evening!<br>\nI apologize for the delay. Please forgive me! <span aria-label=\"sob\" class=\"emoji emoji-1f62d\" role=\"img\" title=\"sob\">:sob:</span></p>\n<p>I recently read your book, The Little Typer, and found it to be an excellent resource on dependent types.<br>\nI regret not finishing it a few years ago. However, I am fortunate to have completed it now.<br>\nThe proof of 'front' and 'nat=?' in The Little Typer was astonishing to me until now.<br>\nWhat a creative thinking!</p>\n<p>After reading the little typer, the homework you left become more easier to me.<br>\nPlease let me know if there are any errors.<br>\nThank you very much!</p>\n<p><a href=\"/user_uploads/3121/QGX7qtfAMNQd93GU1j98LRHR/Nat.lean\">Nat.lean</a><br>\n<a href=\"/user_uploads/3121/SpzOp80wTSD326zGe53OFnue/List.lean\">List.lean</a><br>\n<a href=\"/user_uploads/3121/i-rDH4gqK63__NRsGt5z9QLn/Binary.lean\">Binary.lean</a></p>",
        "id": 411602396,
        "sender_full_name": "y-samuel",
        "timestamp": 1704635891
    },
    {
        "content": "<p>Oops, I have discovered how to manually prove 'Even 1 -&gt; False' using the same technique you used to prove 'front'!!!<br>\n<a href=\"/user_uploads/3121/gQbOp9Iwsj1K_jy4AYzYYRgC/NotEven1.lean\">NotEven1.lean</a></p>",
        "id": 411678755,
        "sender_full_name": "y-samuel",
        "timestamp": 1704695763
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"600428\">y-samuel</span> <a href=\"#narrow/stream/270676-lean4/topic/How.20to.20prove.20.60.C2.AC.28Even.201.29.60.20manually.3F/near/411678755\">said</a>:</p>\n<blockquote>\n<p>Oops, I have discovered how to manually prove 'Even 1 -&gt; False' using the same technique you used to prove 'front'!!!<br>\n<a href=\"/user_uploads/3121/gQbOp9Iwsj1K_jy4AYzYYRgC/NotEven1.lean\">NotEven1.lean</a></p>\n</blockquote>\n<p>I apply the recursor method and your technique again to generalize this example.<br>\nThis is difficult for me to say!<br>\n<a href=\"/user_uploads/3121/IflnFTgUfukMsLRJzund_k5A/NotEvenOdd.lean\">NotEvenOdd.lean</a></p>",
        "id": 411701840,
        "sender_full_name": "y-samuel",
        "timestamp": 1704707021
    },
    {
        "content": "<p>you can post code within triple back-ticks (<code> ``` </code>) on this Zulip. It's much better than uploading Lean files (for example I cannot read your messages on mobile).</p>",
        "id": 411703108,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704707444
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/How.20to.20prove.20.60.C2.AC.28Even.201.29.60.20manually.3F/near/411703108\">said</a>:</p>\n<blockquote>\n<p>you can post code within triple back-ticks (<code> ``` </code>) on this Zulip. It's much better than uploading Lean files (for example I cannot read your messages on mobile).</p>\n</blockquote>\n<p>Got it, please wait a minute</p>",
        "id": 411703806,
        "sender_full_name": "y-samuel",
        "timestamp": 1704707681
    },
    {
        "content": "<p>exercises about Binary:</p>\n<div class=\"codehilite\" data-code-language=\"lean4\"><pre><span></span><code>inductive Binary (α : Type u) where\n  | empty : Binary α\n  | single (value : α) : Binary α\n  | branch (left : Binary α) (right : Binary α) : Binary α\n\ndef Binary.IfEqualRef {α : Type u} : Binary α → Binary α → Prop\n  | .empty, .empty =&gt; True\n  | .empty, .single _ =&gt; False\n  | .empty, .branch _ _ =&gt; False\n  | .single _, .empty =&gt; False\n  | .single a, .single b =&gt; a = b\n  | .single _, .branch _ _ =&gt; False\n  | .branch _ _, .empty =&gt; False\n  | .branch _ _, .single _ =&gt; False\n  | .branch al ar, .branch bl br =&gt; al = bl ∧  ar = br\n\ndef indBinary\n  {α : Type u}\n  (motive : Binary α → Sort u1)\n  (empty : motive .empty)\n  (single : (value : α) → motive (.single value))\n  (branch :\n    (left : Binary α) →\n    (right : Binary α) →\n    motive left →\n    motive right →\n    motive (.branch left right))\n    : (target : Binary α) → motive target\n  | .empty =&gt; empty\n  | .single value =&gt; single value\n  | .branch left right =&gt;\n    branch left right\n      (indBinary motive empty single branch left)\n      (indBinary motive empty single branch right)\ndef casesBinary\n  {α : Type u}\n  (motive : Binary α → Sort u1)\n  (empty : motive .empty)\n  (single : (value : α) → motive (.single value))\n  (branch :\n    (left : Binary α) →\n    (right : Binary α) →\n    motive (.branch left right))\n    : (target : Binary α) → motive target :=\n  indBinary\n    motive\n    empty\n    single\n    (fun left right __almost₁ __almost₂ =&gt; branch left right)\n\ndef IfEqual {α : Type u} (left : Binary α) (right : Binary α) : Prop :=\n  casesBinary (fun __k =&gt; Prop)\n    (casesBinary (fun __k =&gt; Prop)\n      True\n      (fun __value =&gt; False)\n      (fun __left __right =&gt; False)\n      right)\n    (fun lv =&gt; casesBinary (fun __k =&gt; Prop)\n      False\n      (fun rv =&gt; lv = rv)\n      (fun __left __right =&gt; False)\n      right)\n    (fun ll lr =&gt;\n      casesBinary (fun __k =&gt; Prop)\n        False\n        (fun __value =&gt; False)\n        (fun rl rr =&gt;\n          ll = rl ∧ lr = rr)\n        right)\n    left\n\ndef IfEqualSelf {α : Type u} : (tree : Binary α) → IfEqual tree tree :=\n  casesBinary\n    (fun k =&gt; IfEqual k k)\n    True.intro\n    (fun v =&gt; Eq.refl v)\n    (fun left right =&gt; And.intro (Eq.refl left) (Eq.refl right))\n\ndef ifEqualThenWhat {α : Type u} (t1 t2 : Binary α) : (eq : t1 = t2) → IfEqual t1 t2 :=\n  Eq.ndrec (motive := fun k =&gt; IfEqual t1 k) (IfEqualSelf t1)\n\ndef emptyNotSingle {α : Type u} (value : α)\n    : Binary.empty = .single value → False :=\n  ifEqualThenWhat Binary.empty (.single value)\ndef emptyNotBranch {α : Type u} (t1 t2 : Binary α)\n    : Binary.empty = .branch t1 t2 → False :=\n  ifEqualThenWhat Binary.empty (.branch t1 t2)\ndef singleNotEmpty {α : Type u} (v : α)\n    : Binary.single v = .empty → False :=\n  ifEqualThenWhat (Binary.single v) .empty\ndef singleNotBranch {α : Type u} (v : α) (t1 t2 : Binary α)\n    : Binary.single v = .branch t1 t2 → False :=\n  ifEqualThenWhat (Binary.single v) (.branch t1 t2)\ndef branchNotEmpty {α : Type u} (t1 t2 : Binary α)\n    : Binary.branch t1 t2 = .empty → False :=\n  ifEqualThenWhat (.branch t1 t2) Binary.empty\ndef branchNotSingle {α : Type u} (t1 t2 : Binary α) (v : α)\n    : Binary.branch t1 t2 = .single v → False :=\n  ifEqualThenWhat (Binary.branch t1 t2) (.single v)\n\nopen Decidable in\ndef decBinaryEq\n    (α : Type u)\n    [DecidableEq α]\n    : (t1 t2 : Binary α) → Decidable (t1 = t2) :=\n  indBinary\n    (fun t1 =&gt; ∀ k, Decidable (t1 = k))\n    -- empty\n    (fun k =&gt; casesBinary (fun k =&gt; Decidable (.empty = k))\n      (isTrue (Eq.refl Binary.empty))\n      (fun v =&gt; isFalse (emptyNotSingle v))\n      (fun rl rr =&gt; isFalse (emptyNotBranch rl rr))\n      k)\n    -- single\n    (fun v k =&gt; casesBinary (fun k =&gt; Decidable (.single v = k))\n      (isFalse (singleNotEmpty v))\n      (fun v' =&gt; @Decidable.casesOn (v = v')\n        (fun __k =&gt; Decidable (Binary.single v = .single v'))\n        (decEq v v')\n        (fun neq =&gt; isFalse (fun eqSingle =&gt;\n          neq (ifEqualThenWhat (.single v) (.single v') eqSingle)))\n        (fun eq =&gt; isTrue (congrArg (Binary.single) eq)))\n      (fun rl rr =&gt; isFalse (singleNotBranch v rl rr))\n      k)\n    -- branch\n    (fun ll lr ihl ihr k =&gt; casesBinary (fun k =&gt; Decidable (.branch ll lr = k))\n      (isFalse (branchNotEmpty ll lr))\n      (fun v' =&gt; isFalse (branchNotSingle ll lr v'))\n      (fun rl rr =&gt; @Decidable.casesOn (ll = rl)\n        (fun __k =&gt; Decidable (Binary.branch ll lr = .branch rl rr))\n        (ihl rl)\n        (fun neq : ¬ ll = rl =&gt; @Decidable.casesOn (lr = rr)\n          (fun __k =&gt; Decidable (Binary.branch  ll lr = .branch rl rr))\n          (ihr rr)\n          (fun neq' : ¬ lr = rr =&gt; isFalse (fun notEq : Binary.branch ll lr = Binary.branch rl rr =&gt;\n            neq' (ifEqualThenWhat (Binary.branch ll lr) (.branch rl rr) notEq).right))\n          (fun __eq : lr = rr =&gt; isFalse (fun notEq : Binary.branch ll lr = Binary.branch rl rr =&gt;\n            neq (ifEqualThenWhat (Binary.branch ll lr) (.branch rl rr) notEq).left)))\n        (fun eq : ll = rl =&gt; @Decidable.casesOn (lr = rr)\n          (fun __k =&gt; Decidable (Binary.branch ll lr = .branch rl rr))\n          (ihr rr)\n          (fun neq' : ¬ lr = rr =&gt; isFalse (fun notEq : Binary.branch ll lr = Binary.branch rl rr =&gt;\n            neq' (ifEqualThenWhat (Binary.branch ll lr) (.branch rl rr) notEq).right))\n          (fun eq' : lr = rr =&gt; isTrue (Eq.ndrec\n            (motive := fun k =&gt; Binary.branch ll lr = .branch k rr)\n            (congrArg (Binary.branch ll) eq')\n            eq))))\n      k)\n</code></pre></div>",
        "id": 411704608,
        "sender_full_name": "y-samuel",
        "timestamp": 1704707961
    },
    {
        "content": "<p>For all odd n, Even n is False:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">indNat</span>\n    <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"n\">motive</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">step</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n    <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">target</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">target</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">base</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">step</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">indNat</span> <span class=\"n\">motive</span> <span class=\"n\">base</span> <span class=\"n\">step</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">IfEqual</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Nat.casesOn</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">__k</span> <span class=\"bp\">=&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"n\">a</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Nat.casesOn</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">__k</span> <span class=\"bp\">=&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"n\">b</span>\n      <span class=\"n\">True</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">__k'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"bp\">@</span><span class=\"n\">Nat.casesOn</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">__k</span> <span class=\"bp\">=&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"n\">b</span>\n        <span class=\"n\">False</span>\n        <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">j</span><span class=\"o\">)))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ifEqualSelf</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IfEqual</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">@</span><span class=\"n\">Nat.casesOn</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">IfEqual</span> <span class=\"n\">k</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">n</span>\n    <span class=\"n\">True.intro</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Eq.refl</span> <span class=\"n\">n'</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ifEqualThenWhat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">eq</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">IfEqual</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Eq.ndrec</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">IfEqual</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ifEqualSelf</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">zeroNotSucc</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">False</span> <span class=\"o\">:=</span>\n  <span class=\"n\">ifEqualThenWhat</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">succNotZero</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">False</span> <span class=\"o\">:=</span>\n  <span class=\"n\">ifEqualThenWhat</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">0</span>\n<span class=\"kd\">def</span> <span class=\"n\">succInjective</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n  <span class=\"n\">ifEqualThenWhat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">numberNotSucc</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">False</span> <span class=\"o\">:=</span>\n  <span class=\"n\">indNat</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">False</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">zeroNotSucc</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n'</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">fun</span> <span class=\"n\">eq</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ih</span> <span class=\"o\">(</span><span class=\"n\">succInjective</span> <span class=\"n\">n'</span> <span class=\"o\">(</span><span class=\"n\">n'</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">eq</span><span class=\"o\">))</span>\n    <span class=\"n\">n</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Even</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">add_two</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Even</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">Even</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">notEven1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">Even</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">@</span><span class=\"n\">Even.casesOn</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"n\">__ek</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">False</span><span class=\"o\">)</span>\n      <span class=\"mi\">1</span> <span class=\"n\">h</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">eq</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">zeroNotSucc</span> <span class=\"mi\">0</span> <span class=\"n\">eq</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"n\">__ek</span> <span class=\"n\">eq</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">succNotZero</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">succInjective</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"n\">eq</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"n\">Eq.refl</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">notEven3</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">Even</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"mi\">3</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">@</span><span class=\"n\">Even.casesOn</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"n\">__ek</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">False</span><span class=\"o\">)</span>\n      <span class=\"mi\">3</span> <span class=\"n\">h</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">eq</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">zeroNotSucc</span> <span class=\"mi\">2</span> <span class=\"n\">eq</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"n\">ek</span> <span class=\"n\">eq</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">let</span> <span class=\"n\">kEq1</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">succInjective</span> <span class=\"n\">k</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">succInjective</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">2</span> <span class=\"n\">eq</span><span class=\"o\">)</span>\n        <span class=\"k\">let</span> <span class=\"n\">even1</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">Eq.ndrec</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Even</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">ek</span> <span class=\"n\">kEq1</span>\n        <span class=\"n\">notEven1</span> <span class=\"n\">even1</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">Eq.refl</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Even.ind</span>\n    <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Even</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"n\">motive</span> <span class=\"n\">Nat.zero</span> <span class=\"n\">Even.zero</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">step</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">ek</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">k</span> <span class=\"n\">ek</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">add_two</span> <span class=\"n\">k</span> <span class=\"n\">ek</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n    <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">target</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">k</span> <span class=\"n\">target</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Even.zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">base</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Even.add_two</span> <span class=\"n\">k</span> <span class=\"n\">ek</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">step</span> <span class=\"n\">k</span> <span class=\"n\">ek</span> <span class=\"o\">(</span><span class=\"n\">Even.ind</span> <span class=\"n\">motive</span> <span class=\"n\">base</span> <span class=\"n\">step</span> <span class=\"n\">k</span> <span class=\"n\">ek</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">notEvenOdd</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Even</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">False</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">Even.ind</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"n\">__ek</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">False</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">eq</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">zeroNotSucc</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">eq</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"n\">__ek</span> <span class=\"n\">almost</span> <span class=\"n\">i</span> <span class=\"n\">eq</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">@</span><span class=\"n\">Nat.casesOn</span>\n        <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">k1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">k1</span> <span class=\"bp\">→</span> <span class=\"n\">False</span><span class=\"o\">)</span>\n        <span class=\"n\">i</span>\n        <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i_is_0</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"k\">let</span> <span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n            <span class=\"n\">Eq.ndrec</span>\n              <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">k1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n              <span class=\"n\">eq</span> <span class=\"n\">i_is_0</span>\n          <span class=\"n\">succNotZero</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">succInjective</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"n\">h₀</span><span class=\"o\">))</span>\n        <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i₁</span> <span class=\"n\">i_is_succ_i₁</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"k\">let</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">i₁</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n            <span class=\"n\">Eq.ndrec</span>\n              <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">k1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n              <span class=\"n\">eq</span> <span class=\"n\">i_is_succ_i₁</span>\n          <span class=\"k\">let</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">i₁</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n            <span class=\"n\">succInjective</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">i₁</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n              <span class=\"o\">(</span><span class=\"n\">succInjective</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">i₁</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">h₁</span><span class=\"o\">)</span>\n          <span class=\"n\">almost</span> <span class=\"n\">i₁</span> <span class=\"n\">h₂</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"n\">Eq.refl</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n      <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">Eq.refl</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 411705238,
        "sender_full_name": "y-samuel",
        "timestamp": 1704708138
    },
    {
        "content": "<p>exercises about List:</p>\n<div class=\"codehilite\" data-code-language=\"def\"><pre><span></span><code>  | .nil, .nil =&gt; True\n  | .cons _ _, .nil =&gt; False\n  | .nil, .cons _ _ =&gt; False\n  | .cons a as, .cons b bs =&gt; a = b ∧ as = bs\n\ndef indList\n    {α : Type u}\n    (motive : List α → Sort u1)\n    (base : motive .nil)\n    (step : (a : α) → (as : List α) → motive as → motive (.cons a as))\n    : (target : List α) → motive target\n  | .nil =&gt; base\n  | .cons a as =&gt; step a as (indList motive base step as)\ndef casesList\n    {α : Type u}\n    (motive : List α → Sort u1)\n    (base : motive .nil)\n    (step : (a : α) → (as : List α) → motive (.cons a as))\n    : (target : List α) → motive target :=\n  indList motive base (fun a as __almost =&gt; step a as)\n\ndef IfEqual₁ {α : Type u} (as : List α) (bs : List α) : Prop :=\n  indList (fun __k =&gt; Prop)\n    (indList (fun __k =&gt; Prop)\n      True\n      (fun __b __bs __almost =&gt; False)\n      bs)\n    (fun a as __almost =&gt;\n      indList (fun __k =&gt; Prop)\n        False\n        (fun b bs __almost =&gt; a = b ∧ as = bs)\n        bs)\n    as\n\ndef IfEqual {α : Type u} (as : List α) (bs : List α) : Prop :=\n  casesList (fun __k =&gt; Prop)\n    (casesList (fun __k =&gt; Prop)\n      True\n      (fun __b __bs =&gt; False)\n      bs)\n    (fun a as =&gt;\n      casesList (fun __k =&gt; Prop)\n        False\n        (fun b bs =&gt; a = b ∧ as = bs)\n        bs)\n    as\n\ndef IfEqualSelf {α : Type u} : (ns : List α) → IfEqual ns ns :=\n  casesList\n    (fun k =&gt; IfEqual k k)\n    True.intro\n    (fun x xs =&gt; And.intro (Eq.refl x) (Eq.refl xs))\n\ndef ifEqualThenWhat\n    {α : Type u}\n    (xs ys : List α)\n    : (eq : xs = ys) → IfEqual xs ys :=\n  Eq.ndrec (motive := fun k =&gt; IfEqual xs k)\n    (IfEqualSelf xs)\n\ndef nilNotCons\n    {α : Type u}\n    (x : α)\n    (xs : List α)\n    : List.nil = .cons x xs → False :=\n  ifEqualThenWhat .nil (.cons x xs)\ndef consNotNil\n    {α : Type u}\n    (x : α)\n    (xs : List α)\n    : List.cons x xs = .nil → False :=\n  ifEqualThenWhat (.cons x xs) .nil\ndef consInjective\n    {α : Type u}\n    (x y : α)\n    (xs ys : List α)\n    : List.cons x xs = List.cons y ys → x = y ∧ xs = ys :=\n  ifEqualThenWhat (.cons x xs) (.cons y ys)\n\nopen Decidable in\ndef decListEq (α : Type u) [DecidableEq α] : (as bs : List α) → Decidable (as = bs) :=\n  indList (fun xs =&gt; ∀ k, Decidable (xs = k))\n    (casesList (fun k =&gt; Decidable (.nil = k))\n      (isTrue rfl)\n      (fun y ys =&gt; isFalse (nilNotCons y ys)))\n    (fun x xs ih =&gt;\n      casesList (fun k =&gt; Decidable (.cons x xs = k))\n        (isFalse (consNotNil x xs))\n        (fun y ys =&gt; @Decidable.casesOn (xs = ys)\n          (fun __k =&gt; Decidable (List.cons x xs = .cons y ys))\n          (ih ys)\n          (fun neq =&gt; isFalse\n            fun (h : List.cons x xs = .cons y ys) =&gt;\n              neq (consInjective x y xs ys h).right)\n          (fun eqxs =&gt; @Decidable.casesOn (x = y)\n            (fun __k =&gt; Decidable (List.cons x xs = .cons y ys))\n            (decEq x y)\n            (fun neq =&gt; isFalse\n              fun (h : List.cons x xs = .cons y ys) =&gt;\n                neq (consInjective x y xs ys h).left)\n            (fun eqx =&gt; isTrue\n              (Eq.ndrec\n                (motive := fun k =&gt; List.cons x xs = List.cons k ys)\n                (congrArg (List.cons x ·) eqxs)\n                eqx)))))\n</code></pre></div>",
        "id": 411705352,
        "sender_full_name": "y-samuel",
        "timestamp": 1704708174
    },
    {
        "content": "<p>exercises about Nat:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">IfEqual₀</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">k</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">indNat</span>\n    <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"n\">motive</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">step</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n    <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">target</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">target</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">base</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">step</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">indNat</span> <span class=\"n\">motive</span> <span class=\"n\">base</span> <span class=\"n\">step</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">casesNat</span>\n    <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"n\">motive</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">step</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n    <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">target</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">target</span> <span class=\"o\">:=</span>\n  <span class=\"n\">indNat</span> <span class=\"n\">motive</span> <span class=\"n\">base</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"n\">__almost</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">step</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">IfEqual</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">casesNat</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">__k</span> <span class=\"bp\">=&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">casesNat</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">__k</span> <span class=\"bp\">=&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n      <span class=\"n\">True</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">__k'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False</span><span class=\"o\">)</span>\n      <span class=\"n\">b</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">casesNat</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">__k</span> <span class=\"bp\">=&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n        <span class=\"n\">False</span>\n        <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n        <span class=\"n\">b</span><span class=\"o\">)</span>\n    <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ifEqualSelfIndNat</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">IfEqual</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"n\">indNat</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">IfEqual</span> <span class=\"n\">k</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n    <span class=\"n\">True.intro</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">smaller</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Eq.refl</span> <span class=\"n\">smaller</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ifEqualSelf</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">IfEqual</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"n\">casesNat</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">IfEqual</span> <span class=\"n\">k</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n    <span class=\"n\">True.intro</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Eq.refl</span> <span class=\"n\">n'</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ifEqualThenWhat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">eq</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">IfEqual</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n  <span class=\"c1\">-- eq ▸ ifEqualSelf n</span>\n  <span class=\"n\">Eq.ndrec</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">IfEqual</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ifEqualSelf</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">zeroNotOne</span> <span class=\"o\">(</span><span class=\"n\">eq</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"n\">ifEqualThenWhat</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"n\">eq</span>\n<span class=\"kd\">def</span> <span class=\"n\">zeroNotTwo</span> <span class=\"o\">(</span><span class=\"n\">eq</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"n\">ifEqualThenWhat</span> <span class=\"mi\">0</span> <span class=\"mi\">2</span> <span class=\"n\">eq</span>\n<span class=\"kd\">def</span> <span class=\"n\">oneNotThree</span> <span class=\"o\">(</span><span class=\"n\">eq</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">ifEqualThenWhat</span> <span class=\"mi\">1</span> <span class=\"mi\">3</span> <span class=\"n\">eq</span>\n  <span class=\"n\">ifEqualThenWhat</span> <span class=\"mi\">0</span> <span class=\"mi\">2</span> <span class=\"n\">h</span>\n<span class=\"kd\">def</span> <span class=\"n\">eightNoFifteen</span> <span class=\"o\">(</span><span class=\"n\">eq</span> <span class=\"o\">:</span> <span class=\"mi\">8</span> <span class=\"bp\">=</span> <span class=\"mi\">15</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">h₇</span> <span class=\"o\">:</span> <span class=\"mi\">7</span> <span class=\"bp\">=</span> <span class=\"mi\">14</span> <span class=\"o\">:=</span> <span class=\"n\">ifEqualThenWhat</span> <span class=\"mi\">8</span> <span class=\"mi\">15</span> <span class=\"n\">eq</span>\n  <span class=\"k\">let</span> <span class=\"n\">h₆</span> <span class=\"o\">:</span> <span class=\"mi\">6</span> <span class=\"bp\">=</span> <span class=\"mi\">13</span> <span class=\"o\">:=</span> <span class=\"n\">ifEqualThenWhat</span> <span class=\"mi\">7</span> <span class=\"mi\">14</span> <span class=\"n\">h₇</span>\n  <span class=\"k\">let</span> <span class=\"n\">h₅</span> <span class=\"o\">:</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">12</span> <span class=\"o\">:=</span> <span class=\"n\">ifEqualThenWhat</span> <span class=\"mi\">6</span> <span class=\"mi\">13</span> <span class=\"n\">h₆</span>\n  <span class=\"k\">let</span> <span class=\"n\">h₄</span> <span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"mi\">11</span> <span class=\"o\">:=</span> <span class=\"n\">ifEqualThenWhat</span> <span class=\"mi\">5</span> <span class=\"mi\">12</span> <span class=\"n\">h₅</span>\n  <span class=\"k\">let</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">10</span> <span class=\"o\">:=</span> <span class=\"n\">ifEqualThenWhat</span> <span class=\"mi\">4</span> <span class=\"mi\">11</span> <span class=\"n\">h₄</span>\n  <span class=\"k\">let</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">9</span> <span class=\"o\">:=</span> <span class=\"n\">ifEqualThenWhat</span> <span class=\"mi\">3</span> <span class=\"mi\">10</span> <span class=\"n\">h₃</span>\n  <span class=\"k\">let</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">8</span> <span class=\"o\">:=</span> <span class=\"n\">ifEqualThenWhat</span> <span class=\"mi\">2</span> <span class=\"mi\">9</span> <span class=\"n\">h₂</span>\n  <span class=\"k\">let</span> <span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">7</span> <span class=\"o\">:=</span> <span class=\"n\">ifEqualThenWhat</span> <span class=\"mi\">1</span> <span class=\"mi\">8</span> <span class=\"n\">h₁</span>\n  <span class=\"n\">ifEqualThenWhat</span> <span class=\"mi\">0</span> <span class=\"mi\">7</span> <span class=\"n\">h₀</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">zeroNotSucc</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">False</span> <span class=\"o\">:=</span>\n  <span class=\"n\">ifEqualThenWhat</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">succNotZero</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">False</span> <span class=\"o\">:=</span>\n  <span class=\"n\">ifEqualThenWhat</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">0</span>\n<span class=\"kd\">def</span> <span class=\"n\">succInjective</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n  <span class=\"n\">ifEqualThenWhat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Decidable</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">decNatEq₀</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">indNat</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∀</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">j</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">casesNat</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"n\">isTrue</span> <span class=\"o\">(</span><span class=\"n\">Eq.refl</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">j'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isFalse</span> <span class=\"o\">(</span><span class=\"n\">zeroNotSucc</span> <span class=\"n\">j'</span><span class=\"o\">)))</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n'</span> <span class=\"n\">almost</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">casesNat</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">n'</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"n\">isFalse</span> <span class=\"o\">(</span><span class=\"n\">succNotZero</span> <span class=\"n\">n'</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">j'</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">almost</span> <span class=\"n\">j'</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"n\">isFalse</span> <span class=\"n\">neq</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isFalse</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">eq</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">neq</span> <span class=\"o\">(</span><span class=\"n\">ifEqualThenWhat</span> <span class=\"o\">(</span><span class=\"n\">n'</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j'</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">eq</span><span class=\"o\">))</span>\n        <span class=\"bp\">|</span> <span class=\"n\">isTrue</span> <span class=\"n\">eq</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isTrue</span> <span class=\"o\">(</span><span class=\"n\">Eq.ndrec</span>\n          <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n'</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"n\">Eq.refl</span> <span class=\"o\">(</span><span class=\"n\">n'</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">eq</span><span class=\"o\">))</span>\n      <span class=\"n\">j</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Decidable</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">indDecidable</span>\n    <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">false</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">no</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"n\">isFalse</span> <span class=\"n\">no</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">true</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">yes</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"n\">isTrue</span> <span class=\"n\">yes</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">target</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">motive</span> <span class=\"n\">target</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">target</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">isFalse</span> <span class=\"n\">no</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span> <span class=\"n\">no</span>\n  <span class=\"bp\">|</span> <span class=\"n\">isTrue</span> <span class=\"n\">yes</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span> <span class=\"n\">yes</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Decidable</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">decNatEq</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">indNat</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">casesNat</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"n\">isTrue</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">k'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isFalse</span> <span class=\"o\">(</span><span class=\"n\">zeroNotSucc</span> <span class=\"n\">k'</span><span class=\"o\">)))</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n'</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">casesNat</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">n'</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"o\">))</span>\n        <span class=\"o\">(</span><span class=\"n\">isFalse</span> <span class=\"o\">(</span><span class=\"n\">succNotZero</span> <span class=\"n\">n'</span><span class=\"o\">))</span>\n        <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">k'</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">@</span><span class=\"n\">Decidable.casesOn</span> <span class=\"o\">(</span><span class=\"n\">n'</span> <span class=\"bp\">=</span> <span class=\"n\">k'</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">__k</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">n'</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">k'</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n          <span class=\"o\">(</span><span class=\"n\">ih</span> <span class=\"n\">k'</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">neq</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isFalse</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n'</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">k'</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">neq</span> <span class=\"o\">(</span><span class=\"n\">succInjective</span> <span class=\"n\">n'</span> <span class=\"n\">k'</span> <span class=\"n\">h</span><span class=\"o\">))</span>\n          <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">eq</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isTrue</span> <span class=\"o\">(</span><span class=\"n\">congrArg</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">eq</span><span class=\"o\">))))</span>\n</code></pre></div>",
        "id": 411705397,
        "sender_full_name": "y-samuel",
        "timestamp": 1704708190
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/How.20to.20prove.20.60.C2.AC.28Even.201.29.60.20manually.3F/near/411703108\">said</a>:</p>\n<blockquote>\n<p>you can post code within triple back-ticks (<code> ``` </code>) on this Zulip. It's much better than uploading Lean files (for example I cannot read your messages on mobile).</p>\n</blockquote>\n<p>It is excessively long...</p>",
        "id": 411705744,
        "sender_full_name": "y-samuel",
        "timestamp": 1704708311
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"600428\">y-samuel</span> <a href=\"#narrow/stream/270676-lean4/topic/How.20to.20prove.20.60.C2.AC.28Even.201.29.60.20manually.3F/near/411705238\">said</a>:</p>\n<blockquote>\n<p>For all odd n, Even n is False:</p>\n</blockquote>\n<p>I find that proof by pattern matching is simpler.<br>\nIt automatically replaces variables, such as <code>i = Nat.succ i1</code>, with identity types.<br>\nDoes the match-patterning algorithm perform the same function as my code (<code>fun k1 =&gt; n = k1 -&gt; False</code> and so on) behind the scenes?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">notEvenOdd₀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Even</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">False</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">Even.ind</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"n\">__ek</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">False</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">eq</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">zeroNotSucc</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">eq</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"n\">__ek</span> <span class=\"n\">almost</span> <span class=\"n\">i</span> <span class=\"n\">eq</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">match</span> <span class=\"n\">i</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"n\">Nat.zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">succNotZero</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">succInjective</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"n\">eq</span><span class=\"o\">)</span>\n        <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">i₁</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">almost</span> <span class=\"n\">i₁</span>\n            <span class=\"o\">(</span><span class=\"n\">succInjective</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">i₁</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n              <span class=\"o\">(</span><span class=\"n\">succInjective</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">i₁</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">eq</span><span class=\"o\">)))</span>\n      <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n      <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">Eq.refl</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 411722090,
        "sender_full_name": "y-samuel",
        "timestamp": 1704714175
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/How.20to.20prove.20.60.C2.AC.28Even.201.29.60.20manually.3F/near/411703108\">said</a>:</p>\n<blockquote>\n<p>you can post code within triple back-ticks (<code> ``` </code>) on this Zulip. It's much better than uploading Lean files (for example I cannot read your messages on mobile).</p>\n</blockquote>\n<p>Hi, I am sorry to find you are the author of the post <a href=\"https://xenaproject.wordpress.com/2018/03/24/no-confusion-over-no_confusion/\">No confusion over no_confusion</a> now!<br>\nI read it before reading the little typer! it's very innovative and make me \"no confusion\" a little, LOL!<br>\nThank you so much!</p>",
        "id": 411747729,
        "sender_full_name": "y-samuel",
        "timestamp": 1704723768
    }
]