[
    {
        "content": "<p>When there's an error that triggers the error-to-sorry feature, you don't get the local context at the term that has the error.</p>\n<p>In the following, if you move your cursor right before <code>b</code>, you don't see the context, but if you move right before <code>id</code> you do.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">id</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>But in this one, you don't get any context at all, presumably because the application elaborator gives up.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">a'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">id</span> <span class=\"n\">b</span> <span class=\"mi\">2</span>\n</code></pre></div>\n<p>This is reflected in the terms you get:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#print</span> <span class=\"n\">a</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">def a : Nat → Nat :=</span>\n<span class=\"cm\">fun x =&gt; id (sorryAx Nat true)</span>\n<span class=\"cm\">-/</span>\n<span class=\"k\">#print</span> <span class=\"n\">a'</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">def a' : Nat → Nat :=</span>\n<span class=\"cm\">fun x =&gt; sorryAx Nat true</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 429132554,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711241630
    },
    {
        "content": "<p>Does anyone know what's going on? It would be nice to be able to see the local context at the point of an error. The only workaround I know is to replace the offending subterm with <code>_</code> or <code>sorry</code>, and then you can see the local context there.</p>",
        "id": 429132639,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711241690
    },
    {
        "content": "<p>(This came up in <a href=\"#narrow/stream/113488-general/topic/Small.20Scale.20Reflection.20for.20the.20Working.20Lean.20user/near/428396800\">this message</a>, where it was thought that because incomplete terms don't show the local context that it doesn't exist. It certainly exists, but it's not clear why it's not being shown.)</p>",
        "id": 429132794,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711241823
    },
    {
        "content": "<p>This behavior seems consistent with error-to-sorry not producing an info node</p>",
        "id": 429159524,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711260167
    },
    {
        "content": "<p>is there a reason you believe this is not the case?</p>",
        "id": 429159545,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711260188
    },
    {
        "content": "<p>in the first example <code>id _</code> elaborates successfully and <code>b</code> fails (and doesn't leave an info node), and in the second example <code>id _ _</code> fails (and doesn't leave an info node)</p>",
        "id": 429159605,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711260235
    },
    {
        "content": "<p>...oh. Looks like this is <a href=\"https://github.com/leanprover/lean4/blob/655ec964f5d6b0810ce0e517a6b3bbb3d5186d25/src/Lean/Server/InfoUtils.lean#L229-L232\">explicitly coded in</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">res</span><span class=\"bp\">?</span> <span class=\"k\">then</span>\n    <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">ofTermInfo</span> <span class=\"n\">ti</span> <span class=\"o\">:=</span> <span class=\"n\">i.info</span> <span class=\"k\">then</span>\n      <span class=\"k\">if</span> <span class=\"n\">ti.expr.isSyntheticSorry</span> <span class=\"k\">then</span>\n        <span class=\"n\">return</span> <span class=\"n\">none</span>\n</code></pre></div>",
        "id": 429160619,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711261266
    },
    {
        "content": "<p>this gets called from <code>InfoTree.termGoalAt?</code>which is used by the <code>plainTermGoal</code> request</p>",
        "id": 429160655,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711261304
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/No.20local.20context.20when.20there.20is.20an.20error/near/429159524\">said</a>:</p>\n<blockquote>\n<p>This behavior seems consistent with error-to-sorry not producing an info node</p>\n</blockquote>\n<p>When I was poking around, it looked like error-to-sorry was supposed to produce an info node like anything else, but I didn't get to the point of looking at the info trees to check.</p>",
        "id": 429169570,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711267453
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/No.20local.20context.20when.20there.20is.20an.20error/near/429160619\">said</a>:</p>\n<blockquote>\n<p>...oh. Looks like this is <a href=\"https://github.com/leanprover/lean4/blob/655ec964f5d6b0810ce0e517a6b3bbb3d5186d25/src/Lean/Server/InfoUtils.lean#L229-L232\">explicitly coded in</a></p>\n</blockquote>\n<p>Thanks for finding that. I had a suspicion it might have to do with the server, but I wasn't sure where to look.</p>",
        "id": 429169605,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711267504
    },
    {
        "content": "<p>Commenting out that block results in the following \"expected type\" infoviews with the cursors right before the <code>^</code>s:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">id</span> <span class=\"n\">b</span>\n<span class=\"c\">/-</span><span class=\"cm\">                          ^</span>\n<span class=\"cm\">x : Nat</span>\n<span class=\"cm\">⊢ Nat</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">a'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">id</span> <span class=\"n\">b</span> <span class=\"mi\">2</span>\n<span class=\"c\">/-</span><span class=\"cm\">                           ^</span>\n<span class=\"cm\">x : Nat</span>\n<span class=\"cm\">⊢ ?m.973</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 429171763,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711269134
    },
    {
        "content": "<p>This is when a sorry check was originally added: <a href=\"https://github.com/leanprover/lean4/commit/736d32c0262e8324135681f71917dceab85795ec\">https://github.com/leanprover/lean4/commit/736d32c0262e8324135681f71917dceab85795ec</a></p>\n<p>It looks like it might have been for parse errors originally, rather than elaboration errors.</p>",
        "id": 429173462,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711270361
    }
]