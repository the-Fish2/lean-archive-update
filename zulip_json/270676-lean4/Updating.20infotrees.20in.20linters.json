[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover/lean4/blob/8437d1f660915e9e8f6789be4399b8d3ab6d9a79/src/Lean/Elab/Command.lean#L252-L266\">this code</a>, it looks like <code>runLinters</code> discards any updates the linter makes to the infotrees.</p>\n<p>Is this a deliberate choice? My impression is that this means it's not possible for a linter to add a tryThis suggestion.</p>",
        "id": 442567502,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717517195
    },
    {
        "content": "<p>I don't know if it is deliberate, but I was under the impression that linter were indeed not able to provide <code>Try this</code> suggestions.</p>",
        "id": 442570097,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717517842
    },
    {
        "content": "<p>I think replacing</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gd\">-modify fun s =&gt; { savedState with messages := s.messages }</span>\n<span class=\"gi\">+modify fun s =&gt; { savedState with messages := s.messages, infoState := s.infoState }</span>\n</code></pre></div>\n<p>would fix that</p>",
        "id": 442570190,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717517873
    },
    {
        "content": "<p>That would be highly desirable, in my opinion!</p>",
        "id": 442570585,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717517983
    },
    {
        "content": "<p>Would that also fix the <code>#guard_msgs</code> not silencing (some) linters?  Or is that an independent issue?</p>",
        "id": 442570593,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717517986
    },
    {
        "content": "<p>I think it would be great to let linters modify infotrees somehow, though I wonder if we would want some sort of opt-in on the linter’s end. Or maybe just saying “remember to wrap your linters in (e.g.) <code>withoutModifyingInfoTrees</code> if you don’t want them to modify infotrees” is enough?</p>",
        "id": 442665399,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1717549234
    },
    {
        "content": "<p>(Also, for completeness, I’ll link this earlier related thread: <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/code.20actions.20in.20linters\">#general &gt; code actions in linters</a>)</p>",
        "id": 442665934,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1717549406
    },
    {
        "content": "<p>I <em>think</em> this would be okay, and the payoff is pretty good. Can we RFC?</p>",
        "id": 442670435,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1717551240
    },
    {
        "content": "<p>I don't have a good feeling for Thomas' worry above, as I don't really know which actions create new infotrees. I guess the danger is that you end up duplicating hovers somehow?</p>",
        "id": 442671124,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717551491
    },
    {
        "content": "<p>I tried this out:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gd\">--- a/src/Lean/Elab/Command.lean</span>\n<span class=\"gi\">+++ b/src/Lean/Elab/Command.lean</span>\n<span class=\"gu\">@@ -215,7 +215,7 @@ def runLinters (stx : Syntax) : CommandE</span>\n<span class=\"w\"> </span>            catch ex =&gt;\n<span class=\"w\"> </span>              logException ex\n<span class=\"w\"> </span>            finally\n<span class=\"gd\">-              modify fun s =&gt; { savedState with messages := s.messages }</span>\n<span class=\"gi\">+              modify fun s =&gt; { savedState with messages := s.messages, infoState := s.infoState, traceState := s.traceState }</span>\n\n<span class=\"w\"> </span>protected def getCurrMacroScope : CommandElabM Nat  := do pure (← read).currMacroScope\n<span class=\"w\"> </span>protected def getMainModule     : CommandElabM Name := do pure (← getEnv).mainModule\n</code></pre></div>\n<p>and can confirm it makes \"try this\" work</p>",
        "id": 442747091,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717582818
    },
    {
        "content": "<p>It also leads to a lot of <code>PANIC at Lean.Elab.InfoTree.visitM.go Lean.Server.InfoUtils:52:21: unexpected context-free info tree node</code>s while building lean itself</p>",
        "id": 442747154,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717582839
    },
    {
        "content": "<p>The cause is that <code>withSetOptionIn</code> creates a contextless info tree node</p>",
        "id": 442749661,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717583646
    },
    {
        "content": "<p>Or perhaps that <code>runLinters</code> is called without an enclosing <code>withInfoTreeContext</code></p>",
        "id": 442752283,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717584589
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/4363\">lean4#4363</a> is the RFC</p>",
        "id": 442761375,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717587284
    }
]