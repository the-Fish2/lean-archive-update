[
    {
        "content": "<p>Python has an extended version of <code>try</code>/<code>catch</code> (there, <code>except</code>) which has an <code>else</code> clause:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">try</span><span class=\"p\">:</span>\n   <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">foo</span><span class=\"p\">()</span>\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n   <span class=\"n\">bar</span><span class=\"p\">()</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n   <span class=\"n\">baz</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>which has semantics:</p>\n<ul>\n<li><code>foo</code> crashes -&gt; run <code>bar</code>. If <code>bar</code> crashes, propagate the error</li>\n<li><code>foo</code> succeeds -&gt; run <code>baz</code>. If <code>baz</code> crashes, propagate the error</li>\n</ul>\n<p>For what I can tell, Lean only offers</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">foo1</span> <span class=\"n\">foo2</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Int</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">baz</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">MetaM</span> <span class=\"n\">Int</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">try</span>\n    <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">foo1</span>\n    <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"bp\">←</span> <span class=\"n\">foo2</span>\n    <span class=\"n\">baz</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n  <span class=\"n\">catch</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">bar</span>\n</code></pre></div>\n<p>which has the wrong semantics when <code>baz</code> fails of also catching <em>that</em> error.</p>",
        "id": 417632449,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706098361
    },
    {
        "content": "<p>I can write this as a workaround:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">ret</span> <span class=\"bp\">←</span> <span class=\"n\">try</span>\n      <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">foo1</span>\n      <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"bp\">←</span> <span class=\"n\">foo2</span>\n      <span class=\"n\">pure</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Sum.inl</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n    <span class=\"n\">catch</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">pure</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Sum.inr</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">bar</span><span class=\"o\">)</span>\n  <span class=\"k\">match</span> <span class=\"n\">ret</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">baz</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">r</span>\n</code></pre></div>\n<p>but it's a lot less clear</p>",
        "id": 417632561,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706098408
    },
    {
        "content": "<p>(I previously asked this <a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/if.20exists.20assumption.20else/near/276054055\">here</a>)</p>",
        "id": 417634357,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706099121
    },
    {
        "content": "<p>I thought we had <code>finally</code>?</p>",
        "id": 417698535,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1706119006
    },
    {
        "content": "<p><code>finally</code> runs even if an error <em>does</em> happen, and so does not have access to local variables within the <code>try</code></p>",
        "id": 417698772,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706119115
    },
    {
        "content": "<p>Ah, this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo1</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"mi\">1</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo2</span> <span class=\"o\">(</span><span class=\"n\">fail</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">fail</span> <span class=\"k\">then</span> <span class=\"n\">failure</span> <span class=\"k\">else</span> <span class=\"n\">return</span> <span class=\"mi\">10</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">trace</span><span class=\"o\">[</span><span class=\"n\">debug</span><span class=\"o\">]</span> <span class=\"s2\">\"ran bar\"</span>\n  <span class=\"n\">return</span> <span class=\"mi\">2</span>\n<span class=\"kd\">def</span> <span class=\"n\">baz</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">trace</span><span class=\"o\">[</span><span class=\"n\">debug</span><span class=\"o\">]</span> <span class=\"s2\">\"ran baz\"</span>\n  <span class=\"n\">return</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">Would like to write as</span>\n<span class=\"sd\">try</span>\n<span class=\"sd\">  let x ← foo1</span>\n<span class=\"sd\">  let y ← foo2 false</span>\n<span class=\"sd\">catch _ =&gt;</span>\n<span class=\"sd\">  bar</span>\n<span class=\"sd\">else</span>\n<span class=\"sd\">  baz x y</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">try</span>\n      <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">foo1</span>\n      <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"bp\">←</span> <span class=\"n\">foo2</span> <span class=\"n\">false</span>\n      <span class=\"n\">return</span> <span class=\"k\">do</span>\n        <span class=\"n\">baz</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n    <span class=\"n\">catch</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">return</span> <span class=\"k\">do</span>\n        <span class=\"n\">bar</span><span class=\"o\">)</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.debug</span> <span class=\"n\">true</span>\n<span class=\"k\">#eval</span> <span class=\"n\">test</span>\n</code></pre></div>",
        "id": 418284792,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706278823
    },
    {
        "content": "<p>The trick is to enter a nested <code>do</code> block inside the <code>try</code>, but call it from the outside</p>",
        "id": 418284961,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706278890
    },
    {
        "content": "<p>But this of course means that you can't do a <code>return</code> inside the <code>try</code> block; so this would need to be handled as part of the <code>do</code> elaborator</p>",
        "id": 418285121,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706278934
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> When it comes to mirroring Python logic, it should be noted that the Lean <code>try/catch</code> and Python <code>try/except</code> do not already have the same semantics:</p>\n<p><strong>Lean</strong></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- error: catch2</span>\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"n\">try</span>\n    <span class=\"n\">throw</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">IO.userError</span> <span class=\"s2\">\"try\"</span>\n  <span class=\"n\">catch</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">throw</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">IO.userError</span> <span class=\"s2\">\"catch1\"</span>\n  <span class=\"n\">catch</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">throw</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">IO.userError</span> <span class=\"s2\">\"catch2\"</span>\n</code></pre></div>\n<p><strong>Python</strong></p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"c1\"># error: catch1</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"k\">raise</span> <span class=\"ne\">RuntimeError</span><span class=\"p\">(</span><span class=\"s2\">\"try\"</span><span class=\"p\">)</span>\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span><span class=\"p\">:</span>\n    <span class=\"k\">raise</span> <span class=\"ne\">RuntimeError</span><span class=\"p\">(</span><span class=\"s2\">\"catch1\"</span><span class=\"p\">)</span>\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span><span class=\"p\">:</span>\n    <span class=\"k\">raise</span> <span class=\"ne\">RuntimeError</span><span class=\"p\">(</span><span class=\"s2\">\"catch2\"</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>The difference here being that the Lean <code>try/catch</code> is cumulative whereas the Python <code>try/except</code> is disjoint. Thus, if  Python-style <code>try/else</code> where implemented in Lean, there is design decision on whether it should succeed if the just <code>try</code> was error free or if the all the <code>catch</code> satements were also error free. The later would appear to be more consistent with the current design.</p>",
        "id": 418314744,
        "sender_full_name": "Mac Malone",
        "timestamp": 1706288200
    },
    {
        "content": "<p>I guess the Lean way to spell disjoint <code>catch</code>es is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">try</span>\n    <span class=\"n\">throw</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">IO.userError</span> <span class=\"s2\">\"try\"</span>\n  <span class=\"n\">catch</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">userError</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">throw</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">IO.userError</span> <span class=\"s2\">\"catch1\"</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">throw</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">IO.userError</span> <span class=\"s2\">\"catch2\"</span>\n</code></pre></div>",
        "id": 418315246,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706288365
    },
    {
        "content": "<p>I think it would be reasonable to just ban multiple <code>catch</code>es if <code>else</code> is used</p>",
        "id": 418315485,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706288442
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/try.2C.20catch.2C.20else/near/417698772\">said</a>:</p>\n<blockquote>\n<p><code>finally</code> runs even if an error <em>does</em> happen, and so does not have access to local variables within the <code>try</code></p>\n</blockquote>\n<p>Not sure I follow; control blocks do not create new lexical scopes in Python, and therefore local variables inside the <code>try</code> are local to the function you're in, and will be accessible in the finally block. Of course, if an exception is raised before assigning to a new variable inside the <code>try</code> block, it won't be defined in the <code>finally</code> block (unlike JS, say, where let bindings are hoisted).</p>",
        "id": 418317544,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1706289263
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/try.2C.20catch.2C.20else/near/418315246\">said</a>:</p>\n<blockquote>\n<p>I guess the Lean way to spell disjoint <code>catch</code>es is</p>\n</blockquote>\n<p>That only works if the exception types are homongenous. There is no way  I know of to express a heterogenous disjoint <code>try/catch</code> in Lean. For example, consider:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- catchIO</span>\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">IO</span> <span class=\"o\">(</span><span class=\"n\">Except</span> <span class=\"n\">Nat</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"k\">from</span> <span class=\"n\">ExceptT.run</span> <span class=\"k\">do</span>\n  <span class=\"n\">try</span>\n    <span class=\"n\">throw</span> <span class=\"mi\">0</span>\n  <span class=\"n\">catch</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">throwThe</span> <span class=\"n\">IO.Error</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">.</span><span class=\"n\">userError</span> <span class=\"s2\">\"catchNat\"</span>\n  <span class=\"n\">catch</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">IO.Error</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">throwThe</span> <span class=\"n\">IO.Error</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">.</span><span class=\"n\">userError</span> <span class=\"s2\">\"catchIO\"</span>\n</code></pre></div>",
        "id": 418321381,
        "sender_full_name": "Mac Malone",
        "timestamp": 1706290647
    },
    {
        "content": "<p>Here is a quick-and-dirty example of a cumulative <code>try/catch/else</code> in Lean:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Parser.Do</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Parser</span> <span class=\"n\">Term</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">doElseTerm</span> <span class=\"o\">:=</span>\n <span class=\"n\">Term.binderIdent</span> <span class=\"o\">(</span><span class=\"s2\">\" : \"</span> <span class=\"n\">term</span><span class=\"o\">)</span><span class=\"bp\">?</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">doElse</span> <span class=\"o\">:=</span>\n  <span class=\"n\">ppDedent</span><span class=\"o\">(</span><span class=\"n\">ppLine</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"s2\">\"else \"</span> <span class=\"n\">atomic</span><span class=\"o\">(</span><span class=\"n\">doElseTerm</span> <span class=\"n\">darrow</span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"n\">doSeq</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">doTryElse</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"n\">high</span><span class=\"o\">)</span>\n<span class=\"s2\">\"try\"</span> <span class=\"n\">doSeq</span> <span class=\"o\">(</span><span class=\"n\">doCatch</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">doCatchMatch</span><span class=\"o\">)</span><span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">doElse</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">doFinally</span><span class=\"o\">)</span><span class=\"bp\">?</span>  <span class=\"o\">:</span> <span class=\"n\">doElem</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"bp\">``</span><span class=\"n\">Term.hole</span><span class=\"o\">)</span> <span class=\"n\">Term</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">Unhygienic.run</span> <span class=\"k\">do</span> <span class=\"n\">withRef</span> <span class=\"n\">x</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">hole</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"o\">[</span><span class=\"n\">identKind</span><span class=\"o\">,</span> <span class=\"bp\">``</span><span class=\"n\">Term.hole</span><span class=\"o\">])</span> <span class=\"n\">Term</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">hole</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">unreachable</span><span class=\"bp\">!</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"bp\">``</span><span class=\"n\">doTry</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"bp\">``</span><span class=\"n\">doSeq</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">Unhygienic.run</span> <span class=\"k\">do</span> <span class=\"n\">withRef</span> <span class=\"n\">x</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">doSeq</span><span class=\"bp\">|$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">doTry</span><span class=\"o\">)</span>\n\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">doTryElse</span><span class=\"bp\">|</span><span class=\"n\">try</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">doSeq</span> <span class=\"k\">else</span><span class=\"bp\">%$</span><span class=\"n\">ref</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"bp\">?</span> <span class=\"bp\">=&gt;</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">doSeq</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">←</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"bp\">?</span> <span class=\"k\">then</span>\n      <span class=\"k\">let</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">doElseTerm</span><span class=\"bp\">|$</span><span class=\"n\">a</span> <span class=\"bp\">$</span><span class=\"o\">[:</span> <span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"bp\">?</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n        <span class=\"bp\">|</span> <span class=\"n\">Macro.throwUnsupported</span>\n      <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">ty</span> <span class=\"o\">:=</span> <span class=\"n\">ty</span><span class=\"bp\">?</span> <span class=\"k\">then</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">))</span> <span class=\"k\">else</span> <span class=\"n\">pure</span> <span class=\"n\">a</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">withRef</span> <span class=\"n\">ref</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">doElem</span><span class=\"bp\">|</span><span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">observing</span> <span class=\"k\">do</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">doTryElse</span><span class=\"bp\">|</span><span class=\"n\">try</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">doSeq</span> <span class=\"bp\">$</span><span class=\"n\">catches</span><span class=\"bp\">*</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">els</span><span class=\"bp\">?</span><span class=\"o\">:</span><span class=\"n\">doElse</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">fin</span><span class=\"bp\">?</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">``</span><span class=\"n\">doSeq</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n  <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">doTry</span><span class=\"bp\">|</span><span class=\"n\">try</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">doSeq</span> <span class=\"bp\">$</span><span class=\"n\">catches</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">els</span> <span class=\"o\">:=</span> <span class=\"n\">els</span><span class=\"bp\">?</span> <span class=\"k\">then</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">doSeq</span><span class=\"bp\">|</span><span class=\"n\">try</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">doSeq</span> <span class=\"bp\">$</span><span class=\"n\">els</span><span class=\"o\">:</span><span class=\"n\">doElse</span><span class=\"o\">)</span>\n  <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">fin</span> <span class=\"o\">:=</span> <span class=\"n\">fin</span><span class=\"bp\">?</span> <span class=\"k\">then</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">doTry</span><span class=\"bp\">|</span><span class=\"n\">try</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">doSeq</span> <span class=\"bp\">$</span><span class=\"n\">fin</span><span class=\"o\">:</span><span class=\"n\">doFinally</span><span class=\"o\">)</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">doElem</span><span class=\"bp\">|</span><span class=\"k\">do</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"mi\">1</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"mi\">2</span>\n<span class=\"kd\">def</span> <span class=\"n\">baz</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">10</span>\n\n<span class=\"c1\">-- 11</span>\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">IO</span> <span class=\"n\">Int</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"n\">try</span>\n    <span class=\"n\">foo</span>\n  <span class=\"n\">catch</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">bar</span>\n  <span class=\"k\">else</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">baz</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 418323810,
        "sender_full_name": "Mac Malone",
        "timestamp": 1706291494
    },
    {
        "content": "<p>Doesn't that <code>else</code> run if foo fails?</p>",
        "id": 418333009,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706295010
    },
    {
        "content": "<p>And does this work for accessing local variables within the try like the ones in my example?</p>",
        "id": 418333065,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706295039
    }
]