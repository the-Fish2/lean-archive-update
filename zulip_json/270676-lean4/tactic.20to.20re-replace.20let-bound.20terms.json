[
    {
        "content": "<p>Is there a tactic somewhere which reapplies all let-bindings to the goal and to other hypothesis, i.e. if I have <code>foo : T := bar 1 2 3</code> in the context, replacing each occurrence of <code>bar 1 2 3</code> by <code>foo</code>?</p>",
        "id": 437457257,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1715089507
    },
    {
        "content": "<p>It's not exactly what you're asking for, but the <code>set</code> tactic does the <code>let</code> binding and the replacement in one step:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">bla</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">set</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"mi\">5</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">x: ℕ</span>\n<span class=\"cm\">y: ℕ := 5</span>\n<span class=\"cm\">hx: y = x</span>\n<span class=\"cm\">⊢ y = y</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 437459124,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1715090020
    },
    {
        "content": "<p>Yea, I know <code>set</code>, but my let bindings get <code>intro</code>ed because they appear in the goal and then later on I want to apply them in other hypotheses</p>",
        "id": 437459405,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1715090091
    },
    {
        "content": "<p>How do I re-fold let bindings at all? Unfolding works with <code>rw</code> but, contrary to definitions, I cant use <code>←</code> on them inside <code>rw</code> or <code>simp</code>...</p>",
        "id": 437463612,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1715091233
    },
    {
        "content": "<p>The <code>set</code> tactic just does <code>rw [(show bar 1 2 3 = foo from rfl)] at *</code></p>",
        "id": 437463856,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1715091306
    },
    {
        "content": "<p>You use <code>change</code> <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 437463878,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715091311
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/270676-lean4/topic/tactic.20to.20re-replace.20let-bound.20terms/near/437463878\">said</a>:</p>\n<blockquote>\n<p>You use <code>change</code> <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>\n</blockquote>\n<p>Mhhh, big goal <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 437463974,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1715091335
    },
    {
        "content": "<p>Keep your goals big and your dreams even bigger <span aria-label=\"punch\" class=\"emoji emoji-1f44a\" role=\"img\" title=\"punch\">:punch:</span></p>",
        "id": 437464048,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715091360
    },
    {
        "content": "<p>Guess I should just write my own tactic for that stuff, then <code>tidy_let</code> or so...</p>",
        "id": 437464487,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1715091490
    },
    {
        "content": "<p>You can do <code>have hx : x = ... := rfl</code> and rewrite with that</p>",
        "id": 437464994,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1715091677
    },
    {
        "content": "<p>True, but that means for each of my let-bindings doing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">...</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"n\">subst</span> <span class=\"n\">hx</span>\n<span class=\"n\">clear</span> <span class=\"n\">hx</span>\n</code></pre></div>\n<p>which is quite a bit unwieldy... but maybe that's exactly how I should implement said automated tactic</p>",
        "id": 437465375,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1715091807
    },
    {
        "content": "<p>Wait why <code>subst hx</code>? That undoes the binding</p>",
        "id": 437465647,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715091887
    },
    {
        "content": "<p>How would that work? Doesn't <code>subst</code> do the exact opposite of what you want?</p>",
        "id": 437465660,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1715091892
    },
    {
        "content": "<p>Ah I meant <code>simp only [← hx] at *</code></p>",
        "id": 437465745,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1715091921
    },
    {
        "content": "<p><code>*</code> isn't right either because it includes <code>hx</code> itself, it's supposed to rewrite everwhere except for <code>hx</code>...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">6</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"mi\">6</span><span class=\"bp\">;</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">y</span>\n  <span class=\"k\">have</span> <span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">6</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">hy</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">clear</span> <span class=\"n\">hy</span>\n  <span class=\"n\">assumption</span>\n</code></pre></div>",
        "id": 437466448,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1715092144
    },
    {
        "content": "<p>In Lean 3, <code>rw [h] at h</code> was a no-op</p>",
        "id": 437466582,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715092193
    },
    {
        "content": "<p>I don't see what introducing the hypothesis gains you over the direct way</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">6</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"mi\">6</span><span class=\"bp\">;</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">y</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"mi\">6</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n  <span class=\"n\">assumption</span>\n</code></pre></div>",
        "id": 437466724,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1715092224
    },
    {
        "content": "<p>You might want to use the hypothesis more than once or in a more targeted way</p>",
        "id": 437467018,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1715092320
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260921\">@Markus Himmel</span> Nothing, I guess, you're right</p>",
        "id": 437467099,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1715092332
    },
    {
        "content": "<p>I guess I will really write a tactic... The body of the let bindings contain lots of <span aria-label=\"cross\" class=\"emoji emoji-271d\" role=\"img\" title=\"cross\">:cross:</span>'ed variables, so stating their body explicitly is also not good</p>",
        "id": 437467329,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1715092415
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110789\">@Jakob von Raumer</span> I just created <a href=\"https://github.com/leanprover-community/mathlib4/pull/12745\">#12745</a> for <code>refold_let</code></p>",
        "id": 437543138,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715121264
    },
    {
        "content": "<p>Will test it tomorrow!</p>",
        "id": 437631656,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1715168301
    }
]