[
    {
        "content": "<p>Does <code>Lean.Meta.whnf</code> unfold structure projections?</p>\n<p>More precisely, say I have <code>A.a inst x y</code>, where <code>A</code> is a structure with field <code>a</code> and <code>inst : A</code> can be unfolded into constructor form with the <code>a</code> field being some <code>f</code> (but the transparency could be anything not irreducible - <code>reducible</code>, <code>instance</code> or <code>semireducible</code> IIRC).<br>\nWill <code>Lean.Meta.whnf</code> reduce the expression into <code>f x y</code>?</p>",
        "id": 425938874,
        "sender_full_name": "Raghuram",
        "timestamp": 1710171947
    },
    {
        "content": "<p>Yes, whnf unfolds definitions in general</p>",
        "id": 425966909,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710175647
    },
    {
        "content": "<p>Of the head term only, right?</p>",
        "id": 425967332,
        "sender_full_name": "Raghuram",
        "timestamp": 1710175775
    },
    {
        "content": "<p>OK, I guess <code>A.a</code> unfolds to <code>fun (inst : a) =&gt; match inst with | A.mk ... f ... =&gt; f</code>, which can be beta-reduced. But it wouldn't simplify further without simplifying the <code>match</code>, right?</p>\n<p>Does <code>whnf</code> applied to a match expression unfold any head subterms of the match discriminants? And does it simplify match expressions when it is syntactically visible which case will be taken?</p>",
        "id": 425968215,
        "sender_full_name": "Raghuram",
        "timestamp": 1710176061
    },
    {
        "content": "<p>Whnf does what it needs to do to put the expression into whnf.</p>\n<p>It will reduce discriminants if needed, but if whnf fails to reduce them enough to reduce the <code>match</code>, then you won't observe the reduced discriminants in the returned expression.</p>\n<p>For your <code>fun</code> example, that's in whnf, so it won't continue reducing the body.</p>\n<p>(Where is this line of questioning going?)</p>",
        "id": 425976424,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710178727
    },
    {
        "content": "<p>The latter questions were just me trying to understand <code>whnf</code> better.</p>\n<p>Originally, I ran into a bug with a variant of the <code>unfoldProjInsts</code> function from the other thread, where I had used <code>whnf</code> before <code>unfoldProjInst?</code>.<br>\nIt turned out that was happening was that <code>whnf</code> unfolded the instance projections in an expression, resulting in <code>unfoldProjInsts?</code> finding no projections to unfold, and me returning the expression before applying <code>whnf</code>. The \"fix\" I used was to return <code>whnf expr</code> when <code>unfoldProjInst?</code> fails, but it got me wondering whether <code>unfoldProjInst?</code> is redundant after applying <code>whnf</code> and more generally how <code>whnf</code> works. Hence this question.</p>",
        "id": 425978321,
        "sender_full_name": "Raghuram",
        "timestamp": 1710179401
    },
    {
        "content": "<p>When the current transparency level is <code>instances</code>, then <code>whnf</code> does <code>unfoldProjInst?</code></p>\n<p>In general, <code>whnf</code> unfolds definitions, and I think <code>instances</code> behaves like <code>reducible</code> except for this one additional type of thing it will unfold, instance projections. If you have a higher transparency level, <code>unfoldProjInst?</code> is likely redundant.</p>",
        "id": 425979262,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710179758
    },
    {
        "content": "<p>That makes sense. Thank you!</p>",
        "id": 425979437,
        "sender_full_name": "Raghuram",
        "timestamp": 1710179823
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"501683\">Raghuram</span> has marked this topic as resolved.</p>",
        "id": 425979465,
        "sender_full_name": "Notification Bot",
        "timestamp": 1710179834
    }
]