[
    {
        "content": "<p>I'm in the situation where I have a binary equivalence relation, that I'd like to use as a typeclass:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"kd\">inductive</span> <span class=\"n\">Rel</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">Refl</span> <span class=\"o\">:</span> <span class=\"n\">Rel</span> <span class=\"n\">x</span> <span class=\"n\">x</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>I'd like to have an instance that gives an instance of <code>Rel x y</code> whenever a proof of type <code>x = y</code> is in scope. I tried doing the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">default_instance</span><span class=\"kd\">]</span>\n<span class=\"kd\">instance</span> <span class=\"n\">byEq</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">eq</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">assumption</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Rel</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n</code></pre></div>\n<p>But this doesn't work, for example, if I do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"k\">let</span> <span class=\"n\">eq</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">admit</span>\n <span class=\"k\">let</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Rel</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n</code></pre></div>\n<p>I get \"failed to synthesize instance\".</p>\n<p>Is there a way to do it? Can I declare the equality proof to be a local instance somehow?</p>",
        "id": 434515266,
        "sender_full_name": "Joey Eremondi",
        "timestamp": 1713630043
    },
    {
        "content": "<p>Those <code>let</code>s should be <code>have</code>s because they're proofs, but that's not your problem: your problem is that typeclass inference isn't ever going to look for an equality because equality isn't a typeclass. You would have to go via the <code>Fact</code> API and make <code>eq</code> a fact in order to get this working.</p>",
        "id": 434515448,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1713630221
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Thanks, Fact looks like exactly what I want in this situation.</p>\n<p>Do you know, does typeclass search only search through global instances? Is there a way to declare a hypothesis as a local instance in the middle of, e.g. a tactic script?</p>",
        "id": 434517596,
        "sender_full_name": "Joey Eremondi",
        "timestamp": 1713632063
    },
    {
        "content": "<p>typeclass search looks through the context, so <code>have : Foo := ...</code> is sufficient to make typeclass searches for <code>Foo</code> succeed</p>",
        "id": 434517657,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713632154
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Good to know, that makes things work quite nicely!</p>\n<p>One more question, is there a way to prevent backtracking in typeclass search?</p>\n<p>For example, if I've got <code>Symm : [Rel a b] -&gt; Rel b a</code> this will loop forever, especially in cases where <code>Rel b a</code> doesn't actually hold. Is there a way to say \"see if we can find <code>Rel b a</code> in a single step, but don't backtrack further\"?</p>",
        "id": 434519192,
        "sender_full_name": "Joey Eremondi",
        "timestamp": 1713633535
    },
    {
        "content": "<p>The usual way this is done is using more typeclasses, for example <code>[Rel a b] -&gt; RelSymm a b</code> and <code>[Rel a b] -&gt; RelSymm b a</code></p>",
        "id": 434519330,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713633627
    },
    {
        "content": "<p>I thought that lean 4 allowed instance loops (i.e. could deal with them). Is this not the case?</p>",
        "id": 434520094,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1713634307
    },
    {
        "content": "<p>it does allow some simple instance loops, but I'm not sure how reliable the mechanism is</p>",
        "id": 434520156,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713634342
    },
    {
        "content": "<p>a basic test seems to work</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Rel</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Rel</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Rel</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Rel</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Rel</span> <span class=\"mi\">1</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Rel</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"c1\">-- ok</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Rel</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"c1\">-- failed</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Rel</span> <span class=\"mi\">1</span> <span class=\"mi\">4</span> <span class=\"c1\">-- ok</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Rel</span> <span class=\"mi\">4</span> <span class=\"mi\">1</span> <span class=\"c1\">-- ok</span>\n</code></pre></div>",
        "id": 434520289,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713634469
    }
]