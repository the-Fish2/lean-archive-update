[
    {
        "content": "<p>I'm trying and failing to construct a value of the following <code>Report</code> type from C:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">inductive</span><span class=\"w\"> </span><span class=\"n\">StopReason</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">saturated</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">timeLimit</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">iterationLimit</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">nodeLimit</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">other</span>\n\n<span class=\"kn\">structure</span><span class=\"w\"> </span><span class=\"n\">Report</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">iterations</span><span class=\"o\">:</span><span class=\"w\">  </span><span class=\"n\">Nat</span>\n<span class=\"w\">  </span><span class=\"n\">stopReason</span><span class=\"o\">:</span><span class=\"w\">  </span><span class=\"n\">StopReason</span>\n<span class=\"w\">  </span><span class=\"n\">nodeCount</span><span class=\"o\">:</span><span class=\"w\">   </span><span class=\"n\">Nat</span>\n<span class=\"w\">  </span><span class=\"n\">classCount</span><span class=\"o\">:</span><span class=\"w\">  </span><span class=\"n\">Nat</span>\n<span class=\"w\">  </span><span class=\"n\">memoryUsage</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span>\n<span class=\"w\">  </span><span class=\"n\">time</span><span class=\"o\">:</span><span class=\"w\">        </span><span class=\"n\">Float</span>\n</code></pre></div>\n<p>My corresponding representation and construction in C is:</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"k\">typedef</span><span class=\"w\"> </span><span class=\"k\">enum</span><span class=\"w\"> </span><span class=\"n\">stop_reason</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">SATURATED</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">TIME_LIMIT</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">ITERATION_LIMIT</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">NODE_LIMIT</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">OTHER</span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"n\">stop_reason</span><span class=\"p\">;</span>\n\n<span class=\"k\">typedef</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">report</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kt\">size_t</span><span class=\"w\">      </span><span class=\"n\">iterations</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">stop_reason</span><span class=\"w\"> </span><span class=\"n\">reason</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kt\">size_t</span><span class=\"w\">      </span><span class=\"n\">node_count</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kt\">size_t</span><span class=\"w\">      </span><span class=\"n\">class_count</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kt\">size_t</span><span class=\"w\">      </span><span class=\"n\">memory_usage</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kt\">double</span><span class=\"w\">      </span><span class=\"n\">time</span><span class=\"p\">;</span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"n\">report</span><span class=\"p\">;</span>\n\n<span class=\"kt\">uint8_t</span><span class=\"w\"> </span><span class=\"nf\">stop_reason_to_lean</span><span class=\"p\">(</span><span class=\"n\">stop_reason</span><span class=\"w\"> </span><span class=\"n\">reason</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">uint8_t</span><span class=\"p\">)</span><span class=\"n\">reason</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">lean_obj_res</span><span class=\"w\"> </span><span class=\"nf\">report_to_lean</span><span class=\"p\">(</span><span class=\"n\">report</span><span class=\"w\"> </span><span class=\"n\">rep</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_alloc_ctor</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">double</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">uint8_t</span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"kt\">size_t</span><span class=\"w\"> </span><span class=\"n\">obj_offset</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"o\">*</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"n\">lean_ctor_set</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lean_box</span><span class=\"p\">(</span><span class=\"n\">rep</span><span class=\"p\">.</span><span class=\"n\">iterations</span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"n\">lean_ctor_set</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lean_box</span><span class=\"p\">(</span><span class=\"n\">rep</span><span class=\"p\">.</span><span class=\"n\">node_count</span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"n\">lean_ctor_set</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lean_box</span><span class=\"p\">(</span><span class=\"n\">rep</span><span class=\"p\">.</span><span class=\"n\">class_count</span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"n\">lean_ctor_set</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lean_box</span><span class=\"p\">(</span><span class=\"n\">rep</span><span class=\"p\">.</span><span class=\"n\">memory_usage</span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"n\">lean_ctor_set_uint8</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">obj_offset</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">stop_reason_to_lean</span><span class=\"p\">(</span><span class=\"n\">rep</span><span class=\"p\">.</span><span class=\"n\">reason</span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"n\">lean_ctor_set_float</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">obj_offset</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">uint8_t</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">rep</span><span class=\"p\">.</span><span class=\"n\">time</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>The problem is that I seem to get garbage values for at least the <code>stopReason</code> field, but I believe also the <code>time</code> field. I tried compiling a small example file that sets these values in Lean to see what C code Lean produces, but I couldn't make heads or tails of it.</p>",
        "id": 444438642,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1718276743
    },
    {
        "content": "<p>One thing I think you are missing is the fact that the scalar fields get sorted by size: <a href=\"https://lean-lang.org/lean4/doc/dev/ffi.html#inductive-types\">https://lean-lang.org/lean4/doc/dev/ffi.html#inductive-types</a></p>\n<p>So <code>stopReason</code> and <code>time</code> get swapped</p>",
        "id": 444464813,
        "sender_full_name": "Gy√∂rgy Kurucz",
        "timestamp": 1718285064
    },
    {
        "content": "<p>Oh, in <strong>de</strong>creasing order <span aria-label=\"light bulb\" class=\"emoji emoji-1f4a1\" role=\"img\" title=\"light bulb\">:light_bulb:</span></p>",
        "id": 444469503,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1718286469
    },
    {
        "content": "<p>Thanks, that was the problem!</p>",
        "id": 444469926,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1718286575
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"372804\">Marcus Rossel</span> has marked this topic as resolved.</p>",
        "id": 444469952,
        "sender_full_name": "Notification Bot",
        "timestamp": 1718286580
    }
]