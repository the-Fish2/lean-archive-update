[
    {
        "content": "<p>Is there a way to have certain structure fields automatically registered as instances in lean? For example, if I've got a type that packages a type with its <code>Category</code> instance, I want to have the typeclass search know that there is a Category instance for each packaged type.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Category.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">ExCat</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span> <span class=\"n\">where</span>\n  <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"n\">catInst</span> <span class=\"o\">:</span> <span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">C</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">GoodHom</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ExCat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x.C</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">x.C</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"n\">x.catInst.Hom</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">BadHom</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ExCat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x.C</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">x.C</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Quiver.Hom</span> <span class=\"c1\">-- Failed to synthesize instance Quiver x.C</span>\n</code></pre></div>\n<p>Basically, is there a way I can make <code>BadHom</code>compile by changing the definition of <code>ExCat</code>?</p>\n<p>In Agda, I can declare <code>catInst</code> as an instance field, so that the typeclass search will see the <code>Category</code> instance for any <code>x.C</code> that show up during type checking. Is there an equivalent in Lean?</p>",
        "id": 424919094,
        "sender_full_name": "Joey Eremondi",
        "timestamp": 1709658909
    },
    {
        "content": "<p>You can add the line <code>attribute [instance] ExCat.catInst</code> after the definition of <code>ExCat</code>.</p>",
        "id": 424919642,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709659091
    },
    {
        "content": "<p>I donâ€™t think we have syntax to decorate the definition with that attribute.</p>",
        "id": 424919743,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709659131
    },
    {
        "content": "<p>Conversely, if you write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">ExCat</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span> <span class=\"n\">where</span>\n  <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"o\">[</span><span class=\"n\">catInst</span> <span class=\"o\">:</span> <span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>then Lean can synthesize that field using typeclass inference, but you need to do <code>attribute [instance]</code> to make the projection participate in typeclass inference.</p>",
        "id": 424932677,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709663416
    }
]