[
    {
        "content": "<p>When assigning an mvar <code>m₂</code> whose type also contains an mvar <code>m₁</code>, how can I check whether <code>m₁</code> has been assigned (by virtue of <code>m₂</code> being assigned)? I tried the following, but that leads to <code>m₁</code> being considered unassigned:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"test\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">m₁</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"o\">(</span><span class=\"n\">Expr.sort</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"bp\">←</span> <span class=\"n\">m₁.mvarId</span><span class=\"bp\">!.</span><span class=\"n\">getType</span>\n  <span class=\"c1\">-- Type</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">m₂</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"o\">(</span><span class=\"n\">Expr.app</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">``</span><span class=\"n\">List</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mkFreshLevelMVar</span><span class=\"o\">])</span> <span class=\"n\">m₁</span><span class=\"o\">)</span>\n  <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"bp\">←</span> <span class=\"n\">m₂.mvarId</span><span class=\"bp\">!.</span><span class=\"n\">getType</span>\n  <span class=\"c1\">-- List.{?_uniq.2855} ?_uniq.2854</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">l</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(([]</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)))</span> <span class=\"n\">none</span>\n  <span class=\"k\">let</span> <span class=\"n\">l</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"n\">l</span>\n  <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">l</span>\n  <span class=\"c1\">-- List.{0} Nat</span>\n\n  <span class=\"n\">m₂.mvarId</span><span class=\"bp\">!.</span><span class=\"n\">assign</span> <span class=\"n\">l</span>\n  <span class=\"k\">let</span> <span class=\"n\">m₂</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"n\">m₂</span>\n  <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">m₂</span>\n  <span class=\"c1\">-- List.{0} Nat</span>\n\n  <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"bp\">←</span> <span class=\"n\">m₁.mvarId</span><span class=\"bp\">!.</span><span class=\"n\">isAssigned</span>\n  <span class=\"c1\">-- false</span>\n\n  <span class=\"n\">return</span> <span class=\"n\">mkNatLit</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:=</span> <span class=\"n\">test</span>\n</code></pre></div>",
        "id": 432751126,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1712855033
    },
    {
        "content": "<p>Ahhh, the docs for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.MVarId.assign#doc\">docs#Lean.MVarId.assign</a> hold the answer: \"This is a low-level API, and it is safer to use <code>isDefEq (mkMVar mvarId) x</code>\" <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span>.</p>",
        "id": 432865228,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1712913723
    },
    {
        "content": "<p>That documentation is lying, don't do that</p>",
        "id": 432865617,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712913918
    },
    {
        "content": "<p>I think there is an open issue about it</p>",
        "id": 432865646,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712913932
    },
    {
        "content": "<p>The problem is that <code>isDefEq (mkMVar mvarId) x</code> doesn't assign the mvar at all if it's a proof</p>",
        "id": 432865751,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712913965
    },
    {
        "content": "<p>instead you should use <code>assignIfDefeq</code></p>",
        "id": 432865776,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712913984
    },
    {
        "content": "<p>Although, reading your question I don't see what it has to do with <code>assign</code></p>",
        "id": 432865936,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712914053
    },
    {
        "content": "<p><code>mvar.isAssigned</code> should return true if and only if <code>mvar</code> is assigned. I don't really understand what you mean by \"<code>m₁</code> has been assigned (by virtue of <code>m₂</code> being assigned)\"</p>",
        "id": 432866075,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712914106
    },
    {
        "content": "<p>I can't find <code>assignIfDefeq</code> though, maybe it's too new (or the PR stalled)? In any case, in your code you need to make sure the types match before the <code>assign</code> call, i.e.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">true</span> <span class=\"bp\">←</span> <span class=\"n\">isDefEq</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">m₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n  <span class=\"n\">m₂.mvarId</span><span class=\"bp\">!.</span><span class=\"n\">assign</span> <span class=\"n\">l</span>\n</code></pre></div>",
        "id": 432866755,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712914383
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Transitive.20isAssigned/near/432866075\">said</a>:</p>\n<blockquote>\n<p><code>mvar.isAssigned</code> should return true if and only if <code>mvar</code> is assigned. I don't really understand what you mean by \"<code>m₁</code> has been assigned (by virtue of <code>m₂</code> being assigned)\"</p>\n</blockquote>\n<p>Then it seems I don't understand what it means for an mvar <code>m</code> to be \"assigned\". I thought it means that there's a value associated with <code>m</code> in the current mvar context. That is, if I used <code>instantiateMVars</code> on an expression containing <code>m</code>, then <code>m</code> would be replaced by something else. How do I check for this notion of being assigned (and what is it called)?</p>",
        "id": 432868001,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1712914889
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Transitive.20isAssigned/near/432866755\">said</a>:</p>\n<blockquote>\n<p>I can't find <code>assignIfDefeq</code> though, maybe it's too new (or the PR stalled)? </p>\n</blockquote>\n<p>It's in <code>Std.Tactic.Exact</code>.</p>",
        "id": 432868136,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1712914924
    },
    {
        "content": "<p>that is correct</p>",
        "id": 432868344,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712915023
    },
    {
        "content": "<p>the issue is that, as the doc says (before making a misleading suggestion), <code>assign</code> is a low level function, and in particular it has a <em>precondition</em> that the types match</p>",
        "id": 432868699,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712915165
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Transitive.20isAssigned/near/432868344\">said</a>:</p>\n<blockquote>\n<p>that is correct</p>\n</blockquote>\n<p>Ah, then I guess my wording was just bad. What I mean is that <code>isAssigned</code> can propagate, and can become true for mvars as a result of other mvars being assigned. Would you say that's correct?</p>",
        "id": 432868861,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1712915230
    },
    {
        "content": "<p>No, assigning mvars does not cause other mvars to be assigned</p>",
        "id": 432868920,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712915259
    },
    {
        "content": "<p><code>isDefEq</code> calls can cause mvars to be assigned</p>",
        "id": 432868945,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712915273
    },
    {
        "content": "<p>if you do not already know in advance that the types match, you should call <code>isDefEq</code> before <code>assign</code> (or use <code>assignIfDefeq</code> which does both)</p>",
        "id": 432869119,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712915325
    },
    {
        "content": "<p>If <code>isDefEq</code> assigns mvars, why is <code>assign</code> necessary afterwards? (aside from \"The problem is that <code>isDefEq (mkMVar mvarId) x</code> doesn't assign the mvar at all if it's a proof\")</p>",
        "id": 432869215,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1712915372
    },
    {
        "content": "<p>that's why</p>",
        "id": 432869231,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712915383
    },
    {
        "content": "<p>note that I didn't use <code>isDefEq</code> on the value itself, I used it on the types</p>",
        "id": 432869257,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712915399
    },
    {
        "content": "<p>ok, so in a perfect world we never call <code>assign</code> explicitly?</p>",
        "id": 432869315,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1712915409
    },
    {
        "content": "<p>in a surprisingly large number of situations you know the types match for structural reasons</p>",
        "id": 432869358,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712915435
    },
    {
        "content": "<p>I thought that we would be using <code>assignIfDefeq</code> more in core but I audited all the uses and most of them can actually safely be <code>assign</code></p>",
        "id": 432869453,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712915476
    },
    {
        "content": "<p>But even then, <code>assign</code> doesn't do the <code>isAssigned</code> propagation that I'm looking for. Can I cause this propagation to happen after using <code>assign</code>?<br>\n(I'm also in a situation where I know the types match)</p>",
        "id": 432869604,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1712915528
    },
    {
        "content": "<p>the types in your example <em>don't</em> match, that's the point</p>",
        "id": 432869658,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712915552
    },
    {
        "content": "<p>or at least, they don't match until some variables are assigned</p>",
        "id": 432869686,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712915561
    },
    {
        "content": "<p>so that's what <code>isDefEq</code> does</p>",
        "id": 432869700,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712915570
    },
    {
        "content": "<p>if you <code>assign</code> an mvar before making the types match then you end up in an invalid state</p>",
        "id": 432869749,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712915592
    },
    {
        "content": "<p>Ok, I thought \"types matching\" meant \"matching up to mvar assignment\" <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 432869794,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1712915607
    },
    {
        "content": "<p>I think now everything is clear. Thanks for your help!</p>",
        "id": 432869936,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1712915650
    }
]