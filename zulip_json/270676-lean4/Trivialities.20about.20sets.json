[
    {
        "content": "<p>Is there any <code>tauto</code>-like tactics that could solve trivialities about sets? I would like to use something similar to the former example to the latter example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">∨</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">A</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">tauto</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">∪</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">∩</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∩</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∩</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">tauto</span>\n</code></pre></div>\n<p>Chaining these three tactics works well, but I'd rather use a single tactic. In this case, I could use <code>aesop</code> for a one-line proof of the latter statement, but there are cases where I want to avoid <code>aesop</code> because the sets have some inner structure that misleads <code>aesop</code> but would be irrelevant for a <code>tauto</code>-like tactic.</p>",
        "id": 430300658,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1711737321
    },
    {
        "content": "<p>This question comes periodically and I think we still don’t have a good answer.</p>",
        "id": 430301076,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1711737486
    },
    {
        "content": "<p>In your cases, <code>aesop</code> solves both.</p>",
        "id": 430301367,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1711737635
    },
    {
        "content": "<p>Maybe there could be a <code>set_ext</code> simp set (not sure about the name) loaded with simp lemmas that turn equalities of sets and subset relations into booleans?</p>\n<p>Here are a few lemmas that could go into that simp set:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">∪</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">∩</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∩</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∩</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Set.ext_iff</span><span class=\"o\">,</span> <span class=\"n\">Set.mem_inter_iff</span><span class=\"o\">,</span> <span class=\"n\">Set.mem_union</span><span class=\"o\">]</span>\n  <span class=\"n\">tauto</span>\n</code></pre></div>\n<p>With the simp set, it could look like <code>simp only [set_ext]; tauto</code></p>",
        "id": 430317519,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711746059
    },
    {
        "content": "<p>If there wasn't already a tactic called <code>set</code>, then <code>set</code> would be a good name for this one!</p>",
        "id": 430317861,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1711746233
    },
    {
        "content": "<p>This is my attempt at implementing it (and a few tests):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Tauto</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Basic</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"setauto\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span>\n    <span class=\"n\">try</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span>\n      <span class=\"n\">Set.ext_iff</span><span class=\"o\">,</span>\n      <span class=\"n\">Set.subset_def</span><span class=\"o\">,</span>\n      <span class=\"n\">Set.mem_inter_iff</span><span class=\"o\">,</span>\n      <span class=\"n\">Set.mem_union</span><span class=\"o\">,</span>\n      <span class=\"n\">Set.mem_compl_iff</span><span class=\"o\">,</span>\n    <span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n    <span class=\"bp\">&lt;;&gt;</span>\n    <span class=\"n\">try</span> <span class=\"n\">tauto</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">A</span> <span class=\"bp\">⊆</span> <span class=\"n\">Set.univ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">setauto</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∅</span> <span class=\"bp\">⊆</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">setauto</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⊆</span> <span class=\"bp\">∅</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">setauto</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">A</span><span class=\"bp\">ᶜᶜ</span> <span class=\"bp\">=</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">setauto</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">⊆</span> <span class=\"bp\">∅</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">Set.univ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span> <span class=\"c1\">-- setauto -- fails</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hAB</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⊆</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hBC</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">⊆</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">A</span> <span class=\"bp\">⊆</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">setauto</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">∪</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">∩</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∩</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∩</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">setauto</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">∪</span> <span class=\"n\">B</span> <span class=\"bp\">∪</span> <span class=\"n\">C</span><span class=\"o\">)</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">=</span> <span class=\"n\">C</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">∩</span> <span class=\"n\">B</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">∩</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">setauto</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">∩</span> <span class=\"n\">B</span> <span class=\"bp\">∩</span> <span class=\"n\">C</span><span class=\"bp\">ᶜᶜ</span><span class=\"o\">)</span><span class=\"bp\">ᶜᶜᶜᶜᶜ</span> <span class=\"bp\">=</span> <span class=\"n\">C</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">∪</span> <span class=\"n\">B</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">∪</span> <span class=\"bp\">∅</span> <span class=\"bp\">∪</span> <span class=\"n\">A</span> <span class=\"bp\">∪</span> <span class=\"bp\">∅</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">setauto</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">D</span> <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">∪</span> <span class=\"n\">C</span><span class=\"bp\">ᶜ</span><span class=\"o\">)</span> <span class=\"bp\">∩</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">ᶜᶜ</span> <span class=\"bp\">∩</span> <span class=\"n\">C</span><span class=\"bp\">ᶜᶜᶜ</span> <span class=\"bp\">∩</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∩</span> <span class=\"n\">D</span><span class=\"bp\">ᶜᶜ</span> <span class=\"bp\">∩</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">ᶜᶜ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">setauto</span>\n</code></pre></div>\n<p>It was brought to my attention that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Mathlib.Tactic.Tauto.tauto#doc\">docs#Mathlib.Tactic.Tauto.tauto</a> doesn't work for universal quantifiers. Therefore, I cannot use <code>tauto</code> in this way probably. And I want a tactic that does not work with the internal structure of given sets, so <code>aesop</code> is not an option either.</p>",
        "id": 431564548,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1712334962
    },
    {
        "content": "<p>Can somebody make a Mathlib-ready tactic out of the <code>setauto</code> above?</p>",
        "id": 436692000,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1714655944
    },
    {
        "content": "<p>Martin, I think you should specify precisely the scope of this tactic. What problems are in scope, and which are out of scope? After you have that list, try to make the above succeed on a collection of tests determined by your scope.</p>\n<p>After you get that working, realize that it's likely the case that you don't want to transform your entire local context (with <code>simp only ... at *</code>) permanently when calling this tactic. So then learn a bit more to make it so it doesn't suffer from that problem. At that point, I think <em>you</em> can make the PR. Even if it's not Mathlib-ready, you can at least hope that people will suggest improvements.</p>",
        "id": 436717476,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1714662880
    }
]