[
    {
        "content": "<p>If I have <code>e : Expr</code>, how do I get <code>e' : Expr</code> and <code>h : e = e'</code>, where <code>e'</code> is the simplified version of <code>e</code>?</p>",
        "id": 411955775,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1704813531
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.simp#doc\">docs#Lean.Meta.simp</a> gives a <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.Simp.Result#doc\">docs#Lean.Meta.Simp.Result</a>, which basically contains what you want</p>",
        "id": 411960685,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1704814906
    },
    {
        "content": "<p>Alternatively you can run any conv tactic with this code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Parser.Tactic.Conv</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Elab.Tactic.Conv</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span> <span class=\"n\">Meta</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">elabConvRewrite</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">stx</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">conv</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TermElabM</span> <span class=\"o\">(</span><span class=\"n\">Expr</span> <span class=\"bp\">×</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">rhs</span><span class=\"o\">,</span> <span class=\"n\">eq</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">mkConvGoalFor</span> <span class=\"n\">e</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">goals</span> <span class=\"bp\">←</span> <span class=\"n\">Tactic.run</span> <span class=\"n\">eq.mvarId</span><span class=\"bp\">!</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">lhsNew</span><span class=\"o\">,</span> <span class=\"n\">proof</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">convert</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">Tactic.evalTactic</span> <span class=\"n\">stx</span><span class=\"o\">)</span>\n    <span class=\"n\">updateLhs</span> <span class=\"n\">lhsNew</span> <span class=\"n\">proof</span>\n    <span class=\"n\">return</span> <span class=\"o\">()</span>\n\n  <span class=\"k\">if</span> <span class=\"n\">goals.length</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n    <span class=\"n\">throwError</span> <span class=\"s2\">\"this is a bug in `elabConvRewrite`\"</span><span class=\"n\">elab</span>\n\n  <span class=\"k\">if</span> <span class=\"n\">goals.length</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span> <span class=\"k\">then</span>\n    <span class=\"n\">throwError</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"error in `elabConvRewrite`, unsolved goals {← goals.mapM (fun g =&gt; do ppExpr (← g.getType))}\"</span>\n\n  <span class=\"o\">(</span><span class=\"n\">goals.get</span><span class=\"bp\">!</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">refl</span>\n\n  <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"n\">rhs</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"n\">eq</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Running simplifier would be <code>elabConvRewrite e (&lt;- `(simp))</code></p>",
        "id": 412135139,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1704891615
    },
    {
        "content": "<p>Mathlib has some frontends to <code>simp</code> as well. See for example how the <code>reassoc</code> tactic simplifies a type: <a href=\"https://github.com/leanprover-community/mathlib4/blob/eee126916c924c75dc6b3b43e42c5fc354153fdb/Mathlib/Tactic/CategoryTheory/Reassoc.lean#L49\">https://github.com/leanprover-community/mathlib4/blob/eee126916c924c75dc6b3b43e42c5fc354153fdb/Mathlib/Tactic/CategoryTheory/Reassoc.lean#L49</a></p>\n<p>There are more variations in <code>Mathlib.Lean.Meta.Simp</code></p>",
        "id": 412190235,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1704908213
    }
]