[
    {
        "content": "<p>What's going on here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">stripWithReducible</span> <span class=\"o\">{</span><span class=\"n\">m</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonadRef</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonadQuotation</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">Syntax</span> <span class=\"o\">:=</span>\n  <span class=\"n\">s.replaceM</span> <span class=\"k\">fun</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">with_reducible</span> <span class=\"bp\">$</span><span class=\"n\">tacs</span><span class=\"o\">:</span><span class=\"n\">tacticSeq</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">tacs</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">←</span> <span class=\"n\">stripWithReducible</span> <span class=\"n\">tacs</span><span class=\"o\">⟩</span>\n      <span class=\"n\">return</span> <span class=\"n\">some</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">tacs</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">none</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">info: by</span>\n<span class=\"sd\">    let x✝ := \"hello\"</span>\n<span class=\"sd\">    let y✝ := \"world\"</span>\n<span class=\"sd\">  let z✝ := \"oh no\"</span>\n<span class=\"sd\">  exact \"where is my indent\"</span>\n<span class=\"sd\">-/</span>\n<span class=\"bp\">#</span><span class=\"n\">guard_msgs</span> <span class=\"k\">in</span>\n<span class=\"kd\">run_cmd</span> <span class=\"n\">Elab.Command.liftTermElabM</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">stripWithReducible</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←`</span><span class=\"o\">(</span><span class=\"kd\">by</span>\n    <span class=\"n\">with_reducible</span>\n      <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"s2\">\"hello\"</span>\n      <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"s2\">\"world\"</span>\n    <span class=\"n\">with_reducible</span>\n      <span class=\"k\">let</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"s2\">\"oh no\"</span>\n    <span class=\"n\">exact</span> <span class=\"s2\">\"where is my indent\"</span><span class=\"o\">)</span>\n  <span class=\"n\">Lean.logInfo</span> <span class=\"n\">t</span>\n</code></pre></div>\n<ul>\n<li>The resulting syntax has invalid indentation</li>\n<li>The <code>guard_msgs</code>s is complaining despite the fact the output is exactly what it claims to expect.</li>\n</ul>",
        "id": 429325831,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711358350
    },
    {
        "content": "<p>The <code>Syntax</code> for <code>t</code> contains twice the nodes <code>Lean.Parser.Tactic.tacticSeq</code> <code>Lean.Parser.Tactic.tacticSeq1Indented</code>, since, I think, your match only removed the node corresponding to <code>with_reducible</code>, but not also the formatting.</p>",
        "id": 429330615,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1711359447
    },
    {
        "content": "<p>This is the syntax tree for <code>t</code> (I hope that this is fairly self-explanatory):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">inspect</span><span class=\"o\">:</span> <span class=\"bp\">'</span><span class=\"kd\">by</span>\n    <span class=\"k\">let</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"o\">:=</span> <span class=\"s2\">\"hello\"</span>\n    <span class=\"k\">let</span> <span class=\"n\">y</span><span class=\"bp\">✝</span> <span class=\"o\">:=</span> <span class=\"s2\">\"world\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">z</span><span class=\"bp\">✝</span> <span class=\"o\">:=</span> <span class=\"s2\">\"oh no\"</span>\n  <span class=\"n\">exact</span> <span class=\"s2\">\"where is my indent\"</span><span class=\"bp\">'</span>\n\n<span class=\"n\">node</span> <span class=\"n\">Lean.Parser.Term.byTactic</span><span class=\"o\">,</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">|-</span><span class=\"n\">atom</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span><span class=\"c1\">-- 'by'</span>\n<span class=\"bp\">|-</span><span class=\"n\">node</span> <span class=\"n\">Lean.Parser.Tactic.tacticSeq</span><span class=\"o\">,</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">node</span> <span class=\"n\">Lean.Parser.Tactic.tacticSeq1Indented</span><span class=\"o\">,</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">node</span> <span class=\"n\">null</span><span class=\"o\">,</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">node</span> <span class=\"n\">Lean.Parser.Tactic.tacticSeq</span><span class=\"o\">,</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">node</span> <span class=\"n\">Lean.Parser.Tactic.tacticSeq1Indented</span><span class=\"o\">,</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">node</span> <span class=\"n\">null</span><span class=\"o\">,</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">node</span> <span class=\"n\">Lean.Parser.Tactic.tacticLet_</span><span class=\"o\">,</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">atom</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span><span class=\"c1\">-- 'let'</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">node</span> <span class=\"n\">Lean.Parser.Term.letDecl</span><span class=\"o\">,</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">node</span> <span class=\"n\">Lean.Parser.Term.letIdDecl</span><span class=\"o\">,</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">ident</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span><span class=\"c1\">-- (x._@.Mathlib.Tactic.mwe_linter._hyg.393,x)</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">node</span> <span class=\"n\">null</span><span class=\"o\">,</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">node</span> <span class=\"n\">null</span><span class=\"o\">,</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">atom</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span><span class=\"c1\">-- ':='</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">node</span> <span class=\"n\">str</span><span class=\"o\">,</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">atom</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span><span class=\"c1\">-- '\"hello\"'</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">node</span> <span class=\"n\">null</span><span class=\"o\">,</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">node</span> <span class=\"n\">Lean.Parser.Tactic.tacticLet_</span><span class=\"o\">,</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">atom</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span><span class=\"c1\">-- 'let'</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">node</span> <span class=\"n\">Lean.Parser.Term.letDecl</span><span class=\"o\">,</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">node</span> <span class=\"n\">Lean.Parser.Term.letIdDecl</span><span class=\"o\">,</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">ident</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span><span class=\"c1\">-- (y._@.Mathlib.Tactic.mwe_linter._hyg.393,y)</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">node</span> <span class=\"n\">null</span><span class=\"o\">,</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">node</span> <span class=\"n\">null</span><span class=\"o\">,</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">atom</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span><span class=\"c1\">-- ':='</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">node</span> <span class=\"n\">str</span><span class=\"o\">,</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">atom</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span><span class=\"c1\">-- '\"world\"'</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">node</span> <span class=\"n\">null</span><span class=\"o\">,</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">node</span> <span class=\"n\">Lean.Parser.Tactic.tacticSeq</span><span class=\"o\">,</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">node</span> <span class=\"n\">Lean.Parser.Tactic.tacticSeq1Indented</span><span class=\"o\">,</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">node</span> <span class=\"n\">null</span><span class=\"o\">,</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">node</span> <span class=\"n\">Lean.Parser.Tactic.tacticLet_</span><span class=\"o\">,</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">atom</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span><span class=\"c1\">-- 'let'</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">node</span> <span class=\"n\">Lean.Parser.Term.letDecl</span><span class=\"o\">,</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">node</span> <span class=\"n\">Lean.Parser.Term.letIdDecl</span><span class=\"o\">,</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">ident</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span><span class=\"c1\">-- (z._@.Mathlib.Tactic.mwe_linter._hyg.393,z)</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">node</span> <span class=\"n\">null</span><span class=\"o\">,</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">node</span> <span class=\"n\">null</span><span class=\"o\">,</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">atom</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span><span class=\"c1\">-- ':='</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">node</span> <span class=\"n\">str</span><span class=\"o\">,</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">atom</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span><span class=\"c1\">-- '\"oh no\"'</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">node</span> <span class=\"n\">null</span><span class=\"o\">,</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">node</span> <span class=\"n\">Lean.Parser.Tactic.exact</span><span class=\"o\">,</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">atom</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span><span class=\"c1\">-- 'exact'</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">node</span> <span class=\"n\">str</span><span class=\"o\">,</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">atom</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span><span class=\"c1\">-- '\"where is my indent\"'</span>\n</code></pre></div>",
        "id": 429331029,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1711359522
    },
    {
        "content": "<p>I figured it might be something like this; so I guess my question is now \"are there any helper functions to disassemble this in the right way?\"</p>",
        "id": 429333567,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711360161
    },
    {
        "content": "<p>Actually, I am investigating where the extra indent is inserted, but it seems that it is not at the <code>return some &lt;| ← `(tactic| $tacs)</code> step, which puzzles me.</p>",
        "id": 429334011,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1711360236
    },
    {
        "content": "<p>I think the indent might just be a pretty-printer bug; Aesop has a workaround somewhere that refers to indents and <code>tacticSeq</code></p>",
        "id": 429334285,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711360281
    },
    {
        "content": "<p>But perhaps the <code>Syntax</code> I've assembled is illegal so the pretty-printer behavior is not specified.</p>",
        "id": 429334384,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711360300
    },
    {
        "content": "<p>Ah, you are saying that it might be last <code>logInfo</code> step that does that?</p>",
        "id": 429334925,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1711360367
    },
    {
        "content": "<p>Btw, I noticed that most syntax trees are \"padded\" with <code>null</code> nodes.  I wonder if that is what you are missing.</p>",
        "id": 429335123,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1711360393
    },
    {
        "content": "<p>In case you are curious, this is what the syntax tree for the syntax that you wrote <em>before</em> stripping with reducible:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">inspect</span><span class=\"o\">:</span> <span class=\"bp\">'</span><span class=\"kd\">by</span>\n  <span class=\"n\">with_reducible</span>\n    <span class=\"k\">let</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"o\">:=</span> <span class=\"s2\">\"hello\"</span>\n    <span class=\"k\">let</span> <span class=\"n\">y</span><span class=\"bp\">✝</span> <span class=\"o\">:=</span> <span class=\"s2\">\"world\"</span>\n  <span class=\"n\">with_reducible</span> <span class=\"k\">let</span> <span class=\"n\">z</span><span class=\"bp\">✝</span> <span class=\"o\">:=</span> <span class=\"s2\">\"oh no\"</span>\n  <span class=\"n\">exact</span> <span class=\"s2\">\"where is my indent\"</span><span class=\"bp\">'</span>\n\n<span class=\"n\">node</span> <span class=\"n\">Lean.Parser.Term.byTactic</span><span class=\"o\">,</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">|-</span><span class=\"n\">atom</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span><span class=\"c1\">-- 'by'</span>\n<span class=\"bp\">|-</span><span class=\"n\">node</span> <span class=\"n\">Lean.Parser.Tactic.tacticSeq</span><span class=\"o\">,</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">node</span> <span class=\"n\">Lean.Parser.Tactic.tacticSeq1Indented</span><span class=\"o\">,</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">node</span> <span class=\"n\">null</span><span class=\"o\">,</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">node</span> <span class=\"n\">Lean.Parser.Tactic.withReducible</span><span class=\"o\">,</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">atom</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span><span class=\"c1\">-- 'with_reducible'</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">node</span> <span class=\"n\">Lean.Parser.Tactic.tacticSeq</span><span class=\"o\">,</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">node</span> <span class=\"n\">Lean.Parser.Tactic.tacticSeq1Indented</span><span class=\"o\">,</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">node</span> <span class=\"n\">null</span><span class=\"o\">,</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">node</span> <span class=\"n\">Lean.Parser.Tactic.tacticLet_</span><span class=\"o\">,</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">atom</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span><span class=\"c1\">-- 'let'</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">node</span> <span class=\"n\">Lean.Parser.Term.letDecl</span><span class=\"o\">,</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">node</span> <span class=\"n\">Lean.Parser.Term.letIdDecl</span><span class=\"o\">,</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">ident</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span><span class=\"c1\">-- (x._@.Mathlib.Tactic.mwe_linter._hyg.238,x)</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">node</span> <span class=\"n\">null</span><span class=\"o\">,</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">node</span> <span class=\"n\">null</span><span class=\"o\">,</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">atom</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span><span class=\"c1\">-- ':='</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">node</span> <span class=\"n\">str</span><span class=\"o\">,</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">atom</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span><span class=\"c1\">-- '\"hello\"'</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">node</span> <span class=\"n\">null</span><span class=\"o\">,</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">node</span> <span class=\"n\">Lean.Parser.Tactic.tacticLet_</span><span class=\"o\">,</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">atom</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span><span class=\"c1\">-- 'let'</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">node</span> <span class=\"n\">Lean.Parser.Term.letDecl</span><span class=\"o\">,</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">node</span> <span class=\"n\">Lean.Parser.Term.letIdDecl</span><span class=\"o\">,</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">ident</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span><span class=\"c1\">-- (y._@.Mathlib.Tactic.mwe_linter._hyg.238,y)</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">node</span> <span class=\"n\">null</span><span class=\"o\">,</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">node</span> <span class=\"n\">null</span><span class=\"o\">,</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">atom</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span><span class=\"c1\">-- ':='</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">node</span> <span class=\"n\">str</span><span class=\"o\">,</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">atom</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span><span class=\"c1\">-- '\"world\"'</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">node</span> <span class=\"n\">null</span><span class=\"o\">,</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">node</span> <span class=\"n\">Lean.Parser.Tactic.withReducible</span><span class=\"o\">,</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">atom</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span><span class=\"c1\">-- 'with_reducible'</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">node</span> <span class=\"n\">Lean.Parser.Tactic.tacticSeq</span><span class=\"o\">,</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">node</span> <span class=\"n\">Lean.Parser.Tactic.tacticSeq1Indented</span><span class=\"o\">,</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">node</span> <span class=\"n\">null</span><span class=\"o\">,</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">node</span> <span class=\"n\">Lean.Parser.Tactic.tacticLet_</span><span class=\"o\">,</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">atom</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span><span class=\"c1\">-- 'let'</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">node</span> <span class=\"n\">Lean.Parser.Term.letDecl</span><span class=\"o\">,</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">node</span> <span class=\"n\">Lean.Parser.Term.letIdDecl</span><span class=\"o\">,</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">ident</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span><span class=\"c1\">-- (z._@.Mathlib.Tactic.mwe_linter._hyg.238,z)</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">node</span> <span class=\"n\">null</span><span class=\"o\">,</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">node</span> <span class=\"n\">null</span><span class=\"o\">,</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">atom</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span><span class=\"c1\">-- ':='</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">node</span> <span class=\"n\">str</span><span class=\"o\">,</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">atom</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span><span class=\"c1\">-- '\"oh no\"'</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">node</span> <span class=\"n\">null</span><span class=\"o\">,</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">node</span> <span class=\"n\">Lean.Parser.Tactic.exact</span><span class=\"o\">,</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">atom</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span><span class=\"c1\">-- 'exact'</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">node</span> <span class=\"n\">str</span><span class=\"o\">,</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"n\">atom</span> <span class=\"n\">synthetic</span><span class=\"o\">:</span> <span class=\"n\">false</span><span class=\"c1\">-- '\"where is my indent\"'</span>\n</code></pre></div>",
        "id": 429336401,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1711360556
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/Incorrect.20indents.20when.20processing.20Syntax/near/429334384\">said</a>:</p>\n<blockquote>\n<p>But perhaps the <code>Syntax</code> I've assembled is illegal so the pretty-printer behavior is not specified.</p>\n</blockquote>\n<p>yes, you constructed invalid syntax here because <code>$tacs</code> is a <code>tacticSeq</code> and you used it as a <code>tactic</code></p>",
        "id": 429515811,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711402738
    },
    {
        "content": "<p>I think there is a special hack in the <code> `(tactic| ...)</code> syntax quotation to allow this to work even though it is not syntactically correct, because several tactic-taking functions like <code>elabTactic</code> also work on tacticSeq. However this is not one of them - you can't just put multiple <code>tacticSeq</code>s in a single <code>tacticSeq</code> without some kind of grouping like <code>(...)</code></p>",
        "id": 429516108,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711402898
    },
    {
        "content": "<p>What exactly were you expecting to get?</p>",
        "id": 429516130,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711402915
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Incorrect.20indents.20when.20processing.20Syntax/near/429516130\">said</a>:</p>\n<blockquote>\n<p>What exactly were you expecting to get?</p>\n</blockquote>\n<p>Whoops, I should have started with that. I wanted to end up with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"o\">:=</span> <span class=\"s2\">\"hello\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">y</span><span class=\"bp\">✝</span> <span class=\"o\">:=</span> <span class=\"s2\">\"world\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">z</span><span class=\"bp\">✝</span> <span class=\"o\">:=</span> <span class=\"s2\">\"oh no\"</span>\n  <span class=\"n\">exact</span> <span class=\"s2\">\"where is my indent\"</span>\n</code></pre></div>",
        "id": 429517424,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711403542
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Incorrect.20indents.20when.20processing.20Syntax/near/429516108\">said</a>:</p>\n<blockquote>\n<p>I think there is a special hack in the <code> `(tactic| ...)</code> syntax quotation to allow this to work even though it is not syntactically correct, because several tactic-taking functions like <code>elabTactic</code> also work on tacticSeq. However this is not one of them - you can't just put multiple <code>tacticSeq</code>s in a single <code>tacticSeq</code> without some kind of grouping like <code>(...)</code></p>\n</blockquote>\n<p>Ouch; I was operating on the assumption that <code> `(tactic| ...)</code> would give an error if I did anything illegal.</p>",
        "id": 429517490,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711403584
    },
    {
        "content": "<p>oh, also you kinda lied to the typechecker with this line</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"k\">let</span> <span class=\"n\">tacs</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">←</span> <span class=\"n\">stripWithReducible</span> <span class=\"n\">tacs</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>which is converting a <code>Syntax</code> to <code>TSyntax `tactic</code> even though it's actually a <code>TSyntax `tacticSeq</code></p>",
        "id": 429518058,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711403863
    },
    {
        "content": "<p>Ah, good point</p>",
        "id": 429518151,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711403885
    },
    {
        "content": "<p>I'm not observing your second issue though, <code>#guard_msgs</code> is silent on the original example</p>",
        "id": 429518787,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711404166
    },
    {
        "content": "<p>I think this is a caching issue that I seem to keep running into; you can end up with info messages stuck in vscode from a previous compilation</p>",
        "id": 429518957,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711404248
    },
    {
        "content": "<p>This isn't relevant to this thread, but, speaking of caching issues, here is a fun syntax highlighting one I had the other day until I restarted Lean:</p>\n<p><a href=\"/user_uploads/3121/F7RIPN6EjjWyATi6ckz5VoMP/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/F7RIPN6EjjWyATi6ckz5VoMP/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/F7RIPN6EjjWyATi6ckz5VoMP/image.png\"></a></div>",
        "id": 429519750,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711404701
    },
    {
        "content": "<p>(I ended up just hacking with the raw syntax objects to solve my problem, so I am ok with this thread being derailed)</p>",
        "id": 429519861,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711404735
    }
]