[
    {
        "content": "<p>I am currently working through \"Mathematics in Lean\" and reached Chapter 2.4 \"More examples using apply and rw\". I proved the associativity of <code>min</code> the following way:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span>\n  <span class=\"bp\">·</span> <span class=\"k\">show</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_min</span>\n    <span class=\"bp\">·</span> <span class=\"k\">show</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span>\n      <span class=\"k\">calc</span>\n        <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">min_le_left</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span>\n        <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">min_le_left</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n    <span class=\"bp\">·</span> <span class=\"k\">show</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">min</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n      <span class=\"n\">apply</span> <span class=\"n\">le_min</span>\n      <span class=\"bp\">·</span> <span class=\"k\">show</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span>\n        <span class=\"k\">calc</span>\n          <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">min_le_left</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span>\n          <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">min_le_right</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n      <span class=\"bp\">·</span> <span class=\"k\">show</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span>\n        <span class=\"n\">exact</span> <span class=\"n\">min_le_right</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span>\n  <span class=\"bp\">·</span> <span class=\"k\">show</span> <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_min</span>\n    <span class=\"bp\">·</span> <span class=\"k\">show</span> <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n      <span class=\"n\">apply</span> <span class=\"n\">le_min</span>\n      <span class=\"bp\">·</span> <span class=\"k\">show</span> <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span>\n        <span class=\"n\">exact</span> <span class=\"n\">min_le_left</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n      <span class=\"bp\">·</span> <span class=\"k\">show</span> <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span>\n        <span class=\"k\">calc</span>\n          <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">min</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">min_le_right</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n          <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">min_le_left</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n    <span class=\"bp\">·</span> <span class=\"k\">show</span> <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span>\n      <span class=\"k\">calc</span>\n        <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">min</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">min_le_right</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n        <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">min_le_right</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n</code></pre></div>\n<p>This proof is obviously very lengthy and the chapter introduced tricks to shorten up proofs, but I wasn't able to use any of them. I was wondering if you could suggest some improvements.</p>",
        "id": 409272553,
        "sender_full_name": "Devon Andrews",
        "timestamp": 1703112316
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"675773\">Devon Andrews</span> has marked this topic as resolved.</p>",
        "id": 409275681,
        "sender_full_name": "Notification Bot",
        "timestamp": 1703113817
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"675773\">Devon Andrews</span> has marked this topic as unresolved.</p>",
        "id": 409275695,
        "sender_full_name": "Notification Bot",
        "timestamp": 1703113823
    },
    {
        "content": "<p>The official solution isn't much more enlightening:</p>\n<p><a href=\"https://github.com/leanprover-community/mathematics_in_lean/blob/bd821adacf297756cdb8946cff307747f939b317/MIL/C02_Basics/solutions/Solutions_S04_More_on_Order_and_Divisibility.lean#L20\">https://github.com/leanprover-community/mathematics_in_lean/blob/bd821adacf297756cdb8946cff307747f939b317/MIL/C02_Basics/solutions/Solutions_S04_More_on_Order_and_Divisibility.lean#L20</a></p>",
        "id": 409282007,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1703117697
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"675773\">Devon Andrews</span> has marked this topic as resolved.</p>",
        "id": 409282076,
        "sender_full_name": "Notification Bot",
        "timestamp": 1703117740
    },
    {
        "content": "<p>The mathlib proof goes like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">min_assoc</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">eq_min</span>\n  <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">le_trans</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">min_le_left</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">min_le_left</span>\n  <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">le_min</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">le_trans</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">min_le_left</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">min_le_right</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">min_le_right</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">d</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">le_min</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">le_min</span> <span class=\"n\">h₁</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">le_trans</span> <span class=\"n\">h₂</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">min_le_left</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_trans</span> <span class=\"n\">h₂</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">min_le_right</span>\n</code></pre></div>\n<p>which is I think a biy more of an enlightening way to deal with it</p>",
        "id": 409283223,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1703118670
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">le_total</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">hab</span> <span class=\"bp\">|</span> <span class=\"n\">hab</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rcases</span> <span class=\"n\">le_total</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"k\">with</span> <span class=\"n\">hbc</span> <span class=\"bp\">|</span> <span class=\"n\">hbc</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">min_eq_left</span> <span class=\"n\">hab</span><span class=\"o\">,</span> <span class=\"n\">min_eq_left</span> <span class=\"n\">hbc</span><span class=\"o\">,</span> <span class=\"n\">min_eq_left</span> <span class=\"n\">hab</span><span class=\"o\">,</span> <span class=\"n\">min_eq_left</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">hab.trans</span> <span class=\"n\">hbc</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">min_eq_left</span> <span class=\"n\">hab</span><span class=\"o\">,</span> <span class=\"n\">min_eq_right</span> <span class=\"n\">hbc</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">min_eq_right</span> <span class=\"n\">hab</span><span class=\"o\">,</span> <span class=\"n\">min_eq_left</span> <span class=\"n\">hbc</span><span class=\"o\">,</span> <span class=\"n\">min_eq_right</span> <span class=\"n\">hab</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">min_eq_right</span> <span class=\"n\">hab</span><span class=\"o\">,</span> <span class=\"n\">min_eq_right</span> <span class=\"n\">hbc</span><span class=\"o\">,</span> <span class=\"n\">min_eq_right</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">hbc.trans</span> <span class=\"n\">hab</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">hab</span> <span class=\"bp\">|</span> <span class=\"n\">hab</span> <span class=\"o\">:=</span> <span class=\"n\">le_total</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">obtain</span> <span class=\"n\">hbc</span> <span class=\"bp\">|</span> <span class=\"n\">hbc</span> <span class=\"o\">:=</span> <span class=\"n\">le_total</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hab</span><span class=\"o\">,</span> <span class=\"n\">hbc</span><span class=\"o\">,</span> <span class=\"n\">le_trans</span> <span class=\"n\">hab</span><span class=\"o\">,</span> <span class=\"n\">le_trans</span> <span class=\"n\">hbc</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>here's a couple more that I made, if you haven't come across any of these tactics feel free to ask:)</p>",
        "id": 409283741,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1703119136
    },
    {
        "content": "<p>Why do you use <code>cases'</code>??</p>",
        "id": 409283782,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1703119173
    },
    {
        "content": "<p>and stacking five tactics per line isn't really more enlightening or efficient.</p>",
        "id": 409283858,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1703119215
    },
    {
        "content": "<p>I just wanted to show a different way of doing it; I don't really know what works for teaching Lean unlike you :) and I thought <code>cases</code> needed the <code>| inl h =&gt; ...</code> syntax which wouldn't allow combinators</p>",
        "id": 409283950,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1703119320
    },
    {
        "content": "<p><code>cases'</code> is a temporary tactic created to help porting Mathlib to Lean 4. But you can either use the core <code>cases</code> or <code>rcases</code> or <code>obtain</code>. And you need those tactics anyway, so there is no point teaching <code>cases'</code>.</p>",
        "id": 409284231,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1703119523
    }
]