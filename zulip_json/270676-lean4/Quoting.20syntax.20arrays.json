[
    {
        "content": "<p>I keep spending an awful lot of time guessing at the right syntax for syntax quotations, especially around sequences. For example, what am I doing wrong here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.TryThis</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.ShowTerm</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"n\">Meta</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Std.Tactic.TryThis</span> <span class=\"o\">(</span><span class=\"n\">delabToRefinableSyntax</span> <span class=\"n\">addSuggestion</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">CalcProof</span> <span class=\"o\">:=</span> <span class=\"n\">Expr</span> <span class=\"bp\">×</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">Expr</span> <span class=\"bp\">×</span> <span class=\"n\">Expr</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">delabCalcProof</span> <span class=\"o\">:</span> <span class=\"n\">CalcProof</span> <span class=\"bp\">→</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">tactic</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">lhs</span><span class=\"o\">,</span> <span class=\"n\">steps</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">lhsStx</span> <span class=\"bp\">←</span> <span class=\"n\">delabToRefinableSyntax</span> <span class=\"n\">lhs</span>\n  <span class=\"k\">let</span> <span class=\"n\">firstStep</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">calcFirstStep</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">lhsStx</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">stepStx</span> <span class=\"bp\">←</span> <span class=\"n\">steps.mapM</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">proof</span><span class=\"o\">,</span> <span class=\"n\">rhs</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">calcStep</span><span class=\"bp\">|</span><span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">delabToRefinableSyntax</span> <span class=\"n\">rhs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">delabToRefinableSyntax</span> <span class=\"n\">proof</span><span class=\"o\">))</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"k\">calc</span> <span class=\"bp\">$</span><span class=\"n\">lhsStx</span><span class=\"o\">:</span><span class=\"n\">calcFirstStep</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">stepStx</span><span class=\"o\">:</span><span class=\"n\">calcStep</span><span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>More generally, could lean give more helpful guidance here than just</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unexpected</span> <span class=\"n\">token</span> <span class=\"sc\">'$'</span><span class=\"bp\">;</span> <span class=\"n\">expected</span> <span class=\"sc\">')'</span>\n</code></pre></div>\n<p>somehow?</p>\n<p>For reference:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- first step of a `calc` block</span>\n<span class=\"n\">syntax</span> <span class=\"n\">calcFirstStep</span> <span class=\"o\">:=</span> <span class=\"n\">ppIndent</span><span class=\"o\">(</span><span class=\"n\">colGe</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"s2\">\" := \"</span> <span class=\"n\">term</span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"o\">)</span>\n<span class=\"c1\">-- enforce indentation of calc steps so we know when to stop parsing them</span>\n<span class=\"n\">syntax</span> <span class=\"n\">calcStep</span> <span class=\"o\">:=</span> <span class=\"n\">ppIndent</span><span class=\"o\">(</span><span class=\"n\">colGe</span> <span class=\"n\">term</span> <span class=\"s2\">\" := \"</span> <span class=\"n\">term</span><span class=\"o\">)</span>\n<span class=\"n\">syntax</span> <span class=\"n\">calcSteps</span> <span class=\"o\">:=</span> <span class=\"n\">ppLine</span> <span class=\"n\">withPosition</span><span class=\"o\">(</span><span class=\"n\">calcFirstStep</span><span class=\"o\">)</span> <span class=\"n\">withPosition</span><span class=\"o\">((</span><span class=\"n\">ppLine</span> <span class=\"n\">linebreak</span> <span class=\"n\">calcStep</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"k\">calc</span><span class=\"o\">)</span> <span class=\"s2\">\"calc\"</span> <span class=\"n\">calcSteps</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n</code></pre></div>",
        "id": 409936536,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1703534432
    },
    {
        "content": "<p>Ok, this seems to work. Indentation matters, it seems…</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.TryThis</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.ShowTerm</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"n\">Meta</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Std.Tactic.TryThis</span> <span class=\"o\">(</span><span class=\"n\">delabToRefinableSyntax</span> <span class=\"n\">addSuggestion</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">CalcProof</span> <span class=\"o\">:=</span> <span class=\"n\">Expr</span> <span class=\"bp\">×</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">Expr</span> <span class=\"bp\">×</span> <span class=\"n\">Expr</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">delabCalcProof</span> <span class=\"o\">:</span> <span class=\"n\">CalcProof</span> <span class=\"bp\">→</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">tactic</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">lhs</span><span class=\"o\">,</span> <span class=\"n\">steps</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">stepStx</span> <span class=\"bp\">←</span> <span class=\"n\">steps.mapM</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">proof</span><span class=\"o\">,</span> <span class=\"n\">rhs</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">calcStep</span><span class=\"bp\">|</span><span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">delabToRefinableSyntax</span> <span class=\"n\">rhs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">delabToRefinableSyntax</span> <span class=\"n\">proof</span><span class=\"o\">))</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"k\">calc</span>\n      <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">delabToRefinableSyntax</span> <span class=\"n\">lhs</span><span class=\"o\">):</span><span class=\"n\">term</span>\n      <span class=\"bp\">$</span><span class=\"n\">stepStx</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 409938477,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1703536490
    }
]