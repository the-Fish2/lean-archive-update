[
    {
        "content": "<p>I've started to get goal states that contain boolean combinations of <code>decide</code> of arithmetic statements:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">w</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">≤</span> <span class=\"n\">w</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">omega</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">w</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">≤</span> <span class=\"n\">w</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">omega</span> <span class=\"c1\">-- omega did not find a contradiction: trivial</span>\n</code></pre></div>\n<p>I'm wondering what the correct approach to this is. am I using omega incorrectly, and it should be able to solve this? </p>\n<p>Implementation-wise, I guess we would want to teach omega to try and convert <code>decide(P)</code> when <code>P</code> is arithmetic into a case split over <code>P</code> plus a call to omega?</p>",
        "id": 423031454,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1708700151
    },
    {
        "content": "<p>What does <code>simp?</code> produce for the second example?</p>",
        "id": 423031827,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1708700266
    },
    {
        "content": "<p>that is indeed correct, I can just run a <code>simp</code>. I ought to have tried that, duh!</p>",
        "id": 423033103,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1708700626
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 423033119,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1708700632
    },
    {
        "content": "<p>Hmm, this does not seem to help with the larger goal state that I have from which I MWE'd this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">intMin_getMsb</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">intMin</span> <span class=\"o\">(</span><span class=\"n\">w</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">getMsb</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">intMin</span><span class=\"o\">,</span> <span class=\"n\">getMsb</span><span class=\"o\">,</span> <span class=\"n\">getLsb</span><span class=\"o\">,</span> <span class=\"n\">Nat.testBit_one_eq</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- ▶ 1 goal</span>\n  <span class=\"c1\">-- i w : Nat</span>\n  <span class=\"c1\">-- ⊢ (decide (i &lt; w + 1) &amp;&amp; (decide (w - i &lt; w + 1) &amp;&amp; (decide (w ≤ w - i) &amp;&amp; decide (w - i - w = 0)))) = decide (i = 0)</span>\n</code></pre></div>",
        "id": 423033857,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1708700849
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"514145\">@Geoffrey Irving</span> any idea what's going on in this case?</p>",
        "id": 423034741,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1708701114
    },
    {
        "content": "<p>In that case I (perhaps ignorantly) usually use simp lemmas in reverse, in particular <code>Bool.decide_and</code> and friends.  Then you'll end up with <code>decide ... = decide ...</code>, which will simplify to a non-decide thing.  But using simp lemmas in reverse is a bit ugly, so I'm not sure this approach is optimal.</p>",
        "id": 423039185,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1708702365
    },
    {
        "content": "<p>Yes, currently <code>omega</code> doesn't like decide.</p>",
        "id": 423098780,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1708724377
    },
    {
        "content": "<p>It does limited propositional reasoning, but the goals have to be expressed in Prop, not Bool.</p>",
        "id": 423098823,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1708724404
    },
    {
        "content": "<p>I'm not intending to change this until (hopefully soon) we have <code>sat</code> available, after which we will make it work properly.</p>",
        "id": 423098964,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1708724466
    },
    {
        "content": "<p>I would like to have good simp sets for \"working in the opposite direction\". E.g <code>simp only [bool_to_prop]</code> and <code>simp only [prop_to_bool]</code>.</p>",
        "id": 423099150,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1708724560
    },
    {
        "content": "<p>We've made a small start on the direction with the <code>bv_toNat</code> simp set in core for \"converting BitVec goals to Nat goals, and pushing BitVec.toNat inwards\", which is essentially the preprocessor for <code>bv_omega</code>.</p>",
        "id": 423099263,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1708724633
    }
]