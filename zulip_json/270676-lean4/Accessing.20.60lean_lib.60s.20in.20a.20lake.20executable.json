[
    {
        "content": "<p>In the context of making <code>lake exe mkAll</code> work, it would be nice to access the project libraries automatically within the command.  (How) can that be achieved?</p>\n<p>For instance, (how) could this <code>main</code> be extended so that it prints the <code>lean_lib</code>s of the project?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">UInt32</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">libs</span> <span class=\"bp\">←</span> <span class=\"n\">wishfulGet</span> <span class=\"n\">leanLibs</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">libs</span>\n  <span class=\"n\">return</span> <span class=\"mi\">0</span>\n\n<span class=\"c1\">--  desired output:</span>\n<span class=\"c1\">--  [Mathlib, Cache, MathlibExtras, Archive, Counterexamples, docs]</span>\n</code></pre></div>",
        "id": 430929144,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712126567
    },
    {
        "content": "<p>You can technically speaking import Lake, parse the lake file with it and do your thing but that's rather wasteful. The proper way <span aria-label=\"tm\" class=\"emoji emoji-2122\" role=\"img\" title=\"tm\">:tm:</span> would be a facet instead of an exe I believe?</p>\n<p>CC <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span></p>",
        "id": 430933479,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1712128464
    },
    {
        "content": "<p>Even if it is wasteful, could you point me in the direction of how to parse the lakefile?</p>",
        "id": 430933699,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712128565
    },
    {
        "content": "<p>I don't remember anymore, you can dig through the lake module in the mathlib docs (alterantively go to definition through the lake code yourself, it has to call the parser somewhere after all). The data structure you want to obtain is a <code>Workspace</code></p>\n<p>Note that the lake API gives you no stability guarantees so if you do this it can be that you end up having to frequently fix your script.</p>",
        "id": 430934091,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1712128738
    },
    {
        "content": "<p>Ok, thanks!  I found a way to get a <code>Workspace</code>, but it was in a weird monad that did not play with <code>IO</code>...</p>",
        "id": 430934266,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712128814
    },
    {
        "content": "<p>Anyway, I'll play some more with it, but if someone knows how to do this, I would be very happy to hear about it!</p>",
        "id": 430934380,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712128856
    },
    {
        "content": "<p>I mean Mac knows for sure, you just have to wait until he wakes up :P</p>",
        "id": 430938649,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1712130497
    },
    {
        "content": "<p>yes, the recommended way to do this is to use the lake API</p>",
        "id": 430942881,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712131938
    },
    {
        "content": "<p>adapting some code I wrote a while ago for a similar purpose:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lake.CLI.Main</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lake</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getLeanLibs</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">elanInstall</span><span class=\"bp\">?</span><span class=\"o\">,</span> <span class=\"n\">leanInstall</span><span class=\"bp\">?</span><span class=\"o\">,</span> <span class=\"n\">lakeInstall</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">findInstall</span><span class=\"bp\">?</span>\n  <span class=\"k\">let</span> <span class=\"n\">config</span> <span class=\"bp\">←</span> <span class=\"n\">MonadError.runEIO</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">mkLoadConfig.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"n\">elanInstall</span><span class=\"bp\">?</span><span class=\"o\">,</span> <span class=\"n\">leanInstall</span><span class=\"bp\">?</span><span class=\"o\">,</span> <span class=\"n\">lakeInstall</span><span class=\"bp\">?</span> <span class=\"o\">}</span>\n  <span class=\"k\">let</span> <span class=\"n\">ws</span> <span class=\"bp\">←</span> <span class=\"n\">MonadError.runEIO</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"n\">loadWorkspace</span> <span class=\"n\">config</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">run</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">eio</span> <span class=\"bp\">.</span><span class=\"n\">normal</span><span class=\"o\">)</span>\n  <span class=\"n\">return</span> <span class=\"n\">ws.root.leanLibs.map</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">toList</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">UInt32</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">libs</span> <span class=\"bp\">←</span> <span class=\"n\">getLeanLibs</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">libs</span>\n  <span class=\"n\">return</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 430944208,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712132329
    },
    {
        "content": "<p>yes, running stuff in lake's monad from IO is annoying</p>",
        "id": 430944290,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712132355
    },
    {
        "content": "<p>unrelated aside: you don't need to <code>return 0</code>  from <code>main</code>, it can just return an <code>IO Unit</code></p>",
        "id": 430944691,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712132457
    },
    {
        "content": "<p>This is great, Mario!  Thank you very much!</p>",
        "id": 430961512,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712137099
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Accessing.20.60lean_lib.60s.20in.20a.20lake.20executable/near/430944691\">said</a>:</p>\n<blockquote>\n<p>unrelated aside: you don't need to <code>return 0</code>  from <code>main</code>, it can just return an <code>IO Unit</code></p>\n</blockquote>\n<p>I had forgotten about this comment: in the actual implementation, the command <code>return</code>s the number of <code>import all</code> files that needed updating.  I consider a \"successful <code>mkAll</code> run\" to be one where all the files are already imported and the script simply checks this.  Otherwise, its exit code is the number of files that it modified.</p>",
        "id": 430974534,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712141495
    },
    {
        "content": "<p>By the way, it sounds like you are writing something that overlaps with some automation <span class=\"user-mention\" data-user-id=\"110994\">@Joe Hendrix</span> worked on for <a href=\"https://github.com/leanprover/std4/pull/498\">std4#498</a> (called <code>check_imports.lean</code>). Could the code there be repurposed or generalized, or otherwise unified with this <code>mkAll</code> program?</p>",
        "id": 430984743,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712145190
    },
    {
        "content": "<p>The code that Yaël and I have been working on is <a href=\"https://github.com/leanprover-community/mathlib4/pull/11853\">#11853</a>.  I will now take a look at the std PR that you mention.  Thanks for the pointer!</p>",
        "id": 430985098,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712145315
    },
    {
        "content": "<p>After a quick glance through, it seems that the code in <code>check_imports</code> does something much more sophisticated than what <code>mkAll</code> does.</p>\n<p><code>mkAll</code> simply takes an input directory <code>dir</code> and creates a file <code>dir.lean</code> with lines <code>import files</code> for each <code>.lean</code> file in <code>dir</code>.</p>\n<p>The std script seems to have expectations of what each dir content is supposed to be and it also creates a file for each subdir.</p>\n<p>I can probably recycle <code>writeImportModule</code>.  The <code>mkAll</code> script does very little on top of that, the rest is documentation and linking into the <code>lake</code> machinery.</p>",
        "id": 431004247,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712151128
    },
    {
        "content": "<p>The code is in <code>Std.scripts.check_imports</code>: can I import that file from Mathlib?</p>",
        "id": 431005351,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712151445
    },
    {
        "content": "<p>The code in that file can't be imported.  Potentially some of the logic could be put in a module actually part of <code>Std</code>.  However, if it's a small amount of code (like <code>writeImportModule</code>), it may be better just to make a separate copy so there isn't risk of coupling and breaking downstream if either code ever needs to change.</p>",
        "id": 431064624,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1712155251
    },
    {
        "content": "<p>Ok, thanks for the information!  The whole PR is approximately 60 lines of code and the rest is documentation.  I agree that recycling a few lines of code is not worth the effort (and can always be done if/when the <code>writeImportModule</code> code becomes visible).</p>",
        "id": 431065153,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712155403
    },
    {
        "content": "<p>After the huge upgrade the lake had recently, I went back to the code that Mario wrote for producing the list of libraries of a project and it no longer works.</p>\n<p>Unfortunately, I did not understand the old version and I do not know how to write a new one: does anyone know how to write a function that returns an <code>Array</code> with the names of the libraries on which the current project depends?</p>\n<p>Thanks!</p>",
        "id": 437856095,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715275110
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span>, voodoo from poking around <code>src/lake/Lake/Util/MainM.lean</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lake.CLI.Main</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lake</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getLeanLibs</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">elanInstall</span><span class=\"bp\">?</span><span class=\"o\">,</span> <span class=\"n\">leanInstall</span><span class=\"bp\">?</span><span class=\"o\">,</span> <span class=\"n\">lakeInstall</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">findInstall</span><span class=\"bp\">?</span>\n  <span class=\"k\">let</span> <span class=\"n\">config</span> <span class=\"bp\">←</span> <span class=\"n\">MonadError.runEIO</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">mkLoadConfig</span> <span class=\"o\">{</span> <span class=\"n\">elanInstall</span><span class=\"bp\">?</span><span class=\"o\">,</span> <span class=\"n\">leanInstall</span><span class=\"bp\">?</span><span class=\"o\">,</span> <span class=\"n\">lakeInstall</span><span class=\"bp\">?</span> <span class=\"o\">}</span>\n  <span class=\"k\">let</span> <span class=\"n\">ws</span> <span class=\"bp\">←</span> <span class=\"n\">MonadError.runEIO</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"n\">MainM.runLogIO</span> <span class=\"o\">(</span><span class=\"n\">loadWorkspace</span> <span class=\"n\">config</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">toEIO</span>\n  <span class=\"n\">return</span> <span class=\"n\">ws.root.leanLibs.map</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">toList</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">UInt32</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">libs</span> <span class=\"bp\">←</span> <span class=\"n\">getLeanLibs</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">libs</span>\n  <span class=\"n\">return</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 437906939,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715300947
    },
    {
        "content": "<p>Kim, thank you very much!  I'll try it as soon as I am at a computer!</p>",
        "id": 437930186,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715321734
    },
    {
        "content": "<p>Kim, your code worked very well!</p>\n<p>I used it to update <a href=\"https://github.com/leanprover-community/mathlib4/pull/11853\">#11853</a> -- <code>mk_all</code> as a lean executable.</p>",
        "id": 437937852,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715326311
    }
]