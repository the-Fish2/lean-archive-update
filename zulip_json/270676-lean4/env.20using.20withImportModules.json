[
    {
        "content": "<p>I came across something the following today:<br>\nCompare the following two pieces of code.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Batteries.Lean.Util.Path</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib.Lean.CoreM</span>\n\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Lean</span>\n<span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">IO</span><span class=\"w\"> </span><span class=\"n\">Unit</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"n\">searchPathRef.set</span><span class=\"w\"> </span><span class=\"n\">compile_time_search_path</span><span class=\"bp\">%</span>\n<span class=\"w\">  </span><span class=\"n\">CoreM.withImportModules</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"ss\">`Mathlib</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">env</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">getEnv</span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"bp\">!</span><span class=\"w\"> </span><span class=\"n\">env.constants.toList.length</span>\n</code></pre></div>\n<p>vs. the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Batteries.Lean.Util.Path</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib.Lean.CoreM</span>\n\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Lean</span>\n<span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">IO</span><span class=\"w\"> </span><span class=\"n\">Unit</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"n\">searchPathRef.set</span><span class=\"w\"> </span><span class=\"n\">compile_time_search_path</span><span class=\"bp\">%</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">env</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">CoreM.withImportModules</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"ss\">`Mathlib</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">getEnv</span>\n<span class=\"w\">  </span><span class=\"n\">println</span><span class=\"bp\">!</span><span class=\"w\"> </span><span class=\"n\">env.constants.toList.length</span>\n</code></pre></div>\n<p>The first one works as expected, but the second gives a nonzero exit code and doesn't print anything. The thing is, in my mental model these two programs are equivalent, so I'm interested in understanding why they're behaving differently.</p>",
        "id": 445504169,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1718770149
    },
    {
        "content": "<p>This is a bug in Mathlib, that function must be <code>unsafe</code>. Please read <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.withImportModules#doc\">docs#Lean.withImportModules</a>.</p>",
        "id": 445538330,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1718786578
    },
    {
        "content": "<p>Marking it <code>unsafe</code> wouldn't change anything here, right?</p>",
        "id": 445546079,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718789052
    },
    {
        "content": "<p>It would hopefully make you think twice whether you've used <code>unsafe</code> correctly, which is not possible in the second code block</p>",
        "id": 445546667,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1718789270
    },
    {
        "content": "<p>Thanks. What’s the preferred way to get an env in IO from an import while still allowing references to it?</p>",
        "id": 445580146,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1718800785
    },
    {
        "content": "<p>I think you're expect to do all the work inside the <code>withImportModules</code>?</p>",
        "id": 445582239,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718801505
    },
    {
        "content": "<p>The thing is, I’m getting some unexpected stack overflow if I try to do my computation inside of the <code>withImportModules</code> so I explicitly want to try to do it in IO to diagnose the issue</p>",
        "id": 445584654,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1718802159
    },
    {
        "content": "<p>You can run the binary in gdb until it stack overflows and take a look at the back trace for a first clue as to what is going wrong.</p>",
        "id": 445590438,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1718803724
    },
    {
        "content": "<p>What is gdb?</p>",
        "id": 445591532,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1718803941
    },
    {
        "content": "<p>Okay if you don't already know GDB my suggestion is probably not useful for you. If you still want to try: its a CLI based C debugger (the GNU debugger) that you can use to....well debug compiled lean projects. You would run gdb &lt;binary&gt; and then in the gdb shell run to execute the program and then when it crashes bt to get a backtrace.</p>",
        "id": 445592221,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1718804095
    },
    {
        "content": "<p>Okay, I have it figured out now. Thanks all for the help! FWIW, the issue arose from the <code>toJson</code> instance for lists. Here is a minimized main function illustrating the issue:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">IO</span><span class=\"w\"> </span><span class=\"n\">Unit</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"n\">println</span><span class=\"bp\">!</span><span class=\"w\"> </span><span class=\"n\">toJson</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"n\">List.range</span><span class=\"w\"> </span><span class=\"mi\">100000</span>\n</code></pre></div>",
        "id": 445597166,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1718805479
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span>, could you make an issue for that?</p>",
        "id": 445759263,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718859157
    },
    {
        "content": "<p>Will do. I'll do some more digging first (e.g. the same issue happens for <code>Array</code>, and the list instance uses that one)</p>",
        "id": 445859241,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1718892650
    },
    {
        "content": "<p>I think the issue is the Json to string instance</p>",
        "id": 445867133,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718894309
    },
    {
        "content": "<p>Yeah I think you’re right</p>",
        "id": 445867236,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1718894338
    },
    {
        "content": "<p>In fact, its the format to string one</p>",
        "id": 445867289,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718894349
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">run_cmd</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">toJson</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"bp\">.</span><span class=\"n\">range</span><span class=\"w\"> </span><span class=\"mi\">100000</span>\n<span class=\"w\">  </span><span class=\"n\">pure</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">toString</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span>\n</code></pre></div>\n<p>is fine</p>",
        "id": 445867327,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718894356
    },
    {
        "content": "<p>I'm not so sure... this still gives a stack overflow:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">run_cmd</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Lean.toJson</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"n\">List.range</span><span class=\"w\"> </span><span class=\"mi\">100000</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">toString</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span>\n<span class=\"w\">  </span><span class=\"n\">println</span><span class=\"bp\">!</span><span class=\"w\"> </span><span class=\"n\">e</span>\n</code></pre></div>",
        "id": 445871297,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1718895240
    },
    {
        "content": "<p>I can't come up with an example that doesn't use Json, and only uses some large term of <code>Format</code>.</p>",
        "id": 445875370,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1718896003
    }
]