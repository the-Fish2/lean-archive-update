[
    {
        "content": "<p>I'm interested in emulating runtime irrelevance in Lean beyond just propositions, at least as far as enforcing the rules of runtime-irrelevant types, if not actually erasing their values during compilation. I think the following module achieves this, though I would very much appreciate a review:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"c\">/-</span>\n<span class=\"cm\">No destructuring of `Irrelevant α` outside this module is allowed.</span>\n<span class=\"cm\">I think `private` on the constructor enforces this?</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">inductive</span><span class=\"w\"> </span><span class=\"n\">Irrelevant</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Sort</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"w\"> </span><span class=\"bp\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Sort</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">max</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"kn\">private</span><span class=\"w\"> </span><span class=\"n\">mk_</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Irrelevant</span><span class=\"w\"> </span><span class=\"n\">α</span>\n\n<span class=\"c1\">-- public constructor</span>\n<span class=\"kn\">abbrev</span><span class=\"w\"> </span><span class=\"n\">Irrelevant</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Irrelevant</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Irrelevant</span><span class=\"bp\">.</span><span class=\"n\">mk_</span><span class=\"w\"> </span><span class=\"n\">x</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">₀α denotes an irrelevant type, and (x)₀ demotes a relevant value to an</span>\n<span class=\"cm\">irrelevant one</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">prefix</span><span class=\"o\">:</span><span class=\"n\">max</span><span class=\"w\"> </span><span class=\"s2\">\"₀\"</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Irrelevant</span>\n<span class=\"kn\">postfix</span><span class=\"o\">:</span><span class=\"n\">max</span><span class=\"w\"> </span><span class=\"s2\">\"₀\"</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Irrelevant</span><span class=\"bp\">.</span><span class=\"n\">mk</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">The only allowed projections (outside of this module) from `Irrelevant` are to</span>\n<span class=\"cm\">irrelevant terms, i.e. sorts and propositions</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kn\">abbrev</span><span class=\"w\"> </span><span class=\"n\">Irrelevant</span><span class=\"bp\">.</span><span class=\"n\">toSort</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">₀</span><span class=\"o\">(</span><span class=\"kt\">Sort</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Sort</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"m\">1</span>\n\n<span class=\"kn\">abbrev</span><span class=\"w\"> </span><span class=\"n\">Irrelevant</span><span class=\"bp\">.</span><span class=\"n\">toProp</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Prop</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">₀</span><span class=\"n\">p</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"m\">1</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">Do I need attributes on the following two instances in order to make their methods</span>\n<span class=\"cm\">reduce nicely?</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Functor</span><span class=\"w\"> </span><span class=\"n\">Irrelevant</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">map</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Irrelevant</span><span class=\"bp\">.</span><span class=\"n\">mk_</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">x</span>\n\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Applicative</span><span class=\"w\"> </span><span class=\"n\">Irrelevant</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">pure</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Irrelevant</span><span class=\"bp\">.</span><span class=\"n\">mk_</span>\n<span class=\"w\">  </span><span class=\"n\">seq</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Irrelevant</span><span class=\"bp\">.</span><span class=\"n\">mk_</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Functor</span><span class=\"bp\">.</span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">())</span>\n</code></pre></div>\n<p>With the following coercions <code>Irrelevant</code> becomes convenient to use:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">CoeSort</span><span class=\"w\"> </span><span class=\"bp\">₀</span><span class=\"o\">(</span><span class=\"kt\">Sort</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kt\">Sort</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">coe</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Irrelevant</span><span class=\"bp\">.</span><span class=\"n\">toSort</span>\n\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Prop</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Coe</span><span class=\"w\"> </span><span class=\"bp\">₀</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">coe</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Irrelevant</span><span class=\"bp\">.</span><span class=\"n\">toProp</span>\n\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Coe</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">₀</span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">coe</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Irrelevant</span><span class=\"bp\">.</span><span class=\"n\">mk</span>\n\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">CoeFun</span><span class=\"w\"> </span><span class=\"bp\">₀</span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">β</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">₀</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"bp\">₀</span><span class=\"n\">β</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">coe</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">λ</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Seq</span><span class=\"bp\">.</span><span class=\"n\">seq</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">OfNat</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">OfNat</span><span class=\"w\"> </span><span class=\"bp\">₀</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">ofNat</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">OfNat</span><span class=\"bp\">.</span><span class=\"n\">ofNat</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">₀</span>\n</code></pre></div>\n<p>So now examples like the following work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">le</span><span class=\"o\">)</span><span class=\"bp\">₀</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">decide</span>\n<span class=\"w\">  </span><span class=\"n\">p</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">le</span><span class=\"w\"> </span><span class=\"bp\">&lt;$&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"bp\">₀</span><span class=\"w\"> </span><span class=\"bp\">&lt;*&gt;</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"bp\">₀</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">le</span><span class=\"o\">)</span><span class=\"bp\">₀</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">rfl</span>\n\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">LE</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">]:</span><span class=\"w\"> </span><span class=\"n\">LE</span><span class=\"w\"> </span><span class=\"bp\">₀</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">le</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">λ</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">LE</span><span class=\"bp\">.</span><span class=\"n\">le</span><span class=\"o\">)</span><span class=\"bp\">₀</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">le</span><span class=\"o\">)</span><span class=\"bp\">₀</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">₀</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"bp\">₀</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">rfl</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"bp\">₀</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"bp\">₀</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">decide</span>\n<span class=\"w\">  </span><span class=\"n\">p</span>\n</code></pre></div>",
        "id": 446068174,
        "sender_full_name": "Dylan Ede",
        "timestamp": 1718971229
    },
    {
        "content": "<p>Hmm, even with <code>private mk</code> as above, I can still access the wrapped value from a different module via <code>.1</code>. Is there any way of disabling this?</p>",
        "id": 446091747,
        "sender_full_name": "Dylan Ede",
        "timestamp": 1718979201
    },
    {
        "content": "<p>Looks like stopping access to projections when the constructor is marked private was talked about being implemented a couple of years ago, <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Export.20smart.20constructor.20but.20also.20the.20type/near/298852286\">here</a>.</p>",
        "id": 446094193,
        "sender_full_name": "Dylan Ede",
        "timestamp": 1718980004
    },
    {
        "content": "<p>I think this kind of thing is what people use <code>Trunc</code> for.</p>",
        "id": 446286691,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1719070781
    },
    {
        "content": "<p>Or maybe <code>Noncomputable</code> if you actually want erasure.</p>",
        "id": 446286766,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1719070805
    },
    {
        "content": "<p>This automatically derives the <code>Functor</code> and <code>Applicative</code> instances:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Monad</span><span class=\"w\"> </span><span class=\"n\">Irrelevant</span><span class=\"w\"> </span><span class=\"n\">where</span>\n<span class=\"w\">  </span><span class=\"n\">pure</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Irrelevant.mk</span>\n<span class=\"w\">  </span><span class=\"n\">bind</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 446291448,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1719073069
    },
    {
        "content": "<p>I don't think <code>Trunc</code> corresponds to the OP's idea: <code>Trunc α</code>makes values indistinguishable but still computationally significant, whereas <code>Irrelevant α</code> has distinguishable values that are computationally insignificant.</p>",
        "id": 446299426,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1719077221
    },
    {
        "content": "<p>What does it mean for thing to be distinguishable yet computationally insignificant?</p>",
        "id": 446300795,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719078055
    },
    {
        "content": "<p>To make the OP's example </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"bp\">₀</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"bp\">₀</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"kd\">by</span><span class=\"w\"> </span><span class=\"n\">decide</span>\n<span class=\"w\">  </span><span class=\"n\">p</span>\n</code></pre></div>\n<p>meaningful <code>1₀</code> and <code>2₀</code> have to be distinguishable values. (This particular example works with <code>Trunc</code> but for silly reasons. Replace <code>≤</code> by <code>&lt;</code> for a better example.)</p>",
        "id": 446303681,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1719079758
    },
    {
        "content": "<p>Maybe <code>Erased</code> is closer than <code>Trunc</code> to the desired behavior here</p>",
        "id": 446304498,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1719080164
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Enforcing.20the.20rules.20of.20runtime.20irrelevance/near/446304498\">said</a>:</p>\n<blockquote>\n<p>Maybe <code>Erased</code> is closer than <code>Trunc</code> to the desired behavior here</p>\n</blockquote>\n<p>Ah yes, that's exactly what I'm looking for! Looking at how <code>Erased</code> is implemented, I was expecting some sort of compiler magic, but no, that's a very neat trick (if you can call it that).</p>",
        "id": 446315195,
        "sender_full_name": "Dylan Ede",
        "timestamp": 1719085309
    },
    {
        "content": "<p>I'm not at a computer to test it at the moment, but I wonder how I can maintain the ergonomics of existing proofs when converting variables they use to <code>Erased</code>. Any tips? I noticed with my crude <code>Irrelevant</code> type that proofs became slightly more annoying. Can I make use of the <code>Equiv</code> implementation somehow to transport from a proof on non-erased values?</p>",
        "id": 446315743,
        "sender_full_name": "Dylan Ede",
        "timestamp": 1719085633
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"409979\">Dylan Ede</span> has marked this topic as resolved.</p>",
        "id": 446832721,
        "sender_full_name": "Notification Bot",
        "timestamp": 1719309237
    }
]