[
    {
        "content": "<p>If you call <code>Nat.toUInt64</code> on a number large enough that it should overflow a UInt64, but then call <code>UInt64.toNat</code>, the full value magically tunnels through to the output? <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">eval</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">123456789012345678901</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toUInt64</span><span class=\"w\">        </span><span class=\"c1\">-- 12776324570088369205</span>\n<span class=\"bp\">#</span><span class=\"n\">eval</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">123456789012345678901</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toUInt64</span><span class=\"bp\">.</span><span class=\"n\">toNat</span><span class=\"w\">  </span><span class=\"c1\">-- 123456789012345678901</span>\n</code></pre></div>\n<p>Optimization gone wrong? I haven't checked if there's a bug report yet, but I will be busy for the next few hours if someone wants to do some more digging and file a report.</p>\n<p>This is on <code>4.9.0-nightly-2024-05-25</code>, I haven't tested other versions!</p>",
        "id": 441361677,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1717035885
    },
    {
        "content": "<p>It's not just <code>#eval</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">123456789012345678901</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toUInt64</span><span class=\"bp\">.</span><span class=\"n\">toNat</span>\n<span class=\"bp\">#</span><span class=\"n\">eval</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"c1\">-- 123456789012345678901</span>\n</code></pre></div>",
        "id": 441363112,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1717036582
    },
    {
        "content": "<p>Is this a soundness bug?</p>",
        "id": 441364255,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1717037164
    },
    {
        "content": "<p>yikes <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span> yes it is</p>",
        "id": 441364285,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1717037188
    },
    {
        "content": "<p>the kernel rejects it, so I guess not a soundness bug</p>",
        "id": 441364503,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1717037298
    },
    {
        "content": "<p>weirdly, native_decide also rejects it?</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">123456789012345678901</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toUInt64</span><span class=\"bp\">.</span><span class=\"n\">toNat</span>\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"n\">UInt64</span><span class=\"bp\">.</span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">native_decide</span>\n</code></pre></div>\n<p>fails</p>",
        "id": 441365362,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1717037776
    },
    {
        "content": "<p>Yikes</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">123456789012345678901</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toUInt64</span><span class=\"w\">        </span><span class=\"c1\">-- 12776324570088369205</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">123456789012345678901</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toUInt64</span><span class=\"bp\">.</span><span class=\"n\">toNat</span><span class=\"w\">  </span><span class=\"c1\">-- 123456789012345678901</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">a_eq</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">12776324570088369205</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">rfl</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">b_eq</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">123456789012345678901</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">native_decide</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">a_eq_b</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">toNat</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">rfl</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">a_neq_b</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">toNat</span><span class=\"w\"> </span><span class=\"bp\">≠</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">a_eq</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">b_eq</span><span class=\"o\">]</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">false</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">False</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">a_neq_b</span><span class=\"w\"> </span><span class=\"n\">a_eq_b</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">flt</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">^</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">^</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">≠</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">^</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n</code></pre></div>",
        "id": 441368912,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1717039613
    },
    {
        "content": "<p>It appears it is a soundness bug, but I couldn't get it to happen without using <code>native_decide</code></p>",
        "id": 441368984,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1717039649
    },
    {
        "content": "<p>I'm not surprised that <code>native_decide</code> lets you do it, since it's giving you access to the compiled version of <code>b</code>, adding the axiom that the compiled version is equivalent to the definition.</p>",
        "id": 441369743,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1717040039
    },
    {
        "content": "<p>Here's the short version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">false</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">False</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"mi\">123456789012345678901</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toUInt64</span><span class=\"bp\">.</span><span class=\"n\">toNat</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">123456789012345678901</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">native_decide</span>\n<span class=\"w\">  </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">toUInt64</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">this</span>\n\n<span class=\"bp\">#</span><span class=\"n\">print</span><span class=\"w\"> </span><span class=\"n\">axioms</span><span class=\"w\"> </span><span class=\"n\">false</span>\n</code></pre></div>\n<p>And the output:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"bp\">'</span><span class=\"n\">false'</span><span class=\"w\"> </span><span class=\"n\">depends</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">axioms</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">ofReduceBool</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">propext</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 441370174,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1717040272
    },
    {
        "content": "<p>Fwiw this is not accepted by the rust external type checker even with <code>Lean.ofReduceBool</code> and <code>propext</code> whitelisted. I'll add it as a \"should fail\" test case.</p>",
        "id": 441374654,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1717042721
    },
    {
        "content": "<p>Just as a terminological note, this is not a soundness bug, this is a miscompilation (which results in a compiler soundness bug aka a native_reduce proof of false)</p>",
        "id": 441374932,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717042911
    },
    {
        "content": "<p>The examples above throw a max recursion depth error on v4.7.0-rc2, so there's that.</p>",
        "id": 441375928,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1717043391
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/4306\">lean#4306</a></p>",
        "id": 441378530,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1717044751
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> has marked this topic as resolved.</p>",
        "id": 441820766,
        "sender_full_name": "Notification Bot",
        "timestamp": 1717195546
    }
]