[
    {
        "content": "<p>Ran into an unexpected (to me) failure of the termination checker, I was curious for more information about how the checker worked.</p>\n<p>Here's a simple lean file that fails to compile:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.Nat</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Data.List</span>\n\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Expr</span> <span class=\"n\">where</span>\n    <span class=\"bp\">|</span> <span class=\"n\">lit</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Expr</span>\n    <span class=\"bp\">|</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Expr</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Expr</span>\n    <span class=\"bp\">|</span> <span class=\"n\">mult</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Expr</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Expr</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">ns</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">ns</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">::</span> <span class=\"n\">ns</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">sum</span> <span class=\"n\">ns</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sum_of_lits</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">lit</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"n\">e1</span> <span class=\"n\">e2</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">sum_of_lits</span> <span class=\"n\">e1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">sum_of_lits</span> <span class=\"n\">e2</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">mult</span> <span class=\"n\">es</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">List.map</span> <span class=\"n\">sum_of_lits</span> <span class=\"n\">es</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>It fails to being unable to prove termination of the recursive call to <code>sum_of_lits</code> as an argument to <code>List.map</code>.</p>\n<p>In Coq, the equivalent file:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Require</span> <span class=\"n\">Import</span> <span class=\"n\">Coq.Lists.List.</span>\n<span class=\"n\">Open</span> <span class=\"n\">Scope</span> <span class=\"n\">list_scope.</span>\n<span class=\"n\">Import</span> <span class=\"n\">ListNotations.</span>\n\n<span class=\"n\">Inductive</span> <span class=\"n\">expr</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Num</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">expr</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Add</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">expr</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">expr</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Mult</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">expr</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">expr.</span>\n\n<span class=\"n\">Fixpoint</span> <span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">ns</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">ns</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">sum</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n    <span class=\"kd\">end</span><span class=\"bp\">.</span>\n\n<span class=\"n\">Fixpoint</span> <span class=\"n\">sum_all_literals</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Num</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Add</span> <span class=\"n\">e1</span> <span class=\"n\">e2</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">sum_all_literals</span> <span class=\"n\">e1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">sum_all_literals</span> <span class=\"n\">e2</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Mult</span> <span class=\"n\">es</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">sum_all_literals</span> <span class=\"n\">es</span><span class=\"o\">)</span>\n    <span class=\"kd\">end</span><span class=\"bp\">.</span>\n</code></pre></div>\n<p>Which compiles fine. I was curious about the differences in the termination checkers, is this a fundamental limitation of a lean design decision?</p>",
        "id": 436892399,
        "sender_full_name": "Aaron Eline",
        "timestamp": 1714745534
    },
    {
        "content": "<p>The difference between how termination is checked in lean and coq is quite drastical. The specific case that you have at hand is a nested inductive type which is not currently supported very well when it comes to automation sadly.</p>",
        "id": 436907184,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1714749892
    },
    {
        "content": "<p>That said, this is (one way) to make it work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.Nat</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Data.List</span>\n\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Expr</span> <span class=\"n\">where</span>\n    <span class=\"bp\">|</span> <span class=\"n\">lit</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Expr</span>\n    <span class=\"bp\">|</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Expr</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Expr</span>\n    <span class=\"bp\">|</span> <span class=\"n\">mult</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Expr</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Expr</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">ns</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">ns</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">::</span> <span class=\"n\">ns</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">sum</span> <span class=\"n\">ns</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sum_of_lits</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">lit</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"n\">e1</span> <span class=\"n\">e2</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">sum_of_lits</span> <span class=\"n\">e1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">sum_of_lits</span> <span class=\"n\">e2</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">mult</span> <span class=\"n\">es</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">List.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">â¨</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">â©</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sum_of_lits</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">List.attach</span> <span class=\"n\">es</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 436909988,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1714750748
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/270676-lean4/topic/Termination.20Checker.20Question/near/436909988\">said</a>:</p>\n<blockquote>\n<p>That said, this is (one way) to make it work:</p>\n</blockquote>\n<p>Could you explain the <code>List.attach</code>?</p>",
        "id": 436910214,
        "sender_full_name": "Aaron Eline",
        "timestamp": 1714750823
    },
    {
        "content": "<p>It turns some list <code>xs</code> of <code>a</code>s into a list of <code>a</code>s that have a proof that they are a member of <code>xs</code>. This proof is enough to let the automation see that there is a well founded recursion going on.</p>",
        "id": 436911236,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1714751208
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik BÃ¶ving</span> <a href=\"#narrow/stream/270676-lean4/topic/Termination.20Checker.20Question/near/436911236\">said</a>:</p>\n<blockquote>\n<p>It turns some list <code>xs</code> of <code>a</code>s into a list of <code>a</code>s that have a proof that they are a member of <code>xs</code>. This proof is enough to let the automation see that there is a well founded recursion going on.</p>\n</blockquote>\n<p>Ah cool, thanks a bunch</p>",
        "id": 436911298,
        "sender_full_name": "Aaron Eline",
        "timestamp": 1714751232
    },
    {
        "content": "<p>Also see <a href=\"https://lean-lang.org/blog/2024-1-11-recursive-definitions-in-lean/\">https://lean-lang.org/blog/2024-1-11-recursive-definitions-in-lean/</a>, section on nested recursion</p>",
        "id": 436995789,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1714802668
    }
]