[
    {
        "content": "<p>Often I want to go-to-definition to see what's going on in the code I'm looking at. However, if I try to go-to-def on type-dependent notation or a typeclass field, I get the generic template instead of the specific implementation. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"c1\">--          ^command+click</span>\n</code></pre></div>\n<p>goes to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>   <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">binop</span><span class=\"bp\">%</span> <span class=\"n\">HAdd.hAdd</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Likewise, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">HAdd.hAdd</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"c1\">--             ^^^^command+click</span>\n</code></pre></div>\n<p>goes to the <code>hAdd</code> field of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/--</span>\n<span class=\"sd\">The notation typeclass for heterogeneous addition.</span>\n<span class=\"sd\">This enables the notation `a + b : γ` where `a : α`, `b : β`.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">class</span> <span class=\"n\">HAdd</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- `a + b` computes the sum of `a` and `b`.</span>\n<span class=\"sd\">  The meaning of this notation is type-dependent. -/</span>\n  <span class=\"n\">hAdd</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span>\n</code></pre></div>\n<p>Ideally, in this case, I'd like to command+click and get to <code>instAddNat.add</code> in both cases instead. It would be an improvement in my eyes if command-clicking brought me to the field of the instance being used. (Note that we could <em>then</em> command-click the field itself or the type to get to the typeclass itself, so the typeclass wouldn't be totally inaccessible.)</p>\n<p>But, there's a small problem with that (which shows that \"fixing\" this would be a little complicated): even if command-clicking took me to the <code>hAdd</code> field of the instance of <code>HAdd</code> being used here, I'd actually get to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">default_instance</span><span class=\"kd\">]</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">HAdd</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">hAdd</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">Add.add</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>and now have to write <code>#synth Add Nat</code> anyway, then command+click again to get to <code>instAddNat.add</code>. Which is better than doing it twice, but still not ideal. I would guess that this is the situation for a few commonly used <code>H</code>-typeclasses.</p>\n<p>However, if it <em>did</em> jump straight to <code>instAddNat.add</code>, that might be confusing too, as we would be jumping past the typeclass that actually appears there, which might leave the user disoriented or misinformed.</p>\n<p>So there are three questions here:</p>\n<ol>\n<li>do other people also feel that command-clicking should, generally, lead to the specific implementation at hand rather than the \"template\"?</li>\n<li>is this already easy through a different shortcut somehow, and I just don't know how to do it?</li>\n<li>if (1), then what's the right approach to the \"chained instances\" issue above?</li>\n</ol>",
        "id": 425625775,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1709942609
    },
    {
        "content": "<p>I would normally use the infoview for this, clicking on the plus to pop out the full term and then cmd+click on <code>instAddNat</code> to jump to it.<br>\nI'm not sure what's better but I'm used to the way it works right now so don't really see the benefit of changing it (I probably want to look at the instance and at the typeclass roughly equally often)</p>",
        "id": 425653733,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1709964584
    },
    {
        "content": "<p>I'm not able to reproduce it now, but I remember a couple of times when I <code>ctrl+click</code>ed on a definition from a type class, it didn't directly send me to the definition, but instead showed multiple definitions that I could then click on. One being the type class and one or more being the instance. I quite like this. So in the example of addition, it would show 3 definitions: <code>HAdd</code>, <code>instHAdd</code> and <code>instAddNat</code>.</p>",
        "id": 425692209,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1709995509
    },
    {
        "content": "<p>I finally managed to reproduce the behaviour I mentioned: <code>crtl</code> + click gives a list of all definitions used in constructing the instance field, allowing you to choose which definition to go to, and showing a preview of the definitions. See the screenshot. But only if the function is not applied to any arguments. It seems to work on 4.8.0-rc2, but not on 4.7.0. I am quite surprised by this, and I wonder what the intent is, given that it only works when there are no explicit arguments.</p>\n<p><a href=\"/user_uploads/3121/rZ8OdSchMHseAGR-bx7q3Dv-/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/rZ8OdSchMHseAGR-bx7q3Dv-/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/rZ8OdSchMHseAGR-bx7q3Dv-/image.png\"></a></div>",
        "id": 441927798,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1717259129
    },
    {
        "content": "<p>Note that this only works in the editor. <code>ctrl</code> + click in the infoview still just goes to the definition of <code>HAdd.hAdd</code>.</p>",
        "id": 441928857,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1717259635
    },
    {
        "content": "<p>When there are a lot of instances involved, it goes a bit crazy, and it duplicates instances that appear multiple times:</p>\n<p><a href=\"/user_uploads/3121/snvHVNPxHKktMBfYFih_a6kB/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/snvHVNPxHKktMBfYFih_a6kB/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/snvHVNPxHKktMBfYFih_a6kB/image.png\"></a></div>",
        "id": 441944067,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1717266558
    },
    {
        "content": "<p>In this example it's surprising that the <code>Monad MetaM</code> instance shows up among the used instances, because it isn't necessary for the <code>MonadStateOf</code> instance. But it turns out that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=StateRefT%27.instMonadStateOfOfMonadLiftTSTOfMonad#doc\">docs#StateRefT'.instMonadStateOfOfMonadLiftTSTOfMonad</a> unnecessarily takes the monad instance as an argument.</p>\n<p>So it turns out that this view is already helpful for debugging <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 441946223,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1717267507
    },
    {
        "content": "<p>I'm surprised there is no unused variable linter ever being run on Lean core</p>",
        "id": 441947360,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1717267971
    },
    {
        "content": "<p>There is no variable name here so there is no unused variable lint</p>",
        "id": 441949236,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1717268762
    },
    {
        "content": "<p>Oh, so there is no linter that checks for unused instance arguments?</p>",
        "id": 441950352,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1717269286
    },
    {
        "content": "<p>I think that one only exists in mathlib</p>",
        "id": 441951556,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717269854
    },
    {
        "content": "<p>How can we run mathlib's linters on Lean core?</p>",
        "id": 441953422,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1717270733
    },
    {
        "content": "<p>I think it would be easy enough to modify the script to work, but quite hard to integrate it into cores CI without making dependency spaghetti</p>",
        "id": 441980123,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717283179
    },
    {
        "content": "<p>Just running once would be nice.</p>",
        "id": 442408896,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1717462766
    },
    {
        "content": "<p>I found out how to run the linters on all imported files. It turns out that there is a lot to fix in core Lean.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Std</span><span class=\"bp\">.</span><span class=\"n\">Tactic</span><span class=\"bp\">.</span><span class=\"n\">Lint</span>\n\n<span class=\"bp\">#</span><span class=\"n\">lint</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"n\">unusedArguments</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">all</span><span class=\"w\"> </span><span class=\"c1\">-- Found 113 errors</span>\n<span class=\"bp\">#</span><span class=\"n\">lint</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"n\">checkUnivs</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">all</span><span class=\"w\"> </span><span class=\"c1\">-- Found 1 error</span>\n<span class=\"bp\">#</span><span class=\"n\">lint</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"n\">defLemma</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">all</span><span class=\"w\"> </span><span class=\"c1\">-- Found 40 errors</span>\n<span class=\"bp\">#</span><span class=\"n\">lint</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"n\">explicitVarsOfIff</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">all</span><span class=\"w\"> </span><span class=\"c1\">-- Found 56 errors</span>\n<span class=\"bp\">#</span><span class=\"n\">lint</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"n\">dupNamespace</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">all</span><span class=\"w\"> </span><span class=\"c1\">-- Found 8 errors</span>\n<span class=\"bp\">#</span><span class=\"n\">lint</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"n\">impossibleInstance</span><span class=\"w\">  </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">all</span><span class=\"w\"> </span><span class=\"c1\">-- Found 1 error</span>\n<span class=\"bp\">#</span><span class=\"n\">lint</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"n\">simpNF</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">all</span><span class=\"w\"> </span><span class=\"c1\">-- Found 27 errors</span>\n<span class=\"bp\">#</span><span class=\"n\">lint</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"n\">simpVarHead</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">all</span><span class=\"w\"> </span><span class=\"c1\">-- Found 1 error</span>\n<span class=\"bp\">#</span><span class=\"n\">lint</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"n\">unusedHavesSuffices</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">all</span><span class=\"w\">  </span><span class=\"c1\">-- Found 3 errors</span>\n</code></pre></div>\n<p>About half of the unused variable errors I believe are intended. But most other errors are genuine errors.</p>",
        "id": 442613564,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1717530851
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479299\">@Jovan Gerbscheid</span> has now fixed some of these in <a href=\"https://github.com/leanprover/lean4/pull/4502\">lean#4502</a>.</p>\n<p>I'm surprised there are only 27 simpNF linter errors, I was expecting way more. I will work on these soon.</p>",
        "id": 445732665,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718845713
    }
]