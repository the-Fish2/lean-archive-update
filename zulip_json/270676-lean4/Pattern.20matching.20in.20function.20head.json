[
    {
        "content": "<p>Is there any particular reason irrefutable patterns aren't allowed in function parameters? I find myself regularly doing refactors like this when I don't want to name parameters:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">myFst</span> <span class=\"o\">(</span><span class=\"n\">prod</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">√ó</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">prod</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">myFst'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"bp\">√ó</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ±</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>Reconfiguring the whole type signature each time is a mild pain. I'd like to be able to write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">myFst</span> <span class=\"o\">((</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">√ó</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 430345747,
        "sender_full_name": "James Sully",
        "timestamp": 1711763815
    },
    {
        "content": "<p>I low-key also wish this was possible, at least for obvious single-constructor types. Also, you don't need a whole <code>match</code>, you can just do <code>let (a, _) := prod</code>.</p>",
        "id": 430378042,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1711794483
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416280\">Max Nowak üêâ</span> <a href=\"#narrow/stream/270676-lean4/topic/Pattern.20matching.20in.20function.20head/near/430378042\">said</a>:</p>\n<blockquote>\n<p>you can just do <code>let (a, _) := prod</code>.</p>\n</blockquote>\n<p>Oh yeah, good point</p>",
        "id": 430389841,
        "sender_full_name": "James Sully",
        "timestamp": 1711804938
    }
]