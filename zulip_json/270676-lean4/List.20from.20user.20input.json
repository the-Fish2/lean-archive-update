[
    {
        "content": "<p>Hi!</p>\n<p>The following function asks the user to input some numbers in the IO unit, then it constructs a list from it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">stdin</span> <span class=\"bp\">←</span> <span class=\"n\">IO.getStdin</span>\n  <span class=\"k\">let</span> <span class=\"n\">stdout</span> <span class=\"bp\">←</span> <span class=\"n\">IO.getStdout</span>\n\n  <span class=\"n\">stdout.putStrLn</span> <span class=\"s2\">\"Please enter a list of integers in the form 1, -2, 3 (as many integers as you want, seperated by a comma).\"</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">input</span> <span class=\"bp\">←</span> <span class=\"n\">stdin.getLine</span>\n  <span class=\"k\">let</span> <span class=\"n\">list</span> <span class=\"o\">:=</span> <span class=\"n\">input.splitOn</span> <span class=\"s2\">\",\"</span> <span class=\"bp\">|&gt;</span> <span class=\"n\">List.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s.trim.toInt</span><span class=\"bp\">!</span><span class=\"o\">)</span>\n\n  <span class=\"n\">stdout.putStrLn</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"The list you entered is {list}.\"</span>\n</code></pre></div>\n<p>However, I am unable to make the same thing works with rationals in place of integers.</p>\n<p>I tried to write the following function outside of <code>main</code>, to help parse rational numbers:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">parseRational</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">s.splitOn</span> <span class=\"s2\">\"/\"</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"o\">[</span><span class=\"n\">num</span><span class=\"o\">,</span> <span class=\"n\">denom</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">let</span> <span class=\"n\">denomNat</span> <span class=\"o\">:=</span> <span class=\"n\">denom.toNat</span><span class=\"bp\">!</span>\n  <span class=\"k\">if</span> <span class=\"n\">denomNat</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">none</span>\n  <span class=\"k\">else</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">Rat.mk'</span> <span class=\"o\">(</span><span class=\"n\">num.toInt</span><span class=\"bp\">!</span><span class=\"o\">)</span> <span class=\"n\">denomNat</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n</code></pre></div>\n<p>Am I on the right track? Any pointers on how to proceed?</p>\n<p>A much minor issue is that, in the initial function,  I would also like to be able to ask the user to input a list under the form <code>[1, -2, 3]</code>, as opposed to <code>1, -2, 3</code>, but I am having a hard time getting rid of the brackets when parsing the user input (I thought I could do it, but then it also suppressed the entry right next to it...). Is there a standard way to do that? I am also happy to read from a reference if somebody can point me to one :-)</p>",
        "id": 409330883,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1703145054
    },
    {
        "content": "<p>For creating the rational, I'm not sure <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Rat.mk%27#doc\">docs#Rat.mk'</a> should be considered a public interface. You can instead do <code>(num.toInt! / denomNat : ℚ)</code>, which should cause both the numerator and denominator to be coerced to a rational and then their quotient is taken in the rationals.</p>",
        "id": 409414529,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1703173440
    },
    {
        "content": "<p>Here's an example of using Parsec for parsing your square bracket input. I had to write a combinator for doing comma-separated lists, since there's not much in the core Parsec library already. I also didn't write these definitions as tersely as possible.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"o\">(</span><span class=\"n\">Parsec</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Parsec</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">parseNat</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">num</span> <span class=\"bp\">←</span> <span class=\"n\">many1Chars</span> <span class=\"n\">digit</span>\n  <span class=\"n\">return</span> <span class=\"n\">num.toNat</span><span class=\"bp\">!</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">parsePosInt</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"bp\">←</span> <span class=\"n\">parseNat</span>\n  <span class=\"n\">return</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">parseNegInt</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">skipChar</span> <span class=\"sc\">'-'</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"bp\">←</span> <span class=\"n\">parseNat</span>\n  <span class=\"n\">return</span> <span class=\"bp\">-</span><span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">parseInt</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"n\">parsePosInt</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">parseNegInt</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">Parses a comma-separated list of items parsed by `p`.</span>\n<span class=\"sd\">The commas can have whitespace surrounding them.</span>\n<span class=\"sd\">-/</span>\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">parseCommaSep</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">go</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n<span class=\"n\">where</span>\n  <span class=\"n\">go</span> <span class=\"o\">(</span><span class=\"n\">acc</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">acc</span> <span class=\"o\">:=</span> <span class=\"n\">acc.push</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n    <span class=\"n\">ws</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">peek</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">==</span> <span class=\"sc\">','</span> <span class=\"k\">then</span>\n      <span class=\"n\">skip</span>\n      <span class=\"n\">ws</span>\n      <span class=\"n\">go</span> <span class=\"n\">acc</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">return</span> <span class=\"n\">acc</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">parseIntArray</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">skipChar</span> <span class=\"sc\">'['</span>\n  <span class=\"n\">ws</span>\n  <span class=\"k\">let</span> <span class=\"n\">arr</span> <span class=\"bp\">←</span> <span class=\"n\">parseCommaSep</span> <span class=\"n\">parseInt</span>\n  <span class=\"n\">skipChar</span> <span class=\"sc\">']'</span>\n  <span class=\"n\">return</span> <span class=\"n\">arr</span>\n\n<span class=\"c1\">-- Example:</span>\n<span class=\"k\">#eval</span> <span class=\"n\">parseIntArray.run</span> <span class=\"s2\">\"[1,2,-3]\"</span>\n<span class=\"c\">/-</span><span class=\"cm\"> Except.ok #[1, 2, -3] -/</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">I split this out of `main` to be able to test it with `#eval`.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">processLine</span> <span class=\"o\">(</span><span class=\"n\">input</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"c1\">-- Uses `eof` to guarantee the whole input is read.</span>\n  <span class=\"k\">let</span> <span class=\"n\">list</span> <span class=\"bp\">←</span> <span class=\"n\">IO.ofExcept</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"n\">parseIntArray</span> <span class=\"bp\">&lt;*</span> <span class=\"n\">eof</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">run</span> <span class=\"n\">input.trim</span>\n\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"The list you entered is {list}.\"</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">processLine</span> <span class=\"s2\">\"[1, -2, 3]\"</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">The list you entered is #[1, -2, 3].</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">stdin</span> <span class=\"bp\">←</span> <span class=\"n\">IO.getStdin</span>\n\n  <span class=\"n\">IO.println</span> <span class=\"s2\">\"Please enter a list of integers in the form [1, -2, 3] (as many integers as you want, seperated by commas).\"</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">input</span> <span class=\"bp\">←</span> <span class=\"n\">stdin.getLine</span>\n  <span class=\"n\">processLine</span> <span class=\"n\">input</span>\n</code></pre></div>",
        "id": 409418978,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1703174770
    },
    {
        "content": "<p>Here's a version with rational number parsing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"o\">(</span><span class=\"n\">Parsec</span> <span class=\"n\">Rat</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Parsec</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">parseNat</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">num</span> <span class=\"bp\">←</span> <span class=\"n\">many1Chars</span> <span class=\"n\">digit</span>\n  <span class=\"n\">return</span> <span class=\"n\">num.toNat</span><span class=\"bp\">!</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">parsePosInt</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"bp\">←</span> <span class=\"n\">parseNat</span>\n  <span class=\"n\">return</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">parseNegInt</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">skipChar</span> <span class=\"sc\">'-'</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"bp\">←</span> <span class=\"n\">parseNat</span>\n  <span class=\"n\">return</span> <span class=\"bp\">-</span><span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">parseInt</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"n\">parsePosInt</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">parseNegInt</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">parseRat</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"n\">Rat</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">num</span> <span class=\"bp\">←</span> <span class=\"n\">parseInt</span>\n  <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">peek</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">==</span> <span class=\"sc\">'/'</span> <span class=\"k\">then</span>\n    <span class=\"n\">skip</span>\n    <span class=\"k\">let</span> <span class=\"n\">denom</span> <span class=\"bp\">←</span> <span class=\"n\">parseNat</span>\n    <span class=\"k\">if</span> <span class=\"n\">denom</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n      <span class=\"n\">fail</span> <span class=\"s2\">\"Denominator is 0\"</span>\n    <span class=\"n\">return</span> <span class=\"n\">num</span> <span class=\"bp\">/</span> <span class=\"n\">denom</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">return</span> <span class=\"n\">num</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">Parses a comma-separated list of items parsed by `p`.</span>\n<span class=\"sd\">The commas can have whitespace surrounding them.</span>\n<span class=\"sd\">-/</span>\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">parseCommaSep</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">go</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n<span class=\"n\">where</span>\n  <span class=\"n\">go</span> <span class=\"o\">(</span><span class=\"n\">acc</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">acc</span> <span class=\"o\">:=</span> <span class=\"n\">acc.push</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n    <span class=\"n\">ws</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">peek</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">==</span> <span class=\"sc\">','</span> <span class=\"k\">then</span>\n      <span class=\"n\">skip</span>\n      <span class=\"n\">ws</span>\n      <span class=\"n\">go</span> <span class=\"n\">acc</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">return</span> <span class=\"n\">acc</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">parseRatArray</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">Rat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">skipChar</span> <span class=\"sc\">'['</span>\n  <span class=\"n\">ws</span>\n  <span class=\"k\">let</span> <span class=\"n\">arr</span> <span class=\"bp\">←</span> <span class=\"n\">parseCommaSep</span> <span class=\"n\">parseRat</span>\n  <span class=\"n\">skipChar</span> <span class=\"sc\">']'</span>\n  <span class=\"n\">return</span> <span class=\"n\">arr</span>\n\n<span class=\"c1\">-- Example:</span>\n<span class=\"k\">#eval</span> <span class=\"n\">toString</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">parseRatArray.run</span> <span class=\"s2\">\"[1,2/3,-3]\"</span>\n<span class=\"c\">/-</span><span class=\"cm\"> \"ok: #[1, 2/3, -3]\" -/</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">I split this out of `main` to be able to test it with `#eval`.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">processLine</span> <span class=\"o\">(</span><span class=\"n\">input</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"c1\">-- Uses `eof` to guarantee the whole input is read.</span>\n  <span class=\"k\">let</span> <span class=\"n\">list</span> <span class=\"bp\">←</span> <span class=\"n\">IO.ofExcept</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"n\">parseRatArray</span> <span class=\"bp\">&lt;*</span> <span class=\"n\">eof</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">run</span> <span class=\"n\">input.trim</span>\n\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"The list you entered is {list}.\"</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">processLine</span> <span class=\"s2\">\"[1, -2/3, 3]\"</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">The list you entered is #[1, -2/3, 3].</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">stdin</span> <span class=\"bp\">←</span> <span class=\"n\">IO.getStdin</span>\n\n  <span class=\"n\">IO.println</span> <span class=\"s2\">\"Please enter a list of integers in the form [1, -2, 3] (as many integers as you want, seperated by commas).\"</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">input</span> <span class=\"bp\">←</span> <span class=\"n\">stdin.getLine</span>\n  <span class=\"n\">processLine</span> <span class=\"n\">input</span>\n</code></pre></div>",
        "id": 409419867,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1703175060
    },
    {
        "content": "<p>Wow, that's fantastic, <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> , thanks! It will take me time to digest all of this, but I'm very grateful <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span> </p>\n<p>Something that was not working for me in my initial code was the input of the empty list, the was not being recognized. As far as I can tell, the above code has the same issue, in spite of the brackets. I will try to fix this <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> Thanks again!</p>",
        "id": 410410417,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1703842351
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"513540\">@Flo (Florent Schaffhauser)</span> Here seems to be a way to fix the logic so it handles empty lists:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">parseCommaSep</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"k\">do</span> <span class=\"n\">go</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">p</span><span class=\"o\">])</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">pure</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n<span class=\"n\">where</span>\n  <span class=\"n\">go</span> <span class=\"o\">(</span><span class=\"n\">acc</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"n\">ws</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">peek</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">==</span> <span class=\"sc\">','</span> <span class=\"k\">then</span>\n      <span class=\"n\">skip</span>\n      <span class=\"n\">ws</span>\n      <span class=\"n\">go</span> <span class=\"o\">(</span><span class=\"n\">acc.push</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">p</span><span class=\"o\">))</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">return</span> <span class=\"n\">acc</span>\n</code></pre></div>\n<p>The idea is</p>\n<ol>\n<li>see if <code>p</code> parses, and if not that means we must be looking at an empty list</li>\n<li>if <code>p</code> does parse, then we want to look for a sequence of <code>, p</code></li>\n</ol>",
        "id": 410448962,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1703866853
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>  <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span>  I lost track of this issue somewhere along the way, but now I'm motivated to try again <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 442710476,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1717571264
    }
]