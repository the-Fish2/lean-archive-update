[
    {
        "content": "<p>Hello,</p>\n<p>I am trying to reuse a function from a command_elab which creates an instance of <code>Cow</code> and installs an instance of the type class <code>Age</code> through metaprogramming. Because I want the function to be used in main, I would like to convert the <code>CommandElabM</code> into <code>IO</code>. I can obtain the constructed instance, but the type classes are lost.</p>\n<p>In the example below, the <code>age</code> function works and the <code>Age</code> instance is found when using the command, but the <code>Age</code> is not found when using the function <code>convertCow</code>.</p>\n<p>I suspect it has to do with the <code>Enviroment</code> but could not find how to obtain the current <code>Enviroment</code> from <code>IO</code>. Is there a way?</p>\n<p>Sorry if it is unclear.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Qq</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Qq</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span>\n\n<span class=\"c1\">-- A structure</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Cow</span> <span class=\"n\">where</span>\n  <span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">String</span>\n\n<span class=\"c1\">-- A typeclass</span>\n<span class=\"kd\">class</span> <span class=\"n\">Age</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Cow</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"n\">age</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"c1\">-- Some function using the typeclass</span>\n<span class=\"kd\">def</span> <span class=\"n\">Cow.age</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Cow</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Age</span> <span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">b.age</span>\n\n<span class=\"c1\">-- Function from Mario Carneiro on zulip : https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/read.20term.20from.20file/near/400316661</span>\n<span class=\"c1\">-- I do not know if it will preserve the side-effects of installing the instances.</span>\n<span class=\"kd\">def</span> <span class=\"n\">runCommandElabM</span> <span class=\"o\">(</span><span class=\"n\">env</span> <span class=\"o\">:</span> <span class=\"n\">Environment</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">CommandElabM</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">cmdCtx</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">fileName</span>     <span class=\"o\">:=</span> <span class=\"s2\">\"&lt;empty&gt;\"</span>\n    <span class=\"n\">fileMap</span>      <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">ofString</span> <span class=\"s2\">\"\"</span>\n    <span class=\"n\">tacticCache</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n  <span class=\"o\">}</span>\n  <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">liftM</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">EIO.toIO'</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">cmdCtx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">run</span> <span class=\"o\">{</span> <span class=\"n\">env</span><span class=\"o\">,</span> <span class=\"n\">maxRecDepth</span> <span class=\"o\">:=</span> <span class=\"n\">maxRecDepth.defValue</span> <span class=\"o\">})</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">throw</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">IO.Error.userError</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"unexpected internal error: {← e.toMessageData.toString}\"</span>\n\n<span class=\"c1\">-- Function to construct a Cow and install an Age instance in metaprogramming.</span>\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">makeCowAux</span> <span class=\"o\">(</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">age</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Elab.Command.CommandElabM</span> <span class=\"n\">Cow</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n   <span class=\"c1\">-- We create the Cow</span>\n   <span class=\"k\">have</span> <span class=\"n\">cowQ</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Cow</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">({</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">name</span><span class=\"o\">})</span>\n   <span class=\"n\">Elab.Command.liftCoreM</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">addAndCompile</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">.</span><span class=\"n\">defnDecl</span> <span class=\"o\">{</span>\n     <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">ident</span>\n     <span class=\"n\">levelParams</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n     <span class=\"n\">type</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Cow</span><span class=\"o\">)</span>\n     <span class=\"n\">value</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">cowQ</span><span class=\"o\">)</span>\n     <span class=\"n\">hints</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">regular</span> <span class=\"mi\">0</span>\n     <span class=\"n\">safety</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">safe</span>\n   <span class=\"o\">}</span>\n   <span class=\"n\">setReducibleAttribute</span> <span class=\"n\">ident</span>\n   <span class=\"k\">have</span> <span class=\"n\">cow</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Cow</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">mkConst</span> <span class=\"n\">ident</span> <span class=\"o\">[]</span>\n\n   <span class=\"c1\">-- We create the Age object</span>\n   <span class=\"k\">have</span> <span class=\"n\">ageQ</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Age</span> <span class=\"bp\">$</span><span class=\"n\">cow</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">({</span><span class=\"n\">age</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">age</span><span class=\"o\">})</span>\n   <span class=\"k\">have</span> <span class=\"n\">ageName</span> <span class=\"o\">:</span> <span class=\"n\">Name</span> <span class=\"o\">:=</span> <span class=\"n\">Name.mkStr</span> <span class=\"n\">ident</span> <span class=\"s2\">\"ageClass\"</span>\n   <span class=\"n\">Elab.Command.liftCoreM</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">addAndCompile</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">.</span><span class=\"n\">defnDecl</span> <span class=\"o\">{</span>\n       <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">ageName</span>\n       <span class=\"n\">levelParams</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n       <span class=\"n\">type</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Age</span> <span class=\"bp\">$</span><span class=\"n\">cow</span><span class=\"o\">)</span>\n       <span class=\"n\">value</span> <span class=\"o\">:=</span> <span class=\"n\">ageQ</span>\n       <span class=\"n\">hints</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">regular</span> <span class=\"mi\">0</span>\n       <span class=\"n\">safety</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">safe</span>\n   <span class=\"o\">}</span>\n   <span class=\"c1\">-- We install the instance</span>\n   <span class=\"n\">Elab.Command.liftTermElabM</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Meta.addInstance</span> <span class=\"n\">ageName</span> <span class=\"bp\">.</span><span class=\"n\">global</span> <span class=\"mi\">42</span>\n   <span class=\"c1\">-- We want the object registered under the Name</span>\n   <span class=\"n\">evalConst</span> <span class=\"n\">Cow</span> <span class=\"n\">ident</span>\n\n<span class=\"c1\">-- We want to get out of CommandElabM and into IO</span>\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">convertCow</span> <span class=\"o\">(</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">age</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Cow</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"c1\">-- This part might be wrong. I did not find a way to get the current environment from outside the CommandElabM monad.</span>\n  <span class=\"c1\">-- Also, I do not know what I should import exactly.</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">importModules</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">Init</span><span class=\"o\">]</span> <span class=\"o\">{}</span>\n  <span class=\"k\">let</span> <span class=\"n\">cmdCow</span> <span class=\"o\">:=</span> <span class=\"n\">makeCowAux</span> <span class=\"n\">ident</span> <span class=\"n\">name</span> <span class=\"n\">age</span>\n  <span class=\"n\">runCommandElabM</span> <span class=\"n\">env</span> <span class=\"n\">cmdCow</span>\n\n<span class=\"c1\">-- We want to be able to use the function in a command</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">makeCow</span><span class=\"o\">)</span> <span class=\"s2\">\"make_cow\"</span> <span class=\"n\">ident</span> <span class=\"n\">str</span> <span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">command_elab</span> <span class=\"n\">makeCow</span><span class=\"kd\">]</span>\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">makeCowImpl</span> <span class=\"o\">:</span> <span class=\"n\">Elab.Command.CommandElab</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">make_cow</span> <span class=\"bp\">$</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">name</span> <span class=\"bp\">$</span><span class=\"n\">age</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"bp\">←</span> <span class=\"n\">makeCowAux</span> <span class=\"n\">ident.getId</span> <span class=\"n\">name.getString</span> <span class=\"n\">age.getNat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Elab.throwUnsupportedSyntax</span>\n\n\n<span class=\"n\">make_cow</span> <span class=\"n\">bessy</span> <span class=\"s2\">\"Bessy\"</span> <span class=\"mi\">10</span>\n\n<span class=\"c1\">-- Used as a command, it works</span>\n<span class=\"k\">#check</span> <span class=\"n\">bessy.ageClass</span>\n<span class=\"k\">#eval</span> <span class=\"n\">bessy.age</span>\n\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">myFunction</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">newBessy</span> <span class=\"o\">:</span> <span class=\"n\">Cow</span> <span class=\"bp\">←</span> <span class=\"n\">convertCow</span> <span class=\"s2\">\"newBessy\"</span> <span class=\"s2\">\"newBessy\"</span> <span class=\"mi\">42</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">newBessy.name</span>\n  <span class=\"c1\">-- Used in a function, the instances are missing/not found.</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">newBessy.ageClass.age</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">newBessy.age</span>\n</code></pre></div>",
        "id": 435375715,
        "sender_full_name": "Gauvain Devillez",
        "timestamp": 1714047358
    },
    {
        "content": "<p>What you try to do in <code>myFunction</code> is not possible. You run <code>convertCow</code> at <em>run time</em> of the function but somehow expect it to influence the <em>compile time</em> of the function, which would be time travel. Can you say more about what you're trying to achieve?</p>",
        "id": 435380538,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1714048957
    },
    {
        "content": "<p>It may be the case that you want to move the computation <code>convertCow \"newBessy\" \"newBessy\" 42</code> to compile time by introducing a <strong>term</strong> elaborator that does something very similar to <code>makeCowAux</code> but the context is not sufficiently clear</p>",
        "id": 435381147,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1714049163
    },
    {
        "content": "<p>Thank you for the reply! I did not think about the compile time.</p>\n<p>To give more context, we are trying to build graphs from json files along with their properties. For example, a graph and the property that it is connected. We do so using elab to have good performances (there will be tens of thousands of files).</p>\n<p>What I want to do now is to be able to create an exe that would go through a list of json files and verify those properties for the graphs in each of them. I was hoping I would not have to duplicate the code.</p>",
        "id": 435383095,
        "sender_full_name": "Gauvain Devillez",
        "timestamp": 1714049777
    },
    {
        "content": "<p>I think you're looking for withImportModules, which starts an interpreter/compiler within your runtime</p>",
        "id": 435524847,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714114286
    }
]