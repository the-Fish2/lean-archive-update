[
    {
        "content": "<p>Why is <code>dsimp</code> not able to reduce the structure projection here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Data.List.Instances</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">//</span> <span class=\"n\">True</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- nasty unfolding, this probably shouldn't be necessary</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">Lean.Internal.coeM</span> <span class=\"n\">instCoeT</span> <span class=\"n\">instCoeHTCT_1</span> <span class=\"n\">instCoeHTC_1</span> <span class=\"n\">instCoeOTC</span> <span class=\"n\">instCoeOTC_2</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">subtypeCoe</span> <span class=\"n\">CoeOTC.coe</span> <span class=\"n\">CoeT.coe</span> <span class=\"n\">CoeHTCT.coe</span> <span class=\"n\">CoeHTC.coe</span> <span class=\"n\">CoeOut.coe</span>\n  <span class=\"c1\">-- this doesn't make progress</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 422208816,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708340299
    },
    {
        "content": "<p>The goal is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">A</span>\n<span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"bp\">//</span> <span class=\"n\">True</span> <span class=\"o\">}</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">l</span>\n  <span class=\"n\">pure</span>\n      <span class=\"o\">{</span>\n          <span class=\"n\">coe</span> <span class=\"o\">:=</span>\n            <span class=\"o\">{</span>\n                  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span>\n                    <span class=\"o\">{</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">({</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">↑</span><span class=\"n\">v</span> <span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">a</span> <span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n                      <span class=\"n\">a</span> <span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n              <span class=\"n\">a</span> <span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n</code></pre></div>\n<p>where I would very much hope the <code>.1</code>s cancel with the constructors</p>",
        "id": 422208992,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708340371
    },
    {
        "content": "<p>It seems <code>simp only</code> can make progress, but it's not clear to me why <code>dsimp</code> cannot</p>",
        "id": 422209276,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708340449
    },
    {
        "content": "<p>Me neither. I tried <code>dsimp (config := {proj := true}) only</code> but same effect. Probably worth reporting as an issue!</p>",
        "id": 422210760,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1708341014
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/3395\">lean4#3395</a></p>",
        "id": 422214259,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708342360
    }
]