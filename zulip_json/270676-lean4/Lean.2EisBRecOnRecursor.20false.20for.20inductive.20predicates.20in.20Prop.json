[
    {
        "content": "<p>I stumbled over <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.isBRecOnRecursor#doc\">docs#Lean.isBRecOnRecursor</a> being false for the <code>.brecOn</code> of Prop-valued induction principles:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Elab.Command</span>\n\n<span class=\"sd\">/-- info: false -/</span>\n<span class=\"bp\">#</span><span class=\"n\">guard_msgs</span> <span class=\"k\">in</span>\n<span class=\"n\">run_meta</span> <span class=\"n\">Lean.logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{Lean.isBRecOnRecursor (← Lean.getEnv) ``Acc.brecOn}\"</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">IndProp</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Even</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">plus2</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- info: false -/</span>\n<span class=\"bp\">#</span><span class=\"n\">guard_msgs</span> <span class=\"k\">in</span>\n<span class=\"n\">run_meta</span> <span class=\"n\">Lean.logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{Lean.isBRecOnRecursor (← Lean.getEnv) ``Even.brecOn}\"</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">IndProp</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">NonProp</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Even</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">plus2</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- info: true -/</span>\n<span class=\"bp\">#</span><span class=\"n\">guard_msgs</span> <span class=\"k\">in</span>\n<span class=\"n\">run_meta</span> <span class=\"n\">Lean.logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{Lean.isBRecOnRecursor (← Lean.getEnv) ``Even.brecOn}\"</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">NonProp</span>\n</code></pre></div>\n<p>Is there a good reason for this being false?</p>\n<p>And how can that even be? I see that the construction function for <code>brecOn</code> in<br>\n<a href=\"https://github.com/leanprover/lean4/blob/655ec964f5d6b0810ce0e517a6b3bbb3d5186d25/src/library/constructions/brec_on.cpp#L159-L351\">https://github.com/leanprover/lean4/blob/655ec964f5d6b0810ce0e517a6b3bbb3d5186d25/src/library/constructions/brec_on.cpp#L159-L351</a><br>\nends with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">new_env</span> <span class=\"bp\">=</span> <span class=\"n\">add_aux_recursor</span><span class=\"o\">(</span><span class=\"n\">new_env</span><span class=\"o\">,</span> <span class=\"n\">brec_on_name</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n</code></pre></div>\n<p>(which should set the “is aux recursor” attribute checked by <code>isBRecOnRecursor</code>), so how comes that there even exists a <code>brecOn</code> definition without that attribute?</p>\n<p>Or put differently: Since that function starts with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">static</span> <span class=\"n\">environment</span> <span class=\"n\">mk_brec_on</span><span class=\"o\">(</span><span class=\"n\">environment</span> <span class=\"n\">const</span> <span class=\"bp\">&amp;</span> <span class=\"n\">env</span><span class=\"o\">,</span> <span class=\"n\">name</span> <span class=\"n\">const</span> <span class=\"bp\">&amp;</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">bool</span> <span class=\"n\">ind</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">!</span><span class=\"n\">is_recursive_datatype</span><span class=\"o\">(</span><span class=\"n\">env</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n        <span class=\"n\">return</span> <span class=\"n\">env</span><span class=\"bp\">;</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">is_inductive_predicate</span><span class=\"o\">(</span><span class=\"n\">env</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n        <span class=\"n\">return</span> <span class=\"n\">env</span><span class=\"bp\">;</span>\n</code></pre></div>\n<p>it doesn't seem to be the one generating <code>Acc.brecOn</code>, but then who does?</p>",
        "id": 429180823,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1711274934
    },
    {
        "content": "<blockquote>\n<p>it doesn't seem to be the one generating Acc.brecOn, but then who does?</p>\n</blockquote>\n<p>I believe the magic happens at the elaborator level for inductive predicates, not in the cpp libraries: <a href=\"https://github.com/leanprover/lean4/blob/655ec964f5d6b0810ce0e517a6b3bbb3d5186d25/src/Lean/Meta/IndPredBelow.lean#L576-L577\">https://github.com/leanprover/lean4/blob/655ec964f5d6b0810ce0e517a6b3bbb3d5186d25/src/Lean/Meta/IndPredBelow.lean#L576-L577</a></p>",
        "id": 429181545,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1711275601
    },
    {
        "content": "<p>Thanks! That answers half the question.</p>\n<p>Now I wonder if anything would break if these brecOn's also get that attribute set.</p>",
        "id": 429183527,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1711276658
    }
]