[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/348111-std4/topic/Movement.20from.20Std.20to.20Init/near/430339840\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110994\">Joe Hendrix</span> <a href=\"#narrow/stream/348111-std4/topic/Movement.20from.20Std.20to.20Init/near/430337609\">said</a>:</p>\n<blockquote>\n<p>Are there problems with that PR that I should be aware of?</p>\n</blockquote>\n<p>I see that you made <code>simp</code> much more aggressively classical than before, making use of <code>Classical.foo</code> lemmas even when <code>Decidable.foo</code> lemmas could be used to similar effect (such that classical simping can be controlled by <code>open Classical</code>). This makes me sad, I was trying to avoid that, but I'm not really able to keep arguing on this point.</p>\n</blockquote>\n<blockquote>\n<p>(what's worse, making them global simps in core means no one can override it in downstream projects without local un-simp-ing every time)</p>\n</blockquote>\n<p>Are we not going to be able to use tactic mode constructively in Lean? Wouldn't it be better if Lean allowed each user to choose whether to use classical logic in tactic mode?</p>",
        "id": 431643781,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1712383121
    },
    {
        "content": "<p>I think Lean could've been more inclusive.</p>",
        "id": 431654147,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1712392296
    },
    {
        "content": "<p>see also <a href=\"https://github.com/leanprover/lean4/pull/2414\">lean4#2414</a></p>",
        "id": 431654335,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712392509
    },
    {
        "content": "<p>(and the very simple patch at <a href=\"https://github.com/leanprover/lean4/pull/2412\">lean4#2412</a> that was deemed too much of a maintenance burden)</p>",
        "id": 431655651,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712393683
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/348111-std4/topic/How.20classical.20is.20std4.3F/near/383780177\">said</a>:</p>\n<blockquote>\n<p>We're not at a point presently where changes like this are likely to be accepted in core. I appreciate this is unfortunate for people doing constructive maths, but in the medium term it's not a priority, and will have to be supported by separate libraries that redo foundations lemmas and tactics as required.</p>\n</blockquote>\n<p>Currently, Lean isn't designed to support constructive theories. Therefore, <a href=\"https://github.com/leanprover/theorem_proving_in_lean4/blob/81b028359684646f2db48e3909ee81b4fad51dfb/axioms_and_computation.md?plain=1#L98C23-L101C24\">the following explanation</a> in Chapter <a href=\"https://lean-lang.org/theorem_proving_in_lean4/axioms_and_computation.html\">Axioms and Computation</a> of <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/\">#tpil</a> is false:</p>\n<blockquote>\n<p>Lean is designed to support both of these approaches. Core parts of the library are developed constructively, but the system also provides support for carrying out classical mathematical reasoning.</p>\n</blockquote>",
        "id": 431671902,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1712408678
    },
    {
        "content": "<p>Can I make a pull request that fixes the misleading passage above?</p>",
        "id": 431672004,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1712408772
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112857\">Leonardo de Moura</span> <a href=\"https://github.com/leanprover/lean4/issues/2414#issuecomment-1683097374\">said</a>:</p>\n<blockquote>\n<p>We are always listening to our users. We have talked to many mathematicians and computer scientists, and the vast majority don't care about constructivism. I have asked about high impact projects that are currently blocked unnecessary uses of <code>Classical.em</code>, and never got a convincing answer <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n</blockquote>\n<p>We won't get an answer because few constructivists will use Lean. Why would they do so when the core developers keep making it hard to use tactic mode constructively in Lean?</p>",
        "id": 431674696,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1712411094
    },
    {
        "content": "<p>If we follow Leo's logic in the above quote, I can create the following scenario:</p>\n<blockquote>\n<p>In 2077, Bulhwi launched the Bean project, his fork of Lean. Since almost every Bean user is Korean, he wrote all documentation for Bean exclusively in Korean. One day, Vee, an English speaker, asked Bulhwi to translate Bean's documentation into English, but he declined. Bulhwi said, \"Vee, I've talked to many Bean users, and the vast majority don't care about English translation. I've asked about high-impact projects whose developers are struggling due to lack of English documentation, and I've never got a convincing answer.\"</p>\n</blockquote>",
        "id": 431678195,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1712413927
    },
    {
        "content": "<p>Without a horse in the game, that seems like a bit of a straw man to me. From a pure maintenance standpoint that closed PR makes some bit of sense to me personally. There's always someone saying \"OK you don't want to work to support X, but if you just do this little piece then I can do X myself\", and it seems like the response is simply \"we aren't ready to support X in any form, and don't want to merge things that make it even seem like we are\". I think often the \"metareason\" is \"you say it's just this little thing, but then 3 others pop up, and we don't care\". The overall message I'd take personally seemed like \"try again later\", which is annoying but not a firm no? In the straw man though, it would certainly be wrong to conclude \"no one cares about X\" from the current state of the world. Though certainly the hypothetical future where people who <em>do</em> care about X don't use Lean seems likely if Lean doesn't have X.</p>",
        "id": 431679083,
        "sender_full_name": "Julian Berman",
        "timestamp": 1712414714
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"#narrow/stream/270676-lean4/topic/constructive.20tactic.20mode.20in.20lean/near/431679083\">said</a>:</p>\n<blockquote>\n<p>From a pure maintenance standpoint that closed PR makes some bit of sense to me personally. … The overall message I'd take personally seemed like \"try again later\", which is annoying but not a firm no?</p>\n</blockquote>\n<p>I agree with you to some extent, but I also want to point out that the Lean core developers still haven't fixed <a href=\"#narrow/stream/270676-lean4/topic/constructive.20tactic.20mode.20in.20lean/near/431671902\">the misleading explanation</a> in their <a href=\"https://lean-lang.org/documentation/\">standard reference</a>:</p>\n<blockquote>\n<p>Lean is designed to support both of these approaches. Core parts of the library are developed constructively, but the system also provides support for carrying out classical mathematical reasoning.</p>\n</blockquote>\n<p>They should clarify that Lean will support classical logic exclusively.</p>",
        "id": 431684507,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1712419173
    },
    {
        "content": "<p>I'll make a PR after I wake up. By the way, I learned Lean 4 by reading the text thoroughly two years ago.</p>",
        "id": 431684809,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1712419354
    },
    {
        "content": "<blockquote>\n<p>They should clarify that Lean will support classical logic exclusively.</p>\n</blockquote>\n<p>But that is not true, you can very much write your proofs without classical logic and you <em>can</em> develop automation to do things without classical logic, the foundational system is not stopping you from doing this. It just that the core provided tactics might use classical logic under the hood, even if there are scenarios where they might not have to. You can write tactics that will not use classic logic at all if you choose to do that. But if you have a use case for that beyond \"it is possible so let's do it\" I'm sure the core team would be happen to listen to you and re-evaluate the current stance. As Leo explains in his quote the issue is that he has not been presented with such a use case yet.</p>",
        "id": 431685357,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1712419798
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/constructive.20tactic.20mode.20in.20lean/near/431655651\">said</a>:</p>\n<blockquote>\n<p>(and the very simple patch at <a href=\"https://github.com/leanprover/lean4/pull/2412\">lean4#2412</a> that was deemed too much of a maintenance burden)</p>\n</blockquote>\n<p>I think this is a bit misleading. It's not that patch itself that would be a maintenance burden. There problem is that classical reasoning runs deep in some places, and we are not interested in getting in a situation where there are more and more PRs to review asking for changes in the tactic framework to support constructivism (without compelling evidence that this would enable significant new applications of Lean --- something we remain pretty sceptical of at present).</p>\n<p>There's evidence I think that this stuff is prone to consuming oxygen -- I've seen multiple conversations in which there's been an argument about whether classical reasoning in termination proofs matters (it doesn't!), and certainly there's also the burnout effect where Lean 2 invested significant effort to support HoTT, only to realise it was not relevant to Lean's goals, and we really don't want a repeat of that with constructivism. </p>\n<p>I don't keep track of this, but perhaps someone could confirm my memory that even the equation compiler is implicated in \"unnecessarily classical\"? We really really don't want to consume cycles talking about changes for that.</p>",
        "id": 431706203,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712438202
    },
    {
        "content": "<p>I don't personally care about constructivism, but my soft case for supporting constructive proofs out of the box is more or less \"there are some really interesting people doing things constructively, and if they were able to work (easily) in Lean, then the Lean community, the Lean ecosystem, and, indirectly, Lean itself would be better for their presence.\"</p>\n<p>Now, I'm not saying that from this alone we should necessarily <em>conclude</em> that supporting constructivism is worth it, as there are (as mentioned) significant costs to weigh. But perhaps it's a factor to consider alongside the others. There's something to be said for being usable by everyone.</p>",
        "id": 431707060,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1712439057
    },
    {
        "content": "<p>Regarding tpil, we're in a quiet period at the moment for maintenance of tpil, but when that resumes I think it would be reasonable to clarify that while Lean's type theory is not classical, the tactic framework provided with the core language freely uses classical reasoning, and that any serious constructive project would either need to be very careful about what tactics it used, or build alternatives externally.</p>",
        "id": 431708422,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712440299
    },
    {
        "content": "<p>TPIL isn't (currently) owned by the FRO, right? (not that I'm saying it would be a problem if it were)</p>",
        "id": 431708631,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712440487
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> <a href=\"#narrow/stream/270676-lean4/topic/constructive.20tactic.20mode.20in.20lean/near/431707060\">said</a>:</p>\n<blockquote>\n<p>\"there are some really interesting people doing things constructively\"</p>\n</blockquote>\n<p>To be honest I hear this, but don't see it. The interesting things keep appearing to me as fun curiosities, but that don't actually lead anywhere. I know it's unreasonable to ask for Lean examples, but perhaps someone could point to major projects in Coq/Isabelle/etc that really rely on constructivity and that we should be sad we are missing out on?</p>\n<p>If <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> were to announce when he reveals his roadmap for FLT that he really needs support for constructivism for parts of the project, we would absolutely be on it tomorrow.</p>\n<p>Now I appreciate that is a straw-man argument --- Kevin is not about to say this! So can someone help me come up with the steel-man alternative?</p>",
        "id": 431708677,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712440556
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/constructive.20tactic.20mode.20in.20lean/near/431708631\">said</a>:</p>\n<blockquote>\n<p>TPIL isn't (currently) owned by the FRO, right? (not that I'm saying it would be a problem if it were)</p>\n</blockquote>\n<p>My understanding is that the most likely person to put significant work into it is perhaps <span class=\"user-mention\" data-user-id=\"354934\">@David Thrane Christiansen</span> (but not immediately!). Jeremy has done a lot of work on it, but doesn't have much time for it at present.</p>",
        "id": 431708845,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712440692
    },
    {
        "content": "<p>Yes, it's very clear to me that Verso is intended to provide new foundations for TPIL when it is sufficiently mature.</p>",
        "id": 431709146,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712440937
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/constructive.20tactic.20mode.20in.20lean/near/431708677\">said</a>:</p>\n<blockquote>\n<p>The interesting things keep appearing to me as fun curiosities, but that don't actually lead anywhere.</p>\n</blockquote>\n<p>I suspect the interestingness is rather subjective, and most of the people currently using Lean are the ones who already decided that these questions don't interest them at all. Of course, the same reasoning applies to HoTT; but I think the burden of HoTT support is much greater than that of (partial) constructivity support.</p>",
        "id": 431709387,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712441280
    },
    {
        "content": "<p>In my mind, the main argument in favor of <a href=\"https://github.com/leanprover/lean4/pull/2412\">lean4#2412</a> is that if you are a constructive user who has decided to rebuild the Lean universe constructively, this small change greatly increases the fraction of the universe that doesn't need to be discarded. My very limited understanding of HoTT is that things are fundamentally much more different than just avoiding an <code>axiom</code>.</p>",
        "id": 431709429,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712441291
    },
    {
        "content": "<p>(it also has the nice bonus that it could result in <code>split</code> and <code>split_ifs</code> being merged)</p>",
        "id": 431709462,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712441344
    },
    {
        "content": "<p>Of course, the counter-argument is that users who want to rebuild the universe are trouble :)</p>",
        "id": 431709610,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712441476
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/constructive.20tactic.20mode.20in.20lean/near/431708677\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>\"there are some really interesting people doing things constructively\"</p>\n</blockquote>\n<p>To be honest I hear this, but don't see it. The interesting things keep appearing to me as fun curiosities, but that don't actually lead anywhere</p>\n</blockquote>\n<p>Sure—my point is not that people are doing interesting <em>things</em>, but that there are interesting <em>people</em> doing these things. And I believe they would contribute positively to Lean if they had a place in the community.</p>",
        "id": 431709816,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1712441685
    },
    {
        "content": "<p>With the understanding, of course, that \"contributing positively\" is not measured only by use cases. If someone gets people talking about Lean, if they introduce it to students or friends, if they explore something unusual, if they find a bug, if they simply participate in conversations, then <em>regardless</em> of what you think about the projects this person is spending their time on—even if they never contribute something you care about—they're building a stronger community around Lean simply by using it, showing it to others, and being involved.</p>",
        "id": 431710444,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1712442305
    },
    {
        "content": "<p>(As an aside, I'd be reluctant to discount some math selectively as fun curiosities that don't actually lead anywhere—I mean, we are doing <em>math</em>, after all, which is famous for garnering that opinion, no matter what field you work in! <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> Separately, I think that in general there's intrinsic value to supporting someone's ability to do something <em>they</em> value, in and of itself, of course—but I want to emphasize that this not a factor in my point above. There, I'm trying to take a \"self-centered\" view \"from Lean's perspective\".)</p>",
        "id": 431710917,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1712442937
    },
    {
        "content": "<blockquote>\n<p>but that there are interesting <em>people</em> doing these things</p>\n</blockquote>\n<p>Which people? I would really like to know, I've not seen a concrete project or name being brought up in these discussions yet.</p>",
        "id": 431711056,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1712443089
    },
    {
        "content": "<p>I mean, the people who are told to use Agda or Coq precisely because it's constructive—or perhaps the person who started this thread? <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> For my anecdotal part, I attended the HoTT summer school a little while back, and met (and heard of) all sorts of people who at least were interested in constructivism. Type theorists, mainly? I forget the names, since I personally am not interested in constructivism. <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span> There's probably a sample bias here, because if you use Lean, you're likely already committed to classicality, so there likely aren't too many people who can answer that question—and this population is a minority in the first place.</p>\n<p>But also, I saw people who were relatively early in their mathematical career who were interested in constructivism. Not that you're suggesting this, of course, but it's worth remembering that you don't need to be a \"big name\" to \"be interesting\" and contribute positively! :) I'm thinking about this in terms of building a community and attracting people in general, not in terms of attracting <em>specific</em> names.</p>\n<p>And I will repeat just for emphasis that while I think this should be <em>a</em> factor, there are of course very good reasons for it not to be decisive once you look at the costs. :)</p>",
        "id": 431712128,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1712444421
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/constructive.20tactic.20mode.20in.20lean/near/431706203\">said</a>:</p>\n<blockquote>\n<p>I don't keep track of this, but perhaps someone could confirm my memory that even the equation compiler is implicated in \"unnecessarily classical\"? We really really don't want to consume cycles talking about changes for that.</p>\n</blockquote>\n<p>Not to my knowledge, the core mechanisms used by both structural and WF recursion are choice-free. Termination proofs can still end up using choice if the WF proofs themselves, as generated by <code>decreasing_by</code>, use choice, but for the most part the automatic proof mechanisms are reasoning over functions on Nat and everything in sight is decidable there. (I would not be surprised if <code>omega</code> currently has some incidental uses of choice, but they should be easily removable without affecting the interface or effectiveness or even proof size in any way.)</p>",
        "id": 431712497,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712444831
    },
    {
        "content": "<p>I think that now is a really bad time to talk about constructivism in Lean. We already have a lot of work to do to figure out a good way to fully support both math and software verification. I think that adding a third incompatible set of users would be a huge waste of time and energy in the current situation. Maybe one day this will be possible.</p>",
        "id": 431712593,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1712444979
    },
    {
        "content": "<p>It seems to be that this discussion is the idealists (\"why not support more people who can use the software in new ways?\") vs the realists (\"there is a huge amount of work which needs to be done in order to attain the goals which the FRO has set so let's focus on that\"). I also suspect that you become more of a realist as you get older and realise that time is less infinite than it used to be when you were a PhD student or post-doc.</p>",
        "id": 431714667,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1712447513
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/constructive.20tactic.20mode.20in.20lean/near/431685357\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"417769\">Bulhwi Cha</span> <a href=\"#narrow/stream/270676-lean4/topic/constructive.20tactic.20mode.20in.20lean/near/431684507\">said</a>:</p>\n<blockquote>\n<p>They should clarify that Lean will support classical logic exclusively.</p>\n</blockquote>\n<p>But that is not true, you can very much write your proofs without classical logic and you <em>can</em> develop automation to do things without classical logic, the foundational system is not stopping you from doing this. It just that the core provided tactics might use classical logic under the hood, even if there are scenarios where they might not have to. You can write tactics that will not use classic logic at all if you choose to do that.</p>\n</blockquote>\n<p>I'll rephrase my statement: Lean core developers won't provide constructive tactic mode themselves. <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/\">#tpil</a> has never mentioned this. You can't expect newcomers to Lean to figure it out quickly. I hadn't until late 2023.</p>",
        "id": 431714749,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1712447599
    },
    {
        "content": "<p>Maybe make a PR to <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/\">#tpil</a> ?</p>",
        "id": 431714812,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1712447652
    },
    {
        "content": "<p>I'll do it after I have breakfast.</p>",
        "id": 431714827,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1712447684
    },
    {
        "content": "<p>I don't think \"constructive tactic mode\" should be a goal. But it is possible to build \"constructive tactics\" outside the core and ideally these could be used alongside the many tactics from core which also happen to be constructive</p>",
        "id": 431714863,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712447751
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/constructive.20tactic.20mode.20in.20lean/near/431685357\">said</a>:</p>\n<blockquote>\n<p>But if you have a use case for that beyond \"it is possible so let's do it\" I'm sure the core team would be happen to listen to you and re-evaluate the current stance. As Leo explains in his quote the issue is that he has not been presented with such a use case yet.</p>\n</blockquote>\n<p>The core team made constructivists and type theorists don't want to use Lean in the first place. That's why they wouldn't and won't be able to find such a use case. It's far from \"listening to others.\" But I'd say it's fine if the Lean developers had clearly stated <em>on their documentation</em> that they wouldn't develop constructive tactics themselves. They haven't.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Analogy</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p><span class=\"user-mention silent\" data-user-id=\"417769\">Bulhwi Cha</span> <a href=\"#narrow/stream/270676-lean4/topic/constructive.20tactic.20mode.20in.20lean/near/431678195\">said</a>:</p>\n<blockquote>\n<p>If we follow Leo's logic in the above quote, I can create the following scenario:</p>\n<blockquote>\n<p>In 2077, Bulhwi launched the Bean project, his fork of Lean. Since almost every Bean user is Korean, he wrote all documentation for Bean exclusively in Korean. One day, Vee, an English speaker, asked Bulhwi to translate Bean's documentation into English, but he declined. Bulhwi said, \"Vee, I've talked to many Bean users, and the vast majority don't care about English translation. I've asked about high-impact projects whose developers are struggling due to lack of English documentation, and I've never got a convincing answer.\"</p>\n</blockquote>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> Do you think the following statement <em>isn't</em> true? \"The Bean project supports documentation exclusively in Korean.\"</p>\n<p>You (Vee) can very much teach yourself Korean and translate the documentation into English without the maintainer's help; he isn't stopping you from doing this. It's just that the documentation he provided is written only in Korean, even if there are scenarios where a few English-speaking Bean users couldn't read it. But if you have a use case for that beyond \"it's possible, so let's do it,\" I'm sure the maintainer would listen to you and re-evaluate the current (2077) stance. As Bean's maintainer explained in the above quote, the issue is that he's not been presented with such a use case yet.</p>\n</div></div>",
        "id": 431716355,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1712449200
    },
    {
        "content": "<p>I totally get not having infinite time and not wanting to devote extra hours to figuring out potentially complicated workarounds to make things constructive. But on the topic of <a href=\"https://github.com/leanprover/lean4/pull/2412\">lean4#2412</a> (which is incredibly simple), I think there has been more time spent arguing over It than there <em>ever</em> would have been in terms of maintenance burden.</p>\n<p>Sometimes the easiest way to get a user base off your back is to appease them when it's easy. Of course, I don't subscribe to the idea that merging it requires core devs to take seriously any other change to support constructivism. There is no slippery slope.</p>",
        "id": 431722763,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1712455875
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/constructive.20tactic.20mode.20in.20lean/near/431714812\">said</a>:</p>\n<blockquote>\n<p>Maybe make a PR to <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/\">#tpil</a> ?</p>\n</blockquote>\n<p>I'm working on it.</p>",
        "id": 431726722,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1712460213
    },
    {
        "content": "<p>From <a href=\"https://github.com/leanprover/theorem_proving_in_lean4/pull/110\">https://github.com/leanprover/theorem_proving_in_lean4/pull/110</a>:</p>\n<p>M <a href=\"https://git.sr.ht/~chabulhwi/theorem_proving_in_lean4/tree/7cd64013b265a7e590f8c03fe2764128cc1bb9d7/item/introduction.md\">introduction.md</a> =&gt; <a href=\"https://git.sr.ht/~chabulhwi/theorem_proving_in_lean4/tree/8cb6bf98a5a7c4d94c0d512d6fd1a85b48b7997d/item/introduction.md\">introduction.md</a></p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"w\"> </span>This tutorial describes the current version of Lean, known as Lean 4.\n\n<span class=\"gi\">+You may want to reconsider your decision to learn Lean if you plan to use it for</span>\n<span class=\"gi\">+projects based on constructive logic. See [Section Historical and Philosophical</span>\n<span class=\"gi\">+Context](./axioms_and_computation.md#historical-and-philosophical-context).</span>\n\n<span class=\"w\"> </span>About this Book\n</code></pre></div>\n<p>M <a href=\"https://git.sr.ht/~chabulhwi/theorem_proving_in_lean4/tree/81b028359684646f2db48e3909ee81b4fad51dfb/item/axioms_and_computation.md\">axioms_and_computation.md</a> =&gt; <a href=\"https://git.sr.ht/~chabulhwi/theorem_proving_in_lean4/tree/7cd64013b265a7e590f8c03fe2764128cc1bb9d7/item/axioms_and_computation.md\">axioms_and_computation.md</a></p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gd\">-Lean is designed to support both of these</span>\n<span class=\"gd\">-approaches. Core parts of the library are developed constructively,</span>\n<span class=\"gd\">-but the system also provides support for carrying out classical</span>\n<span class=\"gd\">-mathematical reasoning.</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+Be aware that some tactics in Lean's core library use classical</span>\n<span class=\"gi\">+reasoning by default, even if a user has not opened the `Classical`</span>\n<span class=\"gi\">+namespace or used lemmas within it. Technically, it is still possible to</span>\n<span class=\"gi\">+build alternative tactics for constructive logic outside the core</span>\n<span class=\"gi\">+library and use them alongside the constructive tactics from the core.</span>\n<span class=\"gi\">+However, the developers of Lean's core library currently do not want to</span>\n<span class=\"gi\">+implement these tactics themselves, nor do they accept any changes that</span>\n<span class=\"gi\">+attempt to modify the tactics in the core to avoid using classical</span>\n<span class=\"gi\">+reasoning, regardless of how simple the change may be.</span>\n</code></pre></div>\n<p>I've created a <a href=\"https://github.com/leanprover/theorem_proving_in_lean4/pull/110\">PR</a>, and I'll apply this change to <a href=\"https://git.sr.ht/~chabulhwi/theorem_proving_in_lean4/commit/7cd64013b265a7e590f8c03fe2764128cc1bb9d7\">my</a> <a href=\"https://git.sr.ht/~chabulhwi/theorem_proving_in_lean4/commit/8cb6bf98a5a7c4d94c0d512d6fd1a85b48b7997d\">fork</a> of <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/\">#tpil</a>.</p>",
        "id": 431736331,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1712470379
    },
    {
        "content": "<p>Seems unlikely to be a productive approach, but <span aria-label=\"woman shrugging\" class=\"emoji emoji-1f937-200d-2640\" role=\"img\" title=\"woman shrugging\">:woman_shrugging:</span>.</p>",
        "id": 431739358,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712473512
    },
    {
        "content": "<p>I need a fork for some other reasons unrelated to this debate, anyway.</p>",
        "id": 431739427,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1712473580
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"411020\">Bulhwi Cha</span> that seems unnecessarily antagonistic.</p>",
        "id": 431770413,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1712494892
    },
    {
        "content": "<p><strong>Drew Devault</strong> <a href=\"https://drewdevault.com/2020/01/17/Effective-project-governance.html\">said</a>:</p>\n<blockquote>\n<p>As a contributor, you should evaluate the value system of the leadership and make a personal determination as to whether or not it aligns with your own. If it does, participate. If it does not, find an alternative or fork the project.</p>\n</blockquote>\n<p>Forcing a project leader to make a decision they don't want is unnecessarily antagonistic. Forking the project isn't. Rather, it's a reasonable resolution of a disagreement. The copyright holders of <a href=\"https://en.wikipedia.org/wiki/Open-source_software\">open-source software</a> permit users to modify and distribute the software and its source code to anyone. Furthermore, I didn't make any false claims in the paragraphs I added to my fork.</p>",
        "id": 431771994,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1712496314
    },
    {
        "content": "<p>You're welcome to suggest any improvements to my PR and fork. I promise to <a href=\"https://git.sr.ht/~chabulhwi/theorem_proving_in_lean4#theorem-proving-in-lean-4\">clarify</a> that the changes I made to the original text aren't endorsed by the original authors of <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/\">#tpil</a>.</p>",
        "id": 431772997,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1712497222
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/constructive.20tactic.20mode.20in.20lean/near/431708845\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/constructive.20tactic.20mode.20in.20lean/near/431708631\">said</a>:</p>\n<blockquote>\n<p>TPIL isn't (currently) owned by the FRO, right? (not that I'm saying it would be a problem if it were)</p>\n</blockquote>\n<p>My understanding is that the most likely person to put significant work into it is perhaps <span class=\"user-mention silent\" data-user-id=\"354934\">David Thrane Christiansen</span> (but not immediately!). Jeremy has done a lot of work on it, but doesn't have much time for it at present.</p>\n</blockquote>\n<p>The work that I'm putting into it right now is quite limited, and mostly consists of merging PRs that fix very simple things, like typos, and making the code examples work in newer Lean 4 releases. I don't presently have plans to embark on any major revisions, or to make substantial changes to the text. I may also port the contents to Verso once it's mature for this use case once we get real benefits from the port (e.g. more reliable cross-linking of documents, or better dogfood-style testing of the tool).</p>",
        "id": 431775753,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1712499407
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/270676-lean4/topic/constructive.20tactic.20mode.20in.20lean/near/431770413\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"411020\">Bulhwi Cha</span> that seems unnecessarily antagonistic.</p>\n</blockquote>\n<p>Can you elaborate on this? Why do you think forking an open-source project is unnecessarily antagonistic?</p>",
        "id": 431782257,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1712502985
    },
    {
        "content": "<p>I believe the reaction is to the words: \"nor do they accept any changes that attempt to modify the tactics in the core to avoid using classical reasoning, <strong>regardless of how simple the change may be.</strong>\"</p>",
        "id": 431787322,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1712505731
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 431787794,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1712505980
    },
    {
        "content": "<p>I understand that the part in bold sounds highly critical of the Lean core team, but they <a href=\"https://github.com/leanprover/lean4/pull/2412#issuecomment-1677690687\">did close</a> an \"incredibly simple\" pull request, which is <a href=\"https://github.com/leanprover/lean4/pull/2412\">lean4#2412</a>. <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> and <span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> have already pointed this out. It's clear that the Lean core team won't accept those kinds of changes bigger than <a href=\"https://github.com/leanprover/lean4/pull/2412\">lean4#2412</a>. Therefore, the wording in that part of the quote is pretty accurate. I didn't exaggerate.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/constructive.20tactic.20mode.20in.20lean/near/431655651\">said</a>:</p>\n<blockquote>\n<p>(and the very simple patch at <a href=\"https://github.com/leanprover/lean4/pull/2412\">lean4#2412</a> that was deemed too much of a maintenance burden)</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/270676-lean4/topic/constructive.20tactic.20mode.20in.20lean/near/431722763\">said</a>:</p>\n<blockquote>\n<p>But on the topic of <a href=\"https://github.com/leanprover/lean4/pull/2412\">lean4#2412</a> (which is incredibly simple), I think there has been more time spent arguing over It than there <em>ever</em> would have been in terms of maintenance burden.</p>\n</blockquote>",
        "id": 431789933,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1712506861
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"417769\">@Bulhwi Cha</span> I'm a bit confused — are you personally interested in constructive mathematics? This is the first thread I've ever noticed you mention it. Is it the case that you've spent all this time learning Lean this far just because you were misled by a sentence in TPIL?</p>\n<p>Regarding forks, while it's not illegal to make a fork, from a social perspective it's a last course of action, signaling that working together is impossible, and it's better to make a separate project. That's unless your 'fork' is actually just a copy where you'll do development that you intend to contribute (like Github's use of 'fork'), rather than a separate project that you intend to advertise and have compete with the original.</p>",
        "id": 431793490,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1712508377
    },
    {
        "content": "<p>Regarding your Korean/English analogy, I see that as being a very different situation. People who do constructive mathematics can read and understand classical mathematics, and vice versa. In ITP communities, constructivists are very well represented, and compared to the number of constructivists in both computer science and mathematics, they are <em>over</em>represented, which is to say, despite what you hear, it's a relatively niche requirement. Lean not putting engineering effort into supporting constructivism is not stopping anyone from developing its \"killer app\", when there's Coq and Agda.</p>",
        "id": 431793493,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1712508379
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/constructive.20tactic.20mode.20in.20lean/near/431793490\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"417769\">Bulhwi Cha</span> I'm a bit confused — are you personally interested in constructive mathematics?</p>\n</blockquote>\n<p>I'll answer this question before I go to sleep. Does it matter? I don't think so. You're missing the point.</p>",
        "id": 431793665,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1712508471
    },
    {
        "content": "<p>I think it's generally good to spend energy on what you care about, vs only out of principle, or if it's out of principle, then it should be a principle that's well-motivated and one that you care about.</p>\n<p>If you think TPIL is intentionally misleading you somehow, know it's an old document that goes back to the old days of Lean, and Lean has changed. And, overall, recently there hasn't been much energy put into updating documentation, vs put into improving Lean.</p>",
        "id": 431794042,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1712508652
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"548935\">@Thomas Murrills</span> I saw you mention the idea \"supporting a feature will draw people\", but from a product management perspective that's an easy way toward creating a product that supports every feature, but none well. I could say, for example, \"if Lean supported object-oriented programming paradigms better, then it would draw all those people who are doing good work,\" and so on for every feature and paradigm.</p>\n<p>For something like constructive math, Lean core wants a concrete story: having such-and-such feature enables such-and-such application.</p>\n<blockquote>\n<p>I'd be reluctant to discount some math selectively as fun curiosities that don't actually lead anywhere</p>\n</blockquote>\n<p>I think it's worth considering that while math and logic are closely aligned, mathematics as a whole is not particularly interested in foundational issues. The only place I've heard of where mathematics begins touching upon constructivism is internal logics of elementary toposes — my understanding is that making it possible to write constructive arguments means that you can transport statements and proofs into this internal logic. If somehow it's discovered that this is <em>the</em> best way to prove things about programs, for example, then that's a concrete story. (To be clear: I'm not discounting the work people do on foundations. It's just that for a project like Lean, which wants to be used wherever mathematics is traditionally used, I think at some point you have to commit to your foundations.)</p>",
        "id": 431795797,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1712509332
    },
    {
        "content": "<p>One application of constructive mathematics that seems sort of compelling to me is that a proof written constructively could be reduced, giving a concrete reason that the theorem is true for some particular concrete inputs. However, it's known that with Lean's type theory, proof reduction doesn't always terminate: <a href=\"#narrow/stream/113488-general/topic/Normalization.20fails.20in.20lean/near/409110365\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Normalization.20fails.20in.20lean/near/409110365</a></p>",
        "id": 431798329,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1712510356
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/constructive.20tactic.20mode.20in.20lean/near/431795797\">said</a>:</p>\n<blockquote>\n<p>@Thomas Murrills I saw you mention the idea \"supporting a feature will draw people\", but from a product management perspective that's an easy way toward creating a product that supports every feature, but none well. I could say, for example, \"if Lean supported object-oriented programming paradigms better, then it would draw all those people who are doing good work,\" and so on for every feature and paradigm.</p>\n</blockquote>\n<p>Actually, I think \"creating a product that supports every feature, but none well\" is a fantastic choice for lean core, because it is extensible along almost every axis. Lean is the language that lets you build it in the direction you want, and this means it is applicable even to things that go far beyond the goal of proving theorems in Lean's particular choice of type theory and axioms. The way you leverage an extensible system is by not putting blockers to extending it in specific directions, because every user has a slightly different goal and may want to extend it in ways the original authors never dreamed of. This is okay, in fact it's what we should all be excited to see. It's one of the things I love about this community, watching all the cool and crazy things people are able to get lean to do.</p>\n<p>I think the mistake here is taking all of the responsibility for building the feature itself into the core (which is the opposite of extensibility), because the people who want the feature are not the core maintainers themselves, it is the downstream users who are coming up with these ideas. Core wants to support the mean because that's where most people are. So cool and crazy extensions are necessarily not going to be getting direct support from core. But it should be \"possible in principle\", or even better \"relatively straightforward\", to build these things. The syntax system is a great example of this, we have people writing <a href=\"https://github.com/tydeu/lean4-alloy\">C code directly in lean</a> or <a href=\"https://github.com/PatrickMassot/verbose-lean4\">controlled natural languages</a> and this is very different from what lean out of the box is designed to do, and yet it's not really a misuse either because this is what extensibility is for.</p>",
        "id": 431810660,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712519043
    },
    {
        "content": "<p>Incidentally, regarding object oriented paradigms I think lean actually has most of the building blocks already: method syntax, structural inheritance, <code>Dynamic</code> types, imperative control flow. I 100% believe someone could build a passable java-ish syntax and/or semantics as a lean library.</p>",
        "id": 431810753,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712519146
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/constructive.20tactic.20mode.20in.20lean/near/431793493\">said</a>:</p>\n<blockquote>\n<p>Regarding your Korean/English analogy, I see that as being a very different situation. People who do constructive mathematics can read and understand classical mathematics, and vice versa. In ITP communities, constructivists are very well represented, and compared to the number of constructivists in both computer science and mathematics, they are <em>over</em>represented, which is to say, despite what you hear, it's a relatively niche requirement. Lean not putting engineering effort into supporting constructivism is not stopping anyone from developing its \"killer app\", when there's Coq and Agda.</p>\n</blockquote>\n<p>What this fails to consider is that maybe people might want to use lean for all its other features, when they are doing constructive math in Coq or Adga or what have you. Many of lean's unique innovations are in the realm of ITP structure generally, having this super-hackable whitebox everything approach to elaboration. In fact Lean's kernel / type theory is one of its least innovative aspects, mostly by design. For such people the path of least resistance may indeed be to either fork lean and rewrite the tactics, or possibly create a library that duplicates or copy pastes half of <code>Lean</code> in order to make the necessary patches (but is otherwise still built on a standard lean installation). I've certainly seen things like that done for academic projects in the past. The maintenance requirement of such a setup is high, but most academic projects don't get maintenance anyway, and the actual work might be much lower than getting all the fancy features of lean into Coq or Agda.</p>",
        "id": 431811829,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712520120
    },
    {
        "content": "<p>Mario suggests that core can support all of the people all of the time, but I don't think that's true. Aren't there constructivists out there who think that Lean's type theory itself is completely broken because of subject reduction or something? To support all of the people all of the time you'd have to have a system where you'd allow univalence, allow different Props, allow cubical etc etc. You have to draw the line somewhere.</p>",
        "id": 431813063,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1712521283
    },
    {
        "content": "<p>Actually my suggestion is not limited to those theories that extend lean's base type theory, because you can use Lean as a tactic language for deep embeddings too. Some examples of this include <a href=\"https://github.com/leanprover-community/iris-lean\">iris-lean</a>, which formalizes an extensible intuitionistic higher order separation logic called Iris (originating from a Coq library of the same name and popular for formalizing programming language semantics), and <a href=\"https://github.com/digama0/lean4lean\">lean4lean</a>, which includes some metaprogramming for constructing derivations in the embedded lean logic (which is more of a pre-logic and does not assume all parts of lean's axiomatization at all times)</p>",
        "id": 431813852,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712521955
    },
    {
        "content": "<p>I keep looking for HoTT enthusiasts willing to do HoTT metatheory in mathlib because I think this is the true way forward for HoTT in lean, not changing the base axioms</p>",
        "id": 431813907,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712522024
    },
    {
        "content": "<p>I really want to see a crazy proof that the fundamental group of the circle (the actual circle not the synthetic HoTT one) is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\Bbb{Z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span> using embedding in a HoTT model</p>",
        "id": 431813979,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712522094
    },
    {
        "content": "<blockquote>\n<p>core can support all of the people all of the time</p>\n</blockquote>\n<p>That's not what I'm saying, or at least it depends on what you mean by \"support\" but not the usual reading of this. Core can get out of the way of most of the people almost all of the time. I don't want \"support\" I want non-interference</p>",
        "id": 431814190,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712522294
    },
    {
        "content": "<p>Then don’t use the tactics you don’t like!</p>",
        "id": 431814308,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1712522387
    },
    {
        "content": "<p>They won't.</p>",
        "id": 431833039,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1712539966
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/constructive.20tactic.20mode.20in.20lean/near/431793490\">said</a>:</p>\n<blockquote>\n<p>Is it the case that you've spent all this time learning Lean this far just because you were misled by a sentence in TPIL?</p>\n</blockquote>\n<p>No. I think your wording here is inappropriate.</p>\n<p>I learned Lean because I want to use it to develop an educational video game that teaches various topics in STEM disciplines. But I always struggle to describe the exact range of topics that my game will cover. I plan to include several kinds of non-classical logic in the game.</p>\n<p>Proof assistants other than Lean might also be used in this game.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Quotes</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p><span class=\"user-mention silent\" data-user-id=\"417769\">Bulhwi Cha</span> <a href=\"#narrow/stream/113489-new-members/topic/Bulhwi.20Cha.20.26.20Seongwoo.20Shim.3A.20Introductions/near/292962002\">said</a>:</p>\n<blockquote>\n<p>I hope to start an EdTech company one day that creates video games and other media for learning STEM disciplines.</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"417769\">Bulhwi Cha</span> <a href=\"#narrow/stream/113488-general/topic/learning.20about.20lean.20alone.20in.20south.20korea/near/322719921\">said</a>:</p>\n<blockquote>\n<p>As I said in <a href=\"#narrow/stream/113489-new-members/topic/Bulhwi.20Cha.20.26.20Seongwoo.20Shim.3A.20Introductions/near/292962002\">my introduction</a>, I aim to develop games for mathematics education and study symplectic geometry so I can formalize them.</p>\n</blockquote>\n</div></div>",
        "id": 431836133,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1712542347
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/constructive.20tactic.20mode.20in.20lean/near/431793490\">said</a>:</p>\n<blockquote>\n<p>Regarding forks, while it's not illegal to make a fork, from a social perspective it's a last course of action, signaling that working together is impossible, and it's better to make a separate project. That's unless your 'fork' is actually just a copy where you'll do development that you intend to contribute (like Github's use of 'fork'), rather than a separate project that you intend to advertise and have compete with the original.</p>\n</blockquote>\n<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean4/\">#tpil</a> hasn't been actively maintained, after all. I plan to remove the parts related to mdBook from my fork. I might use Sphinx instead.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Quotes</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p><span class=\"user-mention silent\" data-user-id=\"354934\">David Thrane Christiansen</span> <a href=\"#narrow/stream/270676-lean4/topic/constructive.20tactic.20mode.20in.20lean/near/431775753\">said</a>:</p>\n<blockquote>\n<p>The work that I'm putting into it right now is quite limited, and mostly consists of merging PRs that fix very simple things, like typos, and making the code examples work in newer Lean 4 releases. I don't presently have plans to embark on any major revisions, or to make substantial changes to the text. I may also port the contents to Verso once it's mature for this use case once we get real benefits from the port (e.g. more reliable cross-linking of documents, or better dogfood-style testing of the tool).</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"417769\">Bulhwi Cha</span> <a href=\"#narrow/stream/113488-general/topic/.E2.9C.94.20Documentation.3A.20theme.20broken.20.28Theorem.20Proving.20in.20Lean.204.29/near/395655404\">said</a>:</p>\n<blockquote>\n<p>From <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/\">#tpil</a>'s <code>README.md</code>:</p>\n<blockquote>\n<p>This manual is generated by <a href=\"https://github.com/rust-lang/mdBook\">mdBook</a>. We are currently using a <a href=\"https://github.com/leanprover/mdBook\">fork</a> of it for the following additional features:</p>\n</blockquote>\n<p>I think the fork is too old.</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"417769\">Bulhwi Cha</span> <a href=\"#narrow/stream/270676-lean4/topic/will.20verso.20support.20internationalization.3F/near/416712641\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://www.sphinx-doc.org/en/master/usage/advanced/intl.html\">Sphinx</a> uses <a href=\"https://www.gnu.org/software/gettext/\">gettext</a> to generate <a href=\"https://www.gnu.org/software/gettext/manual/html_node/PO-Files.html\">PO files</a> that can be translated into languages other than English. <span class=\"user-mention silent\" data-user-id=\"354934\">David Thrane Christiansen</span> I wonder if <a href=\"https://github.com/leanprover/verso\">Verso</a> will also use localization tools like gettext or <a href=\"https://projectfluent.org/\">Fluent</a> to support internationalization.</p>\n<p>Related topic: <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/Internationalization\">#lean4 &gt; Internationalization</a></p>\n</blockquote>\n</div></div>",
        "id": 431838743,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1712543541
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/348111-std4/topic/Movement.20from.20Std.20to.20Init/near/430339840\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110994\">Joe Hendrix</span> <a href=\"#narrow/stream/348111-std4/topic/Movement.20from.20Std.20to.20Init/near/430337609\">said</a>:</p>\n<blockquote>\n<p>Are there problems with that PR that I should be aware of?</p>\n</blockquote>\n<p>I see that you made <code>simp</code> much more aggressively classical than before, making use of <code>Classical.foo</code> lemmas even when <code>Decidable.foo</code> lemmas could be used to similar effect (such that classical simping can be controlled by <code>open Classical</code>). This makes me sad, I was trying to avoid that, but I'm not really able to keep arguing on this point.</p>\n</blockquote>\n<blockquote>\n<p>(what's worse, making them global simps in core means no one can override it in downstream projects without local un-simp-ing every time)</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> This decision by the core team makes it harder for people to use Lean for projects based on constructive logic. Likewise, the decision by the fictional Bean maintainer (Bulhwi 2077) to provide all documentation for the Bean project exclusively in Korean makes it harder for people who don't know Korean to use Bean.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Quote</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p><span class=\"user-mention silent\" data-user-id=\"417769\">Bulhwi Cha</span> <a href=\"#narrow/stream/270676-lean4/topic/constructive.20tactic.20mode.20in.20lean/near/431678195\">said</a>:</p>\n<blockquote>\n<p>If we follow Leo's logic in the above quote, I can create the following scenario:</p>\n<blockquote>\n<p>In 2077, Bulhwi launched the Bean project, his fork of Lean. Since almost every Bean user is Korean, he wrote all documentation for Bean exclusively in Korean. One day, Vee, an English speaker, asked Bulhwi to translate Bean's documentation into English, but he declined. Bulhwi said, \"Vee, I've talked to many Bean users, and the vast majority don't care about English translation. I've asked about high-impact projects whose developers are struggling due to lack of English documentation, and I've never got a convincing answer.\"</p>\n</blockquote>\n</blockquote>\n</div></div>",
        "id": 431842623,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1712545546
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/constructive.20tactic.20mode.20in.20lean/near/431793493\">said</a>:</p>\n<blockquote>\n<p>Regarding your Korean/English analogy, I see that as being a very different situation. People who do constructive mathematics can read and understand classical mathematics, and vice versa. In ITP communities, constructivists are very well represented, and compared to the number of constructivists in both computer science and mathematics, they are <em>over</em>represented, which is to say, despite what you hear, it's a relatively niche requirement. Lean not putting engineering effort into supporting constructivism is not stopping anyone from developing its \"killer app\", when there's Coq and Agda.</p>\n</blockquote>\n<p>So, I think you're missing the gist of my analogy.</p>",
        "id": 431843153,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1712545777
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417769\">Bulhwi Cha</span> <a href=\"#narrow/stream/270676-lean4/topic/constructive.20tactic.20mode.20in.20lean/near/431716355\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> Do you think the following statement <em>isn't</em> true? \"The Bean project supports documentation exclusively in Korean.\"</p>\n<p>You (Vee) can very much teach yourself Korean and translate the documentation into English without the maintainer's help; he isn't stopping you from doing this. It's just that the documentation he provided is written only in Korean, even if there are scenarios where a few English-speaking Bean users couldn't read it. But if you have a use case for that beyond \"it's possible, so let's do it,\" I'm sure the maintainer would listen to you and re-evaluate the current (2077) stance. As Bean's maintainer explained in the above quote, the issue is that he's not been presented with such a use case yet.</p>\n</blockquote>",
        "id": 431843372,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1712545902
    },
    {
        "content": "<p>I'm thinking about translating the text in <a href=\"https://git.sr.ht/~chabulhwi/theorem_proving_in_lean4\">my fork</a> of <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/\">#tpil</a> into Korean. I'm not stopping anyone from translating the original text into Korean, although few Koreans are actively using Lean.</p>",
        "id": 431843974,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1712546170
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/constructive.20tactic.20mode.20in.20lean/near/431794042\">said</a>:</p>\n<blockquote>\n<p>If you think TPIL is intentionally misleading you somehow, know it's an old document that goes back to the old days of Lean, and Lean has changed. And, overall, recently there hasn't been much energy put into updating documentation, vs put into improving Lean.</p>\n</blockquote>\n<p>If I were a member of the Lean core team, I would've already apologized for not correcting the misleading explanation of Lean core in <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/\">#tpil</a> sooner. But it's okay. I have my fork now.</p>",
        "id": 431844530,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1712546405
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417769\">Bulhwi Cha</span> <a href=\"#narrow/stream/270676-lean4/topic/constructive.20tactic.20mode.20in.20lean/near/431771994\">said</a>:</p>\n<blockquote>\n<p><strong>Drew Devault</strong> <a href=\"https://drewdevault.com/2020/01/17/Effective-project-governance.html\">said</a>:</p>\n<blockquote>\n<p>As a contributor, you should evaluate the value system of the leadership and make a personal determination as to whether or not it aligns with your own. If it does, participate. If it does not, find an alternative or fork the project.</p>\n</blockquote>\n<p>Forcing a project leader to make a decision they don't want is unnecessarily antagonistic. Forking the project isn't. Rather, it's a reasonable resolution of a disagreement.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> As I've said <a href=\"#narrow/stream/270676-lean4/topic/constructive.20tactic.20mode.20in.20lean/near/431772997\">earlier</a>, anyone is welcome to <a href=\"#narrow/stream/270676-lean4/topic/constructive.20tactic.20mode.20in.20lean/near/431787322\">suggest</a> improvements to my <a href=\"https://github.com/leanprover/theorem_proving_in_lean4/pull/110\">PR</a> and <a href=\"https://git.sr.ht/~chabulhwi/theorem_proving_in_lean4\">fork</a>.</p>",
        "id": 431933173,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1712572951
    },
    {
        "content": "<p>I'm not flagging the fact that you forked. But that you are blaming the Lean core team for something in <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/\">#tpil</a> even if that isn't a project ran by the Lean core team.</p>\n<p>And I'm flagging the fact that in general the tone of your message(s) is on the unfriendly side of the spectrum (imho).</p>",
        "id": 431935790,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1712573658
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/270676-lean4/topic/constructive.20tactic.20mode.20in.20lean/near/431935790\">said</a>:</p>\n<blockquote>\n<p>I'm not flagging the fact that you forked. But that you are blaming the Lean core team for something in <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/\">#tpil</a> even if that isn't a project ran by the Lean core team.</p>\n</blockquote>\n<p>From <a href=\"https://lean-lang.org/documentation\">https://lean-lang.org/documentation</a>:</p>\n<blockquote>\n<p><a href=\"https://lean-lang.org/theorem_proving_in_lean4/\">Theorem Proving in Lean 4</a> is the standard reference for learning how to use Lean as a theorem prover.</p>\n</blockquote>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Quote</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/constructive.20tactic.20mode.20in.20lean/near/431708631\">said</a>:</p>\n<blockquote>\n<p>TPIL isn't (currently) owned by the FRO, right? (not that I'm saying it would be a problem if it were)</p>\n</blockquote>\n</div></div>",
        "id": 431936054,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1712573735
    },
    {
        "content": "<p>Then I hope they clarify on their website that <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/\">#tpil</a> isn't a project run by them.</p>",
        "id": 431936211,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1712573774
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/270676-lean4/topic/constructive.20tactic.20mode.20in.20lean/near/431935790\">said</a>:</p>\n<blockquote>\n<p>And I'm flagging the fact that in general the tone of your message(s) is on the unfriendly side of the spectrum (imho).</p>\n</blockquote>\n<p>I'll stop here.</p>",
        "id": 431936641,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1712573892
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"417769\">@Bulhwi Cha</span> Kyle is right -- the sentences were written almost a decade ago and need to be updated. I am sorry the upset you. We will revise them soon.</p>",
        "id": 431988678,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1712587685
    },
    {
        "content": "<p>Thank you, <span class=\"user-mention silent\" data-user-id=\"110865\">Jeremy Avigad</span>.</p>",
        "id": 431989617,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1712587877
    },
    {
        "content": "<p>I closed the PR.</p>",
        "id": 431990247,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1712587999
    },
    {
        "content": "<p><del>I'll reset my fork soon.</del> I reverted the commits I made to my fork.</p>",
        "id": 431990505,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1712588045
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> : Fully support your stance about not getting in the way of extensibility in general, but in your example of deep embeddings, wouldn't it be usual to define one's own variant of the <code>Prop</code> type for the type system or logic you are embedding. From what I know, existing tactics work assuming they are dealing with <code>Prop</code>, and these tactics would have to be rewritten anyway. So <code>simp</code> implicitly using classical axioms might not matter right? I have Iris's <code>iProp</code> in mind.</p>",
        "id": 432008955,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1712591779
    },
    {
        "content": "<p>Yes, for deep embeddings you can generally use tactics from lean freely in the metalogic, and they won't be applicable at all in the logic itself. The main place where you will be hampered by unnecessary axiom use in lean tactics is if your embedding system includes a mechanism for reflecting proofs proved \"plainly\" in lean to embedded proofs, since in that case you will be dependent on the original proofs being relatively clean and not using things outside whatever the supported subset is</p>",
        "id": 432010089,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712592000
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/constructive.20tactic.20mode.20in.20lean/near/431813907\">said</a>:</p>\n<blockquote>\n<p>I keep looking for HoTT enthusiasts willing to do HoTT metatheory in mathlib because I think this is the true way forward for HoTT in lean, not changing the base axioms</p>\n</blockquote>\n<p>What would be the motive for developing the metatheory of HoTT in Lean and Mathlib? Wouldn't HoTT enthusiasts choose other proof assistants to do it?</p>",
        "id": 445349391,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1718715080
    },
    {
        "content": "<p>While there are purpose-built proof assistants for synthetic homotopy theory (i.e. no \"meta-\") that can certainly do better than lean, I don't think there are category theory libraries that definitively outpace mathlib's, especially if you want to connect the results to other areas outside category theory like algebraic geometry or homotopy theory. Lean mathlib seems well placed to be able to simultaneously talk about all of these aspects to do HoTT metatheory, while still being flexible enough to define a competent HoTT mode (in user space).</p>\n<p>In related news, this idea is making some actual headway here in Bonn, Steve Awodey, <span class=\"user-mention\" data-user-id=\"420917\">@Sina H 𓃵</span>  and I have been working together on first steps toward a HoTT model in lean, although I think it's still a bit too early to say whether it will really work.</p>",
        "id": 445463561,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1718745453
    }
]