[
    {
        "content": "<p>Hi folks,</p>\n<p>I like to try to learn more about lean by writing tactics and<br>\nseeing what sort of proof term is created.  For this little<br>\ntheorem,</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">zero_not_one</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"bp\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">False</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"bp\">#</span><span class=\"n\">print</span><span class=\"w\"> </span><span class=\"n\">zero_not_one</span>\n</code></pre></div>\n<p>I get </p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">zero_not_one</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"bp\">â†’</span><span class=\"w\"> </span><span class=\"n\">False</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"n\">of_eq_true</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Eq</span><span class=\"bp\">.</span><span class=\"n\">trans</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">implies_congr</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">eq_false_of_decide</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Eq</span><span class=\"bp\">.</span><span class=\"n\">refl</span><span class=\"w\"> </span><span class=\"n\">false</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Eq</span><span class=\"bp\">.</span><span class=\"n\">refl</span><span class=\"w\"> </span><span class=\"n\">False</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"n\">Init</span><span class=\"bp\">.</span><span class=\"n\">Core</span><span class=\"bp\">._</span><span class=\"n\">auxLemma</span><span class=\"bp\">.</span><span class=\"m\">4</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but what is Init.Core._auxLemma.4 ?  I looked in the source code<br>\nfor such a thing, but I couldn't find anything like it.</p>\n<p>A second question: Is there a tactic similar to Coq's<br>\n<code>discriminate</code>, one that could conclude a proof from a hypothesis<br>\nof the form c1 x = c2 y, where c1 and c2 are different<br>\nconstructors of some data type?</p>\n<p>Thanks!</p>",
        "id": 442326892,
        "sender_full_name": "Scott N. Walck",
        "timestamp": 1717436562
    },
    {
        "content": "<p>Discussion of this question is now taking place at <a href=\"#narrow/stream/270676-lean4/topic/Something.20like.20Coq's.20discriminate\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Something.20like.20Coq's.20discriminate</a></p>",
        "id": 442330224,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717437433
    }
]