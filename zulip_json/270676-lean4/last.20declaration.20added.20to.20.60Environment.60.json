[
    {
        "content": "<p>Is there a way to <code>pop</code> the last declaration added to the environment?</p>\n<p>I know that the environment stores declarations in (roughly) <code>HashMap</code>s, but I was wondering if, by any chance, the latest declaration was still available somehow.</p>\n<p>In fact, I would like to access the last non-autogenerated declaration.  Here is an example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Log</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">easy</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">intro</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"k\">in</span>\n<span class=\"k\">#eval</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">getEnv</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">env.pop</span>\n<span class=\"c1\">-- does not work, but ideally it would output</span>\n<span class=\"c1\">-- `easy`</span>\n</code></pre></div>",
        "id": 422786539,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708597406
    },
    {
        "content": "<p>No, the data is not retained. <a href=\"#narrow/stream/270676-lean4/topic/Deriving.20Inhabited/near/420236729\">previous zulip discussion</a></p>",
        "id": 422800333,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1708602744
    },
    {
        "content": "<p>Ok, thanks!  I guess that the <code>whatsnew in</code> approach is the closest to what I was hoping for, then.</p>",
        "id": 422800787,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708602935
    },
    {
        "content": "<p>You could sort the constants in the current file by their declarationranges I guess to find the lowest one in the file?</p>",
        "id": 423070411,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1708712281
    },
    {
        "content": "<p>I kind of solved my problem: I compile one command at a time, so there is exactly one \"visible\", the others are auto-generated (if any).  I catch the visible, by matching the explicit name and the others... well they do not have a range, but I pretend that there is at most one.</p>",
        "id": 423088566,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708719665
    },
    {
        "content": "<p>Since this was for the deprecation tool, the main use case is</p>\n<ul>\n<li>a command adds a single declaration</li>\n<li>the command adds a lemma and a <code>to_additive</code> version.</li>\n</ul>\n<p>For more complicated stuff... it just goes with what it has.</p>",
        "id": 423088736,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708719733
    },
    {
        "content": "<p>You can take a look at the PR and feel free to comment/ask questions!</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/10864\">#10864</a></p>",
        "id": 423088800,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708719771
    }
]