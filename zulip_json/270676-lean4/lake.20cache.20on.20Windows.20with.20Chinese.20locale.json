[
    {
        "content": "<p>I'm trying to get <code>lake exe cache get</code> working for <span class=\"user-mention\" data-user-id=\"709554\">@Kunhong Du</span>, who uses Windows with a Chinese locale, and with a Chinese username.</p>\n<p>We ran into some issues trying to run this command from the terminal (git bash):</p>\n<ul>\n<li>At first we tried getting the Mathlib cache via the VSCode extension. This downloaded the latest Lean, build the cache executable and then gave the error \"unknown file or directory\". It was unclear what caused this error exactly.</li>\n<li>A wrong (old) version of curl was used (without the <code>--parallel</code> option), even though the default curl on git bash is recent enough</li>\n<li><code>lake exe cache unpack</code> tries to unpack the downloaded ltar files from the wrong folder</li>\n</ul>\n<p>Some relevant terminal output:<br>\nThe first code snippet shows that there are two versions of curl, the default one being recent enough for the <code>--parallel</code> option.<br>\nThe second code snippet shows that the old version of curl was used, and that the cache looks into the wrong directory for the <code>.ltar</code> files (with something that looks like ascii soup for unicode points)<br>\nNote: the <code>.ltar</code> files were correctly downloaded, and they existed in the directory <code>C:\\&lt;chinese translation of user&gt;\\&lt;username with chinese characters&gt;\\.cache\\mathlib\\54577063a996ea49.ltar</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">杜坤鸿@</span><span class=\"n\">LAPTOP</span><span class=\"bp\">-</span><span class=\"n\">NMJJR92D</span> <span class=\"n\">MINGW64</span> <span class=\"bp\">~</span>\n<span class=\"bp\">$</span> <span class=\"n\">curl</span> <span class=\"c1\">--version</span>\n<span class=\"n\">curl</span> <span class=\"mi\">7</span><span class=\"bp\">.</span><span class=\"mi\">85</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">x86_64</span><span class=\"bp\">-</span><span class=\"n\">w64</span><span class=\"bp\">-</span><span class=\"n\">mingw32</span><span class=\"o\">)</span> <span class=\"n\">libcurl</span><span class=\"bp\">/</span><span class=\"mi\">7</span><span class=\"bp\">.</span><span class=\"mi\">85</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"n\">OpenSSL</span><span class=\"bp\">/</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">Schannel</span><span class=\"o\">)</span> <span class=\"n\">zlib</span><span class=\"bp\">/</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">12</span> <span class=\"n\">brotli</span><span class=\"bp\">/</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">9</span> <span class=\"n\">zstd</span><span class=\"bp\">/</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">libidn2</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">3</span> <span class=\"n\">libssh2</span><span class=\"bp\">/</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">10</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"n\">nghttp2</span><span class=\"bp\">/</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">48</span><span class=\"bp\">.</span><span class=\"mi\">0</span>\n<span class=\"n\">Release</span><span class=\"bp\">-</span><span class=\"n\">Date</span><span class=\"o\">:</span> <span class=\"mi\">2022</span><span class=\"bp\">-</span><span class=\"mi\">08</span><span class=\"bp\">-</span><span class=\"mi\">31</span>\n<span class=\"n\">Protocols</span><span class=\"o\">:</span> <span class=\"n\">dict</span> <span class=\"n\">file</span> <span class=\"n\">ftp</span> <span class=\"n\">ftps</span> <span class=\"n\">gopher</span> <span class=\"n\">gophers</span> <span class=\"n\">http</span> <span class=\"n\">https</span> <span class=\"n\">imap</span> <span class=\"n\">imaps</span> <span class=\"n\">ldap</span> <span class=\"n\">ldaps</span> <span class=\"n\">mqtt</span> <span class=\"n\">pop3</span> <span class=\"n\">pop3s</span> <span class=\"n\">rtsp</span> <span class=\"n\">scp</span> <span class=\"n\">sftp</span> <span class=\"n\">smb</span> <span class=\"n\">smbs</span> <span class=\"n\">smtp</span> <span class=\"n\">smtps</span> <span class=\"n\">telnet</span> <span class=\"n\">tftp</span>\n<span class=\"n\">Features</span><span class=\"o\">:</span> <span class=\"n\">alt</span><span class=\"bp\">-</span><span class=\"n\">svc</span> <span class=\"n\">AsynchDNS</span> <span class=\"n\">brotli</span> <span class=\"n\">HSTS</span> <span class=\"n\">HTTP2</span> <span class=\"n\">HTTPS</span><span class=\"bp\">-</span><span class=\"n\">proxy</span> <span class=\"n\">IDN</span> <span class=\"n\">IPv6</span> <span class=\"n\">Kerberos</span> <span class=\"n\">Largefile</span> <span class=\"n\">libz</span> <span class=\"n\">MultiSSL</span> <span class=\"n\">NTLM</span> <span class=\"n\">SPNEGO</span> <span class=\"n\">SSL</span> <span class=\"n\">SSPI</span> <span class=\"n\">threadsafe</span> <span class=\"n\">TLS</span><span class=\"bp\">-</span><span class=\"n\">SRP</span> <span class=\"n\">zstd</span>\n\n<span class=\"bp\">杜坤鸿@</span><span class=\"n\">LAPTOP</span><span class=\"bp\">-</span><span class=\"n\">NMJJR92D</span> <span class=\"n\">MINGW64</span> <span class=\"bp\">~</span>\n<span class=\"bp\">$</span> <span class=\"n\">where</span> <span class=\"n\">curl</span>\n<span class=\"n\">D</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Program</span> <span class=\"n\">Files</span><span class=\"bp\">\\</span><span class=\"n\">Git</span><span class=\"bp\">\\</span><span class=\"n\">mingw64</span><span class=\"bp\">\\</span><span class=\"n\">bin</span><span class=\"bp\">\\</span><span class=\"n\">curl.exe</span>\n<span class=\"n\">C</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Windows</span><span class=\"bp\">\\</span><span class=\"n\">System32</span><span class=\"bp\">\\</span><span class=\"n\">curl.exe</span>\n\n<span class=\"bp\">杜坤鸿@</span><span class=\"n\">LAPTOP</span><span class=\"bp\">-</span><span class=\"n\">NMJJR92D</span> <span class=\"n\">MINGW64</span> <span class=\"bp\">~</span>\n<span class=\"bp\">$</span> <span class=\"n\">which</span> <span class=\"n\">curl</span>\n<span class=\"bp\">/</span><span class=\"n\">mingw64</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">curl</span>\n\n<span class=\"bp\">杜坤鸿@</span><span class=\"n\">LAPTOP</span><span class=\"bp\">-</span><span class=\"n\">NMJJR92D</span> <span class=\"n\">MINGW64</span> <span class=\"bp\">~</span>\n<span class=\"bp\">$</span> <span class=\"bp\">/</span><span class=\"n\">c</span><span class=\"bp\">/</span><span class=\"n\">Windows</span><span class=\"bp\">/</span><span class=\"n\">System32</span><span class=\"bp\">/</span><span class=\"n\">curl.exe</span> <span class=\"c1\">--version</span>\n<span class=\"n\">curl</span> <span class=\"mi\">7</span><span class=\"bp\">.</span><span class=\"mi\">55</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">Windows</span><span class=\"o\">)</span> <span class=\"n\">libcurl</span><span class=\"bp\">/</span><span class=\"mi\">7</span><span class=\"bp\">.</span><span class=\"mi\">55</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">WinSSL</span>\n<span class=\"n\">Release</span><span class=\"bp\">-</span><span class=\"n\">Date</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">unreleased</span><span class=\"o\">]</span>\n<span class=\"n\">Protocols</span><span class=\"o\">:</span> <span class=\"n\">dict</span> <span class=\"n\">file</span> <span class=\"n\">ftp</span> <span class=\"n\">ftps</span> <span class=\"n\">http</span> <span class=\"n\">https</span> <span class=\"n\">imap</span> <span class=\"n\">imaps</span> <span class=\"n\">pop3</span> <span class=\"n\">pop3s</span> <span class=\"n\">smtp</span> <span class=\"n\">smtps</span> <span class=\"n\">telnet</span> <span class=\"n\">tftp</span>\n<span class=\"n\">Features</span><span class=\"o\">:</span> <span class=\"n\">AsynchDNS</span> <span class=\"n\">IPv6</span> <span class=\"n\">Largefile</span> <span class=\"n\">SSPI</span> <span class=\"n\">Kerberos</span> <span class=\"n\">SPNEGO</span> <span class=\"n\">NTLM</span> <span class=\"n\">SSL</span>\n\n<span class=\"bp\">杜坤鸿@</span><span class=\"n\">LAPTOP</span><span class=\"bp\">-</span><span class=\"n\">NMJJR92D</span> <span class=\"n\">MINGW64</span> <span class=\"bp\">~</span>\n<span class=\"bp\">$</span>\n</code></pre></div>\n<p>2:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">C</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\</span><span class=\"n\">A</span><span class=\"bp\">ŀ</span><span class=\"n\">AA</span><span class=\"bp\">蜮</span><span class=\"n\">cache</span><span class=\"bp\">\\</span><span class=\"n\">mathlib</span><span class=\"bp\">\\</span><span class=\"n\">c020fbf33e698555.ltar</span> <span class=\"n\">not</span> <span class=\"n\">found</span>\n<span class=\"n\">C</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\</span><span class=\"n\">A</span><span class=\"bp\">ŀ</span><span class=\"n\">AA</span><span class=\"bp\">蜮</span><span class=\"n\">cache</span><span class=\"bp\">\\</span><span class=\"n\">mathlib</span><span class=\"bp\">\\</span><span class=\"n\">aae289492a74f633.ltar</span> <span class=\"n\">not</span> <span class=\"n\">found</span>\n<span class=\"n\">C</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\</span><span class=\"n\">A</span><span class=\"bp\">ŀ</span><span class=\"n\">AA</span><span class=\"bp\">蜮</span><span class=\"n\">cache</span><span class=\"bp\">\\</span><span class=\"n\">mathlib</span><span class=\"bp\">\\</span><span class=\"mi\">5</span><span class=\"n\">fe50c0c632aa6a5.ltar</span> <span class=\"n\">not</span> <span class=\"n\">found</span>\n<span class=\"n\">C</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\</span><span class=\"n\">A</span><span class=\"bp\">ŀ</span><span class=\"n\">AA</span><span class=\"bp\">蜮</span><span class=\"n\">cache</span><span class=\"bp\">\\</span><span class=\"n\">mathlib</span><span class=\"bp\">\\</span><span class=\"mi\">0</span><span class=\"n\">e66957958bc5f08.ltar</span> <span class=\"n\">not</span> <span class=\"n\">found</span>\n<span class=\"n\">C</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\</span><span class=\"n\">A</span><span class=\"bp\">ŀ</span><span class=\"n\">AA</span><span class=\"bp\">蜮</span><span class=\"n\">cache</span><span class=\"bp\">\\</span><span class=\"n\">mathlib</span><span class=\"bp\">\\</span><span class=\"mi\">709</span><span class=\"n\">bbe2e441cd1df.ltar</span> <span class=\"n\">not</span> <span class=\"n\">found</span>\n<span class=\"n\">C</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\</span><span class=\"n\">A</span><span class=\"bp\">ŀ</span><span class=\"n\">AA</span><span class=\"bp\">蜮</span><span class=\"n\">cache</span><span class=\"bp\">\\</span><span class=\"n\">mathlib</span><span class=\"bp\">\\</span><span class=\"n\">fd251426d3c0d198.ltar</span> <span class=\"n\">not</span> <span class=\"n\">found</span>\n<span class=\"n\">C</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\</span><span class=\"n\">A</span><span class=\"bp\">ŀ</span><span class=\"n\">AA</span><span class=\"bp\">蜮</span><span class=\"n\">cache</span><span class=\"bp\">\\</span><span class=\"n\">mathlib</span><span class=\"bp\">\\</span><span class=\"mi\">68</span><span class=\"n\">fd3972ac1d5620.ltar</span> <span class=\"n\">not</span> <span class=\"n\">found</span>\n<span class=\"n\">C</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\</span><span class=\"n\">A</span><span class=\"bp\">ŀ</span><span class=\"n\">AA</span><span class=\"bp\">蜮</span><span class=\"n\">cache</span><span class=\"bp\">\\</span><span class=\"n\">mathlib</span><span class=\"bp\">\\</span><span class=\"mi\">15182</span><span class=\"n\">fbd6b1ad3e6.ltar</span> <span class=\"n\">not</span> <span class=\"n\">found</span>\n<span class=\"n\">C</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\</span><span class=\"n\">A</span><span class=\"bp\">ŀ</span><span class=\"n\">AA</span><span class=\"bp\">蜮</span><span class=\"n\">cache</span><span class=\"bp\">\\</span><span class=\"n\">mathlib</span><span class=\"bp\">\\</span><span class=\"mi\">1</span><span class=\"n\">ab4a87cc94d2f95.ltar</span> <span class=\"n\">not</span> <span class=\"n\">found</span>\n<span class=\"n\">C</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\</span><span class=\"n\">A</span><span class=\"bp\">ŀ</span><span class=\"n\">AA</span><span class=\"bp\">蜮</span><span class=\"n\">cache</span><span class=\"bp\">\\</span><span class=\"n\">mathlib</span><span class=\"bp\">\\</span><span class=\"mi\">54577063</span><span class=\"n\">a996ea49.ltar</span> <span class=\"n\">not</span> <span class=\"n\">found</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"n\">recommended</span> <span class=\"bp\">`</span><span class=\"n\">curl</span><span class=\"bp\">`</span> <span class=\"n\">version</span> <span class=\"bp\">≥</span><span class=\"mi\">7</span><span class=\"bp\">.</span><span class=\"mi\">70</span><span class=\"bp\">.</span> <span class=\"n\">Found</span> <span class=\"mi\">7</span><span class=\"bp\">.</span><span class=\"mi\">55</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span> <span class=\"n\">Can't</span> <span class=\"n\">use</span> <span class=\"bp\">`</span><span class=\"c1\">--parallel`.</span>\n<span class=\"n\">Attempting</span> <span class=\"n\">to</span> <span class=\"n\">download</span> <span class=\"mi\">4380</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"n\">Decompressing</span> <span class=\"mi\">4380</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"n\">uncaught</span> <span class=\"n\">exception</span><span class=\"o\">:</span> <span class=\"n\">leantar</span> <span class=\"n\">failed</span> <span class=\"k\">with</span> <span class=\"n\">error</span> <span class=\"n\">code</span> <span class=\"mi\">1</span>\n<span class=\"bp\">···</span>\n</code></pre></div>",
        "id": 432873720,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1712917063
    },
    {
        "content": "<p>Is there a way to run <code>lake exe cache unpack</code> and manually specify the folder with the cache files?</p>",
        "id": 432873859,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1712917121
    },
    {
        "content": "<p>Shouldn't that be <code>\\.cache</code> not <code>\\cache</code>?</p>",
        "id": 432905703,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712929061
    },
    {
        "content": "<p>You're right, fixed</p>",
        "id": 432906410,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1712929295
    },
    {
        "content": "<p>the path <code>C:\\Users\\AŀAA蜮cache\\mathlib\\54577063a996ea49.ltar</code> looks corrupted. (my guess is that those are not the right chinese characters) What exactly does \"chinese locale\" entail here? Is it even UTF-8?</p>",
        "id": 432906763,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712929417
    },
    {
        "content": "<p>wait, why does it even say <code>Users</code>? Didn't you say that <code>Users</code> is translated to chinese on this system?</p>",
        "id": 432907156,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712929527
    },
    {
        "content": "<p>Yes, the home directory is not in <code>C:\\Users\\</code>, I expect that this folder doesn't even exist. So I'm not sure how that got there...<br>\nAnd indeed, this path is corrupted. The correct username is <code>杜坤鸿</code>, I believe (shown in the <code>git bash</code> prompt).</p>",
        "id": 432908048,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1712929811
    },
    {
        "content": "<p>I worry that mingw might be to blame here</p>",
        "id": 432908087,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712929825
    },
    {
        "content": "<p>And you might do better to stay in the system shell rather than git bash</p>",
        "id": 432908149,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712929845
    },
    {
        "content": "<p>what is the contents of <code>%HOMEPATH%</code>?</p>",
        "id": 432908222,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712929871
    },
    {
        "content": "<p>With Chinese locale I mean that the <code>Users</code> folder is written in Chinese and that the username contains Chinese characters.</p>",
        "id": 432908276,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1712929893
    },
    {
        "content": "<p>My worry is that it's using one of the old pre-UTF-8 chinese encodings</p>",
        "id": 432908545,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712929945
    },
    {
        "content": "<p>Ah, ok. I generally recommend <code>git bash</code> to new users, since I have had problems with powershell for things that worked correctly in <code>git bash</code>. It sucks if they mess up unicode encoding.</p>",
        "id": 432908868,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1712930024
    },
    {
        "content": "<p>AFAICT the string <code>Users</code> exists nowhere in <code>cache</code></p>",
        "id": 432909094,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712930067
    },
    {
        "content": "<p>so it must be coming from the environment in some way</p>",
        "id": 432909152,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712930077
    },
    {
        "content": "<p>here's another test, try replacing the <code>main</code> function of <code>cache</code> in <code>Cache/Main.lean</code> with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"HOMEDRIVE = '{← IO.getEnv \"</span><span class=\"n\">HOMEDRIVE</span><span class=\"s2\">\"}'\"</span>\n  <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"HOMEPATH = '{← IO.getEnv \"</span><span class=\"n\">HOMEPATH</span><span class=\"s2\">\"}'\"</span>\n  <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"CACHEDIR = '{CACHEDIR}'\"</span>\n</code></pre></div>",
        "id": 432910074,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712930300
    },
    {
        "content": "<p>What is interesting to me is that <code>lake exe cache get</code> did download the files to the correct place (but it is possible that was from an earlier try, within VSCode). One random hash indeed matched a file in their cache directory.</p>",
        "id": 432910799,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1712930507
    },
    {
        "content": "<p>Can you print the value of $USERPROFILE as well as $HOMEDRIVE and $HOMEPATH?</p>",
        "id": 432912937,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1712931109
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20cache.20on.20Windows.20with.20Chinese.20locale/near/432910799\">said</a>:</p>\n<blockquote>\n<p>What is interesting to me is that <code>lake exe cache get</code> did download the files to the correct place (but it is possible that was from an earlier try, within VSCode). One random hash indeed matched a file in their cache directory.</p>\n</blockquote>\n<p>This would suggest that <code>curl</code> is fine but <code>leantar</code> is unhappy</p>",
        "id": 432914072,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712931461
    },
    {
        "content": "<p>Probably because you have an mingw curl binary running within a mingw emulation layer of some kind, but then <code>leantar</code> expects to be run as a standard windows binary</p>",
        "id": 432914238,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712931505
    },
    {
        "content": "<p>I believe Windows translates some system path names in the UI while the physical path is still the English one. So Users may exist even if you can't see it in some views.</p>",
        "id": 432916586,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1712932244
    },
    {
        "content": "<p>Yes, that's true (on my system, <code>Users</code> is shown as <code>Utilisateurs</code> in the file explorer, but when I open it in a terminal I can see that the real name is <code>Users</code>).</p>",
        "id": 432918580,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1712932791
    },
    {
        "content": "<p>And powershell works perfectly fine for me, so maybe give it a try instead of git bash and see if things are really broken there?</p>",
        "id": 432918809,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1712932862
    },
    {
        "content": "<p>Youch -- I encourage students away from powershell and towards git bash by default (and IIRC our docs do this too). I look forward to a time when none of us ever type anything on the command line -- there still seem to be many dangers out there.</p>",
        "id": 432939774,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1712939192
    },
    {
        "content": "<p>Thanks for all the replies. Here are the outputs in GitBash</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">杜坤鸿@</span><span class=\"n\">LAPTOP</span><span class=\"bp\">-</span><span class=\"n\">NMJJR92D</span> <span class=\"n\">MINGW64</span> <span class=\"bp\">~</span>\n<span class=\"bp\">$</span> <span class=\"n\">echo</span> <span class=\"bp\">$</span><span class=\"n\">HOMEPATH</span>\n<span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\杜坤鸿</span>\n\n<span class=\"bp\">杜坤鸿@</span><span class=\"n\">LAPTOP</span><span class=\"bp\">-</span><span class=\"n\">NMJJR92D</span> <span class=\"n\">MINGW64</span> <span class=\"bp\">~</span>\n<span class=\"bp\">$</span> <span class=\"n\">echo</span> <span class=\"bp\">$</span><span class=\"n\">HOMEDRIVE</span>\n<span class=\"n\">C</span><span class=\"o\">:</span>\n</code></pre></div>\n<p>And this one from Powershell</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">PS</span> <span class=\"n\">E</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Lean</span><span class=\"bp\">\\</span><span class=\"n\">BonnAnalysis</span><span class=\"bp\">&gt;</span> <span class=\"n\">echo</span> <span class=\"bp\">$</span><span class=\"n\">HOME</span>\n<span class=\"n\">C</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\杜坤鸿</span>\n</code></pre></div>",
        "id": 432945884,
        "sender_full_name": "Kunhong Du",
        "timestamp": 1712941558
    },
    {
        "content": "<p>What does <code>curl --version</code> give in powershell?</p>",
        "id": 432946071,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712941607
    },
    {
        "content": "<p>Does <code>echo $HOMEPATH</code> also work in powershell?</p>",
        "id": 432946499,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712941777
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20cache.20on.20Windows.20with.20Chinese.20locale/near/432910074\">said</a>:</p>\n<blockquote>\n<p>here's another test, try replacing the <code>main</code> function of <code>cache</code> in <code>Cache/Main.lean</code> with</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"HOMEDRIVE = '{← IO.getEnv \"</span><span class=\"n\">HOMEDRIVE</span><span class=\"s2\">\"}'\"</span>\n  <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"HOMEPATH = '{← IO.getEnv \"</span><span class=\"n\">HOMEPATH</span><span class=\"s2\">\"}'\"</span>\n  <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"CACHEDIR = '{CACHEDIR}'\"</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I also still would like to see this test <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span> because it will tell us if lean has a different opinion of these env vars than git bash / powershell</p>",
        "id": 432946694,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712941846
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20cache.20on.20Windows.20with.20Chinese.20locale/near/432946071\">said</a>:</p>\n<blockquote>\n<p>What does <code>curl --version</code> give in powershell?</p>\n</blockquote>\n<p>It gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">PS</span> <span class=\"n\">C</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\杜坤鸿&gt;</span> <span class=\"n\">curl</span> <span class=\"c1\">--version</span>\n<span class=\"n\">curl</span> <span class=\"o\">:</span> <span class=\"bp\">未能解析此远程名称</span><span class=\"o\">:</span> <span class=\"bp\">'</span><span class=\"c1\">--version'</span>\n<span class=\"bp\">所在位置</span> <span class=\"bp\">行</span><span class=\"o\">:</span><span class=\"mi\">1</span> <span class=\"bp\">字符</span><span class=\"o\">:</span> <span class=\"mi\">1</span>\n<span class=\"bp\">+</span> <span class=\"n\">curl</span> <span class=\"c1\">--version</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~~~~~~~~~~~~~~</span>\n    <span class=\"bp\">+</span> <span class=\"n\">CategoryInfo</span>          <span class=\"o\">:</span> <span class=\"n\">InvalidOperation</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">System.Net.HttpWebRequest</span><span class=\"o\">:</span><span class=\"n\">HttpWebRequest</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Invoke</span><span class=\"bp\">-</span><span class=\"n\">WebRequest</span><span class=\"o\">]</span><span class=\"bp\">，</span><span class=\"n\">WebExce</span>\n    <span class=\"n\">ption</span>\n    <span class=\"bp\">+</span> <span class=\"n\">FullyQualifiedErrorId</span> <span class=\"o\">:</span> <span class=\"n\">WebCmdletWebResponseException</span><span class=\"o\">,</span><span class=\"n\">Microsoft.PowerShell.Commands.InvokeWebRequestCommand</span>\n</code></pre></div>\n<p>It says \"Unable to resolve this remote name\". Is the command correct?</p>\n<p>Actually, I just updated curl. In CMD, I got</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">C</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\杜坤鸿&gt;</span><span class=\"n\">curl</span> <span class=\"c1\">--version</span>\n<span class=\"n\">curl</span> <span class=\"mi\">8</span><span class=\"bp\">.</span><span class=\"mi\">7</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">x86_64</span><span class=\"bp\">-</span><span class=\"n\">w64</span><span class=\"bp\">-</span><span class=\"n\">mingw32</span><span class=\"o\">)</span> <span class=\"n\">libcurl</span><span class=\"bp\">/</span><span class=\"mi\">8</span><span class=\"bp\">.</span><span class=\"mi\">7</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">LibreSSL</span><span class=\"bp\">/</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">9</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">zlib</span><span class=\"bp\">/</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">brotli</span><span class=\"bp\">/</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"n\">zstd</span><span class=\"bp\">/</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">6</span> <span class=\"n\">WinIDN</span> <span class=\"n\">libpsl</span><span class=\"bp\">/</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">21</span><span class=\"bp\">.</span><span class=\"mi\">5</span> <span class=\"n\">libssh2</span><span class=\"bp\">/</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">11</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"n\">nghttp2</span><span class=\"bp\">/</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">61</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"n\">ngtcp2</span><span class=\"bp\">/</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"n\">nghttp3</span><span class=\"bp\">/</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">0</span>\n<span class=\"n\">Release</span><span class=\"bp\">-</span><span class=\"n\">Date</span><span class=\"o\">:</span> <span class=\"mi\">2024</span><span class=\"bp\">-</span><span class=\"mi\">03</span><span class=\"bp\">-</span><span class=\"mi\">27</span>\n<span class=\"n\">Protocols</span><span class=\"o\">:</span> <span class=\"n\">dict</span> <span class=\"n\">file</span> <span class=\"n\">ftp</span> <span class=\"n\">ftps</span> <span class=\"n\">gopher</span> <span class=\"n\">gophers</span> <span class=\"n\">http</span> <span class=\"n\">https</span> <span class=\"n\">imap</span> <span class=\"n\">imaps</span> <span class=\"n\">ipfs</span> <span class=\"n\">ipns</span> <span class=\"n\">ldap</span> <span class=\"n\">ldaps</span> <span class=\"n\">mqtt</span> <span class=\"n\">pop3</span> <span class=\"n\">pop3s</span> <span class=\"n\">rtsp</span> <span class=\"n\">scp</span> <span class=\"n\">sftp</span> <span class=\"n\">smb</span> <span class=\"n\">smbs</span> <span class=\"n\">smtp</span> <span class=\"n\">smtps</span> <span class=\"n\">telnet</span> <span class=\"n\">tftp</span> <span class=\"n\">ws</span> <span class=\"n\">wss</span>\n<span class=\"n\">Features</span><span class=\"o\">:</span> <span class=\"n\">alt</span><span class=\"bp\">-</span><span class=\"n\">svc</span> <span class=\"n\">AsynchDNS</span> <span class=\"n\">brotli</span> <span class=\"n\">HSTS</span> <span class=\"n\">HTTP2</span> <span class=\"n\">HTTP3</span> <span class=\"n\">HTTPS</span><span class=\"bp\">-</span><span class=\"n\">proxy</span> <span class=\"n\">IDN</span> <span class=\"n\">IPv6</span> <span class=\"n\">Kerberos</span> <span class=\"n\">Largefile</span> <span class=\"n\">libz</span> <span class=\"n\">NTLM</span> <span class=\"n\">PSL</span> <span class=\"n\">SPNEGO</span> <span class=\"n\">SSL</span> <span class=\"n\">SSPI</span> <span class=\"n\">threadsafe</span> <span class=\"n\">UnixSockets</span> <span class=\"n\">zstd</span>\n</code></pre></div>",
        "id": 432947308,
        "sender_full_name": "Kunhong Du",
        "timestamp": 1712942094
    },
    {
        "content": "<p>I think <code>powershell</code> has a builtin <code>curl</code> that is doing something else</p>",
        "id": 432947384,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712942123
    },
    {
        "content": "<p>But <code>lake exe cache</code> won't see that so that's fine</p>",
        "id": 432947408,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712942135
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20cache.20on.20Windows.20with.20Chinese.20locale/near/432946499\">said</a>:</p>\n<blockquote>\n<p>Does <code>echo $HOMEPATH</code> also work in powershell?</p>\n</blockquote>\n<p>It gives neither reply nor error.</p>",
        "id": 432947583,
        "sender_full_name": "Kunhong Du",
        "timestamp": 1712942201
    },
    {
        "content": "<p>I think that means it's empty</p>",
        "id": 432947674,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712942243
    },
    {
        "content": "<p>What does <code>chcp</code> give in <code>cmd</code>?</p>",
        "id": 432947877,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712942321
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20cache.20on.20Windows.20with.20Chinese.20locale/near/432947877\">said</a>:</p>\n<blockquote>\n<p>What does <code>chcp</code> give in <code>cmd</code>?</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">活动代码页</span><span class=\"o\">:</span> <span class=\"mi\">936</span>\n</code></pre></div>\n<p>That's \"active code page\".</p>",
        "id": 432948413,
        "sender_full_name": "Kunhong Du",
        "timestamp": 1712942526
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/Code_page_936_(Microsoft_Windows)\">https://en.wikipedia.org/wiki/Code_page_936_(Microsoft_Windows)</a></p>",
        "id": 432948862,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712942696
    },
    {
        "content": "<p>which sounds like<br>\n<span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20cache.20on.20Windows.20with.20Chinese.20locale/near/432908545\">said</a>:</p>\n<blockquote>\n<p>My worry is that it's using one of the old pre-UTF-8 chinese encodings</p>\n</blockquote>",
        "id": 432948960,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712942733
    },
    {
        "content": "<p>For me <code>echo $HOMEPATH</code> also doesn't give any output, however <code>echo $HOME</code> does give <code>C:\\Users\\Floris</code>.</p>",
        "id": 432967944,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1712949594
    },
    {
        "content": "<p>does it also do this from inside lean as in the test above?</p>",
        "id": 432968566,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712949867
    },
    {
        "content": "<p>In a PM Kunhong mentioned that <code>lake exe cache unpack</code> on Powershell gives the following output:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">PS</span> <span class=\"n\">E</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Lean</span><span class=\"bp\">\\</span><span class=\"n\">BonnAnalysis</span><span class=\"bp\">&gt;</span> <span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span> <span class=\"n\">unpack</span>\n<span class=\"n\">installing</span> <span class=\"n\">leantar</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">11</span>\n  <span class=\"bp\">%</span> <span class=\"n\">Total</span>    <span class=\"bp\">%</span> <span class=\"n\">Received</span> <span class=\"bp\">%</span> <span class=\"n\">Xferd</span>  <span class=\"n\">Average</span> <span class=\"n\">Speed</span>   <span class=\"n\">Time</span>    <span class=\"n\">Time</span>     <span class=\"n\">Time</span>  <span class=\"n\">Current</span>\n                                 <span class=\"n\">Dload</span>  <span class=\"n\">Upload</span>   <span class=\"n\">Total</span>   <span class=\"n\">Spent</span>    <span class=\"n\">Left</span>  <span class=\"n\">Speed</span>\n  <span class=\"mi\">0</span>     <span class=\"mi\">0</span>    <span class=\"mi\">0</span>     <span class=\"mi\">0</span>    <span class=\"mi\">0</span>     <span class=\"mi\">0</span>      <span class=\"mi\">0</span>      <span class=\"mi\">0</span> <span class=\"c1\">--:--:-- --:--:-- --:--:--     0</span>\n<span class=\"mi\">100</span>  <span class=\"mi\">669</span><span class=\"n\">k</span>  <span class=\"mi\">100</span>  <span class=\"mi\">669</span><span class=\"n\">k</span>    <span class=\"mi\">0</span>     <span class=\"mi\">0</span>   <span class=\"mi\">669</span><span class=\"n\">k</span>      <span class=\"mi\">0</span>  <span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"mi\">00</span><span class=\"o\">:</span><span class=\"mi\">01</span> <span class=\"c1\">--:--:--  0:00:01  669k</span>\n\n<span class=\"n\">No</span> <span class=\"n\">cache</span> <span class=\"n\">files</span> <span class=\"n\">to</span> <span class=\"n\">decompress</span>\n</code></pre></div>\n<p>This was after building Mathlib manually this afternoon. But it seems that <code>lake exe cache get</code> will probably work well in Powershell, and that git bash is the culprit here.</p>",
        "id": 432968632,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1712949903
    },
    {
        "content": "<p>On my own laptop I get this when running Mario's test:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Floris</span><span class=\"bp\">@</span><span class=\"n\">Dell</span><span class=\"bp\">-</span><span class=\"n\">E</span> <span class=\"n\">MINGW64</span> <span class=\"bp\">~/</span><span class=\"n\">projects</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span> <span class=\"o\">((</span><span class=\"n\">b222407684...</span><span class=\"o\">))</span>\n<span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">5</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Cache.Main</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">stdout</span><span class=\"o\">:</span>\n<span class=\"bp\">.\\.\\.\\</span><span class=\"n\">Cache</span><span class=\"bp\">\\</span><span class=\"n\">Main.lean</span><span class=\"o\">:</span><span class=\"mi\">67</span><span class=\"o\">:</span><span class=\"mi\">10</span><span class=\"o\">:</span> <span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">unused</span> <span class=\"kd\">variable</span> <span class=\"bp\">`</span><span class=\"n\">args</span><span class=\"bp\">`</span> <span class=\"o\">[</span><span class=\"n\">linter.unusedVariables</span><span class=\"o\">]</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">8</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Cache.Main</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">9</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">cache.exe</span>\n<span class=\"n\">HOMEDRIVE</span> <span class=\"bp\">=</span> <span class=\"bp\">'</span><span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">C</span><span class=\"o\">:)</span><span class=\"bp\">'</span>\n<span class=\"n\">HOMEPATH</span> <span class=\"bp\">=</span> <span class=\"bp\">'</span><span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\</span><span class=\"n\">Floris</span><span class=\"o\">)</span><span class=\"bp\">'</span>\n<span class=\"n\">CACHEDIR</span> <span class=\"bp\">=</span> <span class=\"bp\">'</span><span class=\"n\">C</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\</span><span class=\"n\">Floris</span><span class=\"bp\">\\.</span><span class=\"n\">cache</span><span class=\"bp\">\\</span><span class=\"n\">mathlib'</span>\n</code></pre></div>\n<p>(and the same results in Powershell)</p>",
        "id": 432968886,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1712950040
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20cache.20on.20Windows.20with.20Chinese.20locale/near/432967944\">said</a>:</p>\n<blockquote>\n<p>For me <code>echo $HOMEPATH</code> also doesn't give any output, however <code>echo $HOME</code> does give <code>C:\\Users\\Floris</code>.</p>\n</blockquote>\n<p>I should have mentioned, this in on Powershell.</p>",
        "id": 432969043,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1712950107
    },
    {
        "content": "<p>I don't know if this is useful:</p>\n<table>\n<thead>\n<tr>\n<th>echo</th>\n<th>git bash</th>\n<th>Powershell</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$HOME</td>\n<td>/c/Users/Floris</td>\n<td>C:\\Users\\Floris</td>\n</tr>\n<tr>\n<td>$HOMEPATH</td>\n<td>\\Users\\Floris</td>\n<td>-</td>\n</tr>\n<tr>\n<td>$HOMEDRIVE</td>\n<td>C:</td>\n<td>-</td>\n</tr>\n<tr>\n<td>$USERPROFILE</td>\n<td>C:\\Users\\Floris</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>",
        "id": 432969482,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1712950320
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20cache.20on.20Windows.20with.20Chinese.20locale/near/432968632\">said</a>:</p>\n<blockquote>\n<p>In a PM Kunhong mentioned that <code>lake exe cache unpack</code> on Powershell gives the following output:</p>\n</blockquote>\n<p>Actually, this might not say anything, if all the Mathlib olean files are up-to-date <code>lake exe cache unpack</code> might not unpack... <span class=\"user-mention\" data-user-id=\"709554\">@Kunhong Du</span> maybe you can try <code>lake exe cache unpack!</code> in powershell?<br>\nAnd for Mario's test, you can go to <code>.lake\\packages\\mathlib\\Cache\\Main.lean</code> and edit the <code>def main</code> with Mario's version above, save, and then run <code>lake exe cache</code> on the command line (maybe both of them?) to see what output we get?</p>",
        "id": 432970692,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1712950824
    },
    {
        "content": "<p>I cloned a new repository since I don't wanna ruin my built Mathlib lol.</p>\n<p>This is the result in Powershell by changing nothing in the files.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">PS</span> <span class=\"n\">E</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Lean</span><span class=\"bp\">\\</span><span class=\"n\">Analysis</span><span class=\"bp\">\\</span><span class=\"n\">BonnAnalysis</span><span class=\"bp\">&gt;</span> <span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span> <span class=\"n\">unpack</span><span class=\"bp\">!</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">mathlib</span><span class=\"o\">:</span> <span class=\"n\">cloning</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4.git</span> <span class=\"n\">to</span> <span class=\"bp\">'.\\.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">\\</span><span class=\"n\">mathlib'</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">std</span><span class=\"o\">:</span> <span class=\"n\">cloning</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">std4</span> <span class=\"n\">to</span> <span class=\"bp\">'.\\.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">\\</span><span class=\"n\">std'</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">Qq</span><span class=\"o\">:</span> <span class=\"n\">cloning</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">quote4</span> <span class=\"n\">to</span> <span class=\"bp\">'.\\.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">\\</span><span class=\"n\">Qq'</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">aesop</span><span class=\"o\">:</span> <span class=\"n\">cloning</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">aesop</span> <span class=\"n\">to</span> <span class=\"bp\">'.\\.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">\\</span><span class=\"n\">aesop'</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">proofwidgets</span><span class=\"o\">:</span> <span class=\"n\">cloning</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">ProofWidgets4</span> <span class=\"n\">to</span> <span class=\"bp\">'.\\.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">\\</span><span class=\"n\">proofwidgets'</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">Cli</span><span class=\"o\">:</span> <span class=\"n\">cloning</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">-</span><span class=\"n\">cli</span> <span class=\"n\">to</span> <span class=\"bp\">'.\\.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">\\</span><span class=\"n\">Cli'</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">importGraph</span><span class=\"o\">:</span> <span class=\"n\">cloning</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"kn\">import</span><span class=\"bp\">-</span><span class=\"n\">graph.git</span> <span class=\"n\">to</span> <span class=\"bp\">'.\\.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">\\</span><span class=\"n\">importGraph'</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Downloading</span> <span class=\"n\">proofwidgets</span> <span class=\"n\">cloud</span> <span class=\"n\">release</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Unpacking</span> <span class=\"n\">proofwidgets</span> <span class=\"n\">cloud</span> <span class=\"n\">release</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Cache.IO</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Cache.IO</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Cache.Hashing</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Cache.Hashing</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Cache.Requests</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">6</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Cache.Requests</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">6</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Cache.Main</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">7</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Cache.Main</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">9</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">cache.exe</span>\n<span class=\"n\">No</span> <span class=\"n\">cache</span> <span class=\"n\">files</span> <span class=\"n\">to</span> <span class=\"n\">decompress</span>\n</code></pre></div>\n<p>So does it mean it's working? Then I tried to build  the library :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">PS</span> <span class=\"n\">E</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Lean</span><span class=\"bp\">\\</span><span class=\"n\">Analysis</span><span class=\"bp\">\\</span><span class=\"n\">BonnAnalysis</span><span class=\"bp\">&gt;</span> <span class=\"n\">lake</span> <span class=\"n\">build</span> <span class=\"bp\">+</span><span class=\"n\">BonnAnalysis.Common</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">'</span><span class=\"n\">BonnAnalysis.Common'</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">such</span> <span class=\"n\">file</span> <span class=\"n\">or</span> <span class=\"n\">directory</span> <span class=\"o\">(</span><span class=\"n\">error</span> <span class=\"n\">code</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"n\">file</span><span class=\"o\">:</span> <span class=\"bp\">.\\.\\.\\</span><span class=\"n\">BonnAnalysis</span><span class=\"bp\">\\</span><span class=\"n\">Common.lean</span>\n</code></pre></div>\n<p>Is the file missing?</p>",
        "id": 432984343,
        "sender_full_name": "Kunhong Du",
        "timestamp": 1712957207
    },
    {
        "content": "<p>Yeah, there is no file <code>Common.lean</code> in that repository (you can do <code>lake build</code> to build everything). But I expect that it didn't work since it didn't decompress any files.</p>",
        "id": 432985572,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1712957724
    },
    {
        "content": "<p>It's possible that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IO.getEnv#doc\">docs#IO.getEnv</a> is not Unicode aware</p>",
        "id": 432986045,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712957966
    },
    {
        "content": "<p>Presumably the expectation is that it returns utf8 bytes irrespective of the system encoding?</p>",
        "id": 432986136,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712958004
    },
    {
        "content": "<p>This is the result in Powershell after changing the MAIN.lean file.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">PS</span> <span class=\"n\">E</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Lean</span><span class=\"bp\">\\</span><span class=\"n\">Analysis</span><span class=\"bp\">\\</span><span class=\"n\">BonnAnalysis</span><span class=\"bp\">&gt;</span> <span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span>\n<span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">mathlib</span><span class=\"o\">:</span> <span class=\"n\">repository</span> <span class=\"bp\">'.\\.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">\\</span><span class=\"n\">mathlib'</span> <span class=\"n\">has</span> <span class=\"kn\">local</span> <span class=\"n\">changes</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">7</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Cache.Main</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">stdout</span><span class=\"o\">:</span>\n<span class=\"bp\">.\\.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">\\</span><span class=\"n\">mathlib</span><span class=\"bp\">\\.\\.\\</span><span class=\"n\">Cache</span><span class=\"bp\">\\</span><span class=\"n\">Main.lean</span><span class=\"o\">:</span><span class=\"mi\">67</span><span class=\"o\">:</span><span class=\"mi\">10</span><span class=\"o\">:</span> <span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">unused</span> <span class=\"kd\">variable</span> <span class=\"bp\">`</span><span class=\"n\">args</span><span class=\"bp\">`</span> <span class=\"o\">[</span><span class=\"n\">linter.unusedVariables</span><span class=\"o\">]</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">8</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Cache.Main</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">9</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">cache.exe</span>\n<span class=\"n\">HOMEDRIVE</span> <span class=\"bp\">=</span> <span class=\"bp\">'</span><span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">C</span><span class=\"o\">:)</span><span class=\"bp\">'</span>\n<span class=\"n\">HOMEPATH</span> <span class=\"bp\">=</span> <span class=\"bp\">'</span><span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\杜坤鸿</span><span class=\"o\">)</span><span class=\"bp\">'</span>\n<span class=\"n\">CACHEDIR</span> <span class=\"bp\">=</span> <span class=\"bp\">'</span><span class=\"n\">C</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\杜坤鸿\\.</span><span class=\"n\">cache</span><span class=\"bp\">\\</span><span class=\"n\">mathlib'</span>\n</code></pre></div>\n<p>This is the result in GitBash</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">杜坤鸿@</span><span class=\"n\">LAPTOP</span><span class=\"bp\">-</span><span class=\"n\">NMJJR92D</span> <span class=\"n\">MINGW64</span> <span class=\"bp\">/</span><span class=\"n\">e</span><span class=\"bp\">/</span><span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Analysis</span><span class=\"bp\">/</span><span class=\"n\">BonnAnalysis</span> <span class=\"o\">(</span><span class=\"n\">master</span><span class=\"o\">)</span>\n<span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span>\n<span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">mathlib</span><span class=\"o\">:</span> <span class=\"n\">repository</span> <span class=\"bp\">'.\\.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">\\</span><span class=\"n\">mathlib'</span> <span class=\"n\">has</span> <span class=\"kn\">local</span> <span class=\"n\">changes</span>\n<span class=\"n\">HOMEDRIVE</span> <span class=\"bp\">=</span> <span class=\"bp\">'</span><span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">C</span><span class=\"o\">:)</span><span class=\"bp\">'</span>\n<span class=\"n\">HOMEPATH</span> <span class=\"bp\">=</span> <span class=\"bp\">'</span><span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\▒▒▒▒▒▒</span><span class=\"o\">)</span><span class=\"bp\">'</span>\n<span class=\"n\">CACHEDIR</span> <span class=\"bp\">=</span> <span class=\"bp\">'</span><span class=\"n\">C</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\▒▒▒▒▒▒\\.</span><span class=\"n\">cache</span><span class=\"bp\">\\</span><span class=\"n\">mathlib'</span>\n</code></pre></div>",
        "id": 432986504,
        "sender_full_name": "Kunhong Du",
        "timestamp": 1712958231
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> <code>String</code> assumes utf8 so I would presume so.</p>",
        "id": 432989922,
        "sender_full_name": "Mac Malone",
        "timestamp": 1712960051
    },
    {
        "content": "<p>I would guess that <code>std::getenv</code> just returns whatever bytes the system is using, and you need to do some translation to get the utf8 version</p>",
        "id": 432990838,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712960663
    },
    {
        "content": "<p>Probably Python's windows unicode code is a good template for what to do here</p>",
        "id": 432990853,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712960676
    },
    {
        "content": "<p>Of course its still very possible that the issue is in msys</p>",
        "id": 432990883,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712960696
    },
    {
        "content": "<p>Is it possible to get the raw bytes of a string in Lean? Do we have a pretty-printer that uses <code>\\xAB</code> escape sequences? The test above wouldn't be able to detect if Lean strings somehow ended up containing codepage 936 bytestring</p>",
        "id": 432991041,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712960793
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20cache.20on.20Windows.20with.20Chinese.20locale/near/432991041\">said</a>:</p>\n<blockquote>\n<p>Is it possible to get the raw bytes of a string in Lean?</p>\n</blockquote>\n<p>No, and I think it's a hole in the API. From the lean side you can only view a string as a sequence of unicode codepoints, and UTF-8-ness is required at all times (so I don't think it is an option to put malformed data in it and unpack it later). This is why Rust has the <code>OsString</code> type, it holds strings from the OS that are not necessarily UTF-8 encoded (it's internally just a byte buffer), and there are conversion functions and convenience methods to convert to UTF-8 (which can fail)</p>",
        "id": 433005759,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712973059
    },
    {
        "content": "<p>But <span class=\"user-mention silent\" data-user-id=\"709554\">Kunhong Du</span> 's output suggests this is not the case: the CACHEDIR seems to have been constructed correctly, at least when run from powershell. The git bash output is corrupted, although I can't tell if it's corrupted in lean or there is just  a printing issue. (EDIT: I'm pretty sure it's a lean issue, there are 6 replacement characters corresponding to the 6 bytes of cp936 data)</p>",
        "id": 433005897,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712973226
    },
    {
        "content": "<p>See <a href=\"https://github.com/nim-lang/Nim/issues/20083\">https://github.com/nim-lang/Nim/issues/20083</a> , looks like the solution was to use <code>_wgetenv</code> (which returns a wide string) and manually perform the conversion to UTF-8</p>",
        "id": 433006298,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712973598
    },
    {
        "content": "<p>looks like rust does basically the same thing: call <code>GetEnvironmentVariableW</code> and then  the result is converted from UTF-16 to UTF-8</p>",
        "id": 433007388,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712974460
    },
    {
        "content": "<p>I started working on this but it's way too annoying to write this much C code when it's ifdef'd out locally. Reported as <a href=\"https://github.com/leanprover/lean4/pull/3895\">lean4#3895</a></p>",
        "id": 433010781,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712978163
    },
    {
        "content": "<p>Update: Just tried <code>lake exe cache unpack</code> in Powershell and got the same output as in Git Bash.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">C</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\</span><span class=\"n\">A</span><span class=\"bp\">ŀ</span><span class=\"n\">AA</span><span class=\"bp\">蜮</span><span class=\"n\">cache</span><span class=\"bp\">\\</span><span class=\"n\">mathlib</span><span class=\"bp\">\\</span><span class=\"n\">be81d2378127cfae.ltar</span> <span class=\"n\">not</span> <span class=\"n\">found</span>\n<span class=\"n\">C</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\</span><span class=\"n\">A</span><span class=\"bp\">ŀ</span><span class=\"n\">AA</span><span class=\"bp\">蜮</span><span class=\"n\">cache</span><span class=\"bp\">\\</span><span class=\"n\">mathlib</span><span class=\"bp\">\\</span><span class=\"mi\">38</span><span class=\"n\">f9f2381afa3ea6.ltar</span> <span class=\"n\">not</span> <span class=\"n\">found</span>\n<span class=\"n\">C</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\</span><span class=\"n\">A</span><span class=\"bp\">ŀ</span><span class=\"n\">AA</span><span class=\"bp\">蜮</span><span class=\"n\">cache</span><span class=\"bp\">\\</span><span class=\"n\">mathlib</span><span class=\"bp\">\\</span><span class=\"n\">caddbb5a7d17b77f.ltar</span> <span class=\"n\">not</span> <span class=\"n\">found</span>\n<span class=\"n\">C</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\</span><span class=\"n\">A</span><span class=\"bp\">ŀ</span><span class=\"n\">AA</span><span class=\"bp\">蜮</span><span class=\"n\">cache</span><span class=\"bp\">\\</span><span class=\"n\">mathlib</span><span class=\"bp\">\\</span><span class=\"mi\">3</span><span class=\"n\">e258a1e34d1e6a0.ltar</span> <span class=\"n\">not</span> <span class=\"n\">found</span>\n<span class=\"n\">C</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\</span><span class=\"n\">A</span><span class=\"bp\">ŀ</span><span class=\"n\">AA</span><span class=\"bp\">蜮</span><span class=\"n\">cache</span><span class=\"bp\">\\</span><span class=\"n\">mathlib</span><span class=\"bp\">\\</span><span class=\"n\">b6cfb78fd842b756.ltar</span> <span class=\"n\">not</span> <span class=\"n\">found</span>\n<span class=\"n\">uncaught</span> <span class=\"n\">exception</span><span class=\"o\">:</span> <span class=\"n\">leantar</span> <span class=\"n\">failed</span> <span class=\"k\">with</span> <span class=\"n\">error</span> <span class=\"n\">code</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 434052314,
        "sender_full_name": "Kunhong Du",
        "timestamp": 1713448381
    },
    {
        "content": "<p>Try <code>chcp 65001</code></p>",
        "id": 434060131,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713450343
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20cache.20on.20Windows.20with.20Chinese.20locale/near/434060131\">said</a>:</p>\n<blockquote>\n<p>Try <code>chcp 65001</code></p>\n</blockquote>\n<p>It works! Thanks a lot!!!</p>\n<p>For those who meet the same problem as I did: changing code page is the right solution. But for me the command seems to do nothing. So I changed the system locale following <a href=\"https://stackoverflow.com/questions/57131654/using-utf-8-encoding-chcp-65001-in-command-prompt-windows-powershell-window\">this</a>. Now those lake exe cache commands can run normaly in Git Bash.</p>",
        "id": 434215275,
        "sender_full_name": "Kunhong Du",
        "timestamp": 1713464260
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20cache.20on.20Windows.20with.20Chinese.20locale/near/433005759\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20cache.20on.20Windows.20with.20Chinese.20locale/near/432991041\">said</a>:</p>\n<blockquote>\n<p>Is it possible to get the raw bytes of a string in Lean?</p>\n</blockquote>\n<p>No, and I think it's a hole in the API. From the lean side you can only view a string as a sequence of unicode codepoints, and UTF-8-ness is required at all times (so I don't think it is an option to put malformed data in it and unpack it later).</p>\n</blockquote>\n<p>Good news! You can actually do both. <code>String.toUTF8</code> returns the raw bytes of the <code>String</code> (it does not actually decode them as UTF8) and <code>String.fromUTF8Unchecked</code> packs raw (possibly malformed) bytes into a <code>String</code>. The UTF8 decoding is only done on demand when fetching <code>Char</code>s from the <code>String</code>. The actually bytes of the <code>String</code> may not be valid UTF8 under the hood.</p>",
        "id": 434483741,
        "sender_full_name": "Mac Malone",
        "timestamp": 1713603062
    },
    {
        "content": "<p>(<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=String.toUTF8#doc\">docs#String.toUTF8</a>)</p>",
        "id": 434483774,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713603110
    },
    {
        "content": "<p>This fact is probably not desirable long-term, though, as it does give us another <code>native_decide</code> proof of False:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">theorem</span> <span class=\"n\">String.map_id</span> <span class=\"o\">:</span> <span class=\"n\">String.map</span> <span class=\"n\">id</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span> <span class=\"c1\">-- left as an exercise to the reader ;)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">badBytes</span> <span class=\"o\">:=</span> <span class=\"n\">ByteArray.mk</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">35</span><span class=\"o\">,</span> <span class=\"mi\">32</span><span class=\"o\">,</span> <span class=\"mi\">195</span><span class=\"o\">,</span> <span class=\"mi\">10</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">badBytes_eq</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">String.fromUTF8Unchecked</span> <span class=\"n\">badBytes</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">id</span> <span class=\"bp\">=</span> <span class=\"n\">String.fromUTF8Unchecked</span> <span class=\"n\">badBytes</span>\n<span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">badBytes_ne</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">String.fromUTF8Unchecked</span> <span class=\"n\">badBytes</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">id</span> <span class=\"bp\">≠</span> <span class=\"n\">String.fromUTF8Unchecked</span> <span class=\"n\">badBytes</span>\n<span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">native_decide</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"n\">badBytes_ne</span> <span class=\"n\">badBytes_eq</span>\n</code></pre></div>\n<p>(Disclaimer: This is not a soundness issue in Lean as the use of <code>native_decide</code> requires additional axioms.)</p>",
        "id": 434485173,
        "sender_full_name": "Mac Malone",
        "timestamp": 1713604558
    },
    {
        "content": "<p>Is marking the <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=String.fromUTF8Unchecked#doc\">docs#String.fromUTF8Unchecked</a> <code>unsafe</code> sensible here?</p>",
        "id": 434485238,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713604609
    },
    {
        "content": "<p>Oh, I guess it's already opaque</p>",
        "id": 434485278,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713604679
    },
    {
        "content": "<p>Its not the only way to pack bad bytes into a string, though. Many String input IO operations can also do this.</p>",
        "id": 434485326,
        "sender_full_name": "Mac Malone",
        "timestamp": 1713604687
    },
    {
        "content": "<p>There are multiple String interface design choices that would need to to be changed to remove this hole. For example, the String equality here should likely be performing a char comparison rather than a byte comparison.</p>",
        "id": 434485540,
        "sender_full_name": "Mac Malone",
        "timestamp": 1713604913
    },
    {
        "content": "<p>(It is also just a general concern that <code>map id</code> is not actually semantically the identity funciton on all strings.)</p>",
        "id": 434485919,
        "sender_full_name": "Mac Malone",
        "timestamp": 1713605301
    },
    {
        "content": "<p>these should not be opaque functions. They should do actual decoding, and <code>fromUTF8Unchecked</code> should take a proof that the array is valid</p>",
        "id": 434487062,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713606534
    },
    {
        "content": "<p>I don't think it's valid to have invalid UTF8 in a string because the definition of <code>String</code> says it's a <code>List Char</code>. You can prove consequences of this that imply that strings of invalid UTF8 have impossible properties</p>",
        "id": 434487210,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713606685
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20cache.20on.20Windows.20with.20Chinese.20locale/near/434485326\">said</a>:</p>\n<blockquote>\n<p>Its not the only way to pack bad bytes into a string, though. Many String input IO operations can also do this.</p>\n</blockquote>\n<p>This is also a bug</p>",
        "id": 434487394,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713606877
    },
    {
        "content": "<p>This is very bad if untrusted input can cause safe lean code to cause UB</p>",
        "id": 434487420,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713606930
    },
    {
        "content": "<p>Here are some other functions that can be used to detect inconsistency in bad utf8 strings:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">badStr</span> <span class=\"o\">:=</span> <span class=\"n\">String.fromUTF8Unchecked</span> <span class=\"o\">(</span><span class=\"n\">ByteArray.mk</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">0x80</span><span class=\"o\">,</span> <span class=\"mi\">97</span><span class=\"o\">,</span> <span class=\"mi\">0xe0</span><span class=\"o\">])</span>\n<span class=\"kd\">def</span> <span class=\"n\">fixedStr</span> <span class=\"o\">:=</span> <span class=\"n\">String.mk</span> <span class=\"n\">badStr.data</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">badStr</span> <span class=\"bp\">=</span> <span class=\"n\">fixedStr</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">badStr.utf8ByteSize</span> <span class=\"c1\">-- 3</span>\n<span class=\"k\">#eval</span> <span class=\"n\">fixedStr.utf8ByteSize</span> <span class=\"c1\">-- 5</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">badStr.get</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">⟩</span> <span class=\"c1\">-- 'a'</span>\n<span class=\"k\">#eval</span> <span class=\"n\">fixedStr.get</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">⟩</span> <span class=\"c1\">-- 'A'</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">badStr.next</span> <span class=\"o\">⟨</span><span class=\"mi\">2</span><span class=\"o\">⟩</span> <span class=\"c1\">-- 5</span>\n<span class=\"k\">#eval</span> <span class=\"n\">fixedStr.next</span> <span class=\"o\">⟨</span><span class=\"mi\">2</span><span class=\"o\">⟩</span> <span class=\"c1\">-- 3</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">badStr.toUTF8</span> <span class=\"c1\">-- [128, 97, 224]</span>\n<span class=\"k\">#eval</span> <span class=\"n\">fixedStr.toUTF8</span> <span class=\"c1\">-- [194, 128, 97, 195, 160]</span>\n</code></pre></div>\n<p>In other words it's not sufficient to fix string equality, many functions leak this detail</p>",
        "id": 434498809,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713617602
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20cache.20on.20Windows.20with.20Chinese.20locale/near/434487420\">said</a>:</p>\n<blockquote>\n<p>This is very bad if untrusted input can cause safe lean code to cause UB</p>\n</blockquote>\n<p>While I agree that there are problems with this approach, I am confused as to how it causes undefined behavior. Everything behaves here in a very well-defined way, just not in the way one might initially assume (which is unfortunate).</p>",
        "id": 434524297,
        "sender_full_name": "Mac Malone",
        "timestamp": 1713637895
    },
    {
        "content": "<p>\"compiler unsoundness\" aka native_decide proofs of false can be used to cause the lean compiler to skip bounds checks and access things out of bounds because facts that are proved to hold do not hold at runtime</p>",
        "id": 434524607,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713638194
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">badStr</span> <span class=\"o\">:=</span> <span class=\"n\">String.fromUTF8Unchecked</span> <span class=\"o\">(</span><span class=\"n\">ByteArray.mk</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">0x80</span><span class=\"o\">,</span> <span class=\"mi\">97</span><span class=\"o\">,</span> <span class=\"mi\">0xe0</span><span class=\"o\">])</span>\n<span class=\"kd\">def</span> <span class=\"n\">fixedStr</span> <span class=\"o\">:=</span> <span class=\"n\">String.mk</span> <span class=\"n\">badStr.data</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">liar</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"n\">badStr</span> <span class=\"bp\">=</span> <span class=\"n\">fixedStr</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">liar_eq_true</span> <span class=\"o\">:</span> <span class=\"n\">liar</span> <span class=\"o\">:=</span> <span class=\"n\">decide_eq_true</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">][</span><span class=\"k\">if</span> <span class=\"n\">liar</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"mi\">1000</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"o\">(</span><span class=\"n\">if_pos</span> <span class=\"n\">liar_eq_true</span> <span class=\"bp\">▸</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">foo</span> <span class=\"c1\">-- 29863130885, or crash, or other random events</span>\n</code></pre></div>",
        "id": 434524867,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713638470
    },
    {
        "content": "<p>On a practical level, its is also worth noting that changing this would require a full overhaul/review of all C/C++ code passing strings to/from Lean, as none of them do any validation currently (as all validaiton is done on accesses in the String API). The C code (and much FFI code) makes heavy use of the fact that you can just pack and unpack a C string or <code>std::string</code> into a Lean String. Futhermore, performing validation could be a significant performance penalty. Hence, why, as you mentioned, Rust has <code>OsString</code>.</p>\n<p>However, I do agree that, ideally, this would be solved. (Maybe once work restarts on the compiler and other low-level code it will be?)</p>",
        "id": 434524973,
        "sender_full_name": "Mac Malone",
        "timestamp": 1713638557
    },
    {
        "content": "<p>This is already fixed in my PR <a href=\"https://github.com/leanprover/lean4/pull/3958\">lean4#3958</a></p>",
        "id": 434524985,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713638581
    },
    {
        "content": "<p>That's nice! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span>  But, that only addresses <code>fromUTF8Unchecked</code>, not the many other ways to pack bad bytes in.</p>",
        "id": 434525106,
        "sender_full_name": "Mac Malone",
        "timestamp": 1713638716
    },
    {
        "content": "<p>that's true, I see this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"n\">emitLns</span> <span class=\"o\">[</span><span class=\"s2\">\"in = lean_box(0);\"</span><span class=\"o\">,</span>\n               <span class=\"s2\">\"int i = argc;\"</span><span class=\"o\">,</span>\n               <span class=\"s2\">\"while (i &gt; 1) {\"</span><span class=\"o\">,</span>\n               <span class=\"s2\">\" lean_object* n;\"</span><span class=\"o\">,</span>\n               <span class=\"s2\">\" i--;\"</span><span class=\"o\">,</span>\n               <span class=\"s2\">\" n = lean_alloc_ctor(1,2,0); lean_ctor_set(n, 0, lean_mk_string(argv[i])); lean_ctor_set(n, 1, in);\"</span><span class=\"o\">,</span>\n               <span class=\"s2\">\" in = n;\"</span><span class=\"o\">,</span>\n              <span class=\"s2\">\"}\"</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>which is very <span aria-label=\"face with peeking eye\" class=\"emoji emoji-1fae3\" role=\"img\" title=\"face with peeking eye\">:face_with_peeking_eye:</span></p>",
        "id": 434525149,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713638760
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20cache.20on.20Windows.20with.20Chinese.20locale/near/434524973\">said</a>:</p>\n<blockquote>\n<p>On a practical level, its is also worth noting that changing this would require a full overhaul/review of all C/C++ code passing strings to/from Lean, as none of them do any validation currently</p>\n</blockquote>\n<p>Done in <a href=\"https://github.com/leanprover/lean4/pull/3963\">lean4#3963</a></p>",
        "id": 434530542,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713643966
    },
    {
        "content": "<blockquote>\n<p>Futhermore, performing validation could be a significant performance penalty.</p>\n</blockquote>\n<p>It would be nice if we could use some SIMD accelerated UTF-8 validator. But note that validation runs when we're allocating a new string, so the overhead is to some extent hidden by the cost of allocating and copying the text into the new array.</p>",
        "id": 434530712,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713644120
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> If all string data is now valid UTF-8, then we can also optimize many of the indexing primitives to no longer do validation. <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 434532482,
        "sender_full_name": "Mac Malone",
        "timestamp": 1713645848
    },
    {
        "content": "<p>Not completely, you can still use <code>String.get</code> with a misaligned <code>String.Pos</code> for example</p>",
        "id": 434532554,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713645938
    },
    {
        "content": "<p>but I did add <code>String.Pos.isValid</code> so we could have a version of <code>String.get</code> which assumes validity</p>",
        "id": 434532627,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713646005
    },
    {
        "content": "<p>Ah, the PR is failing because there are some wonky tests like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"bp\">�</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:=</span><span class=\"k\">fun</span> <span class=\"mi\">0</span><span class=\"bp\">=&gt;</span><span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"n\">n</span><span class=\"o\">:=</span><span class=\"bp\">�</span> <span class=\"bp\">�</span>\n</code></pre></div>",
        "id": 434532785,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713646197
    },
    {
        "content": "<p>I don't even know what we expect to happen here</p>",
        "id": 434532836,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713646214
    }
]