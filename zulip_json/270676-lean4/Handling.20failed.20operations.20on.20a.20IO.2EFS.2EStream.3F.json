[
    {
        "content": "<p>Hi all,</p>\n<p>I searched for this topic but couldn't find anything; apologies if I have missed it.</p>\n<p>I am a PhD student in systems and PL and am working through the FP in Lean book, and am enjoying myself.  I've just completed the <code>feline</code> cat(1) implementation, but there's something I don't understand and the book doesn't seem to be explicit on it - how does a failed read/write propagate back to the caller?  I was expecting the signature of <code>IO.FS.Stream.write</code> to produce an <code>IO (Either SomeSortOfStreamIOError Unit)</code>.  Panicing or something of the sort wouldn't be referentially transparent so I'm sure that's not the behaviour, and IO doesn't have anything like an <code>getErrno</code> function; surely we're not dropping failed operations on the floor?  What's the right way to think about this?</p>\n<p>Thanks!<br>\nNathan</p>",
        "id": 423737841,
        "sender_full_name": "Nathan Taylor",
        "timestamp": 1709089296
    },
    {
        "content": "<p>I'm not sure of the answer, but I'll note that <code>IO</code> in Lean is defined in terms of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=EIO#doc\">docs#EIO</a>, which is defined in terms of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=EStateM#doc\">docs#EStateM</a></p>",
        "id": 423740290,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1709090876
    },
    {
        "content": "<p>and <code>EStateM</code> is described as \"a combined error and state monad, equivalent to <code>ExceptT ε (StateM σ)</code>\"</p>",
        "id": 423740406,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1709090951
    },
    {
        "content": "<p>it looks like there's a discussion of it in the IO Monad chapter: <a href=\"https://lean-lang.org/functional_programming_in_lean/monads/io.html\">https://lean-lang.org/functional_programming_in_lean/monads/io.html</a></p>",
        "id": 423741590,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1709091739
    },
    {
        "content": "<p>maybe you're supposed to use <code>tryCatch</code> from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MonadExceptOf#doc\">docs#MonadExceptOf</a></p>",
        "id": 423742703,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1709092617
    },
    {
        "content": "<p>Hi Matt,</p>\n<p>Thanks for the reply - it should have occurred to me that it would be somehow wrapped up in IO itself.  Skimmed the IO monad chapter and am looking forward to having enough context to fully groking it soon.</p>\n<p>Thanks!<br>\nN</p>",
        "id": 423743389,
        "sender_full_name": "Nathan Taylor",
        "timestamp": 1709093069
    }
]