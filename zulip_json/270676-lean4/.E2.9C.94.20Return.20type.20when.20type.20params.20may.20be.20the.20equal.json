[
    {
        "content": "<p>I'm trying to define the finite diagram category used to define the category Grph (as the category of functors from the diagram into Set). </p>\n<p>However, I've run into a problem with composition of morphisms. All of the objects, morphisms, and compositions are given explicitly like so: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">GraphDiagramObj</span> <span class=\"n\">where</span>\n <span class=\"bp\">|</span> <span class=\"n\">E</span>\n <span class=\"bp\">|</span> <span class=\"n\">V</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">GraphDiagramMorph</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Dom</span>  <span class=\"n\">Cod</span> <span class=\"o\">:</span><span class=\"n\">GraphDiagramObj</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span>   <span class=\"n\">where</span>\n <span class=\"bp\">|</span> <span class=\"n\">src</span> <span class=\"o\">:</span>  <span class=\"n\">GraphDiagramMorph</span> <span class=\"n\">E</span> <span class=\"n\">V</span>\n <span class=\"bp\">|</span> <span class=\"n\">trg</span> <span class=\"o\">:</span>  <span class=\"n\">GraphDiagramMorph</span> <span class=\"n\">E</span> <span class=\"n\">V</span>\n <span class=\"bp\">|</span> <span class=\"n\">id_E</span> <span class=\"o\">:</span> <span class=\"n\">GraphDiagramMorph</span> <span class=\"n\">E</span> <span class=\"n\">E</span>\n <span class=\"bp\">|</span> <span class=\"n\">id_V</span> <span class=\"o\">:</span> <span class=\"n\">GraphDiagramMorph</span> <span class=\"n\">V</span> <span class=\"n\">V</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">graphDiagramComposition</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">GraphDiagramMorph</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)(</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">GraphDiagramMorph</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">):</span> <span class=\"n\">GraphDiagramMorph</span> <span class=\"n\">A</span> <span class=\"n\">C</span>   <span class=\"o\">:=</span>\n     <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">src</span><span class=\"o\">,</span> <span class=\"n\">id_V</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">src</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">trg</span><span class=\"o\">,</span> <span class=\"n\">id_V</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">trg</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">id_V</span><span class=\"o\">,</span> <span class=\"n\">src</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">src</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">id_V</span><span class=\"o\">,</span> <span class=\"n\">trg</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">trg</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">id_V</span><span class=\"o\">,</span> <span class=\"n\">id_V</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">id_V</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">id_E</span><span class=\"o\">,</span> <span class=\"n\">id_E</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">id_E</span>\n</code></pre></div>\n<p>However in graphDiagramComposition I get an error on <code>| (src, id_V) =&gt; src</code>which reads:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>type mismatch\n  src\nhas type\n  GraphDiagramMorph A B : Type\nbut is expected to have type\n  GraphDiagramMorph A C : Type\n</code></pre></div>\n<p>I understand why I'm getting this error but I don't know what to do about it. The type signature for the function is correct, but the compiler is not aware that in those cases <code> GraphDiagramMorph A B</code>  is definitionally equal to <code>  GraphDiagramMorph A C</code> since the identity morphisms are endo. </p>\n<p>How can I fix this?</p>",
        "id": 411144212,
        "sender_full_name": "Avi Craimer",
        "timestamp": 1704355524
    },
    {
        "content": "<p>In the match clause <code>src</code> isn't matching the constructor it's just a variable that matches anything. You want <code>GraphDiagramMorph.src</code> or <code>.src</code> instead.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">graphDiagramComposition</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">GraphDiagramMorph</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)(</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">GraphDiagramMorph</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">):</span> <span class=\"n\">GraphDiagramMorph</span> <span class=\"n\">A</span> <span class=\"n\">C</span>   <span class=\"o\">:=</span>\n     <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">src</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">id_V</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">src</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">trg</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">id_V</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">trg</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">id_V</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">src</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">src</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">id_V</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">trg</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">trg</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">id_V</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">id_V</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">id_V</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">id_E</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">id_E</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">id_E</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>mostly typechecks.</p>",
        "id": 411146989,
        "sender_full_name": "Andrew Carter",
        "timestamp": 1704357158
    },
    {
        "content": "<p>This is a common gotcha. Is there some trick involved with the colour of the letters to spot when this happens?</p>",
        "id": 411148734,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704358024
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> at this point i just assume any ident pattern without a <code>.</code> preceding it is not a constructor, and i obsessively add <code>.</code> prefixes in every match...</p>",
        "id": 411149391,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1704358350
    },
    {
        "content": "<p>Variables show as blue on my VS Code (also I can hover over it to get type information), I'll admit the only reason I noticed it here was because I was recently playing with inductive types that had equality in of the constructors but not others (and using pattern matching on Eq) so I was confused why it didn't work.</p>\n<p>I've started to get in the habit of always using <code>.</code> even when they are not necessary. For example both</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">GraphDiagramMorph</span>\n<span class=\"kd\">def</span> <span class=\"n\">graphDiagramComposition</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">GraphDiagramMorph</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)(</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">GraphDiagramMorph</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">):</span> <span class=\"n\">GraphDiagramMorph</span> <span class=\"n\">A</span> <span class=\"n\">C</span>   <span class=\"o\">:=</span>\n     <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">src</span><span class=\"o\">,</span> <span class=\"n\">id_V</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">src</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">trg</span><span class=\"o\">,</span> <span class=\"n\">id_V</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">trg</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">id_V</span><span class=\"o\">,</span> <span class=\"n\">src</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">src</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">id_V</span><span class=\"o\">,</span> <span class=\"n\">trg</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">trg</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">id_V</span><span class=\"o\">,</span> <span class=\"n\">id_V</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">id_V</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">id_E</span><span class=\"o\">,</span> <span class=\"n\">id_E</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">id_E</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span> <span class=\"n\">GraphDiagramMorph</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">GraphDiagramMorph.graphDiagramComposition</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">GraphDiagramMorph</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)(</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">GraphDiagramMorph</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">):</span> <span class=\"n\">GraphDiagramMorph</span> <span class=\"n\">A</span> <span class=\"n\">C</span>   <span class=\"o\">:=</span>\n     <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">src</span><span class=\"o\">,</span> <span class=\"n\">id_V</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">src</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">trg</span><span class=\"o\">,</span> <span class=\"n\">id_V</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">trg</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">id_V</span><span class=\"o\">,</span> <span class=\"n\">src</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">src</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">id_V</span><span class=\"o\">,</span> <span class=\"n\">trg</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">trg</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">id_V</span><span class=\"o\">,</span> <span class=\"n\">id_V</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">id_V</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">id_E</span><span class=\"o\">,</span> <span class=\"n\">id_E</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">id_E</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>are also fine (since it brings the namespace in) but I'd probably still add dots.</p>",
        "id": 411149644,
        "sender_full_name": "Andrew Carter",
        "timestamp": 1704358481
    },
    {
        "content": "<p>the parentheses in that match are unnecessary BTW</p>",
        "id": 411223240,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704386299
    },
    {
        "content": "<p>Thanks to everybody for your help. I understand now that a lot of the issues I've had with pattern matching have come from the fact that I think it is using a constructor when actually it is using interpreting it as a variable due to namespace issues. </p>\n<p>Here is my refactored code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">GraphDiagram.Obj</span> <span class=\"n\">where</span>\n <span class=\"bp\">|</span> <span class=\"n\">E</span>\n <span class=\"bp\">|</span> <span class=\"n\">V</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">GraphDiagram.Morph</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Dom</span>  <span class=\"n\">Cod</span> <span class=\"o\">:</span><span class=\"n\">GraphDiagram.Obj</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n <span class=\"bp\">|</span> <span class=\"n\">src</span> <span class=\"o\">:</span>  <span class=\"n\">Morph</span> <span class=\"n\">E</span> <span class=\"n\">V</span>\n <span class=\"bp\">|</span> <span class=\"n\">trg</span> <span class=\"o\">:</span>  <span class=\"n\">Morph</span> <span class=\"n\">E</span> <span class=\"n\">V</span>\n <span class=\"bp\">|</span> <span class=\"n\">id_E</span> <span class=\"o\">:</span> <span class=\"n\">Morph</span> <span class=\"n\">E</span> <span class=\"n\">E</span>\n <span class=\"bp\">|</span> <span class=\"n\">id_V</span> <span class=\"o\">:</span> <span class=\"n\">Morph</span> <span class=\"n\">V</span> <span class=\"n\">V</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">GraphDiagram.Morph.comp</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">Morph</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)(</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">Morph</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">):</span> <span class=\"n\">Morph</span> <span class=\"n\">A</span> <span class=\"n\">C</span>   <span class=\"o\">:=</span>\n     <span class=\"k\">match</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">src</span><span class=\"o\">,</span> <span class=\"n\">id_V</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">src</span> <span class=\"o\">:</span> <span class=\"n\">Morph</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">trg</span><span class=\"o\">,</span> <span class=\"n\">id_V</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">trg</span> <span class=\"o\">:</span> <span class=\"n\">Morph</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">id_V</span><span class=\"o\">,</span> <span class=\"n\">src</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">src</span> <span class=\"o\">:</span> <span class=\"n\">Morph</span> <span class=\"n\">A</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">id_V</span><span class=\"o\">,</span> <span class=\"n\">trg</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">trg</span> <span class=\"o\">:</span> <span class=\"n\">Morph</span> <span class=\"n\">A</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">id_V</span><span class=\"o\">,</span> <span class=\"n\">id_V</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">id_V</span> <span class=\"o\">:</span> <span class=\"n\">Morph</span> <span class=\"n\">A</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">id_E</span><span class=\"o\">,</span> <span class=\"n\">id_E</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">id_E</span> <span class=\"o\">:</span> <span class=\"n\">Morph</span> <span class=\"n\">A</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This works except I still get an error in the match statement because it says there are missing cases. I can see manually that I've covered all the cases, but I'm not sure how to convince the compiler of this.</p>",
        "id": 411240548,
        "sender_full_name": "Avi Craimer",
        "timestamp": 1704393301
    },
    {
        "content": "<p>Where is (src, src) among others, I don’t think you’ve covered all the cases. You may have covered all the cases with id_* but comp has to be total. The compiler should list out the uncovered cases.</p>",
        "id": 411242103,
        "sender_full_name": "Andrew Carter",
        "timestamp": 1704393949
    },
    {
        "content": "<p>I won't list all the missing cases, but just to add a few:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">missing</span> <span class=\"n\">cases</span><span class=\"o\">:</span>\n<span class=\"n\">Obj.V</span><span class=\"o\">,</span> <span class=\"n\">Obj.E</span><span class=\"o\">,</span> <span class=\"n\">Obj.V</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">trg</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">trg</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n<span class=\"n\">Obj.V</span><span class=\"o\">,</span> <span class=\"n\">Obj.E</span><span class=\"o\">,</span> <span class=\"n\">Obj.V</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">trg</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">src</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n<span class=\"n\">Obj.V</span><span class=\"o\">,</span> <span class=\"n\">Obj.E</span><span class=\"o\">,</span> <span class=\"n\">Obj.V</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">src</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">trg</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>V, E, V, trg, trg  -  Not valid because if <code>f: Morph A B</code>  is <code>trg: Morph E V</code>, then <code>g: Morph B C</code> cannot also be <code>trg</code> since it would have to start at V and end at E which is contrary to the type definition of <code>trg</code>.</p>\n<p>Same goes for <code>src, src</code>, <code>src, trg</code>, and <code>trg, src</code> .</p>",
        "id": 411242201,
        "sender_full_name": "Avi Craimer",
        "timestamp": 1704393978
    },
    {
        "content": "<p>Then Morph.comp isn’t well defined, I’m not a catagory theorist, but I think you’ll have to spend some time thinking about what you are actually trying to say here.</p>",
        "id": 411242375,
        "sender_full_name": "Andrew Carter",
        "timestamp": 1704394080
    },
    {
        "content": "<p>I don't think it depends on any category theory, just on the type parameters. </p>\n<p>In this line: <code>def GraphDiagram.Morph.comp (f: Morph A B)(g: Morph B C): Morph A C </code></p>\n<p>The type parameter variables A B for the first argument and B C for the second argument force the second argument to be a Morph that starts where the first argument ends.</p>",
        "id": 411242592,
        "sender_full_name": "Avi Craimer",
        "timestamp": 1704394171
    },
    {
        "content": "<p>But what if A = B = C, then everything would be valid no?</p>",
        "id": 411243007,
        "sender_full_name": "Andrew Carter",
        "timestamp": 1704394338
    },
    {
        "content": "<p>Yes, but in the cases of src and trg they go from E to V and E is not equal to V.</p>",
        "id": 411243130,
        "sender_full_name": "Avi Craimer",
        "timestamp": 1704394395
    },
    {
        "content": "<p>Oh because of Obj.noConfusion, hmmm… worst case you could add the missing branches but use “absurd” (or the exfalso) tactic to prove the contradiction</p>",
        "id": 411243345,
        "sender_full_name": "Andrew Carter",
        "timestamp": 1704394487
    },
    {
        "content": "<p>I'm not sure what Obj.noConfusion is. </p>\n<p>Would you be able to give an example of using absurd for missing branches?</p>",
        "id": 411243499,
        "sender_full_name": "Avi Craimer",
        "timestamp": 1704394552
    },
    {
        "content": "<p>noConfusion just means that the different cases of a constructor are different</p>",
        "id": 411243788,
        "sender_full_name": "Andrew Carter",
        "timestamp": 1704394681
    },
    {
        "content": "<p>Okay, I got something that works.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">GraphDiagram.Morph.comp</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">Morph</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)(</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">Morph</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">):</span> <span class=\"n\">Morph</span> <span class=\"n\">A</span> <span class=\"n\">C</span>   <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">V</span><span class=\"o\">,</span>  <span class=\"n\">src</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">src</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">trg</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">trg</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">src</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">src</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">trg</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">trg</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">id_V</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">id_E</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">trg</span>\n</code></pre></div>\n<p>The proof was suggested using the <code>exact?</code> tactic. I have no idea why it works, but I suspect it must analyze the type parameters somehow. </p>\n<p>Let me know if there is better way to understand this.</p>",
        "id": 411245135,
        "sender_full_name": "Avi Craimer",
        "timestamp": 1704395128
    },
    {
        "content": "<p>Oh actually I think its a namespace issue again</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">GraphDiagram.Morph</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Dom</span>  <span class=\"n\">Cod</span> <span class=\"o\">:</span><span class=\"n\">GraphDiagram.Obj</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n <span class=\"bp\">|</span> <span class=\"n\">src</span> <span class=\"o\">:</span>  <span class=\"n\">Morph</span> <span class=\"n\">Obj.E</span> <span class=\"n\">Obj.V</span>\n <span class=\"bp\">|</span> <span class=\"n\">trg</span> <span class=\"o\">:</span>  <span class=\"n\">Morph</span> <span class=\"n\">Obj.E</span> <span class=\"n\">Obj.V</span>\n <span class=\"bp\">|</span> <span class=\"n\">id_E</span> <span class=\"o\">:</span> <span class=\"n\">Morph</span> <span class=\"n\">Obj.E</span> <span class=\"n\">Obj.E</span>\n <span class=\"bp\">|</span> <span class=\"n\">id_V</span> <span class=\"o\">:</span> <span class=\"n\">Morph</span> <span class=\"n\">Obj.V</span> <span class=\"n\">Obj.V</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">GraphDiagram.Morph.comp</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">Morph</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)(</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">Morph</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">):</span> <span class=\"n\">Morph</span> <span class=\"n\">A</span> <span class=\"n\">C</span>   <span class=\"o\">:=</span>\n     <span class=\"k\">match</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">src</span><span class=\"o\">,</span> <span class=\"n\">id_V</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">src</span>\n    <span class=\"bp\">|</span> <span class=\"n\">trg</span><span class=\"o\">,</span> <span class=\"n\">id_V</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">trg</span>\n    <span class=\"bp\">|</span> <span class=\"n\">id_E</span><span class=\"o\">,</span> <span class=\"n\">src</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">src</span>\n    <span class=\"bp\">|</span> <span class=\"n\">id_E</span><span class=\"o\">,</span> <span class=\"n\">trg</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">trg</span>\n    <span class=\"bp\">|</span> <span class=\"n\">id_V</span><span class=\"o\">,</span> <span class=\"n\">id_V</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">id_V</span>\n    <span class=\"bp\">|</span> <span class=\"n\">id_E</span><span class=\"o\">,</span> <span class=\"n\">id_E</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">id_E</span>\n</code></pre></div>\n<p>and actually there was a bug in your existing cases I fixed</p>",
        "id": 411245377,
        "sender_full_name": "Andrew Carter",
        "timestamp": 1704395208
    },
    {
        "content": "<p>Btw, if your matching on the inputs you can just write:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">GraphDiagram.Morph.comp</span><span class=\"o\">:</span> <span class=\"n\">Morph</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">Morph</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">Morph</span> <span class=\"n\">A</span> <span class=\"n\">C</span>\n<span class=\"bp\">|</span> <span class=\"n\">src</span><span class=\"o\">,</span> <span class=\"n\">id_V</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">src</span>\n<span class=\"bp\">|</span> <span class=\"n\">trg</span><span class=\"o\">,</span> <span class=\"n\">id_V</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">trg</span>\n<span class=\"bp\">|</span> <span class=\"n\">id_E</span><span class=\"o\">,</span> <span class=\"n\">src</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">src</span>\n<span class=\"bp\">|</span> <span class=\"n\">id_E</span><span class=\"o\">,</span> <span class=\"n\">trg</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">trg</span>\n<span class=\"bp\">|</span> <span class=\"n\">id_V</span><span class=\"o\">,</span> <span class=\"n\">id_V</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">id_V</span>\n<span class=\"bp\">|</span> <span class=\"n\">id_E</span><span class=\"o\">,</span> <span class=\"n\">id_E</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">id_E</span>\n</code></pre></div>",
        "id": 411245510,
        "sender_full_name": "Andrew Carter",
        "timestamp": 1704395255
    },
    {
        "content": "<p>You can be a little bit safer by turning off auto implicit variables, although it can be nice to use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">GraphDiagram.Obj</span> <span class=\"n\">where</span>\n <span class=\"bp\">|</span> <span class=\"n\">E</span>\n <span class=\"bp\">|</span> <span class=\"n\">V</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">GraphDiagram.Morph</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Dom</span>  <span class=\"n\">Cod</span> <span class=\"o\">:</span><span class=\"n\">GraphDiagram.Obj</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n <span class=\"bp\">|</span> <span class=\"n\">src</span> <span class=\"o\">:</span>  <span class=\"n\">Morph</span> <span class=\"n\">Obj.E</span> <span class=\"n\">Obj.V</span>\n <span class=\"bp\">|</span> <span class=\"n\">trg</span> <span class=\"o\">:</span>  <span class=\"n\">Morph</span> <span class=\"n\">Obj.E</span> <span class=\"n\">Obj.V</span>\n <span class=\"bp\">|</span> <span class=\"n\">id_E</span> <span class=\"o\">:</span> <span class=\"n\">Morph</span> <span class=\"n\">Obj.E</span> <span class=\"n\">Obj.E</span>\n <span class=\"bp\">|</span> <span class=\"n\">id_V</span> <span class=\"o\">:</span> <span class=\"n\">Morph</span> <span class=\"n\">Obj.V</span> <span class=\"n\">Obj.V</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">GraphDiagram.Morph.comp</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">:</span> <span class=\"n\">GraphDiagram.Obj</span><span class=\"o\">}:</span> <span class=\"n\">Morph</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">Morph</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">Morph</span> <span class=\"n\">A</span> <span class=\"n\">C</span>\n<span class=\"bp\">|</span> <span class=\"n\">src</span><span class=\"o\">,</span> <span class=\"n\">id_V</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">src</span>\n<span class=\"bp\">|</span> <span class=\"n\">trg</span><span class=\"o\">,</span> <span class=\"n\">id_V</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">trg</span>\n<span class=\"bp\">|</span> <span class=\"n\">id_E</span><span class=\"o\">,</span> <span class=\"n\">src</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">src</span>\n<span class=\"bp\">|</span> <span class=\"n\">id_E</span><span class=\"o\">,</span> <span class=\"n\">trg</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">trg</span>\n<span class=\"bp\">|</span> <span class=\"n\">id_V</span><span class=\"o\">,</span> <span class=\"n\">id_V</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">id_V</span>\n<span class=\"bp\">|</span> <span class=\"n\">id_E</span><span class=\"o\">,</span> <span class=\"n\">id_E</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">id_E</span>\n</code></pre></div>",
        "id": 411245759,
        "sender_full_name": "Andrew Carter",
        "timestamp": 1704395333
    },
    {
        "content": "<p>Thanks again. I can certainly understand now why <span class=\"user-mention\" data-user-id=\"407274\">@James Gallicchio</span>  said he adds dots to every constructor <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n<p>Unfortunately, I'm not getting any syntax highlighting in VSCode to differentiate variables from constants. This is what I see in my broken definition. Even when I hover over the variable, it just shows me E: Obj. </p>\n<p><a href=\"/user_uploads/3121/r77YZO-uK-qnr90mXLwPsXea/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/r77YZO-uK-qnr90mXLwPsXea/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/r77YZO-uK-qnr90mXLwPsXea/image.png\"></a></div><p>When I fix it I see this:</p>\n<p><a href=\"/user_uploads/3121/SIG9d1Ufi--mJHMLuismO5WA/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/SIG9d1Ufi--mJHMLuismO5WA/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/SIG9d1Ufi--mJHMLuismO5WA/image.png\"></a></div><p>Is this a problem with my VSCode color theme? Does anybody know what the editor token customization property is for the Lean variables vs constructors?</p>",
        "id": 411246544,
        "sender_full_name": "Avi Craimer",
        "timestamp": 1704395663
    },
    {
        "content": "<p>FWIW. They are both white for me also, it's only in the match case they were different.</p>",
        "id": 411246859,
        "sender_full_name": "Andrew Carter",
        "timestamp": 1704395806
    },
    {
        "content": "<p>These are my current colour theme customizations. The \"variables\" token is set to a bright orange, but this isn't coming through. So it might be an issue with the Lean4 language server not differentiating variables from other identifiers. </p>\n<div class=\"codehilite\" data-code-language=\"JSON\"><pre><span></span><code><span class=\"nt\">\"editor.tokenColorCustomizations\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nt\">\"[Cobalt2]\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nt\">\"comments\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"nt\">\"foreground\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"#bbdbf3\"</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"p\">},</span>\n<span class=\"w\">            </span><span class=\"nt\">\"strings\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"#bfceff\"</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"nt\">\"variables\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"#ff625d\"</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"nt\">\"functions\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"#d8f864\"</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"nt\">\"numbers\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"nt\">\"foreground\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"#ff59f7\"</span>\n<span class=\"w\">            </span><span class=\"p\">},</span>\n<span class=\"w\">            </span><span class=\"nt\">\"keywords\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"nt\">\"fontStyle\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"bold\"</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">},</span>\n</code></pre></div>",
        "id": 411246947,
        "sender_full_name": "Avi Craimer",
        "timestamp": 1704395860
    },
    {
        "content": "<p>At least I can use the option: </p>\n<p><code>set_option autoImplicit false</code> as a toggle to type check for implicit variables being erroneously put in where I didn't intend. </p>\n<p>Thanks for the help.</p>",
        "id": 411249328,
        "sender_full_name": "Avi Craimer",
        "timestamp": 1704396901
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"346046\">Avi Craimer</span> has marked this topic as resolved.</p>",
        "id": 411249343,
        "sender_full_name": "Notification Bot",
        "timestamp": 1704396904
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"346046\">Avi Craimer</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Return.20type.20when.20type.20params.20may.20be.20the.20equal/near/411246947\">said</a>:</p>\n<blockquote>\n<p>These are my current colour theme customizations. The \"variables\" token is set to a bright orange, but this isn't coming through. So it might be an issue with the Lean4 language server not differentiating variables from other identifiers. </p>\n<p><div class=\"codehilite\" data-code-language=\"JSON\"><pre><span></span><code><span class=\"nt\">\"editor.tokenColorCustomizations\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nt\">\"[Cobalt2]\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nt\">\"comments\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"nt\">\"foreground\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"#bbdbf3\"</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"p\">},</span>\n<span class=\"w\">            </span><span class=\"nt\">\"strings\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"#bfceff\"</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"nt\">\"variables\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"#ff625d\"</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"nt\">\"functions\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"#d8f864\"</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"nt\">\"numbers\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"nt\">\"foreground\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"#ff59f7\"</span>\n<span class=\"w\">            </span><span class=\"p\">},</span>\n<span class=\"w\">            </span><span class=\"nt\">\"keywords\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"nt\">\"fontStyle\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"bold\"</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">},</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This is a color theme issue. If you select e.g. the Dark+ theme, they are distinguished. You can inspect the token types by using the \"Developer: Inspect Editor Tokens and Scopes\" command in VS Code and adjust your config for your theme accordingly.</p>",
        "id": 411732742,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1704718381
    }
]