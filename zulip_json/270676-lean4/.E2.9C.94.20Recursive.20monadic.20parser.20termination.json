[
    {
        "content": "<p>Since Parsec is a function in disguise that takes a <code>String.Iterator</code> as parameter, proving its termination should amount to <code>termination_by  parser it =&gt; it.s.endPos - it.i</code> but the parameter is hidden indeed and the compiler complains that the parser \"does not take any (non-fixed) arguments\".<br>\nHow to prove termination of a (mutually) recursive Parsec parser?</p>",
        "id": 433878397,
        "sender_full_name": "Valéry Croizier",
        "timestamp": 1713389667
    },
    {
        "content": "<p>Tricky. Can you give a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 433880481,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1713390718
    },
    {
        "content": "<p>I use the <code>do</code> notation because I did not manage to use the <code>&gt;&gt;</code> and <code>&gt;&gt;=</code> operators that I used to use in Haskell for short monads.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Data.Parsec</span>\n\n<span class=\"kd\">mutual</span>\n  <span class=\"kd\">def</span> <span class=\"n\">parseNat</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Parsec</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n    <span class=\"n\">parseZero</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">parseSucc</span>\n  <span class=\"kd\">def</span> <span class=\"n\">parseZero</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Parsec</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"n\">Lean.Parsec.skipString</span> <span class=\"s2\">\"0\"</span>\n    <span class=\"n\">return</span> <span class=\"n\">Nat.zero</span>\n  <span class=\"kd\">def</span> <span class=\"n\">parseSucc</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Parsec</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"n\">Lean.Parsec.skipString</span> <span class=\"s2\">\"+\"</span>\n    <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">parseNat</span>\n    <span class=\"n\">return</span> <span class=\"n\">n.succ</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 433884967,
        "sender_full_name": "Valéry Croizier",
        "timestamp": 1713393150
    },
    {
        "content": "<p>Hmm, that's tricky, I don't think that's possible in lean: the termination checker would have to see the lambda taking the <code>it</code>, and moreover, see how all the combinators pass it around.</p>\n<p>If you just want to use the parser, but not verify it, just slap a <code>partial</code> in front and all is well.</p>\n<p>I could imagine lean learning the trick that every monadic recursive function definition in an Option-like monad can be accepted without termination proof, but it's not high on the roadmap at the moment.</p>",
        "id": 433988438,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1713427901
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"118155\">Valéry Croizier</span> has marked this topic as resolved.</p>",
        "id": 434229910,
        "sender_full_name": "Notification Bot",
        "timestamp": 1713470587
    }
]