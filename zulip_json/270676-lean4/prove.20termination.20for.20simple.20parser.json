[
    {
        "content": "<p>I have just translated a simple add-mul parser in Haskell to Lean4.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">string</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"n\">Char</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">Parser</span> <span class=\"o\">:=</span> <span class=\"n\">StateT</span> <span class=\"n\">string</span> <span class=\"n\">Option</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">parseOK</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Char</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Parser</span> <span class=\"n\">Char</span> <span class=\"o\">:=</span>\n  <span class=\"k\">do</span> <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">get</span>\n     <span class=\"k\">match</span> <span class=\"n\">s</span> <span class=\"k\">with</span>\n     <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">failure</span>\n     <span class=\"bp\">|</span> <span class=\"n\">c</span><span class=\"o\">::</span><span class=\"n\">cs</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"n\">c</span> <span class=\"k\">then</span> <span class=\"n\">set</span> <span class=\"n\">cs</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">c</span> <span class=\"k\">else</span> <span class=\"n\">failure</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">parseChar</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Parser</span> <span class=\"n\">Char</span> <span class=\"o\">:=</span>\n  <span class=\"n\">parseOK</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">==</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">parseString</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"bp\">→</span> <span class=\"n\">Parser</span> <span class=\"n\">string</span> <span class=\"o\">:=</span> <span class=\"n\">List.mapM</span> <span class=\"n\">parseChar</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">parseNat</span> <span class=\"o\">:</span> <span class=\"n\">Parser</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">do</span> <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">get</span>\n     <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">s.takeWhile</span> <span class=\"n\">Char.isDigit</span>\n     <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">s.drop</span> <span class=\"n\">n.length</span><span class=\"o\">)</span>\n     <span class=\"o\">(</span><span class=\"n\">String.mk</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toNat</span><span class=\"bp\">?</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Exp</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Exp</span>\n<span class=\"bp\">|</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span> <span class=\"bp\">→</span> <span class=\"n\">Exp</span> <span class=\"bp\">→</span> <span class=\"n\">Exp</span>\n<span class=\"bp\">|</span> <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span> <span class=\"bp\">→</span> <span class=\"n\">Exp</span> <span class=\"bp\">→</span> <span class=\"n\">Exp</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Exp.toString</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span> <span class=\"bp\">→</span> <span class=\"n\">String</span>\n<span class=\"bp\">|</span> <span class=\"n\">Exp.num</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n.repr</span>\n<span class=\"bp\">|</span> <span class=\"n\">Exp.add</span> <span class=\"n\">e</span> <span class=\"n\">e'</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"(\"</span> <span class=\"bp\">++</span> <span class=\"n\">e.toString</span> <span class=\"bp\">++</span> <span class=\"s2\">\" + \"</span> <span class=\"bp\">++</span> <span class=\"n\">e'.toString</span> <span class=\"bp\">++</span> <span class=\"s2\">\")\"</span>\n<span class=\"bp\">|</span> <span class=\"n\">Exp.mul</span> <span class=\"n\">e</span> <span class=\"n\">e'</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"(\"</span> <span class=\"bp\">++</span> <span class=\"n\">e.toString</span> <span class=\"bp\">++</span> <span class=\"s2\">\" * \"</span> <span class=\"bp\">++</span> <span class=\"n\">e'.toString</span> <span class=\"bp\">++</span> <span class=\"s2\">\")\"</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">eval</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">Exp.num</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">Exp.add</span> <span class=\"n\">e</span> <span class=\"n\">e'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">eval</span> <span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"n\">eval</span> <span class=\"n\">e'</span>\n<span class=\"bp\">|</span> <span class=\"n\">Exp.mul</span> <span class=\"n\">e</span> <span class=\"n\">e'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">eval</span> <span class=\"n\">e</span> <span class=\"bp\">*</span> <span class=\"n\">eval</span> <span class=\"n\">e'</span>\n\n<span class=\"kd\">mutual</span>\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">parseExp</span> <span class=\"o\">:</span> <span class=\"n\">Parser</span> <span class=\"n\">Exp</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">parseMul</span>\n  <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"bp\">←</span> <span class=\"n\">parseExp'</span>\n  <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">parseExp'</span> <span class=\"o\">:</span> <span class=\"n\">Parser</span> <span class=\"o\">(</span><span class=\"n\">Exp</span> <span class=\"bp\">→</span> <span class=\"n\">Exp</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"bp\">←</span> <span class=\"n\">parseChar</span> <span class=\"sc\">'+'</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">parseMul</span>\n  <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"bp\">←</span> <span class=\"n\">parseExp'</span>\n  <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">e</span> <span class=\"bp\">↦</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">Exp.add</span> <span class=\"n\">e</span> <span class=\"n\">a</span><span class=\"o\">)))</span>\n  <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">id</span>\n\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">parseMul</span> <span class=\"o\">:</span> <span class=\"n\">Parser</span> <span class=\"n\">Exp</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">parseNum</span>\n  <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"bp\">←</span> <span class=\"n\">parseMul'</span>\n  <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">parseMul'</span> <span class=\"o\">:</span> <span class=\"n\">Parser</span> <span class=\"o\">(</span><span class=\"n\">Exp</span> <span class=\"bp\">→</span> <span class=\"n\">Exp</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"bp\">←</span> <span class=\"n\">parseChar</span> <span class=\"sc\">'*'</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">parseNum</span>\n  <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"bp\">←</span> <span class=\"n\">parseMul'</span>\n  <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">e</span> <span class=\"bp\">↦</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">Exp.mul</span> <span class=\"n\">e</span> <span class=\"n\">a</span><span class=\"o\">)))</span>\n  <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">id</span>\n\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">parseNum</span> <span class=\"o\">:</span> <span class=\"n\">Parser</span> <span class=\"n\">Exp</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"bp\">←</span> <span class=\"n\">parseChar</span> <span class=\"sc\">'('</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">parseExp</span>\n  <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"bp\">←</span> <span class=\"n\">parseChar</span> <span class=\"sc\">')'</span>\n  <span class=\"n\">pure</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">parseNat.map</span> <span class=\"n\">Exp.num</span>\n<span class=\"kd\">end</span>\n\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">parseExp</span> <span class=\"s2\">\"(1+2*3)*5+8Hello, World!\"</span><span class=\"bp\">.</span><span class=\"n\">data</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">IO.println</span> <span class=\"s2\">\"parse error\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{e.toString} = {eval e}, remaining: {String.mk s}\"</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">main</span>\n</code></pre></div>\n<p>But I have difficulty proving the termination for the mutual defined functions. (I also want help to improve the conciseness and readability of this code. Any idea is welcome.)</p>",
        "id": 435304510,
        "sender_full_name": "Jiatong Yang",
        "timestamp": 1714015217
    },
    {
        "content": "<p>Showing the termination of parser combinators are hard. For example, when writing left-recursive syntaxes, one would write some parser definition won't make any progress so it never terminates.</p>\n<p>Some methods can be used for writing total parsers:</p>\n<ul>\n<li><a href=\"https://gallais.github.io/pdf/agdarsec18.pdf\">https://gallais.github.io/pdf/agdarsec18.pdf</a>  , Total Parser Combinators in dependent typed language</li>\n<li>Idris 2 tracks the termination of parser by a boolean value in type, and <code>sorry</code> (<code>believe_me</code>) on basic building blocks</li>\n<li>give some fuels to the parser, restrict the maximum recursion times</li>\n</ul>",
        "id": 435317082,
        "sender_full_name": "Alissa Tung",
        "timestamp": 1714024572
    }
]