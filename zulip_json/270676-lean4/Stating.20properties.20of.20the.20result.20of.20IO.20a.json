[
    {
        "content": "<p>Say I have an IO value which (1) prints some stuff and (2) returns a deterministic value.  How do I write a theorem about that returned value?  Here is an example, where I don't know how to write the theorem statement (I expect the proof will be easy once I can do that):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">loud_seven</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">IO.println</span> <span class=\"s2\">\"yo\"</span>\n  <span class=\"n\">pure</span> <span class=\"mi\">7</span>\n\n<span class=\"sd\">/-- How do we write the theorem that the output is always 7? -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">loud_seven_eq</span> <span class=\"o\">:</span> <span class=\"n\">loud_seven</span> <span class=\"bp\">=</span> <span class=\"n\">pure</span> <span class=\"mi\">7</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>  <span class=\"c1\">-- This is false, presumably.  What should I say instead?</span>\n</code></pre></div>",
        "id": 423988663,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1709202077
    },
    {
        "content": "<p>If <code>IO a</code> had an accessor that returned the value I could use that, but of course it doesn't have that.  What I want is something like \"for all possible values x that could be returned if the actual IO stuff is byzantine, some property of x holds\".</p>",
        "id": 423988855,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1709202142
    },
    {
        "content": "<p>You don't prove things about IO basically. What you can do though is write the functions that process whatever came from IO in a pure (or also non-IO-monadic) fashion and then write proofs about these non IO functions.</p>",
        "id": 423989407,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1709202356
    },
    {
        "content": "<p>Hmm, if I unpack the definitions of things they all seem transparent, so I'm not sure I buy that as the answer.  E.g., IO a is just a function that turns IO.RealWorld into IO.RealWorld * a.</p>",
        "id": 423989691,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1709202460
    },
    {
        "content": "<p>E.g., this definition type checks:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">IO.range</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">w</span> <span class=\"n\">w'</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">EStateM.Result.ok</span> <span class=\"n\">x</span> <span class=\"n\">w'</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 423990012,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1709202595
    },
    {
        "content": "<p>First things first no its not, IO is also capable of throwing errors so the proper type is <code>IO.RealWorld -&gt; EStateM.Result IO.Error IO.RealWorld a</code>. Which is also the reason that your theorem above is not provable, you cannot know if <code>IO.println</code> will throw an error or not (it's bound by FFI after all) so there is no way of knowing if youre <code>pure 7</code> would ever be reached.</p>",
        "id": 423990125,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1709202629
    },
    {
        "content": "<p>Yes, that theorem statement is nonsense, which is why I'm looking for the right statement.  I'll try to write it down in terms of <code>IO.range</code>.</p>",
        "id": 423990241,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1709202674
    },
    {
        "content": "<p>I think the right theorem statement (accounting for errors) is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">loud_seven_eq_seven</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">loud_seven.range</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">7</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">w</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">⟩</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 423990505,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1709202771
    },
    {
        "content": "<p>Right but you can never find out if there even exists an <code>x</code> that is a member of that statement so what use is it?</p>",
        "id": 423990664,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1709202839
    },
    {
        "content": "<p>I can run it and see if it completes empirically, and know that if it does the result is correct.  This seems useful.</p>",
        "id": 423990771,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1709202867
    },
    {
        "content": "<p>The application here is proving that a program that produces images never produces an incorrect image.</p>",
        "id": 423990895,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1709202910
    },
    {
        "content": "<p>Another example is a proof-by-reflection routine that uses an external solver, but then runs a fast proof-by-reflection check of the results.  Here the result is wildly dependent on the result of the external call, but we can still write down the theorem that the reflection tactic never makes a mistake during postprocessing.</p>",
        "id": 423991294,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1709203040
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"514145\">Geoffrey Irving</span> <a href=\"#narrow/stream/270676-lean4/topic/Stating.20properties.20of.20the.20result.20of.20IO.20a/near/423991294\">said</a>:</p>\n<blockquote>\n<p>Another example is a proof-by-reflection routine that uses an external solver, but then runs a fast proof-by-reflection check of the results.  Here the result is wildly dependent on the result of the external call, but we can still write down the theorem that the reflection tactic never makes a mistake during postprocessing.</p>\n</blockquote>\n<p>Right but that would still require you to then run IO in a pure context (in this case a proof) which you are not supposed to do. The proper way to go here is as we do it in <a href=\"https://github.com/leanprover/leansat\">https://github.com/leanprover/leansat</a>. We have a pure function that verifies a SAT solver proof certificate with a soundness proof. Then we run the external prover during the tactic and produce a proof term that contains the pure version of its output. Then the certificate checker can be run on that output during typechecking without any need for IO interaction remaining.</p>",
        "id": 423991853,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1709203221
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/Stating.20properties.20of.20the.20result.20of.20IO.20a/near/423989407\">said</a>:</p>\n<blockquote>\n<p>You don't prove things about IO basically. What you can do though is write the functions that process whatever came from IO in a pure (or also non-IO-monadic) fashion and then write proofs about these non IO functions.</p>\n</blockquote>\n<p>which is exactly the principle described here, also know as \"functional core imperative (aka monadic) shell\"</p>",
        "id": 423992210,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1709203347
    },
    {
        "content": "<p>I'm writing a program which produces images, and they're expensive to produce so I want to print a progress meter while I'm doing this.  I'd like to prove this program is correct, and given the above it seems those proofs are entirely within reach.  So I don't see the sense in which I'm \"not supposed to do this\".</p>",
        "id": 423992232,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1709203353
    },
    {
        "content": "<p>In particular, the parallel code that wants to spit out progress reports is stitching different bits of the image together, and I don't see why it would be invalid to prove this stitching correct even if it is interleaved with printing.</p>",
        "id": 423992460,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1709203408
    },
    {
        "content": "<p>The difference in the SAT case is that we’re running an NP-like computation where the final check is fast.  Here there is no available final check: it’s just an expensive computation that doesn’t produce a certificate but has a proof a proof of correctness.  So the progress meter requires me to interleave IO with the trusted part.</p>",
        "id": 423993532,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1709203761
    },
    {
        "content": "<p>One option is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">loud_seven</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">//</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">7</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">IO.println</span> <span class=\"s2\">\"yo\"</span>\n  <span class=\"n\">pure</span> <span class=\"o\">⟨</span><span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 423993559,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709203770
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=SatisfiesM#doc\">docs#SatisfiesM</a> is similar, though I think won't help you much here</p>",
        "id": 423995123,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709204294
    },
    {
        "content": "<p><code>SatisfiesM</code> seems like exactly the right thing!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">loud_seven</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">IO.println</span> <span class=\"s2\">\"yo\"</span>\n  <span class=\"n\">pure</span> <span class=\"mi\">7</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">loud_seven_satisfies</span> <span class=\"o\">:</span> <span class=\"n\">SatisfiesM</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"n\">loud_seven</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">loud_seven</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">SatisfiesM.bind_pre</span>\n  <span class=\"n\">apply</span> <span class=\"n\">SatisfiesM.of_true</span>\n  <span class=\"n\">intro</span> <span class=\"n\">_</span>\n  <span class=\"n\">exact</span> <span class=\"n\">SatisfiesM.pure</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 424002484,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1709207154
    },
    {
        "content": "<p>That seems complicated compared to just saying something about the pure part of the code... And it doesn't tell you anything additional (because there is nothing to tell).</p>",
        "id": 424146195,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709257842
    },
    {
        "content": "<p>In this case the pure and monadic parts are well separated.  In the original situation they are interleaved, and also combined with parallelism.  So it does give me some additional clarity.</p>",
        "id": 424175064,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1709279148
    },
    {
        "content": "<p>Another idea is to be generic over the monad, and use a pure-functional monad for proving and IO for printing. This is kind of similar to the algebraic effects approach, or free monads, where you separate the code itself from the interpretation of the \"print\" function. Then you can e.g. run it in the <code>Id</code> monad and just strip out all the prints that way</p>",
        "id": 424370225,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709360715
    },
    {
        "content": "<p>You could even run it in a mock-print monad if you wanted to prove that specific values are printed</p>",
        "id": 424370248,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709360761
    },
    {
        "content": "<p>Ah, the generic monad is a great idea!  I’ll go with that.</p>",
        "id": 424392769,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1709369475
    },
    {
        "content": "<p>Also, just in case you weren't aware and don't need super high quality printing, you can use <code>dbg_trace</code> even in pure code</p>",
        "id": 424393164,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709369705
    }
]