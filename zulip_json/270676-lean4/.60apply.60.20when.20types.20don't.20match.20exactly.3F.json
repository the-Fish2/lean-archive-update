[
    {
        "content": "<p>I'm wondering if there's a version of <code>apply</code> that works when the types don't match exactly, that generates as extra goals the equalities that must be true for the given lemma to be applied.</p>\n<p>I'm thinking of something like <code>congr!</code>, which traverses the terms and lets you know what you have to prove for them to be equal.</p>\n<p>I'm in a situation where I have a lemma that's <code>f a b c = d</code> and I'm trying to prove <code>f a b c = e</code>, and for some reason it's not letting me apply Eq.trans. I'm assuming there's an implicit argument somewhere in <code>f</code> that's different, so what I'd love is a macro that tells me what's different and makes a goal of what I need to prove to show they're actually the same.</p>\n<p>Basically I want a saner alternative to sorting through the whole  output of <code>set_option pp.explicit true</code></p>",
        "id": 439876821,
        "sender_full_name": "Joey Eremondi",
        "timestamp": 1716316011
    },
    {
        "content": "<p>Do you know about <code>convert</code>?</p>",
        "id": 439877305,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1716316195
    },
    {
        "content": "<p>I know about it but am a bit mystified by it. But my understanding is that it gives me fine-grained control for rewriting goals. Where I think what I want is the opposite, I just want the machine to tell me what I need to rewrite and generate it as a goal. But maybe covert can do that?</p>",
        "id": 439877514,
        "sender_full_name": "Joey Eremondi",
        "timestamp": 1716316267
    },
    {
        "content": "<p><code>convert</code>’s job is exactly to create goals for equality that are not true by definition.</p>",
        "id": 439878110,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1716316477
    },
    {
        "content": "<p>Do you have a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> that we could look at to help you better?</p>",
        "id": 439878168,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1716316496
    },
    {
        "content": "<p>Ohhhhh okay, I'll need to read more about it then</p>",
        "id": 439878184,
        "sender_full_name": "Joey Eremondi",
        "timestamp": 1716316502
    },
    {
        "content": "<p>I'll try for a MWE</p>",
        "id": 439878218,
        "sender_full_name": "Joey Eremondi",
        "timestamp": 1716316516
    },
    {
        "content": "<p>If the type of the goal is <code>T</code> and you have <code>v : T'</code>, then what <code>convert v</code> does is reduce this to the goal <code>T = T'</code> and then run <code>congr!</code>.</p>",
        "id": 439890738,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1716320644
    },
    {
        "content": "<p>It might be <code>T' = T</code>, I can never remember. But in any case, <code>convert ← v</code> uses the other one of whichever of the two it normally uses.</p>",
        "id": 439890894,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1716320707
    },
    {
        "content": "<p>Ahhhh I'm dumb, I was thinking of <code>calc</code>, not convert. You're right that convert seems to be exactly what I want, thanks both</p>",
        "id": 440028412,
        "sender_full_name": "Joey Eremondi",
        "timestamp": 1716361695
    }
]