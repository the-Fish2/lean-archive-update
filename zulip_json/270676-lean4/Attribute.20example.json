[
    {
        "content": "<p>Does anyone has an example of creating an attribute can be local or global and take an optional priority parameter?</p>",
        "id": 423089779,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708720230
    },
    {
        "content": "<p>I know about <code>register_label_attr</code> from Std but it cannot be used with <code>local</code> and cannot take parameters. So I’m looking for a slightly more sophisticated gadget.</p>",
        "id": 423089958,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708720322
    },
    {
        "content": "<p>I am really confused by the attribute system. Is there a way to define an attribute with parameters that would be stored and modified in any file? It seems every variant has limitations like being added only in the file defining the declaration or modifications are not persisted across files.</p>",
        "id": 424062205,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709225072
    },
    {
        "content": "<p>There might be an easier way but you can do it with <code>SimpleScopedEnvExtension</code></p>\n<p>Test file:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Doodle.MyScopedAttr</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">hasMyAttr</span> <span class=\"bp\">``</span><span class=\"n\">id</span> <span class=\"c1\">-- false</span>\n\n<span class=\"c1\">-- global</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">myAttr</span><span class=\"o\">]</span> <span class=\"n\">id</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">hasMyAttr</span> <span class=\"bp\">``</span><span class=\"n\">id</span> <span class=\"c1\">-- true</span>\n\n\n<span class=\"kn\">namespace</span> <span class=\"n\">TestScope</span>\n\n<span class=\"c1\">-- local attribute</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">local</span> <span class=\"n\">myAttr</span><span class=\"o\">]</span> <span class=\"n\">Nat</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">hasMyAttr</span> <span class=\"bp\">``</span><span class=\"n\">Nat</span> <span class=\"c1\">-- true</span>\n\n<span class=\"kd\">end</span>  <span class=\"n\">TestScope</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">hasMyAttr</span> <span class=\"bp\">``</span><span class=\"n\">Nat</span> <span class=\"c1\">-- false</span>\n</code></pre></div>\n<p><code>MyScopedAttr.lean</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">:=</span><span class=\"n\">my_attr</span><span class=\"o\">)</span> <span class=\"s2\">\"myAttr\"</span> <span class=\"o\">(</span><span class=\"n\">prio</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">attr</span>\n\n<span class=\"n\">initialize</span> <span class=\"n\">myScopedAttrExt</span> <span class=\"o\">:</span> <span class=\"n\">SimpleScopedEnvExtension</span> <span class=\"n\">Name</span> <span class=\"n\">NameSet</span> <span class=\"bp\">←</span>\n  <span class=\"n\">registerSimpleScopedEnvExtension</span> <span class=\"o\">{</span>\n    <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">decl_name</span><span class=\"bp\">%</span>\n    <span class=\"n\">initial</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n    <span class=\"n\">addEntry</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">set</span> <span class=\"n\">name</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">set.insert</span> <span class=\"n\">name</span>\n  <span class=\"o\">}</span>\n\n<span class=\"n\">initialize</span> <span class=\"n\">myScopedAttr</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">←</span>\n  <span class=\"n\">registerBuiltinAttribute</span> <span class=\"o\">{</span>\n    <span class=\"n\">name</span>  <span class=\"o\">:=</span> <span class=\"bp\">``</span><span class=\"n\">my_attr</span>\n    <span class=\"n\">descr</span> <span class=\"o\">:=</span> <span class=\"s2\">\"\"</span>\n    <span class=\"n\">applicationTime</span> <span class=\"o\">:=</span> <span class=\"n\">AttributeApplicationTime.afterCompilation</span>\n    <span class=\"n\">add</span>   <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">declName</span> <span class=\"n\">stx</span> <span class=\"n\">attrKind</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"n\">myScopedAttrExt.add</span> <span class=\"n\">declName</span> <span class=\"n\">attrKind</span>\n    <span class=\"n\">erase</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_declqName</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">pure</span> <span class=\"o\">()</span>\n  <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">hasMyAttr</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CoreM</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">myScopedAttrExt.getState</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span>\n  <span class=\"n\">return</span> <span class=\"n\">a.contains</span> <span class=\"n\">name</span>\n</code></pre></div>",
        "id": 424066008,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1709226199
    },
    {
        "content": "<p>Then in the function <code>add</code> inside <code>registerBuiltinAttribute</code> you can extract the priority information from <code>stx</code> which gives you the syntax of the attribute. </p>\n<p>You will of course also need to modify the <code>SimpleScopedEnvExtension Name NameSet</code> such that you can store the priority information e.g. <code>SimpleScopedEnvExtension (Name×Nat) (NameMap Nat)</code></p>",
        "id": 424067271,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1709226579
    },
    {
        "content": "<p>Thanks Tomas. Can you actually remove the attribute later with this example?</p>",
        "id": 424067629,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709226691
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/Attribute.20example/near/424062205\">said</a>:</p>\n<blockquote>\n<p>I am really confused by the attribute system. Is there a way to define an attribute with parameters that would be stored and modified in any file? It seems every variant has limitations like being added only in the file defining the declaration or modifications are not persisted across files.</p>\n</blockquote>\n<p>Yeah I also do not understand the limitation that you can add the attribute only in the file where you declare the function. For that reason I just use the above setup.</p>",
        "id": 424067700,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1709226715
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/Attribute.20example/near/424067629\">said</a>:</p>\n<blockquote>\n<p>Thanks Tomas. Can you actually remove the attribute later with this example?</p>\n</blockquote>\n<p>Sure, you just need to implement the erase function.</p>",
        "id": 424067818,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1709226742
    },
    {
        "content": "<p>I would have no idea how to do that. But I also realize that maybe my question doesn’t really make sense. It isn’t clear what would be the expected behavior if you import one file adding the attribute and one file removing it. I guess this is why the simp attribute does not allow this.</p>",
        "id": 424068265,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709226893
    },
    {
        "content": "<p>What is the syntax to remove attribute? <code>attribute [-myAttr] Nat</code> does not work.</p>",
        "id": 424068745,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1709227035
    },
    {
        "content": "<p>This is meant to work.</p>",
        "id": 424068950,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709227093
    },
    {
        "content": "<p>Ohh <code>attribute [-my_attr] Nat</code> works. There is the syntax of an attribute <code>syntax (name:=my_attr) \"myAttr\" (prio)?</code> and its name <code>my_attr</code>. I guess the convention is to have <code>myAttr=my_attr</code>.</p>",
        "id": 424069301,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1709227203
    },
    {
        "content": "<p>Revised version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span>\n\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">:=</span><span class=\"n\">myAttr</span><span class=\"o\">)</span> <span class=\"s2\">\"myAttr\"</span> <span class=\"o\">(</span><span class=\"n\">prio</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">attr</span>\n\n<span class=\"n\">initialize</span> <span class=\"n\">myScopedAttrExt</span> <span class=\"o\">:</span> <span class=\"n\">SimpleScopedEnvExtension</span> <span class=\"n\">Name</span> <span class=\"n\">NameSet</span> <span class=\"bp\">←</span>\n  <span class=\"n\">registerSimpleScopedEnvExtension</span> <span class=\"o\">{</span>\n    <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">decl_name</span><span class=\"bp\">%</span>\n    <span class=\"n\">initial</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n    <span class=\"n\">addEntry</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">set</span> <span class=\"n\">name</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">set.insert</span> <span class=\"n\">name</span>\n  <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">hasMyAttr</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CoreM</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">myScopedAttrExt.getState</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span>\n  <span class=\"n\">return</span> <span class=\"n\">a.contains</span> <span class=\"n\">name</span>\n\n\n<span class=\"n\">initialize</span> <span class=\"n\">myScopedAttr</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">←</span>\n  <span class=\"n\">registerBuiltinAttribute</span> <span class=\"o\">{</span>\n    <span class=\"n\">name</span>  <span class=\"o\">:=</span> <span class=\"bp\">``</span><span class=\"n\">myAttr</span>\n    <span class=\"n\">descr</span> <span class=\"o\">:=</span> <span class=\"s2\">\"\"</span>\n    <span class=\"n\">applicationTime</span> <span class=\"o\">:=</span> <span class=\"n\">AttributeApplicationTime.afterCompilation</span>\n    <span class=\"n\">add</span>   <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">declName</span> <span class=\"n\">stx</span> <span class=\"n\">attrKind</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"n\">myScopedAttrExt.add</span> <span class=\"n\">declName</span> <span class=\"n\">attrKind</span>\n    <span class=\"n\">erase</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">declName</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"n\">unless</span> <span class=\"bp\">←</span> <span class=\"n\">hasMyAttr</span> <span class=\"n\">declName</span> <span class=\"k\">do</span>\n        <span class=\"n\">throwError</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{declName} does not have `myAttr` attribute!\"</span>\n\n      <span class=\"n\">modifyEnv</span> <span class=\"k\">fun</span> <span class=\"n\">env</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">myScopedAttrExt.modifyState</span> <span class=\"n\">env</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">s.erase</span> <span class=\"n\">declName</span>\n  <span class=\"o\">}</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Doodle.MyScopedAttr</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">hasMyAttr</span> <span class=\"bp\">``</span><span class=\"n\">id</span> <span class=\"c1\">-- false</span>\n\n<span class=\"c1\">-- global</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">myAttr</span><span class=\"o\">]</span> <span class=\"n\">id</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">hasMyAttr</span> <span class=\"bp\">``</span><span class=\"n\">id</span> <span class=\"c1\">-- true</span>\n\n\n<span class=\"kn\">namespace</span> <span class=\"n\">TestScope</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">myAttr</span><span class=\"o\">]</span> <span class=\"n\">id</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">hasMyAttr</span> <span class=\"bp\">``</span><span class=\"n\">id</span> <span class=\"c1\">-- false</span>\n\n<span class=\"c1\">-- local attribute</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">local</span> <span class=\"n\">myAttr</span> <span class=\"n\">mid</span><span class=\"o\">]</span> <span class=\"n\">Nat</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">hasMyAttr</span> <span class=\"bp\">``</span><span class=\"n\">Nat</span> <span class=\"c1\">-- true</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">myAttr</span><span class=\"o\">]</span> <span class=\"n\">Nat</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">hasMyAttr</span> <span class=\"bp\">``</span><span class=\"n\">Nat</span> <span class=\"c1\">-- false</span>\n\n<span class=\"kd\">end</span>  <span class=\"n\">TestScope</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">hasMyAttr</span> <span class=\"bp\">``</span><span class=\"n\">Nat</span> <span class=\"c1\">-- false</span>\n</code></pre></div>",
        "id": 424069611,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1709227318
    },
    {
        "content": "<p>Thanks a lot!</p>",
        "id": 424072896,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709228259
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/Attribute.20example/near/424068265\">said</a>:</p>\n<blockquote>\n<p>It isn’t clear what would be the expected behavior if you import one file adding the attribute and one file removing it. I guess this is why the simp attribute does not allow this.</p>\n</blockquote>\n<p>That's right. As a result, erasing only works locally, i.e. <code>attribute [-attr] foo</code> only removes <code>attr</code> from <code>foo</code> for the remainder of the current file.</p>",
        "id": 424080653,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1709230740
    }
]