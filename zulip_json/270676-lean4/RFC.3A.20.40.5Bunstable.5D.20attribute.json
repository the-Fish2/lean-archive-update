[
    {
        "content": "<p>This isn't yet at the point of a real RFC, I'm still thinking through the consequences, but when designing APIs for esp. Std and Init I think it comes up sometimes that we have some API which we expect to change in the near future, and would like to limit the impact on downstream code while also making our jobs easier when it comes time to bump, by explicitly marking the API as \"unstable\".</p>\n<p>As far as concrete behavior, it would behave mostly the same as <code>@[deprecated]</code>: any use of the unstable declaration would produce a warning that you can disable with <code>set_option linter.unstable false</code>. It just wouldn't come with any replacement instructions.</p>\n<p>Lean is of course quite unstable at many levels, so there will certainly be things changing which aren't marked as <code>@[unstable]</code>. But not all instability is created equal and this might at least help better set expectations and document progress on a feature.</p>",
        "id": 432873910,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712917147
    },
    {
        "content": "<p>I'd also be interested to hear if people can think of applications of this in mathlib</p>",
        "id": 432874189,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712917273
    },
    {
        "content": "<p>First thoughts: if we use this in Mathlib, users of unstable code will use it anyway, since in math there is often not an easy alternative. I guess they get a little heads up \"this code is going to break at some point\", but I'm not convinced that is worth the (small) extra maintenance burden of marking things as unstable.</p>",
        "id": 432875245,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1712917751
    },
    {
        "content": "<p>yes, I don't really expect it to stop people from using it. But I do think it helps shift the burden a little bit (i.e. \"don't come complaining to me when it breaks\"), and sometimes it is possible to hold off on using it until the better version comes</p>",
        "id": 432875657,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712917883
    },
    {
        "content": "<p>I also don't think we should necessarily apply it religiously. At least in mathlib, I don't think we are very good estimators of when something will be changed in the future in most cases</p>",
        "id": 432875903,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712917979
    },
    {
        "content": "<p>so it would be restricted mainly to things where there is an active project on its way to replace it</p>",
        "id": 432875953,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712918002
    },
    {
        "content": "<blockquote>\n<p>that is worth the (small) extra maintenance burden of marking things as unstable.</p>\n</blockquote>\n<p>I would say the maintenance burden of <em>marking</em> a definition as unstable is almost negative: it's a way to signal to everyone downstream \"hey I'm working here\" with a little less force than <code>private</code>. However I think there is some burden associated with <em>using</em> unstable definitions since you have to turn off the linter, and then remember to remove those <code>set_option</code>s later</p>",
        "id": 432876310,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712918167
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/RFC.3A.20.40.5Bunstable.5D.20attribute/near/432875903\">said</a>:</p>\n<blockquote>\n<p>At least in mathlib, I don't think we are very good estimators of when something will be changed in the future in most cases</p>\n</blockquote>\n<p>\"Is it a leaf file or almost a leaf file\" might be a decent estimator...? Of course, we refactor things in core Mathlib files quite frequently as well, but I think we've been pretty good recently at deprecating those changes (and we cannot mark everything as unstable :-) )<br>\nI'm not against having or trying it though.</p>",
        "id": 432876639,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1712918337
    }
]