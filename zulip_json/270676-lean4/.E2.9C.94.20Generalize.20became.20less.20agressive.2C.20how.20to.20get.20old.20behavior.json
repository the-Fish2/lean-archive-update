[
    {
        "content": "<p>After <a href=\"https://github.com/leanprover/lean4/commit/2158c9e96f6f33fb0d263e0fa16413b359f7e935\">https://github.com/leanprover/lean4/commit/2158c9e96f6f33fb0d263e0fa16413b359f7e935</a> <code>generalize</code> became less aggressive, which broke some of our proofs. I am currently trying to update our lean version, and am wondering (a) how to restore the aggressive generalize behavior (is there a config option?) to get our code working again and (b) what is the canonical way to control unfolding. The patch states:</p>\n<blockquote>\n<p>That wasn't a systematic review of generalize though. It's possible changing the transparency settings would break things, but in my opinion it would be better if generalize weren't used for unfolding things.</p>\n</blockquote>\n<p>Which tactic can I use for unfolding, except the manual <code>unfold</code> tactic?</p>",
        "id": 425820962,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1710119408
    },
    {
        "content": "<p>There's no exposed configuration option for the transparency, but it's possible to create a new tactic that uses a different transparency setting.</p>\n<p>This is from copy/pasting the core <code>generalize</code> tactic, to create <code>generalize!</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"n\">Meta</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">generalize</span><span class=\"bp\">!</span><span class=\"o\">)</span> <span class=\"s2\">\"generalize! \"</span> <span class=\"n\">Parser.Tactic.generalizeArg</span><span class=\"o\">,</span><span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">Parser.Tactic.location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">tactic</span> <span class=\"n\">generalize</span><span class=\"bp\">!</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">evalGeneralize</span><span class=\"bp\">!</span> <span class=\"o\">:</span> <span class=\"n\">Tactic</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">let</span> <span class=\"n\">transparency</span> <span class=\"o\">:=</span> <span class=\"n\">TransparencyMode.default</span>\n  <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">xIdents</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">hIdents</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n    <span class=\"n\">for</span> <span class=\"n\">arg</span> <span class=\"k\">in</span> <span class=\"n\">stx</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">getSepArgs</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">hName</span><span class=\"bp\">?</span> <span class=\"bp\">←</span> <span class=\"k\">if</span> <span class=\"n\">arg</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">isNone</span> <span class=\"k\">then</span>\n        <span class=\"n\">pure</span> <span class=\"n\">none</span>\n      <span class=\"k\">else</span>\n        <span class=\"n\">hIdents</span> <span class=\"o\">:=</span> <span class=\"n\">hIdents.push</span> <span class=\"n\">arg</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">][</span><span class=\"mi\">0</span><span class=\"o\">]</span>\n        <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">arg</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">][</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">getId</span><span class=\"o\">)</span>\n      <span class=\"k\">let</span> <span class=\"n\">expr</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">arg</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"n\">none</span>\n      <span class=\"n\">xIdents</span> <span class=\"o\">:=</span> <span class=\"n\">xIdents.push</span> <span class=\"n\">arg</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">]</span>\n      <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"n\">args.push</span> <span class=\"o\">{</span> <span class=\"n\">hName</span><span class=\"bp\">?</span><span class=\"o\">,</span> <span class=\"n\">expr</span><span class=\"o\">,</span> <span class=\"n\">xName</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"n\">arg</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">getId</span> <span class=\"o\">:</span> <span class=\"n\">GeneralizeArg</span> <span class=\"o\">}</span>\n    <span class=\"k\">let</span> <span class=\"n\">hyps</span> <span class=\"bp\">←</span> <span class=\"k\">match</span> <span class=\"n\">expandOptLocation</span> <span class=\"n\">stx</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">targets</span> <span class=\"n\">hyps</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">getFVarIds</span> <span class=\"n\">hyps</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">wildcard</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getLCtx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getFVarIds</span>\n    <span class=\"k\">let</span> <span class=\"n\">mvarId</span> <span class=\"bp\">←</span> <span class=\"n\">getMainGoal</span>\n    <span class=\"n\">mvarId.withContext</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">newVars</span><span class=\"o\">,</span> <span class=\"n\">mvarId</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">mvarId.generalizeHyp</span> <span class=\"n\">args</span> <span class=\"n\">hyps</span> <span class=\"o\">(</span><span class=\"n\">transparency</span> <span class=\"o\">:=</span> <span class=\"n\">transparency</span><span class=\"o\">)</span>\n      <span class=\"n\">mvarId.withContext</span> <span class=\"k\">do</span>\n        <span class=\"n\">for</span> <span class=\"n\">v</span> <span class=\"k\">in</span> <span class=\"n\">newVars</span><span class=\"o\">,</span> <span class=\"n\">id</span> <span class=\"k\">in</span> <span class=\"n\">xIdents</span> <span class=\"bp\">++</span> <span class=\"n\">hIdents</span> <span class=\"k\">do</span>\n          <span class=\"n\">Term.addLocalVarInfo</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">fvar</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n        <span class=\"n\">replaceMainGoal</span> <span class=\"o\">[</span><span class=\"n\">mvarId</span><span class=\"o\">]</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 425822960,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710121338
    },
    {
        "content": "<p>Would you be willing to make some example test cases to show how a more aggressive <code>generalize</code> is useful to you? That could help justify extending the syntax to <code>generalize</code> to expose the configuration option.</p>",
        "id": 425823069,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710121457
    },
    {
        "content": "<p>Wow, thank you for the fast turnaround. This indeed works and is sufficient to show that the changed behavior of <code>generalize</code> broke our build. The full repo is at: <a href=\"https://github.com/opencompl/ssa/pull/193\">https://github.com/opencompl/ssa/pull/193</a></p>\n<p>As you can see in (SSA/Core/Tactic.lean) our code uses relatively large simp lemmas which are fragile and likely incomplete. <code>generalize</code> unfolded the parts that we did not explicitly simplify. I will need to think for a little while to see if I can find a reduced testcase and if the solution in our codebase indeed requires <code>generalize!</code>or rather use finding better ways to manage our simp lemmas.</p>\n<p>In case you are interested to play with our full codebase, the file to compile is SSA/Projects/InstCombine/AliveAutoGenerated.lean.</p>",
        "id": 425825644,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1710123483
    },
    {
        "content": "<p>We are currently looking into this, but it might take a little while to get back. Meanwhile, I wanted to confirm that this is something I plan to eventually resolve.</p>",
        "id": 426325946,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1710333131
    },
    {
        "content": "<p>Sorry, I didn't see this earlier. There is a shim in <code>Mathlib.Tactic.Generalize</code> already, under the name <code>generalize'</code>, with the old behaviour. It only supports limited syntax, for the most basic usage of generalize. (Sufficient to cover the two cases in Mathlib where generalize broke.)</p>",
        "id": 426441522,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710371324
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>. This is helpful.</p>",
        "id": 426476701,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1710397350
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"122318\">Tobias Grosser</span> has marked this topic as resolved.</p>",
        "id": 426476709,
        "sender_full_name": "Notification Bot",
        "timestamp": 1710397356
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Generalize.20became.20less.20agressive.2C.20how.20to.20get.20old.20behavior/near/425823069\">said</a>:</p>\n<blockquote>\n<p>Would you be willing to make some example test cases to show how a more aggressive <code>generalize</code> is useful to you? That could help justify extending the syntax to <code>generalize</code> to expose the configuration option.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>,  I wanted to briefly report back that for now we do not need a more powerful generalize but could treat the problem in our codebase.</p>",
        "id": 430253421,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1711717556
    },
    {
        "content": "<p>Thank you again.</p>",
        "id": 430253436,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1711717561
    }
]