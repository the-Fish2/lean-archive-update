[
    {
        "content": "<p>I have the following example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">MvPolynomial</span>\n\n<span class=\"kd\">example</span>\n    <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">eval</span> <span class=\"n\">map</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">X</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">X</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">X</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">X</span> <span class=\"mi\">5</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">eval</span> <span class=\"n\">map</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">X</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">X</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">X</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">X</span> <span class=\"mi\">5</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">congr</span> <span class=\"mi\">1</span> <span class=\"c1\">-- hangs</span>\n</code></pre></div>\n<p>Why does this hang here? If I remove <code>(X 4 + X 5)</code>, it works as I expect.</p>",
        "id": 438945165,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1715839923
    },
    {
        "content": "<p>It seems to be that <code>congr</code> is hanging trying to prove the resulting expression is true by <code>rfl</code>.</p>\n<p>Two workarounds:</p>\n<ul>\n<li>use <code>with_reducible congr 1</code></li>\n<li>use <code>congr! (config := {closePost := false}) 1</code></li>\n</ul>",
        "id": 439052322,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715874923
    },
    {
        "content": "<p>Is it expected that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">MvPolynomial</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span>\n    <span class=\"o\">((</span><span class=\"n\">X</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">X</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">X</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">X</span> <span class=\"mi\">5</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n    <span class=\"o\">((</span><span class=\"n\">X</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">X</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">X</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">X</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MvPolynomial</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rfl</span> <span class=\"c1\">-- hangs</span>\n</code></pre></div>\n<p>hangs then?</p>",
        "id": 439088302,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1715888096
    },
    {
        "content": "<p>Nice catch. Minimizing even further, the Xs seem to be unnecessary for the hang to manifest.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span>\n    <span class=\"o\">((</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">MvPolynomial</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rfl</span> <span class=\"c1\">-- hangs</span>\n</code></pre></div>",
        "id": 439113564,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1715899107
    },
    {
        "content": "<p>Now lets work on that <code>import Mathlib</code> line. :-)</p>",
        "id": 439123208,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715904644
    },
    {
        "content": "<p>Yeah I tried changing it to <code>Polynomial ℕ</code> but that no longer hangs.</p>",
        "id": 439139461,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1715916171
    },
    {
        "content": "<p>So the type is important somehow.</p>",
        "id": 439139507,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1715916201
    },
    {
        "content": "<p>I'm not too surprised it takes so long. These expressions are theoretically computable, but <code>MvPolynomial</code> isn't very computationally efficient.</p>\n<p>It turns out this doesn't even succeed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span>\n    <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span>\n    <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span>  <span class=\"o\">:</span> <span class=\"n\">MvPolynomial</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>It doesn't time out, it fails.</p>\n<p>There's also a DecidableEq instance, but <code>by decide</code> gets stuck here. Here's one part of it that's getting stuck:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">MvPolynomial</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">support</span><span class=\"o\">,</span>\n    <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">MvPolynomial</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toFun</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">MvPolynomial</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toFun</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">decide</span>\n</code></pre></div>\n<p>It's able to synthesize a decidable instance, but it can't reduce the instance.</p>",
        "id": 439146304,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715919740
    },
    {
        "content": "<p>Just to say: I don't expect <code>rfl</code> to work, I just didn't expect it to hang :-)</p>",
        "id": 439190242,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1715939803
    },
    {
        "content": "<p>Me too. I guess what we are being told is \"while this looks like a simple computation, it is actually not simple for weird low-level details of MvPolynomial that make the algorithm that rfl runs unexpectedly but correctly take forever / a long time\"?</p>",
        "id": 439191129,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1715940074
    },
    {
        "content": "<blockquote>\n<p>It's able to synthesize a decidable instance, but it can't reduce the instance.</p>\n</blockquote>\n<p><del>The decidability instance uses <code>Classical.choice</code>, so it isn't reducible</del></p>",
        "id": 439206483,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715946932
    },
    {
        "content": "<p>Ah, I think the problem is that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Multiset.decidableForallMultiset#doc\">docs#Multiset.decidableForallMultiset</a> goes through a quotient type, and so can't be reduced without unfolding until a <a href=\"http://Quotient.mk\">Quotient.mk</a> appears</p>",
        "id": 439206884,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715947057
    },
    {
        "content": "<p>And the <code>Quotient.mk</code> never appears, because there is a classical <code>if</code> hiding in the addition which can't be further reduced</p>",
        "id": 439206954,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715947079
    },
    {
        "content": "<p>Note: I made <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MonoidAlgebra.mul%27#doc\">docs#MonoidAlgebra.mul'</a> irreducible a little while ago. We should make many such operations irreducible.</p>",
        "id": 439215706,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1715950089
    }
]