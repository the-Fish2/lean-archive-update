[
    {
        "content": "<p>It seems like rewriting a goal with uninstantiated metavariables leads to the goals associated with the metavariable to be duplicated.  For example for the following theorem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">exists</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">intros</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"n\">H1</span>\n<span class=\"w\">  </span><span class=\"n\">constructor</span>\n<span class=\"w\">  </span><span class=\"n\">rewrite</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">H1</span><span class=\"o\">,</span><span class=\"bp\">←</span><span class=\"n\">H1</span><span class=\"o\">,</span><span class=\"n\">H1</span><span class=\"o\">,</span><span class=\"bp\">←</span><span class=\"n\">H1</span><span class=\"o\">,</span><span class=\"n\">H1</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"c1\">-- rotate_left; exact g; rfl</span>\n</code></pre></div>\n<p>We are left with 7 goals, and each additional rewrite adds another goal. However, if you do instantiate the metavariable, then all goals disappear as expected.</p>\n<p>I was mainly wondering if this was expected, because we sometimes have a few metavariables that aren't resolved until the very end with a large context and perform rewrites, which seems to slow down the vscode window and maybe lean itself because it tries to display all the repeated contexts.</p>",
        "id": 442515619,
        "sender_full_name": "Yann Herklotz",
        "timestamp": 1717503332
    },
    {
        "content": "<p>I have run into this as well, and I agree that it is a problem. I've made a fix for it here: <a href=\"https://github.com/leanprover/lean4/pull/4381\">lean4#4381</a></p>",
        "id": 443164627,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1717709216
    },
    {
        "content": "<p>Jovan probably means <a href=\"https://github.com/leanprover/lean4/pull/4381\">lean4#4381</a></p>",
        "id": 443164917,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1717709343
    },
    {
        "content": "<p>Oops, I keep forgetting to write lean4</p>",
        "id": 443164975,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1717709374
    },
    {
        "content": "<p>It seems you also forget to include tests <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 443165103,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1717709421
    },
    {
        "content": "<p>I'll do that next :)</p>",
        "id": 443165167,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1717709454
    },
    {
        "content": "<p>I've added a minimal test now</p>",
        "id": 443168309,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1717711085
    },
    {
        "content": "<p>Oh amazing thanks for the quick response, I'll try that out and see if it affects the performance of our proofs too.</p>",
        "id": 443242642,
        "sender_full_name": "Yann Herklotz",
        "timestamp": 1717749766
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"688543\">Yann Herklotz</span> has marked this topic as resolved.</p>",
        "id": 443242961,
        "sender_full_name": "Notification Bot",
        "timestamp": 1717749860
    }
]