[
    {
        "content": "<p>In my teaching library I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span> <span class=\"n\">Parser</span> <span class=\"n\">Tactic</span> <span class=\"n\">Term</span>\n\n<span class=\"n\">elab</span> <span class=\"o\">(</span><span class=\"s2\">\"Exercise\"</span><span class=\"bp\">&lt;|&gt;</span><span class=\"s2\">\"Example\"</span><span class=\"o\">)</span> <span class=\"n\">str</span>\n    <span class=\"s2\">\"Given:\"</span> <span class=\"n\">objs</span><span class=\"o\">:</span><span class=\"n\">bracketedBinder</span><span class=\"bp\">*</span>\n    <span class=\"s2\">\"Assume:\"</span> <span class=\"n\">hyps</span><span class=\"o\">:</span><span class=\"n\">bracketedBinder</span><span class=\"bp\">*</span>\n    <span class=\"s2\">\"Conclusion:\"</span> <span class=\"n\">concl</span><span class=\"o\">:</span><span class=\"n\">term</span>\n    <span class=\"s2\">\"Proof:\"</span> <span class=\"n\">prf</span><span class=\"o\">:</span><span class=\"n\">tacticSeq</span> <span class=\"s2\">\"QED\"</span><span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">elabCommand</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">command</span><span class=\"bp\">|</span><span class=\"kd\">example</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">objs</span> <span class=\"bp\">++</span> <span class=\"n\">hyps</span><span class=\"o\">):</span><span class=\"n\">bracketedBinder</span><span class=\"bp\">*</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">concl</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"bp\">$</span><span class=\"n\">prf</span><span class=\"o\">))</span>\n\n<span class=\"n\">Exercise</span> <span class=\"s2\">\"Test\"</span>\n  <span class=\"n\">Given</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"n\">Assume</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"n\">Conclusion</span><span class=\"o\">:</span> <span class=\"n\">True</span>\n<span class=\"n\">Proof</span><span class=\"o\">:</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"n\">QED</span>\n</code></pre></div>\n<p>It works well and I can replace the <code>sorry</code> by a proof. But it would be even better if I could remove the sorry and have the elaborator putting it in case the proof is empty. But I was not able to achieve this. Any idea?</p>",
        "id": 418349483,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1706302281
    },
    {
        "content": "<p>You could make it optional and use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Option.getDM#doc\">docs#Option.getDM</a> to fill it in with <code>sorry</code> when it's missing.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"o\">(</span><span class=\"s2\">\"Exercise\"</span><span class=\"bp\">&lt;|&gt;</span><span class=\"s2\">\"Example\"</span><span class=\"o\">)</span> <span class=\"n\">str</span>\n    <span class=\"s2\">\"Given:\"</span> <span class=\"n\">objs</span><span class=\"o\">:</span><span class=\"n\">bracketedBinder</span><span class=\"bp\">*</span>\n    <span class=\"s2\">\"Assume:\"</span> <span class=\"n\">hyps</span><span class=\"o\">:</span><span class=\"n\">bracketedBinder</span><span class=\"bp\">*</span>\n    <span class=\"s2\">\"Conclusion:\"</span> <span class=\"n\">concl</span><span class=\"o\">:</span><span class=\"n\">term</span>\n    <span class=\"s2\">\"Proof:\"</span> <span class=\"n\">prf</span><span class=\"bp\">?</span><span class=\"o\">:(</span><span class=\"n\">tacticSeq</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"s2\">\"QED\"</span><span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">prf</span> <span class=\"bp\">←</span> <span class=\"n\">prf</span><span class=\"bp\">?.</span><span class=\"n\">getDM</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tacticSeq</span><span class=\"bp\">|</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span>\n  <span class=\"n\">elabCommand</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">command</span><span class=\"bp\">|</span><span class=\"kd\">example</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">objs</span> <span class=\"bp\">++</span> <span class=\"n\">hyps</span><span class=\"o\">):</span><span class=\"n\">bracketedBinder</span><span class=\"bp\">*</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">concl</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"bp\">$</span><span class=\"n\">prf</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 418350128,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1706302662
    },
    {
        "content": "<p>Nice, thanks!</p>",
        "id": 418350903,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1706303014
    },
    {
        "content": "<p>Oh no, it doesn't really work. Putting the cursor inside the empty proof shows no goal.</p>",
        "id": 418351535,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1706303384
    },
    {
        "content": "<p>How about this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Data.Option.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span> <span class=\"n\">Parser</span> <span class=\"n\">Tactic</span> <span class=\"n\">Term</span>\n\n<span class=\"n\">elab</span> <span class=\"o\">(</span><span class=\"s2\">\"Exercise\"</span><span class=\"bp\">&lt;|&gt;</span><span class=\"s2\">\"Example\"</span><span class=\"o\">)</span> <span class=\"n\">str</span>\n    <span class=\"s2\">\"Given:\"</span> <span class=\"n\">objs</span><span class=\"o\">:</span><span class=\"n\">bracketedBinder</span><span class=\"bp\">*</span>\n    <span class=\"s2\">\"Assume:\"</span> <span class=\"n\">hyps</span><span class=\"o\">:</span><span class=\"n\">bracketedBinder</span><span class=\"bp\">*</span>\n    <span class=\"s2\">\"Conclusion:\"</span> <span class=\"n\">concl</span><span class=\"o\">:</span><span class=\"n\">term</span>\n    <span class=\"s2\">\"Proof:\"</span> <span class=\"n\">prf</span><span class=\"bp\">?</span><span class=\"o\">:(</span><span class=\"n\">tacticSeq</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"n\">tk</span><span class=\"o\">:</span><span class=\"s2\">\"QED\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">prf</span> <span class=\"bp\">←</span> <span class=\"n\">prf</span><span class=\"bp\">?.</span><span class=\"n\">getDM</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">withRef</span> <span class=\"n\">tk</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tacticSeq</span><span class=\"bp\">|</span> <span class=\"n\">done</span><span class=\"o\">)</span>\n  <span class=\"n\">elabCommand</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">command</span><span class=\"bp\">|</span><span class=\"kd\">example</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">objs</span> <span class=\"bp\">++</span> <span class=\"n\">hyps</span><span class=\"o\">):</span><span class=\"n\">bracketedBinder</span><span class=\"bp\">*</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">concl</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"bp\">$</span><span class=\"n\">prf</span><span class=\"o\">))</span>\n\n<span class=\"n\">Exercise</span> <span class=\"s2\">\"Test\"</span>\n  <span class=\"n\">Given</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"n\">Assume</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"n\">Conclusion</span><span class=\"o\">:</span> <span class=\"n\">True</span>\n<span class=\"n\">Proof</span><span class=\"o\">:</span>\n\n<span class=\"n\">QED</span>\n</code></pre></div>\n<p>The QED is red and says \"unsolved goals\"</p>",
        "id": 418352261,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1706303795
    },
    {
        "content": "<p>It is slightly better but still way too confusing for students.</p>",
        "id": 418352353,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1706303854
    },
    {
        "content": "<p>There's probably a more elegant way to do this, but I got it to show the goal state by putting some source positions on everything in sight.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Data.Option.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span> <span class=\"n\">Parser</span> <span class=\"n\">Tactic</span> <span class=\"n\">Term</span>\n\n<span class=\"n\">elab</span> <span class=\"o\">(</span><span class=\"s2\">\"Exercise\"</span><span class=\"bp\">&lt;|&gt;</span><span class=\"s2\">\"Example\"</span><span class=\"o\">)</span> <span class=\"n\">str</span>\n    <span class=\"s2\">\"Given:\"</span> <span class=\"n\">objs</span><span class=\"o\">:</span><span class=\"n\">bracketedBinder</span><span class=\"bp\">*</span>\n    <span class=\"s2\">\"Assume:\"</span> <span class=\"n\">hyps</span><span class=\"o\">:</span><span class=\"n\">bracketedBinder</span><span class=\"bp\">*</span>\n    <span class=\"s2\">\"Conclusion:\"</span> <span class=\"n\">concl</span><span class=\"o\">:</span><span class=\"n\">term</span>\n    <span class=\"n\">tkp</span><span class=\"o\">:</span><span class=\"s2\">\"Proof:\"</span> <span class=\"n\">prf</span><span class=\"bp\">?</span><span class=\"o\">:(</span><span class=\"n\">tacticSeq</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"n\">tk</span><span class=\"o\">:</span><span class=\"s2\">\"QED\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">ref</span> <span class=\"o\">:=</span> <span class=\"n\">mkNullNode</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">tkp</span><span class=\"o\">,</span> <span class=\"n\">tk</span><span class=\"o\">]</span>\n  <span class=\"k\">let</span> <span class=\"n\">prf</span> <span class=\"bp\">←</span> <span class=\"n\">prf</span><span class=\"bp\">?.</span><span class=\"n\">getDM</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">withRef</span> <span class=\"n\">ref</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tacticSeq</span><span class=\"bp\">|</span> <span class=\"n\">skip</span><span class=\"o\">)</span>\n  <span class=\"n\">elabCommand</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">command</span><span class=\"bp\">|</span><span class=\"kd\">example</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">objs</span> <span class=\"bp\">++</span> <span class=\"n\">hyps</span><span class=\"o\">):</span><span class=\"n\">bracketedBinder</span><span class=\"bp\">*</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">concl</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span><span class=\"bp\">%$</span><span class=\"n\">ref</span>\n    <span class=\"n\">skip</span><span class=\"bp\">%$</span><span class=\"n\">ref</span>\n    <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">prf</span><span class=\"o\">)</span>\n    <span class=\"n\">skip</span><span class=\"bp\">%$</span><span class=\"n\">ref</span><span class=\"o\">))</span>\n\n<span class=\"n\">Exercise</span> <span class=\"s2\">\"Test\"</span>\n  <span class=\"n\">Given</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"n\">Assume</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"n\">Conclusion</span><span class=\"o\">:</span> <span class=\"n\">True</span>\n<span class=\"n\">Proof</span><span class=\"o\">:</span>\n\n<span class=\"n\">QED</span>\n</code></pre></div>",
        "id": 418354358,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1706304923
    },
    {
        "content": "<p>I couldn't figure out why it's the first line that gets the \"unsolved goals\"</p>",
        "id": 418354482,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1706304976
    },
    {
        "content": "<p>Never mind, it's because the <code>by</code> syntax itself wasn't being assigned a ref. Here's it putting the red squiggle on QED:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Data.Option.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span> <span class=\"n\">Parser</span> <span class=\"n\">Tactic</span> <span class=\"n\">Term</span>\n\n<span class=\"n\">elab</span> <span class=\"o\">(</span><span class=\"s2\">\"Exercise\"</span><span class=\"bp\">&lt;|&gt;</span><span class=\"s2\">\"Example\"</span><span class=\"o\">)</span> <span class=\"n\">str</span>\n    <span class=\"s2\">\"Given:\"</span> <span class=\"n\">objs</span><span class=\"o\">:</span><span class=\"n\">bracketedBinder</span><span class=\"bp\">*</span>\n    <span class=\"s2\">\"Assume:\"</span> <span class=\"n\">hyps</span><span class=\"o\">:</span><span class=\"n\">bracketedBinder</span><span class=\"bp\">*</span>\n    <span class=\"s2\">\"Conclusion:\"</span> <span class=\"n\">concl</span><span class=\"o\">:</span><span class=\"n\">term</span>\n    <span class=\"n\">tkp</span><span class=\"o\">:</span><span class=\"s2\">\"Proof:\"</span> <span class=\"n\">prf</span><span class=\"bp\">?</span><span class=\"o\">:(</span><span class=\"n\">tacticSeq</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"n\">tk</span><span class=\"o\">:</span><span class=\"s2\">\"QED\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">ref</span> <span class=\"o\">:=</span> <span class=\"n\">mkNullNode</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">tkp</span><span class=\"o\">,</span> <span class=\"n\">tk</span><span class=\"o\">]</span>\n  <span class=\"k\">let</span> <span class=\"n\">prf</span> <span class=\"bp\">←</span> <span class=\"n\">prf</span><span class=\"bp\">?.</span><span class=\"n\">getDM</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">withRef</span> <span class=\"n\">ref</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tacticSeq</span><span class=\"bp\">|</span> <span class=\"n\">skip</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">term</span> <span class=\"bp\">←</span> <span class=\"n\">withRef</span> <span class=\"n\">tk</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">by</span><span class=\"bp\">%$</span><span class=\"n\">ref</span>\n    <span class=\"n\">skip</span><span class=\"bp\">%$</span><span class=\"n\">ref</span>\n    <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">prf</span><span class=\"o\">)</span>\n    <span class=\"n\">skip</span><span class=\"bp\">%$</span><span class=\"n\">ref</span><span class=\"o\">)</span>\n  <span class=\"n\">elabCommand</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">command</span><span class=\"bp\">|</span><span class=\"kd\">example</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">objs</span> <span class=\"bp\">++</span> <span class=\"n\">hyps</span><span class=\"o\">):</span><span class=\"n\">bracketedBinder</span><span class=\"bp\">*</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">concl</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">term</span><span class=\"o\">))</span>\n\n<span class=\"n\">Exercise</span> <span class=\"s2\">\"Test\"</span>\n  <span class=\"n\">Given</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"n\">Assume</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"n\">Conclusion</span><span class=\"o\">:</span> <span class=\"n\">True</span>\n<span class=\"n\">Proof</span><span class=\"o\">:</span>\n\n<span class=\"n\">QED</span>\n</code></pre></div>",
        "id": 418354598,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1706305044
    },
    {
        "content": "<p>Great!</p>",
        "id": 418356775,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1706306267
    },
    {
        "content": "<p>Now I need to weave that through the widget panel stuff...</p>",
        "id": 418357191,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1706306489
    },
    {
        "content": "<p>Are the <code>skip%$ref</code>s still needed there?</p>",
        "id": 418395904,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706339491
    }
]