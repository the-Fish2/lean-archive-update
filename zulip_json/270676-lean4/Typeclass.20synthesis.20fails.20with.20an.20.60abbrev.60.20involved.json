[
    {
        "content": "<p>Does someone have an idea of what is going on with the following MWE?<br>\nIf I define <code>FooWithUnit</code> as an <code>abbrev</code>, and have an instance for <code>Class (FooWithUnit FooNat)</code>, but typeclass synthesis for <em>exactly</em> that expression fails.<br>\nOn the other hand, if I change <code>FooWithUnit</code> to be a <code>def</code>, everything works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Class</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">FooNat</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">Nat</span><span class=\"o\">⟩</span>\n\n<span class=\"sd\">/-- A function `Foo → Foo` that changes `Foo.β`, but takes `Foo.α` from the argument -/</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">FooWithUnit</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">w.α</span>\n  <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">Unit</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">inst</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Class</span> <span class=\"o\">(</span><span class=\"n\">FooWithUnit</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">inst</span> <span class=\"n\">FooNat</span> <span class=\"o\">:</span> <span class=\"n\">Class</span> <span class=\"o\">(</span><span class=\"n\">FooWithUnit</span> <span class=\"n\">FooNat</span><span class=\"o\">))</span> <span class=\"c1\">-- this typechecks</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Class</span> <span class=\"o\">(</span><span class=\"n\">FooWithUnit</span> <span class=\"n\">FooNat</span><span class=\"o\">)</span>                 <span class=\"c1\">-- yet, we get `failed to synthesize`</span>\n\n<span class=\"c1\">-- Making `FooWithUnit` a `def` instead of an `abbrev` somehow fixes the issue</span>\n<span class=\"kd\">def</span> <span class=\"n\">FooWithUnit'</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">w.α</span>\n  <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">Unit</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">inst'</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Class</span> <span class=\"o\">(</span><span class=\"n\">FooWithUnit'</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">inst'</span> <span class=\"n\">FooNat</span> <span class=\"o\">:</span> <span class=\"n\">Class</span> <span class=\"o\">(</span><span class=\"n\">FooWithUnit'</span> <span class=\"n\">FooNat</span><span class=\"o\">))</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Class</span> <span class=\"o\">(</span><span class=\"n\">FooWithUnit'</span> <span class=\"n\">FooNat</span><span class=\"o\">)</span> <span class=\"c1\">-- this now works</span>\n</code></pre></div>",
        "id": 435178544,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1713961843
    },
    {
        "content": "<p>I think <code>abbrev</code> is working as intended; the behavior is the same if you inline everything:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Class</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">inst</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Class</span> <span class=\"o\">({</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">w.α</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">Unit</span> <span class=\"o\">})</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">inst</span> <span class=\"o\">⟨</span><span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">Nat</span><span class=\"o\">⟩</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Class</span> <span class=\"o\">({</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">(⟨</span><span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">Nat</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">Unit</span> <span class=\"o\">})</span> <span class=\"c1\">--fails</span>\n</code></pre></div>",
        "id": 435180196,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713962448
    },
    {
        "content": "<p>Ah, right. thanks for the info! I understand why it's happening now, but it's certainly surprising when having an instance for exactly the thing being synthesized doesn't work</p>",
        "id": 435184638,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1713963849
    },
    {
        "content": "<p>Can you share the underlying issue? I assume it is the discrimination tree indexing because synthesis isn't crashing and there are no instances found when tracing.</p>",
        "id": 435228762,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1713975558
    },
    {
        "content": "<p>What I assume is happening, is that when an instance is defined, the type is reduced with reducible transparancy, and the result of that is used in the discrimination tree. In my example, this would be <code>Class { α := Wrapper.α w, β := Unit }</code>. Since <code>w</code> is a variable at this point, no more reduction is possible. In particular, I assume the discrimnation tree indexes the presence of the <code>Wrapper.α</code> projection.<br>\nHowever, at the point of synthesis, the value of <code>w</code> is known, namely, I'm trying to synthesize <code>Class  (FooWithUnit FooNat)</code>. I assume this, too, gets reduced, and since <code>FooNat</code> is an abbrev as well, reducing this fully gives <code>Class { α := Nat, β := Unit }</code>, and I assume that this is what is actually being synthesized. Notice the lack of <code>Wrapper.α</code> in the reduced form, which I'd guess is what causes the synthesis to fail.</p>\n<p>Notice my liberal use of \"assume\". I don't actually know how typeclass synthesis is implemented, this is just my mental model that would support this behaviour.</p>",
        "id": 435230914,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1713976261
    },
    {
        "content": "<p>Sounds reasonable.</p>",
        "id": 435231002,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1713976292
    },
    {
        "content": "<p>Making <code>Foo</code> a class also makes the <code>#synth</code> work (because projections from classes are not reducible whereas those from structures are)</p>",
        "id": 435231852,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1713976592
    },
    {
        "content": "<p>In this example, the keys for <code>FooWithUnit FooNat</code> are <code>#[Foo.mk, Nat, PUnit]</code> and the keys for <code>inst</code> are <code>#[Class, Foo.mk, Foo.0, *, PUnit]</code> </p>\n<p>The keys for <code>FooWithUnit' FooNat</code> are <code>#[FooWithUnit', Foo.mk, Nat, Nat]</code> and for <code>inst'</code> are <code>#[Class, FooWithUnit', *]</code></p>",
        "id": 435285192,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1713999485
    },
    {
        "content": "<p>You can do </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">inst</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Class</span> <span class=\"n\">no_index</span> <span class=\"o\">(</span><span class=\"n\">FooWithUnit</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n</code></pre></div>\n<p>to turn the keys into <code>#[Class, *]</code> and match with anything asking for a <code>Class</code></p>",
        "id": 435287366,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1714000820
    },
    {
        "content": "<p>Is the matching for the keys just equal arrays up to skipping <code>.star</code>s?</p>",
        "id": 435287530,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1714000975
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/270676-lean4/topic/Typeclass.20synthesis.20fails.20with.20an.20.60abbrev.60.20involved/near/435287530\">said</a>:</p>\n<blockquote>\n<p>Is the matching for the keys just equal arrays up to skipping <code>.star</code>s?</p>\n</blockquote>\n<p>Is this question for me? I'm not sure.</p>\n<p>Anyways, thanks for the in-depth investigation! I somehow keep forgetting about <code>no_index</code> and how it can fix issues related to discrimination trees</p>",
        "id": 435595164,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1714140852
    },
    {
        "content": "<p>That was in general but I found a post by Mario which gave me the summary</p>",
        "id": 435597289,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1714141563
    }
]