[
    {
        "content": "<p>I've encountered an unexpected type mismatch issue. Here's a simplified example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">UInt4</span> <span class=\"o\">:=</span> <span class=\"n\">Fin</span> <span class=\"mi\">16</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">U4_MAX</span> <span class=\"o\">:</span> <span class=\"n\">UInt4</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">val</span><span class=\"o\">:=</span><span class=\"mi\">15</span><span class=\"o\">,</span> <span class=\"n\">isLt</span><span class=\"o\">:=(</span><span class=\"kd\">by</span> <span class=\"n\">simp_arith</span><span class=\"o\">)}</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">sum</span><span class=\"o\">(</span><span class=\"n\">items</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">))(</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">n</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">items</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">h</span><span class=\"o\">::</span><span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">sum</span> <span class=\"n\">t</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span><span class=\"n\">val</span><span class=\"o\">:=</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">isLt</span><span class=\"o\">:=(</span><span class=\"kd\">by</span> <span class=\"n\">simp_arith</span> <span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">])}</span>\n\n<span class=\"kd\">example</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"mi\">16</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">::</span><span class=\"mi\">2</span><span class=\"o\">::[])</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span>  <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">simp_arith</span>\n</code></pre></div>\n<p>This works fine, and just illustrates the setup.  So then I want to add another test ...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"mi\">16</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">::</span><span class=\"n\">U4_MAX</span><span class=\"o\">::[])</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>  <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"c1\">--unfold U4_MAX</span>\n  <span class=\"n\">simp_arith</span>\n</code></pre></div>\n<p>Now, the proof appears to go through OK but Lean is reporting this error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">test.lean</span><span class=\"o\">:</span><span class=\"mi\">15</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">List.cons</span> <span class=\"o\">(</span><span class=\"n\">Fin.add</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">U4_MAX</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n<span class=\"n\">argument</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Fin</span> <span class=\"mi\">16</span>\n<span class=\"n\">but</span> <span class=\"n\">function</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span>\n</code></pre></div>\n<p>I figured out two solutions.  Firstly, we can manually unfold <code>U4_MAX</code> (as illustrated by the comment); or, we can annotate <code>U4_MAX</code> with <code>@[simp]</code>.  But, I don't understand why I need to do this?  I might understand better if <code>U4_MAX</code> was a <code>def</code> ... ?</p>",
        "id": 439699225,
        "sender_full_name": "David Pearce",
        "timestamp": 1716247593
    },
    {
        "content": "<p>I'm not seeing an error locally. Which version of Lean are you using? (<code>#eval Lean.versionString</code>)</p>",
        "id": 439707640,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1716252408
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Lean</span> <span class=\"o\">(</span><span class=\"n\">version</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">7</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">x86_64</span><span class=\"bp\">-</span><span class=\"n\">unknown</span><span class=\"bp\">-</span><span class=\"n\">linux</span><span class=\"bp\">-</span><span class=\"n\">gnu</span><span class=\"o\">,</span> <span class=\"n\">commit</span> <span class=\"mi\">6</span><span class=\"n\">fce8f7d5cd1</span><span class=\"o\">,</span> <span class=\"n\">Release</span>\n</code></pre></div>",
        "id": 439707697,
        "sender_full_name": "David Pearce",
        "timestamp": 1716252451
    },
    {
        "content": "<p>I'm using 4.8.0-rc1</p>",
        "id": 439707893,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1716252578
    },
    {
        "content": "<p>By the way, here's a way to handle the positivity condition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">UInt4</span> <span class=\"o\">:=</span> <span class=\"n\">Fin</span> <span class=\"mi\">16</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">U4_MAX</span> <span class=\"o\">:</span> <span class=\"n\">UInt4</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">val</span><span class=\"o\">:=</span><span class=\"mi\">15</span><span class=\"o\">,</span> <span class=\"n\">isLt</span><span class=\"o\">:=(</span><span class=\"kd\">by</span> <span class=\"n\">simp_arith</span><span class=\"o\">)}</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">items</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">items.foldl</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">::</span><span class=\"mi\">2</span><span class=\"o\">::[])</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">UInt4</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">simp_arith</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">::</span><span class=\"n\">U4_MAX</span><span class=\"o\">::[])</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>  <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">simp_arith</span>\n</code></pre></div>",
        "id": 439707904,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1716252586
    },
    {
        "content": "<p>Hmmm... well I can try upgrading I suppose</p>",
        "id": 439707967,
        "sender_full_name": "David Pearce",
        "timestamp": 1716252605
    },
    {
        "content": "<p>(Also, I used a fold, but that's not necessary. The main thing is that <code>(0 : Fin (n + 1))</code> works without needing to pass a proof.)</p>",
        "id": 439708004,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1716252633
    },
    {
        "content": "<p>Ah, I see ... yeah neat <code>Fin (n + 1)</code>.</p>",
        "id": 439708036,
        "sender_full_name": "David Pearce",
        "timestamp": 1716252659
    },
    {
        "content": "<p>A risk with <code>Fin (n + 1)</code> is that if you're dealing with complicated expressions (you're not here to be clear -- the 16 in <code>Fin 16</code> is very simple) then unifying against <code>n + 1</code> can trigger a potentially expensive calculation. It's perfectly fine for fixed-width numeric types like this.</p>",
        "id": 439708216,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1716252770
    },
    {
        "content": "<p>Well, my real code is working against <code>UInt256</code> ... how does that stack up ?</p>",
        "id": 439708276,
        "sender_full_name": "David Pearce",
        "timestamp": 1716252820
    },
    {
        "content": "<p>(You might also like to know that <code>set_option pp.numericTypes true</code> shows all the types of all the numeric literals. Just mentioning it in case it's eventually useful.)</p>",
        "id": 439708282,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1716252822
    },
    {
        "content": "<p>That's mod <code>2 ^ 256</code>? Should be fine.</p>",
        "id": 439708371,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1716252866
    },
    {
        "content": "<p>Yes, <code>U256_MAX</code> is defined as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">U256_MAX</span> <span class=\"o\">:</span> <span class=\"n\">UInt256</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">val</span><span class=\"o\">:=(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">256</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">isLt</span><span class=\"o\">:=(</span><span class=\"kd\">by</span> <span class=\"n\">simp_arith</span><span class=\"o\">)}</span>\n</code></pre></div>",
        "id": 439708461,
        "sender_full_name": "David Pearce",
        "timestamp": 1716252927
    },
    {
        "content": "<p>The <code>set_option</code> doesn't seem to make heaps of difference in VS Code (though some)</p>",
        "id": 439708580,
        "sender_full_name": "David Pearce",
        "timestamp": 1716252988
    },
    {
        "content": "<p>Ah, I see in the error messages though it makes a difference</p>",
        "id": 439708594,
        "sender_full_name": "David Pearce",
        "timestamp": 1716252998
    },
    {
        "content": "<p>It affects the Infoview too</p>",
        "id": 439709047,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1716253300
    },
    {
        "content": "<p>Regarding your first error, I would guess that adding some type ascriptions somewhere, like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"mi\">16</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">::</span><span class=\"n\">U4_MAX</span><span class=\"o\">::[])</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">UInt4</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>would make a difference, if you don't want to upgrade.</p>",
        "id": 439709177,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1716253362
    },
    {
        "content": "<p>Hmmm, no still fails:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"mi\">16</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">::</span><span class=\"n\">U4_MAX</span><span class=\"o\">::[])</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">UInt4</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"c1\">--unfold U4_MAX</span>\n  <span class=\"n\">simp_arith</span>\n</code></pre></div>",
        "id": 439709394,
        "sender_full_name": "David Pearce",
        "timestamp": 1716253496
    },
    {
        "content": "<p>I'm wondering if you happen to have anything else in context? If you copy your mwe into a fresh file, do you still see the error? (I'm wondering in particular if there's another <code>sum</code> that's conflicting with yours somehow...)</p>",
        "id": 439709606,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1716253633
    },
    {
        "content": "<p>I can try that now</p>",
        "id": 439709634,
        "sender_full_name": "David Pearce",
        "timestamp": 1716253658
    },
    {
        "content": "<p>Hmmm, I don't think that's it.  Moving into a different workspace which is essentially empty, and same thing.  I'm running <code>lean</code> directly against the <code>test.lean</code> file.  Also, moving out of any existing lean workspace ... same thing.</p>",
        "id": 439710003,
        "sender_full_name": "David Pearce",
        "timestamp": 1716253852
    },
    {
        "content": "<p>Last guess, maybe <code>sum ((1 : UInt4)::U4_MAX::[]) p = (0 : UInt4)</code>?</p>",
        "id": 439710088,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1716253918
    },
    {
        "content": "<p>Oh, sorry, I didn't understand what sort of error you were reporting. You're saying that <code>simp_arith</code> itself isn't reporting the error, right? Is the error on <code>example</code>?</p>",
        "id": 439710276,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1716254023
    },
    {
        "content": "<p>Oh, so wierd.  Just pushing through the change to use <code>Fin (n+1)</code>.  Here's it working nicely:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">bbrev</span> <span class=\"n\">UInt4</span> <span class=\"o\">:=</span> <span class=\"n\">Fin</span> <span class=\"mi\">16</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">U4_MAX</span> <span class=\"o\">:</span> <span class=\"n\">UInt4</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">val</span><span class=\"o\">:=</span><span class=\"mi\">15</span><span class=\"o\">,</span> <span class=\"n\">isLt</span><span class=\"o\">:=(</span><span class=\"kd\">by</span> <span class=\"n\">simp_arith</span><span class=\"o\">)}</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">sum</span><span class=\"o\">(</span><span class=\"n\">items</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))):</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">items</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">h</span><span class=\"o\">::</span><span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">sum</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span><span class=\"n\">val</span><span class=\"o\">:=</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">isLt</span><span class=\"o\">:=(</span><span class=\"kd\">by</span> <span class=\"n\">simp_arith</span><span class=\"o\">)}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">::</span><span class=\"mi\">2</span><span class=\"o\">::[])</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"n\">UInt4</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">simp_arith</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">::</span><span class=\"n\">U4_MAX</span><span class=\"o\">::[])</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>  <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">simp_arith</span>\n</code></pre></div>\n<p>Its strange though as don't need a type for <code>0</code> but do need one now for <code>3</code> in the first example!!</p>",
        "id": 439710278,
        "sender_full_name": "David Pearce",
        "timestamp": 1716254024
    },
    {
        "content": "<blockquote>\n<p><code>sum ((1 : UInt4)::U4_MAX::[]) p = (0 : UInt4)</code></p>\n</blockquote>\n<p>I tried a bunch of this stuff.  I understand its having problem inferring the correct type.</p>",
        "id": 439710363,
        "sender_full_name": "David Pearce",
        "timestamp": 1716254060
    },
    {
        "content": "<blockquote>\n<p>Is the error on <code>example</code>?</p>\n</blockquote>\n<p>If this is the case, that means there was an error inside of <code>simp_arith</code> itself. There have been some bug fixes there since 4.7.0</p>",
        "id": 439710455,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1716254132
    },
    {
        "content": "<p>Yes, the error was underlying <code>example</code>.</p>",
        "id": 439710478,
        "sender_full_name": "David Pearce",
        "timestamp": 1716254152
    },
    {
        "content": "<p>Almost like an internal error</p>",
        "id": 439710488,
        "sender_full_name": "David Pearce",
        "timestamp": 1716254159
    },
    {
        "content": "<p>Yes, definitely an internal error. It's saying that the proof generated by <code>simp_arith</code> was type incorrect.</p>",
        "id": 439710606,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1716254210
    },
    {
        "content": "<p>Right, ok.  I didn't understand fully what it was complaining about <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 439710637,
        "sender_full_name": "David Pearce",
        "timestamp": 1716254233
    },
    {
        "content": "<p>Thanks</p>",
        "id": 439710696,
        "sender_full_name": "David Pearce",
        "timestamp": 1716254281
    },
    {
        "content": "<p>Error messages are still being improved! Don't be shy bringing up any that don't make sense.</p>",
        "id": 439710806,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1716254341
    }
]