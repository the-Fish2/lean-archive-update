[
    {
        "content": "<p>If I have defined a new type <code>T</code> and I want to implement <code>AddCommGroup T</code>, there are a lot of \"inherited classes\" that I need to implement as well. The best way I've found to do this currently is to painstakingly do the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">AddCommGroup</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">@</span><span class=\"n\">AddCommGroup.mk</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">@</span><span class=\"n\">AddGroup.mk</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">@</span><span class=\"n\">SubNegMonoid.mk</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">@</span><span class=\"n\">AddMonoid.mk</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> ... -/</span>\n</code></pre></div>\n<p>This is pretty annoying to go through, as I need to count out the number of arguments each time and fill them in with <code>?_</code>s. Is there a better way to do this? Even a tactic that combines <code>refine</code> and <code>apply</code> so I don't need to manually specify the <code>?_</code>s would be nice, but ideally there'd be something that would expand out all class/structure constructors automatically.</p>",
        "id": 439887544,
        "sender_full_name": "Ricardo Prado Cunha",
        "timestamp": 1716319571
    },
    {
        "content": "<p>Try <code>instance : AddCommGroup T := _</code> and then click on the blue lightbulb which appears, and then click \"generate a (minimal) structure something something\" (the top option).</p>",
        "id": 439890652,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716320627
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"620085\">Ricardo Prado Cunha</span> has marked this topic as resolved.</p>",
        "id": 439897577,
        "sender_full_name": "Notification Bot",
        "timestamp": 1716322945
    },
    {
        "content": "<p>That worked, thanks!</p>",
        "id": 439897636,
        "sender_full_name": "Ricardo Prado Cunha",
        "timestamp": 1716322964
    },
    {
        "content": "<p>Separately, often it is a good idea (for both readability and performance) to define instances in stages, eg. <code>instance AddMonoid T := ...</code> and then <code>instance AddCommGroup T := ...</code>.</p>",
        "id": 439944581,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716345039
    }
]