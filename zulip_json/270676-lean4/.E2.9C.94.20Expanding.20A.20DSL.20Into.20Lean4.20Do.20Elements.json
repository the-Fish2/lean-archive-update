[
    {
        "content": "<p>Hi, I've been working on a DSL in lean4 where each statement in the DSL should expand into a lean4 <code>doElem</code>. I want to be able to refer to (and reassign <code>mut</code>) variables from the outer scope from within the DSL. I can make everything work when the <code>assembly {}</code> block contains only a single statement, but I'm very oonfused on how to go about expanding multiple statements. <a href=\"https://leanprover-community.github.io/mathlib4_docs/Lean/Elab/Do.html#Lean.Elab.Term.Do.mkDoSeq\">Lean.Elab.Term.Do.mkDoSeq</a> seems potentially relevant, but I can't figure out a correct usage. Does anyone have any tips / insight?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"c1\">-- Syntax --</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">statement</span>\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">literal</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">literal</span>\n<span class=\"n\">syntax</span> <span class=\"n\">ident</span> <span class=\"s2\">\":=\"</span> <span class=\"n\">literal</span> <span class=\"o\">:</span> <span class=\"n\">statement</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"assembly {\"</span> <span class=\"n\">statement</span><span class=\"bp\">*</span> <span class=\"s2\">\"}\"</span> <span class=\"o\">:</span> <span class=\"n\">doElem</span>\n\n<span class=\"c1\">-- Semantics --</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"o\">(</span><span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"n\">Syntax</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">doElem</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">Lean.Parser.Term.doSeq</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Elab.Term.Do.mkDoSeq</span> <span class=\"n\">s</span><span class=\"o\">⟩</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">literal</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">doElem</span> <span class=\"bp\">|</span> <span class=\"n\">pure</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">statement</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">literal</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n       <span class=\"k\">let</span> <span class=\"n\">le</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.expandMacros</span> <span class=\"n\">l</span>\n       <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">doElem</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"bp\">$</span><span class=\"n\">le</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">doElem</span> <span class=\"bp\">|</span> <span class=\"n\">assembly</span> <span class=\"o\">{</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">statement</span><span class=\"bp\">*</span> <span class=\"o\">})</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">ss</span> <span class=\"bp\">←</span> <span class=\"n\">Array.mapM</span> <span class=\"n\">expandMacros</span> <span class=\"n\">s</span>\n      <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">do</span> <span class=\"bp\">$</span><span class=\"n\">ss</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- Test Case --</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.rawOnError</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ex</span> <span class=\"o\">:</span> <span class=\"n\">Id</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">    should expand to:</span>\n\n<span class=\"cm\">    do</span>\n<span class=\"cm\">      x ← pure 44</span>\n<span class=\"cm\">      x ← pure 15</span>\n\n<span class=\"cm\">    instead gives error:</span>\n\n<span class=\"cm\">    unexpected do-element of kind Lean.Parser.Term.do:</span>\n<span class=\"cm\">    [Error pretty printing syntax: parenthesize: uncaught backtrack exception. Falling back to raw printer.]</span>\n<span class=\"cm\">    (Term.do</span>\n<span class=\"cm\">     \"do\"</span>\n<span class=\"cm\">     (Term.doSeqIndent</span>\n<span class=\"cm\">      [[(Term.doReassignArrow</span>\n<span class=\"cm\">         (Term.doPatDecl `x \"←\" (Term.doExpr (Term.app `pure._@.SolcLean4.example._hyg.752 [(num \"44\")])) []))</span>\n<span class=\"cm\">        []]</span>\n<span class=\"cm\">       [(Term.doReassignArrow</span>\n<span class=\"cm\">         (Term.doPatDecl `x \"←\" (Term.doExpr (Term.app `pure._@.SolcLean4.example._hyg.755 [(num \"15\")])) []))</span>\n<span class=\"cm\">        []]]))</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"n\">assembly</span> <span class=\"o\">{</span>\n    <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">44</span>\n    <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">15</span>\n  <span class=\"o\">}</span>\n  <span class=\"n\">return</span> <span class=\"n\">x</span>\n\n<span class=\"c1\">-- should return 15</span>\n<span class=\"k\">#eval</span> <span class=\"n\">Id.run</span> <span class=\"n\">ex</span>\n</code></pre></div>",
        "id": 431497587,
        "sender_full_name": "dxo",
        "timestamp": 1712313904
    },
    {
        "content": "<p>aha, answered my own question by asking it hehe. <code> (do $ss) </code> needed to be <code>(doElem | do $ss)</code>. Sorry for the noise...</p>",
        "id": 431499695,
        "sender_full_name": "dxo",
        "timestamp": 1712314809
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"677008\">dxo</span> has marked this topic as resolved.</p>",
        "id": 431895427,
        "sender_full_name": "Notification Bot",
        "timestamp": 1712565605
    }
]