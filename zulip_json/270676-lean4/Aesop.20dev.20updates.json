[
    {
        "content": "<p>Since Aesop now has some users (cc <span class=\"user-mention\" data-user-id=\"457079\">@Asta Halkjær From</span>, <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> ), I'll log user-facing changes in this topic. Starting with...</p>\n<p><code>9af09347a</code>: Aesop can now be used as a non-terminal tactic. It reports the goals which remain after applying safe rules to the root goal, recursively until no safe rules are applicable. Since this is meant to be used only as a debugging aid, Aesop prints a warning for non-terminal calls, but this can be disabled.</p>",
        "id": 288788318,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1657189580
    },
    {
        "content": "<p>In preparation for the paper submission, I recently made a bunch of changes which clean up Aesop's semantics, but will probably break your code (sorry):</p>\n<ul>\n<li><code>bbe07b</code>: Aesop now depends on <code>std</code>.</li>\n<li><code>28b344</code>: the rule index now uses reducible transparency. This means that, for example, an <code>apply</code> rule with conclusion <code>P (x :: xs)</code> will fail on the goal <code>P ([x] ++ xs)</code>. See discussion at <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/Discrimination.20tree.20lookup\">#lean4 &gt; Discrimination tree lookup</a>.</li>\n<li><code>9c4b4d</code>: the builtin introduction rules for product-like types (<code>And</code>, <code>Prod</code>, etc.) are now safe rather than unsafe.</li>\n<li><code>d96217</code>: safe rules now fail if they generate multiple rule applications (e.g. a safe <code>constructors</code> rule where multiple constructors apply to the goal).</li>\n<li><code>6bcfda</code>: the <code>elim</code> builder is now called <code>destruct</code>, for consistency with Isabelle's terminology.</li>\n</ul>",
        "id": 302049904,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1664798778
    },
    {
        "content": "<ul>\n<li><code>bf3d68</code>: the builtin rules no longer split hypotheses <code>h : P ↔ Q</code> into <code>h1 : P -&gt; Q</code> and <code>h2 : Q -&gt; P</code>. Instead, such hypotheses are now treated as equations via propext (like <code>simp</code> usually does).</li>\n</ul>",
        "id": 302268624,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1664892470
    },
    {
        "content": "<p><code>8cebf2</code>: new feature: <code>aesop?</code> outputs a tactic proof as a <code>Try this:</code> suggestion. The scripts are sometimes still buggy or more cumbersome than necessary, but they work for a large majority of Aesop calls in my test suite.</p>",
        "id": 313957440,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1670245128
    },
    {
        "content": "<p>Perhaps worth mentioning on this thread: aesop now has many more users. It is imported in mathlib4, and being used (experimentally) in the category theory library as a default for structure fields where <code>tidy</code> used to be used in mathlib3. So far (early days) it looks quite promising.</p>",
        "id": 314119779,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670272624
    },
    {
        "content": "<p>I use it as well and it's amazing when configured correctly. I was able to throw out dozens of tedious proofs each with a single aesop invocation the other day.</p>",
        "id": 314127994,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1670275699
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> I'm experimenting with Aesop, it's really cool!</p>\n<p>Could you please give a bit of documentation on the <code>simp_options</code> available (as mentioned in the <a href=\"https://github.com/JLimperg/aesop#setting-options\">readme</a>)?  I'd actually like an option to turn off the simplification step entirely, if that exists.</p>",
        "id": 318929523,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672630101
    },
    {
        "content": "<p>Glad to hear it! The <code>simp_options</code> are a superset of the options supported by <code>simp</code> (i.e. <code>simp (config := { ... })</code>).  Currently the only additional option is <code>use_hyps</code> as documented in the README. There's currently no option to turn off the simp rule entirely, but I'll implement one.</p>",
        "id": 318989100,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1672664889
    },
    {
        "content": "<p><code>72610c</code>: you can now write <code>aesop (simp_options := { enabled := false })</code> to disable the simplification rule entirely (<span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> ). To make this less cumbersome, you can define a wrapper like <a href=\"https://github.com/leanprover-community/mathlib4/blob/b9e19018f94e12dd9019637c10c6224adb2fb63b/Mathlib/CategoryTheory/Category/Basic.lean#L117\"><code>aesop_cat</code></a>.</p>",
        "id": 319018188,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1672675126
    },
    {
        "content": "<p>Thank you!  Looking forward to trying it!</p>",
        "id": 319018868,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672675376
    },
    {
        "content": "<p><code>aea5b4</code>: Aesop now supports local and scoped rules. This required a different implementation strategy for rule sets, which has two additional consequences:</p>\n<ul>\n<li>Aesop rule sets must now be declared in a separate file that then gets imported. (They use <code>initialize</code> internally.)</li>\n<li>When an Aesop rule is erased, e.g. with <code>attribute [-aesop]</code>, it is removed only for the current section/file rather than permanently. This brings <code>@[aesop]</code> in line with other erasable attributes and prevents potential issues where the order of <code>import</code> statements could become semantically relevant.</li>\n</ul>",
        "id": 336543257,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1677260049
    },
    {
        "content": "<p><code>82679d</code>: multiple cosmetic but breaking changes have just landed on Aesop <code>master</code>.</p>\n<ul>\n<li>The syntax for giving options to rule builder has changed from, e.g., <code>@[aesop foo (apply (transparency := reducible))]</code> to <code>@[aesop foo apply (transparency := reducible)]</code>.</li>\n<li>The <code>patterns</code> rule builder option (which can be used to restrict <code>cases</code> rules) has been renamed to <code>cases_patterns</code>.</li>\n<li>The <code>(options := { ... })</code> clause has been renamed to <code>(config := { ... })</code>, for consistency with tactics like <code>simp</code>.</li>\n<li>Similarly, the <code>(simp_options := { ... })</code> clause has been renamed to <code>(simp_config := { ... })</code>.</li>\n<li>The <code>enabled</code> and <code>useHyps</code> options of <code>simp_config</code> have moved to <code>config</code> and are now called <code>enableSimp</code> and <code>useSimpAll</code>. As a result, <code>simp_config</code> now takes exactly the same options as <code>simp (config := ...)</code>.</li>\n</ul>\n<p>I'll prepare a Mathlib patch. Apologies to non-Mathlib dependents.</p>\n<p>There's also a non-breaking change that might be of interest: Aesop now accepts duplicate clauses in <code>@[aesop]</code>, <code>aesop (add ...)</code> and so on. For example, <code>@[aesop safe unsafe 1% ]</code> was previously illegal but now means <code>@[aesop unsafe 1%]</code>.  As a result,<code>@[continuity]</code>, for example, could now expand to <code>@[aesop safe (rule_sets [Continuity])]</code> and <code>@[continuity unsafe 1%]</code> to <code>@[aesop safe (rule_sets [Continuity]) unsafe 1%]</code>.</p>",
        "id": 417198574,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1705919330
    },
    {
        "content": "<p>I don't have the will to fork, but I think the main docstring is out of date: it mentions <code>options := ...</code> still: <br>\n<a href=\"https://github.com/leanprover-community/aesop/blob/2f8ec979f3fa425fc219d635e9aa1487c7b09345/Aesop/Frontend/Tactic.lean#L48\">https://github.com/leanprover-community/aesop/blob/2f8ec979f3fa425fc219d635e9aa1487c7b09345/Aesop/Frontend/Tactic.lean#L48</a></p>",
        "id": 417434106,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1706012454
    },
    {
        "content": "<p>Fixed on master, thanks!</p>",
        "id": 417436009,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1706013139
    },
    {
        "content": "<p><code>bc4363</code>: Some new convenience features:</p>\n<ul>\n<li>You can now write <code>aesop (add ... (f x))</code> to add <code>f x</code> as a <code>forward</code>, <code>apply</code> or <code>simp</code> rule.  <code>f x</code> stands for an arbitrary term and can contain hypotheses. The parentheses around <code>f x</code> are mandatory.</li>\n<li>You can now write <code>aesop (add ... (by norm_num))</code> to add a tactic as a rule. <code>norm_num</code> stands for an arbitrary sequence of tactics and can contain hypotheses. Again, the parentheses are mandatory.</li>\n<li>There's a new command <code>add_aesop_rules</code> with the same syntax as the <code>add</code> clause, e.g. <code>add_aesop_rules 1% [(by norm_num), apply f]</code>. This command is particularly useful for adding tactics since, unlike most existing approaches, it works with <code>aesop?</code>.</li>\n</ul>\n<p>To enable these features, I had to make one backward-incompatible change: the <code>rule_sets</code> clauses are now written <code>(rule_sets := [...])</code> instead of <code>(rule_sets [...])</code>. Sorry for the breakage.</p>\n<p>Mathlib bump: <a href=\"https://github.com/leanprover-community/mathlib4/pull/10859\">#10859</a></p>",
        "id": 422883041,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1708627736
    },
    {
        "content": "<p>Are the three dots verbatim?</p>",
        "id": 422890848,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1708630458
    },
    {
        "content": "<p>^ No, they refer to a list of rule set identifiers, like <code>Continuous, Bound</code>.</p>",
        "id": 422892953,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1708631262
    },
    {
        "content": "<p>Or a list of rule features, if you mean the earlier dots.</p>",
        "id": 422893056,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1708631292
    },
    {
        "content": "<p>10 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/zetaDelta.20in.20Aesop.20simp\">#lean4 &gt; zetaDelta in Aesop simp</a> by <span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span>.</p>",
        "id": 423669431,
        "sender_full_name": "Notification Bot",
        "timestamp": 1709057740
    }
]