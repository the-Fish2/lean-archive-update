[
    {
        "content": "<p>Is it possible to run tactics after an <code>induction ... with</code>, but before any of the cases in the induction? I couldn't find any syntax which seemed to make this work.</p>",
        "id": 431317328,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1712238403
    },
    {
        "content": "<p>Allegedly this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">toDigitsCore_lens_eq_aux</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l1</span> <span class=\"n\">l2</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span><span class=\"o\">),</span> <span class=\"n\">l1.length</span> <span class=\"bp\">=</span> <span class=\"n\">l2.length</span> <span class=\"bp\">→</span>\n    <span class=\"o\">(</span><span class=\"n\">Nat.toDigitsCore</span> <span class=\"n\">b</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"n\">l1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">Nat.toDigitsCore</span> <span class=\"n\">b</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"n\">l2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">f</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Nat.toDigitsCore</span><span class=\"o\">,</span> <span class=\"n\">List.length</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">n</span> <span class=\"n\">l1</span> <span class=\"n\">l2</span> <span class=\"n\">hlen</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">assumption</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">f</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n</code></pre></div>",
        "id": 431319057,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1712238870
    },
    {
        "content": "<p>hmmm... doesn't seem to work in my use case anyway. (but what I have is a bit hard to <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>)</p>",
        "id": 431319488,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1712238997
    },
    {
        "content": "<p>Isn't it <code>&lt;;&gt;</code> not <code>;</code>?</p>",
        "id": 431376921,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712254631
    },
    {
        "content": "<p>I copied that straight from mathlib</p>",
        "id": 431377515,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1712254877
    }
]