[
    {
        "content": "<p>Dumb question, what's the tactic combinator called that fails if the goal isn't completely solved?</p>\n<p>Basically, I have an induction proof that I'm using tactics to filter out the easy cases for, but I'm having the problem that those tactics are being applied.</p>\n<p>So I've got a block like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">induction</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n    <span class=\"o\">(</span><span class=\"n\">first</span> <span class=\"bp\">|</span> <span class=\"n\">t1</span> <span class=\"bp\">|</span> <span class=\"n\">t2</span> <span class=\"bp\">|</span> <span class=\"n\">t3</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span>  <span class=\"n\">HardCase</span> <span class=\"n\">y</span> <span class=\"n\">z</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">foo</span>\n</code></pre></div>\n<p>But I only want to apply t1 or t2 or t3 if they can completely solve the case. \\</p>\n<p>The problem I'm having is that when I go into <code>HardCase</code> that t1 has already been applied but didn't fully solve the goal. How can I prevent it from being applied to cases that it can't fully solve?</p>",
        "id": 433849409,
        "sender_full_name": "Joey Eremondi",
        "timestamp": 1713378422
    },
    {
        "content": "<p>you can do <code>t1 ; done</code></p>",
        "id": 433849751,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1713378549
    },
    {
        "content": "<p>To expand a bit, the tactic <code>done</code> throws an error if there are any goals present. So by doing <code>t1 ; done</code>, that will ensure that no goals are present after <code>t1</code>, and otherwise attempt <code>t2</code>.</p>",
        "id": 433853110,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1713379702
    },
    {
        "content": "<p>Putting it all together:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">induction</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n    <span class=\"o\">(</span><span class=\"n\">first</span> <span class=\"bp\">|</span> <span class=\"n\">t1</span> <span class=\"bp\">;</span> <span class=\"n\">done</span> <span class=\"bp\">|</span> <span class=\"n\">t2</span> <span class=\"bp\">;</span> <span class=\"n\">done</span> <span class=\"bp\">|</span> <span class=\"n\">t3</span> <span class=\"bp\">;</span> <span class=\"n\">done</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span>  <span class=\"n\">HardCase</span> <span class=\"n\">y</span> <span class=\"n\">z</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">foo</span>\n</code></pre></div>",
        "id": 433853212,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1713379740
    },
    {
        "content": "<p>Here's something else that might work, though you might need to parenthesize the cases (like <code>(路 t1)</code>)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">induction</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n    <span class=\"o\">(</span><span class=\"n\">first</span> <span class=\"bp\">|</span> <span class=\"bp\">路</span> <span class=\"n\">t1</span> <span class=\"bp\">|</span> <span class=\"bp\">路</span> <span class=\"n\">t2</span> <span class=\"bp\">|</span> <span class=\"bp\">路</span> <span class=\"n\">t3</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span>  <span class=\"n\">HardCase</span> <span class=\"n\">y</span> <span class=\"n\">z</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">foo</span>\n</code></pre></div>",
        "id": 433860532,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713382232
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"384488\">Joey Eremondi</span> has marked this topic as resolved.</p>",
        "id": 433871051,
        "sender_full_name": "Notification Bot",
        "timestamp": 1713386341
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"384488\">Joey Eremondi</span> has marked this topic as unresolved.</p>",
        "id": 433871060,
        "sender_full_name": "Notification Bot",
        "timestamp": 1713386346
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"384488\">Joey Eremondi</span> has marked this topic as resolved.</p>",
        "id": 433871069,
        "sender_full_name": "Notification Bot",
        "timestamp": 1713386351
    },
    {
        "content": "<p>Thanks both, that's exactly what I wanted.</p>",
        "id": 433871130,
        "sender_full_name": "Joey Eremondi",
        "timestamp": 1713386387
    }
]