[
    {
        "content": "<p>If I'm doing embarrassingly parallel computation of a bunch of function calls <code>f 0, f1, ..., f (n-1)</code>, is there a recommended best strategy for creating <code>Task</code> objects for maximum parallelism?  Currently I have some code using binary splitting (chopping the interval in half until it is below a chunk size), but it doesn't seem to be parallelizing in practice.</p>\n<p>Here is my current binary splitting routine:</p>\n<p><a href=\"https://github.com/girving/ray/blob/834ba75ba274a95834147b155d1d87f12896b3af/Ray/Render/Image.lean#L141\">https://github.com/girving/ray/blob/834ba75ba274a95834147b155d1d87f12896b3af/Ray/Render/Image.lean#L141</a></p>",
        "id": 420488406,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1707407900
    },
    {
        "content": "<p>In particular, is this \"make two Tasks\", then combine them via <code>bind</code> the right approach?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Build a color array out of a function, parallelizing down to chunks of size `≤ chunk` -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">parallel_colors'</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Color</span> <span class=\"n\">UInt8</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">o</span> <span class=\"n\">chunk</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Task</span> <span class=\"n\">ByteArray</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">max</span> <span class=\"mi\">1</span> <span class=\"n\">chunk</span> <span class=\"k\">then</span>\n    <span class=\"n\">Task.spawn</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">push_colors</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"n\">o</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">mkEmpty</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n  <span class=\"k\">else</span>\n    <span class=\"k\">let</span> <span class=\"n\">n0</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n    <span class=\"k\">let</span> <span class=\"n\">t0</span> <span class=\"o\">:=</span> <span class=\"n\">parallel_colors'</span> <span class=\"n\">f</span> <span class=\"n\">n0</span> <span class=\"n\">o</span> <span class=\"n\">chunk</span>\n    <span class=\"k\">let</span> <span class=\"n\">t1</span> <span class=\"o\">:=</span> <span class=\"n\">parallel_colors'</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">n0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">o</span> <span class=\"bp\">+</span> <span class=\"n\">n0</span><span class=\"o\">)</span> <span class=\"n\">chunk</span>\n    <span class=\"n\">t0.bind</span> <span class=\"k\">fun</span> <span class=\"n\">b0</span> <span class=\"bp\">↦</span> <span class=\"n\">t1.bind</span> <span class=\"k\">fun</span> <span class=\"n\">b1</span> <span class=\"bp\">↦</span> <span class=\"n\">Task.pure</span> <span class=\"o\">(</span><span class=\"n\">b0</span> <span class=\"bp\">++</span> <span class=\"n\">b1</span><span class=\"o\">)</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">n</span> <span class=\"n\">decreasing_by</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">n0_lt_n</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">assumption</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">n1_lt_n</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">assumption</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 420488547,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1707407945
    },
    {
        "content": "<p>Is there a lake flag or environment variable to set the number of threads?  I don't see anything mentioned in the <code>Task</code> documentation, unfortunately:</p>\n<p><a href=\"https://lean-lang.org/lean4/doc/task.html\">https://lean-lang.org/lean4/doc/task.html</a></p>",
        "id": 420489739,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1707408263
    },
    {
        "content": "<p>Re environment variable: LEAN_NUM_THREADS</p>",
        "id": 420493977,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1707409392
    },
    {
        "content": "<p>^ No effect, unfortunately: it still pins exactly one core.</p>",
        "id": 420494297,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1707409489
    },
    {
        "content": "<p>Here's a self-contained example, which similarly seems to run on one thread:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Order.Floor.Div</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">!</span>\n<span class=\"cm\">## Try to do trial division for primes in parallel</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">slow_prime_loop</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n<span class=\"bp\">|</span> <span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">!=</span> <span class=\"mi\">0</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">slow_prime_loop</span> <span class=\"n\">n</span> <span class=\"n\">k</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">slow_prime</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">slow_prime_loop</span> <span class=\"n\">n</span> <span class=\"n\">n.sqrt</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">count_range</span> <span class=\"o\">(</span><span class=\"n\">lo</span> <span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"bp\">-</span> <span class=\"n\">lo</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fold</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"n\">t</span> <span class=\"bp\">↦</span> <span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"k\">if</span> <span class=\"n\">slow_prime</span> <span class=\"o\">(</span><span class=\"n\">lo</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">count</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">chunk</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">tasks</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Array.range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">⌊/⌋</span> <span class=\"n\">chunk</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">c</span> <span class=\"bp\">↦</span> <span class=\"n\">Task.spawn</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span>\n    <span class=\"n\">count_range</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">chunk</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">c</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">chunk</span><span class=\"o\">)))</span>\n  <span class=\"n\">tasks.foldl</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"n\">t</span> <span class=\"bp\">↦</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">t.get</span><span class=\"o\">)</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"mi\">1000</span> <span class=\"bp\">*</span> <span class=\"mi\">1000</span> <span class=\"bp\">*</span> <span class=\"mi\">1000</span>\n  <span class=\"n\">IO.println</span> <span class=\"o\">(</span><span class=\"s2\">\"n = \"</span> <span class=\"bp\">++</span> <span class=\"n\">repr</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"n\">IO.println</span> <span class=\"o\">(</span><span class=\"s2\">\"π(n) = \"</span> <span class=\"bp\">++</span> <span class=\"n\">repr</span> <span class=\"o\">(</span><span class=\"n\">count</span> <span class=\"n\">n</span> <span class=\"mi\">1000</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 420551820,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1707430815
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> Can I ask about how you do parallelism in <a href=\"https://github.com/kmill/lean4-raytracer/blob/d45a2d3cff9e66eb0296435beda3f147fa5dc5b6/Main.lean#L264\">https://github.com/kmill/lean4-raytracer/blob/d45a2d3cff9e66eb0296435beda3f147fa5dc5b6/Main.lean#L264</a>?  </p>\n<p>Ah, I think I just figured it out: I was confused since it seems like all threads are just rendering the same image, but in fact that's exactly what they are doing: they're just doing different point samples and then averaging.</p>",
        "id": 420614165,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1707471029
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> While I have you, any chance I could get a hint what might be failing to parallelize here?</p>",
        "id": 420620655,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1707473450
    },
    {
        "content": "<p>I'm not sure, sorry. You might want to look at the IR!</p>",
        "id": 420620844,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1707473524
    },
    {
        "content": "<p>Yes, that's a good idea now that I can do it.  Thanks!</p>",
        "id": 420620899,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1707473545
    },
    {
        "content": "<p>Alas, the IR seems perfectly reasonable, and I don't see any problems: it does a specialized <a href=\"http://Array.map\">Array.map</a> to make the tasks, which look appropriately lazy, then a specialized Array.foldl.  So the problem is elsewhere.  I'll keep tinkering (though probably not today).</p>\n<p>Names changed below from the original IR for readability:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">map_lambda</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"bp\">@&amp;</span> <span class=\"n\">obj</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_2</span> <span class=\"o\">:</span> <span class=\"bp\">@&amp;</span> <span class=\"n\">obj</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_3</span> <span class=\"o\">:</span> <span class=\"bp\">@&amp;</span> <span class=\"n\">obj</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_4</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.mul</span> <span class=\"n\">x_1</span> <span class=\"n\">x_2</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_5</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_6</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.add</span> <span class=\"n\">x_1</span> <span class=\"n\">x_5</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_7</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.mul</span> <span class=\"n\">x_6</span> <span class=\"n\">x_2</span><span class=\"bp\">;</span>\n  <span class=\"n\">dec</span> <span class=\"n\">x_6</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_8</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">count_range</span> <span class=\"n\">x_4</span> <span class=\"n\">x_7</span><span class=\"bp\">;</span>\n  <span class=\"n\">dec</span> <span class=\"n\">x_4</span><span class=\"bp\">;</span>\n  <span class=\"n\">ret</span> <span class=\"n\">x_8</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">map_lambda_boxed</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_2</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_3</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_4</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">map_lambda</span> <span class=\"n\">x_1</span> <span class=\"n\">x_2</span> <span class=\"n\">x_3</span><span class=\"bp\">;</span>\n  <span class=\"n\">dec</span> <span class=\"n\">x_3</span><span class=\"bp\">;</span>\n  <span class=\"n\">dec</span> <span class=\"n\">x_2</span><span class=\"bp\">;</span>\n  <span class=\"n\">dec</span> <span class=\"n\">x_1</span><span class=\"bp\">;</span>\n  <span class=\"n\">ret</span> <span class=\"n\">x_4</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">map_count</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_2</span> <span class=\"o\">:</span> <span class=\"n\">usize</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_3</span> <span class=\"o\">:</span> <span class=\"n\">usize</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_4</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_5</span> <span class=\"o\">:</span> <span class=\"n\">u8</span> <span class=\"o\">:=</span> <span class=\"n\">USize.decLt</span> <span class=\"n\">x_3</span> <span class=\"n\">x_2</span><span class=\"bp\">;</span>\n  <span class=\"n\">case</span> <span class=\"n\">x_5</span> <span class=\"o\">:</span> <span class=\"n\">u8</span> <span class=\"n\">of</span>\n  <span class=\"n\">Bool.false</span> <span class=\"bp\">→</span>\n    <span class=\"n\">dec</span> <span class=\"n\">x_1</span><span class=\"bp\">;</span>\n    <span class=\"n\">ret</span> <span class=\"n\">x_4</span>\n  <span class=\"n\">Bool.true</span> <span class=\"bp\">→</span>\n    <span class=\"k\">let</span> <span class=\"n\">x_6</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">Array.uget</span> <span class=\"bp\">◾</span> <span class=\"n\">x_4</span> <span class=\"n\">x_3</span> <span class=\"bp\">◾;</span>\n    <span class=\"k\">let</span> <span class=\"n\">x_7</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">x_8</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">Array.uset</span> <span class=\"bp\">◾</span> <span class=\"n\">x_4</span> <span class=\"n\">x_3</span> <span class=\"n\">x_7</span> <span class=\"bp\">◾;</span>\n    <span class=\"n\">inc</span> <span class=\"n\">x_1</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">x_9</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">pap</span> <span class=\"n\">map_lambda_boxed</span> <span class=\"n\">x_6</span> <span class=\"n\">x_1</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">x_10</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">Task.Priority.default</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">x_11</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">Task.spawn</span> <span class=\"bp\">◾</span> <span class=\"n\">x_9</span> <span class=\"n\">x_10</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">x_12</span> <span class=\"o\">:</span> <span class=\"n\">usize</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">x_13</span> <span class=\"o\">:</span> <span class=\"n\">usize</span> <span class=\"o\">:=</span> <span class=\"n\">USize.add</span> <span class=\"n\">x_3</span> <span class=\"n\">x_12</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">x_14</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">Array.uset</span> <span class=\"bp\">◾</span> <span class=\"n\">x_8</span> <span class=\"n\">x_3</span> <span class=\"n\">x_11</span> <span class=\"bp\">◾;</span>\n    <span class=\"k\">let</span> <span class=\"n\">x_15</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">map_count</span> <span class=\"n\">x_1</span> <span class=\"n\">x_2</span> <span class=\"n\">x_13</span> <span class=\"n\">x_14</span><span class=\"bp\">;</span>\n    <span class=\"n\">ret</span> <span class=\"n\">x_15</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">count_foldl</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"bp\">@&amp;</span> <span class=\"n\">obj</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_2</span> <span class=\"o\">:</span> <span class=\"n\">usize</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_3</span> <span class=\"o\">:</span> <span class=\"n\">usize</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_4</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_5</span> <span class=\"o\">:</span> <span class=\"n\">u8</span> <span class=\"o\">:=</span> <span class=\"n\">USize.decEq</span> <span class=\"n\">x_2</span> <span class=\"n\">x_3</span><span class=\"bp\">;</span>\n  <span class=\"n\">case</span> <span class=\"n\">x_5</span> <span class=\"o\">:</span> <span class=\"n\">u8</span> <span class=\"n\">of</span>\n  <span class=\"n\">Bool.false</span> <span class=\"bp\">→</span>\n    <span class=\"k\">let</span> <span class=\"n\">x_6</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">Array.uget</span> <span class=\"bp\">◾</span> <span class=\"n\">x_1</span> <span class=\"n\">x_2</span> <span class=\"bp\">◾;</span>\n    <span class=\"k\">let</span> <span class=\"n\">x_7</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">Task.get</span> <span class=\"bp\">◾</span> <span class=\"n\">x_6</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">x_8</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.add</span> <span class=\"n\">x_4</span> <span class=\"n\">x_7</span><span class=\"bp\">;</span>\n    <span class=\"n\">dec</span> <span class=\"n\">x_7</span><span class=\"bp\">;</span>\n    <span class=\"n\">dec</span> <span class=\"n\">x_4</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">x_9</span> <span class=\"o\">:</span> <span class=\"n\">usize</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">x_10</span> <span class=\"o\">:</span> <span class=\"n\">usize</span> <span class=\"o\">:=</span> <span class=\"n\">USize.add</span> <span class=\"n\">x_2</span> <span class=\"n\">x_9</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">x_11</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">count_foldl</span> <span class=\"n\">x_1</span> <span class=\"n\">x_10</span> <span class=\"n\">x_3</span> <span class=\"n\">x_8</span><span class=\"bp\">;</span>\n    <span class=\"n\">ret</span> <span class=\"n\">x_11</span>\n  <span class=\"n\">Bool.true</span> <span class=\"bp\">→</span>\n    <span class=\"n\">ret</span> <span class=\"n\">x_4</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">count</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_2</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_3</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.div</span> <span class=\"n\">x_1</span> <span class=\"n\">x_2</span><span class=\"bp\">;</span>\n  <span class=\"n\">dec</span> <span class=\"n\">x_1</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_4</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">Array.range</span> <span class=\"n\">x_3</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_5</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">Array.size</span> <span class=\"bp\">◾</span> <span class=\"n\">x_4</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_6</span> <span class=\"o\">:</span> <span class=\"n\">usize</span> <span class=\"o\">:=</span> <span class=\"n\">USize.ofNat</span> <span class=\"n\">x_5</span><span class=\"bp\">;</span>\n  <span class=\"n\">dec</span> <span class=\"n\">x_5</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_7</span> <span class=\"o\">:</span> <span class=\"n\">usize</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_8</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">map_count</span> <span class=\"n\">x_2</span> <span class=\"n\">x_6</span> <span class=\"n\">x_7</span> <span class=\"n\">x_4</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_9</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">Array.size</span> <span class=\"bp\">◾</span> <span class=\"n\">x_8</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_10</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_11</span> <span class=\"o\">:</span> <span class=\"n\">u8</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.decLt</span> <span class=\"n\">x_10</span> <span class=\"n\">x_9</span><span class=\"bp\">;</span>\n  <span class=\"n\">case</span> <span class=\"n\">x_11</span> <span class=\"o\">:</span> <span class=\"n\">u8</span> <span class=\"n\">of</span>\n  <span class=\"n\">Bool.false</span> <span class=\"bp\">→</span>\n    <span class=\"n\">dec</span> <span class=\"n\">x_9</span><span class=\"bp\">;</span>\n    <span class=\"n\">dec</span> <span class=\"n\">x_8</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">x_12</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n    <span class=\"n\">ret</span> <span class=\"n\">x_12</span>\n  <span class=\"n\">Bool.true</span> <span class=\"bp\">→</span>\n    <span class=\"k\">let</span> <span class=\"n\">x_13</span> <span class=\"o\">:</span> <span class=\"n\">u8</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.decLe</span> <span class=\"n\">x_9</span> <span class=\"n\">x_9</span><span class=\"bp\">;</span>\n    <span class=\"n\">case</span> <span class=\"n\">x_13</span> <span class=\"o\">:</span> <span class=\"n\">u8</span> <span class=\"n\">of</span>\n    <span class=\"n\">Bool.false</span> <span class=\"bp\">→</span>\n      <span class=\"n\">dec</span> <span class=\"n\">x_9</span><span class=\"bp\">;</span>\n      <span class=\"n\">dec</span> <span class=\"n\">x_8</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">x_14</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n      <span class=\"n\">ret</span> <span class=\"n\">x_14</span>\n    <span class=\"n\">Bool.true</span> <span class=\"bp\">→</span>\n      <span class=\"k\">let</span> <span class=\"n\">x_15</span> <span class=\"o\">:</span> <span class=\"n\">usize</span> <span class=\"o\">:=</span> <span class=\"n\">USize.ofNat</span> <span class=\"n\">x_9</span><span class=\"bp\">;</span>\n      <span class=\"n\">dec</span> <span class=\"n\">x_9</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">x_16</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">count_foldl</span> <span class=\"n\">x_8</span> <span class=\"n\">x_7</span> <span class=\"n\">x_15</span> <span class=\"n\">x_10</span><span class=\"bp\">;</span>\n      <span class=\"n\">dec</span> <span class=\"n\">x_8</span><span class=\"bp\">;</span>\n      <span class=\"n\">ret</span> <span class=\"n\">x_16</span>\n</code></pre></div>",
        "id": 420624745,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1707474942
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"514145\">@Geoffrey Irving</span> I have another parallelism example that splits work across multiple threads too. Here's where tasks are created and then waited upon: <a href=\"https://github.com/kmill/arrow_poly/blob/master/Main.lean#L117-L123\">https://github.com/kmill/arrow_poly/blob/master/Main.lean#L117-L123</a></p>",
        "id": 420693026,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1707497765
    },
    {
        "content": "<p>Interesting, the systematic difference is that your code has \"less functional\" tasks, in that the tasks themselves are inside the IO monad too (and do IO monad loops).  I'll try that, though it's unfortunate that the non-IO version doesn't work.</p>",
        "id": 420722576,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1707509116
    },
    {
        "content": "<p>Oh right, a gotcha in your example is that <code>count_range (c * chunk) ((c+1) * chunk)</code> is free to be hoisted out of <code>Task.spawn</code></p>",
        "id": 420722915,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1707509263
    },
    {
        "content": "<p>Though as noted above the IR doesn't show that hoisting.</p>",
        "id": 420723024,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1707509302
    }
]