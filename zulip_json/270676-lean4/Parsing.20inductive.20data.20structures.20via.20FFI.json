[
    {
        "content": "<p>Is there a way to parse inductive data structures (e.g. <code>Expr</code> objects) via the FFI?</p>\n<p>For example if <code>lean_object *obj</code> is an <code>Expr</code>, how can I read which constructor produced it and read the arguments to that constructor?</p>",
        "id": 425201568,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1709770164
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/blob/master/src/include/lean/lean.h#L456\"><code>lean_is_ctor</code></a> and <a href=\"https://github.com/leanprover/lean4/blob/master/src/include/lean/lean.h#L385\"><code>lean_ptr_tag</code></a> are probably the functions you're looking for. I would recommend you follow the kernel's approach of defining an enum class for the datatype (e.g., <a href=\"https://github.com/leanprover/lean4/blob/master/src/kernel/expr.h#L84\"><code>expr_kind</code></a>) and a function (e.g., <a href=\"https://github.com/leanprover/lean4/blob/master/src/kernel/expr.h#L106\"><code>expr::kind</code></a>) that returns the enum directly.</p>",
        "id": 425215998,
        "sender_full_name": "Abdalrhman M Mohamed",
        "timestamp": 1709779266
    },
    {
        "content": "<p>honestly <a href=\"https://docs.rs/lean-sys/latest/lean_sys/\">https://docs.rs/lean-sys/latest/lean_sys/</a> might be helpful if only for having generated docs :P</p>",
        "id": 425250275,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1709799740
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/Parsing.20inductive.20data.20structures.20via.20FFI/near/425250275\">said</a>:</p>\n<blockquote>\n<p>honestly <a href=\"https://docs.rs/lean-sys/latest/lean_sys/\">https://docs.rs/lean-sys/latest/lean_sys/</a> might be helpful if only for having generated docs :P</p>\n</blockquote>\n<p>I'm kind of skeptical about this project since it doesn't pin down the Lean version and also it doesn't really encapsulate the interface in <code>lean.h</code>. I find that bindgen is good enough for my purposes</p>",
        "id": 425250441,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1709799835
    },
    {
        "content": "<p>I have a project which does a higher level interface but it's a lot more work to design that</p>",
        "id": 425357480,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709832215
    },
    {
        "content": "<p>it doesn't pin the lean version because this would cause rust versioning issues, but lean.h doesn't change much</p>",
        "id": 425357664,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709832267
    },
    {
        "content": "<p>I'm not really sure how best to do versioning in lean-sys. The lean version pin should happen in the project using lean-sys</p>",
        "id": 425358542,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709832545
    },
    {
        "content": "<p>updated to lean 4.6.0</p>",
        "id": 425362384,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709833863
    }
]