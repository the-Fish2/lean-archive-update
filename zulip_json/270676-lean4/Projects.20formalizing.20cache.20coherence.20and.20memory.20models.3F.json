[
    {
        "content": "<p>Hi, I'm wondering if anyone is aware of lean/lean4 projects that formalize the semantics of hardware cache coherence or memory models?  I'm trying to come up with a formalization of these topics, and it would be great to have a reference of some kind. Any pointers would be appreciated!</p>",
        "id": 410388771,
        "sender_full_name": "Zhuanhao Wu",
        "timestamp": 1703825736
    },
    {
        "content": "<p>I think you might struggle to find such projects in Lean; there are currently relatively few people formalizing CS theory/PL/FM in Lean.</p>\n<p>However, I know that there are Coq formalizations of memory and cache models, and Coq formalizations can still be a good references for Lean formalization, since the type theory is mostly the same!</p>",
        "id": 410390693,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1703827196
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315434\">@Andrés Goens</span> ping</p>",
        "id": 410400766,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1703835281
    },
    {
        "content": "<p>Yeah, <span class=\"user-mention\" data-user-id=\"407274\">@James Gallicchio</span> is right that you'll find more projects in Coq (and that's a good reference).</p>\n<p>I did formalize a few memory consistency models (operetional semantics) in <a href=\"https://github.com/goens/lost-pop-lean\">this repo</a>, it's not updated to the latest versions of Lean but that shouldn't be a big issue (will do that soon), but one big issue is that it's currently all formalized using <code>bool</code> and not <code>prop</code> for the preconditions, I can discuss that more if you're interested. I don't know that there's much in the way of declarative semantics (sometimes called \"axiomatic\"), but I'm looking into that too in the near future.</p>\n<p><span class=\"user-mention\" data-user-id=\"649880\">@Z. Wu</span> are you looking to formalize something concrete? If you tell us more about it we might be able to give more concrete pointers</p>",
        "id": 410409250,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1703841509
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315434\">@Andrés Goens</span>  Thanks, I think the link you sent seems a good start!<br>\nAnd yeah, i'm curious - are you using <code>bool</code> instead of <code>prop</code> for specific reasons?</p>\n<p>Yes, and any pointers would be appreciated!</p>\n<p>I'm mainly interested in formalizing coherence protocols and attach timestamp to them to reason about the worst-case latency of requests. And the formalization needs to capture hardware details such as arbitration between cores/transient states in the protocol.</p>\n<p>And the long term goal is to  study the interaction between the consistency model and the coherence/underlying hardware with respect to latency by connecting the coherence formalization and the consistency model.</p>",
        "id": 410453348,
        "sender_full_name": "Zhuanhao Wu",
        "timestamp": 1703869556
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"649880\">@Z. Wu</span> , sorry, was on a bit of a holiday break not looking at Zulip too much <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> I think the primary reason I went for <code>bool</code> was that it was simpler, I was doing some weird stuff with typeclasses to emulate a module system and honestly didn't understand <code>Decidable</code> that well when I started with that</p>\n<p>That sounds like a really interesting project! In that case you porbably do want to reason about it operationally, right? So that you can reason about things like abstraction or bisimulation relations, etc. I think we don't have too many tools for working with operational semantics in Lean 4 yet (compared to e.g. Isabelle, where they can automatically derive the computability of a relation in many cases, etc), but it would probably be nice to build more of that infrastructure</p>",
        "id": 411351156,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1704453358
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315434\">@Andrés Goens</span> yeah, I can somehow relate to the <code>bool</code> vs <code>prop</code> issue in terms of ease of use!</p>\n<p>Thank you for the pointers! I think I will definitely try to look at the bisimulation/abstraction. And I will probably also look at labeled transition systems and trace refinement.<br>\nAnd yeah, true, I wish we could have tools/library that automate things - I was reading the \"concrete semantics\" book and figured that there's plenty of things we could improve in lean4</p>",
        "id": 411399611,
        "sender_full_name": "Zhuanhao Wu",
        "timestamp": 1704473401
    }
]