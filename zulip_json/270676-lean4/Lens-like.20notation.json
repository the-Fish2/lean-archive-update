[
    {
        "content": "<p>Would it be possible to add a notation for updating a field structure? I often find myself with code like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">withReader</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">c</span> <span class=\"k\">with</span> <span class=\"n\">fvars</span> <span class=\"o\">:=</span> <span class=\"n\">fvar</span> <span class=\"o\">::</span> <span class=\"n\">c.fvars</span> <span class=\"o\">})</span>\n</code></pre></div>\n<p>And I would much prefer something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">withReader</span> <span class=\"o\">(</span><span class=\"n\">fvars</span> <span class=\"bp\">%~</span> <span class=\"o\">(</span><span class=\"n\">fvar</span> <span class=\"o\">::</span> <span class=\"bp\">·</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>I don't mind what the syntax exactly looks like, but something like this would make code a lot cleaner.<br>\nFor example in Haskell, this notation is possible using lenses, so maybe some of those features could be reproduced in lean.<br>\nHere's my simple attempt:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"n\">ident</span> <span class=\"s2\">\"%~\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">syntax</span> <span class=\"n\">ident</span> <span class=\"s2\">\"%~\"</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">%~</span> <span class=\"bp\">$</span><span class=\"n\">f</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">({</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">f</span> <span class=\"bp\">$</span><span class=\"n\">x.</span><span class=\"bp\">$</span><span class=\"n\">n</span> <span class=\"o\">})</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">%~</span> <span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">f</span> <span class=\"n\">x.</span><span class=\"bp\">$</span><span class=\"n\">n</span> <span class=\"o\">})</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">%~</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">x.</span><span class=\"bp\">$</span><span class=\"n\">n</span> <span class=\"o\">})</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">fst</span> <span class=\"bp\">%~</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"c1\">-- (2,3)</span>\n</code></pre></div>",
        "id": 409670188,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1703296138
    },
    {
        "content": "<p>There was some work on lenses / optics in <a href=\"https://github.com/leanprover-community/mathlib4/pull/282\">#282</a>, which takes the approach of deriving with and modify functions rather than adding notation</p>",
        "id": 409707842,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1703329075
    },
    {
        "content": "<p>I suppose the advantage of a notation is that you can use it on all data types since you don't have to explicitly <code>derive_optics </code></p>",
        "id": 409714784,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1703335459
    }
]