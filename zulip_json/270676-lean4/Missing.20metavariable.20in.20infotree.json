[
    {
        "content": "<p>When I run <code>inferType</code> on <code>termInfo</code>s in the <code>InfoTree</code>, it seems that sometimes they fail.</p>\n<p>My testcase is the following</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Lean</span>\n\n<span class=\"c1\">-- template thanks to Kyle</span>\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"w\"> </span><span class=\"n\">Elab</span><span class=\"w\"> </span><span class=\"n\">Command</span><span class=\"w\"> </span><span class=\"k\">in</span>\n<span class=\"kn\">elab</span><span class=\"w\"> </span><span class=\"s2\">\"#info \"</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">initInfoTrees</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">getResetInfoTrees</span>\n<span class=\"w\">  </span><span class=\"n\">try</span>\n<span class=\"w\">    </span><span class=\"n\">elabCommand</span><span class=\"w\"> </span><span class=\"n\">c</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">t</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">getInfoTrees</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toArray</span><span class=\"w\"> </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">throwError</span><span class=\"w\"> </span><span class=\"s2\">\"Expected one tree\"</span>\n<span class=\"w\">    </span><span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"n\">visitM'</span>\n<span class=\"w\">      </span><span class=\"o\">(</span><span class=\"n\">preNode</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"w\"> </span><span class=\"n\">info</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">ofTermInfo</span><span class=\"w\"> </span><span class=\"n\">ti</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">info</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">          </span><span class=\"n\">discard</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"bp\">.</span><span class=\"n\">runMetaM</span><span class=\"w\"> </span><span class=\"n\">ti</span><span class=\"bp\">.</span><span class=\"n\">lctx</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">            </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">Meta</span><span class=\"bp\">.</span><span class=\"n\">inferType</span><span class=\"w\"> </span><span class=\"n\">ti</span><span class=\"bp\">.</span><span class=\"n\">expr</span>\n<span class=\"w\">            </span><span class=\"n\">PrettyPrinter</span><span class=\"bp\">.</span><span class=\"n\">ppExpr</span><span class=\"w\"> </span><span class=\"n\">t</span>\n<span class=\"w\">            </span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"n\">finally</span>\n<span class=\"w\">    </span><span class=\"n\">modify</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">st</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">      </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">st</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"n\">infoState</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">st</span><span class=\"bp\">.</span><span class=\"n\">infoState</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"n\">trees</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">initInfoTrees</span><span class=\"w\"> </span><span class=\"bp\">++</span><span class=\"w\"> </span><span class=\"n\">st</span><span class=\"bp\">.</span><span class=\"n\">infoState</span><span class=\"bp\">.</span><span class=\"n\">trees</span><span class=\"w\"> </span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">}</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">add_comm</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Add</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n\n<span class=\"bp\">#</span><span class=\"n\">info</span>\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">rewrite</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"bp\">*</span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">unknown</span><span class=\"w\"> </span><span class=\"n\">metavariable</span><span class=\"w\"> </span><span class=\"bp\">'?_</span><span class=\"n\">uniq</span><span class=\"bp\">.</span><span class=\"m\">1860</span><span class=\"bp\">'</span>\n</code></pre></div>",
        "id": 445156929,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718637127
    },
    {
        "content": "<p>The problem is specifically the <code>at *</code>; presumably the infotree is being populated with garbage by <code>rw [add_comm] at x</code></p>",
        "id": 445157019,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718637154
    },
    {
        "content": "<p>Generally speaking, is it safe to inferType on terms within infotrees? Will they contain unresolved metavariables? Or are the trees populated only once everything is resolved?</p>",
        "id": 445197939,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718649044
    },
    {
        "content": "<p>There seems to be something wrong with whatever <code>ctx.runMetaM</code> does. At the least, since it adapts the MetaM monad to IO, it drops all log info.</p>\n<p>You can set the mctx and lctx manually if you switch to TermElabM:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"w\"> </span><span class=\"n\">Elab</span><span class=\"w\"> </span><span class=\"n\">Command</span><span class=\"w\"> </span><span class=\"k\">in</span>\n<span class=\"kn\">elab</span><span class=\"w\"> </span><span class=\"s2\">\"#info \"</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">initInfoTrees</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">getResetInfoTrees</span>\n<span class=\"w\">  </span><span class=\"n\">try</span>\n<span class=\"w\">    </span><span class=\"n\">elabCommand</span><span class=\"w\"> </span><span class=\"n\">c</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">t</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">getInfoTrees</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toArray</span><span class=\"w\"> </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">throwError</span><span class=\"w\"> </span><span class=\"s2\">\"Expected one tree\"</span>\n<span class=\"w\">    </span><span class=\"n\">liftTermElabM</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">      </span><span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"n\">visitM'</span>\n<span class=\"w\">        </span><span class=\"o\">(</span><span class=\"n\">preNode</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"w\"> </span><span class=\"n\">info</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">          </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">ofTermInfo</span><span class=\"w\"> </span><span class=\"n\">ti</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">info</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">            </span><span class=\"n\">Meta</span><span class=\"bp\">.</span><span class=\"n\">withMCtx</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"bp\">.</span><span class=\"n\">mctx</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"n\">Meta</span><span class=\"bp\">.</span><span class=\"n\">withLCtx</span><span class=\"w\"> </span><span class=\"n\">ti</span><span class=\"bp\">.</span><span class=\"n\">lctx</span><span class=\"w\"> </span><span class=\"o\">{}</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">              </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">Meta</span><span class=\"bp\">.</span><span class=\"n\">inferType</span><span class=\"w\"> </span><span class=\"n\">ti</span><span class=\"bp\">.</span><span class=\"n\">expr</span>\n<span class=\"w\">              </span><span class=\"n\">logInfo</span><span class=\"w\"> </span><span class=\"n\">m!</span><span class=\"s2\">\"{t}\"</span>\n<span class=\"w\">              </span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"n\">finally</span>\n<span class=\"w\">    </span><span class=\"n\">modify</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">st</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">      </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">st</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"n\">infoState</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">st</span><span class=\"bp\">.</span><span class=\"n\">infoState</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"n\">trees</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">initInfoTrees</span><span class=\"w\"> </span><span class=\"bp\">++</span><span class=\"w\"> </span><span class=\"n\">st</span><span class=\"bp\">.</span><span class=\"n\">infoState</span><span class=\"bp\">.</span><span class=\"n\">trees</span><span class=\"w\"> </span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 445205648,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718651541
    },
    {
        "content": "<p>(I used TermElabM just because it's convenient to enter it from CommandM. If there's a function to go straight to MetaM, you could use that too.)</p>",
        "id": 445205769,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718651588
    },
    {
        "content": "<p>Does that fix my example above?</p>",
        "id": 445213445,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718654179
    },
    {
        "content": "<p>I thought it did, but I didn't investigate the errors in the log messages. Using <code>set_option pp.rawOnError true</code> suggests that the problem is that something is forgetting to save the context for some of the terms, and that's why you get the <code>unknown metavariable</code> error.</p>",
        "id": 445214761,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718654633
    },
    {
        "content": "<blockquote>\n<p>Generally speaking, is it safe to inferType on terms within infotrees? Will they contain unresolved metavariables? Or are the trees populated only once everything is resolved?</p>\n</blockquote>\n<p>It should be safe, and they can contain unresolved metavariables. The <code>unknown metavariable</code> error isn't about whether it's resolved -- any record of it is completely missing from the metavariable context, which is an error.</p>",
        "id": 445215193,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718654773
    },
    {
        "content": "<p>What I'm confused about is how the context gets updated if the metavariables are resolved after the info tree is created</p>",
        "id": 445218408,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718655941
    },
    {
        "content": "<p>The infotree has special context nodes that generally contain context after its subtrees are created.</p>",
        "id": 445220796,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718656790
    },
    {
        "content": "<p>Ah, so an inner term node can reference a metavariable, while the actual assignment is stored in an ancestor context node somewhere?</p>",
        "id": 445221144,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718656913
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/Missing.20metavariable.20in.20infotree/near/445205648\">said</a>:</p>\n<blockquote>\n<p>There seems to be something wrong with whatever <code>ctx.runMetaM</code> does. At the least, since it adapts the MetaM monad to IO, it drops all log info.</p>\n</blockquote>\n<p>Yes, I had a fix to this locally and figured it was a distraction here. Thanks for your spelling, I'll compare it to mine to see if you or I missed anything (yours is cleaner!)</p>",
        "id": 445221392,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718656996
    },
    {
        "content": "<p>Ah, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.ContextInfo.runMetaM#src\">src#Lean.Elab.ContextInfo.runMetaM</a> also restores a bunch of other data from <code>info</code></p>",
        "id": 445223414,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718657702
    },
    {
        "content": "<p>In particular</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"w\">  </span><span class=\"c\">/-</span>\n<span class=\"cm\">    We must execute `x` using the `ngen` stored in `info`. Otherwise, we may create `MVarId`s and `FVarId`s that</span>\n<span class=\"cm\">    have been used in `lctx` and `info.mctx`.</span>\n<span class=\"cm\">  -/</span>\n</code></pre></div>",
        "id": 445223604,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718657784
    }
]