[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">test</span> <span class=\"o\">:</span>\n  <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n    <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n  <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">done</span>\n</code></pre></div>\n<p>What's the goal state?</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p><code>(fun f =&gt; f 0 = 0) ?m.5</code>.  This is because <code>let rec</code>s are, in theory, allowed to recurse with <code>test</code> itself. (doesn't seem to be in practice - I read this in one of Mario's posts so not sure?) But I think this should give an error message instead of a nonsense goal.</p>\n</div></div>",
        "id": 433819173,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1713368351
    },
    {
        "content": "<p>Ah, you can't recurse with the main definition inside the type of the definition itself</p>",
        "id": 433819838,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713368564
    },
    {
        "content": "<p>although I'm not sure the elaborator knows this</p>",
        "id": 433819868,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713368578
    },
    {
        "content": "<p>i.e. this doesn't work</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span>\n</code></pre></div>",
        "id": 433820124,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713368661
    },
    {
        "content": "<p>Also this doesn’t work</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"n\">bar</span>\n  <span class=\"n\">where</span>\n    <span class=\"n\">myType</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span>\n    <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">myType</span> <span class=\"o\">:=</span> <span class=\"mi\">42</span>\n</code></pre></div>\n<p>which is unfortunate, at least once I wanted to put a large monad stack into a <code>where M :=</code>.</p>",
        "id": 433822168,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1713369265
    },
    {
        "content": "<p>There are some complexities here, but it would be interesting if <code>where</code> blocks required explicit <code>let</code>s and <code>let rec</code>s before each definition. Or at least required an explicit <code>rec</code> in front of a <code>where</code> definition if it was meant to be a <code>let rec</code>.</p>",
        "id": 433822945,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713369497
    },
    {
        "content": "<p>Like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">bar</span>\n<span class=\"n\">where</span>\n  <span class=\"n\">myType</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">rec</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">myType</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">myType</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bar</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 433823115,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713369557
    }
]