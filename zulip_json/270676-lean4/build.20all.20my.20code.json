[
    {
        "content": "<p>Mathlib seems to ensure that <code>lake build</code> means \"build the entire project\" by maintaining this ludicrous <code>Mathlib.lean</code> file. I want MyProjectName.lean to be a fun file, not a boring one. Can I have this and also get automation to ensure that<code>lake build</code> means \"build all the lean files in the <code>MyProjectName</code> directory\"? </p>\n<p>I find it a bit weird that I call my project name Foo and then we're supposed to put all the code in another directory also called Foo. Can I go back to calling it <code>src</code> or is this now out of fashion?</p>",
        "id": 418457686,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706401198
    },
    {
        "content": "<p>This is now out of fashion. :-) It's doable in your lakefile, but probably you'll find few examples because it's the sort of thing where it's easier for everyone the more standardised the layout is. Also, <code>lake</code> doesn't expose much API, and the lakefile is not parseable by anyone but lake, and so it's hard for external programs to discover where you've put your sources!</p>",
        "id": 418458139,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1706401601
    },
    {
        "content": "<ol>\n<li>In my projects I have many top-level folders and just add <code>lean_lib</code> declarations in the lake file (with <code>default_target</code> if I want them to build with <code>lake build</code>). Is something like that good enough for you Kevin?</li>\n</ol>",
        "id": 418458267,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1706401702
    },
    {
        "content": "<p>I'm on my phone and struggling to post a link, but if you search for \"globs\" on zulip you will find messages explaining how to have lake builds everything.</p>",
        "id": 418458294,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1706401731
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> we had this <code>globs</code> trick that Scott mentioned in our copenhagen repo: <a href=\"https://github.com/adamtopaz/CopenhagenMasterclass2023/blob/master/lakefile.lean\">https://github.com/adamtopaz/CopenhagenMasterclass2023/blob/master/lakefile.lean</a></p>",
        "id": 418458317,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1706401757
    },
    {
        "content": "<p>So</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lean_lib</span> <span class=\"bp\">«</span><span class=\"n\">Condensed</span><span class=\"bp\">»</span> <span class=\"n\">where</span>\n  <span class=\"n\">roots</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">Condensed</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>in a lakefile means \"make <code>lake build Condensed</code> build the current contents on disc of all the files in the <code>Condensed</code> directory\"?</p>",
        "id": 418459649,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706403138
    },
    {
        "content": "<p>no, that will build only <code>Condensed</code> and its transitive dependencies, which is also the default behavior</p>",
        "id": 418461430,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706405095
    },
    {
        "content": "<p>you want <code>globs := #[.andSubmodules `Condensed]</code> to say \"build <code>Condensed.*</code> to make this target\"</p>",
        "id": 418461467,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706405153
    },
    {
        "content": "<p>Is it better to override the default behaviour by globbing with <code>.andSubmodules</code> or to have some hook or something which makes the stupid files automatically when I try to compile?</p>\n<p>With my UG course I'm constantly addding small files and then I want to check everything builds with mathlib and everything else. I have a habit of not editing user-facing files once they've appeared in <code>main</code> in case the students who don't know git have edited them; I don't want to break <code>git pull</code> in any way (and I never update mathlib either) so the argument for <code>andSubmodules</code> is \"one less thing to break\".</p>",
        "id": 418485039,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706431932
    },
    {
        "content": "<p>The main advantage of a mathlib-style CI process for <code>Mathlib.lean</code> over using <code>.andSubmodules</code> is that downstream users can use <code>import Mathlib</code>. If you use <code>.andSubmodules</code> then <code>import MyProject</code> will still only load the transitive dependencies of <code>MyProject</code>, and you can also use <code>.submodules</code> and then you don't even need a root file and <code>import MyProject</code> won't work at all.</p>\n<p>In other words, unless your project is designed to be a dependency of another project there isn't much downside to using <code>.andSubmodules</code> or <code>.submodules</code> to compile all the lean files in a folder, and this seems like a good choice for bag-o-files \"libraries\" used as collections of exercises or lecture notes. (Another \"advantage\" of <code>.submodules</code> is that it allows you to have a library which is mutually incompatible with itself, e.g. if there are multiple variations on a definition in different files, because such projects have no root that imports everything. This doesn't seem like a good idea in general though, I think it confuses some server features that take a global view of the project.)</p>",
        "id": 418487757,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706434628
    },
    {
        "content": "<p>I hate maintaining the \"sink file\", so most of my projects contains something like:<br>\n<a href=\"https://github.com/madvorak/vcsp/blob/095a6c422e204bd75994f31c5bbcfe1a4f5416b6/lakefile.lean#L13\">https://github.com/madvorak/vcsp/blob/095a6c422e204bd75994f31c5bbcfe1a4f5416b6/lakefile.lean#L13</a></p>",
        "id": 418589579,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1706518756
    }
]