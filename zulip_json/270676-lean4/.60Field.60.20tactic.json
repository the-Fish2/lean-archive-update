[
    {
        "content": "<p>As part of a discussion about some of the mathematics related to FLT I noted an example of a purely algebraic result whose proof in the literature used complex analysis (see discussion on <a href=\"https://mathoverflow.net/q/469021/1384\">mathoverflow</a> ). I posted a formalisation of the statement of the algebraic result <a href=\"#narrow/stream/416277-FLT/topic/Weierstrass.20P-function/near/433383221\">here</a> and it boils down to the assertion that there's a function F from the naturals to a field K and the claim is that F is the constant function 0. Now <code>simp</code> could prove <code>F 0 = 0</code>. But I really wanted to check <code>F 1 = 0</code> and maybe <code>F 2 = 0</code> just to check that I'd not made a howler when transcribing some fiddly pdf formulas into lean. So I asked <code>simp</code> to tell me what <code>F 1 = 0</code> actually <em>said</em> and the answer was this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hu₀</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hu₁</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h12</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">12</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span>\n    <span class=\"c1\">-- how am I even expected to typeset this :-)</span>\n    <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">u</span> <span class=\"bp\">/</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">)))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">u</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span>\n              <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">u</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">u</span> <span class=\"bp\">/</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">))))</span> <span class=\"bp\">+</span>\n            <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">/</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">u</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span>\n              <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"n\">u</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">u</span> <span class=\"bp\">/</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">)))))</span> <span class=\"bp\">-</span>\n          <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">/</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"bp\">*</span>\n              <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">/</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"n\">u</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"n\">u</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">/</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">))))</span> <span class=\"bp\">+</span>\n            <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"n\">u</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">/</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">/</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">)))))</span> <span class=\"bp\">+</span>\n        <span class=\"mi\">5</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">/</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">)))</span> <span class=\"bp\">-</span>\n      <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">5</span> <span class=\"bp\">/</span> <span class=\"mi\">12</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"mi\">7</span> <span class=\"bp\">/</span> <span class=\"mi\">12</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">field_simp</span> <span class=\"c1\">-- many denominators still</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">u</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- first one. It's nonzero because it</span>\n    <span class=\"c1\">-- divides 12u and both 12 and u are nonzero</span>\n  <span class=\"n\">field_simp</span>\n  <span class=\"c1\">-- aargh denominator (2 * u * ((1 - u) * ((1 - u) * (1 - u)))) still</span>\n  <span class=\"k\">have</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"c1\">-- field_simp -- here no obvious change to goal</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">))))</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- it's apply_fun mul_ne_zero or</span>\n  <span class=\"c1\">-- try `field_simp`</span>\n  <span class=\"c1\">-- 10 seconds later timeout</span>\n  <span class=\"c1\">-- aargh</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I noticed as we cleared more denominators the terms were getting more and more complex. But the whole point is that clearing denominators is supposed to make the terms simpler! Is there just some missing tactic here? Is what's missing well--understood? I did all of these calculations up to F 10 in pari-gp (a CAS) in a fraction of a second.</p>",
        "id": 433757875,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1713360779
    },
    {
        "content": "<p>I think we need a <code>field_simp!</code> tactic which does the following:</p>\n<ol>\n<li>clear all denominators first, introducing proof obligations saying they were all nonzero.</li>\n<li>attempt to discharge these proof obligations.</li>\n<li>simplify and/or ring_nf</li>\n</ol>",
        "id": 433849611,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1713378493
    },
    {
        "content": "<p>But there is an art to the denominators, you don't want to multiply by a and b and ab in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>a</mi><mo>+</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>b</mi><mo>+</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>a</mi><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">1/a+1/b+1/ab</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1/</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1/</span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1/</span><span class=\"mord mathnormal\">ab</span></span></span></span> for example</p>",
        "id": 433865370,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1713384099
    },
    {
        "content": "<p>That sounds a bit like you need a <code>fake_lcm</code> which takes in a bunch of <code>expr</code>s representing terms in a commutative ring, splits each into a multiset of multiplicative atoms, and then takes the <code>Multiset.sup</code> of the result. Probably not implemented using the actual <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Multiset#doc\">docs#Multiset</a>.</p>",
        "id": 433867486,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1713384890
    },
    {
        "content": "<p>Not all that helpful, but <code>set u' := 1 - u</code> makes the goal state above a little more palatable.</p>",
        "id": 433872813,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713387078
    },
    {
        "content": "<p>I think that a big part of the reason the pari-gp way is so much easier is that it only checks that the two sides are equal as elements of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">(</mo><mi>u</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}(u)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Q</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">u</span><span class=\"mclose\">)</span></span></span></span>, whereas you're trying to prove that they are equal as an expanded expression of <code>u : K</code>.</p>",
        "id": 433877079,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1713389013
    },
    {
        "content": "<p>(If we were looking at an equality of two elements of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">(</mo><mi>u</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}(u)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Q</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">u</span><span class=\"mclose\">)</span></span></span></span>, then using a <code>DecidableEq</code> instance on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">(</mo><mi>u</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}(u)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Q</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">u</span><span class=\"mclose\">)</span></span></span></span> would be a cleaner method than using a tactic to repeatedly clear denominators. This is not to say that a tactic that repeatedly clears denominators shouldn't also exist, though.)</p>",
        "id": 433878203,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1713389588
    },
    {
        "content": "<p>Currently, we are not able to do this even for polynomials with integer coefficients:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Polynomial.Basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">Polynomial</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">37</span> <span class=\"bp\">+</span> <span class=\"n\">X</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"bp\">=</span> <span class=\"n\">X</span> <span class=\"bp\">+</span> <span class=\"mi\">42</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 433887534,
        "sender_full_name": "Joël Riou",
        "timestamp": 1713394728
    },
    {
        "content": "<p>I've often thought of writing a tactic that replaces a polynomial/rational expression in some elements of a ring/field by a corresponding polynomial/rational function evaluated at the corresponding variables.</p>\n<p>I thought that this would make proving identities easier... except I am not convinced that the resulting form actually leads to something for which there is automation.</p>\n<p>The <code>move_add</code> and <code>compute_degree</code> tactics were steps towards improving this lack of automation: tiny steps...</p>",
        "id": 433889013,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1713395639
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"459699\">Joël Riou</span> <a href=\"#narrow/stream/270676-lean4/topic/.60Field.60.20tactic/near/433887534\">said</a>:</p>\n<blockquote>\n<p>Currently, we are not able to do this even for polynomials with integer coefficients:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Polynomial.Basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">Polynomial</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">37</span> <span class=\"bp\">+</span> <span class=\"n\">X</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"bp\">=</span> <span class=\"n\">X</span> <span class=\"bp\">+</span> <span class=\"mi\">42</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span> <span class=\"c1\">-- fails</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>We could have this for free if we were willing to loosen our grip on <code>Classical</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Polynomial.Basic</span>\n\n<span class=\"c1\">-- DFinsupp is constructive, unlike the Finsupp we use for polynoimal</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">BetterPolynomial</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"bp\">Π₀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">R</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">BetterPolynomial.X</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">BetterPolynomial</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span>\n\n<span class=\"c1\">-- not going to rebuild the whole ring structure here</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"o\">(</span><span class=\"n\">BetterPolynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"mi\">0</span> <span class=\"n\">n</span><span class=\"o\">⟩</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BetterPolynomial</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">37</span> <span class=\"bp\">+</span> <span class=\"n\">X</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">BetterPolynomial</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">X</span> <span class=\"bp\">+</span> <span class=\"mi\">42</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span> <span class=\"c1\">-- ok and fast</span>\n</code></pre></div>",
        "id": 433891280,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713397128
    },
    {
        "content": "<p>Or even with a free ring structure (pun intended):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.DirectSum.Ring</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">DirectSum</span>\n\n<span class=\"c1\">-- missing from mathlib</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"o\">(</span><span class=\"bp\">⨁</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">inferInstanceAs</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">DecidableEq</span> <span class=\"o\">(</span><span class=\"bp\">Π₀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">BetterPolynomial</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"bp\">⨁</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">R</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">BetterPolynomial.X</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">BetterPolynomial</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BetterPolynomial</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">X</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">BetterPolynomial</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">7</span><span class=\"bp\">*</span><span class=\"n\">X</span> <span class=\"bp\">+</span> <span class=\"mi\">10</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span> <span class=\"c1\">-- ok</span>\n</code></pre></div>",
        "id": 433891686,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713397398
    },
    {
        "content": "<p><code>field_simp</code> and <code>ring_nf</code> will do it, with some handholding.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hu₀</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hu₁</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h12</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">12</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span>\n    <span class=\"c1\">-- how am I even expected to typeset this :-)</span>\n    <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">u</span> <span class=\"bp\">/</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">)))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">u</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span>\n              <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">u</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">u</span> <span class=\"bp\">/</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">))))</span> <span class=\"bp\">+</span>\n            <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">/</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">u</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span>\n              <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"n\">u</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">u</span> <span class=\"bp\">/</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">)))))</span> <span class=\"bp\">-</span>\n          <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">/</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"bp\">*</span>\n              <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">/</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"n\">u</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"n\">u</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">/</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">))))</span> <span class=\"bp\">+</span>\n            <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"n\">u</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">/</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">/</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">)))))</span> <span class=\"bp\">+</span>\n        <span class=\"mi\">5</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">/</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">)))</span> <span class=\"bp\">-</span>\n      <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">5</span> <span class=\"bp\">/</span> <span class=\"mi\">12</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"mi\">7</span> <span class=\"bp\">/</span> <span class=\"mi\">12</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">12</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">6</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span> <span class=\"n\">mul_ne_zero_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h12</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h12.left</span>\n  <span class=\"n\">norm_num</span>\n  <span class=\"n\">lift</span> <span class=\"n\">u</span> <span class=\"n\">to</span> <span class=\"n\">K</span><span class=\"bp\">ˣ</span> <span class=\"n\">using</span> <span class=\"n\">hu₀.isUnit</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">hx</span>\n  <span class=\"n\">lift</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"n\">to</span> <span class=\"n\">K</span><span class=\"bp\">ˣ</span> <span class=\"n\">using</span> <span class=\"o\">(</span><span class=\"n\">sub_ne_zero_of_ne</span> <span class=\"n\">hu₁.symm</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">isUnit</span> <span class=\"k\">with</span> <span class=\"n\">y</span> <span class=\"n\">hy</span>\n  <span class=\"n\">field_simp</span>\n  <span class=\"c1\">-- Why didn't field_simp reassociate this product, or notice that it is obviously a unit?</span>\n  <span class=\"n\">lift</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">y</span><span class=\"o\">)))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">y</span><span class=\"o\">))))</span> <span class=\"bp\">*</span>\n              <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">y</span><span class=\"o\">))))</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"n\">to</span> <span class=\"n\">K</span><span class=\"bp\">ˣ</span>\n    <span class=\"n\">using</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_cast</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">Units.isUnit</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">z</span> <span class=\"n\">hz</span>\n  <span class=\"n\">field_simp</span>\n  <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">]</span>\n  <span class=\"n\">ring_nf</span>\n</code></pre></div>",
        "id": 433897679,
        "sender_full_name": "Richard Copley",
        "timestamp": 1713401555
    },
    {
        "content": "<blockquote>\n<p>-- Why didn't field_simp reassociate this product, or notice that it is obviously a unit?</p>\n</blockquote>\n<p>If you change <code>maxDischargeDepth</code> from its hardcoded value of 7 up to 11 (in your own copy of <code>field_simp</code>), the following works. This could be configurable.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span>\n    <span class=\"c1\">-- how am I even expected to typeset this :-)</span>\n    <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">u</span> <span class=\"bp\">/</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">)))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">u</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span>\n              <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">u</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">u</span> <span class=\"bp\">/</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">))))</span> <span class=\"bp\">+</span>\n            <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">/</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">u</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span>\n              <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"n\">u</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">u</span> <span class=\"bp\">/</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">)))))</span> <span class=\"bp\">-</span>\n          <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">/</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"bp\">*</span>\n              <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">/</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"n\">u</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"n\">u</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">/</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">))))</span> <span class=\"bp\">+</span>\n            <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"n\">u</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">/</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">/</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">)))))</span> <span class=\"bp\">+</span>\n        <span class=\"mi\">5</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">/</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">)))</span> <span class=\"bp\">-</span>\n      <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">5</span> <span class=\"bp\">/</span> <span class=\"mi\">12</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"mi\">7</span> <span class=\"bp\">/</span> <span class=\"mi\">12</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">ne_zero_of_dvd_ne_zero</span> <span class=\"n\">h12</span> <span class=\"o\">⟨</span><span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">⟩</span>\n  <span class=\"n\">norm_num</span>\n  <span class=\"n\">lift</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">to</span> <span class=\"n\">K</span><span class=\"bp\">ˣ</span> <span class=\"n\">using</span> <span class=\"o\">(</span><span class=\"n\">sub_ne_zero_of_ne</span> <span class=\"n\">hu₁.symm</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">isUnit</span> <span class=\"k\">with</span> <span class=\"n\">v</span> <span class=\"n\">hv</span>\n  <span class=\"n\">lift</span> <span class=\"n\">u</span> <span class=\"n\">to</span> <span class=\"n\">K</span><span class=\"bp\">ˣ</span> <span class=\"n\">using</span> <span class=\"n\">hu₀.isUnit</span> <span class=\"k\">with</span> <span class=\"n\">w</span> <span class=\"n\">hw</span>\n  <span class=\"n\">your_own_copy_of_field_simp</span>\n  <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">hv</span><span class=\"o\">,</span> <span class=\"n\">hw</span><span class=\"o\">]</span>\n  <span class=\"n\">ring_nf</span>\n</code></pre></div>",
        "id": 434001518,
        "sender_full_name": "Richard Copley",
        "timestamp": 1713431278
    },
    {
        "content": "<blockquote>\n<p>This could be configurable.</p>\n</blockquote>\n<p>With <a href=\"https://github.com/leanprover-community/mathlib4/pull/12239\">#12239</a>,<br>\n<code>field_simp (config := { maxDischargeDepth := 11 })</code></p>",
        "id": 434005635,
        "sender_full_name": "Richard Copley",
        "timestamp": 1713432592
    },
    {
        "content": "<p>Please benchmark this!</p>",
        "id": 434017149,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713436655
    },
    {
        "content": "<p>Increasing the maxDischargeDepth is not free.</p>",
        "id": 434017190,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713436672
    },
    {
        "content": "<p>The cost is only incurred by users who pass a <code>maxDischargeDepth</code> greater than the default, right? (<a href=\"https://github.com/leanprover-community/mathlib4/pull/12239/files#diff-c2524f7203fce9d142e943d164410c80c4df89423969e21f339a2d0726e6e44a\">diff</a>)</p>",
        "id": 434017965,
        "sender_full_name": "Richard Copley",
        "timestamp": 1713436952
    },
    {
        "content": "<p><a href=\"http://speed.lean-fro.org/mathlib4/compare/3e0f7d23-d128-4305-a3c4-a060f1c5ee3d/to/e7371401-1e72-4b47-b434-8885950a8df7\">no significant changes</a></p>",
        "id": 434022280,
        "sender_full_name": "Richard Copley",
        "timestamp": 1713438612
    }
]