[
    {
        "content": "<p>In discussions with Yaël, there was a suggestion of writing the <code>mk_all</code> script in Lean itself.</p>\n<p>It is easy to write a script that produces an \"import all\" files.   However, \"all\" really means \"all\", there would be no awareness of git management, especially of gitignore.</p>\n<p>Is it possible to run from Lean the command <code>git ls-files</code>?</p>",
        "id": 430801155,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712067569
    },
    {
        "content": "<p>Is there a particular reason you want to write the script in lean itself?</p>\n<p>But yes in principle you can run arbitrary child processes from a Lean process.</p>",
        "id": 430807020,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1712069240
    },
    {
        "content": "<p>The context is <a href=\"https://github.com/leanprover-community/mathlib4/pull/11850\">#11850</a>: the main advantage would be that it could then become a command like <code>lake exe mk-all</code> command, that would work on every project, rather than it being a specific mathlib function.</p>",
        "id": 430807356,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712069317
    },
    {
        "content": "<p>Can you give me a pointer to how to run some commandline function from Lean: at least something so that I can start looking into it.  Thanks!</p>",
        "id": 430807871,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712069454
    },
    {
        "content": "<p>(I found the <code>walkDir</code> function for doing a recursive listing of dir contents, but I was not able to find something like \"execute this on the command-line\".)</p>",
        "id": 430808044,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712069505
    },
    {
        "content": "<p>that would be <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IO.Process.spawn#doc\">docs#IO.Process.spawn</a> or <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IO.Process.output#doc\">docs#IO.Process.output</a></p>",
        "id": 430808165,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712069534
    },
    {
        "content": "<p>Great, thanks!  I'll try to catch the output of <code>git ls-files</code> and see if I have more questions!</p>",
        "id": 430808633,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712069656
    },
    {
        "content": "<p>I'm pretty sure there's a PR that implements this in mathlib (I don't think it does the <code>git</code> part you want though)</p>",
        "id": 430809523,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1712069895
    },
    {
        "content": "<p>The other part, I can do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">mkAll</span> <span class=\"o\">(</span><span class=\"n\">mathlib</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"s2\">\"Mathlib\"</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">pth</span> <span class=\"bp\">←</span> <span class=\"n\">System.FilePath.walkDir</span> <span class=\"n\">mathlib</span>\n  <span class=\"k\">let</span> <span class=\"n\">files</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">pth.filter</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">extension</span> <span class=\"bp\">==</span> <span class=\"n\">some</span> <span class=\"s2\">\"lean\"</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">qsort</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">toString</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">·.</span><span class=\"n\">toString</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">withImport</span> <span class=\"bp\">←</span> <span class=\"n\">files.mapM</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"n\">return</span> <span class=\"s2\">\"import \"</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Lean.moduleNameOfFileName</span> <span class=\"n\">f</span> <span class=\"n\">none</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toString</span>\n  <span class=\"n\">IO.FS.writeFile</span> <span class=\"o\">(</span><span class=\"n\">mathlib</span> <span class=\"bp\">++</span> <span class=\"s2\">\".lean\"</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">String.intercalate</span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span> <span class=\"n\">withImport.toList</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 430810029,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712070027
    },
    {
        "content": "<p>However, when I try it on my local version, it adds (clearly!) lots of files that are gitignored and that are not in mathlib.  So, the command would work in CI, but it is not really friendly for local usage.</p>",
        "id": 430810250,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712070085
    },
    {
        "content": "<p>Ok, this seems to be a good starting point:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">gitLSFiles</span> <span class=\"o\">:</span> <span class=\"n\">IO.Process.SpawnArgs</span> <span class=\"n\">where</span>\n  <span class=\"n\">cmd</span> <span class=\"o\">:=</span> <span class=\"s2\">\"git\"</span>\n  <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"ls-files\"</span><span class=\"o\">,</span> <span class=\"s2\">\"*.lean\"</span><span class=\"o\">]</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">do</span>\n  <span class=\"n\">IO.println</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"n\">IO.Process.run</span> <span class=\"n\">gitLSFiles</span>\n\n<span class=\"c1\">--  what I actually wanted!</span>\n</code></pre></div>\n<p>Thanks!</p>",
        "id": 430811810,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712070434
    },
    {
        "content": "<p>For future reference, this is a possible implementation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">gitLSFiles</span> <span class=\"o\">:</span> <span class=\"n\">IO.Process.SpawnArgs</span> <span class=\"n\">where</span>\n  <span class=\"n\">cmd</span> <span class=\"o\">:=</span> <span class=\"s2\">\"git\"</span>\n  <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"ls-files\"</span><span class=\"o\">,</span> <span class=\"s2\">\"*.lean\"</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">System.FilePath</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">mkAll</span> <span class=\"o\">(</span><span class=\"n\">ml</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"s2\">\"Mathlib\"</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">ml.lean</span> <span class=\"o\">:=</span> <span class=\"n\">addExtension</span> <span class=\"o\">⟨</span><span class=\"n\">ml</span><span class=\"o\">⟩</span> <span class=\"s2\">\"lean\"</span>  <span class=\"c1\">-- `Mathlib.lean`</span>\n  <span class=\"k\">let</span> <span class=\"n\">mlDir</span> <span class=\"o\">:=</span> <span class=\"n\">ml.push</span> <span class=\"n\">pathSeparator</span>       <span class=\"c1\">-- `Mathlib/`</span>\n  <span class=\"k\">let</span> <span class=\"n\">allLean</span> <span class=\"bp\">←</span> <span class=\"n\">IO.Process.run</span> <span class=\"n\">gitLSFiles</span>\n  <span class=\"k\">let</span> <span class=\"n\">files</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">System.FilePath</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">allLean.splitOn</span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"n\">mlDir.isPrefixOf</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(⟨</span><span class=\"bp\">·</span><span class=\"o\">⟩)</span>\n  <span class=\"k\">let</span> <span class=\"n\">files</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">files.erase</span> <span class=\"n\">ml.lean</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toArray.qsort</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">toString</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">·.</span><span class=\"n\">toString</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">withImport</span> <span class=\"bp\">←</span> <span class=\"n\">files.mapM</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"s2\">\"import \"</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">moduleNameOfFileName</span> <span class=\"n\">f</span> <span class=\"n\">none</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toString</span>\n  <span class=\"n\">IO.FS.writeFile</span> <span class=\"n\">ml.lean</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"n\">String.intercalate</span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span> <span class=\"n\">withImport.toList</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">push</span> <span class=\"sc\">'\\n'</span>\n</code></pre></div>",
        "id": 430815977,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712071520
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/11853\">#11853</a></p>\n<p>(I am not sure if this is something that anyone has any interest in merging, but it was a good learning experience for me!)</p>",
        "id": 430827019,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712074647
    }
]