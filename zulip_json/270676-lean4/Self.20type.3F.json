[
    {
        "content": "<p>I'm defining a QuadTree, and ran into this issue: how do I refer to a type in its fields?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Point</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Float</span>\n  <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Float</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Body</span> <span class=\"n\">where</span>\n  <span class=\"n\">pos</span> <span class=\"o\">:</span> <span class=\"n\">Point</span>\n  <span class=\"n\">mass</span> <span class=\"o\">:</span> <span class=\"n\">Float</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">QuadTree</span> <span class=\"n\">where</span>\n  <span class=\"n\">center</span> <span class=\"o\">:</span> <span class=\"n\">Point</span>\n  <span class=\"n\">size</span> <span class=\"o\">:</span> <span class=\"n\">Float</span>\n  <span class=\"n\">totalMass</span> <span class=\"o\">:</span> <span class=\"n\">Float</span>\n  <span class=\"n\">centerOfMass</span> <span class=\"o\">:</span> <span class=\"n\">Point</span>\n  <span class=\"n\">bodies</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Body</span>\n  <span class=\"n\">NW</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">QuadTree</span>\n  <span class=\"n\">NE</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">QuadTree</span>\n  <span class=\"n\">SW</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">QuadTree</span>\n  <span class=\"n\">SE</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">QuadTree</span>\n</code></pre></div>\n<p>here the last 4 fields</p>",
        "id": 425869371,
        "sender_full_name": "Alok Singh",
        "timestamp": 1710149631
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">QuadTree</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span>\n  <span class=\"o\">(</span><span class=\"n\">center</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">size</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">totalMass</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">centerOfMass</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">bodies</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Body</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">NW</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">QuadTree</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">NE</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">QuadTree</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">SW</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">QuadTree</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">SE</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">QuadTree</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 425869970,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710149869
    },
    {
        "content": "<p>But then you have to write all the projections by hand</p>",
        "id": 425870149,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710149928
    },
    {
        "content": "<p>In my head this is one of the places where <a href=\"https://github.com/alexkeizer/QpfTypes\">QPFs</a> could help us metaprogram our way to victory -- but I am not confident in that claim or how much work it would take to get there...</p>",
        "id": 426283893,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1710319026
    },
    {
        "content": "<p>It looks to me like this is just a missing feature in the <code>structure</code> command? Unless I'm missing something, I would assume all the same projections could be generated</p>",
        "id": 426297829,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710323877
    },
    {
        "content": "<p>Maybe the issue here is structure eta, which is no longer possible?</p>",
        "id": 426297865,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710323883
    },
    {
        "content": "<p>There is an exploit: Although you can't define recursive structures, you can get structures to appear in nested inductive types</p>",
        "id": 426298513,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710324073
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">QuadTree'</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">center</span> <span class=\"o\">:</span> <span class=\"n\">Point</span>\n  <span class=\"n\">size</span> <span class=\"o\">:</span> <span class=\"n\">Float</span>\n  <span class=\"n\">totalMass</span> <span class=\"o\">:</span> <span class=\"n\">Float</span>\n  <span class=\"n\">centerOfMass</span> <span class=\"o\">:</span> <span class=\"n\">Point</span>\n  <span class=\"n\">bodies</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Body</span>\n  <span class=\"n\">NW</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">A</span>\n  <span class=\"n\">NE</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">A</span>\n  <span class=\"n\">SW</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">A</span>\n  <span class=\"n\">SE</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">A</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">QuadTree</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">QuadTree'</span> <span class=\"n\">QuadTree</span> <span class=\"bp\">â†’</span> <span class=\"n\">QuadTree</span>\n</code></pre></div>",
        "id": 426299032,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710324228
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/Self.20type.3F/near/426297829\">said</a>:</p>\n<blockquote>\n<p>It looks to me like this is just a missing feature in the <code>structure</code> command?</p>\n</blockquote>\n<p>I think we'll see recursive structures at some point, but it's not among the highest priority features at the moment.</p>\n<p>(What's the issue with structure eta for recursive structures? I haven't thought at all about how recursive structures would interact with defeq.)</p>",
        "id": 426399656,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710353282
    },
    {
        "content": "<p>My limited understanding was that structure eta just greedily expands things, which no longer works if structures are recursive</p>",
        "id": 426435825,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710368244
    },
    {
        "content": "<p>(I said \"missing feature\" and not \"bug\" precisely because I think this is low priority)</p>",
        "id": 426439586,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710370162
    },
    {
        "content": "<p>Oops, I meant to be more explicit: recursive structures have a non-zero priority for the FRO, with a priority inversely proportional to implementation difficulty <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n<p>My rough understanding, having not looked into it too deeply, is that for elaboration the command needs to be able to support it, and ideally it would support <code>mutual</code> blocks too. It'd be good to know if there are any kernel issues to be aware of, but looking at the kernel source, I <em>don't</em> think so, because the kernel sees any non-recursive one-constructor index-free inductive type as being a \"structure\" (<code>is_structure_like</code>). I don't know if the elaborator's type checker works with <code>structure</code>s or \"structures\".</p>",
        "id": 426454581,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710380264
    }
]