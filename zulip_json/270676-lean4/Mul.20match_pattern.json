[
    {
        "content": "<p>Why does the following work for <code>Add</code> but not <code>Mul</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">E</span>\n  <span class=\"bp\">|</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">E</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">E</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">E</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">add</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"n\">E</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">mul</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">E</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"c1\">-- invalid pattern, constructor or constant marked with '[match_pattern]' expected</span>\n</code></pre></div>",
        "id": 430635623,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1711993319
    },
    {
        "content": "<p>I think it's there for <code>Add</code> to support <code>n + 1</code> in matches</p>",
        "id": 430642595,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711995982
    },
    {
        "content": "<p>... and it has to be opted into explicitly, which I guess has not been done for Mul</p>",
        "id": 430642756,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711996027
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/Mul.20match_pattern/near/430642756\">said</a>:</p>\n<blockquote>\n<p>... and it has to be opted into explicitly, which I guess has not been done for Mul</p>\n</blockquote>\n<p>Can I somehow opt in myself?</p>",
        "id": 430649716,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1711998779
    },
    {
        "content": "<p>Attribute <code>@[match_pattern]</code></p>",
        "id": 430658565,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1712003272
    },
    {
        "content": "<p>Unfortunately it's a TagAttribute, so you can't add it from another module</p>",
        "id": 430659025,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1712003473
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/Mul.20match_pattern/near/430659025\">said</a>:</p>\n<blockquote>\n<p>Unfortunately it's a TagAttribute, so you can't add it from another module</p>\n</blockquote>\n<p>Too bad. Do you happen to know if this is just a temporary limitation, or is there a good reason for this?</p>",
        "id": 430749914,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1712050471
    },
    {
        "content": "<p>This is for efficiency reasons. TagAttribute won't change in the near future.</p>",
        "id": 430753340,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712051684
    },
    {
        "content": "<p>the usage of it for particular attributes might though</p>",
        "id": 430769944,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712057623
    },
    {
        "content": "<p>although it seems like that approach is just going to lead to questions like \"and <em>why</em> should we allow you to monkey patch our design decisions in this way?\"</p>",
        "id": 430770190,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712057702
    },
    {
        "content": "<p>at which point you may as well just propose the specific attribute you want placed upstream</p>",
        "id": 430770309,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712057749
    }
]