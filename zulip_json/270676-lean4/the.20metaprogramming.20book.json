[
    {
        "content": "<p>How is the metaprogramming book supposed to work? There are lots of intentional errors in the code, but it is essentially impossible to bump to a new toolchain, because one would have to review every error separately and decide if they are meant to be there or not!</p>\n<p>Any ideas? I would love to bump this to <code>nightly-2023-08-19</code> (which is rapidly becoming the first official release candidate). Any authors of the book want to advise? :-)</p>",
        "id": 386541359,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692686761
    },
    {
        "content": "<p>regarding <a href=\"https://github.com/leanprover-community/lean4-metaprogramming-book\">https://github.com/leanprover-community/lean4-metaprogramming-book</a> I guess</p>",
        "id": 386542240,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692687163
    },
    {
        "content": "<p>Is there working CI on the repo?</p>",
        "id": 386542257,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692687176
    },
    {
        "content": "<p>I see a green checkmark but I'm not sure if it's running any lean</p>",
        "id": 386542292,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692687191
    },
    {
        "content": "<p>The CI only generates a PDF based on the markdown files AFAIK. With respect to the update I dont think there is a simpler way to do it than to read the files. Maybe we could add a command that checks that a failure with a certain message occurred such that this process is easier in the future?</p>",
        "id": 386542851,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1692687479
    },
    {
        "content": "<p>is there a way to metaprogram a section of a lean file to say \"this section of commands won't compile -- show the errors but revert the environment at the section end and don't report it as a compile error\"?</p>\n<p>seems useful for LeanInk and co, unless they already have a way for handling snippets that are expected to produce error?</p>",
        "id": 386543148,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1692687626
    },
    {
        "content": "<p>IIRC <span class=\"user-mention silent\" data-user-id=\"354934\">David Thrane Christiansen</span> set up a process for validating error messages for FPIL</p>",
        "id": 386544790,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692688398
    },
    {
        "content": "<p>There is <code>#guard_msgs in</code>, which we use extensively in testing (and would like to use to replace <em>all</em> noisy tests).</p>",
        "id": 386544791,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692688399
    },
    {
        "content": "<p>Two options:</p>\n<ul>\n<li>use #guard_msgs, with some postprocessing that removes it from the book?</li>\n<li>have a <code>.expected.out</code> file, and CI that verifies the error messages match.</li>\n</ul>",
        "id": 386544871,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692688440
    },
    {
        "content": "<p>(personally, I would find it nice to have something in the snippet that indicates \"this doesn't compile, but...\". Is there a reason to postprocess it out?)</p>",
        "id": 386547573,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1692689654
    },
    {
        "content": "<p>Perhaps we do need our own Ferris<br>\n<a href=\"/user_uploads/3121/D9hO2CvrWJ93QvEjGBWpVUZE/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/D9hO2CvrWJ93QvEjGBWpVUZE/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/D9hO2CvrWJ93QvEjGBWpVUZE/image.png\"></a></div>",
        "id": 386548746,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1692690191
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/functional_programming_in_lean/introduction.html\">https://leanprover.github.io/functional_programming_in_lean/introduction.html</a> has something similar (without the mascot)</p>",
        "id": 386549279,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692690403
    },
    {
        "content": "<p>My first guess was also to use <code>#guard_msgs</code>, but would unique <del>fvar</del>mvar names cause problems anyway?  (I'm on mobile and cannot check right now)</p>",
        "id": 386566152,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692696312
    },
    {
        "content": "<p>FPIL also normalizes mvar names to address that issue</p>",
        "id": 386566541,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692696439
    },
    {
        "content": "<p>(fvar names are generally not visible in error messages)</p>",
        "id": 386566580,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692696456
    },
    {
        "content": "<p>Simply using <code>#check_failure</code> instead of <code>#check</code> can eliminate errors in some places. Not sure what to do in other places.</p>\n<p>Using <code>#guard_msgs</code> will probably eliminate a lot of errors, but not all. I would like to ask for other opinions on this.</p>\n<p>see: <a href=\"https://github.com/leanprover-community/lean4-metaprogramming-book/pull/131\">https://github.com/leanprover-community/lean4-metaprogramming-book/pull/131</a></p>",
        "id": 420798054,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1707569921
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321696\">@Julian Berman</span> <span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> </p>\n<p>Sorry for the abrupt mention. But I would like to hear your opinion on this matter.</p>\n<p>For future updates, it is necessary to check the correctness of the code with CI. It needs a way to show ”code that should be in error\" without actually making an error...</p>",
        "id": 420815353,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1707584200
    },
    {
        "content": "<p>For example, could metaprogramming be used to create tools to assist with this?</p>",
        "id": 420815619,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1707584382
    },
    {
        "content": "<p>I'm afraid I don't know enough metaprogramming to have an educated opinion! The concept (that tests shouldn't be noisy, and that the book currently is noisy when it's showing errors) certainly makes sense to me though</p>",
        "id": 420818162,
        "sender_full_name": "Julian Berman",
        "timestamp": 1707586289
    },
    {
        "content": "<p>I haven't looked at that PR but I can (likely not this weekend, trying to disconnect a bit), but I will look at it sometime in the next few days if no one else gets to it first.</p>",
        "id": 420818229,
        "sender_full_name": "Julian Berman",
        "timestamp": 1707586326
    },
    {
        "content": "<p>I'm in the processs of using metaprogramming to create tools to assist with this over at <a href=\"https://github.com/leanprover/verso\">https://github.com/leanprover/verso</a> - but it's not quite ready yet. The setup I used for FPiL was reasonable in the meantime, though.</p>\n<p>It's some Lean metaprograms that basically do variations on <code>#guard_msgs</code>, but with much uglier syntax: <a href=\"https://github.com/leanprover/fp-lean/blob/master/examples/Examples/Support.lean\">https://github.com/leanprover/fp-lean/blob/master/examples/Examples/Support.lean</a></p>\n<p>The goal of the ugly syntax is to make it easy to extract the various bits with Python regexps and include them in the book: <a href=\"https://github.com/leanprover/fp-lean/tree/master/functional-programming-lean/scripts\">https://github.com/leanprover/fp-lean/tree/master/functional-programming-lean/scripts</a></p>\n<p>It's a giant hack, but it works pretty well. I'll make noise when Verso is ready for this use case.</p>",
        "id": 421418367,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1707907588
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Kim Morrison</span></p>\n<p>I submitted a PR to show intentional errors in the code without error and it was merged. I think your concerns have been resolved.</p>\n<p>see: <a href=\"https://github.com/leanprover-community/lean4-metaprogramming-book/pull/131\">https://github.com/leanprover-community/lean4-metaprogramming-book/pull/131</a></p>",
        "id": 434572514,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1713689580
    }
]