[
    {
        "content": "<p>How can I loogle for patterns involving <code>∃</code>?</p>\n<p>Let's say I'm looking for a lemma with the conclusion of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Quot.exists_rep#doc\">docs#Quot.exists_rep</a>, I would try out <a href=\"https://loogle.lean-lang.org/?q=%7C-+%E2%88%83+%28%3Fa+%3A+%3F%CE%B1%29%2C+Quot.mk+%3Fr+%3Fa+%3D+%3Fq\"><code>|- ∃ (?a : ?α), Quot.mk ?r ?a = ?q</code></a>, but this results in an error message, I guess this is because of the comma <code>,</code>. So is there a way to do this?</p>",
        "id": 425284258,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1709811539
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 425284918,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1709811829
    },
    {
        "content": "<p>Maybe...</p>\n<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span>  Exists, Quot</p>",
        "id": 425285257,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709811960
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Core.html#Quot.exists_rep\">Quot.exists_rep</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Multiset/Basic.html#Multiset.exists_multiset_eq_map_quot_mk\">Multiset.exists_multiset_eq_map_quot_mk</a>, and <a href=\"https://loogle.lean-lang.org/?q=Exists%2C%20Quot\">2 more</a></p>",
        "id": 425285260,
        "sender_full_name": "loogle",
        "timestamp": 1709811961
    },
    {
        "content": "<p>There are ways to find <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Quot.exists_rep#doc\">docs#Quot.exists_rep</a>. The question is: how do I specify patterns involving <code>∃</code>?</p>",
        "id": 425290006,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1709813700
    },
    {
        "content": "<p>Here is another:<br>\n<span class=\"user-mention\" data-user-id=\"644391\">@loogle</span>  <a href=\"http://Quot.mk\">Quot.mk</a> ?r ?a = ?q</p>",
        "id": 425290285,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1709813800
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Core.html#Quot.exists_rep\">Quot.exists_rep</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Core.html#Quot.sound\">Quot.sound</a>, and <a href=\"https://loogle.lean-lang.org/?q=Quot.mk%20%3Fr%20%3Fa%20%3D%20%3Fq\">43 more</a></p>",
        "id": 425290287,
        "sender_full_name": "loogle",
        "timestamp": 1709813801
    },
    {
        "content": "<p>You should be searching for <code>|- ∃ (a : ?α), Quot.mk ?r ?a = ?q</code></p>",
        "id": 425293076,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709814827
    },
    {
        "content": "<p>The first <code>a</code> isn't a wildcard, it's a binder</p>",
        "id": 425293099,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709814837
    }
]