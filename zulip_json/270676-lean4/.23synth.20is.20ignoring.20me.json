[
    {
        "content": "<p>In the following example (in the web editor), <code>#synth</code> does not answer my questions:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Algebra.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Subalgebra</span> <span class=\"n\">R</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- no response</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Algebra</span> <span class=\"n\">s</span> <span class=\"n\">R</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">s</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Algebra</span> <span class=\"n\">s</span> <span class=\"n\">s</span>\n\n<span class=\"c1\">-- works (finds instance)</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">R</span>\n\n<span class=\"c1\">-- works (emits error)</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Algebra</span> <span class=\"n\">ℤ</span> <span class=\"n\">ℕ</span>\n</code></pre></div>",
        "id": 417648592,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706103995
    },
    {
        "content": "<p>Not just the web editor</p>",
        "id": 417648947,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1706104119
    },
    {
        "content": "<p>It doesn’t know <code>Subalgebra</code></p>",
        "id": 417649330,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1706104241
    },
    {
        "content": "<p>Thanks, here's a mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Missing</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- no response</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Foo</span> <span class=\"n\">s</span>\n</code></pre></div>",
        "id": 417649900,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706104450
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/3214\">lean4#3214</a></p>",
        "id": 417651496,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706104949
    },
    {
        "content": "<p>IIRC <code>#synth</code> was intended as an early debugging tool and was slated to be removed after type class synthesis worked as expected. It was never removed but also never updated for correctness.</p>",
        "id": 417997484,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1706149342
    },
    {
        "content": "<p>I suppose it's part of the ecosystem now, so it makes sense to fix it and keep it.</p>",
        "id": 417997554,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1706149408
    },
    {
        "content": "<p>It's really useful! It's a shortcut for <code>example foo : Group X := inferInstamce; #print foo</code> which I used to be typing all the time in lean 3</p>",
        "id": 418020285,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706166858
    },
    {
        "content": "<p>I would also be very sad to see <code>#synth</code> go away!  Moreover, the workaround that Kevin mentions, no longer works with Lean 4, since <code>inferInstance</code> inserts itself in the term, and it does not actually tell you where the instance comes from.</p>",
        "id": 418029982,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706171729
    },
    {
        "content": "<p>Btw, Kevin, you did not use your command in Lean, right?  <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 418030034,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706171760
    },
    {
        "content": "<p>Yes you're right, it doesn't even work, you somehow have to try and take the output apart, I remember it being a real pain in lean 3</p>",
        "id": 418039696,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706175271
    }
]