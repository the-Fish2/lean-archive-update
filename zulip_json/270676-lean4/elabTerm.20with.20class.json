[
    {
        "content": "<p>I don't understand the following behavior of <code>elabTerm</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"n\">none</span>\n  <span class=\"n\">return</span> <span class=\"n\">e</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  Lean.Expr.app (Lean.Expr.const `f []) (Lean.Expr.mvar (Lean.Name.mkNum `_uniq 1))</span>\n<span class=\"cm\">  -/</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">g</span> <span class=\"o\">[</span><span class=\"n\">Append</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">++</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">++</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">))</span> <span class=\"n\">none</span>\n  <span class=\"n\">return</span> <span class=\"n\">e</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  Lean.Expr.app</span>\n<span class=\"cm\">  (Lean.Expr.app</span>\n<span class=\"cm\">    (Lean.Expr.const `g [Lean.Level.mvar (Lean.Name.mkNum `_uniq 1)])</span>\n<span class=\"cm\">    (Lean.Expr.mvar (Lean.Name.mkNum `_uniq 2)))</span>\n<span class=\"cm\">  (Lean.Expr.mvar (Lean.Name.mkNum `_uniq 3))</span>\n<span class=\"cm\">  -/</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span>       <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n  <span class=\"n\">add_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">C.add_assoc</span><span class=\"o\">))</span> <span class=\"n\">none</span>\n  <span class=\"n\">return</span> <span class=\"n\">e</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  &lt;CoreM&gt;:0:0: error: failed to synthesize instance</span>\n<span class=\"cm\">  C ?m.2</span>\n<span class=\"cm\">  -/</span>\n</code></pre></div>\n<p>In the first two examples, Lean happily elaborates the terms and uses mvars for implicit arguments and type class arguments. Why doesn't it do so in the third example? (And is there a way I can make it behave the same as in the other examples?)</p>",
        "id": 421100639,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1707762366
    },
    {
        "content": "<p>I don't know why this happens, but try adding a fake instance before the last eval:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span>       <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n  <span class=\"n\">add_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">C.add_assoc</span><span class=\"o\">))</span> <span class=\"n\">none</span>\n  <span class=\"n\">return</span> <span class=\"n\">e</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">Lean.Expr.app</span>\n<span class=\"cm\">  (Lean.Expr.app</span>\n<span class=\"cm\">    (Lean.Expr.const `C.add_assoc [Lean.Level.mvar (Lean.Name.mkNum `_uniq 1)])</span>\n<span class=\"cm\">    (Lean.Expr.mvar (Lean.Name.mkNum `_uniq 2)))</span>\n<span class=\"cm\">  (Lean.Expr.mvar (Lean.Name.mkNum `_uniq 3))</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 421121702,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707769545
    },
    {
        "content": "<p>Here is a slightly shorter version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Elab.Term</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">C</span> <span class=\"n\">where</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Elab.Term</span>\n\n<span class=\"c1\">-- works always</span>\n<span class=\"k\">#eval</span> <span class=\"k\">do</span> <span class=\"n\">elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">C.c</span><span class=\"o\">))</span> <span class=\"n\">none</span>\n\n<span class=\"c1\">-- comment this instance to make the following `#eval` fail</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"o\">⟨()⟩</span>\n\n<span class=\"c1\">-- only works if the previous instance is not commented</span>\n<span class=\"k\">#eval</span> <span class=\"k\">do</span> <span class=\"n\">elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">C.c</span><span class=\"o\">))</span> <span class=\"n\">none</span>\n</code></pre></div>",
        "id": 421137969,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707775445
    },
    {
        "content": "<p>That last one works without the <code>instance</code> for me.</p>",
        "id": 421138656,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707775728
    },
    {
        "content": "<p>Oh wait, the error is being printed without a red squiggle:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">&lt;</span><span class=\"n\">CoreM</span><span class=\"bp\">&gt;</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">C</span>\n</code></pre></div>",
        "id": 421138734,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707775763
    },
    {
        "content": "<p>Yes, I am very surprised by this.</p>",
        "id": 421139235,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707775966
    },
    {
        "content": "<p>It really seems to have to do with whether the environment contains <em>some</em> instance of the correct class.</p>",
        "id": 421139289,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707775989
    },
    {
        "content": "<p>And if you define a local instance in its section and the <code>#eval</code> is outside the section, then it also does not work.</p>",
        "id": 421139361,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707776027
    },
    {
        "content": "<p>And the mangled expression that <code>elabTerm</code> produces also contains <code>Bool.true</code>.</p>",
        "id": 421140044,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707776334
    },
    {
        "content": "<p>I think that's just an argument to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=sorryAx#doc\">docs#sorryAx</a></p>",
        "id": 421140732,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707776635
    },
    {
        "content": "<p>You are right:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">sorryAx</span>  <span class=\"c1\">-- sorryAx.{u} (α : Sort u) (synthetic : Bool := false) : α</span>\n</code></pre></div>\n<p>it is probably the <code>synthetic</code> argument.</p>",
        "id": 421141069,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707776789
    },
    {
        "content": "<p>It seems that unless there is an instance registered, then Lean refuses to create the metavariable for the instance, unless you really ask it, by either using <code>@</code> or by passing the implicit <code>self</code> argument with an underscore.</p>",
        "id": 421141225,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707776883
    },
    {
        "content": "<p>I find this very bizarre!</p>",
        "id": 421141338,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707776942
    },
    {
        "content": "<p>You are trying to second-guess when and how Lean synthesizes synthetic metavariables, that is not a robust elaboration strategy</p>",
        "id": 421141593,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1707777077
    },
    {
        "content": "<p>I am not sure whether your comment dispels or increases how mystic all this feels!  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 421143291,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707777883
    }
]