[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">OnePlusOneIsTwo</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">onePlusOneIsTwo''</span> <span class=\"o\">:</span> <span class=\"n\">OnePlusOneIsTwo</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">OnePlusOneIsTwo</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>My understanding is that the <code>rw</code> replaces the goal <code>OnePlusOneIsTwo</code> with its definition, <code>1 + 1 = 2</code>. Why do I not then need a <code>rfl</code> or <code>simp</code> or something afterwards, whereas I have to do something like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">onePlusOneIsTwo'</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>?</p>",
        "id": 423933112,
        "sender_full_name": "James Sully",
        "timestamp": 1709170498
    },
    {
        "content": "<p><code>rw</code> is <code>rewrite</code> followed by (some form of) <code>rfl</code>.  Things should be clearer by running just <code>rewrite [...]</code>.</p>",
        "id": 423933394,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709170701
    },
    {
        "content": "<p>For fun, you can indeed solve your second theorem as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">onePlusOneIsTwo'</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[]</span>\n</code></pre></div>",
        "id": 423933457,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709170774
    },
    {
        "content": "<p>Ah, gotcha. I had assumed <code>rw</code> was just short for <code>rewrite</code></p>",
        "id": 423934461,
        "sender_full_name": "James Sully",
        "timestamp": 1709171296
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"621161\">James Sully</span> has marked this topic as resolved.</p>",
        "id": 423934477,
        "sender_full_name": "Notification Bot",
        "timestamp": 1709171300
    },
    {
        "content": "<p>You can jump to definition for <code>rw</code> and <code>rewrite</code> to see the difference :-)</p>",
        "id": 423977398,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709198000
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20why.20is.20rw.20sufficient.20for.20simple.20proof.3F/near/423977398\">said</a>:</p>\n<blockquote>\n<p>You can jump to definition for <code>rw</code> and <code>rewrite</code> to see the difference :-)</p>\n</blockquote>\n<p>good point!</p>",
        "id": 423984352,
        "sender_full_name": "James Sully",
        "timestamp": 1709200575
    }
]