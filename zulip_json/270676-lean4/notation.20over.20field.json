[
    {
        "content": "<p>In calculus and linear algebra you have to specify the field over which you are working over and over. I find this annoying. Especially when doing physics we almost exclusively work over real numbers. Specifying it everywhere just adds noise and is tedious. Here is my solution to that:</p>\n<p>Init file</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">initialize</span> <span class=\"n\">currentFieldName</span> <span class=\"o\">:</span> <span class=\"n\">IO.Ref</span> <span class=\"n\">Name</span> <span class=\"bp\">←</span> <span class=\"n\">IO.mkRef</span> <span class=\"n\">default</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"open_notation_over_field\"</span> <span class=\"n\">K</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">currentFieldName.set</span> <span class=\"n\">K.getId</span>\n  <span class=\"n\">Lean.Elab.Command.elabCommand</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span>\n   <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kn\">open</span> <span class=\"n\">NotationOverField</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Example use on continuous linear map</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">NotationOverField</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span>\n<span class=\"n\">scoped</span> <span class=\"n\">elab</span> <span class=\"n\">X</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\" →L \"</span> <span class=\"n\">Y</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">K</span> <span class=\"bp\">←</span> <span class=\"n\">NotationOverField.currentFieldName.get</span>\n  <span class=\"k\">let</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"n\">mkIdent</span> <span class=\"n\">K</span>\n  <span class=\"n\">elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">X</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"n\">Y</span><span class=\"o\">))</span> <span class=\"n\">none</span>\n<span class=\"kd\">end</span> <span class=\"n\">NotationOverField</span>\n\n<span class=\"n\">open_notation_over_field</span> <span class=\"n\">Real</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span><span class=\"n\">L</span> <span class=\"n\">ℝ</span>\n</code></pre></div>\n<p>There are two downsides</p>\n<ol>\n<li>then notation <code>ℝ →L ℝ</code> is not a macro anymore</li>\n<li>the global reference <code>currentFieldName</code> can have a some random value from imported files which might work or not</li>\n</ol>\n<p>Is there a way to set the value of <code>currentFieldName</code> just for the current file? Reset it once you are done elaborating the file where you call <code>open_notation_over_field K</code>.</p>\n<p>Maybe using <code>IO.Ref</code> is a bad approach, can this be done in a different way?</p>",
        "id": 419274309,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1706802208
    },
    {
        "content": "<p>How about this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"currentBaseRing%\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">currentBaseRing</span><span class=\"bp\">%</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Lean.Macro.throwError</span> <span class=\"s2\">\"</span><span class=\"err\">\\</span>\n<span class=\"s2\">  There is no current base ring for this notation. </span><span class=\"err\">\\</span>\n<span class=\"s2\">  To set one, add the following local macro rules </span><span class=\"err\">\\</span>\n<span class=\"s2\">  and adjust '𝕜' to be your desired base ring.</span><span class=\"err\">\\</span>\n<span class=\"s2\">  </span><span class=\"se\">\\n\\n</span><span class=\"s2\">  local macro_rules | `(currentBaseRing%) =&gt; `(𝕜)\"</span>\n\n<span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"n\">M</span> <span class=\"s2\">\" →L \"</span> <span class=\"n\">M₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ContinuousLinearMap</span> <span class=\"o\">(</span><span class=\"n\">RingHom.id</span> <span class=\"n\">currentBaseRing</span><span class=\"bp\">%</span><span class=\"o\">)</span> <span class=\"n\">M</span> <span class=\"n\">M₂</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span><span class=\"n\">L</span> <span class=\"n\">ℝ</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">There is no current base ring for this notation. To set one, add the following local macro rules</span>\n<span class=\"cm\">and adjust '𝕜' to be your desired base ring.</span>\n\n<span class=\"cm\">  local macro_rules | `(currentBaseRing%) =&gt; `(𝕜)</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kn\">local</span> <span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">currentBaseRing</span><span class=\"bp\">%</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span><span class=\"n\">L</span> <span class=\"n\">ℝ</span>\n<span class=\"c1\">-- ℝ →L[ℝ] ℝ : Type</span>\n</code></pre></div>",
        "id": 419287116,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1706805665
    },
    {
        "content": "<p>Since it's a local macro rule, it's also scoped to the current section/namespace.</p>",
        "id": 419287291,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1706805723
    },
    {
        "content": "<p>Ahh this is a much neater solution! And gives a nice error.</p>",
        "id": 419287537,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1706805797
    },
    {
        "content": "<p>What about this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"currentBaseRing%\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">currentBaseRing</span><span class=\"bp\">%</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Lean.Macro.throwError</span> <span class=\"s2\">\"</span>\n<span class=\"s2\">  There is no current base ring for this notation.</span>\n<span class=\"s2\">  To set one, add the following local macro rules</span>\n<span class=\"s2\">  and adjust '𝕜' to be your desired base ring.</span>\n<span class=\"s2\">  </span><span class=\"se\">\\n\\n</span><span class=\"s2\">  local macro_rules | `(currentBaseRing%) =&gt; `(𝕜)\"</span>\n\n<span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"n\">M</span> <span class=\"s2\">\" →L \"</span> <span class=\"n\">M₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ContinuousLinearMap</span> <span class=\"o\">(</span><span class=\"n\">RingHom.id</span> <span class=\"n\">currentBaseRing</span><span class=\"bp\">%</span><span class=\"o\">)</span> <span class=\"n\">M</span> <span class=\"n\">M₂</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span><span class=\"n\">L</span> <span class=\"n\">ℝ</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">There is no current base ring for this notation. To set one, add the following local macro rules</span>\n<span class=\"cm\">and adjust '𝕜' to be your desired base ring.</span>\n\n<span class=\"cm\">  local macro_rules | `(currentBaseRing%) =&gt; `(𝕜)</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"set_base_ring\"</span> <span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kn\">local</span> <span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">currentBaseRing</span><span class=\"bp\">%</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">r</span><span class=\"o\">))</span>\n\n<span class=\"n\">set_base_ring</span> <span class=\"n\">ℝ</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span><span class=\"n\">L</span> <span class=\"n\">ℝ</span>\n</code></pre></div>",
        "id": 419288086,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1706805931
    },
    {
        "content": "<p>modulo modifying Kyle's error message...</p>",
        "id": 419288268,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1706805986
    },
    {
        "content": "<p>(Did you remove the trailing <code>\\</code>s because you're you using an old Mathlib? Those eliminate the whitespace at the beginning of the following line.)</p>",
        "id": 419288494,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1706806046
    },
    {
        "content": "<p>Yeah I'm probably using an older mathlib</p>",
        "id": 419288544,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1706806060
    },
    {
        "content": "<p>it's in some scrap project I have on my machine</p>",
        "id": 419288578,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1706806071
    },
    {
        "content": "<p>In case you need this on an older Lean, this is what you could write instead of using <code>\\</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">currentBaseRing</span><span class=\"bp\">%</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Lean.Macro.throwError</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{</span>\n<span class=\"s2\">  \"\"}There is no current base ring for this notation. {</span>\n<span class=\"s2\">  \"\"}To set one, add the following local macro rules {</span>\n<span class=\"s2\">  \"\"}and adjust '𝕜' to your desired base ring.{</span>\n<span class=\"s2\">  \"\"}</span><span class=\"se\">\\n\\n</span><span class=\"s2\">  local macro_rules | `(currentBaseRing%) =&gt; `(𝕜)\"</span>\n</code></pre></div>",
        "id": 419289085,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1706806210
    },
    {
        "content": "<p>(I'm glad that's not the style anymore!)</p>",
        "id": 419289294,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1706806269
    },
    {
        "content": "<p>This is appealing. (Works fine with variables too.)</p>",
        "id": 419339420,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1706824195
    },
    {
        "content": "<p>I'm a little concerned that adding local macros in the files in this manner does make maintenance harder: you can't move lemmas around as easily.</p>",
        "id": 419339537,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1706824230
    },
    {
        "content": "<p>(The problem is only as bad as the same problem caused by <code>variable</code>.)</p>",
        "id": 419339566,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1706824246
    },
    {
        "content": "<p>the behavior seems similar to <code>parameter</code> in lean3</p>",
        "id": 419339620,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1706824273
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/notation.20over.20field/near/419339420\">said</a>:</p>\n<blockquote>\n<p>This is appealing. (Works fine with variables too.)</p>\n</blockquote>\n<p>Yes exactly, the point is that you do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n<span class=\"n\">set_base_ring</span> <span class=\"n\">K</span>\n</code></pre></div>\n<p>And then you forget about it</p>",
        "id": 419339772,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1706824330
    },
    {
        "content": "<p>We just need autoImplicit for typeclasses, and can just write <code>set_base_ring K</code>! (Mostly joking.)</p>",
        "id": 419339935,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1706824417
    },
    {
        "content": "<p>Here's a hack, not sure how well it works in practice:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">CurrentBaseRing</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"bp\">&lt;|</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"currentBaseRing%\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"k\">in</span>\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">currentBaseRing</span><span class=\"bp\">%</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">R</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshTypeMVar</span>\n  <span class=\"k\">let</span> <span class=\"n\">res</span><span class=\"bp\">?</span> <span class=\"bp\">←</span> <span class=\"n\">synthInstance</span><span class=\"bp\">?</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Expr.app</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkConstWithFreshMVarLevels</span> <span class=\"bp\">``</span><span class=\"n\">CurrentBaseRing</span><span class=\"o\">)</span> <span class=\"n\">R</span>\n  <span class=\"k\">if</span> <span class=\"n\">res</span><span class=\"bp\">?.</span><span class=\"n\">isSome</span> <span class=\"k\">then</span>\n    <span class=\"n\">return</span> <span class=\"n\">R</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">throwError</span> <span class=\"s2\">\"</span><span class=\"err\">\\</span>\n<span class=\"s2\">      There is no current base ring for this notation. </span><span class=\"err\">\\</span>\n<span class=\"s2\">      To set one, add</span><span class=\"err\">\\</span>\n<span class=\"s2\">      </span><span class=\"se\">\\n\\n</span><span class=\"s2\">  variable [CurrentBaseRing 𝕜]</span><span class=\"err\">\\</span>\n<span class=\"s2\">      </span><span class=\"se\">\\n\\n</span><span class=\"s2\">with an appropriate `𝕜`.\"</span>\n\n<span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"n\">M</span> <span class=\"s2\">\" →L \"</span> <span class=\"n\">M₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ContinuousLinearMap</span> <span class=\"o\">(</span><span class=\"n\">RingHom.id</span> <span class=\"n\">currentBaseRing</span><span class=\"bp\">%</span><span class=\"o\">)</span> <span class=\"n\">M</span> <span class=\"n\">M₂</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span><span class=\"n\">L</span> <span class=\"n\">ℝ</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">There is no current base ring for this notation. To set one, add</span>\n\n<span class=\"cm\">  variable [CurrentBaseRing 𝕜]</span>\n\n<span class=\"cm\">with an appropriate `𝕜`.</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">CurrentBaseRing</span> <span class=\"n\">ℝ</span><span class=\"o\">]</span>\n<span class=\"k\">#check</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span><span class=\"n\">L</span> <span class=\"n\">ℝ</span>\n<span class=\"c1\">-- ℝ →L[ℝ] ℝ : Type</span>\n</code></pre></div>",
        "id": 419340881,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1706824842
    },
    {
        "content": "<p>Lean 4 is fun :)</p>",
        "id": 419346297,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1706827295
    },
    {
        "content": "<p>We can take this further:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">BaseTopologicalRing</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"bp\">&lt;|</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span>\n  <span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">TopologicalSpace</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">TopologicalRing</span> <span class=\"n\">R</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"currentBaseRing%\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"k\">in</span>\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">currentBaseRing</span><span class=\"bp\">%</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">R</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshTypeMVar</span>\n  <span class=\"k\">let</span> <span class=\"n\">res</span><span class=\"bp\">?</span> <span class=\"bp\">←</span> <span class=\"n\">synthInstance</span><span class=\"bp\">?</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Expr.app</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkConstWithFreshMVarLevels</span> <span class=\"bp\">``</span><span class=\"n\">BaseTopologicalRing</span><span class=\"o\">)</span> <span class=\"n\">R</span>\n  <span class=\"k\">if</span> <span class=\"n\">res</span><span class=\"bp\">?.</span><span class=\"n\">isSome</span> <span class=\"k\">then</span>\n    <span class=\"n\">return</span> <span class=\"n\">R</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">throwError</span> <span class=\"s2\">\"foobar\"</span>\n\n<span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"n\">M</span> <span class=\"s2\">\" →L \"</span> <span class=\"n\">M₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ContinuousLinearMap</span> <span class=\"o\">(</span><span class=\"n\">RingHom.id</span> <span class=\"n\">currentBaseRing</span><span class=\"bp\">%</span><span class=\"o\">)</span> <span class=\"n\">M</span> <span class=\"n\">M₂</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">BaseTopologicalRing</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"k\">#check</span> <span class=\"n\">R</span> <span class=\"bp\">→</span><span class=\"n\">L</span> <span class=\"n\">R</span>\n</code></pre></div>",
        "id": 419348106,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1706828173
    },
    {
        "content": "<p>Alternatively we could synthesize the additional required instances in the elaborator instead of the class.</p>",
        "id": 419348144,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1706828195
    },
    {
        "content": "<p>That looks like a bad idea to me, since the resulting lemmas then actually mention <code>BaseTopologicalRing</code> unlike Kyle's solution where the typeclass is an invisible implementation detail to downstream users</p>",
        "id": 419348461,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706828357
    },
    {
        "content": "<p>ok, so let's do it in the elaborator</p>",
        "id": 419348521,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1706828390
    },
    {
        "content": "<p>I think</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">BaseTopologicalRing</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"bp\">&lt;|</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalRing</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>would be fine</p>",
        "id": 419348852,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706828541
    },
    {
        "content": "<p>well, what I'm trying to get to work is that writing <code>variable [BaseRing R]</code> would either synthesize a preexisting instance and set the base ring, or if it can't find such an instance, at the variable to the local context.</p>",
        "id": 419348992,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1706828635
    },
    {
        "content": "<p>I guess what I wrote above would not do that, so it was wrong for various reasons.</p>",
        "id": 419349104,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1706828680
    },
    {
        "content": "<p>You could use <code>variable?</code> for this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">BaseTopologicalRing</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"bp\">&lt;|</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalRing</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"currentBaseRing%\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"k\">in</span>\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">currentBaseRing</span><span class=\"bp\">%</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">fn</span> <span class=\"bp\">←</span> <span class=\"n\">mkConstWithFreshMVarLevels</span> <span class=\"bp\">``</span><span class=\"n\">BaseTopologicalRing</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">args</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">forallMetaTelescope</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">fn</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">args</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">!</span>\n  <span class=\"k\">let</span> <span class=\"n\">res</span><span class=\"bp\">?</span> <span class=\"bp\">←</span> <span class=\"n\">synthInstance</span><span class=\"bp\">?</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">mkAppN</span> <span class=\"n\">fn</span> <span class=\"n\">args</span>\n  <span class=\"k\">if</span> <span class=\"n\">res</span><span class=\"bp\">?.</span><span class=\"n\">isSome</span> <span class=\"k\">then</span>\n    <span class=\"n\">return</span> <span class=\"n\">R</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">throwError</span> <span class=\"s2\">\"</span><span class=\"err\">\\</span>\n<span class=\"s2\">      There is no current base ring for this notation. </span><span class=\"err\">\\</span>\n<span class=\"s2\">      To set one, add</span><span class=\"err\">\\</span>\n<span class=\"s2\">      </span><span class=\"se\">\\n\\n</span><span class=\"s2\">  variable [BaseTopologicalRing 𝕜]`</span><span class=\"err\">\\</span>\n<span class=\"s2\">      </span><span class=\"se\">\\n\\n</span><span class=\"s2\">with an appropriate `𝕜`.\"</span>\n\n<span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"n\">M</span> <span class=\"s2\">\" →L \"</span> <span class=\"n\">M₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ContinuousLinearMap</span> <span class=\"o\">(</span><span class=\"n\">RingHom.id</span> <span class=\"n\">currentBaseRing</span><span class=\"bp\">%</span><span class=\"o\">)</span> <span class=\"n\">M</span> <span class=\"n\">M₂</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span><span class=\"n\">L</span> <span class=\"n\">ℝ</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">There is no current base ring for this notation. To set one, add</span>\n\n<span class=\"cm\">  variable [CurrentBaseRing 𝕜]`</span>\n\n<span class=\"cm\">with an appropriate `𝕜`.</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">BaseTopologicalRing</span> <span class=\"n\">ℝ</span><span class=\"o\">]</span>\n<span class=\"k\">#check</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span><span class=\"n\">L</span> <span class=\"n\">ℝ</span>\n<span class=\"c1\">-- ℝ →L[ℝ] ℝ : Type</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span><span class=\"bp\">?</span> <span class=\"o\">[</span><span class=\"n\">BaseTopologicalRing</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span>\n<span class=\"k\">#check</span> <span class=\"bp\">𝕜</span> <span class=\"bp\">→</span><span class=\"n\">L</span> <span class=\"bp\">𝕜</span>\n<span class=\"c1\">-- 𝕜 →L[𝕜] 𝕜 : Type u_1</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 419358480,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1706833007
    }
]