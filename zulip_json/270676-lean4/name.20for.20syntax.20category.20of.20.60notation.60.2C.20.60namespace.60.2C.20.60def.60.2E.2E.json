[
    {
        "content": "<p>I have seen top-level commands starting with <code>#</code>, such as <code>#check</code> and <code>#reduce</code>, referred to as \"diagnostic commands\". On the other hand, are there any customary terms for other commands such as <code>def</code> or <code>notation</code>?</p>",
        "id": 446271152,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1719061752
    },
    {
        "content": "<p>The commands group I have a question about here are as follows:</p>\n<ul>\n<li>def</li>\n<li>noncomputable</li>\n<li>notation</li>\n<li>infix</li>\n<li>prefix</li>\n<li>postfix</li>\n<li>open</li>\n<li>namespace</li>\n<li>class</li>\n<li>inductive</li>\n<li>structure</li>\n<li>....</li>\n</ul>",
        "id": 446271563,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1719062038
    },
    {
        "content": "<p>The question is: \"Is there a short word for a top-level command that does not start with <code>#</code>?</p>",
        "id": 446271996,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1719062346
    },
    {
        "content": "<p>Syntactically, there is nothing special about <code>#print</code> vs <code>def</code>; both are in the <code>command</code> category</p>",
        "id": 446274515,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719064288
    },
    {
        "content": "<blockquote>\n<p>Syntactically, there is nothing special about¬†<code>#print</code>¬†vs¬†<code>def</code>; both are in the¬†<code>command</code>¬†category</p>\n</blockquote>\n<p>That's why I'm in trouble ...</p>",
        "id": 446274636,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1719064372
    },
    {
        "content": "<p>I want a customary name for it, rather than a syntactic classification name.</p>",
        "id": 446274946,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1719064626
    },
    {
        "content": "<p>Would it be strange if I called it \"syntactic command\"?</p>",
        "id": 446274983,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1719064668
    },
    {
        "content": "<p>Maybe <code>def</code>, <code>theorem</code>,... can be called \"keywords\"?</p>\n<p>The linter that excludes <code>#</code>-commands is called... <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Mathlib.Linter.linter.hashCommand#doc\">docs#Mathlib.Linter.linter.hashCommand</a>, but this is not an official name.</p>",
        "id": 446276359,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1719065752
    },
    {
        "content": "<p>\"keyword\" sounds nice.  It can be called \"syntactic keyword\"?</p>",
        "id": 446277161,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1719066359
    },
    {
        "content": "<p>I‚Äôd call them declarations</p>",
        "id": 446278547,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1719067150
    },
    {
        "content": "<p>Except namespace, section, etc</p>",
        "id": 446278571,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1719067171
    },
    {
        "content": "<p>Asei, can you elaborate on why you want a name for these?</p>",
        "id": 446278587,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719067186
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416280\">Max Nowak üêâ</span> <a href=\"#narrow/stream/270676-lean4/topic/name.20for.20syntax.20category.20of.20.60notation.60.2C.20.60namespace.60.2C.20.60def.60.2E.2E/near/446278547\">said</a>:</p>\n<blockquote>\n<p>I‚Äôd call them declarations</p>\n</blockquote>\n<p>Declarations are the things (some of) these keywords generate, not the keywords themselves</p>",
        "id": 446278663,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719067230
    },
    {
        "content": "<p>Internally, def, inductive, etc elaborate the syntax tree, and then use the ‚ÄúaddDecl‚Äù function to add the actual declaration to the Environment.</p>",
        "id": 446278699,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1719067269
    },
    {
        "content": "<p>So maybe \"declaration commands\" would be reasonable, but I don't think this ends up being referred to often enough to need a name</p>",
        "id": 446278703,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719067274
    },
    {
        "content": "<p>And <code>example</code> doesn't create a declaration at all!</p>",
        "id": 446278826,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719067354
    },
    {
        "content": "<blockquote>\n<p>Asei, can you elaborate on why you want a name for these?</p>\n</blockquote>\n<p>Commands with # and without # seem to have different uses and appearances, but I thought it was inconvenient not to have a concise name for them.</p>",
        "id": 446278849,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1719067375
    },
    {
        "content": "<p>I guess <code>#align</code> and <code>#align_import</code> are exceptions to that rule</p>",
        "id": 446278993,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719067474
    },
    {
        "content": "<p>oh its really an exception...</p>",
        "id": 446279022,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1719067499
    },
    {
        "content": "<p>The expectation is that all such exceptions are in</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">private</span><span class=\"w\"> </span><span class=\"kn\">abbrev</span><span class=\"w\"> </span><span class=\"n\">allowed_commands</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">HashSet</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"s2\">\"#align\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"s2\">\"#align_import\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"s2\">\"#noalign\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"s2\">\"#adaptation_note\"</span><span class=\"w\"> </span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 446279255,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1719067664
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/name.20for.20syntax.20category.20of.20.60notation.60.2C.20.60namespace.60.2C.20.60def.60.2E.2E/near/446278826\">said</a>:</p>\n<blockquote>\n<p>And <code>example</code> doesn't create a declaration at all!</p>\n</blockquote>\n<p>Nonetheless, it is part of the <code>declaration</code> <a href=\"https://github.com/leanprover/lean4/blob/5426a5c8b36341fd1bf7a6088b519ae257a49fea/src/Lean/Parser/Command.lean#L236-L239\">syntax</a>. <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span>  <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 446373416,
        "sender_full_name": "Mac Malone",
        "timestamp": 1719121429
    },
    {
        "content": "<p>(It actually does create a declaration. It just then discards it via <code>withoutModifyingEnv</code>).</p>",
        "id": 446373495,
        "sender_full_name": "Mac Malone",
        "timestamp": 1719121457
    }
]