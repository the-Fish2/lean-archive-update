[
    {
        "content": "<p>I'm interested in running the simplifier over certain tactic generated proofs in order to generate more elegant term proofs for machine learning purposes, but I'm not really sure where to start with this (or whether it's a viable or good idea).</p>\n<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>'s lean-training-data has been an excellent source for getting started with metaprogramming and I've got a custom pipeline running to pull a lot of the data that I want out of the library, but I'm missing a piece of the puzzle to bridge the gap between <code>Expr</code>s and <code>simp</code>.</p>\n<p>Assuming this is possible, I'd appreciate a pointer in the right direction!</p>",
        "id": 423263890,
        "sender_full_name": "Sam",
        "timestamp": 1708867977
    },
    {
        "content": "<p>You can simply call <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.simp#doc\">docs#Lean.Meta.simp</a>, here is an example simplifying <code>0 + 10</code> to <code>10</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Qq</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Qq</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"k\">in</span>\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n\n <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">10</span><span class=\"o\">)</span>\n\n <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">simp</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Simp.Context.mkDefault</span><span class=\"o\">)</span>\n\n <span class=\"k\">let</span> <span class=\"n\">e'</span> <span class=\"o\">:=</span> <span class=\"n\">r.expr</span>\n\n <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{← ppExpr e} simplifies to {← ppExpr e'}\"</span>\n</code></pre></div>",
        "id": 423266499,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1708870291
    },
    {
        "content": "<p>Ah brilliant, thanks <span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span> ! I have no idea why I spent ages trying to find it by reverse engineering the source instead of just... checking the docs... Very easy!</p>",
        "id": 423267065,
        "sender_full_name": "Sam",
        "timestamp": 1708870878
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"428422\">Sam</span> has marked this topic as resolved.</p>",
        "id": 423267073,
        "sender_full_name": "Notification Bot",
        "timestamp": 1708870883
    }
]