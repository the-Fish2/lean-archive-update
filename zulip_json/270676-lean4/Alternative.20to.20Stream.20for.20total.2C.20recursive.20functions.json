[
    {
        "content": "<p>I'm working on a Protobuf library for Lean 4. It's still in the very early stages, and I'm working on varint support right now. I've managed to prove that my encoding functions are total, but because my decoding functions (for example: <a href=\"https://github.com/mtoohey31/lean4-protobuf/blob/c9dff0459a41e5fa78587fa1ece36d5d2708637a/Protobuf/Varint.lean#L17\">https://github.com/mtoohey31/lean4-protobuf/blob/c9dff0459a41e5fa78587fa1ece36d5d2708637a/Protobuf/Varint.lean#L17</a>) operate recursively on streams, they're partial because there's no guarantee that a stream isn't endless.</p>\n<p>Is there an alternative to Stream that has a similarly abstract next?-like method but also some notion of length that could be used to show termination? Thanks for any help!</p>",
        "id": 441604083,
        "sender_full_name": "Matthew Toohey",
        "timestamp": 1717125004
    },
    {
        "content": "<p>was messing around with something like that a couple years ago, but I ended up not having a use for it so I never built a proper API for it. here's the last version I had (it's not much...): <a href=\"https://github.com/JamesGallicchio/LeanColls/blob/596d576cd6751e61cf521fe48e74d445a564f635/LeanColls/Stream.lean\">https://github.com/JamesGallicchio/LeanColls/blob/596d576cd6751e61cf521fe48e74d445a564f635/LeanColls/Stream.lean</a></p>",
        "id": 441608177,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1717127238
    },
    {
        "content": "<p>and i'm excited for the protobuf library :D</p>",
        "id": 441608305,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1717127299
    },
    {
        "content": "<p>Awesome, SizedStream looks very promising so I'll try basing something off that. Thanks!</p>",
        "id": 441611608,
        "sender_full_name": "Matthew Toohey",
        "timestamp": 1717129624
    }
]