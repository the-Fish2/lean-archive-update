[
    {
        "content": "<p>Hi, sorry for the very basic question, I am new to lean. I am trying to define a type <code>poly</code> which is a vector of rationals. I tried:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">poly</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">Vector</span> <span class=\"n\">ℚ</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>which seems to work fine, but now I want to be able to construct terms of type <code>poly n</code>. I have attempted to do something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">poly</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"o\">([(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">),</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">],</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This makes sense to me because as far as I can tell Vector n is defined as a dependent pair, where the first element is a list and the second is a proof of its length. However, this does not typecheck. Could someone clarify what I am doing wrong? Thanks.</p>",
        "id": 409284240,
        "sender_full_name": "Timothy Z",
        "timestamp": 1703119527
    },
    {
        "content": "<p>you used the wrong brackets:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">poly</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"o\">⟨[(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">),</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">],</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 409284923,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1703120094
    },
    {
        "content": "<p>Thanks! What do \\langle and \\rangle mean?</p>",
        "id": 409285047,
        "sender_full_name": "Timothy Z",
        "timestamp": 1703120210
    },
    {
        "content": "<p>Those are the “anonymous constructor” brackets. They’re a convenient notation for applying the constructor of structures</p>",
        "id": 409285242,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1703120408
    },
    {
        "content": "<p>Ah I see, so the problem was that I was missing constructor calls around my term, right? If I wanted to do it manually (without the bracket notation) how would that look?</p>",
        "id": 409285384,
        "sender_full_name": "Timothy Z",
        "timestamp": 1703120487
    },
    {
        "content": "<p>The parentheses <code>(x,y)</code> can be used to construct terms of the usual type-theoretic binary product, but the angle brackets work much more generally</p>",
        "id": 409285392,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1703120491
    },
    {
        "content": "<p>I think you would write <code>Subtype.mk _ _</code> (I don’t remember how <code>Vector</code> is defined though)</p>",
        "id": 409285496,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1703120535
    },
    {
        "content": "<p>That would work if Vector was defined as a subtype</p>",
        "id": 409285522,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1703120560
    },
    {
        "content": "<p>Alright, thanks!</p>",
        "id": 409285545,
        "sender_full_name": "Timothy Z",
        "timestamp": 1703120587
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"675788\">Timothy Z</span> has marked this topic as resolved.</p>",
        "id": 409285549,
        "sender_full_name": "Notification Bot",
        "timestamp": 1703120590
    }
]