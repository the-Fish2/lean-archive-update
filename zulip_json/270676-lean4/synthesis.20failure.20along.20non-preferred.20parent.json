[
    {
        "content": "<p>I stopped by office hours with a simplified version of the following. Thanks for <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> for indulging me. The following makes things more clear I believe</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- stand in for Setoid</span>\n<span class=\"kd\">class</span> <span class=\"n\">Setoid'</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n\n<span class=\"c1\">-- stand in for some construction of quotient</span>\n<span class=\"kd\">def</span> <span class=\"n\">Setoid'.Quotient</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Setoid'</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">Unit</span>\n\n<span class=\"c1\">-- in mathlib, we would require a proof that relation preserves multiplication</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Con</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">Setoid'</span> <span class=\"n\">R</span>\n\n<span class=\"c1\">-- in mathlib, we would require a proof that relation preserves addition</span>\n<span class=\"kd\">structure</span> <span class=\"n\">AddCon</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">Setoid'</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">RingCon</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">Con</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">AddCon</span> <span class=\"n\">R</span>\n\n<span class=\"c1\">-- @[reducible] -- uncomment me to break the last #synth</span>\n<span class=\"kd\">def</span> <span class=\"n\">RingCon.toAddCon'</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">RingCon</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">AddCon</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span><span class=\"n\">toSetoid'</span> <span class=\"o\">:=</span> <span class=\"n\">c.toSetoid'</span><span class=\"o\">}</span>\n\n<span class=\"c1\">-- the underlying quotient for an AddCon</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">AddCon.Quotient</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">AddCon</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">c.toSetoid'.Quotient</span>\n\n<span class=\"c1\">-- we can un-sorry this if we have a proof that the relation preserves addition</span>\n<span class=\"kd\">instance</span> <span class=\"n\">AddCon.instaAdd</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">AddCon</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">c.Quotient</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- the underlying quotient for a Con</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">Con.Quotient</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Con</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">c.toSetoid'.Quotient</span>\n\n<span class=\"c1\">-- we can un-sorry this if we have a proof that the relation preserves multiplication</span>\n<span class=\"kd\">instance</span> <span class=\"n\">Con.instaMul</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Con</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"o\">(</span><span class=\"n\">c.Quotient</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- the underlying quotient for a RingCon</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">RingCon.Quotient</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">RingCon</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">c.toSetoid'.Quotient</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">RingCon</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c'</span> <span class=\"o\">:</span> <span class=\"n\">AddCon</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- set_option trace.Meta.DiscrTree true in</span>\n<span class=\"c1\">-- set_option trace.Meta.synthInstance true in</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Mul</span> <span class=\"o\">(</span><span class=\"n\">c.Quotient</span><span class=\"o\">)</span> <span class=\"c1\">-- ok</span>\n\n<span class=\"c1\">-- set_option trace.Meta.DiscrTree true in</span>\n<span class=\"c1\">-- set_option trace.Meta.synthInstance true in</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">c.Quotient</span><span class=\"o\">)</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"c1\">-- set_option trace.Meta.DiscrTree true in</span>\n<span class=\"c1\">-- set_option trace.Meta.synthInstance true in</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">c.toAddCon'.Quotient</span><span class=\"o\">)</span> <span class=\"c1\">-- ok for now but make `toAddCon'` reducible and it breaks</span>\n</code></pre></div>",
        "id": 435227020,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1713975009
    },
    {
        "content": "<p>This is a continuation of <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/synthesis.20failure.20on.20non-preferred.20parent\">#mathlib4 &gt; synthesis failure on non-preferred parent</a> </p>\n<p>The cause is that the discrimination tree indexes <code>c.Quotient</code> for <code>(c : RingCon R)</code> as <code>c.toCon.toSetoid'</code> and then cannot find an instance of <code>Add</code> for this. </p>\n<p>Lowering the transparency with <code>RingCon.toAddCon'</code> blocks this reduction so things work.</p>",
        "id": 435227328,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1713975122
    },
    {
        "content": "<p>In mathlib, there seems (from memory right now) to be multiple bug reports that involve \"losing\" instances along non-preferred parent projections. This might be related but is speculative at this point.</p>",
        "id": 435228045,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1713975343
    },
    {
        "content": "<p>I guess I can also use <code>no_index</code> here </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">AddCon.instaAdd</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">AddCon</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">no_index</span> <span class=\"o\">(</span><span class=\"n\">c.Quotient</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>but that seems less than ideal</p>",
        "id": 435290471,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1714003354
    }
]