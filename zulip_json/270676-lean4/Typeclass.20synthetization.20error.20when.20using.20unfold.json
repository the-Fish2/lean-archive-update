[
    {
        "content": "<p>I've encountered this strange issue, where I was given <code>finite : Set.Finite s</code>, and a function <code>f : ↑s → β</code>, and so some of the theorems used require <code>Finite ↑s</code> instead of <code>Set.Finite s</code>.<br>\nHowever, whenever I would use <code>unfold Set.Finite at finite</code>, errors would pop up. I randomly then tried to do <code>rw [Set.Finite] at finite</code>, and things suddenly worked. Here's a MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Filter</span>\n\n<span class=\"c1\">-- `Filter.iInter_mem` here requires `Finite ↑s`:</span>\n\n<span class=\"c1\">-- Works</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">finite</span> <span class=\"o\">:</span> <span class=\"n\">s.Finite</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">⋂</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Set.Finite</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">finite</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Filter.iInter_mem</span><span class=\"o\">]</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">h</span>\n\n<span class=\"c1\">-- Fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">finite</span> <span class=\"o\">:</span> <span class=\"n\">s.Finite</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">⋂</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">Set.Finite</span> <span class=\"n\">at</span> <span class=\"n\">finite</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Filter.iInter_mem</span><span class=\"o\">]</span> <span class=\"c1\">-- Failed to synthesize instance `Finite ↑s`</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p><code>#print</code>-ing either theorem oddly yields the same function body.</p>",
        "id": 422088012,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1708253208
    },
    {
        "content": "<p>Adding <code>have _ := finite</code> after the <code>unfold</code> line fixes it, so this looks like a caching issue</p>",
        "id": 422089955,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708255158
    },
    {
        "content": "<p>That was my solution at first, but it makes the mathlib linter unhappy</p>",
        "id": 422098599,
        "sender_full_name": "Emilie (Shad Amethyst)",
        "timestamp": 1708263642
    },
    {
        "content": "<p><code>haveI</code>?</p>",
        "id": 422098822,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708263871
    },
    {
        "content": "<p>I think the next step here is probably to make a Mathlib-free <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 422099388,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708264460
    }
]