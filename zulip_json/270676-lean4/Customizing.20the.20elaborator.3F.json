[
    {
        "content": "<p>I'm wondering, is there a way to customize the lean elaborator?</p>",
        "id": 391023691,
        "sender_full_name": "Joey Eremondi",
        "timestamp": 1694728451
    },
    {
        "content": "<p>There is dozens of ways. What exactly do you want to do? <span class=\"user-mention\" data-user-id=\"384488\">@Joey Eremondi</span></p>",
        "id": 391024122,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1694728692
    },
    {
        "content": "<p>A good starting point might be: <a href=\"https://github.com/leanprover-community/lean4-metaprogramming-book/blob/master/md/main/07_elaboration.md\">https://github.com/leanprover-community/lean4-metaprogramming-book/blob/master/md/main/07_elaboration.md</a></p>",
        "id": 391024264,
        "sender_full_name": "David Renshaw",
        "timestamp": 1694728789
    },
    {
        "content": "<p>I'm wondering, is there a way to customize the elaborator in lean?</p>\n<p>I've seen some references in the docs to elaborators for type-aware macros. I'm wondering, is there a way to override existing forms without actually modifying the compiler? To have, for example, lambda or function application elaborate to something different? </p>\n<p>I'm looking to do something like the CoqRETT plugin, where each datatype is modified to have additional constructors. Or like Cur, where core language forms can be redefined but you can still refer to the old version.</p>",
        "id": 391024490,
        "sender_full_name": "Joey Eremondi",
        "timestamp": 1694728899
    },
    {
        "content": "<p>yes</p>",
        "id": 391024596,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694728952
    },
    {
        "content": "<p>I'm afraid you will have to be more specific if you want a helpful answer.</p>",
        "id": 391024634,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694728973
    },
    {
        "content": "<p>You seem to have asked the question expecting to get a \"no\" or \"yes under these specific conditions\", but the answer is more like \"yes you can do almost every conceivable thing in this space\" so you have to be more specific</p>",
        "id": 391024819,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694729078
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> <span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span>  Sorry, I submitted only the first line of the message by accident, I'm struggling with the mobile interface.  Full message is <a href=\"#narrow/stream/270676-lean4/topic/Customizing.20the.20elaborator.3F/near/391024490\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Customizing.20the.20elaborator.3F/near/391024490</a></p>\n<p>As an example, is there a way to re-define how lambda, application, and function types are elaborated in a specific file? For example, in the CoqRETT example I gave, they add exceptions to Coq by extending each datatype with an extra \"error\" constructor. Then all terms are elaborated into an Error monad. So an application <code>f x</code> is normally just elaborated into an application in the core language, but here instead it would be elaborated into <code>do f' &lt;- f ; x &lt;- x; (f' x')</code>.</p>\n<p>Or suppose I want to add a typecase feature to Lean, so I use a custom elaborator that turns all types into Codes of a Universe ala Tarski, and implicitly inserts calls to the interpretation function for those codes at each point needed.</p>\n<p>So the idea is I can write code using all the normal language core constructs, but I have a custom elaborator that it goes through to translate it into something different in the core. Basically I want to change the language without modifying the compiler, especially without modifying the core language, so I know whatever I get out the other end is sound, even if it's different from what the normal elaborator would produce.</p>\n<p>I guess I'm expecting a \"no\" because the only language I know of that can do this is Cur, which is built on Racket macros and is ridiculously extensible. Coq can do it, but requires you to write a custom plugin. But I've heard that Lean's macros are powerful and take a lot from e.g. Scheme and Racket macros, so I thought there was a chance it would be possible.</p>",
        "id": 391027638,
        "sender_full_name": "Joey Eremondi",
        "timestamp": 1694730754
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243791\">@David Renshaw</span> Did not know that book existed, looks like the entire thing is probably useful to me. Thanks!</p>",
        "id": 391027715,
        "sender_full_name": "Joey Eremondi",
        "timestamp": 1694730806
    },
    {
        "content": "<p>again, the answer is yes</p>",
        "id": 391027918,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694730913
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Cool. How? Are there docs?</p>",
        "id": 391028119,
        "sender_full_name": "Joey Eremondi",
        "timestamp": 1694731034
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243791\">David Renshaw</span> <a href=\"#narrow/stream/270676-lean4/topic/Customizing.20the.20elaborator.3F/near/391024264\">said</a>:</p>\n<blockquote>\n<p>A good starting point might be: <a href=\"https://github.com/leanprover-community/lean4-metaprogramming-book/blob/master/md/main/07_elaboration.md\">https://github.com/leanprover-community/lean4-metaprogramming-book/blob/master/md/main/07_elaboration.md</a></p>\n</blockquote>",
        "id": 391028137,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694731048
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Looking through that now. It seems to tell how to add new forms to the language, but not how to override existing forms, especially ones that don't have names (that I know of), like lambda and application.</p>",
        "id": 391028621,
        "sender_full_name": "Joey Eremondi",
        "timestamp": 1694731323
    },
    {
        "content": "<p>They all have names</p>",
        "id": 391028673,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694731336
    },
    {
        "content": "<p>if you ctrl-click on lambda it should take you to the definition</p>",
        "id": 391028710,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694731354
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Parser.Term.fun#src\">src4#Lean.Parser.Term.fun</a></p>",
        "id": 391028749,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694731387
    },
    {
        "content": "<p>to override an existing form you use <code>elab_rules</code> instead of <code>elab</code></p>",
        "id": 391028784,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694731423
    },
    {
        "content": "<p>Ahh, okay. Thanks!</p>",
        "id": 391029284,
        "sender_full_name": "Joey Eremondi",
        "timestamp": 1694731787
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Customizing.20the.20elaborator.3F/near/391028784\">said</a>:</p>\n<blockquote>\n<p>to override an existing form you use <code>elab_rules</code> instead of <code>elab</code></p>\n</blockquote>\n<p>Could you expand? My naïve attempts at overriding an existing elab failed.</p>",
        "id": 428209079,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711051966
    },
    {
        "content": "<p>failed how?</p>",
        "id": 428209553,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711052135
    },
    {
        "content": "<p>The old elab is still used with the notation</p>",
        "id": 428209681,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711052168
    },
    {
        "content": "<p>there are additional issues that can come up when you override an elab, just like overloaded notation</p>",
        "id": 428209691,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711052171
    },
    {
        "content": "<p>the first elab needs to return <code>throwUnsupportedSyntax</code> I think</p>",
        "id": 428209738,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711052189
    },
    {
        "content": "<p>otherwise it will be used</p>",
        "id": 428209764,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711052196
    },
    {
        "content": "<p>The first elab is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">_root_.setBuilder</span><span class=\"o\">)</span> <span class=\"s2\">\"{\"</span> <span class=\"n\">extBinder</span> <span class=\"s2\">\" | \"</span> <span class=\"n\">term</span> <span class=\"s2\">\"}\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span> <span class=\"o\">(</span><span class=\"n\">kind</span> <span class=\"o\">:=</span> <span class=\"n\">_root_.setBuilder</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">({</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"o\">})</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">setOf</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">↦</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">({</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"o\">})</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">setOf</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t</span> <span class=\"bp\">↦</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">({</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">binderPred</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"o\">})</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">setOf</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">↦</span> <span class=\"n\">satisfies_binder_pred</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 428209864,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711052242
    },
    {
        "content": "<p>Wait wait, but it's not going to return <code>throwUnsupportedSyntax</code> in the cases it parses</p>",
        "id": 428209946,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711052277
    },
    {
        "content": "<p>it's possible that the second elab would also be tried if the first one fails in another way, but elabs often don't \"fail\", they produce errors and continue with <code>sorry</code></p>",
        "id": 428209947,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711052278
    },
    {
        "content": "<p>also, this isn't an <code>elab</code> at all, it's a macro</p>",
        "id": 428210029,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711052299
    },
    {
        "content": "<p>I'm not sure if macro/elab overloading works</p>",
        "id": 428210077,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711052313
    },
    {
        "content": "<p>Sorry, I have no idea how most of this works</p>",
        "id": 428210088,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711052317
    },
    {
        "content": "<p>Let me explain what's going on. I want <code>{x | p x}</code> to be parsed as a set or a finset depending on the expected type. The trouble is that the above <code>macro_rules</code> is defined very early on (in <code>Mathlib.Init.Set</code>) where <code>Finset</code> is not yet available.</p>",
        "id": 428210341,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711052411
    },
    {
        "content": "<p>So I need one elab/macro/whatever (is there a generic name here?) to parse the <code>{x | p x}</code> notation as a <code>Set</code> until <code>Finset</code> is defined, then another one to parse the <code>{x | p x}</code> notation polymorphically.</p>",
        "id": 428210554,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711052496
    },
    {
        "content": "<p>Alternatively, you could introduce <code>SetOf</code> and <code>Filter</code> typeclasses and have an elab in <code>Mathlib.Init.Set</code> which works for any target type with those instances</p>",
        "id": 428210817,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1711052591
    },
    {
        "content": "<p>That sounds like useless overhead in an easy case that Lean should be able to handle</p>",
        "id": 428210950,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711052644
    },
    {
        "content": "<p>You will probably have to have the earlier elaborator set up a hook which can be used by the later one</p>",
        "id": 428212071,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711053032
    },
    {
        "content": "<p>How would that work?</p>",
        "id": 428212119,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711053050
    },
    {
        "content": "<p>actually no, I'm sure this should work</p>",
        "id": 428212398,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711053141
    },
    {
        "content": "<p>What if <code>setOf</code> is a macro notation and you overload that?</p>",
        "id": 428212453,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711053166
    },
    {
        "content": "<p>do you have a MWE version of this code for testing?</p>",
        "id": 428212557,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711053205
    },
    {
        "content": "<p>Let me try to put something together</p>",
        "id": 428212819,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711053279
    },
    {
        "content": "<p>I guess there is some mismatch anyway because Finset doesn't use <code>setOf</code></p>",
        "id": 428213349,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711053451
    },
    {
        "content": "<p>Is this minimal enough to you? I don't trust my minimisation skills around elaboration any further.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fintype.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Std.ExtendedBinder</span> <span class=\"n\">Finset</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span> <span class=\"n\">Level</span> <span class=\"n\">Qq</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"[\"</span> <span class=\"n\">extBinder</span> <span class=\"s2\">\" | \"</span> <span class=\"n\">term</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">setOf</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">↦</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">setOf</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t</span> <span class=\"bp\">↦</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">binderPred</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">setOf</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">↦</span> <span class=\"n\">satisfies_binder_pred</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mkSetOf</span> <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">expectedType</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TermElabM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">match_expr</span> <span class=\"n\">expectedType</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Finset</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">filter</span> <span class=\"bp\">$</span><span class=\"n\">pred</span> <span class=\"n\">univ</span><span class=\"o\">))</span> <span class=\"n\">expectedType</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">setOf</span> <span class=\"bp\">$</span><span class=\"n\">pred</span><span class=\"o\">))</span> <span class=\"n\">expectedType</span>\n\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">expectedType</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">mkSetOf</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">↦</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"n\">expectedType</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">mkSetOf</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t</span> <span class=\"bp\">↦</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"n\">expectedType</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">∈</span> <span class=\"bp\">$</span><span class=\"n\">s</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">desugared</span> <span class=\"bp\">←</span>\n      <span class=\"n\">match_expr</span> <span class=\"n\">expectedType</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">Finset</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">↦</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">)</span>\n      <span class=\"bp\">|</span> <span class=\"n\">Set</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">setOf</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"bp\">$</span><span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span>\n      <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">match_expr</span> <span class=\"bp\">←</span> <span class=\"n\">whnfR</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">s</span> <span class=\"n\">none</span><span class=\"o\">))</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"n\">Finset</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">↦</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">)</span>\n        <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">setOf</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"bp\">$</span><span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span>\n    <span class=\"n\">elabTerm</span> <span class=\"n\">desugared</span> <span class=\"n\">expectedType</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">binderPred</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"n\">elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">setOf</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">↦</span> <span class=\"n\">satisfies_binder_pred</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"n\">expectedType</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidablePred</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">[</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">]</span>                  <span class=\"c1\">-- works</span>\n<span class=\"k\">#check</span> <span class=\"o\">([</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">_</span><span class=\"o\">)</span>        <span class=\"c1\">-- works</span>\n<span class=\"k\">#check</span> <span class=\"o\">([</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">_</span><span class=\"o\">)</span>     <span class=\"c1\">-- fails</span>\n<span class=\"k\">#check</span> <span class=\"o\">[</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">]</span>              <span class=\"c1\">-- works</span>\n<span class=\"k\">#check</span> <span class=\"o\">([</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"c1\">-- fails</span>\n<span class=\"k\">#check</span> <span class=\"o\">([</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">_</span><span class=\"o\">)</span>    <span class=\"c1\">-- works</span>\n<span class=\"k\">#check</span> <span class=\"o\">[</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">]</span>              <span class=\"c1\">-- works</span>\n<span class=\"k\">#check</span> <span class=\"o\">([</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">_</span><span class=\"o\">)</span>    <span class=\"c1\">-- works</span>\n<span class=\"k\">#check</span> <span class=\"o\">([</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 428213886,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711053634
    },
    {
        "content": "<p>I made this based on your code for the finset stuff</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Parser.Term</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Util.ExtendedBinder</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span> <span class=\"n\">Meta</span> <span class=\"n\">Std.ExtendedBinder</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"kd\">def</span> <span class=\"n\">setOf</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">p</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Membership</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span> <span class=\"n\">a</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Membership</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">List.Mem</span><span class=\"o\">⟩</span>\n<span class=\"kd\">def</span> <span class=\"n\">Finset.filter</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidablePred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">List.filter</span> <span class=\"n\">p</span> <span class=\"n\">s</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"{\"</span> <span class=\"n\">extBinder</span> <span class=\"s2\">\" | \"</span> <span class=\"n\">term</span> <span class=\"s2\">\"}\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">({</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"o\">})</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">setOf</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">↦</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">({</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"o\">})</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">setOf</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t</span> <span class=\"bp\">↦</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">({</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">binderPred</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"o\">})</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">setOf</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">↦</span> <span class=\"n\">satisfies_binder_pred</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"[\"</span> <span class=\"n\">extBinder</span> <span class=\"s2\">\" | \"</span> <span class=\"n\">term</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">setOf</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">↦</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">setOf</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t</span> <span class=\"bp\">↦</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">binderPred</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">setOf</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">↦</span> <span class=\"n\">satisfies_binder_pred</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mkSetOf</span> <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">expectedType</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TermElabM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">match_expr</span> <span class=\"n\">expectedType</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Finset</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">filter</span> <span class=\"bp\">$</span><span class=\"n\">pred</span> <span class=\"n\">univ</span><span class=\"o\">))</span> <span class=\"n\">expectedType</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">setOf</span> <span class=\"bp\">$</span><span class=\"n\">pred</span><span class=\"o\">))</span> <span class=\"n\">expectedType</span>\n\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">expectedType</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">mkSetOf</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">↦</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"n\">expectedType</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">mkSetOf</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t</span> <span class=\"bp\">↦</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"n\">expectedType</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">∈</span> <span class=\"bp\">$</span><span class=\"n\">s</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">desugared</span> <span class=\"bp\">←</span>\n      <span class=\"n\">match_expr</span> <span class=\"n\">expectedType</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">Finset</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">↦</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">)</span>\n      <span class=\"bp\">|</span> <span class=\"n\">Set</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">setOf</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"bp\">$</span><span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span>\n      <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">match_expr</span> <span class=\"bp\">←</span> <span class=\"n\">whnfR</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">s</span> <span class=\"n\">none</span><span class=\"o\">))</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"n\">Finset</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">↦</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">)</span>\n        <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">setOf</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"bp\">$</span><span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span>\n    <span class=\"n\">elabTerm</span> <span class=\"n\">desugared</span> <span class=\"n\">expectedType</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">binderPred</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"n\">elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">setOf</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">↦</span> <span class=\"n\">satisfies_binder_pred</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"n\">expectedType</span>\n\n<span class=\"k\">#check</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">|</span> <span class=\"n\">True</span><span class=\"o\">}</span> <span class=\"c1\">-- works</span>\n<span class=\"k\">#check</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">|</span> <span class=\"n\">True</span><span class=\"o\">]</span> <span class=\"c1\">-- works (?)</span>\n<span class=\"k\">#check</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">show</span> <span class=\"n\">Finset</span> <span class=\"n\">Nat</span> <span class=\"k\">from</span> <span class=\"o\">[</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">|</span> <span class=\"n\">True</span><span class=\"o\">]</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 428214412,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711053832
    },
    {
        "content": "<p>The behavior in the second case seems a bit odd though, should it produce a Finset?</p>",
        "id": 428214501,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711053861
    },
    {
        "content": "<p>It should produce a finset, yes</p>",
        "id": 428214629,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711053924
    },
    {
        "content": "<p>Here's a working version of the MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Parser.Term</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Util.ExtendedBinder</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span> <span class=\"n\">Meta</span> <span class=\"n\">Std.ExtendedBinder</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"kd\">def</span> <span class=\"n\">setOf</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">p</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Membership</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span> <span class=\"n\">a</span><span class=\"o\">⟩</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"{\"</span> <span class=\"n\">extBinder</span> <span class=\"s2\">\" | \"</span> <span class=\"n\">term</span> <span class=\"s2\">\"}\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"maybe_filter%(\"</span> <span class=\"n\">ident</span> <span class=\"s2\">\" ∈ \"</span> <span class=\"n\">term</span> <span class=\"s2\">\" | \"</span> <span class=\"n\">term</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">maybe_filter</span><span class=\"bp\">%</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"bp\">$</span><span class=\"n\">s</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"n\">elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">setOf</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">↦</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"bp\">$</span><span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"n\">none</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">({</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"o\">})</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">setOf</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">↦</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">({</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"o\">})</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">setOf</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t</span> <span class=\"bp\">↦</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">({</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">∈</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"o\">})</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">maybe_filter</span><span class=\"bp\">%</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"bp\">$</span><span class=\"n\">s</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">({</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">binderPred</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"o\">})</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">setOf</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">↦</span> <span class=\"n\">satisfies_binder_pred</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Membership</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">List.Mem</span><span class=\"o\">⟩</span>\n<span class=\"kd\">def</span> <span class=\"n\">Finset.filter</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidablePred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">List.filter</span> <span class=\"n\">p</span> <span class=\"n\">s</span>\n\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">expectedType</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">maybe_filter</span><span class=\"bp\">%</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"bp\">$</span><span class=\"n\">s</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"n\">match_expr</span> <span class=\"n\">expectedType</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Finset</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Set</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwUnsupportedSyntax</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"n\">ty</span> <span class=\"bp\">←</span> <span class=\"n\">try</span> <span class=\"n\">whnfR</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">s</span> <span class=\"n\">none</span><span class=\"o\">))</span> <span class=\"n\">catch</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwUnsupportedSyntax</span>\n      <span class=\"n\">match_expr</span> <span class=\"n\">ty</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">Finset</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n      <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwUnsupportedSyntax</span>\n    <span class=\"n\">elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Finset.filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">↦</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"n\">expectedType</span>\n\n<span class=\"k\">#check</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">|</span> <span class=\"n\">True</span><span class=\"o\">}</span>\n<span class=\"k\">#check</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">|</span> <span class=\"n\">True</span><span class=\"o\">}</span>\n<span class=\"k\">#check</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">show</span> <span class=\"n\">Finset</span> <span class=\"n\">Nat</span> <span class=\"k\">from</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">|</span> <span class=\"n\">True</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 428217641,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711055031
    },
    {
        "content": "<p>Why does your overloading work but not mine? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 428217870,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711055135
    },
    {
        "content": "<p>I confirmed that (and you can too, by editing this code) that mixed elab/macro overloading doesn't work</p>",
        "id": 428218285,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711055296
    },
    {
        "content": "<p>I think macro/macro also doesn't work (except for what I said about macros specifically only partially implementing the underlying syntax)</p>",
        "id": 428218348,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711055326
    },
    {
        "content": "<p>But if I changed the <code>macro_rules</code> into an <code>elab_rules</code> then overloading should work?</p>",
        "id": 428218373,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711055334
    },
    {
        "content": "<p>Do you agree this would be better style than having each macro calling a specifically-defined elab just so that it's overridable?</p>",
        "id": 428218481,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711055383
    },
    {
        "content": "<p>even here, you will note that although there are two <code>elab_rules</code> one of them is careful to <code>throwUnsupportedSyntax</code> so it's not using the generic notation overloading system</p>",
        "id": 428218619,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711055432
    },
    {
        "content": "<p>Okay but I would have expected that to matter only in the <em>first</em> declared <code>elab_rules</code>?</p>",
        "id": 428218823,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711055525
    },
    {
        "content": "<p>if it didn't do that, the second one would always take priority</p>",
        "id": 428218863,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711055548
    },
    {
        "content": "<p>Yeah that's fine, right?</p>",
        "id": 428218877,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711055556
    },
    {
        "content": "<p>I think that's what your version was doing</p>",
        "id": 428218881,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711055559
    },
    {
        "content": "<p>In my version the problem was that the <em>first one</em> was always taking priority</p>",
        "id": 428218921,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711055579
    },
    {
        "content": "<p>that's because you used macro/elab overloading</p>",
        "id": 428219008,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711055618
    },
    {
        "content": "<p>Okay, so that message was correct? <span aria-label=\"point down\" class=\"emoji emoji-1f447\" role=\"img\" title=\"point down\">:point_down:</span><br>\n<span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/270676-lean4/topic/Customizing.20the.20elaborator.3F/near/428218373\">said</a>:</p>\n<blockquote>\n<p>But if I changed the <code>macro_rules</code> into an <code>elab_rules</code> then overloading should work?</p>\n</blockquote>",
        "id": 428219113,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711055649
    },
    {
        "content": "<p>\"work\" meaning that the second one would take precedence</p>",
        "id": 428219143,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711055666
    },
    {
        "content": "<p>Yep, great, that's what I wanted to hear</p>",
        "id": 428219156,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711055677
    },
    {
        "content": "<p>Sorry I swear I am not always trying to squeeze knowledge out of you. It's just that docs fail me more often than they should.</p>",
        "id": 428219191,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711055699
    },
    {
        "content": "<p>docs? what docs</p>",
        "id": 428219222,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711055711
    },
    {
        "content": "<p>I learned all this the hard way</p>",
        "id": 428219285,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711055738
    },
    {
        "content": "<p>I learned all this the \"Ask Mario\" way</p>",
        "id": 428219329,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711055758
    },
    {
        "content": "<p>I tried that, it doesn't seem to work so well for me</p>",
        "id": 428219402,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711055787
    },
    {
        "content": "<p>I have literally seen <em>no</em> mention of overloading anywhere whatsoever, and even less mentions of the macro/macro vs macro/elab vs elab/macro overloading differences.</p>",
        "id": 428219479,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711055829
    },
    {
        "content": "<p>I had no idea and just tried all of them and observed that it doesn't seem to work</p>",
        "id": 428219520,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711055860
    },
    {
        "content": "<p>Let me add a subchapter to the metaprogramming book real quick</p>",
        "id": 428219608,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711055890
    },
    {
        "content": "<p>There is some support in the code for \"choice nodes\" but this is when the syntax itself is overloaded, e.g. if mathlib defines <code>have</code> and one of the cases is also a case that could be handled by the upstream <code>have</code></p>",
        "id": 428219635,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711055909
    },
    {
        "content": "<p>I'm not sure if there is any other way to trigger the type-based overloading behavior (that we usually try to avoid)</p>",
        "id": 428219728,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711055957
    },
    {
        "content": "<p>Thanks to all your help, I'm having a lot of fun right now <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 428302263,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711103870
    },
    {
        "content": "<p>I'm looking forward to that chapter, this is all currently mysterious to me too :-)</p>",
        "id": 428346120,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1711118802
    },
    {
        "content": "<p>What happens if we set a higher priority to the same syntax but with a new name and have the elaborator we want? I seem to remember trying this (and it worked) but am not sure.</p>",
        "id": 429094364,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1711211228
    },
    {
        "content": "<p>that would completely override the original syntax, there will be no fallback to the original behavior</p>",
        "id": 429159229,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711260024
    },
    {
        "content": "<p>a drawback is that the syntax kind will be different so things that are expecting the original syntax kind won't trigger once you have overridden it (e.g. linters)</p>",
        "id": 429159349,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711260080
    },
    {
        "content": "<blockquote>\n<p>I have literally seen <em>no</em> mention of overloading anywhere whatsoever, and even less mentions of the macro/macro vs macro/elab vs elab/macro overloading differences.</p>\n</blockquote>\n<p>To chime in a bit here, overloading a macro with an elab (<code>elab_rules</code>) does not work because macros are expanded prior to running the elaborators.</p>",
        "id": 431815487,
        "sender_full_name": "Mac Malone",
        "timestamp": 1712523076
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/270676-lean4/topic/Customizing.20the.20elaborator.3F/near/428219479\">said</a>:</p>\n<blockquote>\n<p>I have literally seen <em>no</em> mention of overloading anywhere whatsoever, and even less mentions of the macro/macro vs macro/elab vs elab/macro overloading differences.</p>\n</blockquote>\n<p>There's a bit in the Lean Manual: <a href=\"https://lean-lang.org/lean4/doc/macro_overview.html#syntax-expansions-with-macro_rules-and-how-it-desugars\">https://lean-lang.org/lean4/doc/macro_overview.html#syntax-expansions-with-macro_rules-and-how-it-desugars</a></p>\n<p>But yeah, there's nothing at all about <code>elab</code>; I guess you're supposed to infer that <code>macro</code> vs <code>macro_rules</code> work basically the same way as <code>elab</code> and <code>elab_rules</code>? Though I still had to dig into the Lean source to find the <code>elab_rules : _ &lt;= ty?</code> syntax for an expected type...</p>",
        "id": 431892064,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1712564825
    }
]