[
    {
        "content": "<p>I'm moving this discussion from <a href=\"#narrow/stream/113489-new-members/topic/apply.3F.20suggested.20something.20that.20led.20to.20an.20error/near/432933179\">this thread</a> in the \"new members\" stream here to give it more visibility.</p>\n<p>Since a while ago (but I can't really tell precisely since when) I'm noticing that <code>apply?</code> behaves badly in a certain way. I managed to trace this back to an interaction between certain lemmas marked <code>symm</code> and <code>apply?</code> (my suspicion is that this may be related to discrimination trees, but I have zero experience with metaprogramming in Lean 4, so I have no idea how to check this hunch). Consider the following <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- set up a binary relation</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"c1\">-- that is symmetric</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">r.symm</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- and has some other property</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">r.trans</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- now try `apply?`</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">c</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span><span class=\"bp\">?</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">Try this: refine r.trans ?_ ?_</span>\n<span class=\"cm\">Remaining subgoals:</span>\n<span class=\"cm\">⊢ Nat</span>\n<span class=\"cm\">⊢ r c ?b</span>\n<span class=\"cm\">⊢ r ?b a</span>\n\n<span class=\"cm\">Try this: refine r.symm ?_</span>\n<span class=\"cm\">Remaining subgoals:</span>\n<span class=\"cm\">⊢ r a c</span>\n\n<span class=\"cm\">which looks fine.</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"c1\">-- now attach the `symm` attribute to `r.symm`</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">symm</span><span class=\"o\">]</span> <span class=\"n\">r.symm</span>\n\n<span class=\"c1\">-- and repeat</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">c</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- `exact?` → `exact?` could not close the goal.</span>\n  <span class=\"n\">apply</span><span class=\"bp\">?</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">Try this: refine r.trans (?_ (id (r.symm h₁))) (?_ (id (r.symm h₁)))</span>\n<span class=\"cm\">Remaining subgoals:</span>\n<span class=\"cm\">⊢ r a b → Nat</span>\n<span class=\"cm\">⊢ r a b → r c (?m.239 ⋯)</span>\n<span class=\"cm\">⊢ r a b → r (?m.239 ⋯) a</span>\n<span class=\"cm\">⊢ r c b → Nat</span>\n<span class=\"cm\">⊢ Nat</span>\n<span class=\"cm\">⊢ r c b → r c (?m.239 ⋯)</span>\n<span class=\"cm\">⊢ r c (?m.239 ⋯)</span>\n<span class=\"cm\">⊢ r c b → r (?m.239 ⋯) a</span>\n<span class=\"cm\">⊢ r (?m.239 ⋯) a</span>\n\n<span class=\"cm\">Try this: refine r.symm (r.trans (?_ (id (r.symm h₁))) (?_ (id (r.symm h₁))))</span>\n<span class=\"cm\">Remaining subgoals:</span>\n<span class=\"cm\">⊢ r a b → Nat</span>\n<span class=\"cm\">⊢ r a b → r a (?m.331 ⋯)</span>\n<span class=\"cm\">⊢ r a b → r (?m.331 ⋯) c</span>\n<span class=\"cm\">⊢ r c b → Nat</span>\n<span class=\"cm\">⊢ Nat</span>\n<span class=\"cm\">⊢ r c b → r a (?m.331 ⋯)</span>\n<span class=\"cm\">⊢ r a (?m.331 ⋯)</span>\n<span class=\"cm\">⊢ r c b → r (?m.331 ⋯) c</span>\n<span class=\"cm\">⊢ r (?m.331 ⋯) c</span>\n\n<span class=\"cm\">Try this: refine r.symm (?_ (id (r.symm h₁)))</span>\n<span class=\"cm\">Remaining subgoals:</span>\n<span class=\"cm\">⊢ r a b → r a c</span>\n<span class=\"cm\">⊢ r c b → r a c</span>\n<span class=\"cm\">⊢ r a c</span>\n\n<span class=\"cm\">Try this: refine r.symm (r.symm (?_ (id (r.symm h₁))))</span>\n<span class=\"cm\">Remaining subgoals:</span>\n<span class=\"cm\">⊢ r a b → r c a</span>\n<span class=\"cm\">⊢ r c b → r c a</span>\n\n<span class=\"cm\">... and clicking on any of these results in an error of the kind</span>\n<span class=\"cm\">  function expected at</span>\n<span class=\"cm\">    ?m.5099</span>\n<span class=\"cm\">  term has type</span>\n<span class=\"cm\">    ?m.5098</span>\n\n<span class=\"cm\">Also, I think that attaching `symm` *should* enable `apply?` to come up with</span>\n<span class=\"cm\">  `exact r.trans h₂.symm h₁`</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>Since Mathlib marks a number of declarations with <code>symm</code>:</p>\n<ul>\n<li><code>Eq.symm</code> in <a href=\"https://tqft.net/mathlib4files/Init/Core\">file#Init/Core</a> <strong>and</strong> in <a href=\"https://tqft.net/mathlib4files/Init/Logic\">file#Init/Logic</a></li>\n<li><code>Ne.symm</code>, <code>HEq.symm</code>and <code>Iff.symm</code> in <a href=\"https://tqft.net/mathlib4files/Init/Logic\">file#Init/Logic</a></li>\n</ul>\n<p>and a few more specialized ones, this affects <code>apply?</code> whenever there are equalities (or negated equalities) in the context, which is very common.</p>\n<p>A side effect is that the suggestions produced by <code>apply?</code> get very long, so that there is a lot of text in the infoview, which results in, e.g., scrolling to react very slowly. And, of course, a more immediate pain point is that the suggestions that are produced result in errors and have to be edited manually to make sense.</p>\n<p>I feel very strongly that something needs to be done here, and I am wondering how other people put up with this. If you agree with the first part of the preceding sentence, please add a <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> to this message.</p>",
        "id": 433120818,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1713088014
    },
    {
        "content": "<p>It would be nice if one of the developers could either</p>\n<ul>\n<li>confirm that they consider this a problem and give an indication what they are planning to do, or else</li>\n<li>explain why they think it is not a problem.</li>\n</ul>\n<p>I can make an issue, if that helps.</p>",
        "id": 433302115,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1713190376
    },
    {
        "content": "<p>I only didn't add a thumbs up because my experience with <code>apply?</code> was always so bad that I just stopped using it completely</p>",
        "id": 433302940,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1713190595
    },
    {
        "content": "<p>That would be a good reason to add several <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span>s if that were possible!</p>",
        "id": 433303171,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1713190650
    },
    {
        "content": "<p>I completely agree with this issue. I have regularly received suggestions from <code>apply?</code> that were correct, except that some metavariables were applied to arguments, which I had to remove manually. It's good to see a very small example where this already happens.</p>",
        "id": 433303313,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1713190683
    },
    {
        "content": "<p>I hope the <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> above will make it fairly easy to figure out what the problem is.</p>",
        "id": 433303853,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1713190811
    },
    {
        "content": "<p>/poll How do you rate <code>apply?</code><br>\nIt works well for my use cases<br>\nI'd like to use it, but am unhappy with it<br>\nI have no intention to use it, no matter what</p>",
        "id": 433359969,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1713205981
    },
    {
        "content": "<p>Maybe the poll above gives a clearer picture...</p>",
        "id": 433360104,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1713206034
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/3922\">lean4#3922</a> is the issue.<br>\n<span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> <span class=\"user-mention\" data-user-id=\"626349\">@Asei Inoue</span> <span class=\"user-mention\" data-user-id=\"560559\">@Richard Osborn</span> <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> <span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> <span class=\"user-mention\" data-user-id=\"630477\">@Scott Carnahan</span> <span class=\"user-mention\" data-user-id=\"110050\">@Sébastien Gouëzel</span> <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span>  please <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> it if you want it to have an impact.</p>",
        "id": 433484968,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1713261562
    },
    {
        "content": "<p>The poll seems a bit of a broad question, when the thread is really about a particular bad behaviour interacting with <code>symm</code>... :-)</p>",
        "id": 433642460,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713324932
    },
    {
        "content": "<p>Proposed fixes very welcome, otherwise I'll try to investigate once my plate is a bit emptier.</p>",
        "id": 433642585,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713325003
    },
    {
        "content": "<p>Well, this specific bad behavior is so pervasive that it has broad implications...</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110087\">Kim Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/apply.3F.20and.20the.20.22symm.22.20attribute/near/433642585\">said</a>:</p>\n<blockquote>\n<p>Proposed fixes very welcome, otherwise I'll try to investigate once my plate is a bit emptier.</p>\n</blockquote>\n<p>I was hoping that reducing the problem to the interaction with the <code>symm</code> attribute would be sufficient for somebody with metaprogramming skills to take over and get to the bottom of this. But the main thing is that something is done about it eventually (and in the not-too-distant future).</p>",
        "id": 433744553,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1713357127
    },
    {
        "content": "<p>I'd like to make a version of <code>apply?</code> using my own discrimination tree, once my library rewrite tactic <code>rw??</code> lands in Mathlib. The issue discussed here seems orthogonal to the benefits that the new discrimination tree brings, but my guess would be that reimplementing the tactic would eliminate this bug.</p>",
        "id": 434509249,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1713626200
    },
    {
        "content": "<blockquote>\n<p>my guess would be that reimplementing the tactic would eliminate this bug</p>\n</blockquote>\n<p>That's certainly a guess, especially if there's no theory yet about where this bug is coming from.</p>\n<p>My current understanding is that it's an interaction with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.MVarId.symmSaturate#doc\">docs#Lean.MVarId.symmSaturate</a>, which <code>exact?</code>/<code>apply?</code> use via <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.LibrarySearch.solveByElim#doc\">docs#Lean.Meta.LibrarySearch.solveByElim</a> . This is consistent with the way you get <code>?_ (id (r.symm h))</code> terms, since that's how <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Expr.applySymm#doc\">docs#Lean.Expr.applySymm</a> with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.MVarId.note#doc\">docs#Lean.MVarId.note</a> pass <code>r.symm h</code> into the newly created goal.</p>",
        "id": 434516710,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713631368
    },
    {
        "content": "<p>This is a tricky one... Symmetrizing hypotheses is a feature people have wanted before so it shouldn't just be removed. The <code>symmSaturate</code> function seems like it shouldn't be used though — my thought is that instead there should be a cache of facts that <em>aren't</em> attached to the local context, and this cache should be saturated. Then, only the facts that are actually used end up in the term.</p>",
        "id": 434517019,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713631583
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/3962\">lean4#3962</a> has an attempt at fixing <a href=\"https://github.com/leanprover/lean4/pull/3922\">lean4#3922</a></p>",
        "id": 434520402,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713634599
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 434522079,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1713636035
    },
    {
        "content": "<p><a href=\"#narrow/stream/116290-rss/topic/Recent.20Commits.20to.20lean4.3Amaster/near/434655603\">Merged!</a></p>",
        "id": 434671323,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713770439
    }
]