[
    {
        "content": "<p>Hi, for the PFR project there is a large amount of data and instances that I am trying to place inside a single <code>structure</code> in order not to repeatedly state all that data every time I state a new lemma.  I figured out how to invoke individual instances that are buried inside the structure when needed, but encountered a problem when invoking an instance that depended on another instance, due to a definitional equality problem.</p>\n<p>Here is a MWE (with a much smaller package of data than what I actually want to use).  The following code works,</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">structure</span><span class=\"w\"> </span><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"n\">G</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span>\n<span class=\"w\">  </span><span class=\"n\">hGm</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">MeasurableSpace</span><span class=\"w\"> </span><span class=\"n\">G</span>\n<span class=\"w\">  </span><span class=\"n\">hGsc</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">MeasurableSingletonClass</span><span class=\"w\"> </span><span class=\"n\">G</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">package</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">G</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">hGm</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">MeasurableSet</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"bp\">@</span><span class=\"n\">MeasurableSingletonClass</span><span class=\"bp\">.</span><span class=\"n\">measurableSet_singleton</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">G</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">hGm</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">hGsc</span><span class=\"w\"> </span><span class=\"n\">a</span>\n</code></pre></div>\n<p>but the code</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">package</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">G</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">hGm</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">MeasurableSet</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">hGm</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">hGm</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">hGsc</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">hGsc</span>\n<span class=\"w\">  </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">MeasurableSingletonClass</span><span class=\"bp\">.</span><span class=\"n\">measurableSet_singleton</span><span class=\"w\"> </span><span class=\"n\">a</span>\n</code></pre></div>\n<p>fails because <code>hGsc</code> has type <code>MeasurableSingletonClass p.G p.hGm</code> which is not definitionally equal to <code>MeasurableSingletonClass p.G hGm</code> and so one gets a \"failed to synthesize <code>MeasurableSingletonClass p.G</code>\" message.  I attempted to force the correct type with</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">package</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">G</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">hGm</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">MeasurableSet</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">hGm</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">hGm</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">hGsc</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"n\">MeasurableSingletonClass</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">G</span><span class=\"w\"> </span><span class=\"n\">hGm</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">hGsc</span>\n<span class=\"w\">  </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">MeasurableSingletonClass</span><span class=\"bp\">.</span><span class=\"n\">measurableSet_singleton</span><span class=\"w\"> </span><span class=\"n\">a</span>\n</code></pre></div>\n<p>but this simply created a type mismatch error: <code>p.hGsc</code> has type <code>@MeasurableSingletonClass p.G p.hGm : Prop</code> but is expected to have type <code>@MeasurableSingletonClass p.G hGm : Prop</code>.</p>\n<p>For this example, is there any way to extract both the <code>MeasurableSpace</code> instance and the <code>MeasurableSingletonClass</code> instance from <code>p:package</code> as compatible instances, without having to manually insert all the instances with the <code>@</code> notation on every line?</p>\n<p>UPDATE: replacing all the <code>have</code>s by <code>let</code>s works (I guess it creates the needed definitional equality).  So never mind, I answered my own question...</p>",
        "id": 447917863,
        "sender_full_name": "Terence Tao",
        "timestamp": 1719633747
    },
    {
        "content": "<p>Is there a reason why <code>package</code> is a <code>structure</code>, not a <code>class</code>?</p>",
        "id": 447926713,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1719638331
    },
    {
        "content": "<p>Hmm, I was actually not explicitly aware of this distinction.  I guess it makes sense that a <code>class</code> could help with automatic inferencing.</p>\n<p>The full package currently looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"sd\">/-- A structure that packages all the fixed information in the main argument.  -/</span>\n<span class=\"kn\">structure</span><span class=\"w\"> </span><span class=\"n\">multiRefPackage</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"n\">G</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">uG</span>\n<span class=\"w\">  </span><span class=\"n\">hG</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">AddCommGroup</span><span class=\"w\"> </span><span class=\"n\">G</span>\n<span class=\"w\">  </span><span class=\"n\">hGf</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Fintype</span><span class=\"w\"> </span><span class=\"n\">G</span>\n<span class=\"w\">  </span><span class=\"n\">hGm</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">MeasurableSpace</span><span class=\"w\"> </span><span class=\"n\">G</span>\n<span class=\"w\">  </span><span class=\"n\">hGsc</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">MeasurableSingletonClass</span><span class=\"w\"> </span><span class=\"n\">G</span>\n<span class=\"w\">  </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">â</span>\n<span class=\"w\">  </span><span class=\"n\">htorsion</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">â</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">â¢</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">  </span><span class=\"n\">Î©â</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span>\n<span class=\"w\">  </span><span class=\"n\">hÎ©â</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">MeasureSpace</span><span class=\"w\"> </span><span class=\"n\">Î©â</span>\n<span class=\"w\">  </span><span class=\"n\">hprob</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">IsProbabilityMeasure</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">â</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Measure</span><span class=\"w\"> </span><span class=\"n\">Î©â</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"n\">Xâ</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Î©â</span><span class=\"w\"> </span><span class=\"bp\">â</span><span class=\"w\"> </span><span class=\"n\">G</span>\n<span class=\"w\">  </span><span class=\"n\">hmeas</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Measurable</span><span class=\"w\"> </span><span class=\"n\">Xâ</span>\n<span class=\"w\">  </span><span class=\"n\">Î·</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">â</span>\n<span class=\"w\">  </span><span class=\"n\">hÎ·</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"n\">Î·</span>\n</code></pre></div>\n<p>Suppose I was given <code>p:multiRefPackage</code> and wanted to extract out the object <code>p.G</code> complete with its instances <code>AddCommGroup</code>, <code>FinType</code>, <code>MeasurableSpace</code>, <code>MeasurableSingletonClass</code>.  If I made <code>multiRefPackage</code> a class instead of a structure, is there a way to do this without having to explicitly introduce the instances like I have been doing above?  That would certainly be convenient.</p>\n<p>I guess I'm having a conceptual issue here in that the reference package I am working with is not simply a single object <code>G</code> with various instances attached to it, but a collection of loosely related objects, each with their own instances, so I don't know how to use the class formalism properly here.  I guess one needs to define something like <code>multiRefPackage.toGroup</code> and attach various instances to it?</p>",
        "id": 447981354,
        "sender_full_name": "Terence Tao",
        "timestamp": 1719670374
    },
    {
        "content": "<p>I'm not sure if this is helpful, usually when I think \"i need to pull out objects\" I think of structures, but here's a partially similar class:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">class</span><span class=\"w\"> </span><span class=\"n\">multiRefPackage</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">G</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"kn\">extends</span><span class=\"w\"> </span><span class=\"n\">AddCommGroup</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Fintype</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"o\">,</span>\n<span class=\"w\">          </span><span class=\"n\">MeasurableSpace</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">MeasurableSingletonClass</span><span class=\"w\"> </span><span class=\"n\">G</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">G</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">multiRefPackage</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">MeasurableSet</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">MeasurableSingletonClass</span><span class=\"bp\">.</span><span class=\"n\">measurableSet_singleton</span><span class=\"w\"> </span><span class=\"n\">a</span>\n</code></pre></div>",
        "id": 447982211,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1719671118
    },
    {
        "content": "<p>That helps  - it gives a way of collecting multiple instances into a single combined instance, and now one only needs to pull out one instance out of the structure whenever pulling out the associated object, rather than pulling out two instances as I did in the original MWE.  Ideally I'd like to go one step further and just pull out the object and have the instances come automatically, but this certainly makes things a bit less annoying.</p>",
        "id": 447982613,
        "sender_full_name": "Terence Tao",
        "timestamp": 1719671437
    },
    {
        "content": "<p>Having internal universe variable is very likely to cause issues. So <code>G</code> and <code>Î©â</code> should probably be parameters, as in Loganâs message, but also pulling out <code>Î©â</code>.</p>",
        "id": 447984603,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1719672663
    },
    {
        "content": "<p>Alternatively, make <code>G : Type</code>. That's justified by the fact that any finite group in <code>Type u</code> is isomorphic to a finite group in <code>Type</code></p>",
        "id": 447984977,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1719672917
    },
    {
        "content": "<p>I suppose, if Terence did want to hide the carrier type as a structure projection, there's no way to avoid explicitly re-inferring the instances? E.g.,</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">class</span><span class=\"w\"> </span><span class=\"n\">multiRefClass</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">G</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"kn\">extends</span><span class=\"w\"> </span><span class=\"n\">AddCommGroup</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Fintype</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"o\">,</span>\n<span class=\"w\">          </span><span class=\"n\">MeasurableSpace</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">MeasurableSingletonClass</span><span class=\"w\"> </span><span class=\"n\">G</span>\n\n<span class=\"kn\">structure</span><span class=\"w\"> </span><span class=\"n\">myPackage</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">G</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">hG</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">multiRefClass</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- Can't circumvent this? --/</span>\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">myPackage</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">MeasurableSpace</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">G</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">â¨_</span><span class=\"o\">,</span><span class=\"bp\">_â©</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">inferInstance</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">myPackage</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">G</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">MeasurableSet</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">MeasurableSingletonClass</span><span class=\"bp\">.</span><span class=\"n\">measurableSet_singleton</span><span class=\"w\"> </span><span class=\"n\">a</span>\n</code></pre></div>",
        "id": 447985782,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1719673402
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/Problem.20when.20instances.20are.20inside.20a.20structure/near/447984603\">said</a>:</p>\n<blockquote>\n<p>Having internal universe variable is very likely to cause issues. So <code>G</code> and <code>Î©â</code> should probably be parameters, as in Loganâs message, but also pulling out <code>Î©â</code>.</p>\n</blockquote>\n<p>OK, I tried this, but I ran into a stupid problem, because both <code>G</code> and <code>Î©â</code> are competing for the .<code>toMeasurableSpace</code> method, and so</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">class</span><span class=\"w\"> </span><span class=\"n\">multiRefPackage</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">G</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Î©â</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"kn\">extends</span><span class=\"w\"> </span><span class=\"n\">AddCommGroup</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Fintype</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">MeasurableSpace</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">MeasurableSingletonClass</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"o\">,</span>\n<span class=\"w\">                   </span><span class=\"n\">MeasureSpace</span><span class=\"w\"> </span><span class=\"n\">Î©â</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">â</span>\n<span class=\"w\">  </span><span class=\"n\">htorsion</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">â</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">â¢</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">  </span><span class=\"n\">hprob</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">IsProbabilityMeasure</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">â</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Measure</span><span class=\"w\"> </span><span class=\"n\">Î©â</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"n\">Xâ</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Î©â</span><span class=\"w\"> </span><span class=\"bp\">â</span><span class=\"w\"> </span><span class=\"n\">G</span>\n<span class=\"w\">  </span><span class=\"n\">hmeas</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Measurable</span><span class=\"w\"> </span><span class=\"n\">Xâ</span>\n<span class=\"w\">  </span><span class=\"n\">Î·</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">â</span>\n<span class=\"w\">  </span><span class=\"n\">hÎ·</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"n\">Î·</span>\n</code></pre></div>\n<p>etc. does not work directly.</p>",
        "id": 447985821,
        "sender_full_name": "Terence Tao",
        "timestamp": 1719673424
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"319223\">Logan Murphy</span>, what does</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">structure</span><span class=\"w\"> </span><span class=\"n\">myPackage</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">G</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span>\n<span class=\"w\">  </span><span class=\"o\">[</span><span class=\"n\">hG</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">multiRefClass</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>do? In particular, does it do what you want?</p>",
        "id": 447986028,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1719673538
    },
    {
        "content": "<p>Doesn't seem like we can use typeclass binders in class/structure fields, it gives a syntax error</p>",
        "id": 447986833,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1719673953
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"657719\">Terence Tao</span> <a href=\"#narrow/stream/270676-lean4/topic/Problem.20when.20instances.20are.20inside.20a.20structure/near/447985821\">said</a>:</p>\n<blockquote>\n<p>OK, I tried this, but I ran into a stupid problem, because both <code>G</code> and <code>Î©â</code> are competing for the .<code>toMeasurableSpace</code> method</p>\n</blockquote>\n<p>I guess a parameterized version could be something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">class</span><span class=\"w\"> </span><span class=\"n\">MeasureableFinGroup</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">G</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"kn\">extends</span><span class=\"w\"> </span><span class=\"n\">AddCommGroup</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Fintype</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"o\">,</span>\n<span class=\"w\">          </span><span class=\"n\">MeasurableSpace</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">MeasurableSingletonClass</span><span class=\"w\"> </span><span class=\"n\">G</span>\n\n<span class=\"kn\">structure</span><span class=\"w\"> </span><span class=\"n\">multiRefPackage</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">G</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Î©â</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">MeasureableFinGroup</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">MeasureSpace</span><span class=\"w\"> </span><span class=\"n\">Î©â</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">â</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">htorsion</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">â</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">â¢</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">hprob</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">IsProbabilityMeasure</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">â</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Measure</span><span class=\"w\"> </span><span class=\"n\">Î©â</span><span class=\"o\">))</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">Xâ</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Î©â</span><span class=\"w\"> </span><span class=\"bp\">â</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">hmeas</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Measurable</span><span class=\"w\"> </span><span class=\"n\">Xâ</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">Î·</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">â</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">hÎ·</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"n\">Î·</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 447989510,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1719674977
    },
    {
        "content": "<p>OK, that seems to work reasonably well.  Thanks!</p>",
        "id": 447991499,
        "sender_full_name": "Terence Tao",
        "timestamp": 1719675934
    },
    {
        "content": "<p>So I guess the broader recommendation here is to not place instances inside a structure, or to concatenate together instances attached to different objects, but it is perfectly fine to concatenate instances on a single object into a unified class.</p>",
        "id": 447997720,
        "sender_full_name": "Terence Tao",
        "timestamp": 1719678537
    },
    {
        "content": "<p>Well, combining the instances on <code>G</code> into <code>MeasureableFinGroup</code> is really just to improve legibility, you could in principle move all the instances as parameters of <code>multiRefPackage</code>. I think the general recommendation would be something like \"to make typeclass inferences easier, you probably want to use structures  in which types and typeclass instances are parameters rather than structure fields\"</p>",
        "id": 447999155,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1719679233
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"319223\">@Logan Murphy</span> <span class=\"user-mention\" data-user-id=\"657719\">@Terence Tao</span> I think there is also a technical reason for the split:</p>\n<p>Suppose that Lean wants to find some fact about <code>G</code>, for example that it has a measure, or an addition. That means there is a goal like <code>Add G</code>. Now typeclass synthesis starts chasing around the large hierarchy in mathlib to find an instance that would imply <code>Add G</code>. Turns out that <code>superBigPackage G ?m1</code> would imply it. But at that point in time, Lean doesn't know <code>Omega</code>, so it disregards that path.</p>",
        "id": 448254301,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1719820461
    },
    {
        "content": "<p>That is why so many lemmas in the linear algebra part of mathlib make the ring of scalars explicit. Because when Lean hunts for <code>Module ?m1 M</code> it doesn't know which ring to assign to <code>?m1</code> and the search fails. But when we make the ring explicit, Lean searches for <code>Module R M</code> and then we're on the happy path.</p>",
        "id": 448254500,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1719820540
    }
]