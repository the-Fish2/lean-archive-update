[
    {
        "content": "<p>Observe that in the following example, all the whitespace following <code>cat</code> becomes part of that token in the <code>trailing</code> field of <code>SourceInfo.original</code>. I am wondering if there is a way to prevent that, and instead put it in the <code>leading</code> part of <code>123</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">aCat</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"cat\"</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">aCat</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"#parse\"</span> <span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">aCat</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">Lean.logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{repr a}\"</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">{ raw := Lean.Syntax.node</span>\n<span class=\"cm\">           (Lean.SourceInfo.none)</span>\n<span class=\"cm\">           `aCatCat_</span>\n<span class=\"cm\">           #[Lean.Syntax.atom</span>\n<span class=\"cm\">               (Lean.SourceInfo.original \"\".toSubstring { byteIdx := 136 } \"/- -/ \".toSubstring { byteIdx := 139 })</span>\n<span class=\"cm\">               \"cat\",</span>\n<span class=\"cm\">             Lean.Syntax.node</span>\n<span class=\"cm\">               (Lean.SourceInfo.none)</span>\n<span class=\"cm\">               `num</span>\n<span class=\"cm\">               #[Lean.Syntax.atom</span>\n<span class=\"cm\">                   (Lean.SourceInfo.original \"\".toSubstring { byteIdx := 145 } \"\".toSubstring { byteIdx := 148 })</span>\n<span class=\"cm\">                   \"123\"]] }</span>\n<span class=\"cm\">-/</span>\n<span class=\"bp\">#</span><span class=\"n\">parse</span> <span class=\"n\">cat</span><span class=\"c\">/-</span><span class=\"cm\"> -/</span> <span class=\"mi\">123</span>\n</code></pre></div>",
        "id": 435970031,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1714373996
    },
    {
        "content": "<p>What would be the heuristic? <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Syntax.updateLeading#doc\">docs#Lean.Syntax.updateLeading</a> implements a different heuristic but may be useful as a template</p>",
        "id": 435999828,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1714383985
    },
    {
        "content": "<p>How would I use <code>updateLeading</code>, or my own version? It is a function <code>Syntax -&gt; Syntax</code>, but I want to adapt the parser to use it. The parser does not \"see\" the preceding token, so I don't even know how to access the information from that.</p>",
        "id": 436371074,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1714520571
    },
    {
        "content": "<p>(As an aside, it looks like <code>updateLeading</code> isn't used anywhere except for <code>testParseModule</code>.)</p>",
        "id": 436371126,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1714520620
    },
    {
        "content": "<p>Why does it have to happen in the parser?</p>",
        "id": 436455562,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1714543398
    },
    {
        "content": "<p>Uh, where else can it happen? Sorry for asking confused questions; ultimately what I am trying to achieve is to make that one example work, in the sense that the sub-<code>Syntax</code> parsed by <code>term</code> gets the whitespace stored in it, so any suggestion on how to concretely do it would help.</p>",
        "id": 436463197,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1714549175
    },
    {
        "content": "<p>Or are you saying I should take the whole syntax tree for <code>aCat</code> and modify it post-hoc?</p>",
        "id": 436463295,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1714549227
    },
    {
        "content": "<p>Yes, that was the plan for <code>updateLeading</code> though as you noticed, it isn't used right now because we haven't begun doing any concrete syntax tree transformations</p>",
        "id": 436632543,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1714634835
    }
]