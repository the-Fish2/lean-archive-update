[
    {
        "content": "<p>Here's an exercise from chapter 8 of theorem proving:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Expr</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">plus</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">times</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Expr</span>\n<span class=\"kd\">def</span> <span class=\"n\">sampleExpr</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span>\n  <span class=\"n\">plus</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"mi\">7</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"n\">n</span>     <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"n\">n</span>       <span class=\"bp\">=&gt;</span> <span class=\"n\">v</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">plus</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">eval</span> <span class=\"n\">v</span> <span class=\"n\">e₁</span> <span class=\"bp\">+</span> <span class=\"n\">eval</span> <span class=\"n\">v</span> <span class=\"n\">e₂</span>\n  <span class=\"bp\">|</span> <span class=\"n\">times</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">eval</span> <span class=\"n\">v</span> <span class=\"n\">e₁</span> <span class=\"bp\">*</span> <span class=\"n\">eval</span> <span class=\"n\">v</span> <span class=\"n\">e₂</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sampleVal</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">5</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">6</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n\n<span class=\"c1\">-- Try it out. You should get 47 here.</span>\n<span class=\"k\">#eval</span> <span class=\"n\">eval</span> <span class=\"n\">sampleVal</span> <span class=\"n\">sampleExpr</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">simpConst</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">plus</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"n\">n₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"n\">n₂</span><span class=\"o\">)</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">const</span> <span class=\"o\">(</span><span class=\"n\">n₁</span> <span class=\"bp\">+</span> <span class=\"n\">n₂</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">times</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"n\">n₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"n\">n₂</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">const</span> <span class=\"o\">(</span><span class=\"n\">n₁</span> <span class=\"bp\">*</span> <span class=\"n\">n₂</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">e</span>                           <span class=\"bp\">=&gt;</span> <span class=\"n\">e</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fuse</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">const</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">var</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">plus</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simpConst</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">plus</span> <span class=\"o\">(</span><span class=\"n\">fuse</span> <span class=\"n\">e₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fuse</span> <span class=\"n\">e₂</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">times</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simpConst</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">times</span> <span class=\"o\">(</span><span class=\"n\">fuse</span> <span class=\"n\">e₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fuse</span> <span class=\"n\">e₂</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">fuse</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">plus</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"mi\">2</span><span class=\"o\">))</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">simpConst_eq</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n        <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">,</span> <span class=\"n\">eval</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">simpConst</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">eval</span> <span class=\"n\">v</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">expr</span>\n  <span class=\"n\">cases</span> <span class=\"n\">expr</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">simpConst</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">simpConst</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">plus</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">cases</span> <span class=\"n\">e₁</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">e₂</span>\n    <span class=\"n\">all_goals</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">eval</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">times</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">cases</span> <span class=\"n\">e₁</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">e₂</span>\n    <span class=\"n\">all_goals</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">eval</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">fuse_eq</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n        <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">,</span> <span class=\"n\">eval</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">fuse</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">eval</span> <span class=\"n\">v</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">expr</span>\n  <span class=\"n\">induction</span> <span class=\"n\">expr</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fuse</span><span class=\"o\">,</span> <span class=\"n\">eval</span><span class=\"o\">]</span>\n  <span class=\"n\">case</span> <span class=\"n\">plus</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span> <span class=\"n\">ih₁</span> <span class=\"n\">ih₂</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">ih₁</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">ih₂</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">eval</span><span class=\"o\">]</span>\n    <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">plus</span> <span class=\"o\">(</span><span class=\"n\">fuse</span> <span class=\"n\">e₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fuse</span> <span class=\"n\">e₂</span><span class=\"o\">)</span>\n    <span class=\"n\">exact</span> <span class=\"n\">simpConst_eq</span> <span class=\"n\">v</span> <span class=\"n\">e</span>\n  <span class=\"n\">case</span> <span class=\"n\">times</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span> <span class=\"n\">ih₁</span> <span class=\"n\">ih₂</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">ih₁</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">ih₂</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">eval</span><span class=\"o\">]</span>\n    <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">times</span> <span class=\"o\">(</span><span class=\"n\">fuse</span> <span class=\"n\">e₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fuse</span> <span class=\"n\">e₂</span><span class=\"o\">)</span>\n    <span class=\"n\">exact</span> <span class=\"n\">simpConst_eq</span> <span class=\"n\">v</span> <span class=\"n\">e</span>\n</code></pre></div>\n<p>My question is about the <code>let e :=</code> in the <code>plus</code> and <code>times</code> cases of <code>fuse_eq</code>. Take <code>plus</code> for example. At the point of the let, the goal is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"n\">eval</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">simpConst</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"o\">(</span><span class=\"n\">fuse</span> <span class=\"n\">e₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fuse</span> <span class=\"n\">e₂</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"n\">eval</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"o\">(</span><span class=\"n\">fuse</span> <span class=\"n\">e₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fuse</span> <span class=\"n\">e₂</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>It stays the same after the let. Is there any tactic that will allow me to pull out the <code>e</code>, and automatically change the goal to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"n\">eval</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">simpConst</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">eval</span> <span class=\"n\">v</span> <span class=\"n\">e</span>\n</code></pre></div>\n<p>?</p>",
        "id": 431632862,
        "sender_full_name": "James Sully",
        "timestamp": 1712372883
    },
    {
        "content": "<p>This isn't necessary for the proof to go through of course, but it would make it easier for me to follow the proof state over time</p>",
        "id": 431632921,
        "sender_full_name": "James Sully",
        "timestamp": 1712372981
    },
    {
        "content": "<p>Does <code>generalize</code> help you?</p>",
        "id": 431634033,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712374004
    },
    {
        "content": "<p>exactly what I was looking for, thank you!</p>",
        "id": 431635122,
        "sender_full_name": "James Sully",
        "timestamp": 1712375130
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"621161\">James Sully</span> has marked this topic as resolved.</p>",
        "id": 431635140,
        "sender_full_name": "Notification Bot",
        "timestamp": 1712375141
    },
    {
        "content": "<p>what's the difference between <code>generalize</code> and <code>set</code>? they both seem like ways of setting a variable and substituting it for existing instances</p>",
        "id": 431635563,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1712375479
    },
    {
        "content": "<p>I guess there's a subtle difference: <code>set x := y + z with hx</code> and <code>generalize hx : y + z = x</code> both generate a hypothesis that equates <code>x</code> and <code>y + z</code>, but only <code>set</code> actually defines the variable as that value</p>",
        "id": 431636168,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1712375961
    },
    {
        "content": "<p>I'm curious if there are cases where one has an advantage over the other</p>",
        "id": 431636356,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1712376079
    },
    {
        "content": "<p>I've never used this feature, but <code>generalize</code> lets you generalize multiple expressions simultaneously, with <code>generalize h1 : e1 = x1, h2 : e2 = x2, h3 : e3 = x3</code>.</p>\n<p>It looks like internally both <code>set</code> and <code>generalize</code> are similar with how they generalize (though <code>set</code> calls the <code>rewrite</code> tactic, and <code>generalize</code> does the kabstract stuff itself)</p>",
        "id": 431636519,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1712376203
    },
    {
        "content": "<p>One relevant difference to me is that <code>set</code> seems to be in mathlib (you mean <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Tactic/Set.html#Mathlib.Tactic.setTactic\">this one</a> right?) which I'm not using</p>",
        "id": 431636582,
        "sender_full_name": "James Sully",
        "timestamp": 1712376254
    },
    {
        "content": "<p>ah, good point</p>",
        "id": 431636689,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1712376375
    }
]