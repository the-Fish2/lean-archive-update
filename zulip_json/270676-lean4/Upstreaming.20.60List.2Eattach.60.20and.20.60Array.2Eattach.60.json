[
    {
        "content": "<p>I noticed this was mentioned positively <a href=\"#narrow/stream/348111-batteries/topic/upstreaming.20of.20List.2FArray.20material/near/434882700\">here</a>.</p>\n<p>This would be very helpful since:</p>\n<ul>\n<li>termination checking failure on trees seems to be an FAQ (search \"List.attach\" in Zulip)</li>\n<li><a href=\"https://github.com/leanprover/lean4/blob/63739a42f31f310d11b18fa651a1f436378f80ea/src/Init/Data/List/BasicAux.lean#L224-L233\"><code>sizeOf_list_dec</code></a> is part of core, though it probably won't work without <code>List.attach</code>? (similarly for <a href=\"https://github.com/leanprover/lean4/blob/63739a42f31f310d11b18fa651a1f436378f80ea/src/Init/Data/Array/Mem.lean#L51\"><code>array_mem_dec</code></a>)</li>\n</ul>\n<p>The <a href=\"https://github.com/leanprover-community/batteries/blob/main/Batteries/Data/List/Init/Attach.lean\">code footprint</a> is small and the main thing to review would probably be</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"sd\">/--</span>\n<span class=\"sd\">Unsafe implementation of `attachWith`, taking advantage of the fact that the representation of</span>\n<span class=\"sd\">`List {x // P x}` is the same as the input `List α`.</span>\n<span class=\"sd\">(Someday, the compiler might do this optimization automatically, but until then...)</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">@[</span><span class=\"n\">inline</span><span class=\"kd\">]</span><span class=\"w\"> </span><span class=\"kn\">private</span><span class=\"w\"> </span><span class=\"n\">unsafe</span><span class=\"w\"> </span><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">attachWithImpl</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">l</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"kt\">Prop</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">∈</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">//</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">unsafeCast</span><span class=\"w\"> </span><span class=\"n\">l</span>\n</code></pre></div>\n<p>which looks fine to me. May I advance this to an RFC?</p>",
        "id": 442960519,
        "sender_full_name": "llllvvuu",
        "timestamp": 1717646577
    },
    {
        "content": "<p>An RFC seems reasonable to me. <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 443620873,
        "sender_full_name": "Mac Malone",
        "timestamp": 1717957092
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/issues/4414\">https://github.com/leanprover/lean4/issues/4414</a></p>",
        "id": 443691260,
        "sender_full_name": "llllvvuu",
        "timestamp": 1718000587
    }
]