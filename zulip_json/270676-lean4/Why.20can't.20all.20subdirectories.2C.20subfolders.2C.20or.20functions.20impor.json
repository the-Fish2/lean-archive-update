[
    {
        "content": "<p>Why can't all subdirectories, subfolders, or Lean functions under a directory be imported when a folder of Mathib is imported? Thanks.</p>",
        "id": 446067946,
        "sender_full_name": "Lewis",
        "timestamp": 1718971166
    },
    {
        "content": "<p>You can do that by transitive imports</p>",
        "id": 446073371,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1718973050
    },
    {
        "content": "<p>If I have <code>&lt;subfolder&gt;</code> and <code>&lt;subfolder&gt;.lean</code> which contains all the imports of toplevel files in that subfolder, then you just have to <code>import &lt;subfolder&gt;</code></p>",
        "id": 446073780,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1718973181
    },
    {
        "content": "<p>Yes I want this too!!! Very often I create a lean file with the same name as the directory and in the file I just include all the files in that directory.</p>\n<p>It's really annoying to keep up to date and it is just an unnecessary boilerplate.</p>",
        "id": 446074092,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1718973267
    },
    {
        "content": "<p>I wrote something like this <a href=\"#narrow/stream/270676-lean4/topic/Reintroducing.20default.2Elean/near/391646671\">a long time ago</a>.  I do not know if it still works or not, though.</p>",
        "id": 446074495,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718973391
    },
    {
        "content": "<p>I think this design comes from rust. There it is useful in choosing which modules you wish to expose to the outside world and which ones are just internal</p>",
        "id": 446076014,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1718973923
    },
    {
        "content": "<p>I just tried it: the code at the link above essentially works.   I am going to copy it here, with just enough adjustments to remove the deprecation!</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Util</span><span class=\"bp\">.</span><span class=\"n\">GetAllModules</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Elab</span><span class=\"bp\">.</span><span class=\"n\">Command</span>\n\n<span class=\"kn\">syntax</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">importStar</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"s2\">\"import*\"</span><span class=\"w\"> </span><span class=\"s2\">\"?\"</span><span class=\"bp\">?</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">colGt</span><span class=\"w\"> </span><span class=\"n\">ident</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">command</span>\n\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"w\"> </span><span class=\"k\">in</span>\n<span class=\"n\">elab_rules</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">command</span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"kn\">import</span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">?%$</span><span class=\"n\">info</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">pat</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">stripImp</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">getAllModulesSorted</span><span class=\"w\"> </span><span class=\"n\">false</span><span class=\"w\"> </span><span class=\"s2\">\"Mathlib\"</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">withDots</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">stripImp</span><span class=\"bp\">.</span><span class=\"n\">filter</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"bp\">.</span><span class=\"n\">isPrefixOf</span><span class=\"w\"> </span><span class=\"n\">pat</span><span class=\"bp\">.</span><span class=\"n\">getId</span><span class=\"bp\">.</span><span class=\"n\">toString</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">paths</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">withDots</span><span class=\"bp\">.</span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">spl</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"bp\">.</span><span class=\"n\">splitOn</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"s2\">\".\"</span>\n<span class=\"w\">    </span><span class=\"n\">System</span><span class=\"bp\">.</span><span class=\"n\">mkFilePath</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"n\">spl</span><span class=\"bp\">.</span><span class=\"n\">dropLast</span><span class=\"w\"> </span><span class=\"bp\">++</span><span class=\"w\"> </span><span class=\"o\">[(</span><span class=\"n\">spl</span><span class=\"bp\">.</span><span class=\"n\">getLast?</span><span class=\"bp\">.</span><span class=\"n\">getD</span><span class=\"w\"> </span><span class=\"s2\">\"\"</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">++</span><span class=\"w\"> </span><span class=\"s2\">\".lean\"</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">names</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">paths</span><span class=\"bp\">.</span><span class=\"n\">mapM</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">moduleNameOfFileName</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"w\"> </span><span class=\"n\">none</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">newImports</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Array</span><span class=\"w\"> </span><span class=\"n\">Import</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">names</span><span class=\"bp\">.</span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"o\">({</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"o\">})</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">oldAndNewImports</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">getEnv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">imports</span><span class=\"w\"> </span><span class=\"bp\">++</span><span class=\"w\"> </span><span class=\"n\">newImports</span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">info</span><span class=\"bp\">.</span><span class=\"n\">isSome</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"n\">logInfo</span><span class=\"w\"> </span><span class=\"n\">m!</span><span class=\"s2\">\"{\"</span><span class=\"bp\">\\</span><span class=\"n\">n</span><span class=\"s2\">\".intercalate (withDots.map (\"</span><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"s2\">\" ++ ·)).toList}\"</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">newEnv</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">importModules</span><span class=\"w\"> </span><span class=\"n\">oldAndNewImports</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">getOptions</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"n\">unsafe</span><span class=\"w\"> </span><span class=\"n\">enableInitializersExecution</span>\n<span class=\"w\">  </span><span class=\"n\">setEnv</span><span class=\"w\"> </span><span class=\"n\">newEnv</span>\n\n<span class=\"kn\">import</span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Da</span>\n\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">ENNReal</span><span class=\"w\">  </span><span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 446079297,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718975017
    },
    {
        "content": "<p><code>lean4checker</code> will reject this, of course. :-)</p>",
        "id": 446216702,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719029029
    },
    {
        "content": "<p>Kim, are you saying that I should not PR this?  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> </p>\n<p>Anyway, this is really just a hack to show that you <em>can</em> do it, not that you <em>should</em> do it!</p>",
        "id": 446232409,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1719039324
    }
]