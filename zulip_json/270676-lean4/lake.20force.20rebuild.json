[
    {
        "content": "<p>I have a slight problem with my translation package.</p>\n<p>Currently it runs the string-extraction the way that there is a command <code>#export_i18n</code> in <code>Project.lean</code>, so that at the end of <code>lake build</code>, it also runs this and saves the files ready for translation.</p>\n<p>However, this reads a <code>config.json</code> file, so if I just change some configs and run <code>lake build</code>, nothing happens. I actively have to either modify <code>Project.lean</code> or delete <code>.lake</code> for a rebuild to happen.</p>\n<p>What could I do? Is there (a) a post-build-hook for lake, or (b) a way to make it somehow that the hash of <code>config.json</code> is important in the decision that the entire project should be rebuilt, or (c) a way to force rebuilding a file/project, even if .oleans exist?</p>\n<p>(an alternative is to just use a <code>lake exe ...</code> command, maybe I resort to that if there is no automated way)</p>",
        "id": 430066189,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1711632183
    },
    {
        "content": "<p>After reflection, I think <code>lake exe ...</code> is the most reasonable thing to use, actually. (especially since I assume the answer to everything else is \"no\")</p>",
        "id": 430089482,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1711638478
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"385895\">Jon Eugster</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20force.20rebuild/near/430066189\">said</a>:</p>\n<blockquote>\n<p>Is there  (b) a way to make it somehow that the hash of <code>config.json</code> is important in the decision that the entire project should be rebuilt.)</p>\n</blockquote>\n<p>There is! It is called <code>extraDepTargets</code>. For example,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">package</span> <span class=\"n\">foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">extraDepTargets</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">config</span><span class=\"o\">]</span>\n\n<span class=\"n\">target</span> <span class=\"n\">config</span> <span class=\"n\">pkg</span> <span class=\"o\">:</span> <span class=\"n\">FilePath</span> <span class=\"o\">:=</span>\n  <span class=\"n\">inputFile</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">pkg.dir</span> <span class=\"bp\">/</span> <span class=\"s2\">\"config.json\"</span>\n</code></pre></div>\n<p>This will rebuild the package every time  a file named<code>config.json</code> in the package's directory changes.</p>",
        "id": 430199765,
        "sender_full_name": "Mac Malone",
        "timestamp": 1711685573
    },
    {
        "content": "<p>oh amazing, thanks! Didn't know about that</p>",
        "id": 430235752,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1711708471
    }
]