[
    {
        "content": "<p>How can I state all  type element of a <code>List Type</code> is instance of a type class?<br>\nAs an example, I want to implment <code>ToString</code> for <code>HList</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">HList</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">HList</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">HList</span> <span class=\"n\">αs</span> <span class=\"bp\">→</span> <span class=\"n\">HList</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">::</span><span class=\"n\">αs</span><span class=\"o\">)</span>\n\n<span class=\"bp\">//</span> <span class=\"n\">given</span> <span class=\"n\">every</span> <span class=\"n\">element</span> <span class=\"n\">of</span> <span class=\"n\">αs</span> <span class=\"n\">is</span> <span class=\"kd\">instance</span> <span class=\"n\">of</span> <span class=\"n\">ToString</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"bp\">?</span><span class=\"n\">h1</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ToString</span> <span class=\"o\">(</span><span class=\"n\">HList</span> <span class=\"n\">αs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">h2</span>\n</code></pre></div>\n<p>I tried using a class inductive but ended up with some type mismatch:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- States that all types in a type list is instance of typeclass C -/</span>\n<span class=\"kd\">class</span> <span class=\"kd\">inductive</span> <span class=\"n\">All</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"o\">:</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">→</span>  <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">All</span> <span class=\"n\">C</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">All</span> <span class=\"n\">C</span> <span class=\"n\">αs</span> <span class=\"bp\">→</span> <span class=\"n\">All</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">::</span><span class=\"n\">αs</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- An empty type list is \"all ToString\" -/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">All</span> <span class=\"n\">ToString</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">nil</span>\n<span class=\"sd\">/-- cons of `ToString` and `LAll ToString` -/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">i1</span> <span class=\"o\">:</span> <span class=\"n\">ToString</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">i2</span> <span class=\"o\">:</span> <span class=\"n\">All</span> <span class=\"n\">ToString</span> <span class=\"n\">αs</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">All</span> <span class=\"n\">ToString</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">::</span><span class=\"n\">αs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">i1</span> <span class=\"n\">i2</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">HList.toString</span> <span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">All</span> <span class=\"n\">ToString</span> <span class=\"n\">αs</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">HList</span> <span class=\"n\">ts</span> <span class=\"bp\">→</span> <span class=\"n\">String</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"#[]\"</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">match</span> <span class=\"n\">i</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">ix</span> <span class=\"n\">ixs</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"s2\">\"#[\"</span> <span class=\"bp\">++</span>\n    <span class=\"o\">(</span><span class=\"n\">ix.toString</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">++</span>    <span class=\"c1\">-- (I) application type mismatch here</span>\n    <span class=\"s2\">\",\"</span> <span class=\"bp\">++</span>\n    <span class=\"n\">xs.toString</span> <span class=\"bp\">++</span>   <span class=\"c1\">-- (II) typeclass instance problem is stuck here</span>\n    <span class=\"s2\">\"]\"</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">unreachable</span><span class=\"bp\">!</span> <span class=\"c1\">-- (III) how to prove this</span>\n</code></pre></div>\n<p>where in (I) <code>α</code> in <code>x</code> and <code>ix</code> resolves to differrent types. How to prove they are same?<br>\nand in (II) how can I explicitly specify <code>ixs</code> as the typeclass argument?<br>\n(III) How to absurd the <code>.nil</code> case?</p>",
        "id": 411567107,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1704600615
    },
    {
        "content": "<p>You should match on <code>i</code> first instead of on the other argument.</p>",
        "id": 411577280,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1704611883
    },
    {
        "content": "<p>or both simultaneously</p>",
        "id": 411577481,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1704612082
    },
    {
        "content": "<p>Sorry, but can you give some more details? I tried swaping the order of two match clauses but the types are still not unified. Which problem does it solve?</p>",
        "id": 411578891,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1704613581
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">HList.toString</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">All</span> <span class=\"n\">ToString</span> <span class=\"n\">αs</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"n\">HList</span> <span class=\"n\">αs</span> <span class=\"bp\">→</span> <span class=\"n\">String</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">nil</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"#[]\"</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">I</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"s2\">\"#[\"</span> <span class=\"bp\">++</span>\n    <span class=\"o\">(</span><span class=\"n\">I.toString</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">++</span>\n    <span class=\"s2\">\",\"</span> <span class=\"bp\">++</span>\n    <span class=\"n\">xs.toString</span> <span class=\"bp\">++</span>\n  <span class=\"s2\">\"]\"</span>\n</code></pre></div>\n<p>solves all three problems :)</p>",
        "id": 411579649,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1704614368
    },
    {
        "content": "<p>It works! Thanks!</p>",
        "id": 411580193,
        "sender_full_name": "Xubai Wang",
        "timestamp": 1704614836
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"414345\">Xubai Wang</span> has marked this topic as resolved.</p>",
        "id": 411580196,
        "sender_full_name": "Notification Bot",
        "timestamp": 1704614840
    }
]