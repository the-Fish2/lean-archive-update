[
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=BaseIO.asTask#doc\">docs#BaseIO.asTask</a> has a simple definition, but is marked opaque, so this proof doesn't work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">BaseIO.askTask_def</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">BaseIO</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">prio</span> <span class=\"o\">:</span> <span class=\"n\">Task.Priority</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">BaseIO.asTask</span> <span class=\"n\">prio</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">Task.pure</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rfl</span>  <span class=\"c1\">-- Does not work, since BaseIO.asTask is opaque</span>\n</code></pre></div>\n<p>Is there a way to make this proof work, or is opaque indeed impossible to see through (by design)?</p>",
        "id": 424250309,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1709303477
    },
    {
        "content": "<p>Hmm, this documentation makes me guess it's impossible: <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Tactics.html#Lean.Parser.Tactic.withUnfoldingAll\">https://leanprover-community.github.io/mathlib4_docs/Init/Tactics.html#Lean.Parser.Tactic.withUnfoldingAll</a></p>",
        "id": 424256958,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1709305086
    },
    {
        "content": "<p>But this simple definition is only a placeholder for typechecking and <code>asTask</code> is implemented by the specified C-function, so when run, these two objects in <code>BaseIO Task</code> give you different <code>Task</code>s back.</p>\n<p>So I'd somehow hope that you wouldn't be able to prove such an equality.</p>\n<p>Can I ask you why you'd want to do that?</p>",
        "id": 424288839,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1709312370
    },
    {
        "content": "<p>I want to prove that the pure content of IO.asTask has certain properties, similar to how I’m allowed to prove that Task.spawn has properties even though it is also implemented in C.</p>",
        "id": 424289287,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1709312492
    },
    {
        "content": "<p>Ah, I can dodge this, so I'm not blocked: if I write my own version of <code>BaseIO.asTask</code> that threads the property though via dependent types, I can prove what I need.</p>",
        "id": 424294912,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1709314249
    }
]