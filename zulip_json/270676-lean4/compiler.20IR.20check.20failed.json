[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.AdjoinRoot</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.IntegrallyClosed</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Polynomial</span> <span class=\"n\">AdjoinRoot</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsDomain</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsIntegrallyClosed</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsDomain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NoZeroSMulDivisors</span> <span class=\"n\">F</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">IsIntegral</span> <span class=\"n\">F</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"o\">({</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">AdjoinRoot</span> <span class=\"o\">(</span><span class=\"n\">minpoly</span> <span class=\"n\">F</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"n\">AlgEquiv.symm</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">AlgEquiv.ofBijective</span> <span class=\"o\">(</span><span class=\"n\">Minpoly.toAdjoin</span> <span class=\"n\">F</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">minpoly</span>\n</code></pre></div>\n<p>Commenting out <code>noncomputable</code> gives the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">compiler</span> <span class=\"n\">IR</span> <span class=\"n\">check</span> <span class=\"n\">failed</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">test._rarg'</span><span class=\"o\">,</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">declaration</span> <span class=\"bp\">'</span><span class=\"n\">minpoly'</span>\n</code></pre></div>\n<p>I think there should be the usual error message suggesting to mark the definition as <code>noncomputable</code>, so it appears that this is a bug.</p>",
        "id": 411509085,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1704549098
    },
    {
        "content": "<p>Is this <a href=\"https://github.com/leanprover/lean4/pull/1785\">lean4#1785</a> ?</p>",
        "id": 411509214,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704549228
    },
    {
        "content": "<p>Very likely, <code>minpoly</code> is  <code>noncomputable</code>...</p>",
        "id": 411509329,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1704549340
    }
]