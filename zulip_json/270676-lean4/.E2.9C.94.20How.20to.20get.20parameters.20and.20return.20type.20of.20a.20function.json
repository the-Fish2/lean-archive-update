[
    {
        "content": "<p>Suppose I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">addInts</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span>\n\n<span class=\"c1\">-- def getParams : Type :=</span>\n\n<span class=\"c1\">-- def getReturnType : Type :=</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">getParams</span> <span class=\"n\">addInts</span>\n<span class=\"c1\">-- Int \\r Int</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">getReturnType</span> <span class=\"n\">addInts</span>\n<span class=\"c1\">-- Int</span>\n</code></pre></div>\n<p>Is something like this possible? I had no luck searching with variations of the title of this topic.</p>",
        "id": 423661134,
        "sender_full_name": "Alex Sweeney",
        "timestamp": 1709054890
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span> <span class=\"n\">Command</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">printFnTypeParts</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">printParams</span> <span class=\"n\">printReturn</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TermElabM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">f</span> <span class=\"n\">none</span>\n  <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">e</span>\n  <span class=\"n\">forallTelescope</span> <span class=\"n\">t</span> <span class=\"k\">fun</span> <span class=\"n\">fvars</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"n\">printParams</span> <span class=\"k\">then</span> <span class=\"n\">logInfo</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"n\">fvars.mapM</span> <span class=\"o\">(</span><span class=\"n\">inferType</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">printReturn</span> <span class=\"k\">then</span> <span class=\"n\">logInfo</span> <span class=\"n\">b</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"#params\"</span> <span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">liftTermElabM</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">printFnTypeParts</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">printParams</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"#returns\"</span> <span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">liftTermElabM</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">printFnTypeParts</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">printReturn</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">addInts</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span>\n\n<span class=\"bp\">#</span><span class=\"n\">params</span> <span class=\"n\">addInts</span> <span class=\"c1\">-- #[Int, Int]</span>\n<span class=\"bp\">#</span><span class=\"n\">returns</span> <span class=\"n\">addInts</span> <span class=\"c1\">-- Int</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">depFun</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"s2\">\"\"</span>\n\n<span class=\"bp\">#</span><span class=\"n\">params</span> <span class=\"n\">depFun</span> <span class=\"c1\">-- #[Type, List α]</span>\n<span class=\"bp\">#</span><span class=\"n\">returns</span> <span class=\"n\">depFun</span> <span class=\"c1\">-- String</span>\n</code></pre></div>",
        "id": 423662868,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1709055496
    },
    {
        "content": "<p>Perfect, thank you</p>",
        "id": 423665065,
        "sender_full_name": "Alex Sweeney",
        "timestamp": 1709056292
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"544521\">Alex Sweeney</span> has marked this topic as resolved.</p>",
        "id": 423665073,
        "sender_full_name": "Notification Bot",
        "timestamp": 1709056296
    },
    {
        "content": "<p>May I ask what you plan on using this for?</p>",
        "id": 423665186,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1709056328
    },
    {
        "content": "<p>I'm inspired by Blender's node editor for shaders and geometry and wanted to experiment to see how easy it would be to make something like that with Lean. I'm trying to figure out how to register a given Lean function as a node so I could connect inputs and outputs to other nodes in the graph.</p>\n<p>In my mind, it <em>should</em> be easy to validate that a graph is a DAG and run independent calculations in parallel.</p>",
        "id": 423666173,
        "sender_full_name": "Alex Sweeney",
        "timestamp": 1709056669
    },
    {
        "content": "<p>I'm at like step 2 of this rabbit hole though so I don't really know where this will go</p>",
        "id": 423666360,
        "sender_full_name": "Alex Sweeney",
        "timestamp": 1709056717
    }
]