[
    {
        "content": "<p>I defined the lambda terms.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"w\"> </span><span class=\"n\">Elab</span><span class=\"w\"> </span><span class=\"n\">Meta</span><span class=\"w\"> </span><span class=\"n\">Tactic</span>\n\n<span class=\"kd\">inductive</span><span class=\"w\"> </span><span class=\"n\">Lambda</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">var</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Lambda</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">lam</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Lambda</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Lambda</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">app</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Lambda</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Lambda</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Lambda</span>\n</code></pre></div>\n<p>And I wrote the DSL for the lambda term as follows, since it is difficult to read the de Bruijn index.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span><span class=\"w\"> </span><span class=\"n\">Lambda</span>\n\n<span class=\"n\">declare_syntax_cat</span><span class=\"w\"> </span><span class=\"n\">lambda_expression</span>\n<span class=\"n\">syntax</span><span class=\"w\"> </span><span class=\"n\">ident</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">lambda_expression</span>\n<span class=\"n\">syntax</span><span class=\"w\"> </span><span class=\"s2\">\"λ \"</span><span class=\"w\"> </span><span class=\"n\">ident</span><span class=\"w\"> </span><span class=\"s2\">\". \"</span><span class=\"w\"> </span><span class=\"n\">lambda_expression</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">lambda_expression</span>\n<span class=\"n\">syntax</span><span class=\"w\"> </span><span class=\"n\">lambda_expression</span><span class=\"w\"> </span><span class=\"n\">lambda_expression</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">lambda_expression</span>\n<span class=\"n\">syntax</span><span class=\"w\"> </span><span class=\"s2\">\"(\"</span><span class=\"w\"> </span><span class=\"n\">lambda_expression</span><span class=\"w\"> </span><span class=\"s2\">\")\"</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">lambda_expression</span>\n<span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"n\">max</span><span class=\"w\"> </span><span class=\"s2\">\"!\"</span><span class=\"w\"> </span><span class=\"n\">term</span><span class=\"o\">:</span><span class=\"n\">max</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">lambda_expression</span>\n\n<span class=\"n\">partial</span><span class=\"w\"> </span><span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">elabLambda</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">TSyntaxArray</span><span class=\"w\"> </span><span class=\"ss\">`ident</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Syntax</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">TermElabM</span><span class=\"w\"> </span><span class=\"n\">Expr</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">names</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">lambda_expression</span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">names.getIdx</span><span class=\"bp\">?</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">throwError</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"error: variable {i} did not found.\"</span>\n<span class=\"w\">    </span><span class=\"n\">return</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Expr.const</span><span class=\"w\"> </span><span class=\"ss\">`Lambda.var</span><span class=\"w\"> </span><span class=\"o\">[])</span><span class=\"bp\">.</span><span class=\"n\">app</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">toExpr</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">names</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">lambda_expression</span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">λ</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"bp\">.</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">names.elem</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"n\">throwError</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"error: variable {x} is duplicated.\"</span><span class=\"w\"> </span><span class=\"k\">else</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">elabLambda</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">names.insertAt</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">e</span>\n<span class=\"w\">    </span><span class=\"n\">return</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Expr.const</span><span class=\"w\"> </span><span class=\"ss\">`Lambda.lam</span><span class=\"w\"> </span><span class=\"o\">[])</span><span class=\"bp\">.</span><span class=\"n\">app</span><span class=\"w\"> </span><span class=\"n\">l</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">names</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">lambda_expression</span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">e₁</span><span class=\"o\">:</span><span class=\"n\">lambda_expression</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">e₂</span><span class=\"o\">:</span><span class=\"n\">lambda_expression</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">l₁</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">elabLambda</span><span class=\"w\"> </span><span class=\"n\">names</span><span class=\"w\"> </span><span class=\"n\">e₁</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">l₂</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">elabLambda</span><span class=\"w\"> </span><span class=\"n\">names</span><span class=\"w\"> </span><span class=\"n\">e₂</span>\n<span class=\"w\">    </span><span class=\"n\">return</span><span class=\"w\"> </span><span class=\"n\">Expr.const</span><span class=\"w\"> </span><span class=\"ss\">`Lambda.app</span><span class=\"w\"> </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">|&gt;.</span><span class=\"n\">app</span><span class=\"w\"> </span><span class=\"n\">l₁</span><span class=\"w\"> </span><span class=\"bp\">|&gt;.</span><span class=\"n\">app</span><span class=\"w\"> </span><span class=\"n\">l₂</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">names</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">lambda_expression</span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">lambda_expression</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">elabLambda</span><span class=\"w\"> </span><span class=\"n\">names</span><span class=\"w\"> </span><span class=\"n\">e</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">lambda_expression</span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">!$</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Term.elabTerm</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Expr.const</span><span class=\"w\"> </span><span class=\"ss\">`Lambda</span><span class=\"w\"> </span><span class=\"o\">[]))</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\">  </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">throwUnsupportedSyntax</span>\n\n<span class=\"n\">elab</span><span class=\"w\"> </span><span class=\"s2\">\"“\"</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">lambda_expression</span><span class=\"w\"> </span><span class=\"s2\">\"”\"</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">term</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">elabLambda</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"n\">e</span>\n\n<span class=\"k\">#check</span><span class=\"w\"> </span><span class=\"bp\">“λ</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">))</span><span class=\"bp\">”</span>\n\n<span class=\"k\">#check</span><span class=\"w\"> </span><span class=\"bp\">“λ</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"bp\">”</span><span class=\"w\"> </span><span class=\"c1\">-- error: variable x is duplicated.</span>\n</code></pre></div>\n<p>Next, suppose I define, for example, Church encoding.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">church</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Lambda</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\">     </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"bp\">“λ</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"w\"> </span><span class=\"bp\">λ</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"bp\">”</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"bp\">“λ</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"w\"> </span><span class=\"bp\">λ</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">!</span><span class=\"o\">(</span><span class=\"n\">church</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">”</span>\n\n<span class=\"n\">syntax</span><span class=\"w\"> </span><span class=\"n\">num</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">lambda_expression</span>\n</code></pre></div>\n<p>I want to extend the DSL so that <code>num</code> can be interpreted as Church numbers, but how can I achieve that?</p>\n<p>I know that I can use macro to extend notation, but it is difficult for macro to handle such a complex process and error handling  as defined here.</p>",
        "id": 443014906,
        "sender_full_name": "Palalansoukî",
        "timestamp": 1717666567
    },
    {
        "content": "<p>Syntactically it's not really different from the <code>ident</code> case, at which step are you stuck?</p>",
        "id": 443016359,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1717667045
    },
    {
        "content": "<p>Of course, one could copy <code>elabLambda</code> and add the case <code>(lambda_expression| $n:num)</code>, but considering the various functions and notations that will be added after this, I feel that it is tedious to have to copy and redefine the notation every time. Also, it is not practical to prepare all the notations initially.</p>",
        "id": 443018419,
        "sender_full_name": "Palalansoukî",
        "timestamp": 1717667736
    },
    {
        "content": "<p>I see, you're asking about extending a syntactic category's elaboration after the fact. Essentially you'll want to create your own elaboration attribute like <code>term_elab/...</code> for that but I don't think we have a nice guide to follow yet</p>",
        "id": 443029992,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1717671799
    },
    {
        "content": "<p>And <code>elab/elab_rules</code> sadly is hard-coded to the built-in categories for now</p>",
        "id": 443030097,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1717671842
    },
    {
        "content": "<p>Thanks, But that would be beyond my skills, so I'd rather not do that.</p>\n<p><del>I am trying to find a way to replace everything with macro. Perhaps the following would work, but is there a way to convert <code>Nat</code> to <code>TSyntax </code>num`?</del></p>",
        "id": 443069313,
        "sender_full_name": "Palalansoukî",
        "timestamp": 1717682745
    },
    {
        "content": "<p>The problem was solved by writing in macro. Not sure if that's the best way.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span><span class=\"w\"> </span><span class=\"s2\">\"“\"</span><span class=\"w\"> </span><span class=\"n\">ident</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"s2\">\" ⊢ \"</span><span class=\"w\"> </span><span class=\"n\">lambda_notation</span><span class=\"w\"> </span><span class=\"s2\">\"”\"</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">“</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">ns</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"bp\">⊢</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"w\"> </span><span class=\"bp\">”</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">names</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">ns.getElems</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">names.getIdx</span><span class=\"bp\">?</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Macro.throwErrorAt</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"s2\">\"error: variable did not found.\"</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">xx</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Syntax.mkNumLit</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">toString</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">var</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">xx</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">“</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">ns</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"bp\">⊢</span><span class=\"w\"> </span><span class=\"bp\">λ</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"bp\">.</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">lambda_notation</span><span class=\"w\"> </span><span class=\"bp\">”</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">names</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">ns.getElems</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">names.elem</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"n\">Macro.throwErrorAt</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"s2\">\"error: variable is duplicated.\"</span><span class=\"w\"> </span><span class=\"k\">else</span>\n<span class=\"w\">    </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">lam</span><span class=\"w\"> </span><span class=\"bp\">“</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"bp\">$</span><span class=\"n\">ns</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"bp\">⊢</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"bp\">”</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">“</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">ns</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"bp\">⊢</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">e₁</span><span class=\"o\">:</span><span class=\"n\">lambda_notation</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">e₂</span><span class=\"o\">:</span><span class=\"n\">lambda_notation</span><span class=\"w\"> </span><span class=\"bp\">”</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">    </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">app</span><span class=\"w\"> </span><span class=\"bp\">“$</span><span class=\"n\">ns</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"bp\">⊢</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">e₁</span><span class=\"bp\">”</span><span class=\"w\"> </span><span class=\"bp\">“$</span><span class=\"n\">ns</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"bp\">⊢</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">e₂</span><span class=\"bp\">”</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">“</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"bp\">⊢</span><span class=\"w\"> </span><span class=\"bp\">!$</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"bp\">”</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">“</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">ns</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"bp\">⊢</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">lambda_notation</span><span class=\"w\"> </span><span class=\"o\">)</span><span class=\"bp\">”</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"bp\">“</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">ns</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"bp\">⊢</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"bp\">”</span><span class=\"w\"> </span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Lambda</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">“</span><span class=\"w\"> </span><span class=\"bp\">⊢</span><span class=\"w\"> </span><span class=\"bp\">λ</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"bp\">”</span>\n\n<span class=\"k\">#check</span><span class=\"w\"> </span><span class=\"bp\">“</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">⊢</span><span class=\"w\"> </span><span class=\"bp\">!</span><span class=\"n\">Y</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">”</span>\n\n<span class=\"k\">#check</span><span class=\"w\"> </span><span class=\"bp\">“</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"bp\">⊢</span><span class=\"w\"> </span><span class=\"bp\">λ</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">”</span>\n</code></pre></div>",
        "id": 443074091,
        "sender_full_name": "Palalansoukî",
        "timestamp": 1717684101
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"414485\">Palalansoukî</span> has marked this topic as resolved.</p>",
        "id": 443074103,
        "sender_full_name": "Notification Bot",
        "timestamp": 1717684107
    }
]