[
    {
        "content": "<p>Hi; I'm having the issue, that my lsp gets out of sync very often with the actual documents; I'm using a mathlib commit from yesterday and the respecting toolchain; the lean plugin is the newest nvim plugin; this is a new issues, I didn't have it with different toolchains. </p>\n<p><a href=\"/user_uploads/3121/J5doxev4T71jCyh7vnWJK5uE/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/J5doxev4T71jCyh7vnWJK5uE/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/J5doxev4T71jCyh7vnWJK5uE/image.png\"></a></div>",
        "id": 409397799,
        "sender_full_name": "MangoIV",
        "timestamp": 1703168150
    },
    {
        "content": "<p>attached is a screenshot of how it looks; I've also had some issues about the LSP not recognising things like <code>.S</code> anymore after making a typo and having to restart the LSP</p>",
        "id": 409398384,
        "sender_full_name": "MangoIV",
        "timestamp": 1703168310
    },
    {
        "content": "<p>also very often the LSP just gets stuck on \"Processing\"</p>",
        "id": 409398817,
        "sender_full_name": "MangoIV",
        "timestamp": 1703168452
    },
    {
        "content": "<p>For how long have you been experiencing these issues? The Mathlib toolchain is three weeks old at this point.</p>",
        "id": 409399513,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1703168668
    },
    {
        "content": "<p>I've been experimenting with lean on and off, these issues are new in the project I just started experimenting with.</p>",
        "id": 409399727,
        "sender_full_name": "MangoIV",
        "timestamp": 1703168751
    },
    {
        "content": "<p>Do you encounter the same issue with VS Code?</p>",
        "id": 409399895,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1703168795
    },
    {
        "content": "<p>I can try codium; I can also try a project with an older toolchain</p>",
        "id": 409399973,
        "sender_full_name": "MangoIV",
        "timestamp": 1703168822
    },
    {
        "content": "<p>for codium it just tells me \"the lean server has stopped processing this file [..] likely due to a stack overflow or a bug\", when trying to use \\ to write a unicode symbol; maybe I'm doing something wrong here; what things have to be in sync? </p>\n<ul>\n<li>I have lean4 and lake from the release candidate specified in the toolchain file</li>\n<li>I have everything else installed via lake</li>\n<li>mathlib is the latest master from yesterday</li>\n</ul>",
        "id": 409401636,
        "sender_full_name": "MangoIV",
        "timestamp": 1703169371
    },
    {
        "content": "<p>ah no this only happens when trying to add an arrow behind an existing arrow in an inductive type (and only sometimes?)</p>",
        "id": 409402519,
        "sender_full_name": "MangoIV",
        "timestamp": 1703169660
    },
    {
        "content": "<p>Out of curiosity, are you using a standard Lean setup? If not, then there is little that can be done to help you because the issue may be due to how you set up Lean.</p>",
        "id": 409402795,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1703169756
    },
    {
        "content": "<p>I’m not using elan to manage my lean binaries because I’m not a big fan of installing things globally but it should amount to the same thing, hence my questions.</p>",
        "id": 409403330,
        "sender_full_name": "MangoIV",
        "timestamp": 1703169905
    },
    {
        "content": "<p>It doesn't, e.g. the VS Code extension relies on Elan being present.</p>",
        "id": 409403403,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1703169929
    },
    {
        "content": "<p>Alright; well I guess I’ll have to give in and accept this mess as necessary evil if I want to get lean working <span aria-label=\"melting face\" class=\"emoji emoji-1fae0\" role=\"img\" title=\"melting face\">:melting_face:</span></p>",
        "id": 409404014,
        "sender_full_name": "MangoIV",
        "timestamp": 1703170135
    },
    {
        "content": "<p>If you are aware that you are using a setup significantly different than the supported one, it would be helpful to say so at the beginning of the thread, so that we can more efficiently say \"please use elan\". :-)</p>",
        "id": 409467682,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1703194575
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"221921\">Marc Huisinga</span> <a href=\"#narrow/stream/270676-lean4/topic/lsp.20seems.20to.20get.20out.20of.20sync.20with.20actual.20document.20.28often.29/near/409403403\">said</a>:</p>\n<blockquote>\n<p>It doesn't, e.g. the VS Code extension relies on Elan being present.</p>\n</blockquote>\n<p>Out of curiosity, how so?</p>",
        "id": 409468547,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1703195104
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/lsp.20seems.20to.20get.20out.20of.20sync.20with.20actual.20document.20.28often.29/near/409467682\">said</a>:</p>\n<blockquote>\n<p>If you are aware that you are using a setup significantly different than the supported one, it would be helpful to say so at the beginning of the thread, so that we can more efficiently say \"please use elan\". :-)</p>\n</blockquote>\n<p>As I was trying to convey I was not aware I’m using a setup significantly different; I was only aware of elan not being present which seemed fine to me according to my understanding of what it’s supposed to do.</p>",
        "id": 409477566,
        "sender_full_name": "MangoIV",
        "timestamp": 1703199281
    },
    {
        "content": "<p>What elan provides works though, and I’ll roll with it I guess…</p>",
        "id": 409477710,
        "sender_full_name": "MangoIV",
        "timestamp": 1703199328
    },
    {
        "content": "<p>Good point: it is potentially surprising that the VSCode extension is relying on <code>elan</code> rather than a manual install.</p>",
        "id": 409481745,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1703201649
    },
    {
        "content": "<blockquote>\n<p>As I was trying to convey I was not aware I’m using a setup significantly different; I was only aware of elan not being present which seemed fine to me according to my understanding of what it’s supposed to do.</p>\n</blockquote>\n<p>This is what <a href=\"#narrow/stream/113488-general/topic/elan.20nix.20package.20installs.20way.20more.20than.20it.20promises/near/409262448\">Sebastian tried to communicate earlier</a>. Setups without Elan see no use, so they are probably broken in ways that are difficult to diagnose.</p>\n<p>It's also not at all clear to me that lacking Elan is the actual cause of the issues you are experiencing (the VS Code extension relying on it in places was just an example); you may also have set up your Lean versions incorrectly. It's difficult to tell because the piece of software that is supposed to enforce the invariant that the correct Lean version is being used is missing.</p>",
        "id": 409555634,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1703239594
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/270676-lean4/topic/lsp.20seems.20to.20get.20out.20of.20sync.20with.20actual.20document.20.28often.29/near/409468547\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"221921\">Marc Huisinga</span> <a href=\"#narrow/stream/270676-lean4/topic/lsp.20seems.20to.20get.20out.20of.20sync.20with.20actual.20document.20.28often.29/near/409403403\">said</a>:</p>\n<blockquote>\n<p>It doesn't, e.g. the VS Code extension relies on Elan being present.</p>\n</blockquote>\n<p>Out of curiosity, how so?</p>\n</blockquote>\n<p>One example: When running the language server using the language client library without a working directory (e.g. because the file is an \"untitled\" file), it would use the opened workspace folder for the working directory and its toolchain, which is not what you want for such files. To fix this, the VS Code extension asks Elan for the default toolchain and uses that for \"untitled\" files.</p>\n<p>There's also a couple of other uses related to the very messy code that attempts to figure out which Lean version to use (e.g. for compatibility across multiple Lean versions) or how to bootstrap Elan correctly in case it isn't installed yet. This code has fallbacks for installations without Elan, but I'm sure they never see any use and are probably broken. I want to refactor all of this messy code eventually.</p>",
        "id": 409565727,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1703243931
    },
    {
        "content": "<p>Hmm, ok.</p>\n<p>My naive expectation was that VSCode just shells out to <code>lean</code>( and maybe <code>lake</code>); in elan environments, the corresponding entries in the <code>PATH</code> are actually all  <code>elan</code> which then consults the toolchain, downloads and <code>exec</code>s the right binary; and that VSCode doesn't actually care whether it’s <code>elan</code> doing that, and as long as the <code>lean</code> in the PATH happens to be the right one, all just works . And only <code>elan</code> looks at <code>lean-toolchain</code>, nothing else. Maybe too naive, though.</p>\n<p>It seems that the roles and interfaces of <code>elan</code>, <code>lake</code>, VSCode are not as cleanly specified separated as one might possibly hope, which is probably well-known to most users, but new users (of the kind that tend to stray from the default path, like me) will have to learn first the hard way.</p>",
        "id": 409576019,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1703248666
    },
    {
        "content": "<p>That was my initial naive expectation, too, but it's unfortunately not true since the extension does more than run a single <code>lean</code> or <code>lake</code> invocation for the server and there is a lot of state associated with that. For example: </p>\n<ul>\n<li>Whenever you select a file, the extension must decide which language client to use (the easiest example where this is necessary are multi-root projects, but it also plays a role in other contexts), which amounts to figuring out the correct folder containing a lean-toolchain that a file lives in. </li>\n<li>It also detects changes to the lean-toolchain file and offers to restart the server and the client if the version changed.</li>\n<li>The extension also has a compatibility mode so that it doesn't mess up when both vscode-lean and vscode-lean4 are active, which currently amounts to reading the lean-toolchain file.</li>\n</ul>",
        "id": 409578721,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1703249910
    },
    {
        "content": "<p>Theory vs. practice, as usual :-)</p>",
        "id": 409588777,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1703254259
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> Another relevant detail I remember when I was contributing some to the extension:   The extension assumes that the <code>lean</code>/<code>lake</code> binaries are organized into toolchains the way <code>elan</code>/<code>lean</code> does. That is, it expects a signle root toolchain foldr (e.g., <code>LEAN_SYSROOT</code>) to contain the both the <code>lean</code> and <code>lake</code> binaries by default (this helps ensure they come from the same toolchain version).</p>",
        "id": 409770155,
        "sender_full_name": "Mac Malone",
        "timestamp": 1703381608
    },
    {
        "content": "<p>Just to address the initial question -- I see this <em>occasionally</em> but not often. I can say the nvim plugin doesn't care how/where you got your lean from (I happen to have a nonconventional setup myself so I know it doesn't :), it should work just fine even without <code>elan</code> -- though yes you certainly should share that when asking questions).</p>",
        "id": 409774354,
        "sender_full_name": "Julian Berman",
        "timestamp": 1703385147
    },
    {
        "content": "<p>The one thing that comes to mind that I forget what VSCode does is <code>TextDocumentSyncKind.Incremental</code> for <code>textDocument/didChange</code> -- I think in neovim we have it on. Does VSCode have that enabled?</p>",
        "id": 409774586,
        "sender_full_name": "Julian Berman",
        "timestamp": 1703385361
    },
    {
        "content": "<p>Yes, VS Code has it enabled.</p>",
        "id": 411903307,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1704795485
    }
]