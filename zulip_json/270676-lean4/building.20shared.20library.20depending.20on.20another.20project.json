[
    {
        "content": "<p><strong>edit:</strong> For anyone from the future, working example project can be found at <a href=\"https://github.com/lecopivo/ReverseFFIwithMathlib\">https://github.com/lecopivo/ReverseFFIwithMathlib</a></p>\n<hr>\n<p>How do I build shared library that is depending on another project like std or mathlib? The issue I'm having is that the symbols from dependencies are not included in the created shared library. </p>\n<p>Here is an example:</p>\n<p><code>lakefile.lean</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lake</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lake</span> <span class=\"n\">DSL</span>\n\n<span class=\"n\">package</span> <span class=\"bp\">«</span><span class=\"n\">SharedLibTest</span><span class=\"bp\">»</span> <span class=\"n\">where</span>\n\n<span class=\"n\">lean_lib</span> <span class=\"bp\">«</span><span class=\"n\">SharedLibTest</span><span class=\"bp\">»</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">default_target</span><span class=\"kd\">]</span>\n<span class=\"n\">lean_lib</span> <span class=\"bp\">«</span><span class=\"n\">sharedlibtest</span><span class=\"bp\">»</span> <span class=\"n\">where</span>\n  <span class=\"n\">roots</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">SharedLibTest</span><span class=\"o\">]</span>\n  <span class=\"n\">defaultFacets</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">shared</span><span class=\"o\">]</span>\n\n<span class=\"n\">require</span> <span class=\"n\">std</span> <span class=\"k\">from</span> <span class=\"n\">git</span> <span class=\"s2\">\"https://github.com/leanprover/std4.git\"</span> <span class=\"bp\">@</span> <span class=\"s2\">\"main\"</span>\n</code></pre></div>\n<p>Main file <code>SharedLibTest.lean</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.RBMap.Basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">minNumber</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">USize</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">map</span> <span class=\"o\">:</span> <span class=\"n\">Std.RBSet</span> <span class=\"n\">USize</span> <span class=\"n\">compare</span> <span class=\"o\">:=</span> <span class=\"n\">Std.RBSet.ofList</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">z</span><span class=\"o\">]</span> <span class=\"n\">_</span>\n  <span class=\"n\">map.toList.head</span><span class=\"bp\">!</span>\n</code></pre></div>\n<p>running </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lake</span> <span class=\"n\">build</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">nm</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">libsharedlibtest.so</span>\n</code></pre></div>\n<p>produces</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>output</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\"><pre><span></span><code>                 w __cxa_finalize\n                 w __deregister_frame_info\n0000000000001e40 t __do_fini\n00000000000077b0 b __do_fini.__finalized\n0000000000001df0 t __do_init\n0000000000007768 b __do_init.__initialized\n0000000000007770 b __do_init.__object\n00000000000076d8 d __dso_handle\n00000000000064f0 d _DYNAMIC\n0000000000000b08 r __EH_FRAME_LIST__\n0000000000000b08 r __EH_FRAME_LIST_END__\n00000000000064e8 d __fini\n00000000000053d4 t _fini\n00000000000077c0 b _G_initialized\n00000000000076e0 d _GLOBAL_OFFSET_TABLE_\n                 w __gmon_start__\n00000000000064e0 d __init\n00000000000053b8 t _init\n                 U initialize_Init\n00000000000052d0 T initialize_SharedLibTest\n                 U initialize_Std_Data_RBMap_Basic\n                 U lean_alloc_small\n0000000000004e10 t lean_ctor_release\n0000000000001fd0 t lean_dec\n                 U lean_dec_ref_cold\n                 U lean_free_object\n0000000000001ff0 t lean_inc\n                 U lean_inc_ref_cold\n                 U lean_mark_persistent\n                 U l_instInhabitedUSize\n0000000000001eb0 T l_List_foldl___at_minNumber___spec__1\n0000000000004ea0 T l_List_foldl___at_minNumber___spec__1___at_minNumber___spec__2\n                 U l_List_head_x21___rarg\n0000000000005010 T l_minNumber\n0000000000005230 T l_minNumber___boxed\n00000000000077b8 B l_minNumber___boxed__const__1\n0000000000002010 T l_Std_RBNode_ins___at_minNumber___spec__4\n0000000000005170 T l_Std_RBNode_ins___at_minNumber___spec__4___boxed\n0000000000004e50 T l_Std_RBNode_insert___at_minNumber___spec__3\n00000000000051b0 T l_Std_RBNode_insert___at_minNumber___spec__3___boxed\n                 U l_Std_RBNode_insert___rarg\n                 U l_Std_RBNode_setBlack___rarg\n                 U l_Std_RBNode_toList___rarg\n                 w __register_frame_info\n</code></pre></div>\n</div></div>\n<p>See the last lines</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>                 <span class=\"n\">U</span> <span class=\"n\">l_Std_RBNode_insert___rarg</span>\n                 <span class=\"n\">U</span> <span class=\"n\">l_Std_RBNode_setBlack___rarg</span>\n                 <span class=\"n\">U</span> <span class=\"n\">l_Std_RBNode_toList___rarg</span>\n</code></pre></div>\n<p>indicates that functions <code>Std.RBNode.insert</code>, <code>Std.RBNode.setBlack</code> and <code>Std.RBNode.toList</code> are not included in the shared library.</p>\n<p>How do I make sure that all the functions from dependencies are included in the generated library? (I'm expecting this question is just for <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span>)</p>",
        "id": 423877648,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1709144838
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span> The shared libraries Lake builds for a Lean library only include the symbols of the library itself. Unfortunately, there is no way to build a \"fat\" shared library with Lake yet. You instead must also link the shared libraries of the dependencies as well as the library itself to whatever itt consuming this shared library.</p>",
        "id": 423878777,
        "sender_full_name": "Mac Malone",
        "timestamp": 1709145211
    },
    {
        "content": "<p>So in my project I should do <code>lake build Std:shared Mathlib:shared ...</code>, then hunt those libraries down somewhere in <code>.lake/...</code> and link it against the main shared library I want to use?</p>",
        "id": 423879250,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1709145386
    },
    {
        "content": "<p>This is of course unfortunate as I'm forced to build everything, not only the stuff I'm actually using.</p>",
        "id": 423879812,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1709145587
    },
    {
        "content": "<p>I think you can build just <code>+YourModule:dynlib</code> and it will build all the intermediate libraries?</p>",
        "id": 423885623,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709147593
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/building.20shared.20library.20depending.20on.20another.20project/near/423885623\">said</a>:</p>\n<blockquote>\n<p>I think you can build just <code>+YourModule:dynlib</code> and it will build all the intermediate libraries?</p>\n</blockquote>\n<p>I do not understand, do you mean <code>lake build +sharedlibtest:dynlib</code>? That does not work.</p>",
        "id": 423885908,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1709147719
    },
    {
        "content": "<p>I assume you had it as <code>SharedLibTest</code> not lowercase?</p>",
        "id": 423886120,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709147796
    },
    {
        "content": "<p>Ohh <code>lake build +SharedLibTest:dynlib</code> is doing something, let me investigate.</p>",
        "id": 423886258,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1709147870
    },
    {
        "content": "<p>Running <code>lake build +SharedLibTest:dynlib &amp;&amp; nm .lake/build/lib/libSharedLibTest-1.so</code> produces</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>output</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\"><pre><span></span><code>                 w __cxa_finalize\n                 w __deregister_frame_info\n00000000000021b0 t __do_fini\n0000000000007d70 b __do_fini.__finalized\n0000000000002160 t __do_init\n0000000000007d28 b __do_init.__initialized\n0000000000007d30 b __do_init.__object\n0000000000007c98 d __dso_handle\n00000000000068c0 d _DYNAMIC\n0000000000000e70 r __EH_FRAME_LIST__\n0000000000000e70 r __EH_FRAME_LIST_END__\n00000000000068b8 d __fini\n00000000000057a4 t _fini\n0000000000007d80 b _G_initialized\n0000000000007ca0 d _GLOBAL_OFFSET_TABLE_\n                 w __gmon_start__\n00000000000068b0 d __init\n0000000000005788 t _init\n                 U initialize_Init\n00000000000056a0 T initialize_SharedLibTest\n                 U initialize_Std_Data_RBMap_Basic\n                 U lean_alloc_small\n0000000000005180 t lean_ctor_release\n0000000000002340 t lean_dec\n                 U lean_dec_ref_cold\n                 U lean_free_object\n0000000000002360 t lean_inc\n                 U lean_inc_ref_cold\n                 U lean_mark_persistent\n                 U l_instInhabitedUSize\n0000000000002220 T l_List_foldl___at_minNumber___spec__1\n0000000000005210 T l_List_foldl___at_minNumber___spec__1___at_minNumber___spec__2\n                 U l_List_head_x21___rarg\n00000000000055e0 T l_minNumber___boxed\n0000000000007d78 B l_minNumber___boxed__const__1\n0000000000002380 T l_Std_RBNode_ins___at_minNumber___spec__4\n0000000000005520 T l_Std_RBNode_ins___at_minNumber___spec__4___boxed\n00000000000051c0 T l_Std_RBNode_insert___at_minNumber___spec__3\n0000000000005560 T l_Std_RBNode_insert___at_minNumber___spec__3___boxed\n                 U l_Std_RBNode_insert___rarg\n                 U l_Std_RBNode_setBlack___rarg\n                 U l_Std_RBNode_toList___rarg\n0000000000005380 T min_number\n                 w __register_frame_info\n</code></pre></div>\n</div></div>\n<p>In particular, the <code>Std.RBNode...</code> functions are not included</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>                 <span class=\"n\">U</span> <span class=\"n\">l_Std_RBNode_insert___rarg</span>\n                 <span class=\"n\">U</span> <span class=\"n\">l_Std_RBNode_setBlack___rarg</span>\n                 <span class=\"n\">U</span> <span class=\"n\">l_Std_RBNode_toList___rarg</span>\n</code></pre></div>",
        "id": 423886551,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1709148001
    },
    {
        "content": "<p>Ok I got it working when working with <code>std</code>. Now I'm struggling to get it working with <code>mathlib</code>. When compiling test c++ file using generated shared library I'm getting this error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">ld</span><span class=\"o\">:</span> <span class=\"bp\">~/</span><span class=\"n\">ReverseFFIWithMathlib</span><span class=\"bp\">/.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">importGraph</span><span class=\"bp\">/.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">//</span><span class=\"n\">libImportGraph.so</span><span class=\"o\">:</span> <span class=\"n\">undefined</span> <span class=\"n\">reference</span> <span class=\"n\">to</span> <span class=\"bp\">`</span><span class=\"n\">initialize_Lake_Load_Manifest'</span>\n<span class=\"bp\">/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">ld</span><span class=\"o\">:</span> <span class=\"bp\">~/</span><span class=\"n\">ReverseFFIWithMathlib</span><span class=\"bp\">/.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">importGraph</span><span class=\"bp\">/.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">//</span><span class=\"n\">libImportGraph.so</span><span class=\"o\">:</span> <span class=\"n\">undefined</span> <span class=\"n\">reference</span> <span class=\"n\">to</span> <span class=\"bp\">`</span><span class=\"n\">l_Lake_Manifest_load_x3f'</span>\n</code></pre></div>\n<p>where do I find <code>initialize_Lake_Load_Manifest</code> and <code>l_Lake_Manifest_load_x3f</code>?</p>",
        "id": 423894016,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1709150813
    },
    {
        "content": "<p>Yes, you still have to link all the transitive .so files</p>",
        "id": 423894086,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709150855
    },
    {
        "content": "<p>And I created example repo for any unfortunate soul doing this in the future<br>\n<a href=\"https://github.com/lecopivo/ReverseFFIwithMathlib\">https://github.com/lecopivo/ReverseFFIwithMathlib</a></p>",
        "id": 423894131,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1709150877
    },
    {
        "content": "<p>Oh those functions are in <code>libLake.a</code></p>",
        "id": 423894323,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1709150959
    },
    {
        "content": "<p>And adding <code>-lLake</code> flag in lakefile fixes this!</p>",
        "id": 423894465,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1709151013
    },
    {
        "content": "<p>It would be nice to have shared version of <code>libLake.a</code> as my shared library has <code>23kB</code> but because I have to link statically against <code>libLake.a</code> it balloons to <code>1.3MB</code>.</p>",
        "id": 423898255,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1709152549
    }
]