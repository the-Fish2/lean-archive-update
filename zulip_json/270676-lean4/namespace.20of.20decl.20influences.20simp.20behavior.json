[
    {
        "content": "<p>I find this crazy. <code>Hom.bar</code> is closed <code>by simp</code> but <code>bar</code> is not. They are same up to the name. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Quiver</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">Hom</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">10</span> <span class=\"s2\">\" ⟶ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Quiver.Hom</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Opposite</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">op</span> <span class=\"o\">::</span> <span class=\"n\">unop</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"n\">α</span> <span class=\"s2\">\"ᵒᵖ\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Opposite</span> <span class=\"n\">α</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Opposite</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Quiver</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">opposite</span> <span class=\"o\">{</span><span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Quiver</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Quiver</span> <span class=\"n\">V</span><span class=\"bp\">ᵒᵖ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">b</span> <span class=\"bp\">⟶</span>  <span class=\"n\">unop</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">⟩</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Hom.op</span> <span class=\"o\">{</span><span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Quiver</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">op</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">op</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">Opposite.op</span> <span class=\"n\">f</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Hom.unop</span> <span class=\"o\">{</span><span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Quiver</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">unop</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">unop</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">Opposite.unop</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Quiver.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Hom.op_unop</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f.unop.op</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Hom.bar</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span>  <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">bar</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 439862281,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1716311112
    },
    {
        "content": "<p>Should I not find this crazy?</p>",
        "id": 439862442,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1716311163
    },
    {
        "content": "<p>This is on commit <code>82401938</code> in core</p>",
        "id": 439862659,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1716311228
    },
    {
        "content": "<p>Ok. I guess <code>op</code> and <code>unop</code> are parsed as <code>Quiver.Hom.op</code> and <code>Quiver.Hom.unop</code> in <code>Hom.bar</code> despite what the hover tells me.</p>",
        "id": 439865099,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1716312052
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">opposite</span> <span class=\"o\">{</span><span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Quiver</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Quiver</span> <span class=\"n\">V</span><span class=\"bp\">ᵒᵖ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⟶</span>  <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>makes everything work</p>",
        "id": 439865444,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1716312185
    }
]