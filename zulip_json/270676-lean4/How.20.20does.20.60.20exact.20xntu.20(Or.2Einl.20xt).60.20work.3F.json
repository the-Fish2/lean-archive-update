[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">\\</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">∪</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">\\</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">\\</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">x</span> <span class=\"o\">⟨</span><span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">xntu</span><span class=\"o\">⟩</span>\n  <span class=\"c1\">-- xs: x ∈ s</span>\n  <span class=\"c1\">-- xntu: x ∉ t ∪ u</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"k\">show</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">\\</span> <span class=\"n\">t</span>\n    <span class=\"n\">use</span> <span class=\"n\">xs</span>\n    <span class=\"n\">intro</span> <span class=\"n\">xt</span>\n    <span class=\"c1\">-- xt: x ∈ t</span>\n    <span class=\"c1\">-- goal: False</span>\n    <span class=\"n\">exact</span> <span class=\"n\">xntu</span> <span class=\"o\">(</span><span class=\"n\">Or.inl</span> <span class=\"n\">xt</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"k\">show</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">u</span>\n    <span class=\"n\">intro</span> <span class=\"n\">xu</span>\n    <span class=\"n\">apply</span> <span class=\"n\">xntu</span> <span class=\"o\">(</span><span class=\"n\">Or.inr</span> <span class=\"n\">xu</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Could anybody teach me  that how <code> exact xntu (Or.inl xt)</code> works?</p>",
        "id": 417403062,
        "sender_full_name": "Hallon",
        "timestamp": 1706001902
    },
    {
        "content": "<p>Contradiction between <code>xntu</code> and <code>xt</code> is clear, but why write <code>Or.inr xt</code>?</p>",
        "id": 417403368,
        "sender_full_name": "Hallon",
        "timestamp": 1706002005
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">\\</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">∪</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">\\</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">\\</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">x</span> <span class=\"o\">⟨</span><span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">xntu</span><span class=\"o\">⟩</span>\n  <span class=\"c1\">-- xs: x ∈ s</span>\n  <span class=\"c1\">-- xntu: x ∉ t ∪ u</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"k\">show</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">\\</span> <span class=\"n\">t</span>\n    <span class=\"n\">use</span> <span class=\"n\">xs</span>\n    <span class=\"n\">intro</span> <span class=\"n\">xt</span>\n    <span class=\"c1\">-- xt: x ∈ t</span>\n    <span class=\"c1\">-- goal: False</span>\n    <span class=\"n\">apply</span> <span class=\"n\">xntu</span>\n    <span class=\"c1\">-- goal: x ∈ t ∪ u</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Set.mem_union</span><span class=\"o\">]</span> <span class=\"c1\">-- this happens to be true by definition, so lean will accept the proof without this line</span>\n    <span class=\"c1\">-- goal: x ∈ t ∨ x ∈ u</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Or.inl</span> <span class=\"c1\">-- or use tactic `left`</span>\n    <span class=\"c1\">-- goal: x ∈ t</span>\n    <span class=\"n\">exact</span> <span class=\"n\">xt</span>\n  <span class=\"bp\">·</span> <span class=\"k\">show</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">u</span>\n    <span class=\"n\">intro</span> <span class=\"n\">xu</span>\n    <span class=\"n\">apply</span> <span class=\"n\">xntu</span> <span class=\"o\">(</span><span class=\"n\">Or.inr</span> <span class=\"n\">xu</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Does this help?</p>",
        "id": 417403653,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706002084
    },
    {
        "content": "<p>OK, thanks very much. <span aria-label=\"kiss with blush\" class=\"emoji emoji-1f61a\" role=\"img\" title=\"kiss with blush\">:kiss_with_blush:</span></p>",
        "id": 417404125,
        "sender_full_name": "Hallon",
        "timestamp": 1706002245
    },
    {
        "content": "<p>The other important thing is that <code>Set.mem_union</code> is proved with <code>rfl</code>, which means that the <em>definition</em> of the union symbol is the output of the rewrite, so you can skip it if you're just making the term directly.</p>",
        "id": 417404335,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706002323
    },
    {
        "content": "<p>OK~</p>",
        "id": 417419182,
        "sender_full_name": "Hallon",
        "timestamp": 1706007114
    },
    {
        "content": "<p>I just generated an informal version of your first proof, in case seeing how it could be explained in english is illuminating.</p>\n<p><a href=\"/user_uploads/3121/ADD1u6dKgOPXu45IUkFfnPbC/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/ADD1u6dKgOPXu45IUkFfnPbC/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/ADD1u6dKgOPXu45IUkFfnPbC/image.png\"></a></div><p>In particular, <code>exact xntu (Or.inl xt)</code> gets turned into two claims, with the first claim explaining how <code>xntu</code> could be regarded as being something implying false.</p>",
        "id": 417421187,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1706007748
    },
    {
        "content": "<p>wow, it's very detailed. Thanks very much.</p>",
        "id": 417423041,
        "sender_full_name": "Hallon",
        "timestamp": 1706008338
    },
    {
        "content": "<p>A computer wrote this, not Kyle! Although Kyle was involved in writing the program which wrote the text in the image :-)</p>",
        "id": 417434701,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706012647
    }
]