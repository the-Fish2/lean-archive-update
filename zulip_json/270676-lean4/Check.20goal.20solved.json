[
    {
        "content": "<p>How does one check whether a given goal is solved after running a tactic?<br>\nIt seems that <code>getMainGoal</code> isn't the correct API for this. And also the goal's <code>MVarId</code> changes after running a tactic:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"simp'\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"before: {(← getMainGoal).name}\"</span>\n  <span class=\"n\">evalSimp</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"o\">)</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"after: {(← getMainGoal).name}\"</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"bp\">=</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp'</span>\n  <span class=\"c1\">-- before: _unique.1990</span>\n  <span class=\"c1\">-- no goals to be solved</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp'</span>\n  <span class=\"c1\">-- before: _unique.2015</span>\n  <span class=\"c1\">-- after: _unique.2062</span>\n</code></pre></div>",
        "id": 419027378,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1706703567
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"372804\">Marcus Rossel</span> has marked this topic as resolved.</p>",
        "id": 419028101,
        "sender_full_name": "Notification Bot",
        "timestamp": 1706703829
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"372804\">Marcus Rossel</span> has marked this topic as unresolved.</p>",
        "id": 419028107,
        "sender_full_name": "Notification Bot",
        "timestamp": 1706703834
    },
    {
        "content": "<p><code>getGoals</code> to get the list of remaining goals, then check whether this is empty.</p>",
        "id": 419077832,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1706718326
    },
    {
        "content": "<p>When a tactic is run on a goal (represented by an <code>MVarId</code>), it does not modify the goal. Rather, it 'solves' the goal (assigns the <code>MVarId</code>) and returns zero or more remaining goals (with different <code>MVarId</code>s).</p>",
        "id": 419078251,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1706718452
    },
    {
        "content": "<p>Thanks! From what I can tell that still means I need to do some additional checks when the tactic is run without focussing on a single goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"simp'\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"before: {(← getGoals).map MVarId.name}\"</span>\n  <span class=\"n\">evalSimp</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"o\">)</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"after: {(← getGoals).map MVarId.name}\"</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"bp\">=</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_cases</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp'</span>\n  <span class=\"c1\">-- before: [_uniq.2065]</span>\n  <span class=\"c1\">-- after: []</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"bp\">=</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_cases</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">simp'</span>\n  <span class=\"c1\">-- before: [_uniq.2065, _uniq.2080]</span>\n  <span class=\"c1\">-- after: [_uniq.2080]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_cases</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">simp'</span>\n  <span class=\"c1\">-- before: [_uniq.2405, _uniq.2420]</span>\n  <span class=\"c1\">-- after: [_uniq.2466, _uniq.2420]</span>\n</code></pre></div>",
        "id": 419084237,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1706720401
    },
    {
        "content": "<p>One thing that confused me, is that changing the goal from <code>a + 0 = ...</code> to <code>a = ...</code> <em>counts</em> as having solved a goal and replaced it with a new one.  In fact, it is not so easy to persistently maintain a notion of which new MVar is \"the old one\", unless you are careful about each step and you manage them yourself.</p>",
        "id": 419085230,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706720684
    },
    {
        "content": "<p>So, the outcome that you see now is what I've come to expect, but not what my initial intuition was.</p>",
        "id": 419085536,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706720777
    },
    {
        "content": "<p>E.g. <code>2466</code> is morally a witness that the goal has not been solved, but in reality the goal <code>2405</code>  was solved and \"out of nowhere\" <code>2466</code> appeared.</p>",
        "id": 419085949,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706720920
    },
    {
        "content": "<p>When you have multiple goals, you should indeed check whether all remaining goals were already present before you ran the tactic. Or you focus on the main goal only, i.e. <code>setGoals [mainGoal]</code> before executing your tactic. Or you drop down to the <code>MetaM</code> level, where each tactic has the form <code>MVarId /- old goal -/ -&gt; MetaM (List MVarId) /- new goals -/</code>.</p>",
        "id": 419087340,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1706721377
    },
    {
        "content": "<p>Or if you are using <code>MVarId.apply</code>, then you know that the list of goals that it returs is the list of \"children\" of your initial goal.  This is a very robust way of proceeding, while calling <code>evalSimp</code> (or something analogous) may mean that you lose control of what is going on.</p>",
        "id": 419088273,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706721703
    },
    {
        "content": "<p>I have the impression that the <code>tag</code> system is intended as a quick-and-dirty way of doing some of the bookkeeping, but it can get cumbersome quickly.</p>",
        "id": 419088634,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706721804
    },
    {
        "content": "<p>Afaik the tags are only visual aids for users. I wouldn't count on them being handled appropriately by all tactics (and it's not even clear what 'appropriately' means).</p>",
        "id": 419092827,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1706723162
    },
    {
        "content": "<p>I agree: propagating tactics is much more consistent in Lean 4 than it was in Lean 3, but still not very robust.</p>\n<p>However, for simple-minded implementations, I have manually set them to sort and retrieve side-goals: it was ok, but as soon as you have to do something a little involved, you are better off maintaining your own lists of <code>MVars</code>.</p>",
        "id": 419093330,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706723336
    },
    {
        "content": "<p>A goal is \"solved\" if when you instantiate its metavariables, then it contains no more metavariables. You can approximate this by keeping track of the goal state, but you can also calculate this yourself.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"simp'\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">Expr.mvar</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getMainGoal</span><span class=\"o\">)</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"before: {g}\"</span>\n  <span class=\"n\">evalTactic</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">focus</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"n\">g</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"after: {g}\"</span>\n  <span class=\"k\">if</span> <span class=\"n\">g.hasExprMVar</span> <span class=\"k\">then</span>\n    <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"not solved\"</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"solved\"</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"bp\">=</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp'</span>\n  <span class=\"c1\">-- before: ?m.2205</span>\n  <span class=\"c1\">-- after: of_eq_true (eq_self True)</span>\n  <span class=\"c1\">-- solved</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp'</span>\n  <span class=\"c1\">-- before: ?m.2287</span>\n  <span class=\"c1\">-- after: id ?m.2334</span>\n  <span class=\"c1\">-- not solved</span>\n</code></pre></div>\n<p>(I switched your code to use <code>evalTactic</code> and <code>focus</code> just to be sure the tactic is only applying to the top goal. That wasn't necessary for the experiment.)</p>",
        "id": 419094649,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1706723718
    },
    {
        "content": "<p>Well, that's one notion of \"solved\". Maybe it's better to keep track of the goal states after all, since there might be some metavariables in your goal that are from the other not-yet-solved-for goals, and you might consider that to be \"solved\".</p>",
        "id": 419095173,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1706723880
    },
    {
        "content": "<p>Thanks for the help! I ended up going for the simple approach of using <code>focus</code>, because that makes it simple to understand the output of <code>getGoals</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"simp'\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">focus</span> <span class=\"k\">do</span>\n    <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"before: {(← getGoals).map MVarId.name}\"</span>\n    <span class=\"n\">evalSimp</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"o\">)</span>\n    <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"after: {(← getGoals).map MVarId.name}\"</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"bp\">=</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_cases</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp'</span>\n  <span class=\"c1\">-- before: [_uniq.2065]</span>\n  <span class=\"c1\">-- after: []</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"bp\">=</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_cases</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">simp'</span>\n  <span class=\"c1\">-- before: [_uniq.2230]</span>\n  <span class=\"c1\">-- after: []</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_cases</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">simp'</span>\n  <span class=\"c1\">-- before: [_uniq.2405]</span>\n  <span class=\"c1\">-- after: [_uniq.2466]</span>\n</code></pre></div>",
        "id": 419229590,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1706788170
    },
    {
        "content": "<p>It may be that the first <code>do</code> is superfluous (untested).</p>",
        "id": 419255563,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706797107
    }
]