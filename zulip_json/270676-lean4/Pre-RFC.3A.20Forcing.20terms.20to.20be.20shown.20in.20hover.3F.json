[
    {
        "content": "<p>Usually when you hover over a term in code, it only shows the term explicitly if it’s a constant or otherwise pretty-prints to an “atomic format” (text wrapped in invisible formatting containers, like <code>group</code>). Otherwise it just shows the type.</p>\n<p>I’d like to be able to force an underlying term to be shown in cases where the term is not immediately visible.</p>\n<p>For example, in mathlib, the <code>tfae</code> tactics use syntax like <code>2 → 3</code> to specify which implication should be the next goal, with the number specifying the proposition in the overall <code>TFAE [P, Q, R, …]</code> goal. I’d like to attach the proposition as hover to the syntax (e.g. hovering on <code>3</code> would always yield <code>R : Prop</code>, whatever <code>R</code> was.)</p>",
        "id": 423191421,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1708796836
    },
    {
        "content": "<p>Before I make an actual RFC, though, I wanted to check that there wasn’t some way to do this that I’m missing; but I also didn’t want to clutter this stream with threads, so I figured this thread could be the zulip RFC in the case that there is no existing way (hence “pre-RFC”).</p>",
        "id": 423191434,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1708796855
    },
    {
        "content": "<p>It would be neat if you could see the elaborated expressions for larger terms somehow.</p>",
        "id": 423191556,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708796995
    },
    {
        "content": "<p>Here are some possible implementations, just to bring this request into feasibility:</p>\n<p>The simplest way to achieve this seems to be to add a field <code>showTerm : Bool</code> to <code>TermInfo</code>, with a default value of <code>false</code> (and associated changes to <code>addTermInfo</code> and <code>fmtTermAndModule?</code>).</p>\n<p>Another approach is to use special metadata attached to the expression, then check specifically for this metadata in <code>fmtTermAndModule?</code>. This might be more modular and accessible to meta programmers than a flag in <code>TermInfo</code>, but seems like it’s “in the wrong place” somehow to me. Having some kind of “more user facing” hook (whether simply a <code>show_term%</code> elaborator or actual metadata) seems useful either way, though.</p>\n<p>One way to possibly avoid a core change is modifying the expression (either with metadata if possible, or wrapping it in an application) and introducing a pretty-printer to force it to pretty-print to a plain string in <code>Format</code> (and thus be atomic). This feels like a hack to me, though; we’re exploiting <code>isAtomicFormat</code> in an unintended way.</p>",
        "id": 423192076,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1708797549
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/Pre-RFC.3A.20Forcing.20terms.20to.20be.20shown.20in.20hover.3F/near/423191556\">said</a>:</p>\n<blockquote>\n<p>It would be neat if you could see the elaborated expressions for larger terms somehow.</p>\n</blockquote>\n<p>In this vein, I was also thinking it might be nice to see the elaborated expressions for <code>_</code>’s on hover as well!</p>",
        "id": 423192356,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1708797814
    },
    {
        "content": "<p>Is this something that needs a flag in the terminfo? Or could this be on the UI side, where maybe there be a key you hold (like shift) that when you hover it shows the term?</p>",
        "id": 423192779,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708798187
    },
    {
        "content": "<p>I think technically this feature would need a flag, since it would be nice to have a way to say \"show the term on hover by default (i.e. without needing to press shift)\" even if holding shift showed the term.</p>",
        "id": 423204296,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1708809455
    },
    {
        "content": "<p>Ok, I see, you want an interface to programmatically set what you see when you hover over code. And for this, for your use case, it's enough to override the built-in logic for whether to pretty print the term.</p>",
        "id": 423206900,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708811901
    },
    {
        "content": "<p>Hmm, I guess that's one way of looking at it...but when elaborating syntax to terms, you still do want to consider this to be term info, not merely an arbitrary hover. The thing is that currently a heuristic is used to determine whether to show the underlying term on something, and I'm saying it would be nice to specifically be able to override that heuristic. I feel like displaying terms in hover is a specific task, and simply providing an arbitrary hover whenever we needed to override the heuristic would be \"too general\".</p>",
        "id": 423207456,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1708812395
    },
    {
        "content": "<p>And moreover I imagine that being able to arbitrarily set the hover would, while useful in some circumstances, be quite a big change! This would be a relatively small change.</p>",
        "id": 423207509,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1708812449
    },
    {
        "content": "<p>(Note that I didn't say anything about arbitrarily setting the hover -- but whatever the case, you're wanting to programmatically control what you see when you hover. That's to say why my suggestion to let it just be a UI issue is not enough for your intended use case.)</p>",
        "id": 423207754,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708812610
    },
    {
        "content": "<p>Ah, I misinterpreted \"programmatically\" as meaning essentially \"by an arbitrary program\", sorry.</p>",
        "id": 423207798,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1708812663
    },
    {
        "content": "<p>So, in that case, yes! Your interpretation of what I want is correct. :)</p>",
        "id": 423207888,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1708812730
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> <a href=\"#narrow/stream/270676-lean4/topic/Pre-RFC.3A.20Forcing.20terms.20to.20be.20shown.20in.20hover.3F/near/423192356\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/Pre-RFC.3A.20Forcing.20terms.20to.20be.20shown.20in.20hover.3F/near/423191556\">said</a>:</p>\n<blockquote>\n<p>It would be neat if you could see the elaborated expressions for larger terms somehow.</p>\n</blockquote>\n<p>In this vein, I was also thinking it might be nice to see the elaborated expressions for <code>_</code>’s on hover as well!</p>\n</blockquote>\n<p>I definitely want this</p>",
        "id": 423210235,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1708814977
    },
    {
        "content": "<p>Is this enough support to start an RFC on the lean4 repo? (Simply in the interest of not letting things languish, I'll assume it is and start one soon by default—but if anyone would like to tell me otherwise before I do, I'll refrain from doing so.) :)</p>",
        "id": 423477721,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1708979195
    }
]