[
    {
        "content": "<p>There seems to have been some change in what the directory is in which lake dependencies are executed: I have a package <code>A</code> which provides a command that involves loading and reading a file via</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">elabThatCommand</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">filePath</span> <span class=\"o\">:</span> <span class=\"n\">System.FilePath</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">⟩</span>\n  <span class=\"k\">let</span> <span class=\"n\">foo</span> <span class=\"bp\">←</span> <span class=\"n\">IO.FS.readFile</span> <span class=\"n\">filePath</span>\n  <span class=\"bp\">...</span>\n</code></pre></div>\n<p>Now theres a package <code>B</code> that uses that command with a file that lies in the root dir of <code>B</code> and I give the path relativ to <code>B</code>'s root dir. That works fine whenever I open <code>B</code> in VSCode or when I build <code>B</code>. But when I try to add <code>B</code> as a dependency to a package <code>C</code>, the build process of <code>C</code> cannot built <code>B</code> anymore because it can't find the file, apparently because it runs the <code>IO.FS.readFile</code> from <code>C</code>'s root dir and not <code>B</code>s. Has that changed? How can I make that more robust?</p>",
        "id": 410041740,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1703606221
    },
    {
        "content": "<p>/cc <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span></p>",
        "id": 410042987,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1703606836
    },
    {
        "content": "<p>mathlib uses <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Mathlib.getMathlibDir#doc\">docs#Mathlib.getMathlibDir</a> for this</p>",
        "id": 410044523,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703607853
    },
    {
        "content": "<p>Which in turn seems to be using <code>initSrcSearchPath</code> to go off of... Ideally I'd want the snippet above to work with both absolute and relative paths and I don't have that name of the package <code>B</code> at compile time of package <code>A</code> and neither do I want the user to need to specify which package it calls <code>elabThatCommand</code> from <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>",
        "id": 410045634,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1703608584
    },
    {
        "content": "<p>Shouldn't <code>B</code> be able to provide its path or otherwise identify itself to <code>elabThatCommand</code>? There are various ways you can make this less onerous by making <code>elabThatCommand</code> a macro or elab and gather some compile time info about the elaborating environment that way</p>",
        "id": 410046485,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703609259
    },
    {
        "content": "<p>basically, don't assume you know what the CWD is</p>",
        "id": 410046585,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703609315
    },
    {
        "content": "<p>use other methods to locate files you want to load at runtime</p>",
        "id": 410046614,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703609344
    },
    {
        "content": "<p>It's just a bit annoying that this worked fine up to Lean 4.1 and now it doesn't...</p>",
        "id": 410051726,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1703613097
    },
    {
        "content": "<p>I don't know of any reason this would be different on older versions of lake, this has always been the case with lake AFAIK</p>",
        "id": 410051878,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703613233
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Root.20directory.20for.20lake.20packages.3F/near/410046485\">said</a>:</p>\n<blockquote>\n<p>Shouldn't <code>B</code> be able to provide its path or otherwise identify itself to <code>elabThatCommand</code>? There are various ways you can make this less onerous by making <code>elabThatCommand</code> a macro or elab and gather some compile time info about the elaborating environment that way</p>\n</blockquote>\n<p>How so? I still don't really get how I get the package root dir of the caller, be it in <code>IO</code> or in <code>ElabCommandM</code></p>",
        "id": 410051901,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1703613242
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Root.20directory.20for.20lake.20packages.3F/near/410051878\">said</a>:</p>\n<blockquote>\n<p>I don't know of any reason this would be different on older versions of lake, this has always been the case with lake AFAIK</p>\n</blockquote>\n<p>Well the dir just was the package root, maybe it changed when the location was was moved from <code>lake-packages</code> to <code>.lake/package</code>?</p>",
        "id": 410051967,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1703613295
    },
    {
        "content": "<p>You can look in the <code>LEAN_SRC_PATH</code> for your file</p>",
        "id": 410052680,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703613758
    },
    {
        "content": "<p>That seems like it could introduce unnecessary ambiguities?</p>",
        "id": 410053205,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1703614102
    },
    {
        "content": "<p>I can't imagine this is a rare case? Don't more lake packages store and read non-lean files in their own repo?</p>",
        "id": 410054863,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1703615526
    },
    {
        "content": "<p>And it's a bit weird that <code>lake build</code> in <code>C</code>'s root dir fails while <code>cd .lake/packages/B &amp;&amp; lake build</code> works</p>",
        "id": 410055213,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1703615816
    },
    {
        "content": "<p>It's not particularly ambiguous if you look for the <code>foo.txt</code> file adjacent to the <code>B.lean</code> file because there can only be one <code>B.lean</code> file in the lean path</p>",
        "id": 410055671,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703616162
    },
    {
        "content": "<p>But more generally, the fact that lake doesn't provide enough elaboration-time information to the lean files it builds is a long standing open problem</p>",
        "id": 410055720,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703616230
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110789\">Jakob von Raumer</span> <a href=\"#narrow/stream/270676-lean4/topic/Root.20directory.20for.20lake.20packages.3F/near/410055213\">said</a>:</p>\n<blockquote>\n<p>And it's a bit weird that <code>lake build</code> in <code>C</code>'s root dir fails while <code>cd .lake/packages/B &amp;&amp; lake build</code> works</p>\n</blockquote>\n<p>Lean files can do arbitrary things and depend on arbitrary state so it's not that weird that this can happen if you don't use approved mechanisms to do file resolution. The problem is that there aren't really any approved mechanisms for this right now so you have to make do with the information that is available</p>",
        "id": 410055867,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703616344
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110789\">Jakob von Raumer</span> <a href=\"#narrow/stream/270676-lean4/topic/Root.20directory.20for.20lake.20packages.3F/near/410054863\">said</a>:</p>\n<blockquote>\n<p>I can't imagine this is a rare case? Don't more lake packages store and read non-lean files in their own repo?</p>\n</blockquote>\n<p>If you want to do file resolution the same way as lean files, that means you should use the <code>LEAN_SRC_PATH</code></p>",
        "id": 410056073,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703616502
    },
    {
        "content": "<p>Okay, maybe I'm misunderstanding the <code>LEAN_SRC_PATH</code> solution. How do I make sure I get the <code>foo.txt</code> adjacent to <code>B.lean</code>?</p>",
        "id": 410056231,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1703616669
    },
    {
        "content": "<p>Loop through the directories in <code>LEAN_SRC_PATH</code> looking for <code>$DIR/Path/To/B.lean</code> where <code>Path.To.B</code> is the current module name, and when you find it you use either <code>$DIR/foo.txt</code> or <code>$DIR/Path/To/foo.txt</code> depending on how you want the file to be located</p>",
        "id": 410056372,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703616825
    },
    {
        "content": "<blockquote>\n<p>current module name</p>\n</blockquote>\n<p>Current in the sense of the location of the command when in <code>CommandElabM</code>? How do I get that?</p>",
        "id": 410056503,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1703616942
    },
    {
        "content": "<p>it should be in the CommandElabM state</p>",
        "id": 410056522,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703616955
    },
    {
        "content": "<p>It's in the <code>Environment.Header</code> I think</p>",
        "id": 410056573,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703616976
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.EnvironmentHeader.mainModule#doc\">docs#Lean.EnvironmentHeader.mainModule</a></p>",
        "id": 410056589,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703617006
    },
    {
        "content": "<p>Are you sure that doesn't resolve to, in my case, <code>C</code>? It being the \"module being compiled\"... I'll try</p>",
        "id": 410056687,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1703617083
    },
    {
        "content": "<p>The \"module being compiled\" is the file in which we are currently running commands and such</p>",
        "id": 410056748,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703617125
    },
    {
        "content": "<p>Ah nvm, yea, the module should be the right one</p>",
        "id": 410056749,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1703617126
    },
    {
        "content": "<p>How do I normalize a file path like <code>foo/../bar</code> to <code>bar</code>?</p>",
        "id": 410188253,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1703702113
    },
    {
        "content": "<p>You can use <code>IO.FS.realPath</code> but this resolves to an absolute path</p>",
        "id": 410188669,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703702374
    },
    {
        "content": "<p>For future reference: This solved it for me</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Convert a file path to one that's relative to the location of the module containing the</span>\n<span class=\"sd\">command that's elaborated. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">toCallerRelativeFilePath</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">System.FilePath</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CommandElabM</span> <span class=\"n\">System.FilePath</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">modToFilePath</span> <span class=\"s2\">\".\"</span> <span class=\"o\">((</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">header.mainModule</span><span class=\"o\">)</span> <span class=\"s2\">\"lean\"</span>\n  <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x.parent</span>\n    <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"Current lean file does not have a parent directory!\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"bp\">←</span> <span class=\"n\">realPathNormalized</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">p</span>\n  <span class=\"n\">return</span> <span class=\"n\">y.toString</span>\n</code></pre></div>",
        "id": 410819866,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1704188764
    },
    {
        "content": "<p>I think you want to wrap the first two lines in an <code>elab</code> so that you can capture the location of the file that wrote the syntax</p>",
        "id": 410820322,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704188984
    },
    {
        "content": "<p>if it's just a regular function then it will not capture the caller context</p>",
        "id": 410820427,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704189012
    },
    {
        "content": "<p>well, maybe you want the rest of it to be part of the elab as well, if the file path in question is compile-time known</p>",
        "id": 410820522,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704189059
    },
    {
        "content": "<p>That will make it similar to the <code>include_str</code> macro</p>",
        "id": 410820599,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704189096
    },
    {
        "content": "<p>the implementation of which is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">builtin_term_elab</span> <span class=\"n\">includeStr</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">elabIncludeStr</span> <span class=\"o\">:</span> <span class=\"n\">TermElab</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">include_str</span> <span class=\"bp\">$</span><span class=\"n\">path</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">),</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">path</span> <span class=\"bp\">←</span> <span class=\"n\">evalFilePath</span> <span class=\"n\">path</span>\n    <span class=\"k\">let</span> <span class=\"n\">ctx</span> <span class=\"bp\">←</span> <span class=\"n\">readThe</span> <span class=\"n\">Lean.Core.Context</span>\n    <span class=\"k\">let</span> <span class=\"n\">srcPath</span> <span class=\"o\">:=</span> <span class=\"n\">System.FilePath.mk</span> <span class=\"n\">ctx.fileName</span>\n    <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">srcDir</span> <span class=\"o\">:=</span> <span class=\"n\">srcPath.parent</span>\n      <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"cannot compute parent directory of '{srcPath}'\"</span>\n    <span class=\"k\">let</span> <span class=\"n\">path</span> <span class=\"o\">:=</span> <span class=\"n\">srcDir</span> <span class=\"bp\">/</span> <span class=\"n\">path</span>\n    <span class=\"n\">mkStrLit</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">IO.FS.readFile</span> <span class=\"n\">path</span>\n</code></pre></div>",
        "id": 410820827,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704189201
    },
    {
        "content": "<p>apparently <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Core.Context.fileName#doc\">docs#Lean.Core.Context.fileName</a> exists, and is better suited to your use case than <code>Environment.header.mainModule</code></p>",
        "id": 410821138,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704189361
    },
    {
        "content": "<p>If you want to keep the .oleans machine-independent, it's probably better to capture only the module name at compile time</p>",
        "id": 410822062,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1704189725
    },
    {
        "content": "<p>from what I can tell of the original use case the purpose is not to capture the path itself but to read the file at that path and do something with the result, in which case OS dependence of the path syntax shouldn't matter</p>",
        "id": 410824115,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704190723
    },
    {
        "content": "<p>Uh yea, this is not about reading (o)lean files</p>",
        "id": 410829402,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1704193389
    },
    {
        "content": "<p>No, Sebastian's point is that if you capture the current file name at compile time then you will end up baking that string into the compilation results for that file, which makes the build result non-portable</p>",
        "id": 410829616,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704193471
    },
    {
        "content": "<p>e.g. you should not put this in a lean file:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"path%\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">return</span> <span class=\"n\">Lean.mkStrLit</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">readThe</span> <span class=\"n\">Lean.Core.Context</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fileName</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"n\">path</span><span class=\"bp\">%</span>\n</code></pre></div>\n<p>because the olean file you get out is effectively the same as if you had written</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"s2\">\"/home/mario/lean/test/Test.lean\"</span>\n</code></pre></div>\n<p>which contains an absolute path in it. If something like this was in mathlib then we would end up shipping a declaration referencing some path like <code>/home/github-runner/Test.lean</code> which doesn't exist on user machines</p>",
        "id": 410830341,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704193823
    },
    {
        "content": "<p>I have a hard time wrapping my head around what exactly you mean by compile time. I think I don't need an <code>elab</code> around because I use it in the elaboration of a command in the same package anyway, so the context is handed on. Or do you mean at the compile time of the package that calls it?</p>",
        "id": 410830436,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1704193885
    },
    {
        "content": "<p>You described a setup with three packages <code>A</code> (which provides the command), <code>B</code> (which uses the command and whose path we want to capture), and <code>C</code> (which calls <code>B</code> as a library and needs it to be able to reference its own files)</p>",
        "id": 410830619,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704193969
    },
    {
        "content": "<p>And you mean <code>B</code>'s compilation?</p>",
        "id": 410830694,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1704194007
    },
    {
        "content": "<p>While compiling the end user package <code>C</code>, we will first compile <code>B</code>, and <code>B</code> contains a usage of an <code>elab</code> whose definition is in <code>A</code></p>",
        "id": 410830738,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704194036
    },
    {
        "content": "<p>So in my example <code>A</code> would be the one containing the <code>elab \"path%\"</code> declaration and <code>B</code> is the one with <code>def foo := path%</code></p>",
        "id": 410830824,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704194068
    },
    {
        "content": "<p>and <code>C</code> is using <code>foo</code> in some way</p>",
        "id": 410830840,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704194078
    },
    {
        "content": "<p>The code defined in <code>A</code> is run while compiling <code>B</code>, because it is an <code>elab</code>. If it was a regular function, used in <code>B</code>, then it would only be referenced, not run, while compiling <code>B</code>, and depending on how it is used in <code>C</code> it would either be run there at compile time, or at run time if <code>C</code> is an executable</p>",
        "id": 410831107,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704194208
    },
    {
        "content": "<p>Ah, hm, the current way has the advantage that I don't need to change <code>B</code> at all and I don't require the maintainer of <code>B</code> to use some new syntax to refer to files...</p>",
        "id": 410831153,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1704194230
    },
    {
        "content": "<p>run time meaning that you run <code>lake exe C</code></p>",
        "id": 410831154,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704194230
    },
    {
        "content": "<p>I think you should show what the code of <code>B</code> and <code>C</code> look like here</p>",
        "id": 410831192,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704194256
    },
    {
        "content": "<p>because there are a few ways you could be making use of this definition. The function <code>toCallerRelativeFilePath</code> is \"<code>A</code> code\", it doesn't actually do anything on its own</p>",
        "id": 410831321,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704194306
    },
    {
        "content": "<p><code>B</code> just contains a line like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">A</span>\n\n<span class=\"n\">my_load_file</span> <span class=\"s2\">\"foo.txt\"</span>\n</code></pre></div>",
        "id": 410831415,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1704194369
    },
    {
        "content": "<p>okay so <code>my_load_file</code> is the elab I'm talking about</p>",
        "id": 410831439,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704194385
    },
    {
        "content": "<p>I presume that this is also defined in <code>A</code></p>",
        "id": 410831455,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704194397
    },
    {
        "content": "<p>Yes, that's why I said above I don't need to wrapt in my specific case</p>",
        "id": 410831523,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1704194424
    },
    {
        "content": "<p>I would drop the \"Caller\" part of the function name, it's not capturing any caller context, it is just using the current environment</p>",
        "id": 410831593,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704194464
    },
    {
        "content": "<p>Q: have you just reinvented <code>include_str</code>?</p>",
        "id": 410831664,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704194507
    },
    {
        "content": "<p>I'm still think that <code>include_str</code> is doing exactly what you want, there are not any concerns of olean path dependence if you are reading the file (instead of storing its path) and processing the result in some way</p>",
        "id": 410831936,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704194659
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">processStr</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Elab.Command.CommandElabM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"my_load_file\"</span> <span class=\"n\">path</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">str</span> <span class=\"bp\">←</span> <span class=\"n\">Elab.Command.liftTermElabM</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">path</span> <span class=\"bp\">←</span> <span class=\"n\">unsafe</span> <span class=\"n\">Elab.Term.evalTerm</span> <span class=\"n\">FilePath</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">``</span><span class=\"n\">FilePath</span> <span class=\"o\">[])</span> <span class=\"n\">path</span>\n    <span class=\"k\">let</span> <span class=\"n\">srcPath</span> <span class=\"o\">:=</span> <span class=\"n\">System.FilePath.mk</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">readThe</span> <span class=\"n\">Core.Context</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fileName</span>\n    <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">srcDir</span> <span class=\"o\">:=</span> <span class=\"n\">srcPath.parent</span>\n      <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"cannot compute parent directory of '{srcPath}'\"</span>\n    <span class=\"n\">IO.FS.readFile</span> <span class=\"o\">(</span><span class=\"n\">srcDir</span> <span class=\"bp\">/</span> <span class=\"n\">path</span><span class=\"o\">)</span>\n  <span class=\"n\">processStr</span> <span class=\"n\">str</span>\n\n<span class=\"c1\">-- B.lean</span>\n<span class=\"n\">my_load_file</span> <span class=\"s2\">\"foo.txt\"</span>\n</code></pre></div>",
        "id": 410832565,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704195011
    },
    {
        "content": "<p>Indeed, I didn't know <code>include_str</code> exsisted, I never came across it somehow <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 410832620,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1704195049
    },
    {
        "content": "<p>Note that at the start of this thread I wanted the path to be relative to the <em>package</em> root, but then found the solution to be too unwieldy to justify not just having it relative to the file where the command is called.</p>",
        "id": 410832771,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1704195131
    },
    {
        "content": "<p>Thanks a lot!</p>",
        "id": 410832913,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1704195231
    }
]