[
    {
        "content": "<p>I am trying to implement an analogue of Coq's <code>now</code> in Lean<br>\nIt should look somewhat like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"now \"</span> <span class=\"n\">tacticSeq</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">now</span> <span class=\"bp\">$</span><span class=\"n\">ts</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">solve</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">ts</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The problem with it is that if put my cursor right after <code>intros</code> here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">now</span> <span class=\"n\">intro</span>\n</code></pre></div>\n<p>I will see the goal obtained after running <code>intro</code> but not <code>now intro</code>. Could someone tell me how can I change this behaviour? If my cursor is in the end of the line, I want to make Lean show the goal obtained after running the whole <code>now tac</code> (<code>No goals</code>in this case)</p>",
        "id": 422428719,
        "sender_full_name": "Vladimir Gladstein",
        "timestamp": 1708439401
    },
    {
        "content": "<p>What does <code>now</code> do?</p>",
        "id": 422773718,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1708592571
    },
    {
        "content": "<p>What syntax do you have in mind if the inner tactic isn’t a single word? What should</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">now</span> <span class=\"n\">tac1</span> <span class=\"bp\">;</span> <span class=\"n\">tac2</span>\n</code></pre></div>\n<p>mean?</p>",
        "id": 422816257,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1708608499
    },
    {
        "content": "<p>Is this close enough to what you want?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"now \"</span> <span class=\"n\">tactic</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">now</span> <span class=\"bp\">$</span><span class=\"n\">ts</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">solve</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">ts</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">now</span> <span class=\"n\">intro</span><span class=\"bp\">;</span> <span class=\"c1\">-- shows \"No goals\"</span>\n</code></pre></div>\n<p>(I made <code>now</code> eat a single tactic, and then used <code>;</code> to indicate that the tactic ends.</p>",
        "id": 422842728,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1708616103
    },
    {
        "content": "<p>For the original tacticSeq version, I tried making sure the tactic info at the end of the line represents the result of running <code>simp</code>, but it seems the info at <code>intro</code> overrides it.</p>\n<p>In any case, it might make sense to have the current behavior. It lets you see what the tactic did before the suite of \"it's obvious\" goals runs, and the fact that there's no red underline under <code>now</code> means it succeeded. At least when you go to the next line you see \"no goals\".</p>\n<p>By the way, it might be more lean-like to have it be <code>now =&gt;</code>. You can also use <code>next =&gt;</code> rather than <code>solve |</code>, which sets up a feature where if the tactic fails the tactic script can still continue (but it inserts a <code>sorry</code> into the proof).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"now\"</span> <span class=\"n\">arr</span><span class=\"o\">:</span><span class=\"s2\">\" =&gt; \"</span> <span class=\"n\">tac</span><span class=\"o\">:</span><span class=\"n\">tacticSeq</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">next</span> <span class=\"bp\">=&gt;%$</span><span class=\"n\">arr</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">tac</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(This <code>arr</code> token is supposed to set up some special highlighting on error, in case <code>simp</code> doesn't close the goal. It doesn't quite work because <code>next</code> has a bug, but if you switch it to <code>case _ =&gt;%$arr</code> you can see.)</p>",
        "id": 422877210,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708625834
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/270676-lean4/topic/Showing.20correct.20goal/near/422773718\">said</a>:</p>\n<blockquote>\n<p>What does <code>now</code> do?</p>\n</blockquote>\n<p>It tries to solve the goal with a given tactic + some automation and fails if the goal is not solved</p>",
        "id": 422952692,
        "sender_full_name": "Vladimir Gladstein",
        "timestamp": 1708666015
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/270676-lean4/topic/Showing.20correct.20goal/near/422816257\">said</a>:</p>\n<blockquote>\n<p>What syntax do you have in mind if the inner tactic isn’t a single word? What should</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">now</span> <span class=\"n\">tac1</span> <span class=\"bp\">;</span> <span class=\"n\">tac2</span>\n</code></pre></div>\n<p>mean?</p>\n</blockquote>\n<p>Well, it should run <code>tac1; tac2</code> first and then <code>simp</code> + <code>solve</code>. Which make sense, I want to put <code>now</code> to have the least precedence.  At least that is how it works in Coq</p>",
        "id": 422953147,
        "sender_full_name": "Vladimir Gladstein",
        "timestamp": 1708666401
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/270676-lean4/topic/Showing.20correct.20goal/near/422842728\">said</a>:</p>\n<blockquote>\n<p>Is this close enough to what you want?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"now \"</span> <span class=\"n\">tactic</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">now</span> <span class=\"bp\">$</span><span class=\"n\">ts</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">solve</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">ts</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">now</span> <span class=\"n\">intro</span><span class=\"bp\">;</span> <span class=\"c1\">-- shows \"No goals\"</span>\n</code></pre></div>\n<p>(I made <code>now</code> eat a single tactic, and then used <code>;</code> to indicate that the tactic ends.</p>\n</blockquote>\n<p>Yeah, I think that works, thanks!</p>",
        "id": 422953927,
        "sender_full_name": "Vladimir Gladstein",
        "timestamp": 1708667072
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/Showing.20correct.20goal/near/422877210\">said</a>:</p>\n<blockquote>\n<p>For the original tacticSeq version, I tried making sure the tactic info at the end of the line represents the result of running <code>simp</code>, but it seems the info at <code>intro</code> overrides it.</p>\n<p>In any case, it might make sense to have the current behavior. It lets you see what the tactic did before the suite of \"it's obvious\" goals runs, and the fact that there's no red underline under <code>now</code> means it succeeded. At least when you go to the next line you see \"no goals\".</p>\n<p>By the way, it might be more lean-like to have it be <code>now =&gt;</code>. You can also use <code>next =&gt;</code> rather than <code>solve |</code>, which sets up a feature where if the tactic fails the tactic script can still continue (but it inserts a <code>sorry</code> into the proof).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"now\"</span> <span class=\"n\">arr</span><span class=\"o\">:</span><span class=\"s2\">\" =&gt; \"</span> <span class=\"n\">tac</span><span class=\"o\">:</span><span class=\"n\">tacticSeq</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">next</span> <span class=\"bp\">=&gt;%$</span><span class=\"n\">arr</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">tac</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(This <code>arr</code> token is supposed to set up some special highlighting on error, in case <code>simp</code> doesn't close the goal. It doesn't quite work because <code>next</code> has a bug, but if you switch it to <code>case _ =&gt;%$arr</code> you can see.)</p>\n</blockquote>\n<p>Ah I see, yeah the syntax with <code>=&gt;</code> seems more lean idiomatic</p>",
        "id": 422954087,
        "sender_full_name": "Vladimir Gladstein",
        "timestamp": 1708667220
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"690517\">Vladimir Gladstein</span> has marked this topic as resolved.</p>",
        "id": 423323168,
        "sender_full_name": "Notification Bot",
        "timestamp": 1708923071
    }
]