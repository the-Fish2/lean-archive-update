[
    {
        "content": "<p>I noticed that <code>hash (e : Expr)</code> conflates <code>.lam</code> and <code>.forallE</code>, but <code>e₁ == e₂</code> doesn’t.</p>\n<p>I bring this up because <code>HashMap</code> relies on <code>BEq</code> and <code>Hashable</code>, but I’m not sure if this is actually of any consequence. After all, a lambda with exactly the arguments as a forallE is not impossible, but not very common; plus, the <code>HashMap</code> operations seem to behave alright with respect to collisions.</p>\n<p>Just curious, is there any specific reason we want to consider lambdas and foralls the same when hashing?</p>",
        "id": 436790246,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1714691148
    },
    {
        "content": "<p>I’m surprised that the hash doesn’t mix the name of the constructor. Is this the case for automatically derived instances for other inductive types?</p>",
        "id": 436791245,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1714691824
    },
    {
        "content": "<p>This is of course the right way around; as long as <code>a == b -&gt; hash a = hash b</code>, then everything is lawful :)</p>",
        "id": 436791532,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714692053
    },
    {
        "content": "<p><code>deriving Hashable</code> seems to have issues as well, but not quite the same:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span>\n  <span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Hashable</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">hash</span> <span class=\"o\">(</span><span class=\"n\">Foo.a</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"c1\">-- 3866779316627607737</span>\n<span class=\"k\">#eval</span> <span class=\"n\">hash</span> <span class=\"o\">(</span><span class=\"n\">Foo.b</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"c1\">-- 7999773623304365860</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Bar</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Bar</span>\n  <span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Bar</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Hashable</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">hash</span> <span class=\"o\">(</span><span class=\"n\">Bar.a</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"c1\">-- 3866779316627607737</span>\n<span class=\"k\">#eval</span> <span class=\"n\">hash</span> <span class=\"o\">(</span><span class=\"n\">Bar.b</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"c1\">-- 7999773623304365860</span>\n</code></pre></div>",
        "id": 436791744,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1714692222
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> Hashes don't need to be globally uniquish, just uniquish within the same type. The use case is being able to do a quick check to avoid doing a more expensive <code>==</code> check.</p>",
        "id": 436792609,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714692806
    },
    {
        "content": "<p>Yeah I understand.</p>",
        "id": 436792695,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1714692863
    },
    {
        "content": "<p>I just found it surprising that the name of the type seems to have no bearing on the hash.</p>",
        "id": 436792757,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1714692935
    },
    {
        "content": "<p>The name of the type doesn't matter though, for the use case</p>",
        "id": 436792910,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714693038
    },
    {
        "content": "<p>Presumably the idea being that if you really did have a mixture of multiple types, you'd wrap them in a <code>Sum</code> type and could then use the hash of its constructor indices anyway.</p>",
        "id": 436793221,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714693245
    },
    {
        "content": "<p>It seems that the index of the constructor is what's used, not the name, FWIW.</p>",
        "id": 436793280,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1714693296
    },
    {
        "content": "<p>Oh yeah, I just saw that sneaky work \"indices\" in Eric's message :)</p>",
        "id": 436793374,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1714693345
    },
    {
        "content": "<p>Anyway, this is irrelevant to the original question concerning <code>Expr</code>.</p>",
        "id": 436793518,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1714693445
    },
    {
        "content": "<p>Just to check, indeed there is a collision in something reasonable: a motive and the type of a recursor.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"k\">in</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"#hashes \"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Command.runTermElabM</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">Term.elabTermAndSynthesize</span> <span class=\"n\">t</span> <span class=\"n\">none</span>\n  <span class=\"n\">e.forEach</span> <span class=\"k\">fun</span> <span class=\"n\">node</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{hash node}: {node}\"</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.funBinderTypes</span> <span class=\"n\">true</span>\n<span class=\"bp\">#</span><span class=\"n\">hashes</span> <span class=\"n\">id</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Bool.recOn</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"n\">true</span> <span class=\"n\">false</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">2384416661: id fun (b : Bool) ↦ Bool.recOn b true false</span>\n<span class=\"cm\">2927525288: id</span>\n<span class=\"cm\">1812194161: @id</span>\n<span class=\"cm\">3551570259: Bool → Bool</span>\n<span class=\"cm\">183048209: Bool</span>\n<span class=\"cm\">2428420263: fun (b : Bool) ↦ Bool.recOn b true false</span>\n<span class=\"cm\">2175286235: Bool.recOn #0 true false</span>\n<span class=\"cm\">4279372883: Bool.recOn #0 true</span>\n<span class=\"cm\">1771607792: Bool.recOn #0</span>\n<span class=\"cm\">1088603745: Bool.recOn</span>\n<span class=\"cm\">149233892: @Bool.recOn</span>\n<span class=\"cm\">3551570259: fun (x : Bool) ↦ Bool</span>\n<span class=\"cm\">351589370: #0</span>\n<span class=\"cm\">3057640288: true</span>\n<span class=\"cm\">1995999671: false</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>Notice <code>3551570259</code> for both <code>fun (x : Bool) ↦ Bool</code> and <code>Bool → Bool</code></p>",
        "id": 436794747,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714694256
    },
    {
        "content": "<p>Created an issue: <a href=\"https://github.com/leanprover/lean4/pull/4060\">lean4#4060</a></p>",
        "id": 436855109,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714731510
    }
]