[
    {
        "content": "<p>I see in some places in the code <code>@&amp;</code> in a type annotation, for instance in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.log2#doc\">docs#Nat.log2</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.gcd#doc\">docs#Nat.gcd</a>. What does it mean?</p>",
        "id": 448397959,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1719856149
    },
    {
        "content": "<p>They are ref count borrowing annotations, usually they are inferred by the compiler but for external functions the tags need to be provided explicitly. The tags instruct the compiler to not increment the ref count before sending a value to the function but instead assume that the function will not free the value.</p>",
        "id": 448398260,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1719856245
    },
    {
        "content": "<p>I think that description might be misunderstood. Normally, the semantics are that ownership of a value is transferred in a function call, but <code>@&amp;</code> indicates that the ownership is borrowed instead.</p>\n<p>Normally, if a value is used after the function returns, then the compiler inserts a ref count increase before the call, but if it is not used, it's not inserted. (The function is responsible for a ref count decrement for that argument.)</p>\n<p>When <code>@&amp;</code> is used, then instead it's sort of dualized. If a value is <em>not</em> used after the function returns, the compiler inserts a ref count decrement after the call, but if it is used it's not inserted. (The function is not responsible for a ref count decrement for that argument.)</p>\n<p>(I think I got this right, correct me if I'm wrong.)</p>",
        "id": 448399092,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1719856542
    },
    {
        "content": "<p>Any change you could take over <a href=\"https://github.com/leanprover/lean4/pull/4305\">lean4#4305</a> for me, Kyle?</p>",
        "id": 448434599,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719866636
    }
]