[
    {
        "content": "<p>I have minimized my problem into the following, where I get a very short and not very insightful \"invalid pattern ?m.1234 u\" error.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Ty</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span>\n<span class=\"bp\">|</span> <span class=\"k\">Pi</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Ty</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Ty</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Tm</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"n\">Tm</span> <span class=\"o\">(</span><span class=\"n\">Ty.Pi</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Tm</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Tm</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span> <span class=\"c1\">-- invalid pattern ?m.1234 0`</span>\n</code></pre></div>\n<p>And with the following, slightly less minimal example, I get \"dependent elimination failed\"</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Same Ty</span>\n\n<span class=\"sd\">/-- Typed terms. -/</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Tm</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"sd\">/-- A term `t` can have function type `Nat -&gt; A`, then `t arg` has type `A arg`. -/</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">:</span>\n  <span class=\"n\">Tm</span> <span class=\"o\">(</span><span class=\"n\">Ty.Pi</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"c1\">-- Given \"‚ä¢ t : (u : Nat) -&gt; A u\"</span>\n  <span class=\"o\">(</span><span class=\"n\">arg</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"c1\">-- Given \"arg : Nat\"</span>\n  <span class=\"n\">Tm</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">arg</span><span class=\"o\">)</span> <span class=\"c1\">-- Conclude \"‚ä¢ t arg : A arg\"</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Tm</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">t</span> <span class=\"n\">u</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span> <span class=\"c1\">-- here</span>\n</code></pre></div>\n<p>Gives the error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">dependent</span> <span class=\"n\">elimination</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">when</span> <span class=\"n\">solving</span> <span class=\"n\">alternative</span> <span class=\"k\">with</span> <span class=\"n\">type</span>\n  <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"n\">Tm.app</span> <span class=\"n\">_uniq.45254</span> <span class=\"n\">arg</span><span class=\"bp\">‚úù</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">expected</span>\n  <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"n\">Tm.app</span> <span class=\"n\">a</span><span class=\"bp\">‚úù</span> <span class=\"n\">arg</span><span class=\"bp\">‚úù</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I have been staring at these errors and have no clue how to start debugging them, other than maybe try finding a manual invocation of <code>Tm.rec</code> with my own motive.</p>\n<p>For some context, <code>foo</code> is supposed to be <a href=\"https://bitbucket.org/javra/inductive-families/src/717f404c220e17d0ac5917306fd74dd0c4883cde/agda/IFA.agda#lines-16:19\">this</a>.</p>",
        "id": 410842823,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1704200605
    },
    {
        "content": "<p>you need to move the <code>{A : Ty}</code> into the pattern match</p>",
        "id": 410843782,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704201039
    },
    {
        "content": "<p>oh no, you need <code>Tm.app</code> instead of <code>.app</code> in the first example</p>",
        "id": 410844021,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704201190
    },
    {
        "content": "<p>Oh! huh</p>",
        "id": 410844060,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1704201219
    },
    {
        "content": "<p>adding <code>.app (A := A)</code> fixes both examples</p>",
        "id": 410844222,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704201287
    },
    {
        "content": "<p>...that also solves my non-minimized problem. I actually genuinely have no idea why the <code>.app (A := A) t u</code> works, whereas <code>Tm.app _ _ A t u</code> does not. I thought those would desugar to the same.</p>",
        "id": 410844495,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1704201472
    },
    {
        "content": "<p>Did you forget a <code>@</code>?</p>",
        "id": 410844618,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704201527
    },
    {
        "content": "<p><code>@Tm.app A t u</code> works on the (second) minimized example</p>",
        "id": 410844635,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704201541
    },
    {
        "content": "<p>Yes sorry I forgot to write the <code>@</code> in chat here.</p>",
        "id": 410844673,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1704201566
    },
    {
        "content": "<p>(I assume the <code>_ _</code> are additional parameters not in the MWE?)</p>",
        "id": 410844693,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704201577
    },
    {
        "content": "<p>Yeah my original problem has more implicit parameters, hence the <code>_</code>.</p>",
        "id": 410844785,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1704201610
    },
    {
        "content": "<p>but moving the <code>{A : Ty}</code> into the match can also help, like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">}</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Tm</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">Tm.app</span> <span class=\"n\">A</span> <span class=\"n\">t</span> <span class=\"n\">u</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span> <span class=\"c1\">-- here</span>\n</code></pre></div>",
        "id": 410844794,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704201614
    },
    {
        "content": "<p>lean will sometimes infer that it needs to do this but it's not 100%</p>",
        "id": 410844825,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704201632
    },
    {
        "content": "<p>whenever you are pattern matching an inductive family, you always need to pattern match the indices at the same time</p>",
        "id": 410844879,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704201665
    },
    {
        "content": "<p>and you shouldn't provide a value either, or it can mess things up. There is only one thing you can put there and it is an \"inaccessible pattern\" <code>.(_)</code>. In theory you should be able to put the type there as in <code>.(A u)</code>, but inaccessible patterns are used so rarely that support for them seems to be broken</p>",
        "id": 410845314,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704201868
    },
    {
        "content": "<p>Nevermind, the original problem also works by doing <code>| _, @Tm.app _ _ A t u =&gt; ...</code>. I think my thinko was that I was trying to do something like <code>| SPi _, Tm.app t u =&gt; ...</code> instead and that doesn't really make sense.</p>",
        "id": 410845360,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1704201895
    },
    {
        "content": "<p>I can't do <code>| .(A u), ...</code> since the <code>u</code> is bound only on the second parameter.</p>",
        "id": 410845551,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1704201985
    },
    {
        "content": "<p>I know, the syntax is weird</p>",
        "id": 410845590,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704202004
    },
    {
        "content": "<p>an inaccessible pattern is not really a pattern</p>",
        "id": 410845605,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704202012
    },
    {
        "content": "<p>it's more like a type ascription</p>",
        "id": 410845617,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704202019
    },
    {
        "content": "<p>and it can use pattern variables in later arguments (actually it pretty much has to)</p>",
        "id": 410845653,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704202037
    },
    {
        "content": "<p>Oh! That's really weird</p>",
        "id": 410845682,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1704202054
    },
    {
        "content": "<p>But <code>_</code> also works as an inaccessible pattern and that's the most commonly used method</p>",
        "id": 410845768,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704202090
    },
    {
        "content": "<p>Yeah, if it works. If not then it might still be useful to know how inaccessible patterns work for debugging purposes. But now I at least have a starting point for the next time I encounter a problem like this. You helped greatly, thank you :).</p>",
        "id": 410845856,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1704202156
    },
    {
        "content": "<p>in particular, variables used in an inaccessible pattern are not introduced like regular pattern variables, they are references to existing variables</p>",
        "id": 410845873,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704202169
    },
    {
        "content": "<p>You might need to consult lean 3 to find out how they work because I suspect they are untested in lean 4</p>",
        "id": 410845903,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704202194
    },
    {
        "content": "<p>I now have stumbled upon a related problem. Here is a MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Ty</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span>\n<span class=\"bp\">|</span> <span class=\"k\">Pi</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Ty</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Ty</span>\n\n<span class=\"sd\">/-- Typed terms. -/</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Tm</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"sd\">/-- A term `t` can have function type `Nat -&gt; A`, then `t arg` has type `A arg`. -/</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Ty</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">Tm</span> <span class=\"o\">(</span><span class=\"n\">Ty.Pi</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"c1\">-- Given \"‚ä¢ t : (u : Nat) -&gt; A u\"</span>\n  <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"c1\">-- Given \"u : Nat\"</span>\n  <span class=\"n\">Tm</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"c1\">-- Conclude \"t u : A u\"</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">TyA</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">String</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">}</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">TyA</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Tm</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span>\n<span class=\"c1\">--| _, _, @Tm.app A t u =&gt; 0 -- works but useless</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">Tm.app</span> <span class=\"n\">A</span> <span class=\"n\">t</span> <span class=\"n\">u</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span> <span class=\"c1\">-- Problem here, see below for error</span>\n</code></pre></div>\n<p>The error I get on the last line is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">Tm.app</span> <span class=\"n\">t</span> <span class=\"n\">u</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Tm</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">Tm</span> <span class=\"bp\">?</span><span class=\"n\">m.45216</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>From what I've gathered above, I should be able to write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">u</span><span class=\"o\">),</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">Tm.app</span> <span class=\"n\">A</span> <span class=\"n\">t</span> <span class=\"n\">u</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>to justify this, but that just leads to another error. From what I can tell, the root problem is that <code>@Tm.app A t u : Tm (A u)</code>, but the <code>A u</code> is being a pain. I wish I could simply name <code>B := A u</code> and then only use <code>B</code> instead, but that leads to even more errors.</p>",
        "id": 419854503,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1707144109
    },
    {
        "content": "<p>So far I've found that it has something to do with not unfolding <code>TyA</code>?<br>\nThis works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">}</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Tm</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">Tm.app</span> <span class=\"n\">A</span> <span class=\"n\">t</span> <span class=\"n\">u</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>(Or just <code>(a : String)</code>.)</p>",
        "id": 419924471,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1707165623
    },
    {
        "content": "<p>My guess is that it works because the type of <code>a</code> no longer depends on <code>A</code> by unfolding <code>TyA</code>. Unfortunately in my original problem <code>TyA</code> is recursive and type of <code>a</code> actually needs to depend on <code>A</code>.</p>",
        "id": 419942569,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1707173362
    },
    {
        "content": "<p>I am still stuck at this problem. Maybe a mod can move this thread (or the messages since feb5) to general? I am not sure what the difference is between general and lean4 actually.</p>",
        "id": 421008545,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1707737095
    },
    {
        "content": "<p>if you replace <code>a</code> with a wild card, it seems to get unified correctly, and the variable even appears in the context (if you use <code>by</code>). While this is an ugly workaround, I believe doing something like this might solve your problem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">}</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">TyA</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Tm</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">Tm.app</span> <span class=\"n\">A</span> <span class=\"n\">t</span> <span class=\"n\">u</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rename_i</span> <span class=\"n\">a</span>\n <span class=\"c1\">--a : TyA (A u)</span>\n</code></pre></div>",
        "id": 421087717,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1707758631
    },
    {
        "content": "<p>Okay <code>rename_i</code> seems to work as a workaround! I haven't checked whether I can do what I want to do this way yet, but it looks promising! Thank you so much for getting me un-stuck. This sounds like something I should post as an issue. I don't know what causes this issue, and I don't have time to investigate. Should I just post the same MWE as an issue on github? Any other investigating I should do before I put it on github?</p>",
        "id": 421110504,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1707765518
    },
    {
        "content": "<p>There's a few related paper cuts in this thread if you scroll up, I could include them in the issue. I'm not sure whether they're the same underlying issue though. And that has been scaring me away from actually putting an issue on github. Feels like I should investigate on my own, but I never have time for that :P.</p>",
        "id": 421110799,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1707765628
    },
    {
        "content": "<p>Here is another workaround:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Ty</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span>\n<span class=\"bp\">|</span> <span class=\"k\">Pi</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Ty</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Ty</span>\n\n<span class=\"sd\">/-- Typed terms. -/</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Tm</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"sd\">/-- A term `t` can have function type `Nat -&gt; A`, then `t arg` has type `A arg`. -/</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Ty</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">Tm</span> <span class=\"o\">(</span><span class=\"n\">Ty.Pi</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"c1\">-- Given \"‚ä¢ t : (u : Nat) -&gt; A u\"</span>\n  <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"c1\">-- Given \"u : Nat\"</span>\n  <span class=\"o\">(</span><span class=\"n\">A_u</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span>\n  <span class=\"o\">(</span><span class=\"n\">h_A_u</span> <span class=\"o\">:</span> <span class=\"n\">A_u</span> <span class=\"bp\">=</span> <span class=\"n\">A</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span>\n  <span class=\"n\">Tm</span> <span class=\"n\">A_u</span> <span class=\"c1\">-- Conclude \"t u : A u\"</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">TyA</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">String</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">}</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">TyA</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Tm</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">Tm.app</span> <span class=\"n\">A</span> <span class=\"n\">t</span> <span class=\"n\">u</span> <span class=\"n\">_</span> <span class=\"n\">h_A_u</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n  <span class=\"n\">subst</span> <span class=\"n\">h_A_u</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>There is a general piece of advice to avoid function applications in index position when defining an inductive type. I don't know if that's what's causing the problems here, but it seems like it might be. You can read more about this advice in <a href=\"#narrow/stream/270676-lean4/topic/Behaviour.20of.20.60cases.60.20depends.20on.20type.20constructor.20args'.20order/near/400733695\">an old Zulip thread</a></p>",
        "id": 421115203,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1707767308
    }
]