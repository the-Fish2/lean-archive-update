[
    {
        "content": "<p>I am building with </p>\n<p>mkdir -p bld<br>\ncd bld<br>\ncmake -D CMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ ../lean4/<br>\nmake</p>\n<p>and ending up with</p>\n<p>[ 81%] Linking CXX static library libleanrt_initial-exec.a<br>\n[ 81%] Built target leanrt_initial-exec<br>\n[ 81%] Built target Init_shared<br>\n[    ] Building /home/lean/lean4/bld/stage0/lib/lean/libleanshared.so<br>\n/usr/bin/ld: /home/lean/lean4/bld/stage0/lib/lean/libLean.a: member /home/lean/lean4/bld/stage0/lib/lean/libLean.a(FunInd.o) in archive is not an object<br>\ncollect2: error: ldreturned 1 exit status<br>\nmake[6]: *** [/home/lean/lean4/bld/stage0/stdlib.make:67: /home/lean/lean4/bld/stage0/lib/lean/libleanshared.so] Error 1<br>\nmake[5]: *** [CMakeFiles/leanshared.dir/build.make:70: CMakeFiles/leanshared] Error 2<br>\nmake[4]: *** [CMakeFiles/Makefile2:1079: CMakeFiles/leanshared.dir/all] Error 2<br>\nmake[3]: *** [Makefile:146: all] Error 2<br>\nmake[2]: *** [CMakeFiles/stage0.dir/build.make:86: stage0-prefix/src/stage0-stamp/stage0-build] Error 2<br>\nmake[1]: *** [CMakeFiles/Makefile2:91: CMakeFiles/stage0.dir/all] Error 2<br>\nmake: *** [Makefile:136: all] Error 2</p>",
        "id": 436589480,
        "sender_full_name": "Heime",
        "timestamp": 1714606127
    },
    {
        "content": "<p>Have you tried with the recommended built steps?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">git</span> <span class=\"n\">clone</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span> <span class=\"c1\">--recurse-submodules</span>\n<span class=\"n\">cd</span> <span class=\"n\">lean4</span>\n<span class=\"n\">mkdir</span> <span class=\"bp\">-</span><span class=\"n\">p</span> <span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span>\n<span class=\"n\">cd</span> <span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span>\n<span class=\"n\">cmake</span> <span class=\"bp\">../..</span>\n<span class=\"n\">make</span>\n</code></pre></div>\n<p>Please do this <em>first</em>, and confirm you can successfully do this on your system, before asking questions about alternative ways to build.</p>",
        "id": 436590194,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714606547
    },
    {
        "content": "<p>The system requirements for these steps are described at <a href=\"https://lean-lang.org/lean4/doc/make/index.html\">https://lean-lang.org/lean4/doc/make/index.html</a>.</p>",
        "id": 436590281,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714606576
    },
    {
        "content": "<p>It is strange for one to get the source code  from github, and then having to do a git clone anyway.  It completed stage1 and built the target stage1.  Then what ?</p>",
        "id": 436601523,
        "sender_full_name": "Heime",
        "timestamp": 1714614749
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/xECgx_tmF-X1Xfr4MLKNkK8r/DA099CB6-EFDF-486A-9824-0521C6DA3764.jpg\">DA099CB6-EFDF-486A-9824-0521C6DA3764.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/xECgx_tmF-X1Xfr4MLKNkK8r/DA099CB6-EFDF-486A-9824-0521C6DA3764.jpg\" title=\"DA099CB6-EFDF-486A-9824-0521C6DA3764.jpg\"><img src=\"/user_uploads/3121/xECgx_tmF-X1Xfr4MLKNkK8r/DA099CB6-EFDF-486A-9824-0521C6DA3764.jpg\"></a></div><p><a href=\"https://lean-lang.org/lean4/doc/dev/index.html#dev-setup-using-elan\">https://lean-lang.org/lean4/doc/dev/index.html#dev-setup-using-elan</a></p>",
        "id": 436602530,
        "sender_full_name": "Utensil Song",
        "timestamp": 1714615450
    },
    {
        "content": "<p>I do not understand what the procedure is from the link provided.</p>",
        "id": 436603286,
        "sender_full_name": "Heime",
        "timestamp": 1714615933
    },
    {
        "content": "<p>elan is for conveniently switching between lean versions. The procedure essentially installs elan, then link lean to your built lean. These Internet-depending Web-first binary-trusting steps are for the convenience of general users. They can also be easily converted to local-only plain-text self-build-as-much-as-possible steps by an experienced developer who had fought with building different building styles of software. Then for usage in a space station, everything can be packed, including all dependencies. But it's probably a different distribution to maintain.</p>",
        "id": 436603947,
        "sender_full_name": "Utensil Song",
        "timestamp": 1714616448
    },
    {
        "content": "<p>I am trying to install and use the version currently on github.  What would be the commands left to do?</p>",
        "id": 436604297,
        "sender_full_name": "Heime",
        "timestamp": 1714616639
    },
    {
        "content": "<p>Those steps on the dev setup page in the screenshot and the link I posted. 3 commands.</p>",
        "id": 436604762,
        "sender_full_name": "Utensil Song",
        "timestamp": 1714616889
    },
    {
        "content": "<p>Have followed the instructions on <a href=\"https://lean-lang.org/lean4/doc/make/index.html\">https://lean-lang.org/lean4/doc/make/index.html</a></p>\n<p>Then I install elan. But what is this stage thing and what to do exactly.  The wording is not clear.</p>",
        "id": 436605212,
        "sender_full_name": "Heime",
        "timestamp": 1714617202
    },
    {
        "content": "<p>Explained here: <a href=\"#narrow/stream/270676-lean4/topic/Build.20instructions.20refer.20to.20website/near/43657078\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Build.20instructions.20refer.20to.20website/near/43657078</a></p>",
        "id": 436605424,
        "sender_full_name": "Utensil Song",
        "timestamp": 1714617364
    },
    {
        "content": "<p>After doing \"make\", what have I achieved ?</p>",
        "id": 436606199,
        "sender_full_name": "Heime",
        "timestamp": 1714617873
    },
    {
        "content": "<p>Congratulations, you have built both stage0 lean and stage1 lean, the latter can be used as the working lean, by linking it to elan.</p>",
        "id": 436606551,
        "sender_full_name": "Utensil Song",
        "timestamp": 1714618173
    },
    {
        "content": "<p>There is also stage2 and stage3. What are those ?</p>",
        "id": 436606750,
        "sender_full_name": "Heime",
        "timestamp": 1714618301
    },
    {
        "content": "<p>So first I get the source code from github, then again a new git clone.  But then, instead of downloading those, one uses the Lean version manager elan instead.  Did Tolkien work on this idea ???</p>",
        "id": 436607268,
        "sender_full_name": "Heime",
        "timestamp": 1714618653
    },
    {
        "content": "<p>I assumed it was sufficiently obvious that there is no need to make a second clone.</p>",
        "id": 436607368,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714618724
    },
    {
        "content": "<p>Perhaps, but not from reading the material.  It is very confusing.  It is not clear whether one needs the git version because of the --recurse-submodules option.</p>",
        "id": 436607805,
        "sender_full_name": "Heime",
        "timestamp": 1714619038
    },
    {
        "content": "<p>For users who can't figure out how to handle git submodules themselves, it's safer to use just this one step to get the git repo and all submodules. Or there could be a million ways to go wrong with local setup and painful to debug remotely from Zulip.</p>",
        "id": 436608053,
        "sender_full_name": "Utensil Song",
        "timestamp": 1714619193
    },
    {
        "content": "<p>Anyway, after the make command. it does not seem that elan should be used.  Downloading directly the code from github,  is that same as git clone with --recurse-submodules ?</p>",
        "id": 436608474,
        "sender_full_name": "Heime",
        "timestamp": 1714619511
    },
    {
        "content": "<p>Not the same.</p>",
        "id": 436608557,
        "sender_full_name": "Utensil Song",
        "timestamp": 1714619550
    },
    {
        "content": "<p>The doc explained why it's not preferred to use make install as other projects, because usually one works with multiple Lean projects with multiple Lean versions.</p>",
        "id": 436608620,
        "sender_full_name": "Utensil Song",
        "timestamp": 1714619617
    },
    {
        "content": "<p>My humble suggestion is to learn things with an open mind like an empty cup. Follow things as they are, gradually figure why and how to improve. Admittedly the manual is not big-blue-button clear about everything, but what's stopping the learning in these chats is a priori knowledge about how things should be, but this is a diverse world.</p>",
        "id": 436609015,
        "sender_full_name": "Utensil Song",
        "timestamp": 1714619922
    },
    {
        "content": "<p>That is what I am saying - not the same.  One can still produce the target in some local tree though.</p>",
        "id": 436609027,
        "sender_full_name": "Heime",
        "timestamp": 1714619939
    },
    {
        "content": "<p>Some considered my comments  harsh, but they may have some validity.  Would it not be easier if this a-priori knowledge is written down though ?</p>",
        "id": 436609597,
        "sender_full_name": "Heime",
        "timestamp": 1714620359
    },
    {
        "content": "<p>Or is it only me who is asking these questions ?</p>",
        "id": 436609791,
        "sender_full_name": "Heime",
        "timestamp": 1714620484
    },
    {
        "content": "<p>By a priori knowledge I'm refering to what's already in one's mind before learning a new thing. And it's stopping the learning in my metaphor, not the other way around.</p>",
        "id": 436609867,
        "sender_full_name": "Utensil Song",
        "timestamp": 1714620547
    },
    {
        "content": "<p>After invoking \"make\", how can one test an example proof ?</p>",
        "id": 436610790,
        "sender_full_name": "Heime",
        "timestamp": 1714621173
    },
    {
        "content": "<p>After finishing elan steps, you may go back to README and find related information about how to use Lean for proofs. Or maybe you prefer to read the next chapter testing: <a href=\"https://lean-lang.org/lean4/doc/dev/testing.html\">https://lean-lang.org/lean4/doc/dev/testing.html</a> but that's for verifying that you haven't broken Lean after modifying its source. These are different levels of the game.</p>",
        "id": 436611436,
        "sender_full_name": "Utensil Song",
        "timestamp": 1714621632
    },
    {
        "content": "<p>After invoking make, one should have the target.  How can a version manager be important at this stage ?  The way I see things, one makes a target and runs a test on it.  Absolutely no need for any version manager.</p>",
        "id": 436611768,
        "sender_full_name": "Heime",
        "timestamp": 1714621916
    },
    {
        "content": "<p>It's not mandatory. make install , make test work as expected. It's just more productive to use elan. Lake, lean's make, will communicate with elan, the version manager, to handle the hassles for users. These building blocks of lean is part of lean, they are an ecosystem to work together to support small to large-scale lean projects. I'm sure the space station has many components, it's also not a monolithic architecture.</p>",
        "id": 436612823,
        "sender_full_name": "Utensil Song",
        "timestamp": 1714622600
    },
    {
        "content": "<p>There is no need to ever use <code>make install</code> and I recommend against it</p>",
        "id": 436615142,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714624511
    },
    {
        "content": "<p>Believe it or not <code>elan</code> is useful even for development inside the lean repo because there are several versions of lean inside the repo if you follow the instructions: the most relevant versions are <code>lean4/build/release/stage0</code> and <code>lean4/build/release/stage1</code>. You should use the former to compile the sources in <code>src/</code> and the latter to compile the tests</p>",
        "id": 436615267,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714624598
    },
    {
        "content": "<p><code>make test</code> will automatically use the appropriate version of lean for the tests, but you will want to use the <code>stage1</code> build when compiling tests manually or when using your development build on projects elsewhere on your file system</p>",
        "id": 436615358,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714624682
    },
    {
        "content": "<p>Yes, the above is merely explaining the way Heime expects does exist, but not optimal for using Lean.</p>",
        "id": 436615404,
        "sender_full_name": "Utensil Song",
        "timestamp": 1714624695
    },
    {
        "content": "<p>You should use the elan commands</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elan</span> <span class=\"n\">toolchain</span> <span class=\"n\">link</span> <span class=\"n\">lean4</span> <span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">/</span><span class=\"n\">stage1</span>\n<span class=\"n\">elan</span> <span class=\"n\">toolchain</span> <span class=\"n\">link</span> <span class=\"n\">lean4</span><span class=\"bp\">-</span><span class=\"n\">stage0</span> <span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">/</span><span class=\"n\">stage0</span>\n</code></pre></div>\n<p>described in <a href=\"https://lean-lang.org/lean4/doc/dev/index.html#dev-setup-using-elan\">https://lean-lang.org/lean4/doc/dev/index.html#dev-setup-using-elan</a> to set up links to the stage0 and stage1 compilers, and then you can use <code>lean +lean4 ...</code> to use the stage1 compiler anywhere</p>",
        "id": 436615532,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714624806
    },
    {
        "content": "<p>Just for completeness: most of the time <code>stage1</code> will compile <code>src/</code> to identical C sources as <code>stage0</code> would, so <code>stage2</code> will end up binary-identical with <code>stage1</code> and so the process converges. Rarely, there are some changes that require multiple stage0-update's to get to a fixpoint, but the master branch will normally not have such sources.</p>",
        "id": 436615710,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714624964
    },
    {
        "content": "<p>The approach constitutes total madness.</p>",
        "id": 436648320,
        "sender_full_name": "Heime",
        "timestamp": 1714640683
    },
    {
        "content": "<p>This project is failing miserably.</p>",
        "id": 436649219,
        "sender_full_name": "Heime",
        "timestamp": 1714640994
    },
    {
        "content": "<p>It's clear now that Heime expects a traditional self-contained tar ball+plain text README/INSTALL+\"make;make test;make install\" experience for new users of a software, without the need of technical sophistication, not that worrying about binary security or bootstraping. But Lean uses other mechanisms to make new users feel at home, leaving building from source to people interested in Lean internals or Lean developers, assuming some technical sophistication. That's where the frustration comes from, expressed in inappropriate language.</p>",
        "id": 436652820,
        "sender_full_name": "Utensil Song",
        "timestamp": 1714642269
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"714044\">@Heime</span> this is my last message to you.</p>\n<p>You seem to be failing miserably at understanding the goals of the developers and users of Lean 4. That is something most decent developers wouldn't get wrong.</p>\n<p>How can this project be failing at all if it has drawn the attention of so many mathematicians, including one of the greatest mathematicians alive today?</p>\n<p>What you seek here is <em>not that important</em> for the vast majority of the users, by a large margin. And when something is not important, it won't be prioritized. People building space stations know this better than anyone.</p>\n<p>If you're willing to help improve the experience of hundred/thousands of users by doing Lean 4 development, then you will need to do the steps you're trying to follow. And even then, following those steps is not rocket science (to your disappointment).</p>\n<p>I've been in the software engineering industry for about 20 years. And to this day, when I <em>have to</em> build anything before I am able to use it, it's rather frustrating. Even when things go smoothly, I feel like I waste computer cycles and, more importantly, my own cycles - because someday I will die and I am pretty sure I won't be thinking \"ah, I should have built more software on my own\" in my deathbed.</p>\n<p>People have different parameters. Yours are <em>yours</em> and unless you are paying for a service I don't think you have the right to demand anything. You can ask questions and, if people want to answer you, they will. But you can't demand answers either.</p>\n<p>Honestly, I am humbled by seeing this community willing to help you even after so much insulting. It's evidence that this project is succeeding gracefully.</p>",
        "id": 436657065,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1714643721
    },
    {
        "content": "<p>I don't know the inner workings of Lean or GCC, but I've built GCC myself a few times. The default configuration for a native build of GCC is to perform a 3-stage bootstrap of the compiler when <code>make</code>  is invoked. This includes building three times the target tools for use by the compiler. See <a href=\"https://gcc.gnu.org/install/build.html\">https://gcc.gnu.org/install/build.html</a>.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"714044\">Heime</span> <a href=\"#narrow/stream/270676-lean4/topic/Building.20problem.20with.20not.20an.20object/near/436648320\">said</a>:</p>\n<blockquote>\n<p>The approach constitutes total madness.</p>\n</blockquote>\n<p>So, I'm okay with having multiple stages of a compiler.</p>",
        "id": 436657673,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1714643945
    },
    {
        "content": "<p>Yes, I am fine with having multiple stages of a compiler.</p>",
        "id": 436664490,
        "sender_full_name": "Heime",
        "timestamp": 1714646624
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span>  What I am asking is not that complicated. I should be able to get clear answers, rather than more sophistication.  The current intention is to provide an additional way.  Perhaps not a sophisticated way as you say.   I do not trust anybody's word, whether that is the greatest mathematician alive today or 3000 years ago.  You have made something convenient to use.  But can one trust it.  In its current state, the answer is no.  That is all.  But then, as is customary, I see the peer pressure cropping out of the woodwork.  Perelman was correct all along.  for his disagreement with the organized mathematical community.</p>",
        "id": 436666874,
        "sender_full_name": "Heime",
        "timestamp": 1714647469
    },
    {
        "content": "<p>Breaking my own word because I think this is important to get through and because I have my reasons to believe you're not just a troll: distrust does not justify the choice of words you often make.</p>\n<p>One can strive for a trustless (and yet robust) setup while also being respectful. If that's really important for you and you want to help, you will have to get involved in the project and develop a good relationship with the maintainers. You will need to make sure that your plans won't interfere negatively with their daily activities (they build Lean very often... it's part of their job).</p>\n<p>And when you get frustrated, you will need the maturity to channel your energy towards constructive actions. It will likely involve <em>dialogue</em>. And if you're friendly, it is likely to speed up the whole process.</p>\n<p>Lastly, if you literally don't trust anyone's word, that's an issue of yours. You can't assume it's the case for others, especially in the context of <em>being in a community</em>.</p>",
        "id": 436674639,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1714650324
    },
    {
        "content": "<p>I am in agreement on your points.  Because I want to get to the point of recommending this proving system to others.  These people want to do their computing in a very precise way.  Convenience is secondary to them.  Please see <a href=\"https://www.gnu.org/philosophy/when-free-software-isnt-practically-superior.html\">https://www.gnu.org/philosophy/when-free-software-isnt-practically-superior.html</a></p>",
        "id": 436684579,
        "sender_full_name": "Heime",
        "timestamp": 1714653727
    },
    {
        "content": "<p>Am smiling now because I am quite sure we are not much different actually.  I can bet that there are people  in this community that do not trust some paper proofs and have to apply their prover system for the task. Much of what we do is not about looking up or down to somebody, but convincing ourselves that what we see is actually correct.  In this sense I agree with this community completely.  I won't be here otherwise.</p>",
        "id": 436686887,
        "sender_full_name": "Heime",
        "timestamp": 1714654500
    },
    {
        "content": "<p>I used to be an honorary member of a department who did not  view my use of computers  favourably.  For me, it was a good enough reason to leave.  Has anyone had experiences like this before ?</p>",
        "id": 436688627,
        "sender_full_name": "Heime",
        "timestamp": 1714654998
    },
    {
        "content": "<p>Is lean good in terms of classical analysis ?</p>",
        "id": 436693589,
        "sender_full_name": "Heime",
        "timestamp": 1714656366
    },
    {
        "content": "<p>Not as much as Isabelle, but people are working on it</p>",
        "id": 436693783,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1714656426
    },
    {
        "content": "<p>I have done</p>\n<p>make install DESTDIR=/home/enterprise/bin/ PREFIX=startrek</p>\n<p>Which produces lake, lean, leanc and leanmake.</p>\n<p>Is this a good thing ?</p>",
        "id": 436697718,
        "sender_full_name": "Heime",
        "timestamp": 1714657489
    },
    {
        "content": "<p>Not particularly -- as previously covered, Lean isn't really ready for space voyage. Those are the correct binaries though.</p>",
        "id": 436698992,
        "sender_full_name": "Julian Berman",
        "timestamp": 1714657830
    },
    {
        "content": "<p>Can I use them to prove an example, or to follow a tutorial ?</p>",
        "id": 436709301,
        "sender_full_name": "Heime",
        "timestamp": 1714660647
    },
    {
        "content": "<p>Not really -- Lean is not yet stable software, and you globally installed the bleeding-edge version. Tutorials and other projects usually assume that you have a very particular version of the Lean toolchain. If you are lucky, the tutorials will work, but for example Mathlib does not compile on the bleeding-edge version.</p>",
        "id": 436713423,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714661821
    },
    {
        "content": "<p>Well, actually, at least you now have a global <code>lake</code>, and if you have <code>elan</code> installed, it will automatically download the appropriate version of <code>lean</code> when you do <code>lake build</code> for a given Lean project.</p>",
        "id": 436713753,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714661910
    },
    {
        "content": "<p>Should having a stable version where mathlib compiles without have to do another lean build that one cannot control be a priority for the lean project ?</p>",
        "id": 436716311,
        "sender_full_name": "Heime",
        "timestamp": 1714662571
    },
    {
        "content": "<p>Yes, having more stability is a priority, but it's a <em>very</em> long project. You can consult the 5-year project roadmap: <a href=\"https://lean-fro.org/about/roadmap/\">https://lean-fro.org/about/roadmap/</a></p>",
        "id": 436720407,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714663782
    },
    {
        "content": "<p>For now, you can compile a stable release of Lean 4 (e.g. v4.7.0) and build Std and Mathlib for it.</p>",
        "id": 436720726,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1714663866
    },
    {
        "content": "<p>But with elan, right?</p>",
        "id": 436729768,
        "sender_full_name": "Heime",
        "timestamp": 1714666516
    },
    {
        "content": "<p>I could compile and make a target of it, with Std and Mathlib.  For what things would such a setup be good for ?  How far can one go with it as a prover system ?</p>",
        "id": 436730520,
        "sender_full_name": "Heime",
        "timestamp": 1714666788
    },
    {
        "content": "<p>If you want to use mathlib, you will need a lean version which can compile mathlib. It's better to stick to stable versions in that case</p>",
        "id": 436730829,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714666881
    },
    {
        "content": "<p>Note that Std/Mathlib are libraries and do not actually go in the make target or get installed anywhere global</p>",
        "id": 436730930,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714666914
    },
    {
        "content": "<p>they are generally used as dependencies of your local project and built using <code>lake</code></p>",
        "id": 436731046,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714666940
    },
    {
        "content": "<p>I am pleased with this level of discussion.  A direct honest status I was got getting previously.</p>",
        "id": 436731094,
        "sender_full_name": "Heime",
        "timestamp": 1714666954
    },
    {
        "content": "<p>You should use <code>elan toolchain override</code> in your project if you want it to ignore the lean-toolchain and use your local build. Otherwise it will attempt to download the right version (in this case, also v4.7.0) and put it in <code>~/.elan/toolchains</code></p>",
        "id": 436731468,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714667064
    },
    {
        "content": "<p><strong>FLASHING WARNING LIGHTS</strong> this is not the way most users use lean, and issues may occur for you which do not occur for others which use elan directly and make no attempt to override it</p>",
        "id": 436731669,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714667133
    },
    {
        "content": "<p>Does the lean version with \"make install DESTDIR=something\" be good enough to compile mathlib?</p>",
        "id": 436731746,
        "sender_full_name": "Heime",
        "timestamp": 1714667163
    },
    {
        "content": "<p>Good enough, yes, but getting the configuration into all the right places may be tricky</p>",
        "id": 436731876,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714667197
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"714044\">Heime</span> <a href=\"#narrow/stream/270676-lean4/topic/Building.20problem.20with.20not.20an.20object/near/436709301\">said</a>:</p>\n<blockquote>\n<p>Can I use them to prove an example, or to follow a tutorial ?</p>\n</blockquote>\n<p>If you just want to see Lean alive on your machine with the binaries you have, try the following</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- foo.lean</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">foo</span>\n</code></pre></div>\n<p>And then</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$<span class=\"w\"> </span>path-to-your-binaries/lean<span class=\"w\"> </span>foo.lean\nfoo.<span class=\"o\">{</span>u_1<span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">{</span>α✝<span class=\"w\"> </span>:<span class=\"w\"> </span>Sort<span class=\"w\"> </span>u_1<span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">{</span>A<span class=\"w\"> </span>:<span class=\"w\"> </span>α✝<span class=\"o\">}</span><span class=\"w\"> </span>:<span class=\"w\"> </span><span class=\"nv\">A</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>A\n</code></pre></div>",
        "id": 436731974,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1714667232
    },
    {
        "content": "<p>most things will, in the absence of indications to the contrary, get elan to download the stable from the internet in spite of your <code>make install</code></p>",
        "id": 436732032,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714667258
    },
    {
        "content": "<p>Could elan be made to download whatever is necessary so that a user could build the whole thing from source ?</p>",
        "id": 436732039,
        "sender_full_name": "Heime",
        "timestamp": 1714667261
    },
    {
        "content": "<p>Again, that's a feature request and elan does not currently support it to my knowledge</p>",
        "id": 436732078,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714667278
    },
    {
        "content": "<p>PRs welcome</p>",
        "id": 436732142,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714667294
    },
    {
        "content": "<p>You can use <code>elan override</code> to make it use sources and build outputs you have prepared separately, but it's far from a fully automatic process</p>",
        "id": 436732228,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714667338
    },
    {
        "content": "<p>Honestly I think it would be great if <code>elan</code> could just do builds automatically in place of the download step, that would allow it to work even on git repos without releases</p>",
        "id": 436732549,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714667436
    },
    {
        "content": "<p>But it does put an extra 30 minutes or so on the process which is not great for most users</p>",
        "id": 436732716,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714667511
    },
    {
        "content": "<p>Doing a full bootstrap chain is IMO out of scope for <code>elan</code> though. I would expect that to be the domain of a specialized project (which I've idly considered writing a few times FYI, but never really broke ground on)</p>",
        "id": 436732977,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714667622
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Building.20problem.20with.20not.20an.20object/near/436731669\">said</a>:</p>\n<blockquote>\n<p><strong>FLASHING WARNING LIGHTS</strong> this is not the way most users use lean, and issues may occur for you which do not occur for others which use elan directly and make no attempt to override it</p>\n</blockquote>\n<p>I've done this a few times to test local Lean changes and it works perfectly fine in my experience.</p>",
        "id": 436733567,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1714667828
    },
    {
        "content": "<p>The main issue for me is forgetting I've overidden the toolchain and wondering why cache is downloading nothing</p>",
        "id": 436734045,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1714667980
    },
    {
        "content": "<p>The cache doesn't work anyhow when you compile Lean</p>",
        "id": 436734240,
        "sender_full_name": "Julian Berman",
        "timestamp": 1714668044
    },
    {
        "content": "<p>(Unless something's changed and I'm out of date? I haven't used it in ages)</p>",
        "id": 436734330,
        "sender_full_name": "Julian Berman",
        "timestamp": 1714668071
    },
    {
        "content": "<p>Yes, I'm referring to living with an overridden toolchain long term, not just testing local changes. The cache might work if you do things just right, but I'm not sure anyone has taken the time to figure it all out</p>",
        "id": 436734932,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714668271
    },
    {
        "content": "<p>I suspect that <span class=\"user-mention\" data-user-id=\"714044\">@Heime</span> would not want to use the cache anyway, preferring to build Mathlib locally.</p>",
        "id": 436734984,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1714668292
    },
    {
        "content": "<p>...fair</p>",
        "id": 436735009,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714668303
    },
    {
        "content": "<p>If one could build a minimally stable version, that would not be bad. Then have the ability to add other tools, libraries, to it.</p>",
        "id": 436738838,
        "sender_full_name": "Heime",
        "timestamp": 1714669517
    },
    {
        "content": "<p>Seems that a minimally useful version should build lean with mathlib included.</p>",
        "id": 436739196,
        "sender_full_name": "Heime",
        "timestamp": 1714669651
    },
    {
        "content": "<p>Free Software Licenses generally allow you to utilize caching mechanisms when building projects like Mathlib for Lean.</p>",
        "id": 436739866,
        "sender_full_name": "Heime",
        "timestamp": 1714669915
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> What procedure would you suggest, as you have done it before ?</p>",
        "id": 436740580,
        "sender_full_name": "Heime",
        "timestamp": 1714670169
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"714044\">@Heime</span> have you tried this?<br>\n<a href=\"#narrow/stream/270676-lean4/topic/Building.20problem.20with.20not.20an.20object/near/436615532\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Building.20problem.20with.20not.20an.20object/near/436615532</a></p>",
        "id": 436748330,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1714672887
    },
    {
        "content": "<p><code>elan override --help</code> outputs helpful information</p>",
        "id": 436749411,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1714673258
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"714044\">Heime</span> <a href=\"#narrow/stream/270676-lean4/topic/Building.20problem.20with.20not.20an.20object/near/436731094\">said</a>:</p>\n<blockquote>\n<p>I am pleased with this level of discussion.  A direct honest status I was got getting previously.</p>\n</blockquote>\n<p>Nonsense. In earlier discussions you were being disrespectful, demanding, and you had a bad attitude.<br>\nDon't act as if we suddenly started to behave the way you always wanted. <em>If</em> anybody changed, it is you.</p>",
        "id": 436753196,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1714674607
    },
    {
        "content": "<p>Fine. Congratulation on the great work that still has not got a stable version with workable functionality after 11 years.  With a further  5 year plan to this project.</p>",
        "id": 436757756,
        "sender_full_name": "Heime",
        "timestamp": 1714676346
    },
    {
        "content": "<p>Speaking for the CoC team here: The discussion on this topic has turned non-constructive and the situation does not seem to be improving. We ask all members to take a pause from engaging here for a bit.</p>",
        "id": 436758049,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1714676429
    }
]