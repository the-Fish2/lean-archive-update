[
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.primesBelow#doc\">docs#Nat.primesBelow</a> sends <code>n : Nat</code> to the finset of primes less than <code>n</code>. A passing mathematician might idly think \"so what are the primes less than 10000000?\" (or, more likely, \"let's check my new conjecture about prime numbers for all primes less than 10000000\"). In pari I just type <code>forprime(p=0,10000000,print(p))</code> and a few seconds later I have the answer. But I just typed <code>#eval primesBelow 10000000</code> into Lean and it crashed. There are plenty of mathematicians out there who use computer algebra systems to just do basic calculations like this, it would be interesting if this could be supported somehow in Lean.</p>",
        "id": 433045578,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1713013515
    },
    {
        "content": "<p>The recent breakthrough work of Newton and Thorne on high symmetric power functoriality for GL(2) uses a one crucial point an explicit calculation of the 2-adic eigencurve which was all worked out conjecturally by me and others just by playing with power series with coefficients in the 2-adic numbers in pari-gp (and then all proved by me and others on paper)</p>",
        "id": 433045899,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1713013771
    },
    {
        "content": "<p>A similar thought has occurred to me before, in general, I think it would be awesome to have more CAS features in lean!</p>",
        "id": 433046107,
        "sender_full_name": "Rida Hamadani",
        "timestamp": 1713013939
    },
    {
        "content": "<p>Itâ€™s certainly possible to implement this function using a basic sieve then prove the two are the same (and tag the proof with <code>csimp</code>)</p>",
        "id": 433047008,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1713014766
    },
    {
        "content": "<p>I think this is done <a href=\"#narrow/stream/270676-lean4/topic/Checking.20the.20Goldbach.20conjecture/near/429974821\">here</a>.<br>\nHowever <code>#eval primes 1000000</code> (one less zero) crashes in web editor. (apparently a stack overflow error)</p>",
        "id": 433047144,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1713014815
    },
    {
        "content": "<p>I think that's just a printing issue</p>",
        "id": 433048888,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713016300
    },
    {
        "content": "<p><code>#eval (primes 1000000).size</code> is fast</p>",
        "id": 433048890,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713016303
    },
    {
        "content": "<p>As is <code>#eval toString (primes 1000000)</code>; the problem is with the <code>Format</code>ter</p>",
        "id": 433048971,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713016364
    },
    {
        "content": "<p><a href=\"https://github.com/ykonstant1/esiv\">This</a> may be faster if you need high numbers.  But a segmentation scheme needs to be added to the code if you must get far beyond 2^32.</p>",
        "id": 433321832,
        "sender_full_name": "Number Eighteen",
        "timestamp": 1713194993
    },
    {
        "content": "<p>I went with 10^8 because experimentation showed that I could print all the primes less than that in just a few seconds on the command line using pari, so I knew it was not a computationally unreasonable ask</p>",
        "id": 433462816,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1713253971
    },
    {
        "content": "<p>Te vas a regalar  gato podrido</p>",
        "id": 433463640,
        "sender_full_name": "Ivan Gonzalez",
        "timestamp": 1713254290
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/270676-lean4/topic/What.20are.20the.20primes.20less.20than.2010000000.3F/near/433047144\">said</a>:</p>\n<blockquote>\n<p>I think this is done <a href=\"#narrow/stream/270676-lean4/topic/Checking.20the.20Goldbach.20conjecture/near/429974821\">here</a>.<br>\nHowever <code>#eval primes 1000000</code> (one less zero) crashes in web editor. (apparently a stack overflow error)</p>\n</blockquote>\n<p>Should <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>'s code here be PR'd?</p>",
        "id": 433465621,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713255001
    },
    {
        "content": "<p>I suppose we could have <code>Mathlib.Data.Nat.Prime.Sieve</code> or something</p>",
        "id": 433465781,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713255044
    },
    {
        "content": "<p>There are definitely ways to push the code further, e.g. using a bitset instead of two arrays</p>",
        "id": 433466204,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713255198
    }
]