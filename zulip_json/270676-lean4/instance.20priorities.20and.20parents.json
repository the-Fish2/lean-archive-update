[
    {
        "content": "<p>How do you think Lean should fill the value for <code>A</code> in <code>baz</code> below? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">default</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">B</span> <span class=\"kd\">extends</span> <span class=\"n\">A</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"mi\">75</span><span class=\"o\">)</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">default</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">C</span> <span class=\"kd\">extends</span> <span class=\"n\">A</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">baz</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">default</span>\n<span class=\"k\">#print</span> <span class=\"n\">baz</span>\n</code></pre></div>",
        "id": 421869722,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708093994
    },
    {
        "content": "<p>Oh! Your point is that it uses <code>B.toA</code> (and in particular <code>bar</code>) despite this having a lower priority than the directly available <code>foo</code>?</p>",
        "id": 421874312,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708095394
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">A</span> <span class=\"n\">α</span> <span class=\"bp\">▼</span>\n  <span class=\"o\">[]</span> <span class=\"n\">new</span> <span class=\"n\">goal</span> <span class=\"n\">A</span> <span class=\"n\">α</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[</span><span class=\"n\">instances</span><span class=\"o\">]</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">B.toA</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">C.toA</span><span class=\"o\">]</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">C.toA</span> <span class=\"n\">to</span> <span class=\"n\">A</span> <span class=\"n\">α</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[</span><span class=\"n\">tryResolve</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">A</span> <span class=\"n\">α</span> <span class=\"bp\">≟</span> <span class=\"n\">A</span> <span class=\"n\">α</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"n\">no</span> <span class=\"n\">instances</span> <span class=\"n\">for</span> <span class=\"n\">C</span> <span class=\"n\">α</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">B.toA</span> <span class=\"n\">to</span> <span class=\"n\">A</span> <span class=\"n\">α</span> <span class=\"bp\">▶</span>\n</code></pre></div>\n<p>etc etc, with <code>B.toA</code> before <code>foo</code> because <del>it was defined later</del> it has default priority, and <code>B.toA</code> can be made to work so it works.</p>",
        "id": 421875206,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708095655
    },
    {
        "content": "<p><code>B.toA</code> doesn't have the lower priority unfortunately. Once it commits to that only <code>bar</code> is left. </p>\n<p>The values <code>100</code> vs <code>75</code> are in many places in mathlib. So a fix there would be bump the <code>100</code> to <code>default + 1</code>. </p>\n<p>But my point is that when the user sets these priorities they probably want <code>foo</code> in place of <code>bar</code> in the end.</p>",
        "id": 421875243,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708095671
    },
    {
        "content": "<p>A specific example of this pair of priorities is <code>SubXClass</code> vs <code>SubX</code> in the algebraic hierarchy.</p>",
        "id": 421875586,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708095764
    },
    {
        "content": "<p><code>attribute [instance 99] B.toA</code> also fixes it -- i.e. \"don't just set the priority of <code>bar</code> low, set the priority of its projections low too just to make sure\". Oh but wait, this is no good, because in general you don't want to be messing with <code>B</code>, it's just <code>bar</code> you want to be the last option :-/</p>",
        "id": 421876174,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708095913
    },
    {
        "content": "<p>Didn't we have a PR that was doing exactly this? Maybe <a href=\"https://github.com/leanprover-community/mathlib4/pull/6403\">#6403</a></p>",
        "id": 421876408,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1708095970
    },
    {
        "content": "<p>Agreed though, I woudl have expected / intended <code>foo</code> here instead of <code>B.toA</code>.</p>",
        "id": 421877608,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1708096308
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2325\">lean4#2325</a> is related here, which advocates changing those inherited priorities</p>",
        "id": 421888749,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708099324
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/blob/b91bad6ce957a0fb7fc7a832ae3e1018f8331ee1/Mathlib/RingTheory/Subring/Basic.lean#L470\">Here</a> is a example in the wild: I needed to explicitly specify <code>s.toRing</code> for <code>(s : Subring R)</code> to keep Lean from backdooring a <code>CommRing.toRing</code> built using the <code>SubringClass</code> instance on <code>Subring</code>.</p>",
        "id": 421892864,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708100249
    }
]