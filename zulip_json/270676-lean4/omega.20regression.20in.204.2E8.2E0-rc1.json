[
    {
        "content": "<p>Hi all, I've been using Lean for about 2 months now and I really like it. I've been thinking of things to formalize and it's really helped me learn the system.</p>\n<p>With the recent 4.8.0-rc1 release, I ran into a regression in omega which I filed at <a href=\"https://github.com/leanprover/lean4/issues/4054\">lean4#4054</a>. I believe I've found the underlying issue (in the Github thread I wrote down all the debugging details, if you are interested). I will summarize here. However, as a new user, I don't know what the best fix would be. </p>\n<p>The minimized example is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span>\n    <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span>\n    <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n    <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">omega</span>\n</code></pre></div>\n<p>This works in 4.7.0 but fails in 4.8.0-rc1. However, if you remove any of the <code>0 = 0</code> then it works in 4.8.0-rc1.</p>\n<p>I traced the issue down to this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n    <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Decidable.byContradiction</span>  <span class=\"c1\">-- Failed to synthesize Decidable</span>\n\n<span class=\"c1\">-- Removing one of the 0 = 0 on the second line</span>\n<span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n    <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Decidable.byContradiction</span>  <span class=\"c1\">-- works ok</span>\n</code></pre></div>\n<p>This turns out to be due to a limit in <code>synthInstance.maxSize</code>. With <code>set_option synthInstance.maxSize 256</code> then the original <code>omega</code> works in 4.8.0-rc1.</p>\n<p>It appears that the reason it works in 4.7.0 but not 4.8.0-rc1 is due to <a href=\"https://github.com/leanprover/lean4/pull/3828\">lean4#3828</a>. In 4.7.0, within the omega tactic which calls falseOrByContradiction, when <code>Decidable.byContradiction</code> fails it would fall back to <code>Classical.byContradiction</code> (useClassical := none), which succeeds because it doesn't need to synthesize a Decidable instance. But after the above change in 4.8.0-rc1, it simply drops the hypothesis when <code>Decidable.byContradiction</code> fails (useClassical := false).  Even though omegaTactic sets useClassical := false, there is a recursive call which changes useClassical := none in 4.7.0 but in 4.8.0-rc1 it retains the value false.</p>\n<p>What should be the fix here?  One could simply set useClassical := none in the omega tactic, but that means potentially picking up some hypotheses to omega that are useless anyway (there is a comment about this in the omegaTactic code).</p>\n<p>I also looked into why the <code>synthInstance.maxSize</code> limit was exceeded. I tried this trace:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance.newAnswer</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>  <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Decidable.byContradiction</span>\n</code></pre></div>\n<p>In the trace, with each new <code>0 = 0</code>, I see an exponentially growing sequence of numbers 3, 9, 21, 45, 93 (these numbers are 3*(2^n-1) ).  I don't really understand the details here but it seems strange to me that adding a new <code>0 = 0</code> causes an exponential growth in size.</p>\n<p>Well, that was a long first message! I hope this is helpful in resolving this issue.</p>",
        "id": 437150155,
        "sender_full_name": "Ted Hwa",
        "timestamp": 1714931081
    },
    {
        "content": "<p>Curiously the exponential growth stops at the point of the last example: further <code>0 = 0</code> instead results in linear growth in <code>[Meta.synthInstance.newAnswer] size: 95, val: instDecidableForall</code> lines...</p>",
        "id": 437190106,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714969066
    },
    {
        "content": "<p>Hmm, this minimization isn't quite correct. While it's true that </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span>\n    <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span>\n    <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n    <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">omega</span>\n</code></pre></div>\n<p>worked in v4.7.0 but now fails in v4.8.0-rc1</p>",
        "id": 437191257,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714969502
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n    <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Decidable.byContradiction</span>  <span class=\"c1\">-- Failed to synthesize Decidable</span>\n</code></pre></div>\n<p>fails on both!</p>",
        "id": 437191308,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714969521
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"715872\">@Ted Hwa</span>, I think the right solution here is just to remove <code>useClassical := false</code> in omega.</p>",
        "id": 437193252,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714970155
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/4073\">lean4#4073</a></p>",
        "id": 437193509,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714970232
    },
    {
        "content": "<blockquote>\n<p>Curiously the exponential growth stops at the point of the last example: further <code>0 = 0</code> instead results in linear growth in <code>[Meta.synthInstance.newAnswer] size: 95, val: instDecidableForall</code> lines...</p>\n</blockquote>\n<p>It's even stranger. If you increase <code>synthInstance.maxSize</code> to 256 (say) and add one more <code>0=0</code>, then you do see the next exponential growth number 189, but then if you add yet another, it's linear again.  It seems like the exponential growth continues until it hits the limit, then it becomes linear.</p>",
        "id": 437289857,
        "sender_full_name": "Ted Hwa",
        "timestamp": 1715010360
    }
]