[
    {
        "content": "<p>With <code>set_option trace.profiler true</code> in some declaration which depends heavily on mathlib, the proofs seem to be relatively quick but at the end I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"w\">  </span><span class=\"o\">[</span><span class=\"n\">Kernel</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">1.163096</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">typechecking</span><span class=\"w\"> </span><span class=\"n\">declaration</span>\n<span class=\"w\">  </span><span class=\"o\">[</span><span class=\"n\">Kernel</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">2.462965</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">typechecking</span><span class=\"w\"> </span><span class=\"n\">declaration</span>\n<span class=\"w\">  </span><span class=\"o\">[</span><span class=\"n\">Kernel</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">10.721389</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">typechecking</span><span class=\"w\"> </span><span class=\"n\">declaration</span>\n<span class=\"w\">  </span><span class=\"o\">[</span><span class=\"n\">Kernel</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">27.633739</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">typechecking</span><span class=\"w\"> </span><span class=\"n\">declaration</span>\n<span class=\"w\">  </span><span class=\"o\">[</span><span class=\"n\">Kernel</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">1.370556</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">typechecking</span><span class=\"w\"> </span><span class=\"n\">declaration</span>\n</code></pre></div>\n<p>Is there a way for me to turn on other trace options so I can see what's going on?</p>",
        "id": 448036075,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1719697254
    },
    {
        "content": "<p>Unfortunately there's not much you can do to get timing information inside the kernel, unless you're willing to use external profiling tools, but even then you have <em>very</em> little visibility into what is happening in the kernel.</p>",
        "id": 448051626,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719707176
    },
    {
        "content": "<p>The kernel being slow probably means that you're having a \"heavy rfl\" in your proof.I recommend sorrying parts of the proof to see what tactic is causing the slowness.</p>",
        "id": 448098487,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1719742265
    },
    {
        "content": "<p>Oh I know that, it's <code>aesop_cat</code> :-)</p>",
        "id": 448104671,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1719745671
    },
    {
        "content": "<p>In the situation that I believe Kevin is referring to here, introducing an auxiliary definition (for one of the fields of the structure that was defined) has basically solved the issue.</p>",
        "id": 448105582,
        "sender_full_name": "JoÃ«l Riou",
        "timestamp": 1719746338
    },
    {
        "content": "<p>So just to get this straight, it's possible that in the middle of a tactic proof I can call <code>rfl</code> to close a subgoal, and this can succeed quickly (ie it's heavy but we didn't notice yet), and then when I close the main goal it can take a very long time to process the declaration? Or is it more subtle than this?</p>",
        "id": 448106115,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1719746694
    },
    {
        "content": "<p>I have seen <code>rfl</code> take ages in category theory when <code>simp</code> is immediate, but I had always understood that it was the tactic running which took a long time, not that the tactic succeeded quickly and then the kernel struggled later on.</p>",
        "id": 448106220,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1719746765
    },
    {
        "content": "<p>I would guess this happens because <code>rfl</code> in the elaborator respects / can be guided by reducibility, but the concept of reducibility is absent in the kernel?</p>",
        "id": 448113185,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719752331
    },
    {
        "content": "<p>There is a new debug option coming to the next version of lean which lets you skip kernel checking, which can be used to diagnose whether it is the kernel or elaborator taking the time</p>",
        "id": 448125149,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1719759839
    },
    {
        "content": "<p><code>trace.profiler</code>, which Kevin is using, already gives you that. The issue is that there are no traces inside the kernel to tell you more.</p>",
        "id": 448128679,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1719761347
    }
]