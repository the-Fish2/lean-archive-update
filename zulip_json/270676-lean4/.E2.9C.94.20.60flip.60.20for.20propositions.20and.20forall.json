[
    {
        "content": "<p>I have a working proof</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">mp</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">hr</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">hr</span>\n</code></pre></div>\n<p>I tried </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">mp</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">flip</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>But got an error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span><span class=\"bp\">.</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n     <span class=\"n\">flip</span> <span class=\"bp\">?</span><span class=\"n\">m.3412</span>\n   <span class=\"n\">has</span> <span class=\"n\">type</span>\n     <span class=\"bp\">?</span><span class=\"n\">m.3379</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.3378</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.3380</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"o\">(</span><span class=\"n\">imax</span> <span class=\"bp\">?</span><span class=\"n\">u.3376</span> <span class=\"bp\">?</span><span class=\"n\">u.3377</span> <span class=\"bp\">?</span><span class=\"n\">u.3375</span><span class=\"o\">)</span>\n   <span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n     <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>Why doesn't this work? Is there an equivalent library function for propositions instead of functions that can do this?</p>",
        "id": 429587731,
        "sender_full_name": "James Sully",
        "timestamp": 1711432108
    },
    {
        "content": "<p><code>flip</code> doesn't work for dependent arguments. Have you tried <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Function.swap#doc\">docs#Function.swap</a> ?</p>",
        "id": 429588379,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1711432660
    },
    {
        "content": "<p>Ah thanks. I'm not using mathlib atm, but good to know for future reference</p>",
        "id": 429589510,
        "sender_full_name": "James Sully",
        "timestamp": 1711433487
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"621161\">James Sully</span> has marked this topic as resolved.</p>",
        "id": 430442452,
        "sender_full_name": "Notification Bot",
        "timestamp": 1711856566
    }
]