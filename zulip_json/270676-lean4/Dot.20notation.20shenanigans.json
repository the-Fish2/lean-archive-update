[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Unit</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">A</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">b</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">bar</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">b</span>\n\n<span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\">        </span><span class=\"c1\">-- works</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">foo</span><span class=\"w\">          </span><span class=\"c1\">-- does not work</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">bar</span><span class=\"w\">      </span><span class=\"c1\">-- works</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">foo</span><span class=\"w\">      </span><span class=\"c1\">-- does not work</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">bar</span><span class=\"w\">  </span><span class=\"c1\">-- works</span>\n</code></pre></div>\n<p>Is there a reason why 3 and 5 works but 2 and 4 fails? 2 and 4 works if <code>B</code> is reducible, but I hope I can keep <code>B</code> as semireducible (for context, <code>A</code> is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AlgebraicGeometry.Scheme.Hom#doc\">docs#AlgebraicGeometry.Scheme.Hom</a> and <code>B</code> is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Quiver.Hom#doc\">docs#Quiver.Hom</a>)</p>",
        "id": 446111882,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1718985392
    },
    {
        "content": "<p>I'm surprised that 3 and 5 work.</p>",
        "id": 446129706,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718990024
    },
    {
        "content": "<p>It seems that Lean treats a semireducible as irreducible if it appears in the penultimate position of the chain and as reducible otherwise. I don't think that can be right.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\">        </span><span class=\"c\">/-</span><span class=\"cm\"> works because a is treated as reducible. -/</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">foo</span><span class=\"w\">          </span><span class=\"c\">/-</span><span class=\"cm\"> does not work</span>\n<span class=\"cm\">  because a is in the penultimate position so is treated as irreducible. -/</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">bar</span><span class=\"w\">      </span><span class=\"c\">/-</span><span class=\"cm\"> works</span>\n<span class=\"cm\">  because a comes before the penultimate position so is treated as reducible,</span>\n<span class=\"cm\">  while a.foo already has the right type for bar. -/</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">foo</span><span class=\"w\">      </span><span class=\"c\">/-</span><span class=\"cm\"> does not work</span>\n<span class=\"cm\">  because although a comes before the penultimate position and is treated as reducible,</span>\n<span class=\"cm\">  a.foo is in the penultimate position so is treated as irreducible. -/</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">bar</span><span class=\"w\">  </span><span class=\"c\">/-</span><span class=\"cm\"> works</span>\n<span class=\"cm\">  because a and a.foo come before the penultimate position so are treated as reducible,</span>\n<span class=\"cm\">  while a.foo.foo already has the right type for bar. -/</span>\n</code></pre></div>",
        "id": 446172213,
        "sender_full_name": "A.",
        "timestamp": 1719003283
    },
    {
        "content": "<p>I got burned earlier today by the difference between these two applications of <code>Function.comp</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Data</span><span class=\"bp\">.</span><span class=\"n\">Real</span><span class=\"bp\">.</span><span class=\"n\">Basic</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Data</span><span class=\"bp\">.</span><span class=\"n\">Matrix</span><span class=\"bp\">.</span><span class=\"n\">Basic</span>\n\n<span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">ùí©</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Fintype</span><span class=\"w\"> </span><span class=\"n\">ùí©</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">l</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Matrix</span><span class=\"w\"> </span><span class=\"n\">ùí©</span><span class=\"w\"> </span><span class=\"n\">ùí©</span><span class=\"w\"> </span><span class=\"n\">‚Ñù</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">vecMul</span><span class=\"bp\">.</span><span class=\"n\">comp</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">vecMul</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span>\n</code></pre></div>",
        "id": 446173884,
        "sender_full_name": "A.",
        "timestamp": 1719004069
    },
    {
        "content": "<p>I only looked briefly at the source code, but I think I do get a feeling what's happening (see <br>\n<a href=\"https://github.com/leanprover/lean4/blob/5767a597d472f6acbd132628ad88b1bfe54385a2/src/Lean/Elab/App.lean#L1246-L1252\">Lean.Elab.App</a>)</p>\n<p>The relevant snippet seems to be this (line 1250-1256):</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"w\">      </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">lvals</span><span class=\"bp\">.</span><span class=\"n\">isEmpty</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">        </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">fvarType</span><span class=\"w\"> </span><span class=\"bp\">‚Üê</span><span class=\"w\"> </span><span class=\"n\">inferType</span><span class=\"w\"> </span><span class=\"n\">fvar</span>\n<span class=\"w\">        </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">args</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">namedArgs</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">‚Üê</span><span class=\"w\"> </span><span class=\"n\">addLValArg</span><span class=\"w\"> </span><span class=\"n\">baseName</span><span class=\"w\"> </span><span class=\"n\">fullName</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"n\">namedArgs</span><span class=\"w\"> </span><span class=\"n\">fvarType</span>\n<span class=\"w\">        </span><span class=\"n\">elabAppArgs</span><span class=\"w\"> </span><span class=\"n\">fvar</span><span class=\"w\"> </span><span class=\"n\">namedArgs</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"n\">expectedType?</span><span class=\"w\"> </span><span class=\"n\">explicit</span><span class=\"w\"> </span><span class=\"n\">ellipsis</span>\n<span class=\"w\">      </span><span class=\"k\">else</span>\n<span class=\"w\">        </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"bp\">‚Üê</span><span class=\"w\"> </span><span class=\"n\">elabAppArgs</span><span class=\"w\"> </span><span class=\"n\">fvar</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Arg</span><span class=\"bp\">.</span><span class=\"n\">expr</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">expectedType?</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">none</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">explicit</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">false</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ellipsis</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">false</span><span class=\"o\">)</span>\n<span class=\"w\">        </span><span class=\"n\">loop</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">lvals</span>\n</code></pre></div>\n<p>here, the list of dot notation things was split as <code>lval::lvals</code> further up in the code, so <code>lval</code> is <code>foo</code> and <code>lvals</code> is <code>#[bar]</code>. <code>addLValArg</code> is the function which throws the error in (3) and (5) (i.e. \"no argument with type ...\") and that one is only called for the last of these \"projections\". For all the ones before, it seems that rather there is some elaboration happening (in the <code>else</code>) statement, which I don't fully understand.</p>\n<p>So I wouldn't be surprised if <code>a.foo.bar</code> is then essentially processed as <code>(A.foo a).bar</code> because the inner part got elaborated first.</p>",
        "id": 446176010,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1719005135
    },
    {
        "content": "<p>What is the intended behaviour here? Can we make (2) and (4) work? Or is failing on (3) and (5) desired instead?</p>",
        "id": 446264852,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1719056421
    },
    {
        "content": "<p>my first instinct was that (3) and (5) shouldn't be succeeding, but I don't know.</p>",
        "id": 446266674,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1719057940
    },
    {
        "content": "<p>I think that the mechanism for making those work is to use <code>abbrev</code> (or <code>@[reducible] def</code>) instead of <code>def</code>, so I am also inclined to say that dot-notation should not see through <code>def</code>s.</p>",
        "id": 446267031,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1719058264
    },
    {
        "content": "<p>I think we see in the <code>l.vecMul</code> example above that permitting Lean to see through <code>Matrix</code> leads to a pretty crazy result.</p>",
        "id": 446268209,
        "sender_full_name": "A.",
        "timestamp": 1719059302
    }
]