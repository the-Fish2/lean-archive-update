[
    {
        "content": "<p>Lean does not evaluate terms of propositions when deriving judgemental equalities. However, when data are defined via subsingleton elimination, this may lead to missed judgemental equalities. Consider the following example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"bp\">∧</span> <span class=\"n\">True</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n<span class=\"kd\">def</span> <span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"bp\">∧</span> <span class=\"n\">True</span> <span class=\"bp\">→</span> <span class=\"n\">True</span> <span class=\"bp\">∧</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">trivial</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"o\">⟩</span>\n<span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"c\">/-</span><span class=\"cm\">show f ⟨trivial, trivial⟩ = 0;-/</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f'</span><span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">×</span> <span class=\"n\">Unit</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n<span class=\"kd\">def</span> <span class=\"n\">g'</span><span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">×</span> <span class=\"n\">Unit</span> <span class=\"bp\">→</span> <span class=\"n\">Unit</span> <span class=\"bp\">×</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨(),</span> <span class=\"o\">()⟩</span>\n<span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f'</span> <span class=\"o\">(</span><span class=\"n\">g'</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>In the first example, the judgemental equality is not detected, i.e., rfl fails. If one does not use the Proposition True, but the Type Unit instead (the second example), then rfl succeeds. Also, adding the show in between makes rfl work (in particular, the detected judgemental equality is not transitive).<br>\nI am not sure if this is a feature of Lean. However, <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> suggested I post it here so that others are aware of the issue.</p>",
        "id": 417460768,
        "sender_full_name": "Sven Manthe",
        "timestamp": 1706021055
    },
    {
        "content": "<p>I do not know what judgemental equalities are, but the code above seems to work with no errors, whereas I expected the first example to fail.  Am I misunderstanding something?</p>",
        "id": 417463977,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706021939
    },
    {
        "content": "<p>On a slightly  older version of Lean (a few months old) I get a type error in the first <code>rfl</code>. In mathlib from a ~week ago, there is indeed no error. So apparently something already changed regarding to this example.<br>\nWe might have misdiagnosed the issue (on the old version of Lean). It seems (you can see this when writing <code>whatsnew in def g ....</code> that <code>g</code> is internally defined using a <em>theorem</em> <code>g.proof_1</code>, and that doesn't reduce (which explains the behavior in the example). In a recent mathlib, there is indeed no <code>g.proof_1</code>, only another def <code>g.match_1</code>.</p>",
        "id": 417465038,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1706022235
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 417466881,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1706022737
    },
    {
        "content": "<p>This has already been discussed <a href=\"#narrow/stream/236446-Type-theory/topic/Logics.20and.20lambda.20calculi\">here</a>, the issue is that recursors don't eta-expand terms from structures that live in <code>Prop</code>, even though it should be okay to make this expansion on subsingletons.</p>",
        "id": 417467352,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1706022854
    },
    {
        "content": "<p>Indeed, updating Lean from version 4.3.0 to 4.5.0 (together with Mathlib, though this should not be relevant?) resolved the issue for me.</p>",
        "id": 417620644,
        "sender_full_name": "Sven Manthe",
        "timestamp": 1706093775
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"651332\">Sven Manthe</span> has marked this topic as resolved.</p>",
        "id": 417620653,
        "sender_full_name": "Notification Bot",
        "timestamp": 1706093780
    }
]