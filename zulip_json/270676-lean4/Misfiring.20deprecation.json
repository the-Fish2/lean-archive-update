[
    {
        "content": "<p>The following code thinks I'm using the deprecated <code>Finset.card_congr</code> when in fact I'm using the non-deprecated <code>Fintype.card_congr</code>. Is this known?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Fintype.card_congr</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">False</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Finset</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">deprecated</span><span class=\"kd\">]</span> <span class=\"kd\">theorem</span> <span class=\"n\">card_congr</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Finset</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span> <span class=\"n\">Fintype</span>\n\n<span class=\"sd\">/-- warning: `Finset.card_congr` has been deprecated -/</span>\n<span class=\"bp\">#</span><span class=\"n\">guard_msgs</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">False</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"n\">card_congr</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 439756868,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716279273
    },
    {
        "content": "<p>Minimised from <a href=\"https://github.com/leanprover-community/mathlib4/pull/12653\">#12653</a></p>",
        "id": 439756971,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716279310
    },
    {
        "content": "<p>This could be related to <a href=\"https://github.com/leanprover/lean4/pull/2132\">lean4#2132</a></p>",
        "id": 439757961,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1716279654
    },
    {
        "content": "<p>I'm pretty sure that I have seen this: there was something about <code>deprecate</code> not getting the elaborated information, so Lean uses the correct lemma, but <code>deprecate</code> gets fixated on the other one.</p>",
        "id": 439758219,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716279733
    },
    {
        "content": "<p>See also <a href=\"https://github.com/leanprover/lean4/blob/3de60bb1f63efe9bb56380f911f86980b9f3332c/src/Lean/Elab/Term.lean#L1638\">this TODO</a></p>",
        "id": 439776791,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716285352
    },
    {
        "content": "<p>Did you check if this is still broken on nightly-testing?</p>",
        "id": 439776927,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1716285400
    },
    {
        "content": "<p>I did not. Might try later if no one beats me to it</p>",
        "id": 439791377,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716289849
    }
]