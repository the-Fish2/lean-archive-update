[
    {
        "content": "<p>Are there <code>deriving</code> functions for deriving arithmetic operations for structures?</p>\n<p>I would like to write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Vec2</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Add</span><span class=\"o\">,</span> <span class=\"n\">SMul</span> <span class=\"n\">ℝ</span>\n</code></pre></div>\n<p>which would add instances <code>Add X → Add (Vec2 X)</code> and <code>SMul ℝ X → SMul ℝ (Vec2 X)</code></p>\n<p>A more complicated example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Ball</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">center</span> <span class=\"o\">:</span> <span class=\"n\">R</span>\n  <span class=\"n\">radius</span> <span class=\"o\">:</span> <span class=\"n\">X</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Add</span><span class=\"o\">,</span> <span class=\"n\">SMul</span> <span class=\"n\">R</span>\n</code></pre></div>\n<p>which would add instances <code>Add R → Add X → Add (Ball R X)</code> and <code>Mul R → SMul R X → SMul (Ball R X)</code>. </p>\n<p>Is there anything like this in mathlib/lean already? I couldn't find anything. Has anyone thought about this problem? I have done few attempts but I still do not have anything satisfactory.</p>",
        "id": 435427507,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1714062989
    },
    {
        "content": "<p>Here's an approach using Mathlib:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Vec2</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Add.ofEquiv</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">≃</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">Y</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f.symm</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">f.symm</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"o\">((</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">x1</span><span class=\"o\">,</span> <span class=\"n\">y1</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">x2</span><span class=\"o\">,</span> <span class=\"n\">y2</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">x1</span> <span class=\"bp\">+</span> <span class=\"n\">x2</span><span class=\"o\">,</span> <span class=\"n\">y1</span> <span class=\"bp\">+</span> <span class=\"n\">y2</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">Vec2</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Add.ofEquiv</span> <span class=\"o\">(</span><span class=\"n\">proxy_equiv</span><span class=\"bp\">%</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>With some more work, you could turn this into a derive handler (or at least a command, since <code>SMul ℝ</code> isn't supported by the <code>deriving</code> syntax). See for example the <code>Fintype</code> handler.</p>",
        "id": 435434835,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714065737
    },
    {
        "content": "<p>Or this unfinished PR for deriving LinearOrders: <a href=\"https://github.com/leanprover-community/mathlib4/pull/3251\">#3251</a></p>",
        "id": 435434940,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714065783
    },
    {
        "content": "<p>I saw the <code>Fintype</code> approach, I'm a bit worried about the generated code. I don't want to just prove theorems.</p>",
        "id": 435435143,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1714065860
    },
    {
        "content": "<p>The least efficient part about the generated code is how it handles multiple constructors, but since structures have just one constructor, it might not be so bad.</p>",
        "id": 435435247,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714065908
    },
    {
        "content": "<p>It's worth evaluating it, and seeing what you can do to get it to inline everything in sight if necessary.</p>",
        "id": 435435286,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714065930
    },
    {
        "content": "<p>Yeah I might write some tactic that unfolds lots of the definitions involved.</p>",
        "id": 435435443,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1714065991
    },
    {
        "content": "<p>For example, if you have a <code>reduce%</code> term elaborator, you could write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">Vec2</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">reduce</span><span class=\"bp\">%</span> <span class=\"o\">(</span><span class=\"n\">Add.ofEquiv</span> <span class=\"o\">(</span><span class=\"n\">proxy_equiv</span><span class=\"bp\">%</span> <span class=\"n\">_</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 435435568,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714066049
    },
    {
        "content": "<p>Sounds good, I will play around with this</p>",
        "id": 435435775,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1714066138
    },
    {
        "content": "<p>So far so good, only one issue came up. Deriving instance for <code>UniformSpace</code> is a problem as it does not have instance for <code>Sigma</code>. Also I have some type classes that provide way simpler instance to <code>Prod</code> and I would prefer if <code>proxy_equiv%</code> would generate <code>Prod</code> if possible.</p>\n<p>If I understand the code correctly I can alter <code>defaultMkCtorProxyType</code> to use <code>Prod</code> if possible. Not sure what are the downstream consequences of doing so.</p>",
        "id": 435446705,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1714070301
    },
    {
        "content": "<p>I had to add a non-dependent <code>Sigma</code> instance for <code>Add</code> in the above code. Non-dependent sigma instances should have the same code as a Prod instance.</p>",
        "id": 435446910,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714070404
    },
    {
        "content": "<p>I think there's no problem adding <code>Prod</code> to the list of types that <code>proxy_type%</code> generates. It just increases the complexity a bit, and you have to be sure all the documentation that promises \"if you implement instances for this list of types, then deriving handlers will work\"</p>",
        "id": 435447056,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714070459
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/Deriving.20operations.20for.20structures/near/435446910\">said</a>:</p>\n<blockquote>\n<p>I had to add a non-dependent <code>Sigma</code> instance for <code>Add</code> in the above code. Non-dependent sigma instances should have the same code as a Prod instance.</p>\n</blockquote>\n<p>Ah that is right, just using <code>Sigma</code> is probably ok. I have to play around with it a bit more.</p>",
        "id": 435448142,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1714070889
    }
]