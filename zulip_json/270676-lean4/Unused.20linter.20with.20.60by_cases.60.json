[
    {
        "content": "<p>Here is an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">bycases_unused</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hn</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">intro</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n\n<span class=\"bp\">#</span><span class=\"n\">lint</span>\n</code></pre></div>\n<p>reports no errors. AFAIR, we had a linter in mathlib3 that checked for this kind of \"unused\". Is it hard to reimplement in Lean 4?</p>",
        "id": 410061010,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703620182
    },
    {
        "content": "<p>I tried both with <code>by_cases</code> (generates <code>if .. then .. else ..</code>) and <code>cases eq_or_ne n 0</code> (generates <code>Or.casesOn</code>)</p>",
        "id": 410061074,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703620217
    },
    {
        "content": "<p>I recently found an unneeded <code>by_cases</code> in a longer proof in <code>Mathlib</code>, this <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span> is a minimized version.</p>",
        "id": 410061147,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703620282
    },
    {
        "content": "<p>(PSA: please don't use <code>import Mathlib</code> in MWEs)</p>",
        "id": 410061642,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703620670
    },
    {
        "content": "<ol>\n<li>That's not what <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> says.</li>\n<li>I used <code>import Mathlib</code> intentionally to be sure that I run all Mathlib linters.</li>\n</ol>",
        "id": 410061803,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703620796
    },
    {
        "content": "<p>\"mathlib linters\" aren't defined in mathlib anymore, they are in Std now</p>",
        "id": 410062047,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703620895
    },
    {
        "content": "<p>in particular the one you are talking about here is in std</p>",
        "id": 410062086,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703620910
    },
    {
        "content": "<p>the reason for the issue is that you did the case split before the intro, so it's not just an unused variable</p>",
        "id": 410062215,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703620960
    },
    {
        "content": "<p>with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">bycases_unused</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hn</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>the linter does trigger</p>",
        "id": 410062237,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703620975
    },
    {
        "content": "<p>I would expect the lean 3 linter to have the same behavior here</p>",
        "id": 410062273,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703620990
    },
    {
        "content": "<p>The actual proof was more like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">comm2</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hm</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">Nat.mul_comm</span>\n</code></pre></div>",
        "id": 410062449,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703621098
    },
    {
        "content": "<p>I'll test mathlib linter now.</p>",
        "id": 410062478,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703621114
    },
    {
        "content": "<p>that doesn't have an unused variable</p>",
        "id": 410062571,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703621166
    },
    {
        "content": "<p>Indeed, Lean 3 doesn't catch it too. Can we catch this (may be, not on the fly, if it takes time)?</p>",
        "id": 410062866,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703621446
    },
    {
        "content": "<p>sure but what are you looking for</p>",
        "id": 410062897,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703621481
    },
    {
        "content": "<p>One of the branches of <code>by_cases</code> ignores the assumption, thus we can drop the <code>by_cases</code>.</p>",
        "id": 410063008,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703621552
    },
    {
        "content": "<p>And similarly for <code>cases</code> (though this can be more tricky)</p>",
        "id": 410063046,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703621593
    },
    {
        "content": "<p>A related request: report unused <code>have := something</code>, not only <code>have h := something</code>.</p>",
        "id": 410063528,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703621915
    },
    {
        "content": "<p>I'm cleaning up some <code>have _ :=</code> now.</p>",
        "id": 410064176,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703622447
    },
    {
        "content": "<p>If this is turned into an em with rcases (not cases, that's got a bug open) the linter will trigger. Not that I think we should get rid of by_cases</p>",
        "id": 410069148,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1703626433
    },
    {
        "content": "<p>Indeed, <code>rcases eq_or_ne m 0 with rfl | hm</code> triggers the linter.</p>",
        "id": 410069232,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703626483
    },
    {
        "content": "<p>Or do you mean something else?</p>",
        "id": 410069273,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1703626520
    },
    {
        "content": "<p>Yes, I do mean that!</p>",
        "id": 410069451,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1703626652
    }
]