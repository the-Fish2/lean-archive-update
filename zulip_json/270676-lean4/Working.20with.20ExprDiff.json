[
    {
        "content": "<p>I have some term of <code>ExprDiff</code>, and I would like to extract the actual subexpressions that are part of the diff. I'm sure we have some functions that accomplish this but I can't seem to find anything useful. Note that <code>ExprDiff</code> itself contains only the positions of the diffs:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Qq</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Qq</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVarQ</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">e1</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">((</span><span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">e2</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">((</span><span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">d</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.Widget.exprDiff</span> <span class=\"n\">e1</span> <span class=\"n\">e2</span>\n  <span class=\"n\">for</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">d.changesBefore</span> <span class=\"k\">do</span>\n    <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{i}, {j}\"</span>\n  <span class=\"n\">for</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">d.changesAfter</span> <span class=\"k\">do</span>\n    <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{i}, {j}\"</span>\n</code></pre></div>",
        "id": 412606834,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1705087534
    },
    {
        "content": "<p>In the example above, i would like to somehow extract that exprs associated to <code>1</code> and <code>4</code>.</p>",
        "id": 412607055,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1705087629
    },
    {
        "content": "<p>Maybe it's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.viewSubexpr#doc\">docs#Lean.Meta.viewSubexpr</a> or <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Core.viewSubexpr#doc\">docs#Lean.Core.viewSubexpr</a> ?</p>\n<p>The first instantiates binders, creating a valid local context for the subexpression, and the second doesn't.</p>",
        "id": 412607479,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705087816
    },
    {
        "content": "<p>Thanks sounds promising! Thanks!</p>",
        "id": 412607533,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1705087842
    },
    {
        "content": "<p>Works exactly as expected! Here is an example in case someone looks for this in the future:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Qq</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Qq</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVarQ</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">e1</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">((</span><span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">e2</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">((</span><span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">d</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.Widget.exprDiff</span> <span class=\"n\">e1</span> <span class=\"n\">e2</span>\n  <span class=\"n\">for</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">d.changesBefore</span> <span class=\"k\">do</span>\n    <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{← Core.viewSubexpr i e1}\"</span>\n  <span class=\"n\">for</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">d.changesAfter</span> <span class=\"k\">do</span>\n    <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{← Core.viewSubexpr i e2}\"</span>\n</code></pre></div>",
        "id": 412608151,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1705088044
    },
    {
        "content": "<p>(Note that if the diffs are under binders, then <code>Core.viewSubexpr</code> might give expressions with bvars)</p>",
        "id": 412612229,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705089753
    }
]