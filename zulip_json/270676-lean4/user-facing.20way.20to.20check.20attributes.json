[
    {
        "content": "<p>How can I check if a specific declaration has a specific attribute without diving into meta? Is there something like <code>#print attributes</code>?</p>",
        "id": 421266023,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1707837813
    },
    {
        "content": "<p>Unfortunately there is not a uniform mechanism: each attribute is free to manage its contents however it likess.</p>",
        "id": 421368157,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1707884475
    },
    {
        "content": "<p>Coming back to this, I had a thought - what if there was an opt-(in/out) standardised way to do this? So that way we don't have to have _all_ attributes do this, but I think it is generally super helpful to check whether X attribute is on X lemma. This could've been useful in <a href=\"https://github.com/leanprover-community/mathlib4/pull/10494\">#10494</a>, for example - we could've turned the manual checking that all the <code>@[fun_prop]</code> attributes were moved into a test file that guarantees that they are so tagged (and will remain that way in the future, unless changes are needed)</p>",
        "id": 422214260,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1708342361
    },
    {
        "content": "<p>I have had vague plans for this for some time, search \"attribute delaborator\" on this zulip, but nothing particularly concrete. It would have to be a new subsystem in core so probably best to have someone at the FRO on it, perhaps <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span></p>",
        "id": 422570526,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1708505585
    },
    {
        "content": "<p>note that if you know the attribute you want to check in advance, this is usually not so hard, but as Scott says every attribute stores the data in a different way and there is no guarantee that you can recover what the original tagging was from the state</p>",
        "id": 422570774,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1708505683
    }
]