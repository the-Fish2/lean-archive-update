[
    {
        "content": "<p>Hi everyone, I have another metaprogramming question.</p>\n<p>I'm trying to find an \"Or\" in the hypothesis, but I can't seem to make this work. For \"And\" I just pattern matched on \"And.intro\" and that seemed to work. I even found that I can do \".and?\" on an expr to test this without pattern matching. But there is no \".or?\", and pattern matching on \"Or\" doesn't do what I expect. Is Or somehow different because it has 2 constructors? But Or still has type a -&gt; b -&gt; Prop, so I would expect that my naive pattern matching below would work just fine...?</p>\n<p>Mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"n\">Term</span> <span class=\"n\">Meta</span> <span class=\"n\">PrettyPrinter</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"mwe\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">goal</span> <span class=\"bp\">←</span> <span class=\"n\">getMainGoal</span>\n  <span class=\"n\">goal.withContext</span> <span class=\"k\">do</span>\n    <span class=\"n\">for</span> <span class=\"n\">ldecl</span> <span class=\"k\">in</span> <span class=\"bp\">←</span> <span class=\"n\">getLCtx</span> <span class=\"k\">do</span>\n      <span class=\"k\">if</span> <span class=\"n\">ldecl.isImplementationDetail</span> <span class=\"k\">then</span>\n        <span class=\"n\">continue</span>\n      <span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">ldecl.fvarId</span>\n      <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">h.getType</span><span class=\"o\">)</span>\n      <span class=\"k\">if</span> <span class=\"n\">t.isApp</span> <span class=\"bp\">∧</span> <span class=\"n\">t.appFn</span><span class=\"bp\">!.</span><span class=\"n\">const</span><span class=\"bp\">?.</span><span class=\"n\">isSome</span> <span class=\"bp\">∧</span> <span class=\"n\">t.appFn</span><span class=\"bp\">!.</span><span class=\"n\">constName</span><span class=\"bp\">!</span> <span class=\"bp\">==</span> <span class=\"bp\">``</span><span class=\"n\">Or</span> <span class=\"k\">then</span> <span class=\"n\">dbg_trace</span> <span class=\"n\">f</span><span class=\"bp\">!</span><span class=\"s2\">\"found or with if: {t}\"</span> <span class=\"k\">else</span> <span class=\"n\">dbg_trace</span> <span class=\"s2\">\"no\"</span>\n      <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"bp\">←</span> <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">Expr.app</span> <span class=\"o\">(</span><span class=\"n\">Expr.const</span> <span class=\"bp\">``</span><span class=\"n\">Or</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">dbg_trace</span> <span class=\"n\">f</span><span class=\"bp\">!</span><span class=\"s2\">\"found or: {t}\"</span>\n      <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">dbg_trace</span> <span class=\"n\">f</span><span class=\"bp\">!</span><span class=\"s2\">\"unmatched: {t}\"</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">mwe</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>When you put the cursor on \"example\" it prints \"unmatched: Or ...\", whereas I would expect the match above it to catch it. I even tried matching it entirely manually like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">if</span> <span class=\"n\">t.isApp</span> <span class=\"bp\">∧</span> <span class=\"n\">t.appFn</span><span class=\"bp\">!.</span><span class=\"n\">const</span><span class=\"bp\">?.</span><span class=\"n\">isSome</span> <span class=\"bp\">∧</span> <span class=\"n\">t.appFn</span><span class=\"bp\">!.</span><span class=\"n\">constName</span> <span class=\"bp\">==</span> <span class=\"bp\">``</span><span class=\"n\">Or</span> <span class=\"k\">then</span> <span class=\"n\">dbg_trace</span> <span class=\"n\">f</span><span class=\"bp\">!</span><span class=\"s2\">\"found or with if: {t}\"</span> <span class=\"k\">else</span> <span class=\"n\">dbg_trace</span> <span class=\"s2\">\"no\"</span>\n</code></pre></div>\n<p>That doesn't work either. When I print the term it really does say <code>Or _uniq.abc _uniq.def</code>, which suggests it really is an <code>.apply (.const ``Or _) _</code>...?</p>",
        "id": 421815547,
        "sender_full_name": "Bob Rubbens",
        "timestamp": 1708073723
    },
    {
        "content": "<p><code>a ∨ b</code> is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">``</span><span class=\"n\">Or</span> <span class=\"o\">[})</span> <span class=\"n\">some_fvar</span><span class=\"o\">)</span> <span class=\"n\">some_other_fvar</span>\n</code></pre></div>",
        "id": 421816430,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708074063
    },
    {
        "content": "<p>So <code>Expr.app (Expr.const ``Or _) _</code> won't find it</p>",
        "id": 421816474,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708074087
    },
    {
        "content": "<p>I'm also not sure what</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">if</span> <span class=\"n\">t.isApp</span> <span class=\"bp\">∧</span> <span class=\"n\">t.appFn</span><span class=\"bp\">!.</span><span class=\"n\">const</span><span class=\"bp\">?.</span><span class=\"n\">isSome</span> <span class=\"bp\">∧</span> <span class=\"n\">t.appFn</span><span class=\"bp\">!.</span><span class=\"n\">constName</span><span class=\"bp\">!</span> <span class=\"bp\">==</span> <span class=\"bp\">``</span><span class=\"n\">Or</span> <span class=\"k\">then</span> <span class=\"n\">dbg_trace</span> <span class=\"n\">f</span><span class=\"bp\">!</span><span class=\"s2\">\"found or with if: {t}\"</span> <span class=\"k\">else</span> <span class=\"n\">dbg_trace</span> <span class=\"s2\">\"no\"</span>\n</code></pre></div>\n<p>is trying to achieve</p>",
        "id": 421816637,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708074138
    },
    {
        "content": "<p>Oooh gosh. Thanks for pointing out that mistake... So stupid. Thank god there is this forum otherwise I wouldn't get anything done</p>",
        "id": 421816836,
        "sender_full_name": "Bob Rubbens",
        "timestamp": 1708074240
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"381694\">Bob Rubbens</span> has marked this topic as resolved.</p>",
        "id": 421816891,
        "sender_full_name": "Notification Bot",
        "timestamp": 1708074248
    },
    {
        "content": "<p>Out of curiosity, that still leaves the mystery of why there is no <code>.or?</code> on Expr, though...</p>",
        "id": 421816996,
        "sender_full_name": "Bob Rubbens",
        "timestamp": 1708074288
    },
    {
        "content": "<p>Well you'd need a <code>.yourFavoriteConst?</code> function for every <code>yourFavoriteConst</code></p>",
        "id": 421817111,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708074332
    },
    {
        "content": "<p>Incidentally, Qq was invented precisely to make this sort of matching less painful</p>",
        "id": 421817170,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708074358
    },
    {
        "content": "<p>With Qq you can do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">t</span> <span class=\"bp\">|</span> <span class=\"c1\">-- fail here</span>\n<span class=\"c1\">-- succeed here</span>\n</code></pre></div>",
        "id": 421817418,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708074454
    },
    {
        "content": "<p>That looks way better yeah... I need to give getting Qq to work again a shot, last time I couldn't get it to work but my code is becoming more and more spaghetti.</p>",
        "id": 421821997,
        "sender_full_name": "Bob Rubbens",
        "timestamp": 1708076276
    },
    {
        "content": "<p>You might need <code>let ⟨0, ~q(Prop), ~q($a ∨ $b)⟩ ← inferTypeQ t</code> there, if <code>t : Expr</code></p>",
        "id": 421822376,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708076404
    },
    {
        "content": "<p>Playing the .app game when there are several arguments gets old really quickly. But there are functions to do that such as isApp, getAppFn getAppArgs (those are approximate names, I'm on mobile). I think they are defined in the same file as Expr.</p>",
        "id": 421848130,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708086071
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> has marked this topic as unresolved.</p>",
        "id": 421850742,
        "sender_full_name": "Notification Bot",
        "timestamp": 1708087308
    },
    {
        "content": "<p>(to combine the threads again)</p>",
        "id": 421850816,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708087325
    },
    {
        "content": "<p>If you insist on <code>app</code>-matching rather than <code>~q()</code>, you can match on <code>mkApp3</code> etc as well to avoid writing <code>app</code> a bunch.</p>",
        "id": 421850894,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708087371
    },
    {
        "content": "<p>Here are some of those functions:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"mwe\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">goal</span> <span class=\"bp\">←</span> <span class=\"n\">getMainGoal</span>\n  <span class=\"n\">goal.withContext</span> <span class=\"k\">do</span>\n    <span class=\"n\">for</span> <span class=\"n\">ldecl</span> <span class=\"k\">in</span> <span class=\"bp\">←</span> <span class=\"n\">getLCtx</span> <span class=\"k\">do</span>\n      <span class=\"k\">if</span> <span class=\"n\">ldecl.isImplementationDetail</span> <span class=\"k\">then</span>\n        <span class=\"n\">continue</span>\n      <span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">ldecl.fvarId</span>\n      <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">h.getType</span><span class=\"o\">)</span>\n      <span class=\"k\">if</span> <span class=\"n\">t.isAppOfArity</span> <span class=\"bp\">``</span><span class=\"n\">Or</span> <span class=\"mi\">2</span> <span class=\"k\">then</span>\n        <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"found or with if: {t}\"</span> <span class=\"k\">else</span> <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"no\"</span>\n      <span class=\"k\">match</span> <span class=\"n\">t.getAppFnArgs</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">``</span><span class=\"n\">Or</span><span class=\"o\">,</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"found or: {t} with {p} and {q}\"</span>\n      <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"unmatched: {t}\"</span>\n</code></pre></div>",
        "id": 421901223,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708102978
    },
    {
        "content": "<p>Note: use <code>m!</code> strings and <code>logInfo</code> to get hoverable expressions in messages localized at <code>mwe</code>.</p>",
        "id": 421901300,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708103007
    },
    {
        "content": "<p>Here's the Qq version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Qq</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"n\">Term</span> <span class=\"n\">Meta</span> <span class=\"n\">PrettyPrinter</span> <span class=\"n\">Qq</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"mwe\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">goal</span> <span class=\"bp\">←</span> <span class=\"n\">getMainGoal</span>\n  <span class=\"n\">goal.withContext</span> <span class=\"k\">do</span>\n    <span class=\"n\">for</span> <span class=\"n\">ldecl</span> <span class=\"k\">in</span> <span class=\"bp\">←</span> <span class=\"n\">getLCtx</span> <span class=\"k\">do</span>\n      <span class=\"k\">if</span> <span class=\"n\">ldecl.isImplementationDetail</span> <span class=\"k\">then</span>\n        <span class=\"n\">continue</span>\n      <span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">ldecl.fvarId</span>\n      <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">$</span><span class=\"n\">q</span><span class=\"o\">),</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">←</span> <span class=\"n\">inferTypeQ</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">fvar</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">logInfo</span> <span class=\"s2\">\"not an or\"</span>\n      <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"found or: {h} with {p} and {q}\"</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"bp\">∨</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">mwe</span>\n</code></pre></div>\n<p>which gives you <code>h : Q($p ∨ $q)</code> as well.</p>",
        "id": 421916800,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708108369
    },
    {
        "content": "<p>I'm not entirely certain if I still need to use <code>instantiateMVars</code> there</p>",
        "id": 421916887,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708108405
    },
    {
        "content": "<p>What approach is safe from <code>mdata</code>? I constantly run into that issue, everything works nice but then it all of a sudden it mysteriously stops working in some cases. I'm thinking about writing a tactic <code>mdatafy</code> which take the current goal and litters the expression with useless mdata. It would be useful for debugging tactics.</p>",
        "id": 421927756,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1708112832
    },
    {
        "content": "<p>My code is not safe from mdata. You have to do <code>t.consumeMData.getAppFnArgs</code> instead, or do something like <code>(&lt;- whnfR t).getAppFnArgs</code>, if you're ok unfolding reducible definitions.</p>\n<p>The Qq version should be safe from mdata, since it does the matching up to reducible transparency, I believe. It should also be safe from needing instantiateMVars</p>",
        "id": 421928530,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708113141
    },
    {
        "content": "<p>Ohh yeah maybe I should call it <code>obfuscate</code> it would add bunch of mdata and hide stuff behind mvars.</p>",
        "id": 421930482,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1708113901
    },
    {
        "content": "<p>I would love this kind of tactic fuzzing! I'm sure it would uncover many issues.</p>",
        "id": 422002842,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1708167808
    },
    {
        "content": "<p>All the functions for matching on <code>Expr</code>s (<code>getAppFn</code> etc.) should ignore <code>mdata</code> by default (with a primed variant for the rare cases where <code>mdata</code> should not be ignored). As it stands, they're a huge footgun, which even core has fired at times. I suggested this a while ago in <a href=\"https://github.com/leanprover/lean4/pull/2026\">lean4#2026</a> and would be willing to do the refactor, but I didn't get feedback on whether this was desired.</p>",
        "id": 422003222,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1708168132
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/Matching.20against.20app.20.28const.20Or.20_.29.20_.20does.20not.20work/near/421928530\">said</a>:</p>\n<blockquote>\n<p>You have to do <code>t.consumeMData.getAppFnArgs</code> instead</p>\n</blockquote>\n<p>This is not sufficient because it only removes the first layer of <code>mdata</code>. <code>getAppFnArgs</code> should instead use <code>withApp'</code>. I think it proves my point if even Kyle gets this semi-wrong.</p>",
        "id": 422003510,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1708168449
    },
    {
        "content": "<p>Arguably anything but (reducible) defeq matching is still a footgun, because anything else gives weird behavior around <code>abbrev</code></p>",
        "id": 422318965,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708384011
    },
    {
        "content": "<p>Yes, there are multiple levels of footgun here. The vast majority of matching should be up to reducible defeq; a minority should be syntactic up to <code>mdata</code> and very occasionally (in my experience, never) you might need purely syntactic matching.</p>",
        "id": 422385572,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1708424121
    }
]