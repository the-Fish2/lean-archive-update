[
    {
        "content": "<p>Now <a href=\"https://github.com/leanprover-community/mathlib4/pull/8386\">#8386</a> has landed, mathlib compiles 20% quicker. Where is the next big speedup coming from?</p>\n<p>One suggestion (made several times here and there on this Zulip) is that another big saving might come from decreasing the priority of instances created by <code>extends</code>, i.e. going back to the behaviour in lean3(c?). One suggestion made by <span class=\"user-mention\" data-user-id=\"110050\">@Sébastien Gouëzel</span> was: 150 for parents with a direct <code>toA</code> field, 100 for the other ones. This would be a pretty small change in core I guess, perhaps easy for someone who knows what they're doing. Perhaps a bigger project would be to ensure that things stay that way, with a linter making sure that instances that always apply have a priority &lt; 1000 (say 100 most of the time). Another approach, if the core devs aren't happy with this idea, would be to just make the linter and then adjust all the priorities manually.</p>\n<p>I have seen typeclass inference going completely off the rails many times, it's trying to find a simple path involving algebra through the instance tree but all of a sudden it's thinking about topology and orders and norms and all kinds of irrelevant crazy things which aren't anywhere mentioned in the tactic state. This change would, I believe, greatly reduce the amount of crazy investigations of this form.</p>",
        "id": 420039724,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707223736
    },
    {
        "content": "<p>Another non core approach would be a custom <code>class</code> that adds the priority adjustments automatically.</p>",
        "id": 420043538,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1707224901
    },
    {
        "content": "<p>Is there a core Lean issue opened about this?</p>",
        "id": 420078414,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707234930
    },
    {
        "content": "<p>Yes, <a href=\"https://github.com/leanprover/lean4/pull/2325\">lean4#2325</a></p>",
        "id": 420078687,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1707235007
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2905\">lean4#2905</a> is related here too, which adds instances with priority 1000 that should not be instances at all</p>",
        "id": 420078696,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707235010
    },
    {
        "content": "<p>Re: <a href=\"https://github.com/leanprover/lean4/pull/2325\">lean4#2325</a>, I think now that option 3, implemented in Mathlib, is probably the way to go here.</p>",
        "id": 420152587,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1707261581
    },
    {
        "content": "<p>So this boils down to either modifying the behaviour of <code>class</code> in mathlib, or writing a linter?</p>",
        "id": 420152948,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707261834
    }
]