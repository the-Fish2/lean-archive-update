[
    {
        "content": "<p>mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">syn</span> <span class=\"o\">:</span> <span class=\"n\">Except</span> <span class=\"n\">_</span> <span class=\"n\">Lean.Syntax</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.withImportModules</span>\n    <span class=\"o\">(</span><span class=\"n\">imports</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[])</span>\n    <span class=\"o\">(</span><span class=\"n\">opts</span> <span class=\"o\">:=</span> <span class=\"n\">default</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">trustLevel</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n    <span class=\"bp\">&lt;|</span> <span class=\"k\">fun</span> <span class=\"n\">env</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">EIO.toIO'</span> <span class=\"bp\">&lt;|</span>\n    <span class=\"n\">Lean.Core.CoreM.run'</span>\n      <span class=\"o\">(</span><span class=\"n\">ctx</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n        <span class=\"n\">fileName</span> <span class=\"o\">:=</span> <span class=\"s2\">\"Example.lean\"</span>\n        <span class=\"n\">fileMap</span> <span class=\"o\">:=</span> <span class=\"n\">default</span>\n      <span class=\"o\">})</span>\n      <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n        <span class=\"n\">env</span>\n      <span class=\"o\">})</span>\n      <span class=\"o\">(</span><span class=\"n\">Lean.liftCommandElabM</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">do</span>\n        <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">def</span> <span class=\"n\">hi</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">))</span>\n  <span class=\"k\">match</span> <span class=\"n\">syn</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"n\">exc</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">IO.println</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">exc.toMessageData.toString</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">syn</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">IO.println</span> <span class=\"o\">(</span><span class=\"n\">syn.prettyPrint.pretty</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">main</span>\n<span class=\"c1\">-- def  hi  (  x  :  Int  )  :=  sorry</span>\n</code></pre></div>\n<p>Is there some way I can prettyprint the syntax without so much extra whitespace?</p>",
        "id": 436335136,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1714503437
    },
    {
        "content": "<p>There's a better function inside the <code>PrettyPrinter</code> namespace</p>",
        "id": 436346721,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714508070
    },
    {
        "content": "<p>aha, thanks!</p>\n<p>updated MWE for my own future reference:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">syn</span> <span class=\"o\">:</span> <span class=\"n\">Except</span> <span class=\"n\">_</span> <span class=\"n\">Lean.Format</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.withImportModules</span>\n    <span class=\"o\">(</span><span class=\"n\">imports</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[])</span>\n    <span class=\"o\">(</span><span class=\"n\">opts</span> <span class=\"o\">:=</span> <span class=\"n\">default</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">trustLevel</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n    <span class=\"bp\">&lt;|</span> <span class=\"k\">fun</span> <span class=\"n\">env</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">EIO.toIO'</span> <span class=\"bp\">&lt;|</span>\n    <span class=\"n\">Lean.Core.CoreM.run'</span>\n      <span class=\"o\">(</span><span class=\"n\">ctx</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n        <span class=\"n\">fileName</span> <span class=\"o\">:=</span> <span class=\"s2\">\"Example.lean\"</span>\n        <span class=\"n\">fileMap</span> <span class=\"o\">:=</span> <span class=\"n\">default</span>\n      <span class=\"o\">})</span>\n      <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n        <span class=\"n\">env</span>\n      <span class=\"o\">})</span>\n      <span class=\"o\">(</span><span class=\"k\">do</span>\n        <span class=\"k\">let</span> <span class=\"n\">opt</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.liftCommandElabM</span> <span class=\"o\">(</span><span class=\"k\">do</span>\n          <span class=\"k\">let</span> <span class=\"n\">int</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.mkIdent</span> <span class=\"bp\">``</span><span class=\"n\">Unit</span>\n          <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">opaque</span> <span class=\"n\">hi</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">int</span><span class=\"o\">))</span>\n        <span class=\"n\">Lean.PrettyPrinter.formatCommand</span> <span class=\"n\">opt</span>\n      <span class=\"o\">)</span>\n  <span class=\"k\">match</span> <span class=\"n\">syn</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"n\">exc</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">IO.println</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">exc.toMessageData.toString</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">syn</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">IO.println</span> <span class=\"o\">(</span><span class=\"n\">syn.pretty</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">main</span> <span class=\"c1\">--opaque hi.1 (x.1 : Unit) : Unit</span>\n</code></pre></div>",
        "id": 436359826,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1714513962
    }
]