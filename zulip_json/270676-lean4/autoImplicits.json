[
    {
        "content": "<p>I am trying to understand the FLT project's lakefile so I can document it. It currently starts like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">moreServerArgs</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span>\n  <span class=\"s2\">\"-Dpp.unicode.fun=true\"</span><span class=\"o\">,</span> <span class=\"c1\">-- pretty-prints `fun a ↦ b`</span>\n  <span class=\"s2\">\"-Dpp.proofs.withType=false\"</span><span class=\"o\">,</span> <span class=\"c1\">-- no idea what this does</span>\n  <span class=\"s2\">\"-DautoImplicit=false\"</span><span class=\"o\">,</span> <span class=\"c1\">-- attempt to switch off auto-implicit</span>\n  <span class=\"s2\">\"-DrelaxedAutoImplicit=false\"</span> <span class=\"c1\">-- attempt to switch off relaxed auto-implicit</span>\n<span class=\"o\">]</span>\n</code></pre></div>\n<p>The reason I have autoimplicits set to max off is that <em>I personally am a rubbish coder</em>. I am constantly making typos/misspellings and I really need Lean to say \"no you goofed up here Kevin\". But I am wondering whether this is a particularly good reason to enforce this convention on my coworkers. In my dream world I would just have a switch somewhere in VS Code in the upside-down A saying \"switch on autoimplicits\", which I'd do if I was writing my own code, and if I was looking at Lean code with this switch off then some window in VS Code would be shaded slightly red or something :-). </p>\n<p>Another example where I'd like to play with autoImplicits is when I have mathlib open and someone posts a question on the Zulip which doesn't involve mathlib and where autoimplicits are on by default so are not mentioned in the MWE, which then doesn't work for me locally in a scratch file. I'd like to just switch them on quickly when trying to answer the question and then switch them back off.</p>",
        "id": 437175142,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714956159
    },
    {
        "content": "<p>You can turn it on in a single file.</p>",
        "id": 437175670,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1714956808
    },
    {
        "content": "<p><code>set_option autoImplicit true</code></p>",
        "id": 437175731,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1714956854
    },
    {
        "content": "<p>The <code>withType</code> bit is about whether a proof term that appears in the infoview (as an <code>_</code>) displays with a type ascription or not. (i.e., <code>_</code> vs. <code>(_ : m = n)</code>, or whatever).</p>",
        "id": 437178500,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1714959785
    },
    {
        "content": "<p><code>pp.proofs.withType</code> is false by default now</p>",
        "id": 437179989,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714961257
    },
    {
        "content": "<p>I always turn on both autoImplicit and relaxedAutoImplicit. Can I get away with turning only one on?</p>",
        "id": 437181954,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714962726
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/12689\">#12689</a> remove the now redundany <code>pp.proofs.withType</code> setting in Mathlib's lakefile.</p>",
        "id": 437189375,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714968687
    },
    {
        "content": "<p><code>moreServerArgs</code> is outdated now; <a href=\"https://github.com/ImperialCollegeLondon/FLT/pull/57\">https://github.com/ImperialCollegeLondon/FLT/pull/57</a> switches to the preferred <code>leanOptions</code>.</p>",
        "id": 437243463,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714995085
    },
    {
        "content": "<p>(and in fact, <code>moreServerArgs</code> does nothing if you don't use it in the lakefile!)</p>",
        "id": 437244474,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714995496
    },
    {
        "content": "<p>Oh that would explain why autoImplicits were on anyway! (and you can see from the resulting breakage why I need them off!)</p>",
        "id": 437245762,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714995971
    },
    {
        "content": "<p>Note that to see if my PR works, you have to click the \"allow CI\" button at the bottom of the page (or maybe \"approve workflow\")</p>",
        "id": 437246170,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714996143
    },
    {
        "content": "<p>Without autoImplicits,  you'll run into errors like the example below. The question is whether you consider this a reasonable trade off for your fellow contributors:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span> <span class=\"n\">experiment_1</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">relaxedAutoImplicit</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">compose</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"c1\">-- errors on all \\alpha, \\beta, and \\gamma</span>\n<span class=\"kd\">end</span> <span class=\"n\">experiment_1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">compose2</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"c1\">-- no errors</span>\n</code></pre></div>",
        "id": 437275520,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1715006050
    }
]