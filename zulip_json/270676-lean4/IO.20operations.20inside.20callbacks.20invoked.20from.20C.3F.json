[
    {
        "content": "<p>I'm writing some bindings in Lean. I'd like to provide functionality for the user to supply callbacks that will eventually be called from C but have IO operations inside them:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lean_obj_res</span> <span class=\"n\">lean_test</span><span class=\"o\">(</span><span class=\"n\">lean_object</span> <span class=\"bp\">*</span><span class=\"n\">obj</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"n\">printf</span><span class=\"o\">(</span><span class=\"s2\">\"calling lean test!</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n  <span class=\"n\">lean_object</span> <span class=\"bp\">*</span><span class=\"n\">result</span> <span class=\"bp\">=</span> <span class=\"n\">lean_apply_1</span><span class=\"o\">(</span><span class=\"n\">obj</span><span class=\"o\">,</span>  <span class=\"n\">lean_mk_string</span><span class=\"o\">(</span><span class=\"s2\">\"hello\"</span><span class=\"o\">))</span><span class=\"bp\">;</span>\n  <span class=\"n\">printf</span><span class=\"o\">(</span><span class=\"s2\">\"lean apply worked!</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n  <span class=\"n\">lean_dec_ref</span><span class=\"o\">(</span><span class=\"n\">result</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n  <span class=\"n\">return</span> <span class=\"n\">lean_io_result_mk_ok</span><span class=\"o\">(</span><span class=\"n\">lean_box</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">))</span><span class=\"bp\">;</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>with the corresponding binding:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">extern</span> <span class=\"s2\">\"lean_test\"</span><span class=\"kd\">]</span>\n<span class=\"n\">opaque</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span>\n</code></pre></div>\n<p>however, when I run this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n     <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"s2\">\"message is {s}\"</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>nothing gets printed. </p>\n<p>Am I doing something wrong?</p>",
        "id": 435959048,
        "sender_full_name": "Kiran",
        "timestamp": 1714369291
    },
    {
        "content": "<p>Ah, figured it out, I needed to appy2, and pass in a world:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lean_object</span> <span class=\"bp\">*</span><span class=\"n\">result</span> <span class=\"bp\">=</span> <span class=\"n\">lean_apply_2</span><span class=\"o\">(</span><span class=\"n\">obj</span><span class=\"o\">,</span> <span class=\"n\">lean_mk_string</span><span class=\"o\">(</span><span class=\"s2\">\"hello\"</span><span class=\"o\">),</span> <span class=\"n\">lean_io_mk_world</span><span class=\"o\">())</span><span class=\"bp\">;</span>\n</code></pre></div>",
        "id": 435964251,
        "sender_full_name": "Kiran",
        "timestamp": 1714371940
    }
]