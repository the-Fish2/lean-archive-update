[
    {
        "content": "<p>I am trying to create a <code>module_facet</code> that will pick up any <code>Module.shim.c</code>, build it and include it in the library or executable.</p>\n<p>When all modules in the library have a corresponding <code>.shim.c</code> it works. When at least one module does not have a <code>.shim.c</code> the build fails with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"bp\">...</span>\n<span class=\"n\">ℹ</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">6</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Replayed</span><span class=\"w\"> </span><span class=\"n\">MyLibrary</span><span class=\"o\">:</span><span class=\"n\">shim</span><span class=\"bp\">.</span><span class=\"n\">c</span>\n<span class=\"n\">trace</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">.&gt;</span><span class=\"w\"> </span><span class=\"n\">cc</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"bp\">././.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">MyLibrary</span><span class=\"bp\">.</span><span class=\"n\">shim</span><span class=\"bp\">.</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"bp\">././././</span><span class=\"n\">MyLibrary</span><span class=\"bp\">.</span><span class=\"n\">shim</span><span class=\"bp\">.</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"n\">O3</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"n\">DNDEBUG</span>\n<span class=\"n\">error</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">build</span><span class=\"w\"> </span><span class=\"n\">failed</span>\n</code></pre></div>\n<p>Here is the <code>lakefile.lean</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Lake</span>\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Lake</span><span class=\"w\"> </span><span class=\"n\">DSL</span>\n\n<span class=\"n\">package</span><span class=\"w\"> </span><span class=\"bp\">«</span><span class=\"n\">MyLibrary</span><span class=\"bp\">»</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n\n<span class=\"n\">module_facet</span><span class=\"w\"> </span><span class=\"n\">shim</span><span class=\"bp\">.</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">mod</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">FilePath</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">shimCFile</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">mod</span><span class=\"bp\">.</span><span class=\"n\">leanFile</span><span class=\"bp\">.</span><span class=\"n\">withExtension</span><span class=\"w\"> </span><span class=\"s2\">\"shim.c\"</span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">shimCFile</span><span class=\"bp\">.</span><span class=\"n\">pathExists</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">    </span><span class=\"n\">withRegisterJob</span><span class=\"w\"> </span><span class=\"n\">s!</span><span class=\"s2\">\"{mod.name}:shim.c\"</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">      </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">shimOFile</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">mod</span><span class=\"bp\">.</span><span class=\"n\">leanLibPath</span><span class=\"w\"> </span><span class=\"s2\">\"shim.o\"</span>\n<span class=\"w\">      </span><span class=\"n\">buildO</span><span class=\"w\"> </span><span class=\"n\">shimOFile</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">pure</span><span class=\"w\"> </span><span class=\"n\">shimCFile</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">mod</span><span class=\"bp\">.</span><span class=\"n\">weakLeancArgs</span><span class=\"w\"> </span><span class=\"n\">mod</span><span class=\"bp\">.</span><span class=\"n\">leancArgs</span>\n<span class=\"w\">  </span><span class=\"k\">else</span>\n<span class=\"w\">    </span><span class=\"n\">none</span><span class=\"w\"> </span><span class=\"c1\">-- &lt;=== how do I skip?</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">default_target</span><span class=\"kd\">]</span>\n<span class=\"n\">lean_lib</span><span class=\"w\"> </span><span class=\"bp\">«</span><span class=\"n\">MyLibrary</span><span class=\"bp\">»</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">nativeFacets</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Module</span><span class=\"bp\">.</span><span class=\"n\">oFacet</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"ss\">`shim.o</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"n\">defaultFacets</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[</span>\n<span class=\"w\">    </span><span class=\"n\">LeanLib</span><span class=\"bp\">.</span><span class=\"n\">sharedFacet</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"c1\">-- libMyLibrary.dylib</span>\n<span class=\"w\">    </span><span class=\"n\">LeanLib</span><span class=\"bp\">.</span><span class=\"n\">staticFacet</span><span class=\"w\">  </span><span class=\"c1\">-- libMyLibrary.a</span>\n<span class=\"w\">  </span><span class=\"o\">]</span>\n</code></pre></div>\n<p>My guess is that I am not properly telling Lake to skip the module without a <code>.shim.c</code> file. How should I do this?</p>\n<p>My guess is that this question is mostly to <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> .</p>\n<p>thanks in advance,</p>",
        "id": 441310637,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1717014301
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"463095\">@Yuri de Wit</span> Unfortunatelt there is not a good way to do this for a dynamic subset at present. <code>nativeFacets</code> requires that each facet produce a valid file path. However, you could split your package into two libraries or a parent and sub-library where one library contains the modules shims and only that uses the shim facet. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">default_target</span><span class=\"kd\">]</span>\n<span class=\"n\">lean_lib</span><span class=\"w\"> </span><span class=\"n\">MyLibrary</span><span class=\"w\"> </span><span class=\"c1\">-- top-level library</span>\n\n<span class=\"n\">lean_lib</span><span class=\"w\"> </span><span class=\"n\">MyLibrary</span><span class=\"bp\">.</span><span class=\"n\">Shim</span><span class=\"w\"> </span><span class=\"kn\">where</span><span class=\"w\"> </span><span class=\"c1\">-- modules with shims</span>\n<span class=\"w\">  </span><span class=\"n\">nativeFacets</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Module</span><span class=\"bp\">.</span><span class=\"n\">oFacet</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"ss\">`shim.o</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 441502939,
        "sender_full_name": "Mac Malone",
        "timestamp": 1717087007
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> Thanks! I will use the workaround.</p>",
        "id": 441574709,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1717109346
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"463095\">@Yuri de Wit</span> Also, as an aside, <code>withRegisterJob</code> is unnecessary in user-written facets / targets. Lake automatically wraps them in a <code>withRegisterJob</code> itself.</p>",
        "id": 441579292,
        "sender_full_name": "Mac Malone",
        "timestamp": 1717111563
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"463095\">Yuri de Wit</span> has marked this topic as resolved.</p>",
        "id": 441774645,
        "sender_full_name": "Notification Bot",
        "timestamp": 1717179787
    }
]