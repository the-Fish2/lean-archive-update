[
    {
        "content": "<p>Currently I'm working on formalizing modal logic, and refactoring my proof.</p>\n<p>I have the following proof (↓), but these proof have almost exactly the same structure.<br>\nSo I want to commonize these proofs by using macros or such means (If I were to implement all logics in <a href=\"https://plato.stanford.edu/ENTRIES/logic-modal/#MapRelBetModLog\">normal modal logic cube</a>, I would have to write about 10 more proofs exactly like these), but I don't know how to do because I'm not familiar with Lean4 metaprogramming. How can I do?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">LogicK.CanonicalModel</span> <span class=\"o\">{</span><span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">Normal.CanonicalModel</span> <span class=\"o\">(</span><span class=\"bp\">𝐊</span> <span class=\"o\">:</span> <span class=\"n\">AxiomSet</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">LogicK.Hilbert.completes</span> <span class=\"o\">:</span> <span class=\"n\">Completeness</span> <span class=\"o\">(</span><span class=\"bp\">𝐊</span> <span class=\"o\">:</span> <span class=\"n\">AxiomSet</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝔽</span><span class=\"o\">((</span><span class=\"bp\">𝐊</span> <span class=\"o\">:</span> <span class=\"n\">AxiomSet</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">FrameClass</span> <span class=\"o\">(</span><span class=\"n\">MaximalConsistentTheory</span> <span class=\"o\">(</span><span class=\"bp\">𝐊</span> <span class=\"o\">:</span> <span class=\"n\">AxiomSet</span> <span class=\"n\">β</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">completeness_def.mpr</span><span class=\"bp\">;</span>\n  <span class=\"n\">intro</span> <span class=\"bp\">Γ</span> <span class=\"n\">hConsis</span><span class=\"bp\">Γ;</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"bp\">Ω</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">Ω</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">exists_maximal_consistent_theory</span> <span class=\"n\">hConsis</span><span class=\"bp\">Γ;</span>\n  <span class=\"n\">existsi</span> <span class=\"n\">CanonicalModel.frame</span><span class=\"bp\">;</span>\n  <span class=\"n\">constructor</span><span class=\"bp\">;</span>\n  <span class=\"bp\">.</span> <span class=\"n\">apply</span> <span class=\"n\">FrameClassDefinability.mp</span><span class=\"bp\">;</span> <span class=\"n\">simp_all</span><span class=\"bp\">;</span>\n  <span class=\"bp\">.</span> <span class=\"n\">existsi</span> <span class=\"n\">CanonicalModel.val</span><span class=\"o\">,</span> <span class=\"bp\">Ω;</span>\n    <span class=\"n\">apply</span> <span class=\"n\">truthlemma'</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">mpr</span><span class=\"bp\">;</span>\n    <span class=\"n\">assumption</span><span class=\"bp\">;</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">LogicS4.CanonicalModel</span> <span class=\"o\">{</span><span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">Normal.CanonicalModel</span> <span class=\"o\">(</span><span class=\"bp\">𝐒</span><span class=\"mi\">𝟒</span> <span class=\"o\">:</span> <span class=\"n\">AxiomSet</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">LogicS4.Hilbert.completes</span> <span class=\"o\">:</span> <span class=\"n\">Completeness</span> <span class=\"o\">(</span><span class=\"bp\">𝐒</span><span class=\"mi\">𝟒</span> <span class=\"o\">:</span> <span class=\"n\">AxiomSet</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝔽</span><span class=\"o\">((</span><span class=\"bp\">𝐒</span><span class=\"mi\">𝟒</span> <span class=\"o\">:</span> <span class=\"n\">AxiomSet</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">FrameClass</span> <span class=\"o\">(</span><span class=\"n\">MaximalConsistentTheory</span> <span class=\"o\">(</span><span class=\"bp\">𝐒</span><span class=\"mi\">𝟒</span> <span class=\"o\">:</span> <span class=\"n\">AxiomSet</span> <span class=\"n\">β</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">completeness_def.mpr</span><span class=\"bp\">;</span>\n  <span class=\"n\">intro</span> <span class=\"bp\">Γ</span> <span class=\"n\">hConsis</span><span class=\"bp\">Γ;</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"bp\">Ω</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">Ω</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">exists_maximal_consistent_theory</span> <span class=\"n\">hConsis</span><span class=\"bp\">Γ;</span>\n  <span class=\"n\">existsi</span> <span class=\"n\">CanonicalModel.frame</span><span class=\"bp\">;</span>\n  <span class=\"n\">constructor</span><span class=\"bp\">;</span>\n  <span class=\"bp\">.</span> <span class=\"n\">apply</span> <span class=\"n\">FrameClassDefinability.mp</span><span class=\"bp\">;</span> <span class=\"n\">simp_all</span><span class=\"bp\">;</span>\n  <span class=\"bp\">.</span> <span class=\"n\">existsi</span> <span class=\"n\">CanonicalModel.val</span><span class=\"o\">,</span> <span class=\"bp\">Ω;</span>\n    <span class=\"n\">apply</span> <span class=\"n\">truthlemma'</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">mpr</span><span class=\"bp\">;</span>\n    <span class=\"n\">assumption</span><span class=\"bp\">;</span>\n</code></pre></div>\n<p><a href=\"https://github.com/SnO2WMaN/lean4-logic/blob/943ecf84381b3445b0d6f6ee8a1d7cdb7c9e72dc/Logic/Modal/Normal/Completeness.lean#L509-L543\">https://github.com/SnO2WMaN/lean4-logic/blob/943ecf84381b3445b0d6f6ee8a1d7cdb7c9e72dc/Logic/Modal/Normal/Completeness.lean#L509-L543</a></p>",
        "id": 420194526,
        "sender_full_name": "SnO2WMaN",
        "timestamp": 1707291239
    }
]