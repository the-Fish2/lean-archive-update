[
    {
        "content": "<p>I just found out that my mental model of how <code>rw</code> works with definitional equality is broken. I expected the following to fail because <code>X</code> is not reducibly defeq to <code>Nat</code>, and so I thought <code>Nat.mul_comm</code> wouldn't fire with <code>rw</code>. But it does!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstanceAs</span> <span class=\"o\">(</span><span class=\"n\">Mul</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.mul_comm</span><span class=\"o\">]</span> <span class=\"c1\">-- works! why?</span>\n</code></pre></div>\n<p>Can someone explain what I'm missing here?</p>",
        "id": 431404276,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1712265640
    },
    {
        "content": "<p>I assume it's because <code>x * y</code> is notation for <code>Nat.mul x y</code>.</p>",
        "id": 431404659,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1712265815
    },
    {
        "content": "<p>I don't follow.</p>",
        "id": 431404763,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1712265860
    },
    {
        "content": "<p>ok, I don't know the details of how <code>rw</code> actually works, but my guess is that in this case it works because the match of the lhs of the goal with <code>Nat.mul ? ?</code> succeeds</p>",
        "id": 431405157,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1712266052
    },
    {
        "content": "<p>again, just a guess</p>",
        "id": 431405245,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1712266088
    },
    {
        "content": "<p>You could try with <code>X := ℝ </code>. <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 431405321,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712266127
    },
    {
        "content": "<p>Still works for what I assume are similar reasons:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">ℝ</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstanceAs</span> <span class=\"o\">(</span><span class=\"n\">Mul</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Real.mul_comm</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Real.mul_comm</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 431405552,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1712266227
    },
    {
        "content": "<p>This also works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">ℝ</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstanceAs</span> <span class=\"o\">(</span><span class=\"n\">Mul</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"n\">ℝ</span><span class=\"o\">)]</span> <span class=\"c1\">-- works! why?</span>\n</code></pre></div>",
        "id": 431405574,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1712266239
    },
    {
        "content": "<p>I thought <code>rw</code> operated at <code>default</code></p>",
        "id": 431405961,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1712266404
    },
    {
        "content": "<p>yeah that's right.</p>",
        "id": 431406087,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1712266449
    },
    {
        "content": "<p>Surely this wasn't the case in Lean 3, though?</p>",
        "id": 431406090,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1712266450
    },
    {
        "content": "<p>I thought everything was at <code>default/semireducible</code> there (says the person who used it very little)</p>",
        "id": 431406782,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1712266763
    },
    {
        "content": "<p>Yeah I am also surprised by this. I thought that the whole point of <code>def</code> was not to let this stuff leak through so how can it leak through?</p>",
        "id": 431411543,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1712268922
    },
    {
        "content": "<p>I mean, it makes sense if <code>rw</code> works at default transparency, I just didn't think that was the case. I'm fairly confident it didn't in Lean 3, but perhaps that changed.</p>",
        "id": 431411733,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1712269010
    },
    {
        "content": "<p>Implicit arguments switch to a higher transparency setting, but I don't remember the exact details</p>",
        "id": 431416341,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1712271622
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> the first example works even if you write <code>by rw [Nat.mul_comm x y]</code></p>",
        "id": 431567146,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1712335838
    },
    {
        "content": "<p>Sure, but that makes sense if implicit arguments use a higher transparency setting:</p>",
        "id": 431586017,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1712343167
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">type_of</span><span class=\"bp\">%</span> <span class=\"o\">(</span><span class=\"n\">Nat.mul_comm</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">with_reducible</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 431586301,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1712343285
    },
    {
        "content": "<p>What breaks if this behavior is disabled?</p>",
        "id": 431654470,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712392675
    },
    {
        "content": "<p>If a heuristic of some kind is still needed, perhaps adapting the rule to not change reducibility of <code>Sort</code>s would work?</p>",
        "id": 431654568,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712392758
    },
    {
        "content": "<p>The reducibility can be controlled using <code>Rewrite.Config</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Config</span> <span class=\"n\">where</span>\n  <span class=\"n\">transparency</span> <span class=\"o\">:</span> <span class=\"n\">TransparencyMode</span> <span class=\"o\">:=</span> <span class=\"n\">TransparencyMode.reducible</span>\n  <span class=\"n\">offsetCnstrs</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n  <span class=\"n\">occs</span> <span class=\"o\">:</span> <span class=\"n\">Occurrences</span> <span class=\"o\">:=</span> <span class=\"n\">Occurrences.all</span>\n</code></pre></div>\n<p>Setting it can be done with this syntax: <code>rw (config := {transparency := .all})</code>. As you can see the default setting is <code>reducible</code>.</p>",
        "id": 431757694,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1712486874
    },
    {
        "content": "<p>Jovan, as alluded to above, the default is using a more lenient interpretation of reducIbility than <code>reducible</code> is supposed to mean.</p>",
        "id": 431758344,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712487386
    },
    {
        "content": "<p>Which is to say; I think that setting is only partially respected</p>",
        "id": 431758369,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712487416
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/reducible.20defeq.20and.20rewrites/near/431654568\">said</a>:</p>\n<blockquote>\n<p>If a heuristic of some kind is still needed, perhaps adapting the rule to not change reducibility of <code>Sort</code>s would work?</p>\n</blockquote>\n<p>Looking at it from a <code>DiscrTree</code> perspective, I think you want unification with the lookup results to work in the <code>reducible</code> transparency. <code>DiscrTree</code> does not index instance arguments, and does not index implicit arguments if they do not satisfy <code>isType</code>. For the not indexed terms I think you do want to change the transparency. But not changing the transparency in the case of implicit type arguments seems alright.</p>",
        "id": 431758506,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1712487537
    },
    {
        "content": "<p>Does rw not currently use discrtrees?</p>",
        "id": 431766180,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712492533
    },
    {
        "content": "<p>No, I thought you were suggesting to change the behaviour of <code>isDefEq</code>. And <code>isDefEq</code> is used in combination with <code>DiscrTree</code> for example in simp.</p>",
        "id": 431770379,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1712494859
    },
    {
        "content": "<p>Because in the above example <code>isDefEq</code> is what changes the transparency setting for implicit arguments.</p>",
        "id": 431770494,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1712494946
    },
    {
        "content": "<p><code>rw??</code> also uses discrimination trees, but in that case it is my <code>RefinedDiscrTree</code> instead of lean's <code>DiscrTree</code>.</p>\n<p><code>rw</code> uses a more light weight form of \"indexing\" (in the function <code>kabstract</code>): it uses <code>Expr.toHeadIndex</code> and <code>Expr.headNumArgs</code> to find the head and number of arguments of each subexpression. And only if those match, will it try the more expensive <code>isDefEq</code> check.</p>",
        "id": 431775246,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1712498930
    }
]