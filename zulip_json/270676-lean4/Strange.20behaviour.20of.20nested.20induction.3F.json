[
    {
        "content": "<p>I must be missing something simple, but I have been staring at this for a while and cannot spot it. In the code below, there is a <code>have</code> in part of a proof which seems to have the wrong induction hypothesis (<code>hb</code> below), hence the proof does not finish. When I extract that as a theorem, everything is fine.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Nat</span>\n<span class=\"kd\">theorem</span><span class=\"w\"> </span><span class=\"n\">add_comm₃</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"kd\">by</span>\n<span class=\"w\">  </span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span>\n<span class=\"w\">  </span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">a</span>\n<span class=\"w\">  </span><span class=\"n\">case</span><span class=\"w\"> </span><span class=\"n\">zero</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">try</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[(</span><span class=\"n\">Nat.add_zero</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)]</span>\n<span class=\"w\">    </span><span class=\"n\">try</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">rw_lemma</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">zero</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"kd\">by</span>\n<span class=\"w\">      </span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">b</span>\n<span class=\"w\">      </span><span class=\"n\">case</span><span class=\"w\"> </span><span class=\"n\">zero</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">        </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[(</span><span class=\"n\">Nat.add_zero</span><span class=\"w\"> </span><span class=\"n\">zero</span><span class=\"o\">)]</span>\n<span class=\"w\">      </span><span class=\"n\">case</span><span class=\"w\"> </span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"n\">aa</span><span class=\"w\"> </span><span class=\"n\">ha</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">        </span><span class=\"n\">try</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"o\">)</span>\n<span class=\"w\">        </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[(</span><span class=\"n\">add_succ</span><span class=\"w\"> </span><span class=\"n\">zero</span><span class=\"w\"> </span><span class=\"n\">aa</span><span class=\"o\">)]</span>\n<span class=\"w\">        </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[(</span><span class=\"n\">ha</span><span class=\"o\">)]</span>\n<span class=\"w\">    </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[(</span><span class=\"n\">rw_lemma</span><span class=\"o\">)]</span>\n<span class=\"w\">  </span><span class=\"n\">case</span><span class=\"w\"> </span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"n\">aa</span><span class=\"w\"> </span><span class=\"n\">ha</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">try</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">rw_lemma</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"n\">aa</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">aa</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"kd\">by</span>\n<span class=\"w\">      </span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">b</span>\n<span class=\"w\">      </span><span class=\"n\">case</span><span class=\"w\"> </span><span class=\"n\">zero</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">        </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[(</span><span class=\"n\">Nat.add_zero</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"n\">aa</span><span class=\"o\">))]</span>\n<span class=\"w\">      </span><span class=\"n\">case</span><span class=\"w\"> </span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"n\">bb</span><span class=\"w\"> </span><span class=\"n\">hb</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">        </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[(</span><span class=\"n\">add_succ</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"n\">aa</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">bb</span><span class=\"o\">)]</span>\n<span class=\"w\">        </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[(</span><span class=\"n\">add_succ</span><span class=\"w\"> </span><span class=\"n\">aa</span><span class=\"w\"> </span><span class=\"n\">bb</span><span class=\"o\">)]</span>\n<span class=\"w\">        </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[(</span><span class=\"n\">hb</span><span class=\"o\">)]</span>\n<span class=\"w\">    </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[(</span><span class=\"n\">rw_lemma</span><span class=\"o\">)]</span>\n<span class=\"w\">    </span><span class=\"n\">try</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[(</span><span class=\"n\">add_succ</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">aa</span><span class=\"o\">)]</span>\n<span class=\"w\">    </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[(</span><span class=\"n\">ha</span><span class=\"o\">)]</span>\n\n\n<span class=\"kd\">theorem</span><span class=\"w\"> </span><span class=\"n\">rw_lemma</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"n\">aa</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">aa</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"kd\">by</span>\n<span class=\"w\">      </span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">b</span>\n<span class=\"w\">      </span><span class=\"n\">case</span><span class=\"w\"> </span><span class=\"n\">zero</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">        </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[(</span><span class=\"n\">Nat.add_zero</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"n\">aa</span><span class=\"o\">))]</span>\n<span class=\"w\">      </span><span class=\"n\">case</span><span class=\"w\"> </span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"n\">bb</span><span class=\"w\"> </span><span class=\"n\">hb</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">        </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[(</span><span class=\"n\">add_succ</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"n\">aa</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">bb</span><span class=\"o\">)]</span>\n<span class=\"w\">        </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[(</span><span class=\"n\">add_succ</span><span class=\"w\"> </span><span class=\"n\">aa</span><span class=\"w\"> </span><span class=\"n\">bb</span><span class=\"o\">)]</span>\n<span class=\"w\">        </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[(</span><span class=\"n\">hb</span><span class=\"o\">)]</span>\n</code></pre></div>\n<p>Any help is appreciated.</p>",
        "id": 440352550,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1716479760
    },
    {
        "content": "<p>Might be an issue with the <code>case</code> tactic and duplicated labels?</p>",
        "id": 440353442,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1716480031
    },
    {
        "content": "<p>(Why do you wrap all your rewrite lemmas in parentheses?)</p>",
        "id": 440353473,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1716480044
    },
    {
        "content": "<p>Have the first step of <code>have rw_lemma</code> be <code>clear ha</code>. That keeps it from being used as an induction hypothesis.</p>",
        "id": 440353795,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1716480138
    },
    {
        "content": "<p>So should it be considered a bug? (The rewrites are in parenthesis as this is the result of code generation, and somehow <code>(tactic|rw [($t)]) for a term </code>t` but not without the parenthesis.</p>",
        "id": 440354039,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1716480218
    },
    {
        "content": "<p>No, it's not a bug</p>",
        "id": 440354231,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1716480268
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/Strange.20behaviour.20of.20nested.20induction.3F/near/440354231\">said</a>:</p>\n<blockquote>\n<p>No, it's not a bug</p>\n</blockquote>\n<p>What is the principle based on which <code>hb</code> has different type in the two cases?</p>",
        "id": 440354397,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1716480335
    },
    {
        "content": "<p>(Watch out that <code>simp [foo]</code> and <code>simp [(foo)]</code> can be different, since the first adds <code>foo</code> as a simp lemma, and the second elaborates <code>foo</code>, abstracts the result, and adds <em>that</em> as a simp lemma.)</p>",
        "id": 440354543,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1716480372
    },
    {
        "content": "<p>The principle is that when you do induction an a variable, then every hypothesis in the local context that depends on that variable is now something that has to be inductively proved to be true.</p>",
        "id": 440354701,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1716480434
    },
    {
        "content": "<p>How do I avoid the parenthesis: <code>(tactic| rw [$t]) does not accept a term </code>$t`</p>",
        "id": 440354723,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1716480441
    },
    {
        "content": "<p>Clearing it says \"I will not depend on this, so do not require me to prove it along with the induction.\"</p>",
        "id": 440354774,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1716480459
    },
    {
        "content": "<p>Maybe <code>rw [$t:term]</code>?</p>",
        "id": 440354786,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1716480466
    },
    {
        "content": "<p>Here's a hint regarding clearing: try doing <code>revert b</code> and see what the goal looks like. That's the form of the induction hypothesis.</p>",
        "id": 440354941,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1716480511
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/Strange.20behaviour.20of.20nested.20induction.3F/near/440354786\">said</a>:</p>\n<blockquote>\n<p>Maybe <code>rw [$t:term]</code>?</p>\n</blockquote>\n<p>Thanks. That works. I thought I had tried that.</p>",
        "id": 440354984,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1716480524
    },
    {
        "content": "<p>The <code>clear</code> works fine. As I am doing code generation I will have to keep track of the context which I will.</p>",
        "id": 440355113,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1716480571
    },
    {
        "content": "<p>The reason I thought to suggest <code>$t:term</code> is that when more complicated expressions are supported in a particular location, then specifying what kind of expression it's supposed to be can help it parse.</p>",
        "id": 440355121,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1716480574
    },
    {
        "content": "<p>I have experienced this and done the same many times. Somehow thought I had tried it here and it failed. But it does work.</p>",
        "id": 440355285,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1716480622
    },
    {
        "content": "<blockquote>\n<p>The <code>clear</code> works fine.</p>\n</blockquote>\n<p>Sure, but it seemed like you were asking why it was necessary, and I think seeing what <code>revert b</code> does is useful. (The <code>induction</code> tactic itself reverts the induction target.)</p>",
        "id": 440355422,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1716480675
    },
    {
        "content": "<p>It's basically <code>revert b; refine Nat.rec ?zero ?zucc</code> followed by some appropriate <code>intro</code>s per case. (The <code>generalizing</code> clause adds more things to be <code>revert</code>ed.)</p>",
        "id": 440355687,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1716480770
    },
    {
        "content": "<p>Indeed <code>revert b</code> with and without the <code>clear</code> makes things vivid. I see that <code>b</code> <em>a priori</em> is a function of the context, hence the induction behave differently.</p>",
        "id": 440355988,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1716480859
    }
]