[
    {
        "content": "<p>Hi, here are two functions ERR and OK, ERR does not compile because of a 'kernel invalid projection' and OK compiles. But I think the two functions ERR and OK should be equivalent?</p>\n<p>The problem appears, when I perform a boolean equality over the projection of a term whose type has been rewritten to be a tuple. I'm not sure how to minimize the problem further.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Ty</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bool</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span>\n  <span class=\"bp\">|</span> <span class=\"n\">prod</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"bp\">→</span> <span class=\"n\">Ty</span> <span class=\"bp\">→</span> <span class=\"n\">Ty</span>\n<span class=\"kn\">open</span> <span class=\"n\">Ty</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Ty.de</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bool</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"n\">prod</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a.de</span> <span class=\"bp\">×</span> <span class=\"n\">b.de</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">BEq</span> <span class=\"o\">(</span><span class=\"n\">t.de</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">beq</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">go</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">t.de</span> <span class=\"bp\">→</span> <span class=\"n\">t.de</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">bool</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"n\">b</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">go</span> <span class=\"n\">α</span> <span class=\"n\">a.1</span> <span class=\"n\">b.1</span> <span class=\"bp\">∧</span> <span class=\"n\">go</span> <span class=\"n\">β</span> <span class=\"n\">a.2</span> <span class=\"n\">b.2</span>\n  <span class=\"n\">go</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">FST</span> <span class=\"o\">(</span><span class=\"n\">ab</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">prod</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">de</span><span class=\"o\">):</span> <span class=\"n\">a.de</span> <span class=\"o\">:=</span> <span class=\"n\">ab.1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ERR</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">t</span><span class=\"bp\">=</span><span class=\"n\">prod</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">a.de</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"n\">t.de</span><span class=\"o\">):</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">e</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"c1\">-- (kernel) invalid projection</span>\n<span class=\"kd\">def</span> <span class=\"n\">OK</span>  <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">t</span><span class=\"bp\">=</span><span class=\"n\">prod</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">a.de</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"n\">t.de</span><span class=\"o\">):</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"n\">FST</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"c1\">-- ok</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">OK</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:=</span><span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:=</span><span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"n\">rfl</span> <span class=\"n\">true</span> <span class=\"o\">(</span><span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"c1\">-- OK is computable</span>\n<span class=\"k\">#eval</span> <span class=\"n\">OK</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:=</span><span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:=</span><span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"n\">rfl</span> <span class=\"n\">false</span> <span class=\"o\">(</span><span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"c1\">-- OK is computable</span>\n</code></pre></div>\n<p>EDIT: In particular the error message is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">kernel</span><span class=\"o\">)</span> <span class=\"n\">invalid</span> <span class=\"n\">projection</span>\n  <span class=\"n\">e.1</span>\n</code></pre></div>\n<p>So it seems, lean thinks that the code contained <code>e.1</code> directly, which is of course type incorrect, although the code clearly says <code>(h ▸ e).1</code>. Maybe that's related to how this error happens? Or are rewrites just not printed in the error message there?</p>",
        "id": 429070972,
        "sender_full_name": "David Richter",
        "timestamp": 1711191504
    },
    {
        "content": "<p>Higher order unification is undecidable so you can't expect everything to work with no clues. I'm guessing that it will work if you write <code>(h \\t e : &lt;write the type here&gt;).1</code> .</p>",
        "id": 429077284,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711197367
    },
    {
        "content": "<p>Hi, I suppose the ▸ looks so innocent that I forgot that it has to perform higher order unification in the background. Nevertheless, I'm not convinced that's the issue here:</p>\n<p>I think lean is able to correctly guess the expected rewriting, otherwise I would expect <code>(h ▸ c).1</code> to be a type error not a kernel invalid projection.</p>\n<p>If I write <code>def ERR₂ (h: γ = prod α β) (a: α.de) (c: γ.de): Bool := let tmp := h ▸ c; a == tmp.1</code> then I can hover over tmp with the mouse and see that the type <code>(prod α β).de</code> is correctly deduced.</p>\n<p>Indeed, writing the type explicitly like <code>def ERR₁ (h: γ = prod α β) (a: α.de) (c: γ.de): Bool := let tmp := (h ▸ c : (prod α β).de); a == tmp.1</code> doesnt change anything, the kernel invalid projection error still appears.</p>\n<p>See:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Ty</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bool</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span>\n  <span class=\"bp\">|</span> <span class=\"n\">prod</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"bp\">→</span> <span class=\"n\">Ty</span> <span class=\"bp\">→</span> <span class=\"n\">Ty</span>\n<span class=\"kn\">open</span> <span class=\"n\">Ty</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Ty.de</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bool</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"n\">prod</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a.de</span> <span class=\"bp\">×</span> <span class=\"n\">b.de</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">BEq</span> <span class=\"o\">(</span><span class=\"n\">t.de</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">beq</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">go</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">t.de</span> <span class=\"bp\">→</span> <span class=\"n\">t.de</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">bool</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"n\">b</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">go</span> <span class=\"n\">α</span> <span class=\"n\">a.1</span> <span class=\"n\">b.1</span> <span class=\"bp\">∧</span> <span class=\"n\">go</span> <span class=\"n\">β</span> <span class=\"n\">a.2</span> <span class=\"n\">b.2</span>\n  <span class=\"n\">go</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">FST</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">prod</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">de</span><span class=\"o\">):</span> <span class=\"n\">α.de</span> <span class=\"o\">:=</span> <span class=\"n\">c.1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">OK</span>  <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">=</span> <span class=\"n\">prod</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">α.de</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">γ.de</span><span class=\"o\">):</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"n\">FST</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"c1\">-- ok</span>\n<span class=\"kd\">def</span> <span class=\"n\">ERR₁</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">=</span> <span class=\"n\">prod</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">α.de</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">γ.de</span><span class=\"o\">):</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">tmp</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">prod</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">de</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"n\">tmp.1</span> <span class=\"c1\">-- (kernel) invalid projection</span>\n<span class=\"kd\">def</span> <span class=\"n\">ERR₂</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">=</span> <span class=\"n\">prod</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">α.de</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">γ.de</span><span class=\"o\">):</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">tmp</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">c</span><span class=\"bp\">;</span> <span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"n\">tmp.1</span> <span class=\"c1\">-- (kernel) invalid projection</span>\n<span class=\"kd\">def</span> <span class=\"n\">ERR₃</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">=</span> <span class=\"n\">prod</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">α.de</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">γ.de</span><span class=\"o\">):</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"c1\">-- (kernel) invalid projection</span>\n\n<span class=\"c1\">-- EDIT: here is a very verbose variant</span>\n<span class=\"kd\">def</span> <span class=\"n\">ERR₄</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">=</span> <span class=\"n\">prod</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">α.de</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">γ.de</span><span class=\"o\">):</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"c1\">-- (kernel) invalid projection</span>\n  <span class=\"k\">let</span> <span class=\"n\">tmp</span><span class=\"o\">:</span> <span class=\"n\">α.de</span> <span class=\"bp\">×</span> <span class=\"n\">β.de</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">prod</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">de</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">tmp1</span><span class=\"o\">:</span> <span class=\"n\">α.de</span> <span class=\"o\">:=</span> <span class=\"n\">tmp.1</span>\n  <span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"n\">tmp1</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">OK</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"n\">rfl</span> <span class=\"n\">true</span>  <span class=\"o\">(</span><span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"c1\">-- OK is computable</span>\n<span class=\"k\">#eval</span> <span class=\"n\">OK</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"n\">rfl</span> <span class=\"n\">false</span> <span class=\"o\">(</span><span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"c1\">-- OK is computable</span>\n</code></pre></div>",
        "id": 429079939,
        "sender_full_name": "David Richter",
        "timestamp": 1711199667
    },
    {
        "content": "<p>Note that your type ascriptions are doing nothing for the kernel, they are only seen by the elaborator. Here are some variants that work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">OK₄</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">=</span> <span class=\"n\">prod</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">α.de</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">γ.de</span><span class=\"o\">):</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">tmp</span><span class=\"o\">:</span> <span class=\"n\">α.de</span> <span class=\"bp\">×</span> <span class=\"n\">β.de</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">prod</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">de</span> <span class=\"k\">from</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">tmp1</span><span class=\"o\">:</span> <span class=\"n\">α.de</span> <span class=\"o\">:=</span> <span class=\"n\">tmp.1</span>\n  <span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"n\">tmp1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">hc</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">=</span> <span class=\"n\">prod</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">γ.de</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">prod</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">de</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">OK</span>  <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">=</span> <span class=\"n\">prod</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">α.de</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">γ.de</span><span class=\"o\">):</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"n\">h</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 429156449,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711258056
    },
    {
        "content": "<p>The use of <code>show</code> and <code>hc</code> in these examples is forcing an intermediate term whose type is <code>(prod α β).de</code>. My guess is that without this, the term <code>h ▸ c</code> gets the type acquired from its underlying term <code>@Eq.rec Ty γ (fun x h ↦ de x) c (prod α β) h</code>, which is <code>(fun x h ↦ de x) (prod α β) h</code>, but ascribing this type explicitly also seems to work...</p>",
        "id": 429157029,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711258499
    },
    {
        "content": "<p>Also, my guess is that the <code>c.1</code> you see in the error message is not actually the <code>(h ▸ c).1</code> term you wrote itself, but rather a subterm generated during the typechecking of this term: the type of a projection can refer to other projections, and after <code>whnf</code> it can be a bit difficult to say exactly what terms it decided to synthesize here. I'll see if I can reproduce with lean4lean</p>",
        "id": 429157144,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711258593
    },
    {
        "content": "<p>oh, extra weird:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">OK</span>  <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">=</span> <span class=\"n\">prod</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">α.de</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">γ.de</span><span class=\"o\">):</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"c1\">-- ok</span>\n<span class=\"kd\">def</span>     <span class=\"n\">ERR</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">=</span> <span class=\"n\">prod</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">α.de</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">γ.de</span><span class=\"o\">):</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"c1\">-- invalid projection</span>\n</code></pre></div>\n<p>so somehow being a definition is relevant here; perhaps the error is actually occurring in the equation lemma?</p>",
        "id": 429157938,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711259323
    },
    {
        "content": "<p>Using <code>#whatsnew in</code> on the def reveals</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">whatsnew</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">OK</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">=</span> <span class=\"n\">prod</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">α.de</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">γ.de</span><span class=\"o\">):</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id</span> <span class=\"n\">_</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">OK._rarg._cstage2</span> <span class=\"o\">:</span> <span class=\"n\">_obj</span> <span class=\"bp\">→</span> <span class=\"n\">_obj</span> <span class=\"bp\">→</span> <span class=\"n\">_neutral</span> <span class=\"bp\">→</span> <span class=\"n\">_obj</span> <span class=\"bp\">→</span> <span class=\"n\">_obj</span> <span class=\"bp\">→</span> <span class=\"n\">_obj</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">h</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"bp\">↦</span>\n  <span class=\"k\">let</span> <span class=\"n\">_x_1</span> <span class=\"o\">:=</span> <span class=\"n\">c.1</span><span class=\"bp\">;</span>\n  <span class=\"n\">instBEqDe.go</span> <span class=\"n\">α</span> <span class=\"n\">a</span> <span class=\"n\">_x_1</span>\n\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">OK._cstage2</span> <span class=\"o\">:</span> <span class=\"n\">_obj</span> <span class=\"bp\">→</span> <span class=\"n\">_obj</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"n\">γ</span> <span class=\"bp\">↦</span> <span class=\"n\">OK._rarg</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">OK</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"bp\">=</span> <span class=\"n\">prod</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">de</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">de</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"n\">h</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"bp\">↦</span> <span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">c</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">fst</span>\n\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">OK._cstage1</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"bp\">=</span> <span class=\"n\">prod</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">de</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">de</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"n\">h</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"bp\">↦</span>\n  <span class=\"k\">let</span> <span class=\"n\">_x_3</span> <span class=\"o\">:=</span> <span class=\"n\">c.1</span><span class=\"bp\">;</span>\n  <span class=\"n\">instBEqDe.go</span> <span class=\"n\">α</span> <span class=\"n\">a</span> <span class=\"n\">_x_3</span>\n</code></pre></div>\n<p>where in the last definition we indeed have a <code>c.1</code> subterm for which hovering it says \"invalid projection\"</p>",
        "id": 429158163,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711259511
    },
    {
        "content": "<p>So it seems like this is actually an ill-formed definition <code>OK._cstage1</code> being produced by the compiler. (<code>unsafe def</code> turns off some checks in the kernel, but not this one)</p>",
        "id": 429158311,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711259580
    },
    {
        "content": "<p>this does make some sense, because the compiler erases <code>Eq.rec</code> terms, which can produce ill formed expressions, and this has been the source of several compiler bugs. I think you should report this. The new compiler uses a custom typechecker instead of reusing lean's typechecker in order to better handle these kind of weakly typed terms</p>",
        "id": 429158729,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711259745
    },
    {
        "content": "<p>As added evidence that this is the issue,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">OK</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">=</span> <span class=\"n\">prod</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">α.de</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">γ.de</span><span class=\"o\">):</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n</code></pre></div>\n<p>compiles fine (using <code>noncomputable</code> to tell the compiler not to try to produce the bad auxiliary defs)</p>",
        "id": 429158989,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711259869
    },
    {
        "content": "<blockquote>\n<p>I  think you should report this</p>\n</blockquote>\n<p>Like this <a href=\"https://github.com/leanprover/lean4/issues/3761\">https://github.com/leanprover/lean4/issues/3761</a> ?</p>",
        "id": 429325405,
        "sender_full_name": "David Richter",
        "timestamp": 1711358254
    }
]