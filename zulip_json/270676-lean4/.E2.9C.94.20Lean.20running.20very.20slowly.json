[
    {
        "content": "<p>Right now lean is running so slowly on my laptop as to be unusable. Perhaps this is because of a 100 line proof? It is running natively on a MacBook Pro M1. I have minimized imports. Simple things like apply can take 20 seconds or a minute or more.</p>",
        "id": 434267150,
        "sender_full_name": "Jeremy Kahn",
        "timestamp": 1713492020
    },
    {
        "content": "<p>Can you share the file? Or does it contain secrets?</p>",
        "id": 434268087,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1713492645
    },
    {
        "content": "<p>No, it doesn't contain secrets, although it could probably be much better written. <br>\n<a href=\"/user_uploads/3121/7crChlh8Jc2wdGD1RIDDP8HF/2023-1.lean\">2023-1.lean</a></p>",
        "id": 434268314,
        "sender_full_name": "Jeremy Kahn",
        "timestamp": 1713492799
    },
    {
        "content": "<p>So the lag starts with <code>prime_pow_of_nice_aux</code>, right? Or are you also unhappy with how snappy the code in the first 100 lines is?</p>",
        "id": 434270632,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1713494285
    },
    {
        "content": "<p>Is Lean struggling with the repeated bound checks for accessing the list?</p>",
        "id": 434271006,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1713494503
    },
    {
        "content": "<p>Certainly the problem has appeared while I was filling in the <code>sorry</code>'s  in prime_pow_or_nice_aux.</p>",
        "id": 434272707,
        "sender_full_name": "Jeremy Kahn",
        "timestamp": 1713495578
    },
    {
        "content": "<p>Mostly towards the end of the proof of that lemma.</p>",
        "id": 434272729,
        "sender_full_name": "Jeremy Kahn",
        "timestamp": 1713495602
    },
    {
        "content": "<p>Adding <code>have : k &lt; ld.length := by omega</code> speeds that proof up quite a bit (after the <code>rintro</code>)</p>",
        "id": 434272902,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1713495721
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span>! I will try working on the proof with this change--it does already appear to help. (And also helps to learn about <code>omega</code>)</p>",
        "id": 434273778,
        "sender_full_name": "Jeremy Kahn",
        "timestamp": 1713496322
    },
    {
        "content": "<p>When applicable, <code>omega</code> is more performant than <code>linarith</code> generally</p>",
        "id": 434273979,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1713496446
    },
    {
        "content": "<p>Okay that's good to know--I'll play around with it. So, when I change one line of a proof of a lemma, does lean then go and re-check every line?</p>",
        "id": 434274036,
        "sender_full_name": "Jeremy Kahn",
        "timestamp": 1713496516
    },
    {
        "content": "<p>But I think here the tactic running in the background for each <code>ld[k]</code>to check that <code>k &lt; ld.length</code>was having a hard time. Adding the assumption made it easier.</p>",
        "id": 434274112,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1713496568
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"432565\">Jeremy Kahn</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean.20running.20very.20slowly/near/434274036\">said</a>:</p>\n<blockquote>\n<p>Okay that's good to know--I'll play around with it. So, when I change one line of a proof of a lemma, does lean then go and re-check every line?</p>\n</blockquote>\n<p>Yes</p>",
        "id": 434274122,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1713496578
    },
    {
        "content": "<p>So maybe one lesson is to split up a long proof whenever lean is running slow.</p>",
        "id": 434274156,
        "sender_full_name": "Jeremy Kahn",
        "timestamp": 1713496633
    },
    {
        "content": "<p>I think splitting it up as much as reasonable is a very good idea in general</p>",
        "id": 434274180,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1713496665
    },
    {
        "content": "<p>But adding <code>k &lt; ld.length</code> makes sense in principle, and appears to help in practice.</p>",
        "id": 434274255,
        "sender_full_name": "Jeremy Kahn",
        "timestamp": 1713496706
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"432565\">Jeremy Kahn</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean.20running.20very.20slowly/near/434274036\">said</a>:</p>\n<blockquote>\n<p>Okay that's good to know--I'll play around with it. So, when I change one line of a proof of a lemma, does lean then go and re-check every line?</p>\n</blockquote>\n<p>Yes, but we're getting close to deploying a whole new incrementality behaviour that will alleviate this. Hopefully available in Mathlib in the next month or two!</p>",
        "id": 434274258,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713496714
    },
    {
        "content": "<p>Very close!</p>",
        "id": 434274273,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1713496738
    },
    {
        "content": "<p>And then I can return to my previous bad habits!</p>",
        "id": 434274283,
        "sender_full_name": "Jeremy Kahn",
        "timestamp": 1713496754
    },
    {
        "content": "<p>I don’t know what <code>autoParam</code> is running in under the covers here but I am surprised by its behavior given we already know <code>k + 1 &lt; ld.length</code>.</p>",
        "id": 434274434,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1713496881
    },
    {
        "content": "<p>(And I am turning in instead of poking through the code)</p>",
        "id": 434274563,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1713496985
    },
    {
        "content": "<p>Yes, likewise--I will mark as resolved, and try again in when a window of time opens--thanks for the lessons and suggestions!</p>",
        "id": 434274677,
        "sender_full_name": "Jeremy Kahn",
        "timestamp": 1713497074
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"432565\">Jeremy Kahn</span> has marked this topic as resolved.</p>",
        "id": 434274678,
        "sender_full_name": "Notification Bot",
        "timestamp": 1713497078
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"432565\">@Jeremy Kahn</span> Here is a slightly different approach. But I have no idea if it is actually any good.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">nice'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">List.Chain'</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">∣</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">div_list</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_prime_power_iff_unique</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">is_prime_power</span> <span class=\"n\">n</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">p.Prime</span> <span class=\"bp\">→</span> <span class=\"n\">q.Prime</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">List.Chain'.mem_and_mem</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableRel</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ls</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">List.Chain'</span> <span class=\"n\">R</span> <span class=\"n\">ls</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">ls</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">ls</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">∨</span> <span class=\"n\">R</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">prime_power_of_nice'</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n_pos</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nice'</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">is_prime_power</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"n\">swap</span>\n  <span class=\"bp\">.</span> <span class=\"n\">obtain</span> <span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">omega</span>\n    <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">one_is_prime_power</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">is_prime_power_iff_unique</span> <span class=\"n\">_</span> <span class=\"n\">hn</span><span class=\"o\">]</span>\n  <span class=\"n\">contrapose</span><span class=\"bp\">!</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">hpn</span><span class=\"o\">,</span> <span class=\"n\">hqn</span><span class=\"o\">,</span> <span class=\"n\">hpq</span><span class=\"o\">⟩</span>\n  <span class=\"n\">intro</span> <span class=\"n\">H</span>\n  <span class=\"k\">have</span> <span class=\"n\">aux</span> <span class=\"o\">:=</span> <span class=\"n\">H.mem_and_mem</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_div_list_iff_divides</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">n_pos</span><span class=\"o\">,</span> <span class=\"n\">hpn</span><span class=\"o\">,</span> <span class=\"n\">hqn</span><span class=\"o\">,</span> <span class=\"n\">forall_true_left</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">aux</span>\n  <span class=\"n\">apply</span> <span class=\"n\">hpq</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">h</span><span class=\"bp\">|</span><span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">aux</span> <span class=\"n\">hpq</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">Nat.prime_dvd_prime_iff_eq</span> <span class=\"n\">hp</span> <span class=\"n\">hq</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"o\">((</span><span class=\"n\">Nat.prime_dvd_prime_iff_eq</span> <span class=\"n\">hq</span> <span class=\"n\">hp</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</code></pre></div>",
        "id": 434275063,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1713497407
    },
    {
        "content": "<p>It might turn out that the two <code>sorry</code>s are a nuisance to prove.</p>",
        "id": 434275087,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1713497429
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I should say first that I greatly appreciate your taking the time and energy to set up the alternate approach. I should say second that after a lost weekend spent on that file I did realize, on a mathematical level, that one could use your <code>is_prime_power_iff_unique</code> and that it should be easier to prove than my <code>prime_power_of_nice_aux</code>. But the original and ultimate goal was to formalize a solution to Question 1 of the 2023 IMO, and this appears to require something like <code>prime_power_of_nice_aux</code>.</p>",
        "id": 434336853,
        "sender_full_name": "Jeremy Kahn",
        "timestamp": 1713523917
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"432565\">@Jeremy Kahn</span> Aha. Maybe it is still possible to rephrase that statement using <code>List.Chain'</code>? (With the relation <code>a = p * b</code>, or something like that.) I don't know if this suggestion makes it easier to prove.</p>",
        "id": 434338367,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1713524548
    },
    {
        "content": "<p>Actually, <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>, I needed the win, so I completed your suggestion in <br>\n<a href=\"/user_uploads/3121/MpqZwXSmkmGIuV6mHwd-3FYM/nice.lean\">nice.lean</a>. I think <code>comparable_of_sorted</code> (along with <code>index_of_mem</code> and <code>get_of_index_of_mem</code>) might be of some general value. In any case this is certainly the best approach for <code>prime_power_of_nice</code>. </p>\n<p>Not sure if the <a href=\"https://artofproblemsolving.com/wiki/index.php/2023_IMO_Problems/Problem_1\">original IMO problem</a> can be formalized more easily that with <code>prime_power_of_nice_aux</code> (which couldn't really use List.Chain').</p>",
        "id": 434638898,
        "sender_full_name": "Jeremy Kahn",
        "timestamp": 1713753006
    },
    {
        "content": "<p>I agree that it isn't clear what the best way is to formalize that problem</p>",
        "id": 434650392,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1713761523
    }
]