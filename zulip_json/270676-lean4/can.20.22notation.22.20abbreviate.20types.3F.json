[
    {
        "content": "<p>Can I use \"notation\" to define types where some parts are repeated?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">Sum</span> <span class=\"n\">Int</span> <span class=\"n\">Int</span> <span class=\"bp\">→</span> <span class=\"n\">Sum</span> <span class=\"n\">Char</span> <span class=\"n\">Char</span> <span class=\"bp\">→</span> <span class=\"n\">Sum</span> <span class=\"n\">Int</span> <span class=\"n\">Char</span>\n\n<span class=\"kd\">notation</span> <span class=\"s2\">\"Pairing\"</span> <span class=\"n\">T</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">T</span> <span class=\"n\">a</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">T</span> <span class=\"n\">b</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">T</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">Pairing</span> <span class=\"n\">Sum</span> <span class=\"n\">Int</span> <span class=\"n\">Char</span>\n<span class=\"c1\">-- error: unexpected end of input</span>\n</code></pre></div>",
        "id": 417202457,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1705920672
    },
    {
        "content": "<p>Should be <code>#check Pairing Sum Int Char</code>, right?</p>",
        "id": 417202670,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1705920747
    },
    {
        "content": "<p>Yes, corrected now. Thanks. Same error still.</p>",
        "id": 417202804,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1705920796
    },
    {
        "content": "<p>My use case is actually this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"s2\">\"Pairing\"</span> <span class=\"n\">T</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">T</span> <span class=\"n\">a</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">T</span> <span class=\"n\">b</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">T</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Thing</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"mi\">2</span>\n  <span class=\"bp\">|</span> <span class=\"n\">basic</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">τ</span> <span class=\"bp\">→</span> <span class=\"n\">Thing</span> <span class=\"n\">σ</span> <span class=\"n\">τ</span>\n  <span class=\"bp\">|</span> <span class=\"n\">pair</span> <span class=\"o\">:</span> <span class=\"n\">Thing</span> <span class=\"n\">τ</span> <span class=\"n\">τ</span> <span class=\"bp\">→</span> <span class=\"n\">Thing</span> <span class=\"n\">σ</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">Thing</span> <span class=\"n\">τ</span> <span class=\"n\">σ</span>\n  <span class=\"c1\">-- imagine τ and σ are long and I want to mention them only once, using notation from above:</span>\n  <span class=\"bp\">|</span> <span class=\"n\">pair'</span> <span class=\"o\">:</span> <span class=\"n\">Pairing</span> <span class=\"n\">Thing</span> <span class=\"n\">τ</span> <span class=\"n\">σ</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Thing</span>  <span class=\"c1\">-- error: unexpected token, expected term</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">pair'</span> <span class=\"o\">(</span><span class=\"n\">basic</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">basic</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 417202930,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1705920836
    },
    {
        "content": "<p>I imagine this is a precedence issue. Until one of our syntax wizards comes along, here's a version that works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"s2\">\"Pairing\"</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">T</span> <span class=\"s2\">\",\"</span> <span class=\"n\">a</span> <span class=\"s2\">\",\"</span> <span class=\"n\">b</span> <span class=\"s2\">\")\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">T</span> <span class=\"n\">a</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">T</span> <span class=\"n\">b</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">T</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">Pairing</span><span class=\"o\">(</span><span class=\"n\">Sum</span><span class=\"o\">,</span> <span class=\"n\">Int</span><span class=\"o\">,</span> <span class=\"n\">Char</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Thing</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"mi\">2</span>\n  <span class=\"bp\">|</span> <span class=\"n\">basic</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">τ</span> <span class=\"bp\">→</span> <span class=\"n\">Thing</span> <span class=\"n\">σ</span> <span class=\"n\">τ</span>\n  <span class=\"bp\">|</span> <span class=\"n\">pair</span> <span class=\"o\">:</span> <span class=\"n\">Thing</span> <span class=\"n\">τ</span> <span class=\"n\">τ</span> <span class=\"bp\">→</span> <span class=\"n\">Thing</span> <span class=\"n\">σ</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">Thing</span> <span class=\"n\">τ</span> <span class=\"n\">σ</span>\n  <span class=\"bp\">|</span> <span class=\"n\">pair'</span> <span class=\"o\">:</span> <span class=\"n\">Pairing</span><span class=\"o\">(</span><span class=\"n\">Thing</span><span class=\"o\">,</span> <span class=\"n\">τ</span><span class=\"o\">,</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Thing</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">pair'</span> <span class=\"o\">(</span><span class=\"n\">basic</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">basic</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 417204675,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1705921364
    },
    {
        "content": "<p>The problem is that it's parsing <code>Sum Int Char</code> as the first argument. You either need separators, or you need to set the precedence. Here's by setting max precedence per argument:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"s2\">\"Pairing\"</span> <span class=\"n\">T</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">T</span> <span class=\"n\">a</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">T</span> <span class=\"n\">b</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">T</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">Pairing</span> <span class=\"n\">Sum</span> <span class=\"n\">Int</span> <span class=\"n\">Char</span>\n</code></pre></div>\n<p>(Edit: If you use <code>arg</code> instead of <code>max</code> then it is more like a function argument. It's a slight difference, and I think it only affects whether certain notations like <code>do ...</code> would work without parentheses.)</p>",
        "id": 417204726,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705921382
    },
    {
        "content": "<p>This notation doesn't pretty print, but if you use mathlib you can use the <code>notation3</code> command to get it to.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">notation3</span> <span class=\"s2\">\"Pairing\"</span> <span class=\"n\">T</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">T</span> <span class=\"n\">b</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">T</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">Pairing</span> <span class=\"n\">Sum</span> <span class=\"n\">Int</span> <span class=\"n\">Char</span>\n</code></pre></div>",
        "id": 417205007,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705921466
    },
    {
        "content": "<p>Ah, wonderful, thank you both!</p>",
        "id": 417205220,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1705921525
    }
]