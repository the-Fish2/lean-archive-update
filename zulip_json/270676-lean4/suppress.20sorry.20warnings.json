[
    {
        "content": "<p>I'd like to enable <code>lake --wfail</code>, but I'd like to suppress the lean feature that emits a warning when one uses a sorry.</p>\n<p>It <a href=\"https://github.com/leanprover/lean4/blob/dcdc3db3d441791bd35ee06489f5b9a8094cd64c/src/Lean/AddDecl.lean#L18-L25\">seems like the code in <code>AddDecl.lean</code></a> has no option to change this --- I'd be happy to implement this, but I wanted to double-check that I am not missing something!</p>",
        "id": 437970722,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1715342505
    },
    {
        "content": "<p>I guess a workaround could be to implement your own <code>sorry_no_warnings</code> that just does exactly the same thing but with a different <code>sorryAxNoWarnings</code>?</p>",
        "id": 438194163,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1715529844
    },
    {
        "content": "<p>(then the test of <code>Declaration.hasSorry</code> will fail <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> )</p>",
        "id": 438194192,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1715529877
    },
    {
        "content": "<p>For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">extern</span> <span class=\"s2\">\"lean_sorry\"</span><span class=\"o\">,</span> <span class=\"n\">never_extract</span><span class=\"kd\">]</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">sorryAxNoWarning</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">synthetic</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"sorry_no_warn\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">sorryAxNoWarning</span> <span class=\"n\">_</span> <span class=\"n\">false</span><span class=\"o\">)</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">declaration uses 'sorry'</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">one_plus_one</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">&lt;no warning&gt;</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">one_plus_one'</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">sorry_no_warn</span>\n</code></pre></div>",
        "id": 438194700,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1715530411
    },
    {
        "content": "<p>and if you <code>#guard_msgs</code> a <code>#print axioms</code> of your main theorems (which I happen to know that you do), then this should still not creep into anything unwantedly :)</p>",
        "id": 438194896,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1715530595
    },
    {
        "content": "<p>Sometimes sorries appear inside tactics too, and if you want to handle those, you could have a command combinator that transforms the sorry warning into sorry info.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span> <span class=\"k\">in</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"yes_i_am_sorry \"</span> <span class=\"n\">cmd</span><span class=\"o\">:</span><span class=\"n\">command</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">initMsgs</span> <span class=\"bp\">←</span> <span class=\"n\">modifyGet</span> <span class=\"k\">fun</span> <span class=\"n\">st</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">st.messages</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">st</span> <span class=\"k\">with</span> <span class=\"n\">messages</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span> <span class=\"o\">})</span>\n  <span class=\"n\">try</span>\n    <span class=\"n\">elabCommand</span> <span class=\"n\">cmd</span>\n    <span class=\"k\">let</span> <span class=\"n\">msgs</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">get</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">messages</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">msgs'</span> <span class=\"o\">:</span> <span class=\"n\">MessageLog</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n    <span class=\"n\">for</span> <span class=\"n\">msg</span> <span class=\"k\">in</span> <span class=\"n\">msgs.toArray</span> <span class=\"k\">do</span>\n      <span class=\"k\">if</span> <span class=\"n\">msg.severity</span> <span class=\"bp\">==</span> <span class=\"bp\">.</span><span class=\"n\">warning</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">msg.data.toString</span><span class=\"o\">)</span> <span class=\"bp\">==</span> <span class=\"s2\">\"declaration uses 'sorry'\"</span> <span class=\"k\">then</span>\n        <span class=\"n\">msgs'</span> <span class=\"o\">:=</span> <span class=\"n\">msgs'.add</span> <span class=\"o\">{</span><span class=\"n\">msg</span> <span class=\"k\">with</span> <span class=\"n\">severity</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">information</span><span class=\"o\">}</span>\n      <span class=\"k\">else</span>\n        <span class=\"n\">msgs'</span> <span class=\"o\">:=</span> <span class=\"n\">msgs'.add</span> <span class=\"n\">msg</span>\n    <span class=\"n\">modify</span> <span class=\"k\">fun</span> <span class=\"n\">st</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">st</span> <span class=\"k\">with</span> <span class=\"n\">messages</span> <span class=\"o\">:=</span> <span class=\"n\">msgs'</span> <span class=\"o\">}</span>\n  <span class=\"n\">finally</span>\n    <span class=\"n\">modify</span> <span class=\"k\">fun</span> <span class=\"n\">st</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">st</span> <span class=\"k\">with</span> <span class=\"n\">messages</span> <span class=\"o\">:=</span> <span class=\"n\">initMsgs</span> <span class=\"bp\">++</span> <span class=\"n\">st.messages</span> <span class=\"o\">}</span>\n\n<span class=\"sd\">/-- warning: declaration uses 'sorry' -/</span>\n<span class=\"bp\">#</span><span class=\"n\">guard_msgs</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"sd\">/-- info: declaration uses 'sorry' -/</span>\n<span class=\"bp\">#</span><span class=\"n\">guard_msgs</span> <span class=\"k\">in</span>\n<span class=\"n\">yes_i_am_sorry</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 438195418,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715531124
    },
    {
        "content": "<p>Maybe there should be an RFC to create an option to adjust the severity level for the \"declaration uses 'sorry'\" message?</p>\n<p>It seems like it would be useful to have it be 'info' for certain projects in conjunction with <code>lake --wfail</code>.</p>",
        "id": 438200310,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715535962
    }
]