[
    {
        "content": "<p>How do I create a piece of syntax with newline? I want to create this <code>`(let' $x ~ $y; $b)</code> but with newline instead of semicolon. </p>\n<p>I understand that anti-quotation strips all whitespace. Can I just somehow replace the semicolon with newline? I tried this but it does not work (btw I have no idea what I'm doing here so it is not surprising it does not work)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">_root_.Lean.Syntax.semicolonToNewline</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"bp\">→</span> <span class=\"n\">Syntax</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">node</span> <span class=\"n\">info</span> <span class=\"n\">kind</span> <span class=\"n\">args</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">node</span> <span class=\"n\">info</span> <span class=\"n\">kind</span> <span class=\"o\">(</span><span class=\"n\">args.map</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">semicolonToNewline</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">atom</span> <span class=\"n\">info</span> <span class=\"n\">val</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">val</span> <span class=\"bp\">==</span> <span class=\"s2\">\";\"</span> <span class=\"k\">then</span> <span class=\"bp\">.</span><span class=\"n\">atom</span> <span class=\"n\">info</span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span> <span class=\"k\">else</span> <span class=\"bp\">.</span><span class=\"n\">atom</span> <span class=\"n\">info</span> <span class=\"n\">val</span>\n<span class=\"bp\">|</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span>\n</code></pre></div>\n<p>mwe</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bind'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Parser</span>\n<span class=\"n\">macro</span> <span class=\"s2\">\"let'\"</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\" ~ \"</span> <span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"n\">semicolonOrLinebreak</span> <span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">bind'</span> <span class=\"bp\">$</span><span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">))</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">app_unexpander</span> <span class=\"n\">bind'</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">unexpandBind'</span> <span class=\"o\">:</span> <span class=\"n\">Lean.PrettyPrinter.Unexpander</span>\n\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"n\">y</span> <span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">match</span> <span class=\"n\">f</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">let</span><span class=\"bp\">'</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">~</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"bp\">;</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"c1\">-- how do I create this with new line?</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">let</span><span class=\"bp\">'</span> <span class=\"n\">x</span> <span class=\"bp\">~</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"bp\">;</span> <span class=\"bp\">$</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"o\">()</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">let' x ~ 10;x + x : Nat</span>\n<span class=\"cm\">-/</span>\n<span class=\"k\">#check</span> <span class=\"k\">let</span><span class=\"bp\">'</span> <span class=\"n\">x</span> <span class=\"bp\">~</span> <span class=\"mi\">10</span><span class=\"bp\">;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>How do I make <code>#check let' x ~ 10; x + x</code> to print out?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span><span class=\"bp\">'</span> <span class=\"n\">x</span> <span class=\"bp\">~</span> <span class=\"mi\">10</span>\n<span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n</code></pre></div>",
        "id": 419850760,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1707143110
    },
    {
        "content": "<p>you can just put a literal newline in the quotation</p>",
        "id": 419980600,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707198984
    },
    {
        "content": "<p>And how do I do that?</p>\n<p>This does not work</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">mkStrLit</span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span>\n<span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">let</span><span class=\"bp\">'</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">~</span> <span class=\"bp\">$</span><span class=\"n\">y</span> <span class=\"bp\">$</span><span class=\"n\">n</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 419981092,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1707199321
    },
    {
        "content": "<p>you put an actual newline in</p>",
        "id": 419983193,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707200619
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">let</span><span class=\"bp\">'</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">~</span> <span class=\"bp\">$</span><span class=\"n\">y</span>\n  <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 419983205,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707200629
    },
    {
        "content": "<p>That does not print out the newline back.</p>",
        "id": 419983377,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1707200733
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bind'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Parser</span>\n<span class=\"n\">syntax</span> <span class=\"n\">withPosition</span><span class=\"o\">(</span><span class=\"s2\">\"let'\"</span> <span class=\"n\">term</span> <span class=\"s2\">\" ~ \"</span> <span class=\"n\">term</span> <span class=\"n\">semicolonOrLinebreak</span> <span class=\"n\">ppDedent</span><span class=\"o\">(</span><span class=\"n\">ppLine</span><span class=\"o\">)</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">let</span><span class=\"bp\">'</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">~</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"bp\">;</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">bind'</span> <span class=\"bp\">$</span><span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">))</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">app_unexpander</span> <span class=\"n\">bind'</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">unexpandBind'</span> <span class=\"o\">:</span> <span class=\"n\">Lean.PrettyPrinter.Unexpander</span>\n\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"n\">y</span> <span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">match</span> <span class=\"n\">f</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">let</span><span class=\"bp\">'</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">~</span> <span class=\"bp\">$</span><span class=\"n\">y</span>\n      <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">let</span><span class=\"bp\">'</span> <span class=\"n\">x</span> <span class=\"bp\">~</span> <span class=\"bp\">$</span><span class=\"n\">y</span>\n      <span class=\"bp\">$</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"o\">()</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">let' x ~ 10</span>\n<span class=\"cm\">x + x : Nat</span>\n<span class=\"cm\">-/</span>\n<span class=\"k\">#check</span> <span class=\"k\">let</span><span class=\"bp\">'</span> <span class=\"n\">x</span> <span class=\"bp\">~</span> <span class=\"mi\">10</span>\n       <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 419983922,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707201061
    },
    {
        "content": "<p>Thanks! I see I missed ppLine in the syntax definition.</p>",
        "id": 419984514,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1707201464
    }
]