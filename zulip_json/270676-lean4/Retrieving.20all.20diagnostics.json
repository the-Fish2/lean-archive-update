[
    {
        "content": "<p>It looks like <a href=\"https://github.com/leanprover/lean4/pull/3014\">lean4#3014</a> removed among other things <code>Lean.Server.Snapshots.Snapshot.interactiveDiags</code> and restructured quite a bit how snapshots work. <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>, could you maybe help me how to adjust the code snippet below, please? What is the correct way to retrieve all <code>InteractiveDiagnostic</code>s inside <code>RequestM</code>?</p>\n<p>In this <a href=\"https://github.com/leanprover-community/lean4game/blob/b091ec579b13a7eaa7ef975b80091ceacd02c692/server/GameServer/RpcHandlers.lean#L218-L232\">snippet</a> of <code>v4.7.0</code> code, I want to simply collect all diagnostics of the entire file, and I'll need to update this code  to <code>v4.8.0</code> .</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"w\">  </span><span class=\"n\">withWaitFindSnap</span>\n<span class=\"w\">    </span><span class=\"n\">doc</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">snap</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"bp\">Â¬</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">snap</span><span class=\"bp\">.</span><span class=\"n\">infoTree</span><span class=\"bp\">.</span><span class=\"n\">goalsAt?</span><span class=\"w\"> </span><span class=\"n\">doc</span><span class=\"bp\">.</span><span class=\"n\">meta</span><span class=\"bp\">.</span><span class=\"n\">text</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">isEmpty</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">notFoundX</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">return</span><span class=\"w\"> </span><span class=\"n\">none</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">snap</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">      </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">mut</span><span class=\"w\"> </span><span class=\"n\">steps</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Array</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"n\">InteractiveGoalsWithHints</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[]</span>\n<span class=\"w\">      </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">mut</span><span class=\"w\"> </span><span class=\"n\">diag</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Array</span><span class=\"w\"> </span><span class=\"n\">InteractiveDiagnostic</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">snap</span><span class=\"bp\">.</span><span class=\"n\">interactiveDiags</span><span class=\"bp\">.</span><span class=\"n\">toArray</span><span class=\"w\"> </span><span class=\"c1\">--error: does not exist anymore</span>\n<span class=\"w\">      </span><span class=\"o\">[</span><span class=\"bp\">...</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>I've also skimmed  the documentation <a href=\"https://github.com/leanprover/lean4/tree/v4.8.0/src/Lean/Server\">Lean/Server.md</a> and the <a href=\"https://github.com/leanprover/lean4/releases/tag/v4.8.0\">release notes</a> but didn't find any hints there.</p>",
        "id": 443226617,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1717744376
    },
    {
        "content": "<p>What is the context? Why can't you use the existing <code>getInteractiveDiagnostics</code> request?</p>",
        "id": 443273884,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1717758367
    },
    {
        "content": "<p>the context is that NNG has a modified <code>FileWorker</code> which I was hoping to update and this is a custom <code>builtinRpcProcedure</code> collecting diags and goals at various places throughout the document. Your hint is definitely useful, but I wonder now since there are so many changes in <code>v4.8.0</code> (and pressumably even more with the incremental compilation of <code>v4.9.0</code>), maybe it's not just a simple patch.</p>\n<p>Maybe it's more reasonable to skip <code>v4.8.0</code> and directly look into reimplementing that part in <code>v4.9.0-rc1</code>...</p>",
        "id": 443280078,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1717760559
    },
    {
        "content": "<p>No, all the changes on that front should already be in 4.8.0, no snapshot changes since then</p>",
        "id": 443280402,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1717760686
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"385895\">Jon Eugster</span> <a href=\"#narrow/stream/270676-lean4/topic/Retrieving.20all.20diagnostics/near/443280078\">said</a>:</p>\n<blockquote>\n<p>the context is that NNG has a modified <code>FileWorker</code></p>\n</blockquote>\n<p>Should I ask why? At least then it's not a surprise that updates will be painful</p>",
        "id": 443281209,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1717760922
    },
    {
        "content": "<p>Ah ok, thats good to know. Thanks!</p>\n<p>Tbh, I dont fully understand that part, <span class=\"user-mention\" data-user-id=\"129120\">@Alexander Bentkamp</span>  implemented that about 2 years ago and I tried to stay clear of it as much as possible<span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> But for example there is an extended <code>WorkerState</code> that also includes the game's data. The main two points are creating hints dependent of the proof step and blacklisting certain tactics/theorems. Another thing is that the user's editor only contains a tactic-proof, so that needs to be embedded into a <code>theorem</code> before elaborating.</p>\n<p>But yes, maybe it's about time to look at that again... Maybe that would be a good question for one of these future FRO office hours, tobask what the conceptually best approach would be.</p>",
        "id": 443284034,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1717761938
    },
    {
        "content": "<p>I think my suggestion for something like that would have been to, <em>in the client</em>, transform the document such that the proof is embedded like you say and then, in the client again, shift all positions of requests and responses accordingly. All the game logic could then be done in a custom elaborator, e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">check_level</span><span class=\"w\"> </span><span class=\"s2\">\"level1\"</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"bp\">&lt;</span><span class=\"n\">input</span><span class=\"bp\">&gt;</span>\n</code></pre></div>",
        "id": 443293551,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1717765169
    },
    {
        "content": "<p>Maybe that would be easier, but maybe it's not. I don't think we can easily shift the requests and resonses or transform the document because those communications are handled by external packages on the client side (monaco-languageclient and lean4-infoview)</p>",
        "id": 443294920,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1717765635
    },
    {
        "content": "<p>It could also be a language server proxy that does the shifting, it would be like the watchdog but much simpler as it would not have to implement 1:n proxying</p>",
        "id": 443295448,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1717765830
    },
    {
        "content": "<p>Hm, that sounds better. The proxy would have to know all places where line info needs to be modified, but maybe thats ok.</p>",
        "id": 443296862,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1717766344
    },
    {
        "content": "<p>We probably still need a custom method to collect all goals along with the corresponding hints though. So it would not solve the particular problem that Jon raised, I think.</p>",
        "id": 443297935,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1717766689
    }
]