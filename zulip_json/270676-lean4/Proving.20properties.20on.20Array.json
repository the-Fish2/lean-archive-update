[
    {
        "content": "<p>I am a newbie in Lean community and trying to prove a theorem in Lean4. I seek help with making progress towards that.<br>\nThe current status of proof is below. In particular, I have 5 assumptions and I am trying to use the assumption 3. i.e., sizeGTZeroDST</p>\n<ol>\n<li>src dst: Array Nat</li>\n<li>sizeGTZeroSRC: 0 &lt; Array.size src</li>\n<li>sizeGTZeroDST: 0 &lt; Array.size dst</li>\n<li>srcInRange: <a href=\"http://Nat.zero\">Nat.zero</a> &lt; Array.size src</li>\n<li>dstInRange: <a href=\"http://Nat.zero\">Nat.zero</a> &lt; Array.size dst</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span>\n      <span class=\"n\">Nat.zero</span> <span class=\"bp\">&lt;</span>\n        <span class=\"n\">Array.size</span>\n          <span class=\"o\">(</span><span class=\"n\">copyElements</span> <span class=\"n\">src</span>\n            <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Array.size</span> <span class=\"n\">dst</span> <span class=\"k\">then</span>\n              <span class=\"o\">{</span>\n                <span class=\"n\">data</span> <span class=\"o\">:=</span>\n                  <span class=\"n\">List.set</span> <span class=\"n\">dst.data</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"o\">})</span>\n                    <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Array.size</span> <span class=\"n\">src</span> <span class=\"k\">then</span> <span class=\"n\">List.get</span> <span class=\"n\">src.data</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"n\">default</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n            <span class=\"k\">else</span> <span class=\"n\">dst</span><span class=\"o\">)</span>\n            <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n    <span class=\"n\">List.get</span>\n      <span class=\"o\">(</span><span class=\"n\">copyElements</span> <span class=\"n\">src</span>\n          <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Array.size</span> <span class=\"n\">dst</span> <span class=\"k\">then</span>\n            <span class=\"o\">{</span>\n              <span class=\"n\">data</span> <span class=\"o\">:=</span>\n                <span class=\"n\">List.set</span> <span class=\"n\">dst.data</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"o\">})</span>\n                  <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Array.size</span> <span class=\"n\">src</span> <span class=\"k\">then</span> <span class=\"n\">List.get</span> <span class=\"n\">src.data</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"n\">default</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n          <span class=\"k\">else</span> <span class=\"n\">dst</span><span class=\"o\">)</span>\n          <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">data</span>\n      <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.zero</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n  <span class=\"k\">else</span> <span class=\"n\">default</span><span class=\"o\">)</span> <span class=\"bp\">=</span>   <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Nat.zero</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Array.size</span> <span class=\"n\">src</span> <span class=\"k\">then</span> <span class=\"n\">List.get</span> <span class=\"n\">src.data</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.zero</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"n\">default</span>\n</code></pre></div>\n<p>I tried a few tactics such as rw [sizeGTZeroDST] , however I failed to apply this assumption in the fifth line of the goal with the following error:<br>\n\"tactic 'rewrite' failed, equality or iff proof expected<br>\n  0 &lt; Array.size dst\". <br>\nThe lean code in posted in the comment.</p>",
        "id": 419512635,
        "sender_full_name": "Muqsit Azeem",
        "timestamp": 1706898986
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Auto</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.Omega</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">auto.smt</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">auto.smt.trust</span> <span class=\"n\">true</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">copyElements</span> <span class=\"o\">(</span><span class=\"n\">src</span><span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">dst</span><span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">index</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">index</span> <span class=\"bp\">&lt;</span> <span class=\"n\">src.size</span> <span class=\"k\">then</span>\n    <span class=\"k\">if</span> <span class=\"n\">index</span> <span class=\"bp\">&lt;</span> <span class=\"n\">dst.size</span> <span class=\"k\">then</span>\n      <span class=\"k\">let</span> <span class=\"n\">updatedDst</span> <span class=\"o\">:=</span> <span class=\"n\">dst.set</span><span class=\"bp\">!</span> <span class=\"n\">index</span> <span class=\"o\">(</span><span class=\"n\">src.get</span><span class=\"bp\">!</span> <span class=\"n\">index</span><span class=\"o\">)</span>\n      <span class=\"n\">copyElements</span> <span class=\"n\">src</span> <span class=\"n\">updatedDst</span> <span class=\"o\">(</span><span class=\"n\">index</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">dst</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">dst</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">src.size</span> <span class=\"bp\">-</span> <span class=\"n\">index</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">copy</span> <span class=\"o\">(</span><span class=\"n\">src</span> <span class=\"n\">dst</span><span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">copyElements</span> <span class=\"n\">src</span> <span class=\"n\">dst</span> <span class=\"mi\">0</span>\n\n\n\n<span class=\"k\">#eval</span> <span class=\"n\">copy</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">]</span>\n<span class=\"k\">#eval</span> <span class=\"n\">copy</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">]</span>\n<span class=\"k\">#eval</span> <span class=\"n\">copy</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">SrcDstEqualOnIndices</span> <span class=\"o\">(</span><span class=\"n\">src</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">dst</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">index</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n <span class=\"o\">(</span><span class=\"n\">index</span> <span class=\"bp\">&lt;</span> <span class=\"n\">src.size</span> <span class=\"bp\">∧</span> <span class=\"n\">index</span> <span class=\"bp\">&lt;</span> <span class=\"n\">dst.size</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">copy</span> <span class=\"n\">src</span> <span class=\"n\">dst</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span><span class=\"bp\">!</span> <span class=\"n\">index</span> <span class=\"bp\">=</span> <span class=\"n\">src.get</span><span class=\"bp\">!</span> <span class=\"n\">index</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">indexInRange</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">copy</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">copyElements</span>\n    <span class=\"n\">split</span>\n    <span class=\"n\">case</span> <span class=\"n\">inl</span> <span class=\"n\">sizeGTZeroSRC</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">srcInRange</span><span class=\"o\">,</span> <span class=\"n\">dstInRange</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">indexInRange</span>\n      <span class=\"n\">simp_all</span>\n      <span class=\"n\">split</span>\n      <span class=\"n\">case</span> <span class=\"n\">inl</span> <span class=\"n\">sizeGTZeroDST</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">induction</span> <span class=\"n\">index</span>\n        <span class=\"n\">case</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"c1\">--</span>\n          <span class=\"n\">unfold</span> <span class=\"n\">Array.get</span><span class=\"bp\">!</span>\n          <span class=\"n\">unfold</span> <span class=\"n\">Array.set</span><span class=\"bp\">!</span>\n          <span class=\"n\">unfold</span> <span class=\"n\">Array.getD</span>\n          <span class=\"n\">unfold</span> <span class=\"n\">Array.setD</span>\n          <span class=\"n\">unfold</span> <span class=\"n\">Array.get</span>\n          <span class=\"n\">unfold</span> <span class=\"n\">Array.set</span>\n          <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sizeGTZeroDST</span><span class=\"o\">]</span>\n          <span class=\"c1\">-- unfold copyElements</span>\n          <span class=\"n\">simp_all</span>\n          <span class=\"n\">split</span>\n          <span class=\"n\">case</span> <span class=\"n\">inl</span> <span class=\"bp\">=&gt;</span>\n            <span class=\"n\">simp_all</span>\n            <span class=\"n\">unfold</span> <span class=\"n\">List.get</span>\n            <span class=\"n\">split</span>\n            <span class=\"c1\">-- unfold copyElements</span>\n            <span class=\"n\">case</span> <span class=\"n\">h_1</span> <span class=\"bp\">=&gt;</span>\n              <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">dstInRange</span><span class=\"o\">]</span>\n            <span class=\"n\">omega</span>\n            <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">dstInRange</span><span class=\"o\">]</span>\n\n          <span class=\"c1\">--simp [dstInRange]</span>\n\n          <span class=\"c1\">-- simp_arith</span>\n          <span class=\"gr\">sorry</span>\n        <span class=\"n\">case</span> <span class=\"n\">succ</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">unfold</span> <span class=\"n\">Array.get</span><span class=\"bp\">!</span>\n          <span class=\"n\">unfold</span> <span class=\"n\">Array.set</span><span class=\"bp\">!</span>\n          <span class=\"n\">unfold</span> <span class=\"n\">Array.getD</span>\n          <span class=\"n\">unfold</span> <span class=\"n\">Array.setD</span>\n          <span class=\"n\">unfold</span> <span class=\"n\">Array.get</span>\n          <span class=\"n\">unfold</span> <span class=\"n\">Array.set</span>\n          <span class=\"n\">simp_all</span>\n          <span class=\"n\">split</span>\n\n          <span class=\"n\">case</span> <span class=\"n\">inl</span> <span class=\"bp\">=&gt;</span>\n           <span class=\"gr\">sorry</span>\n          <span class=\"n\">case</span> <span class=\"n\">inr</span> <span class=\"bp\">=&gt;</span>\n\n          <span class=\"n\">simp_all</span>\n          <span class=\"gr\">sorry</span>\n\n\n      <span class=\"n\">case</span> <span class=\"n\">inr</span> <span class=\"n\">sizeNOTGTZeroDST</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">unfold</span> <span class=\"n\">Array.size</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n        <span class=\"n\">simp_all</span>\n        <span class=\"n\">contradiction</span>\n\n    <span class=\"n\">case</span> <span class=\"n\">inr</span> <span class=\"n\">sizeNotGTZeroSRC</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">srcInRange</span><span class=\"o\">,</span> <span class=\"n\">dstInRange</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">indexInRange</span>\n      <span class=\"n\">unfold</span> <span class=\"n\">Array.size</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n      <span class=\"n\">simp_all</span>\n      <span class=\"n\">contradiction</span>\n</code></pre></div>",
        "id": 419512684,
        "sender_full_name": "Muqsit Azeem",
        "timestamp": 1706899006
    },
    {
        "content": "<p>The <code>rw</code> tactic will only consume hypotheses of the form A=B or A&lt;-&gt;B, you can't rewrite arbitrary facts</p>",
        "id": 419516134,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706900272
    },
    {
        "content": "<p>I would recommend looking at core/std library facts about arrays to see how they are proven. Generally you want to provide a mathematically nice definition of what your function (in this case <code>copy</code>) does to the array.</p>\n<p>Here maybe you want to give a description of <code>copy</code> in terms of <code>Array.ofFn</code>, something like <code>copy A B = Array.ofFn (fun i =&gt; if i &lt; A.size then A[i] else B[i])</code>.</p>\n<p>You then can prove that by setting up the right induction invariant, again see examples in core/std. And then most of the theorems you want about the operation just follow straightforwardly from this characterization of <code>copy</code> in terms of <code>Array.ofFn</code>.</p>",
        "id": 419516878,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1706900535
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> : Indeed, it did not work and, therefore, I am wondering if there is a way to reduce the following two</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">if</span> <span class=\"n\">cond</span> <span class=\"k\">then</span> <span class=\"n\">E1</span> <span class=\"k\">else</span> <span class=\"n\">E2</span>\n\n<span class=\"n\">cond</span> <span class=\"bp\">=</span> <span class=\"n\">true</span>\n</code></pre></div>\n<p>to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">E1</span>\n</code></pre></div>",
        "id": 419520634,
        "sender_full_name": "Muqsit Azeem",
        "timestamp": 1706902037
    },
    {
        "content": "<p>you can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=if_pos#doc\">docs#if_pos</a></p>",
        "id": 419520725,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706902078
    },
    {
        "content": "<p>As far as I know, we need to perform an induction in the same direction as the function is defined when we want to prove these kinds of properties. For example, we can prove that <code>copy</code> does not change the size (which we'll use proving the final result) as follows. Please note that <code>copy_size.go</code> calls itself with <code>i + 1</code> as we define <code>copy.go</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">copy</span> <span class=\"o\">(</span><span class=\"n\">src</span> <span class=\"n\">dst</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">go</span> <span class=\"n\">src</span> <span class=\"n\">dst</span> <span class=\"mi\">0</span>\n<span class=\"n\">where</span>\n  <span class=\"n\">go</span> <span class=\"o\">(</span><span class=\"n\">src</span> <span class=\"n\">dst</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">src.size</span> <span class=\"k\">then</span>\n      <span class=\"k\">if</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">dst.size</span> <span class=\"k\">then</span>\n        <span class=\"n\">go</span> <span class=\"n\">src</span> <span class=\"o\">(</span><span class=\"n\">dst.set</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">⟩</span> <span class=\"o\">(</span><span class=\"n\">src.get</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">⟩))</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n      <span class=\"k\">else</span>\n        <span class=\"n\">dst</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">dst</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">go</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">src.size</span> <span class=\"bp\">-</span> <span class=\"n\">i</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">copy_size</span> <span class=\"o\">{</span><span class=\"n\">src</span> <span class=\"n\">dst</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">copy</span> <span class=\"n\">src</span> <span class=\"n\">dst</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">size</span> <span class=\"bp\">=</span> <span class=\"n\">dst.size</span> <span class=\"o\">:=</span>\n  <span class=\"n\">go</span> <span class=\"n\">src</span> <span class=\"n\">dst</span> <span class=\"mi\">0</span>\n<span class=\"n\">where</span>\n  <span class=\"n\">go</span> <span class=\"o\">(</span><span class=\"n\">src</span> <span class=\"n\">dst</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">copy.go</span> <span class=\"n\">src</span> <span class=\"n\">dst</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">size</span> <span class=\"bp\">=</span> <span class=\"n\">dst.size</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">copy.go</span>\n    <span class=\"n\">split</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">try</span> <span class=\"n\">rfl</span>\n    <span class=\"n\">case</span> <span class=\"n\">inl</span> <span class=\"n\">h₁</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">split</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">try</span> <span class=\"n\">rfl</span>\n      <span class=\"n\">case</span> <span class=\"n\">inl</span> <span class=\"n\">h₂</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">go</span> <span class=\"n\">src</span> <span class=\"o\">(</span><span class=\"n\">dst.set</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">⟩</span> <span class=\"o\">(</span><span class=\"n\">src.get</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">⟩))</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)]</span>\n        <span class=\"n\">simp</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">go</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">src.size</span> <span class=\"bp\">-</span> <span class=\"n\">i</span>\n</code></pre></div>\n<p>Proving the equality is trickier because we'll need to strengthen the induction hypothesis to prove properties in the base cases. This is done by adding preconditions to the <code>go</code> definition, and the added preconditions are called <a href=\"https://en.wikipedia.org/wiki/Loop_invariant\">loop invariants</a>. Finding the right loop invariants requires a bit of art, but usually you can find them by observing the arguments of the recursive calls and thinking about relationships between them.</p>\n<p>Once you find the right loop invariants, you can write a proof like this. We'll also need some tricks to satisfy about the details, but AFAIK the best way to learn these tricks is to looking at the standard libraries, as suggested.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- The invariant for the copy function</span>\n<span class=\"kd\">def</span> <span class=\"n\">copy_get.inv</span> <span class=\"o\">(</span><span class=\"n\">src</span> <span class=\"n\">dst</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">src.size</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">dst.size</span><span class=\"o\">),</span> <span class=\"n\">dst.get</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">src.get</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">copy_get</span> <span class=\"o\">{</span><span class=\"n\">src</span> <span class=\"n\">dst</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">src.size</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">dst.size</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">copy</span> <span class=\"n\">src</span> <span class=\"n\">dst</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">copy_size</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">]⟩</span> <span class=\"bp\">=</span> <span class=\"n\">src.get</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">copy</span>\n  <span class=\"k\">have</span> <span class=\"n\">inv₀</span> <span class=\"o\">:</span> <span class=\"n\">copy_get.inv</span> <span class=\"n\">src</span> <span class=\"n\">dst</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">i</span> <span class=\"n\">h</span>\n    <span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">Nat.not_lt_zero</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">go</span> <span class=\"n\">src</span> <span class=\"n\">dst</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">Nat.zero_le</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">inv₀</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">eq</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">])</span>\n  <span class=\"n\">exact</span> <span class=\"n\">eq</span>\n<span class=\"n\">where</span>\n  <span class=\"n\">go</span> <span class=\"o\">(</span><span class=\"n\">src</span> <span class=\"n\">dst</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hle</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">min</span> <span class=\"n\">src.size</span> <span class=\"n\">dst.size</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">inv₀</span> <span class=\"o\">:</span> <span class=\"n\">copy_get.inv</span> <span class=\"n\">src</span> <span class=\"n\">dst</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"c1\">-- The invariant holds for the final arguments</span>\n    <span class=\"n\">copy_get.inv</span> <span class=\"n\">src</span> <span class=\"o\">(</span><span class=\"n\">copy.go</span> <span class=\"n\">src</span> <span class=\"n\">dst</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"n\">src.size</span> <span class=\"n\">dst.size</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hle</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">copy.go</span>\n    <span class=\"n\">split</span>\n    <span class=\"n\">case</span> <span class=\"n\">inl</span> <span class=\"n\">h₁'</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">split</span>\n      <span class=\"n\">case</span> <span class=\"n\">inl</span> <span class=\"n\">h₂'</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">let</span> <span class=\"n\">dst'</span> <span class=\"o\">:=</span> <span class=\"n\">dst.set</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">h₂'</span><span class=\"o\">⟩</span> <span class=\"o\">(</span><span class=\"n\">src.get</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">h₁'</span><span class=\"o\">⟩)</span>\n        <span class=\"k\">have</span> <span class=\"n\">hlt</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">min</span> <span class=\"n\">src.size</span> <span class=\"n\">dst'.size</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h₁'</span><span class=\"o\">,</span> <span class=\"n\">h₂'</span><span class=\"o\">]</span>\n        <span class=\"k\">have</span> <span class=\"n\">h₂''</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">dst'.size</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h₂'</span><span class=\"o\">]</span>\n        <span class=\"c1\">-- The invariant holds for `k + 1`, allowing us to call `go` recursively.</span>\n        <span class=\"k\">have</span> <span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">copy_get.inv</span> <span class=\"n\">src</span> <span class=\"n\">dst'</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n          <span class=\"n\">intro</span> <span class=\"n\">j</span> <span class=\"n\">h</span>\n          <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.le_of_lt_succ</span> <span class=\"n\">h</span>\n          <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">src.size</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.lt_of_le_of_lt</span> <span class=\"n\">h</span> <span class=\"n\">h₁'</span>\n          <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">dst'.size</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.lt_of_le_of_lt</span> <span class=\"n\">h</span> <span class=\"n\">h₂''</span>\n          <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n          <span class=\"n\">simp</span>\n          <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Array.get_set</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hj</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.lt_of_le_of_lt</span> <span class=\"n\">h</span> <span class=\"n\">h₂'</span><span class=\"o\">)]</span>\n          <span class=\"n\">cases</span> <span class=\"n\">Nat.lt_or_eq_of_le</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n          <span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"n\">lt</span> <span class=\"bp\">=&gt;</span>\n            <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">≠</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.ne_of_gt</span> <span class=\"n\">lt</span>\n            <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n            <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">inv₀</span> <span class=\"n\">j</span> <span class=\"n\">lt</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n          <span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"n\">eq</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">eq</span><span class=\"o\">]</span>\n        <span class=\"k\">have</span> <span class=\"n\">ih</span> <span class=\"o\">:=</span> <span class=\"n\">go</span> <span class=\"n\">src</span> <span class=\"n\">dst'</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">hlt</span> <span class=\"n\">inv</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">copy_size.go</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ih</span>\n        <span class=\"n\">exact</span> <span class=\"n\">ih</span>\n      <span class=\"n\">case</span> <span class=\"n\">inr</span> <span class=\"n\">h₂'</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">dst.size</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.le_antisymm</span> <span class=\"n\">hle.2</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_of_not_lt</span> <span class=\"n\">h₂'</span><span class=\"o\">)</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">copy_get.inv</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n        <span class=\"n\">intro</span> <span class=\"n\">j</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span>\n        <span class=\"c1\">-- Use the given invariant for the base case</span>\n        <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">inv₀</span> <span class=\"n\">j</span> <span class=\"n\">h₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">⟩</span>\n    <span class=\"n\">case</span> <span class=\"n\">inr</span> <span class=\"n\">h₁'</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">src.size</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.le_antisymm</span> <span class=\"n\">hle.1</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_of_not_lt</span> <span class=\"n\">h₁'</span><span class=\"o\">)</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">copy_get.inv</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n      <span class=\"n\">intro</span> <span class=\"n\">j</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span>\n      <span class=\"c1\">-- Use the given invariant for the base case</span>\n      <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">inv₀</span> <span class=\"n\">j</span> <span class=\"n\">h₁</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">⟩</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">go</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">src.size</span> <span class=\"bp\">-</span> <span class=\"n\">k</span>\n</code></pre></div>\n</div></div>",
        "id": 419607585,
        "sender_full_name": "pandaman",
        "timestamp": 1706965850
    }
]