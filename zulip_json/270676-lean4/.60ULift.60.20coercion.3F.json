[
    {
        "content": "<p>Should there be a coercion from <code>ULift α</code> to <code>α</code>? I'm trying to figure out the pros and cons.</p>\n<p>My main use case for <code>ULift</code> is in monadic/functorial code. For example, <code>Array.size &lt;$&gt; ...</code> doesn't work for a monad/functor <code>m : Type u -&gt; Type v</code> unless <code>u = 0</code>. The workaround is to return a <code>ULift Nat</code> instead of a <code>Nat</code>, but then it's a hassle to manually <code>ULift.down</code> to get the actual <code>Nat</code>.</p>\n<p>I can't think of a use case for a coercion from <code>α</code> to <code>ULift α</code>, so it seems safe to have one from <code>ULift α</code> to <code>α</code>, as far as I can tell. Thoughts?</p>",
        "id": 442081783,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1717350564
    },
    {
        "content": "<p>I think it should be a <code>CoeTail</code> coercion.</p>",
        "id": 442084226,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1717351741
    },
    {
        "content": "<p>Isn't the use case for the coercion in the other direction the same as yours, but for <em>arguments</em> of type <code>m (ULift α)</code> instead of return values?</p>",
        "id": 442164364,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717397516
    },
    {
        "content": "<p>I'm not sure I follow this use case but <code>pure ⟨x⟩</code> is not nearly as inconvenient as the other way around.</p>",
        "id": 442198501,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1717407099
    },
    {
        "content": "<p>is there any reason we can't have both? (one as a CoeHead and one as a CoeTail)</p>",
        "id": 442445299,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1717479871
    }
]