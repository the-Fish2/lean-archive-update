[
    {
        "content": "<p>In <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.SynthInstance.addAnswer#doc\">docs#Lean.Meta.SynthInstance.addAnswer</a>, there is a trace for <code>Meta.synthInstance.answer</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">addAnswer</span> <span class=\"o\">(</span><span class=\"n\">cNode</span> <span class=\"o\">:</span> <span class=\"n\">ConsumerNode</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SynthM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">withMCtx</span> <span class=\"n\">cNode.mctx</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"n\">cNode.size</span> <span class=\"bp\">≥</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">read</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">maxResultSize</span> <span class=\"k\">then</span>\n      <span class=\"n\">trace</span><span class=\"o\">[</span><span class=\"n\">Meta.synthInstance.answer</span><span class=\"o\">]</span> <span class=\"s2\">\"{crossEmoji} {← instantiateMVars (← inferType cNode.mvar)}{Format.line}(size: {cNode.size} ≥ {(← read).maxResultSize})\"</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">withTraceNode</span> <span class=\"bp\">`</span><span class=\"n\">Meta.synthInstance.answer</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{checkEmoji} {← instantiateMVars (← inferType cNode.mvar)}\"</span><span class=\"o\">)</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">answer</span> <span class=\"bp\">←</span> <span class=\"n\">mkAnswer</span> <span class=\"n\">cNode</span>\n    <span class=\"c1\">-- Remark: `answer` does not contain assignable or assigned metavariables.</span>\n    <span class=\"k\">let</span> <span class=\"n\">key</span> <span class=\"o\">:=</span> <span class=\"n\">cNode.key</span>\n    <span class=\"k\">let</span> <span class=\"n\">entry</span> <span class=\"bp\">←</span> <span class=\"n\">getEntry</span> <span class=\"n\">key</span>\n    <span class=\"k\">if</span> <span class=\"n\">isNewAnswer</span> <span class=\"n\">entry.answers</span> <span class=\"n\">answer</span> <span class=\"k\">then</span>\n      <span class=\"k\">let</span> <span class=\"n\">newEntry</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">entry</span> <span class=\"k\">with</span> <span class=\"n\">answers</span> <span class=\"o\">:=</span> <span class=\"n\">entry.answers.push</span> <span class=\"n\">answer</span> <span class=\"o\">}</span>\n      <span class=\"n\">modify</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"k\">with</span> <span class=\"n\">tableEntries</span> <span class=\"o\">:=</span> <span class=\"n\">s.tableEntries.insert</span> <span class=\"n\">key</span> <span class=\"n\">newEntry</span> <span class=\"o\">}</span>\n      <span class=\"n\">entry.waiters.forM</span> <span class=\"o\">(</span><span class=\"n\">wakeUp</span> <span class=\"n\">answer</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but it is not registered at the bottom of the file. </p>\n<p>Should this be <code>Meta.synthInstance.newAnswer</code> or should it be registered?</p>",
        "id": 421944863,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708120592
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/3373\">lean#3373</a></p>",
        "id": 421949526,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708122967
    },
    {
        "content": "<p>I was curious about other possible unregistered trace classes in core, and with a couple greps found the following trace classes which are used but not registered (\"used\" meaning <code>trace[class.name]</code> or <code>withTraceNode `class.name</code>, though except for <code>Meta.synthInstance.answer</code>, all cases happened to be of the former form)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">PrettyPrinter</span><span class=\"bp\">/</span><span class=\"n\">Delaborator</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span><span class=\"o\">:</span> <span class=\"n\">PrettyPrinter.delab.input</span>\n<span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Meta</span><span class=\"bp\">/</span><span class=\"n\">Tactic</span><span class=\"bp\">/</span><span class=\"n\">Simp</span><span class=\"bp\">/</span><span class=\"n\">SimpAll.lean</span><span class=\"o\">:</span> <span class=\"n\">Meta.Tactic.simp.all</span>\n<span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Meta</span><span class=\"bp\">/</span><span class=\"n\">DecLevel.lean</span><span class=\"o\">:</span> <span class=\"n\">Meta.isLevelDefEq.step</span>\n<span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Meta</span><span class=\"bp\">/</span><span class=\"n\">SizeOf.lean</span><span class=\"o\">:</span> <span class=\"n\">Meta.sizeOf.minor</span>\n<span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Meta</span><span class=\"bp\">/</span><span class=\"n\">SizeOf.lean</span><span class=\"o\">:</span> <span class=\"n\">Meta.sizeOf.minor.step</span>\n<span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Meta</span><span class=\"bp\">/</span><span class=\"n\">SizeOf.lean</span><span class=\"o\">:</span> <span class=\"n\">Meta.sizeOf.aux</span>\n<span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Meta</span><span class=\"bp\">/</span><span class=\"n\">SizeOf.lean</span><span class=\"o\">:</span> <span class=\"n\">Meta.sizeOf.loop</span>\n<span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Elab</span><span class=\"bp\">/</span><span class=\"n\">StructInst.lean</span><span class=\"o\">:</span> <span class=\"n\">Elab.struct.modifyOp</span>\n<span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Elab</span><span class=\"bp\">/</span><span class=\"n\">Quotation.lean</span><span class=\"o\">:</span> <span class=\"n\">Elab.match_syntax.onMatch</span>\n<span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Elab</span><span class=\"bp\">/</span><span class=\"n\">Term.lean</span><span class=\"o\">:</span> <span class=\"n\">Elab.implicitForall</span>\n<span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Elab</span><span class=\"bp\">/</span><span class=\"n\">SyntheticMVars.lean</span><span class=\"o\">:</span> <span class=\"n\">Elab.defaultInstance</span>\n<span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Elab</span><span class=\"bp\">/</span><span class=\"n\">MutualDef.lean</span><span class=\"o\">:</span> <span class=\"n\">Elab.definition.mkClosure</span>\n<span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Elab</span><span class=\"bp\">/</span><span class=\"n\">Binders.lean</span><span class=\"o\">:</span> <span class=\"n\">Elab.autoParam</span>\n<span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Elab</span><span class=\"bp\">/</span><span class=\"n\">Binders.lean</span><span class=\"o\">:</span> <span class=\"n\">Elab.let.decl</span>\n</code></pre></div>",
        "id": 421955563,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1708126885
    },
    {
        "content": "<p>Is it a feature that <code>trace[oops.i.forgot.to.register.this]</code> is legal?</p>",
        "id": 421959138,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708129330
    },
    {
        "content": "<p>Any progress on this? In the meantime, <code>Meta.synthInstance.answer</code> has been added <a href=\"https://github.com/leanprover/lean4/pull/4151\">lean4#4151</a>.</p>",
        "id": 440737149,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716754364
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/Meta.2EsynthInstance.2Eanswer.20not.20registered/near/421959138\">said</a>:</p>\n<blockquote>\n<p>Is it a feature that <code>trace[oops.i.forgot.to.register.this]</code> is legal?</p>\n</blockquote>\n<p><code>trace[...]</code> is a macro that turns the part in square brackets into a <code>Name</code>. With the present implementation it is a bit tricky to check whether this name is registered or not. And often the registering happens after using the trace.</p>",
        "id": 440737301,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716754527
    },
    {
        "content": "<p>I don't see anything in principle preventing us from checking that at compile time, although of course several trace registrations will have to be moved up first</p>",
        "id": 440737728,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716755027
    },
    {
        "content": "<p>Note also that it needs to play well with <code>do</code>-notation: we want the <code>←</code> actions inside the <code>trace[...]</code> to not leak outside, so that they are only run when the trace option is set to true.</p>",
        "id": 440746177,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716762818
    },
    {
        "content": "<p>I believe it already does this</p>",
        "id": 440746463,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716763070
    },
    {
        "content": "<p>Yes it does</p>",
        "id": 440746737,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716763307
    }
]