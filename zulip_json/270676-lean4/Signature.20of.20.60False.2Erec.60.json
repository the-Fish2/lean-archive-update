[
    {
        "content": "<p>I am confused about the signature of <code>False.rec</code>. It seems to suggest that the motive is explicit, but the following example (and others) suggest it is implicit. Which is correct?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">False</span><span class=\"o\">)(</span><span class=\"n\">P</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Prop</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">False.rec</span><span class=\"w\"> </span><span class=\"n\">h</span>\n<span class=\"k\">#check</span><span class=\"w\"> </span><span class=\"n\">False.rec</span><span class=\"w\"> </span><span class=\"c1\">-- False.rec.{u} (motive : False → Sort u) (t : False) : motive t</span>\n</code></pre></div>",
        "id": 441354391,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1717032043
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=False.rec#doc\">docs#False.rec</a> (I don’t know why I expected that to work.)</p>",
        "id": 441355887,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1717032845
    },
    {
        "content": "<p>Use <code>False.elim</code> instead.</p>",
        "id": 441359683,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1717034925
    },
    {
        "content": "<p><code>False.rec</code> is automatically generated, <code>motive</code> is explicit because it can't be inferred from any later argument.</p>",
        "id": 441359894,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1717035013
    },
    {
        "content": "<p>Thanks.</p>\n<p>The issue is that while the signature claims the motive is explicit, function application does not want the motive as an argument. On the other hand, the pretty-printer does print the motive.</p>\n<p>This means in particular, the pretty-printed code is not valid. An example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span><span class=\"w\"> </span><span class=\"n\">silly</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">False</span><span class=\"o\">)(</span><span class=\"n\">P</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Prop</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">False.rec</span><span class=\"w\"> </span><span class=\"n\">h</span>\n<span class=\"k\">#print</span><span class=\"w\"> </span><span class=\"n\">silly</span><span class=\"w\"> </span><span class=\"c\">/-</span><span class=\"cm\"> theorem silly : False → ∀ (P : Prop), P :=</span>\n<span class=\"cm\">fun h P =&gt; False.rec (fun x =&gt; P) h -/</span>\n</code></pre></div>",
        "id": 441360888,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1717035516
    },
    {
        "content": "<p>I am asking because I am refactoring code generated by the pretty-printer, so trying to understand what is happening.</p>",
        "id": 441360980,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1717035569
    },
    {
        "content": "<p>It seems to be because of the elabAsElim code, where the <code>motive</code> argument is solved for, even if it's explicit.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">elab_as_elim</span><span class=\"kd\">]</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">False</span><span class=\"bp\">.</span><span class=\"n\">rec'</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">motive</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">False</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"kt\">Sort</span><span class=\"w\"> </span><span class=\"n\">u_1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">False</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">motive</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">False</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">False</span><span class=\"bp\">.</span><span class=\"n\">rec'</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Bool</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"c1\">-- OK</span>\n</code></pre></div>\n<p>If you remove the attribute, then the <code>#check</code> gives the expected error message.</p>",
        "id": 441361951,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1717036010
    },
    {
        "content": "<p>Maybe <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.getElimExprInfo#doc\">docs#Lean.Meta.getElimExprInfo</a> should check that the motive is an implicit argument? (and maybe <code>False.rec</code> should have its motive be implicit?)</p>",
        "id": 441362609,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1717036314
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> <br>\nIt does seem to me that the motive being implicit is natural. In my case I can work around this issue quite easily, but wanted to understand what is happening (rather than hack a workaround based on observations, which could then break).</p>",
        "id": 441363529,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1717036791
    }
]