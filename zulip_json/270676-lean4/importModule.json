[
    {
        "content": "<p>How is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.importModules#doc\">docs4#Lean.importModules</a> meant to be used? If I create a new package with <code>lake init TestImport</code> and put in <code>Main.lean</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">TestImport</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"bp\">←</span> <span class=\"n\">importModules</span> <span class=\"o\">[{</span> <span class=\"n\">module</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">TestImport</span> <span class=\"o\">:</span> <span class=\"n\">Import</span> <span class=\"o\">}]</span> <span class=\"o\">{}</span> <span class=\"mi\">0</span>\n  <span class=\"n\">pure</span> <span class=\"o\">()</span>\n</code></pre></div>\n<p>Then running the executable gives <code>uncaught exception: unknown package 'TestImport'</code>.</p>",
        "id": 292543789,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1660036252
    },
    {
        "content": "<p>You need to call <code>initSearchPath</code> first, see also <a href=\"#narrow/stream/270676-lean4/topic/PrettyPrinter/near/282225104\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/PrettyPrinter/near/282225104</a></p>",
        "id": 292545215,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1660036984
    },
    {
        "content": "<p>Using</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">TestImport</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">initSearchPath</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">findSysroot</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"bp\">←</span> <span class=\"n\">importModules</span> <span class=\"o\">[{</span> <span class=\"n\">module</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">TestImport</span> <span class=\"o\">:</span> <span class=\"n\">Import</span> <span class=\"o\">}]</span> <span class=\"o\">{}</span> <span class=\"mi\">0</span>\n  <span class=\"n\">pure</span> <span class=\"o\">()</span>\n</code></pre></div>\n<p>doesn't change anything</p>",
        "id": 292549147,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1660038818
    },
    {
        "content": "<p>(and it was already there is in my actual issue, I missed it while minimizing).</p>",
        "id": 292549228,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1660038845
    },
    {
        "content": "<p>Ah, right.  I think that's because <code>findSysroot</code> only works for core Lean executables, because it looks at the path of the current executable (which in your case is nowhere near the core library).</p>",
        "id": 292549754,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1660039109
    },
    {
        "content": "<p>What you can do is embed the compile-time search path in the executable, and then set it at runtime.</p>",
        "id": 292549794,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1660039133
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/blob/28a4767dc2d247a0d77c943ed689e756b57f946e/scripts/runLinter.lean#L15-L21\">https://github.com/leanprover-community/mathlib4/blob/28a4767dc2d247a0d77c943ed689e756b57f946e/scripts/runLinter.lean#L15-L21</a></p>",
        "id": 292549800,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1660039134
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/blob/28a4767dc2d247a0d77c943ed689e756b57f946e/scripts/runLinter.lean#L36\">https://github.com/leanprover-community/mathlib4/blob/28a4767dc2d247a0d77c943ed689e756b57f946e/scripts/runLinter.lean#L36</a></p>",
        "id": 292549817,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1660039141
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 292567881,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1660047739
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/importModule/near/292549754\">said</a>:</p>\n<blockquote>\n<p>Ah, right.  I think that's because <code>findSysroot</code> only works for core Lean executables, because it looks at the path of the current executable (which in your case is nowhere near the core library).</p>\n</blockquote>\n<p>No, <code>findSysroot</code> is specifically to find Lean <em>outside</em> of the core Lean executables. You were right with your initial suggestion. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>  </p>\n<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>'s problem is simply that he needs to augment the search path with the local of <code>TestImport</code> which he could do, for example, by running the executable via <code>lake env &lt;his-exe&gt;</code> (assuming that <code>TestImport</code> is part of one of Lean libraries mentioned in his lakefle).</p>",
        "id": 292602449,
        "sender_full_name": "Mac",
        "timestamp": 1660059535
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/importModule/near/292549794\">said</a>:</p>\n<blockquote>\n<p>What you can do is embed the compile-time search path in the executable, and then set it at runtime.</p>\n</blockquote>\n<p>This seems like really bad idea. Such hard-coding would break the executable on any system which is not your own. <code>findSysroot</code> is the proper way to do this.</p>",
        "id": 292602858,
        "sender_full_name": "Mac",
        "timestamp": 1660059665
    },
    {
        "content": "<p>I want to run my executable by executing it, without prefixing it with <code>lake env</code>.</p>",
        "id": 292602881,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1660059676
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/importModule/near/292602881\">said</a>:</p>\n<blockquote>\n<p>I want to run my executable by executing it, without prefixing it with <code>lake env</code>.</p>\n</blockquote>\n<p>In order to import <code>TestImport</code>, the Lean interpreter needs to know where to find its olean. Unless you plan to ship the import with the executable, this information needs to come from the outside. Three are three ways to do this: (1) modify the <code>LEAN_PATH</code> environment variable yourself to include the path of <code>TestImport</code>'s olean, (2) have <code>lake env</code> do it for you, (3) have some CLI option on your executable that takes such a path and pass a list of such paths to <code>initSearchPath</code> as its second argument.</p>",
        "id": 292603471,
        "sender_full_name": "Mac",
        "timestamp": 1660059885
    },
    {
        "content": "<p>I would expect the content of <code>TestImport</code> to be put inside the executable, I don't understand the issue.</p>",
        "id": 292603756,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1660059986
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Sorry, sadly, that is not how the Lean interpreter works. In order to import modules you need an external olean corresponding to that module.</p>",
        "id": 292603929,
        "sender_full_name": "Mac",
        "timestamp": 1660060050
    },
    {
        "content": "<p>Even Lean's core modules are not exempt from this (their own oleans are distributed as part of the Lean toolchain).</p>",
        "id": 292604252,
        "sender_full_name": "Mac",
        "timestamp": 1660060135
    },
    {
        "content": "<p>But surely Lean's core module end up being part of the executable when you build a lean file, right?</p>",
        "id": 292604409,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1660060175
    },
    {
        "content": "<p>Their native symbols / code does get built into the executable, yes, but that is separate from the Lean symbols / code imported by the Lean interpreter (via <code>importModules</code>) for the Lean elaborator to analyze (and use when elaborating / interpreting new Lean code).</p>",
        "id": 292604775,
        "sender_full_name": "Mac",
        "timestamp": 1660060276
    },
    {
        "content": "<p>I'll need to think about all that. What I'm trying to do is probably too meta. I need a break anyway. Thanks for your answers.</p>",
        "id": 292605424,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1660060493
    },
    {
        "content": "<p>This is a very old thread, but I am probably hitting a similar problem.</p>\n<p>I have a project (called <code>UpdateDeprecations</code>) that defines a lean script.  When I try to get mathlib to depend on it, I add a <code>require</code> line to Mathlib's lakefile, I run <code>lake update UpdateDeprecations</code> and after that <code>lake env update_deprecations</code> works as expected.</p>\n<p>However, if I run once <code>lake exe update_deprecations</code>, this appears to have the effect of corrupting the library and the only way out seems to be to run <code>lake update UpdateDeprecations</code>.</p>",
        "id": 442866759,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717613792
    },
    {
        "content": "<p>Is there something that I can do so that running <code>lake exe update_deprecations</code> ideally works or at least does not corrupt the command?</p>",
        "id": 442866895,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717613834
    },
    {
        "content": "<p>Can you tell us which files change when you run <code>lake exe ...</code>?</p>",
        "id": 442900435,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1717623262
    },
    {
        "content": "<p>Actually, I am in a worst situation than I thought I was.  Trying to find out the latest modified file, I created a fresh copy of mathlib and I realise now that</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"w\">  </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">initSearchPath</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">findSysroot</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"c1\">-- create the environment with `import UpdateDeprecations`</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">env</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Environment</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">importModules</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">leakEnv</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">true</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[{</span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"ss\">`UpdateDeprecations</span><span class=\"o\">}]</span><span class=\"w\"> </span><span class=\"o\">{}</span>\n</code></pre></div>\n<p>probably only worked before because I had stale cache for <code>UpdateDeprecations</code>.  Now, the <code>importModules</code> command reports</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">uncaught</span><span class=\"w\"> </span><span class=\"n\">exception</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">unknown</span><span class=\"w\"> </span><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"n\">UpdateDeprecations'</span>\n<span class=\"n\">You</span><span class=\"w\"> </span><span class=\"n\">might</span><span class=\"w\"> </span><span class=\"n\">need</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"bp\">'/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">damiano</span><span class=\"bp\">/</span><span class=\"n\">Lean4'</span><span class=\"w\"> </span><span class=\"n\">as</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">workspace</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">your</span><span class=\"w\"> </span><span class=\"n\">editor</span>\n</code></pre></div>",
        "id": 442949255,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717640886
    },
    {
        "content": "<p>However, if in VSCode I open a new file with <code>import UpdateDeprecation</code> everything is fine and the declarations in the package are in the environment.</p>",
        "id": 442949390,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717640973
    },
    {
        "content": "<p>To reproduce:</p>\n<ul>\n<li>in <code>lakefile.lean</code>, add</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">require</span><span class=\"w\"> </span><span class=\"n\">UpdateDeprecations</span><span class=\"w\"> </span><span class=\"k\">from</span><span class=\"w\"> </span><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"s2\">\"https://github.com/adomani/UpdateDeprecations\"</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"w\"> </span><span class=\"s2\">\"caps_dev\"</span>\n</code></pre></div>\n<ul>\n<li>run</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>lake<span class=\"w\"> </span>update<span class=\"w\"> </span>UpdateDeprecations\n<span class=\"c1\">## make sure that `update_deprecations` exists, print the help page</span>\nlake<span class=\"w\"> </span>exe<span class=\"w\"> </span>update_deprecations<span class=\"w\"> </span>--help\n<span class=\"c1\">## build the cache for an early file</span>\nlake<span class=\"w\"> </span>build<span class=\"w\"> </span>Mathlib.Tactic.Have\n<span class=\"c1\">## the next command should do nothing (other than printing some debugging messages), but fails instead</span>\nlake<span class=\"w\"> </span>exe<span class=\"w\"> </span>update_deprecations<span class=\"w\"> </span>--mods<span class=\"w\"> </span>Mathlib/Tactic/Have.lean\n</code></pre></div>",
        "id": 442950930,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717641800
    }
]