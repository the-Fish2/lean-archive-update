[
    {
        "content": "<p>When I try this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.ZMod.Basic</span>\n\n<span class=\"kd\">example</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">123456789101112</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">340282366920938463463374607431768211456</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">340282366920938463463374607431768211456</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">contradiction</span>\n</code></pre></div>\n<p>I get a timeout, probably because <code>contradiction</code> takes too long trying to match the type of <code>h₂</code> with <code>1 + 1 = 2</code>, how can I prevent this? Putting the big number in a definition doesn't help either...</p>",
        "id": 411719447,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1704713012
    },
    {
        "content": "<p>I'm not sure it can be prevented without fixing contradiction to not do this. In the meantime I'd probably switch to spelling the contradiction out as <code>exact h3 h1</code> or maybe just <code>simp_all</code>?</p>",
        "id": 411721886,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1704714079
    },
    {
        "content": "<p>This is just an MWE pulled out of an <code>aesop</code> execution that stalls for the same reason, leaving goals with contradicting hypotheses</p>",
        "id": 411727206,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1704716176
    },
    {
        "content": "<p><code>contadiction</code> tries <code>decide</code> by default, which may be why it is so slow. The <code>MetaM</code> version of <code>contradiction</code> includes a config option to disable this, and I've been thinking of requesting that this functionality be exposed to users of the tactic using <code>set_option</code>.</p>",
        "id": 411764816,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1704728818
    },
    {
        "content": "<p>We just stopped <code>simp</code> from trying <code>decide</code> by default for this kind of reason, right?</p>",
        "id": 411765355,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704728998
    },
    {
        "content": "<p>Can we override core tactics in mathlib or only extend them?</p>",
        "id": 411766414,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1704729314
    },
    {
        "content": "<p>I am not an expert but my impression is that we can override them (my evidence: I overrode <code>done</code> so that it printed a tada emoji)</p>",
        "id": 411766737,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704729398
    },
    {
        "content": "<p>I think this is an awkward case: you can override to make a tactic succeed in a different way, or succeed where it would have failed, but (AFAIK) you can't make it fail where it would have succeeded.</p>",
        "id": 411767626,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1704729659
    },
    {
        "content": "<p>Ah thanks for the pointer, maybe this behaviour is actually not there anymore (I'm still using 4.3.0)</p>",
        "id": 411771038,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1704730760
    },
    {
        "content": "<p>I also do not know if you can make a tactic fail \"nicely\" if it would have succeeded, but you can certainly cripple it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Elab.Tactic.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"k\">in</span>\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">contradiction</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"n\">logError</span> <span class=\"s2\">\"oh no!\"</span>\n    <span class=\"n\">setGoals</span> <span class=\"o\">[]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">False</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">contradiction</span>\n</code></pre></div>",
        "id": 411771351,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1704730866
    }
]