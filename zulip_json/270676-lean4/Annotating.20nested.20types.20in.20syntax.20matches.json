[
    {
        "content": "<p>Is there any way to combine these two syntax matches into one? I can't work out how to add <code>:declaration</code> into the second match:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getModifiers</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">command</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"bp\">``</span><span class=\"n\">Parser.Command.declModifiers</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">command</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">d</span><span class=\"o\">:</span><span class=\"n\">declaration</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">s</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n  <span class=\"k\">let</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">command</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">m</span><span class=\"o\">:</span><span class=\"n\">declModifiers</span> <span class=\"bp\">$</span><span class=\"n\">_d</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">d</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n  <span class=\"n\">return</span> <span class=\"n\">m</span>\n</code></pre></div>",
        "id": 429645127,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711456554
    },
    {
        "content": "<p>Actually, even this doesn't seem to do what I expect; the second syntax match is not using the knowledge that the syntax is a <code>declaration</code>, and still tries to match against</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">ohno</span><span class=\"o\">)</span> <span class=\"n\">declModifiers</span> <span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">command</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">m</span><span class=\"o\">:</span><span class=\"n\">declModifiers</span> <span class=\"bp\">$</span><span class=\"n\">_</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n</code></pre></div>",
        "id": 429652872,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711459131
    },
    {
        "content": "<p>It does still produce the right answer at least:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- none</span>\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">MetaM</span> <span class=\"n\">_</span> <span class=\"k\">from</span> <span class=\"n\">return</span> <span class=\"n\">getModifiers</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">‚Üê`</span><span class=\"o\">(</span><span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"n\">wat</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 429656066,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711460103
    },
    {
        "content": "<p>The generated code here is very strange:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">ohno</span><span class=\"o\">)</span> <span class=\"n\">declModifiers</span> <span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">command</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">m</span><span class=\"o\">:</span><span class=\"n\">declModifiers</span> <span class=\"bp\">$</span><span class=\"n\">_</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getModifiers</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">command</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"bp\">``</span><span class=\"n\">Parser.Command.declModifiers</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">command</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">m</span><span class=\"o\">:</span><span class=\"n\">declModifiers</span> <span class=\"bp\">$</span><span class=\"n\">_d</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">s</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n  <span class=\"n\">return</span> <span class=\"n\">m</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">getModifiers</span>\n</code></pre></div>\n<p>it seems to be checking for a <code>declaration</code> inside my <code>ohno</code> node.</p>",
        "id": 429656868,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711460308
    },
    {
        "content": "<p>Looking at <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Parser.Command.declaration#doc\">docs#Lean.Parser.Command.declaration</a>, the <code>declModifiers</code> are part of the declaration, so trying to match <code>$m:declModifiers $d:declaration</code> doesn't make sense</p>",
        "id": 429684988,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711467882
    },
    {
        "content": "<p>I'm a bit confused why this doesn't work</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">getModifiers</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">command</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"bp\">``</span><span class=\"n\">Parser.Command.declModifiers</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">command</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">m</span><span class=\"o\">:</span><span class=\"n\">declModifiers</span> <span class=\"bp\">$</span><span class=\"n\">d</span><span class=\"o\">:</span><span class=\"n\">Lean.Parser.Command.definition</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">s</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n  <span class=\"n\">return</span> <span class=\"n\">m</span>\n</code></pre></div>\n<p>but I seem to remember having the experience that you can't match on a whole declModifiers, but rather you have to match each of its components.</p>",
        "id": 429685904,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711468135
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/Annotating.20nested.20types.20in.20syntax.20matches/near/429684988\">said</a>:</p>\n<blockquote>\n<p>trying to match <code>$m:declModifiers $d:declaration</code> doesn't make sense</p>\n</blockquote>\n<p>I want to match <code>($m:declModifiers $d):declaration</code>, as opposed to \"any old syntax that starts with <code>declModifiers</code>\"</p>",
        "id": 429690069,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711469226
    },
    {
        "content": "<p>Unfortunately that notation doesn't exist</p>",
        "id": 429690101,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711469235
    },
    {
        "content": "<p>Oh right, I read that completely backwards, sorry</p>",
        "id": 429692313,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711469900
    },
    {
        "content": "<p>I've felt that there should be an extension to <code>$[...]</code> syntax where they can be used as \"quotation parentheses\" to group anything, and that you should be able to put a syntax kind after them. Currently, they only work for <code>$[...]?</code> and <code>$[...]*</code>, etc.</p>",
        "id": 429692873,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711470088
    },
    {
        "content": "<p>This would enable this solution to your problem: <code>let `(command| $[$m:declModifiers $_d]:declaration) := s | failure</code></p>",
        "id": 429693038,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711470143
    },
    {
        "content": "<p>I've run into cases where it's impossible to write patterns without this <code>$[...]</code> feature, and instead I needed to split them up across multiple patterns.</p>\n<p>They could also be used to prevent parenthesis insertion, which can be an issue since parentheses do create a syntax node.</p>",
        "id": 429693380,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711470247
    },
    {
        "content": "<p>I think this might explain why I have never been able to grok <code>$[...]</code> syntax; I falsely assumed it was valid in some context by itself.</p>",
        "id": 429700004,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711472335
    },
    {
        "content": "<p>I guess this would also work for <code>$[$m:declModifiers $_d]%$tk</code>? (not that I actually need that)</p>",
        "id": 429700062,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711472350
    },
    {
        "content": "<p>Yeah, that would be nice to have. The <code>abs</code> app unexpander could be simplified a bit if you could assign a matched term to a variable.</p>",
        "id": 429703924,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711473671
    },
    {
        "content": "<p>Using this non-existent syntax, one of the patterns is <code>$_ $[- $a]</code> since without that grouping the <code>-</code> would be subtraction rather than negation, but you can't use parentheses because that would entail needing parentheses to exist (and they don't exist when app unexpanders are run).</p>\n<p>The actual pattern needed is <code>$_ $[- $_]%$a</code>, so that this <code>a</code> can be dropped into another expression.</p>",
        "id": 429704247,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711473771
    }
]