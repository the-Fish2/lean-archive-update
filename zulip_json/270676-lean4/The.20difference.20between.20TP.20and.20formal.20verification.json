[
    {
        "content": "<p>Dear all,<br>\nI am curious about the distinction between theorem proving and formal verification when utilizing the Lean theorem prover. Specifically, I would like to know if Lean provides robust support for software formal verification similar to other provers like Isabelle. </p>\n<p>In my opinion, theorem proving (TP) and formal verification (FV) may appear to be quite similar. Formal verification involves asserting properties of a function, which can be translated into theorems to be proven.  I would appreciate it if you can explain the difference between these two tasks.</p>\n<p>Thank you!</p>",
        "id": 427366042,
        "sender_full_name": "Shaonan Wu",
        "timestamp": 1710746321
    },
    {
        "content": "<p>The difference is not so fundamental. I would put it as such: Theorem proving involves few definitions and many theorems, software verification involves many definitions and relatively few theorems</p>",
        "id": 427369452,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710747065
    },
    {
        "content": "<p>Another dimension in which they are different is that mathematicians are surprisingly willing to do the grunt work themselves, but software verification needs/expects more automation. Lean is still missing some very significant pieces of automation, but we are hoping to make a lot of progress over the next year.</p>",
        "id": 427370101,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710747206
    },
    {
        "content": "<p>But as Yaël indicates, they are just the different names blind men are giving parts of an elephant.</p>",
        "id": 427370403,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710747256
    },
    {
        "content": "<p>The computer science answer: formal theorem proving is one kind of formal verification.  There are other kinds like  model checking, smt solving etc.  These categories are not mutually exclusive. There are theorem provers like TLA+ or Tamarin that are closer to the model checking side. Then there are theorem provers like lean in which you can embed model checking algorithms and prove their correctness more manually</p>",
        "id": 427447478,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1710762058
    },
    {
        "content": "<p>And the converse to that is that we clearly want excellent model checkers, smt solvers, etc, in Lean. :-)</p>",
        "id": 427447826,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710762124
    }
]