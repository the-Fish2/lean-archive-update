[
    {
        "content": "<p>The docs at <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.mkForall#doc\">docs#Lean.mkForall</a> say that <code>.forallE x t b bi</code> is the preferred form. Is this still the case, and if so, should the former be deprecated?</p>",
        "id": 420785749,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707557626
    },
    {
        "content": "<p>No idea about what‚Äôs preferred and the evolution, but I found that I still reach for <code>mk‚Ä¶</code> if type inference isn‚Äôt good enough to allow <code>.forallE</code>, and for some reason  I shied away from<code>Expr.forallE</code>.</p>",
        "id": 420793815,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1707565701
    },
    {
        "content": "<p>If I remember correctly all the <code>mk...</code> functions were there before the leading dot notation was implemented. So <code>.forallE</code> should still be preferred but I have no idea if the mk variants should be deprecated or not. I personally do not use them and use <code>Expr...</code> when type inference fails.</p>",
        "id": 420794758,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1707566617
    },
    {
        "content": "<p>I've used <code>mkApp</code> occasionally but would not mind seeing it go, I use the dot-notation constructors most of the time</p>",
        "id": 420795101,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707566918
    },
    {
        "content": "<p>Should <code>mkApp2</code> be renamed to <code>.app2</code> for consistency, if <code>mkApp</code> were eliminated?</p>",
        "id": 420795150,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707566964
    },
    {
        "content": "<p>.app is a constructor, .app2 would be a function, I feel like that might cause some confusion.</p>",
        "id": 420803658,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1707574764
    },
    {
        "content": "<p>I‚Äôd rather see mkApp take an array than having .app2</p>",
        "id": 420803741,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1707574814
    },
    {
        "content": "<p>IIRC a benefit of the <code>mk...</code> functions was also that they computed the <code>data</code> field for each constructor, which isn't necessary anymore.</p>",
        "id": 420803923,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1707574992
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416280\">Max Nowak üêâ</span> <a href=\"#narrow/stream/270676-lean4/topic/mkForall.20vs.20forallE/near/420803741\">said</a>:</p>\n<blockquote>\n<p>I‚Äôd rather see mkApp take an array than having .app2</p>\n</blockquote>\n<p>That's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.mkAppN#doc\">docs#Lean.mkAppN</a></p>",
        "id": 420803998,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707575052
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416280\">Max Nowak üêâ</span> <a href=\"#narrow/stream/270676-lean4/topic/mkForall.20vs.20forallE/near/420803658\">said</a>:</p>\n<blockquote>\n<p>.app is a constructor, .app2 would be a function, I feel like that might cause some confusion.</p>\n</blockquote>\n<p>Maybe, but we have <code>Nat.add</code> (not a constructor) and <code>Nat.succ</code> (a constructor) etc, so I don't think this is a particularly strong argument</p>",
        "id": 420804040,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707575099
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416280\">Max Nowak üêâ</span> <a href=\"#narrow/stream/270676-lean4/topic/mkForall.20vs.20forallE/near/420803658\">said</a>:</p>\n<blockquote>\n<p>.app is a constructor, .app2 would be a function, I feel like that might cause some confusion.</p>\n</blockquote>\n<p>All the <code>mkApp2</code>-<code>mkApp10</code> functions are <code>@[match_pattern]</code>s at least, so you can use them as if they are (composites of) constructors in patterns.</p>",
        "id": 420820993,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1707588619
    }
]