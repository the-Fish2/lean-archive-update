[
    {
        "content": "<p>Would there be any easy way to generate a lot of constants automatically at once with random values?</p>",
        "id": 229777578,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1615425901
    },
    {
        "content": "<p>In lean 3 you can do that by calling <code>add_decl</code> to create new definitions, where the definition is a random value turned into a literal expression</p>",
        "id": 229798850,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615442130
    },
    {
        "content": "<p>Here's some code that should work, and currently works in the command line but crashes the server for me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">CoreM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">decl</span> <span class=\"o\">:=</span> <span class=\"n\">Declaration.defnDecl</span> <span class=\"o\">{</span>\n    <span class=\"n\">name</span>        <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">foo</span><span class=\"o\">,</span>\n    <span class=\"n\">levelParams</span> <span class=\"o\">:=</span> <span class=\"o\">[],</span>\n    <span class=\"n\">value</span>       <span class=\"o\">:=</span> <span class=\"n\">toExpr</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">IO.rand</span> <span class=\"mi\">0</span> <span class=\"mi\">100</span><span class=\"o\">),</span>\n    <span class=\"n\">type</span>        <span class=\"o\">:=</span> <span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">Nat</span><span class=\"o\">,</span>\n    <span class=\"n\">hints</span>       <span class=\"o\">:=</span> <span class=\"n\">ReducibilityHints.regular</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"n\">safety</span>      <span class=\"o\">:=</span> <span class=\"n\">DefinitionSafety.safe</span>\n  <span class=\"o\">}</span>\n  <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">addAndCompile</span> <span class=\"o\">{}</span> <span class=\"n\">decl</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Except.ok</span>    <span class=\"n\">env</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">setEnv</span> <span class=\"n\">env</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Except.error</span> <span class=\"n\">kex</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">test</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">foo</span>\n<span class=\"c1\">-- def foo : Nat :=</span>\n<span class=\"c1\">-- 77</span>\n</code></pre></div>",
        "id": 229800065,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615443140
    },
    {
        "content": "<p>Hmm, is there any way to do this without the #eval?</p>",
        "id": 229939631,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1615501586
    },
    {
        "content": "<p>Here is an example using the macro system. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> Helper syntax for defining the real macro. -/</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"gen_random_defs%\"</span> <span class=\"n\">ident</span> <span class=\"n\">num</span> <span class=\"n\">num</span> <span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">`gen_random_defs id n s` creates `n` declarations of the form</span>\n<span class=\"cm\">``</span>\n<span class=\"cm\">def id_&lt;idx&gt; : Nat := &lt;random value&gt;</span>\n<span class=\"cm\">``</span>\n<span class=\"cm\">The \"random values\" are generated using the function `stdNext` and \"seed\" `s`</span>\n<span class=\"cm\">-/</span>\n<span class=\"n\">macro</span> <span class=\"s2\">\"gen_random_defs\"</span> <span class=\"n\">id</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">num</span> <span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">gen_random_defs</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">id</span> <span class=\"bp\">$</span><span class=\"n\">n</span> <span class=\"bp\">$</span><span class=\"n\">s</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"c1\">-- s and 1 are the \"seeds\" for the random number generator</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">gen_random_defs</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">id</span> <span class=\"bp\">$</span><span class=\"n\">n</span> <span class=\"bp\">$</span><span class=\"n\">s1</span> <span class=\"bp\">$</span><span class=\"n\">s2</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"k\">in</span>\n      <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">val</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">s1</span><span class=\"o\">,</span> <span class=\"n\">s2</span><span class=\"o\">⟩)</span> <span class=\"o\">:=</span> <span class=\"n\">stdNext</span> <span class=\"o\">⟨</span><span class=\"n\">s1.toNat</span><span class=\"o\">,</span> <span class=\"n\">s2.toNat</span><span class=\"o\">⟩</span>\n      <span class=\"k\">let</span> <span class=\"n\">n</span>      <span class=\"o\">:=</span> <span class=\"n\">n.toNat</span>\n      <span class=\"k\">let</span> <span class=\"n\">currId</span> <span class=\"o\">:=</span> <span class=\"n\">id.getId.appendIndexAfter</span> <span class=\"n\">n</span>\n      <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n        <span class=\"n\">return</span> <span class=\"n\">mkNullNode</span>\n      <span class=\"k\">else</span>\n        <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdentFrom</span> <span class=\"n\">id</span> <span class=\"n\">currId</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">val</span><span class=\"o\">)</span>\n          <span class=\"n\">gen_random_defs</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">id</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">s1</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">s2</span><span class=\"o\">))</span>\n\n<span class=\"n\">gen_random_defs</span> <span class=\"n\">foo</span> <span class=\"mi\">4</span> <span class=\"mi\">10</span> <span class=\"c1\">-- Creates `foo_1` ... `foo_4` using random seed 10</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">foo_1</span>\n<span class=\"k\">#print</span> <span class=\"n\">foo_2</span>\n<span class=\"k\">#print</span> <span class=\"n\">foo_3</span>\n<span class=\"k\">#print</span> <span class=\"n\">foo_4</span>\n</code></pre></div>",
        "id": 229942698,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1615503161
    },
    {
        "content": "<p>Is there any way to access IO in term or command macros in order to get rid of the seed argument here? I'm trying to write something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> `rand_nat_const` creates a random `Nat` in the StdGen range -/</span>\n<span class=\"n\">macro</span> <span class=\"s2\">\"rand_nat_const\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"o\">(</span><span class=\"bp\">&lt;-</span><span class=\"o\">(</span><span class=\"n\">IO.rand</span> <span class=\"o\">(</span><span class=\"n\">stdRange.fst</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">stdRange.snd</span><span class=\"o\">)))))</span>\n</code></pre></div>\n<p>but it seems I can only use the reader monad here</p>",
        "id": 230762485,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1616013600
    },
    {
        "content": "<p>It looks like no</p>",
        "id": 230766513,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616015138
    },
    {
        "content": "<p>macros live in the <code>MacroM</code> monad which is pure</p>",
        "id": 230766548,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616015154
    },
    {
        "content": "<p>Although you might not need it since <code>MacroM</code> implements <code>MonadRef</code></p>",
        "id": 230767172,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616015402
    },
    {
        "content": "<p>I see, if I have <code> : command</code> does it live in CommandM instead? and does that include IO?</p>",
        "id": 230767305,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1616015444
    },
    {
        "content": "<p>No, all macros live in <code>MacroM</code></p>",
        "id": 230767444,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616015500
    },
    {
        "content": "<p>but that just means that it is pure during macro expansion, you can just do your computation after macro expansion</p>",
        "id": 230767616,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616015526
    },
    {
        "content": "<p>Indeed<br>\nthe issue is I would like to avoid the randomness on runtime</p>",
        "id": 230768097,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1616015669
    },
    {
        "content": "<p>I'm not sure what you mean. It's the same either way</p>",
        "id": 230768157,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616015694
    },
    {
        "content": "<p>It's not really clear what counts as \"runtime\" here</p>",
        "id": 230768398,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616015776
    },
    {
        "content": "<p>If you have a command-like that adds definitions to the environment, that will run when the lean file is processed. The olean files will contain the resulting definitions</p>",
        "id": 230768495,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616015822
    },
    {
        "content": "<p>if this is then used in a dependent lean file, it will be as if you wrote all those definitions, so I guess it's \"compile time\"?</p>",
        "id": 230768561,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616015855
    },
    {
        "content": "<p>That said, a lean file that elaborates differently depending on the phase of the moon seems like a bad idea</p>",
        "id": 230768703,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616015914
    },
    {
        "content": "<p>indeed but it's awfully convenient for this case where I want an algorithm to have some random parameters (for efficiency reasons) but I don't want it to be random on runtime (I don't want one of my runs to get some bad seed)<br>\nAlso it's nice because I don't have to worry about threading a reader through everything, especially if I want to prove things about this (which I want to be immutable)</p>",
        "id": 230771095,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1616016978
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 409266338,
        "sender_full_name": "Paul-Olivier Dehaye",
        "timestamp": 1703109224
    },
    {
        "content": "<p>You are mixing up two concepts. For one, we have the \"Propositions as types\" thing which is the theory that Lean is based on, where proofs have a computational interpretation. You could run these proofs, but this is completely useless, as we are only interested in the existence of those proofs. This is all the stuff that lives in <code>Prop</code>. The other concept is the code generation itself, where we only care about everything non-<code>Prop</code>. We throw the <code>Prop</code> stuff away once we have the code.</p>",
        "id": 409266724,
        "sender_full_name": "Max Nowak 🐉",
        "timestamp": 1703109423
    },
    {
        "content": "<p>Rip post :(</p>",
        "id": 409266744,
        "sender_full_name": "Max Nowak 🐉",
        "timestamp": 1703109435
    },
    {
        "content": "<p>It's still visible in the edit history (making deletion kind of pointless)</p>",
        "id": 409266874,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1703109500
    },
    {
        "content": "<p>You guys are quick. I posted what's below and then realized it was threaded with a different conversation and thus tried to delete, which indeed is pointless. </p>\n<p>Hi everyone. Lean is advertised at being relevant for code generation. My expectation reading that is that I would be able to chose a target language and compile Lean code to that language. Instead, all I can find in relation to Lean-generated code is that checking a math proof is like running a program, so we will compile Lean proofs to fast verified C code and run that to check the proof. My confusion might stem from my lack of awareness of non-math uses of Lean.</p>\n<p>Q1. Is this understanding correct for the traditional use of Lean to generate code?<br>\nQ2. Are there instances where Lean was used to generate code in other languages? What advantages did Lean provide there?<br>\nQ3. If the answer to Q2 is no, why not? Are there alternatives you can suggest?</p>\n<p>(my apologies if this is not the right forum to ask such questions)</p>",
        "id": 409267537,
        "sender_full_name": "Paul-Olivier Dehaye",
        "timestamp": 1703109753
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"416280\">@Max Nowak 🐉</span> when you say \"The other concept is the code generation itself, where we only care about everything non-Prop\", you refer to C code generation as I described, correct?</p>\n<p>I guess I don't have definite answers to Q2 and Q3 then. Would it be possible to target something else than C? Could Lean generate Python code for instance?</p>",
        "id": 409269802,
        "sender_full_name": "Paul-Olivier Dehaye",
        "timestamp": 1703110846
    },
    {
        "content": "<p>Max is referring to \"computational relevance\". Only computationally relevant Lean code gets compiled, which excludes proofs.</p>\n<p>The compilation pipeline right now is that definitions get converted to an intermediate representation (IR), and that can either be executed in a VM, or it can be translated to C, and that C is compiled to executable code.</p>\n<p>I think there was work on translating that IR to JavaScript. In principle, yes, you should be able to translate this IR to Python, but maybe for efficiency it would be better to use the generated C and use Python's ffi.</p>",
        "id": 409270233,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1703111093
    },
    {
        "content": "<p>\"Compiled\" might be an overloaded word here. All Lean code, including proofs, gets parsed, elaborated, and typechecked. This is the frontend to a normal compiler. Then there's the backend of a compiler, which includes code generation, and that is what we tend to refer to as compilation I believe. This sort of compilation only applies to things than meaningfully execute.</p>",
        "id": 409270368,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1703111173
    },
    {
        "content": "<p>By the way, most of the Lean 4 system is written in Lean 4. If you look at the stage0 folder in the repository, that is the C code that the compiler generated from the Lean 4 sources.</p>",
        "id": 409270536,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1703111281
    }
]