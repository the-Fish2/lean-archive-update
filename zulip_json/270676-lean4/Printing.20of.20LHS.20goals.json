[
    {
        "content": "<p>In this example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">lhs</span>\n</code></pre></div>\n<p>when the cursor is on the <code>conv =&gt;</code> line, LSP displays the goal as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Goals</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span>\n</code></pre></div>\n<p>where the <code>|</code> on the left shows that this goal is a LHS goal. This is because the goal prefix in <code>ppGoal</code> is determined by it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">getGoalPrefix</span> <span class=\"o\">(</span><span class=\"n\">mvarDecl</span> <span class=\"o\">:</span> <span class=\"n\">MetavarDecl</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">isLHSGoal</span><span class=\"bp\">?</span> <span class=\"n\">mvarDecl.type</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">isSome</span> <span class=\"k\">then</span>\n    <span class=\"c1\">-- use special prefix for `conv` goals</span>\n    <span class=\"s2\">\"| \"</span>\n  <span class=\"k\">else</span>\n    <span class=\"s2\">\"⊢ \"</span>\n</code></pre></div>\n<p>However, this is in contradiction to this comment in <code>Lean/Expr.lean</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/--</span>\n<span class=\"sd\">Annotate `e` with the LHS annotation. The delaborator displays</span>\n<span class=\"sd\">expressions of the form `lhs = rhs` as `lhs` when they have this annotation.</span>\n<span class=\"sd\">This is used to implement the infoview for the `conv` mode.</span>\n\n<span class=\"sd\">This version of `mkLHSGoal` does not check that the argument is an equality.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">mkLHSGoalRaw</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span>\n  <span class=\"n\">mkAnnotation</span> <span class=\"bp\">`</span><span class=\"n\">_lhsGoal</span> <span class=\"n\">e</span>\n</code></pre></div>\n<p>If a goal is a LHS goal, then according to this comment it cannot be pretty printed as <code>lhs = rhs</code> but instead as <code>lhs</code> only. How does the <code>conv</code> tactic manage to print a goal as <code>| lhs = rhs</code>?</p>",
        "id": 431816940,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1712524508
    },
    {
        "content": "<p>There are two different LHSs that are easily confused:</p>\n<p>If the goal is <code>P</code>, and you start </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n</code></pre></div>\n<p>then it creates a goal <code>P = ?rhs</code> with an unknown <code>?rhs</code> (a mvar), and the <code>isLHSGoal</code> makes sure you don't see</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"n\">P</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">rhs</span>\n</code></pre></div>\n<p>but</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"n\">P</span>\n</code></pre></div>\n<p>instead.</p>\n<p>In your case, the <code>P</code> itself happens to be an equality <code>(a + b) + c = (a + b) + c</code>, and so you see that.</p>",
        "id": 431940682,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1712574996
    }
]