[
    {
        "content": "<p>Is <code>by sorry</code> the semantic way to bypass proofs when creating instances from types that require proofs in unsafe functions?</p>",
        "id": 441530043,
        "sender_full_name": "eduardo",
        "timestamp": 1717095002
    },
    {
        "content": "<p>We usually use <code>lcProof</code> for this type of stuff in the core language. Of course I would generally advise <em>against</em> doing this and instead trying to find a way around it, can you maybe detail what you are dong and why you need a proof?</p>",
        "id": 441532557,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1717095773
    },
    {
        "content": "<p>I'm trying to use lean4 for now as a general-purpose functional language,  so I'm encoding refinement types using evidence. There are some cases where I just want to say to the compiler, \"It's ok. Even coming from the runtime, these values are correct; if not, you can just explode the program .\" SerDes is a good example of that.</p>",
        "id": 441537750,
        "sender_full_name": "eduardo",
        "timestamp": 1717097498
    },
    {
        "content": "<p>An alternative design could be similar to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.head%21#doc\">docs#List.head!</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">structure</span><span class=\"w\"> </span><span class=\"n\">NonEmptyString</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">String</span>\n<span class=\"w\">  </span><span class=\"n\">ev</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"bp\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">decide</span>\n<span class=\"n\">deriving</span><span class=\"w\"> </span><span class=\"n\">Repr</span>\n\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Inhabited</span><span class=\"w\"> </span><span class=\"n\">NonEmptyString</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"o\">{</span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"s2\">\"_\"</span><span class=\"o\">}</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">NonEmptyString</span><span class=\"bp\">.</span><span class=\"n\">mk!</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">NonEmptyString</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">ev</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"bp\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">    </span><span class=\"bp\">⟨</span><span class=\"n\">value</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">ev</span><span class=\"bp\">⟩</span>\n<span class=\"w\">  </span><span class=\"k\">else</span>\n<span class=\"w\">    </span><span class=\"n\">panic</span><span class=\"w\"> </span><span class=\"s2\">\"empty string\"</span>\n\n<span class=\"bp\">#</span><span class=\"n\">eval</span><span class=\"w\"> </span><span class=\"n\">NonEmptyString</span><span class=\"bp\">.</span><span class=\"n\">mk!</span><span class=\"w\"> </span><span class=\"s2\">\"a\"</span>\n</code></pre></div>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=panic#doc\">docs#panic</a> prints an error message and then continues the program with the default value provided by the <code>Inhabited</code> instance.</p>",
        "id": 441564361,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1717105535
    },
    {
        "content": "<p>+1 to relying on panic in these situations, but having to insert these ifs is not super ergonomic. If you do it anyways, it might be a good case study for how we can improve this via metaprogramming <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 441564882,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1717105708
    },
    {
        "content": "<p>Do we have alternatives to stopping the execution, like <code>error</code> in Haskell or <code>throw</code> in Scala? It's not yet clear to me whether the separation (if it exists) between <code>errors</code> and <code>defects</code> in Lean exists outside of the IO monad.</p>",
        "id": 441570970,
        "sender_full_name": "eduardo",
        "timestamp": 1717107731
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/Bypass.20proof/near/441564882\">said</a>:</p>\n<blockquote>\n<p>+1 to relying on panic in these situations, but having to insert these ifs is not super ergonomic. If you do it anyways, it might be a good case study for how we can improve this via metaprogramming <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>\n</blockquote>\n<p>I would love to achieve that, but I think it's a long way until reach there. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 441571396,
        "sender_full_name": "eduardo",
        "timestamp": 1717107917
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"724902\">eduardo</span> <a href=\"#narrow/stream/270676-lean4/topic/Bypass.20proof/near/441570970\">said</a>:</p>\n<blockquote>\n<p>Do we have alternatives to stopping the execution, like <code>error</code> in Haskell or <code>throw</code> in Scala? It's not yet clear to me whether the separation (if it exists) between <code>errors</code> and <code>defects</code> in Lean exists outside of the IO monad.</p>\n</blockquote>\n<p>You can throw from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Except#doc\">docs#Except</a></p>",
        "id": 441572487,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717108338
    },
    {
        "content": "<p>Hmm, based on the docs, it seems we don't have a definition of <code>defects</code> for pure code because of logic consistency. This seems weird in general-purpose languages but is necessary for the theorems. I'm sure it leads to safer code and a paradigm shift since the constraints to achieve ergonomics are different. Cool! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> . <br>\nThank you, folks!</p>",
        "id": 441575197,
        "sender_full_name": "eduardo",
        "timestamp": 1717109667
    },
    {
        "content": "<p>One thing to remember is that lean has very powerful <code>do</code> notation, so working in <code>Except</code> everywhere is surprisingly pleasant</p>",
        "id": 441575734,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717109984
    }
]