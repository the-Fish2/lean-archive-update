[
    {
        "content": "<p>Let's say I want to make an efficient hashmap counter from a list.  Is this good, or am I copying the hashmap at each iteration?  It isn't clear to me how fold or tail recursion work with change-in-place.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">counterFromList</span> <span class=\"o\">(</span><span class=\"n\">features</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Std.HashMap</span> <span class=\"n\">String</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">features.foldl</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:=</span> <span class=\"n\">Std.mkHashMap</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">hshMap</span> <span class=\"n\">str</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">cnt</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"n\">hshMap.find</span><span class=\"bp\">?</span> <span class=\"n\">str</span>\n    <span class=\"k\">let</span> <span class=\"n\">newCnt</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">cnt</span><span class=\"bp\">?</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">cnt</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cnt</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n    <span class=\"n\">hshMap.insert</span> <span class=\"n\">str</span> <span class=\"n\">newCnt</span>\n</code></pre></div>",
        "id": 420889076,
        "sender_full_name": "Jason Rute",
        "timestamp": 1707657308
    },
    {
        "content": "<p>(Also, if I'm being dumb and I should use a persistent map instead, feel free to tell me that also.)</p>",
        "id": 420889768,
        "sender_full_name": "Jason Rute",
        "timestamp": 1707658042
    },
    {
        "content": "<p>You can test this as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">noinline</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">insert</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">:</span> <span class=\"n\">Std.HashMap</span> <span class=\"n\">String</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"n\">dbgTraceIfShared</span> <span class=\"s2\">\"\"</span> <span class=\"n\">map</span>\n  <span class=\"n\">map.insert</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">counterFromList</span> <span class=\"o\">(</span><span class=\"n\">features</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Std.HashMap</span> <span class=\"n\">String</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">features.foldl</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:=</span> <span class=\"n\">Std.mkHashMap</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">hshMap</span> <span class=\"n\">str</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">cnt</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"n\">hshMap.find</span><span class=\"bp\">?</span> <span class=\"n\">str</span>\n    <span class=\"k\">let</span> <span class=\"n\">newCnt</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">cnt</span><span class=\"bp\">?</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n      <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">cnt</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cnt</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n    <span class=\"n\">insert</span> <span class=\"n\">hshMap</span> <span class=\"n\">str</span> <span class=\"n\">newCnt</span>\n\n<span class=\"c1\">-- output: shared RC</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">counterFromList</span> <span class=\"o\">[</span><span class=\"s2\">\"asdf\"</span><span class=\"o\">,</span> <span class=\"s2\">\"foo\"</span><span class=\"o\">,</span> <span class=\"s2\">\"bar\"</span><span class=\"o\">])</span><span class=\"bp\">.</span><span class=\"n\">findD</span> <span class=\"s2\">\"asdf\"</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>The hash map is shared in the first iteration but not in the following iterations. The empty hash map is probably shared in the first iteration because closed term extraction persists it and so it needs to be copied once instead of mutated.</p>",
        "id": 420899004,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1707665904
    },
    {
        "content": "<p>We need the <code>@[noinline]</code> trick because the old compiler can do some strange reorderings with <code>dbgTraceIfShared</code> operations. For example, take the same example with <code>Lean.HashMap</code> instead of <code>Std.HashMap</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">counterFromList</span> <span class=\"o\">(</span><span class=\"n\">features</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Lean.HashMap</span> <span class=\"n\">String</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">features.foldl</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:=</span> <span class=\"bp\">âˆ…</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">hshMap</span> <span class=\"n\">str</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">hshMap</span> <span class=\"o\">:=</span> <span class=\"n\">dbgTraceIfShared</span> <span class=\"s2\">\"1\"</span> <span class=\"n\">hshMap</span>\n    <span class=\"k\">let</span> <span class=\"n\">cnt</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"n\">hshMap.find</span><span class=\"bp\">?</span> <span class=\"n\">str</span>\n    <span class=\"k\">let</span> <span class=\"n\">hshMap</span> <span class=\"o\">:=</span> <span class=\"n\">dbgTraceIfShared</span> <span class=\"s2\">\"2\"</span> <span class=\"n\">hshMap</span>\n    <span class=\"k\">let</span> <span class=\"n\">newCnt</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">cnt</span><span class=\"bp\">?</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n      <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">cnt</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cnt</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n    <span class=\"k\">let</span> <span class=\"n\">hshMap</span> <span class=\"o\">:=</span> <span class=\"n\">dbgTraceIfShared</span> <span class=\"s2\">\"3\"</span> <span class=\"n\">hshMap</span>\n    <span class=\"n\">hshMap.insert</span> <span class=\"n\">str</span> <span class=\"n\">newCnt</span>\n\n<span class=\"c1\">-- output:</span>\n<span class=\"c1\">-- shared RC 2</span>\n<span class=\"c1\">-- shared RC 3</span>\n<span class=\"c1\">-- shared RC 2</span>\n<span class=\"c1\">-- shared RC 3</span>\n<span class=\"c1\">-- shared RC 2</span>\n<span class=\"c1\">-- shared RC 3</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">counterFromList</span> <span class=\"o\">[</span><span class=\"s2\">\"asdf\"</span><span class=\"o\">,</span> <span class=\"s2\">\"foo\"</span><span class=\"o\">,</span> <span class=\"s2\">\"bar\"</span><span class=\"o\">])</span><span class=\"bp\">.</span><span class=\"n\">findD</span> <span class=\"s2\">\"asdf\"</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>Here, the old compiler incorrectly moves the <code>find?</code> call in-between the third <code>dbgTraceIfShared</code> and the <code>insert</code> call, effectively yielding the following code where <code>hshMap1</code> is shared every iteration between the second <code>dbgTraceIfShared</code> operation and <code>find?</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">counterFromList</span> <span class=\"o\">(</span><span class=\"n\">features</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Lean.HashMap</span> <span class=\"n\">String</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">features.foldl</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:=</span> <span class=\"bp\">âˆ…</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">hshMap</span> <span class=\"n\">str</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">hshMap1</span> <span class=\"o\">:=</span> <span class=\"n\">dbgTraceIfShared</span> <span class=\"s2\">\"1\"</span> <span class=\"n\">hshMap</span>\n    <span class=\"k\">let</span> <span class=\"n\">hshMap2</span> <span class=\"o\">:=</span> <span class=\"n\">dbgTraceIfShared</span> <span class=\"s2\">\"2\"</span> <span class=\"n\">hshMap1</span>\n    <span class=\"k\">let</span> <span class=\"n\">hshMap3</span> <span class=\"o\">:=</span> <span class=\"n\">dbgTraceIfShared</span> <span class=\"s2\">\"3\"</span> <span class=\"n\">hshMap2</span>\n    <span class=\"k\">let</span> <span class=\"n\">cnt</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"n\">hshMap1.find</span><span class=\"bp\">?</span> <span class=\"n\">str</span>\n    <span class=\"k\">let</span> <span class=\"n\">newCnt</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">cnt</span><span class=\"bp\">?</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n      <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">cnt</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cnt</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n    <span class=\"n\">hshMap3.insert</span> <span class=\"n\">str</span> <span class=\"n\">newCnt</span>\n</code></pre></div>",
        "id": 420899625,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1707666368
    }
]