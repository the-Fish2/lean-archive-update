[
    {
        "content": "<p>The question is in the title: when defining a structure, can I use one of its fields to define another field, and if so how? I thought I saw some things like that in mathlib, but I can't find them anymore. More precisely, I am trying to define a <code>LinearIsometryEquiv</code> between two normed spaces <code>E</code> and <code>F</code>. So I write:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">MyBeautifulIsometry</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">‚âÉ‚Çó·µ¢</span><span class=\"o\">[</span><span class=\"bp\">ùïú</span><span class=\"o\">]</span> <span class=\"n\">F</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"n\">SomeExpression</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"n\">proof</span>\n  <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"n\">proof</span>\n  <span class=\"n\">invFun</span> <span class=\"o\">:=</span> <span class=\"n\">SomeComplicatedExpression</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"n\">proof</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"n\">proof</span>\n  <span class=\"n\">norm_map'</span> <span class=\"o\">:=</span> <span class=\"n\">proof</span> <span class=\"n\">that</span> <span class=\"n\">uses</span> <span class=\"n\">the</span> <span class=\"n\">proof</span> <span class=\"n\">of</span> <span class=\"n\">left_inv</span>\n</code></pre></div>\n<p>Is there a way to make the proof of <code>norm_map'</code> use the fact that I have already proved <code>left_inv</code>, or do I need to make a separate lemma ? The expression for <code>invFun</code> is a bit complicated, so I'd rather not repeat it unless necessary.</p>",
        "id": 428329199,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1711113869
    },
    {
        "content": "<p>The easiest solution is probably to first define <code>MyBeautifulEquiv</code>.</p>",
        "id": 428330015,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1711114179
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/270676-lean4/topic/Using.20a.20field.20of.20a.20structure.20in.20another.20field.20.3F/near/428330015\">said</a>:</p>\n<blockquote>\n<p>The easiest solution is probably to first define <code>MyBeautifulEquiv</code>.</p>\n</blockquote>\n<p>That's what I am currently doing, but then I ran into another problem. Now the definition of <code>MyBeautifulIsometry</code> looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">MyBeautifulIsometry</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">‚âÉ‚Çó·µ¢</span><span class=\"o\">[</span><span class=\"bp\">ùïú</span><span class=\"o\">]</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span><span class=\"n\">MyBeautifulEquiv</span> <span class=\"k\">with</span>\n   <span class=\"n\">norm_map'</span> <span class=\"o\">:=</span> <span class=\"n\">proof</span> <span class=\"n\">that</span> <span class=\"n\">uses</span> <span class=\"n\">the</span> <span class=\"n\">proof</span> <span class=\"n\">of</span> <span class=\"n\">left_inv</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>Then I wanted to put a <code>@[simps!]</code> before the definition of <code>MyBeautifulIsometry</code> to generate a bunch of useful lemmas, but the linter complains that some (not all) of them can be proved by <code>simp</code>. But if I remove the <code>@[simps!]</code>, then <code>simp</code> is unable to prove some results later, and I have to manually unfold the definition of <code>MyBeautifulIsometry</code>. I am not sure what I should do, write out the lemmas myself? I don't know which lemmas <code>@[simps!]</code> creates, but there seems to be a lot of them.</p>",
        "id": 428330745,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1711114422
    },
    {
        "content": "<p><code>@[simps!?]</code> prints the theorems it creates</p>",
        "id": 428331345,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1711114630
    },
    {
        "content": "<p>Did you also put <code>@[simps]</code> on <code>MyBeautifulEquiv</code>?</p>",
        "id": 428331431,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1711114655
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/270676-lean4/topic/Using.20a.20field.20of.20a.20structure.20in.20another.20field.20.3F/near/428331345\">said</a>:</p>\n<blockquote>\n<p><code>@[simps!?]</code> prints the theorems it creates</p>\n</blockquote>\n<p>Ah, thanks !</p>",
        "id": 428331500,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1711114677
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/270676-lean4/topic/Using.20a.20field.20of.20a.20structure.20in.20another.20field.20.3F/near/428331431\">said</a>:</p>\n<blockquote>\n<p>Did you also put <code>@[simps]</code> on <code>MyBeautifulEquiv</code>?</p>\n</blockquote>\n<p>I did, was that the fatal mistake?</p>",
        "id": 428331576,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1711114690
    },
    {
        "content": "<p>No it wasn't, I removed the <code>@[simps]</code> on <code>MyBeautifulEquiv</code> and the linter still complains for the same reason. It looks like I will have to generate those lemmas by hand. :-(</p>",
        "id": 428336740,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1711116271
    },
    {
        "content": "<p>Nono, you shouldn't have to. But you need to understand how <code>initialize_simp_projections</code> works and fiddle with it.</p>",
        "id": 428344530,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1711118401
    },
    {
        "content": "<p>What I ended up doing was see the auto-generated lemmas thanks to <code>@[simps!?]</code>, see that there were a bunch of them but they all said one of only two things (and not in the way I would like them to say it), extract the two statements, put them in a form I thought was better, make two lemmas out of them and <code>@[simp]</code> these lemmas. Now <code>simp</code> can still prove the later statements, and in one case it actually works better. Whew. Let's hope that CI is happy now.</p>",
        "id": 428414260,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1711144164
    },
    {
        "content": "<p>I have no idea how to even start understanding how <code>initialize_simp_projections</code> works. Is there some doc about it that i should read?</p>",
        "id": 428414403,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1711144229
    },
    {
        "content": "<p>A doc?! You dream... <span aria-label=\"night sky\" class=\"emoji emoji-1f30c\" role=\"img\" title=\"night sky\">:night_sky:</span> <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span> My strategy is normally to find a maintainer to stalk until I undersand a bit more...</p>",
        "id": 428414659,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1711144376
    },
    {
        "content": "<p>I like reading stuff by myself and taking time to understand...<br>\nI guess I'll just keep pestering people on Zulip instead.</p>",
        "id": 428415240,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1711144691
    },
    {
        "content": "<p>There is a fairly long doc string in <code>Simps.Basic</code></p>",
        "id": 428415321,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1711144752
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"318709\">Sophie Morel</span> <a href=\"#narrow/stream/270676-lean4/topic/Using.20a.20field.20of.20a.20structure.20in.20another.20field.20.3F/near/428415240\">said</a>:</p>\n<blockquote>\n<p>I like reading stuff by myself and taking time to understand...<br>\nI guess I'll just keep pestering people on Zulip instead.</p>\n</blockquote>\n<p>I also like this, that's why I called it a \"dream\"...</p>",
        "id": 428415340,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1711144768
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/270676-lean4/topic/Using.20a.20field.20of.20a.20structure.20in.20another.20field.20.3F/near/428415321\">said</a>:</p>\n<blockquote>\n<p>There is a fairly long doc string in <code>Simps.Basic</code></p>\n</blockquote>\n<p>Thanks ! See, Filippo, sometimes it is useful to dream.</p>",
        "id": 428415563,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1711144889
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/270676-lean4/topic/Using.20a.20field.20of.20a.20structure.20in.20another.20field.20.3F/near/428415321\">said</a>:</p>\n<blockquote>\n<p>There is a fairly long doc string in <code>Simps.Basic</code></p>\n</blockquote>\n<p>Thanks ! See, Filippo, sometimes it is useful to dream.</p>",
        "id": 428415654,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1711144932
    },
    {
        "content": "<p>OK, then since we're here I have a question: the sentence \"generate simplification lemmas for each projection of the instance\" does it mean that if my class looks like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">myclass</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">NiceClass</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n <span class=\"n\">blabla</span>\n</code></pre></div>\n<p>a <code>[@simps]</code> creates a sort of <code>myclass.toNiceClass</code>simp lemma? Because I understand the doc insofar \"projections\" are concerned, but less so when it speaks about simp lemma for instances.</p>",
        "id": 428416134,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1711145272
    },
    {
        "content": "<p>You could also <code>git grep initialize_simps_projections</code> in your local mathlib4 folder to see examples of its usage</p>",
        "id": 428416191,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1711145287
    },
    {
        "content": "<p>So something really weird happened with the new version of my PR: I got rid of most of the <code>@[simps!]</code>-generated lemmas, but I still still had two, say one of them is <code>lemma_1</code>. Then a bit later I had a <code>lemma_2</code>, whose proof used <code>lemma_1</code> (inside a <code>simp</code>). Once <code>lemma_2</code> was known, then <code>lemma_1</code> became provable by <code>simp</code>, but that would have been a circular proof as I was using <code>lemma_1</code> to prove <code>lemma_2</code>. Well, the linter still complained that <code>lemma_1</code> could be proved by a <code>simp</code>, and gave a suggested proof that used <code>lemma_2</code>. <span aria-label=\"exploding head\" class=\"emoji emoji-1f92f\" role=\"img\" title=\"exploding head\">:exploding_head:</span> </p>\n<p>I solved it by erasing <code>lemma_1</code> and writing a different proof of <code>lemma_2</code>, but still, I'm not sure why the linter would do that.</p>",
        "id": 428417870,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1711146366
    },
    {
        "content": "<p>My latest lemma sacrifice has appeased the Mighty Linter! I have a sudden urge to find a church and go light a votive candle in it. <span aria-label=\"candle\" class=\"emoji emoji-1f56f\" role=\"img\" title=\"candle\">:candle:</span> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 428418924,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1711146949
    },
    {
        "content": "<p>I'm really sorry Lean is costing you so much in candles</p>",
        "id": 428419062,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1711147029
    },
    {
        "content": "<p>It's nothing compared to the time I almost threw my computer out a window while trying to update mathlib; that would have been really expensive. Updating works so much better now.</p>",
        "id": 428419256,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1711147173
    }
]