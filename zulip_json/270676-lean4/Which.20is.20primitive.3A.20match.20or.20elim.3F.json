[
    {
        "content": "<p>I'm wondering which Lean treats as a primitive feature: pattern matching or eliminators/recursors/induction principles?</p>\n<p>Either one can be defined in terms of the other. I think in Coq match+syntactic decreasing check is the primitive feature, and eliminators are defined in terms of that. Is it the same in lean? Or does a <code>match</code> desugar to a call to an elimination function?</p>",
        "id": 437327946,
        "sender_full_name": "Joey Eremondi",
        "timestamp": 1715025111
    },
    {
        "content": "<p>My understanding is that <code>match</code> both desugared to call elimination functions (for the purpose of typechecking in the kernel) and also set up to be understood by the compiler (to be turned into efficient code directly). In this sense, elimination functions aren't <em>called</em> since they're not run as code per se.</p>\n<p>In fact, if you use an eliminator directly, the compiler will complain that there's no associated code for it to call.</p>",
        "id": 437328365,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715025281
    }
]