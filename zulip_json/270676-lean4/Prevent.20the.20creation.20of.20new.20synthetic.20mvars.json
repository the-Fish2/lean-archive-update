[
    {
        "content": "<p>Suppose we have an expression like this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and during the call to <code>Meta.transform</code> on this function, the <code>pre</code> phase converts <code>(1: Nat)</code> to <code>?m.1 p q</code>, where <code>?m.1</code> is some delayed assigned metavariable dependent on some context.</p>\n<p>When <code>Meta.transform</code> finishes with the lambda, it converts <code>?m.1 p q</code> to another delayed assigned metavariable, ultimating resulting in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">m.3</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">p</span> <span class=\"n\">q</span>\n</code></pre></div>\n<p>I suspect this is because <code>?m.1 p q</code> refers to <code>p</code> and <code>q</code>, so Lean creates a delayed assigned metavariable for it.</p>\n<p>Is there a way to get <code>fun (p q: Prop) =&gt; ?m.1 p q</code> instead?</p>",
        "id": 439394121,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1716079433
    },
    {
        "content": "<p>The context of this problem is I want to merge chains of delayed assigned metavariables. For example if</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">?</span><span class=\"n\">m.1</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">m.2</span> <span class=\"o\">[</span><span class=\"n\">_f.10</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span><span class=\"o\">]</span>\n<span class=\"bp\">?</span><span class=\"n\">m.2</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">m.3</span> <span class=\"o\">[</span><span class=\"n\">_f.11</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>then the result of the merger should be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">?</span><span class=\"n\">m.4</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">m.3</span><span class=\"o\">[</span><span class=\"n\">_f.10</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">f.11</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 439394559,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1716079865
    },
    {
        "content": "<p>I have a partial solution to this problem: Instead of creating delayed assigned metavariables, use <code>(← Meta.mkLambdaFVars fvars inner).beta args</code>, where <code>inner</code> is an expression that could contain metavariables in principle. This automatically handles the creation of metavariables.</p>\n<p>The problem about this approach is sometimes <code>mkLambdaFVars</code> creates additional mvars that are not assigned or delayed assigned. For example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Eq.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">_uniq.83</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">_uniq.87</span> <span class=\"bp\">?</span><span class=\"n\">_uniq.88</span> <span class=\"bp\">?</span><span class=\"n\">_uniq.89</span>\n</code></pre></div>\n<p>after <code>mkLambdaFVars</code>, I got</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Eq.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">_uniq.83</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">_uniq.90</span> <span class=\"bp\">?</span><span class=\"n\">_uniq.68</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">_uniq.91</span> <span class=\"bp\">?</span><span class=\"n\">_uniq.68</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">_uniq.92</span> <span class=\"bp\">?</span><span class=\"n\">_uniq.68</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>where <code>?_uniq.{90,91,92}</code> are not assigned or delayed assigned. This is very strange to me since it cuts off the connection between this expression and <code>?_uniq.{87,88,89}</code>.</p>\n<p>It is very difficult to get a MWE from this since this behaviour vanishes for smaller examples</p>",
        "id": 439463991,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1716149900
    },
    {
        "content": "<p>this check returns true, showing that the variables are unrelated</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">occursCheck</span> <span class=\"o\">{</span> <span class=\"n\">name</span> <span class=\"bp\">=</span> <span class=\"s2\">\"_uniq.87\"</span><span class=\"bp\">.</span><span class=\"n\">toName</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">mvar</span> <span class=\"o\">{</span> <span class=\"n\">name</span> <span class=\"bp\">=</span> <span class=\"s2\">\"_uniq.90\"</span><span class=\"bp\">.</span><span class=\"n\">toName</span> <span class=\"o\">})</span>\n</code></pre></div>\n<p>as well as this one</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">occursCheck</span> <span class=\"o\">{</span> <span class=\"n\">name</span> <span class=\"bp\">=</span> <span class=\"s2\">\"_uniq.87\"</span><span class=\"bp\">.</span><span class=\"n\">toName</span><span class=\"o\">}</span> <span class=\"n\">e</span>\n</code></pre></div>\n<p>where <code>e</code> is <code>`Eq.{?_uniq.83} (?_uniq.90 ?_uniq.68) (?_uniq.91 ?_uniq.68) (?_uniq.92 ?_uniq.68)</code>. </p>\n<p>so in this case <em>mkLambdaFVars has decoupled a dependency of its input expression</em></p>",
        "id": 439468074,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1716154188
    },
    {
        "content": "<p>This is the function I am using to force the instantiation of delayed mvars:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">instantiateDelayedMVars</span> <span class=\"o\">(</span><span class=\"n\">eOrig</span><span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">level</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">):</span> <span class=\"n\">MetaM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">padding</span> <span class=\"o\">:=</span> <span class=\"n\">String.join</span> <span class=\"bp\">$</span> <span class=\"n\">List.replicate</span> <span class=\"n\">level</span> <span class=\"s2\">\"│ \"</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{padding}Starting {toString eOrig}\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">result</span> <span class=\"bp\">←</span> <span class=\"n\">Meta.transform</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"n\">eOrig</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">pre</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">e.withApp</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"n\">args</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">mvar</span> <span class=\"n\">mvarId</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"bp\">|</span> <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">continue</span>\n      <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{padding}├V {e}\"</span>\n      <span class=\"k\">let</span> <span class=\"n\">mvarDecl</span> <span class=\"bp\">←</span> <span class=\"n\">mvarId.getDecl</span>\n\n      <span class=\"k\">let</span> <span class=\"n\">lctx</span> <span class=\"bp\">←</span> <span class=\"n\">MonadLCtx.getLCtx</span>\n      <span class=\"k\">if</span> <span class=\"n\">mvarDecl.lctx.any</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">decl</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">!</span><span class=\"n\">lctx.contains</span> <span class=\"n\">decl.fvarId</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n        <span class=\"k\">let</span> <span class=\"n\">violations</span> <span class=\"o\">:=</span> <span class=\"n\">mvarDecl.lctx.decls.foldl</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">acc</span> <span class=\"n\">decl</span><span class=\"bp\">?</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">decl</span><span class=\"bp\">?</span> <span class=\"k\">with</span>\n          <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">decl</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">lctx.contains</span> <span class=\"n\">decl.fvarId</span> <span class=\"k\">then</span> <span class=\"n\">acc</span> <span class=\"k\">else</span> <span class=\"n\">acc</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">decl.fvarId.name</span><span class=\"o\">]</span>\n          <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">acc</span><span class=\"o\">)</span> <span class=\"o\">[]</span>\n        <span class=\"n\">panic</span><span class=\"bp\">!</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Local context variable violation: {violations}\"</span>\n\n      <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">assign</span> <span class=\"bp\">←</span> <span class=\"n\">getExprMVarAssignment</span><span class=\"bp\">?</span> <span class=\"n\">mvarId</span> <span class=\"k\">then</span>\n        <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{padding}├A ?{mvarId.name}\"</span>\n        <span class=\"n\">assert</span><span class=\"bp\">!</span> <span class=\"bp\">!</span><span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mvarId.isDelayedAssigned</span><span class=\"o\">)</span>\n        <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">visit</span> <span class=\"o\">(</span><span class=\"n\">mkAppN</span> <span class=\"n\">assign</span> <span class=\"n\">args</span><span class=\"o\">)</span>\n      <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"o\">{</span> <span class=\"n\">fvars</span><span class=\"o\">,</span> <span class=\"n\">mvarIdPending</span> <span class=\"o\">}</span> <span class=\"bp\">←</span> <span class=\"n\">getDelayedMVarAssignment</span><span class=\"bp\">?</span> <span class=\"n\">mvarId</span> <span class=\"k\">then</span>\n        <span class=\"k\">let</span> <span class=\"n\">substTableStr</span> <span class=\"o\">:=</span> <span class=\"n\">String.intercalate</span> <span class=\"s2\">\", \"</span> <span class=\"bp\">$</span> <span class=\"n\">Array.zipWith</span> <span class=\"n\">fvars</span> <span class=\"n\">args</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">fvar</span> <span class=\"n\">assign</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{fvar.fvarId!.name} := {assign}\"</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">toList</span>\n        <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{padding}├MD ?{mvarId.name} := ?{mvarIdPending.name} [{substTableStr}]\"</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">args.size</span> <span class=\"bp\">&lt;</span> <span class=\"n\">fvars.size</span> <span class=\"k\">then</span>\n          <span class=\"n\">throwError</span> <span class=\"s2\">\"Not enough arguments to instantiate a delay assigned mvar. This is due to bad implementations of a tactic: {args.size} &lt; {fvars.size}. Expr: {toString e}; Origin: {toString eOrig}\"</span>\n        <span class=\"k\">if</span> <span class=\"bp\">!</span><span class=\"n\">args.isEmpty</span> <span class=\"k\">then</span>\n          <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{padding}├── Arguments Begin\"</span>\n        <span class=\"k\">let</span> <span class=\"n\">args</span> <span class=\"bp\">←</span> <span class=\"n\">args.mapM</span> <span class=\"n\">self</span>\n        <span class=\"k\">if</span> <span class=\"bp\">!</span><span class=\"n\">args.isEmpty</span> <span class=\"k\">then</span>\n          <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{padding}├── Arguments End\"</span>\n        <span class=\"k\">if</span> <span class=\"bp\">!</span><span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mvarIdPending.isAssignedOrDelayedAssigned</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n          <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{padding}├T1\"</span>\n          <span class=\"k\">let</span> <span class=\"n\">result</span> <span class=\"o\">:=</span> <span class=\"n\">mkAppN</span> <span class=\"n\">f</span> <span class=\"n\">args</span>\n          <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">done</span> <span class=\"n\">result</span>\n\n        <span class=\"k\">let</span> <span class=\"n\">pending</span> <span class=\"bp\">←</span> <span class=\"n\">mvarIdPending.withContext</span> <span class=\"k\">do</span>\n          <span class=\"k\">let</span> <span class=\"n\">inner</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateDelayedMVars</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">mvar</span> <span class=\"n\">mvarIdPending</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">level</span> <span class=\"o\">:=</span> <span class=\"n\">level</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n          <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{padding}├Pre: {inner}\"</span>\n          <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"bp\">←</span> <span class=\"n\">Meta.instantiateLambda</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Meta.mkLambdaFVars</span> <span class=\"n\">fvars</span> <span class=\"n\">inner</span><span class=\"o\">)</span> <span class=\"n\">args</span>\n          <span class=\"n\">pure</span> <span class=\"n\">r</span>\n\n        <span class=\"c1\">-- Tail arguments</span>\n        <span class=\"k\">let</span> <span class=\"n\">result</span> <span class=\"o\">:=</span> <span class=\"n\">mkAppN</span> <span class=\"n\">pending</span> <span class=\"o\">(</span><span class=\"n\">List.drop</span> <span class=\"n\">fvars.size</span> <span class=\"n\">args.toList</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">toArray</span><span class=\"o\">)</span>\n        <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{padding}├MD {result}\"</span>\n        <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">done</span> <span class=\"n\">result</span>\n      <span class=\"k\">else</span>\n        <span class=\"n\">assert</span><span class=\"bp\">!</span> <span class=\"bp\">!</span><span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mvarId.isAssigned</span><span class=\"o\">)</span>\n        <span class=\"n\">assert</span><span class=\"bp\">!</span> <span class=\"bp\">!</span><span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mvarId.isDelayedAssigned</span><span class=\"o\">)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">!</span><span class=\"n\">args.isEmpty</span> <span class=\"k\">then</span>\n          <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{padding}├── Arguments Begin\"</span>\n        <span class=\"k\">let</span> <span class=\"n\">args</span> <span class=\"bp\">←</span> <span class=\"n\">args.mapM</span> <span class=\"n\">self</span>\n        <span class=\"k\">if</span> <span class=\"bp\">!</span><span class=\"n\">args.isEmpty</span> <span class=\"k\">then</span>\n          <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{padding}├── Arguments End\"</span>\n\n        <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{padding}├M ?{mvarId.name}\"</span>\n        <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">done</span> <span class=\"o\">(</span><span class=\"n\">mkAppN</span> <span class=\"n\">f</span> <span class=\"n\">args</span><span class=\"o\">))</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{padding}└Result {result}\"</span>\n  <span class=\"n\">return</span> <span class=\"n\">result</span>\n  <span class=\"n\">where</span>\n  <span class=\"n\">self</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">instantiateDelayedMVars</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">level</span> <span class=\"o\">:=</span> <span class=\"n\">level</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 439469668,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1716155808
    }
]