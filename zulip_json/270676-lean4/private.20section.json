[
    {
        "content": "<p>Is it possible to make a section that is entirely private (defs visible only in the current file)?</p>",
        "id": 417651970,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1706105090
    },
    {
        "content": "<p>What do you mean by visible? Completely erased from the environment? Or simply only accessible via private names?</p>",
        "id": 417684160,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1706114155
    },
    {
        "content": "<p>Concretely, if I declare something of the same name in another downstream file, it doesn't complain.</p>",
        "id": 417684317,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1706114194
    },
    {
        "content": "<p>If you want to write a macro for this, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=elabSuppressCompilationDecl#doc\">docs#elabSuppressCompilationDecl</a> might be a good place to start.</p>",
        "id": 417979672,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1706137862
    },
    {
        "content": "<p>How about namespace?</p>",
        "id": 417989405,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1706144036
    },
    {
        "content": "<p>\"Example sections\" would be nice to have yeah.</p>",
        "id": 418093679,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1706193633
    },
    {
        "content": "<p>Here's a really simple way to implement <code>example section</code>. I.e. a section in which you can do stuff but the whole state is completely reset after.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"example section\"</span> <span class=\"n\">ppLine</span> <span class=\"n\">cmd</span><span class=\"o\">:</span><span class=\"n\">command</span><span class=\"bp\">*</span> <span class=\"n\">ppLine</span> <span class=\"s2\">\"end example section\"</span><span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">old</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">get</span>\n  <span class=\"n\">try</span>\n    <span class=\"n\">for</span> <span class=\"n\">cmd</span> <span class=\"k\">in</span> <span class=\"n\">cmd</span> <span class=\"k\">do</span>\n      <span class=\"n\">elabCommandTopLevel</span> <span class=\"n\">cmd</span>\n    <span class=\"n\">throwAbortCommand</span>\n  <span class=\"n\">finally</span>\n    <span class=\"n\">set</span> <span class=\"n\">old</span>\n\n\n<span class=\"kd\">example</span> <span class=\"kn\">section</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">o</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">toot</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">toot2</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">end</span> <span class=\"kd\">example</span> <span class=\"kn\">section</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">toot</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">toot</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">o.toot2</span>\n</code></pre></div>",
        "id": 418114975,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1706199410
    },
    {
        "content": "<p>Ok this version is too simplistic, resetting the env is not enough as it leaves namespaces open etc, but fully resetting the state means you dont see the error messages, so something inbetween would be better. Resetting the env using <code>getEnv</code> and <code>setEnv</code> in the above is better for now</p>",
        "id": 418117970,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1706200253
    },
    {
        "content": "<p>Try <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.withoutModifyingState#doc\">docs#Lean.withoutModifyingState</a> and other functions from the same file. These intelligently revert the state, so traces and error messages stay intact (among other things).</p>",
        "id": 418123547,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1706201905
    }
]