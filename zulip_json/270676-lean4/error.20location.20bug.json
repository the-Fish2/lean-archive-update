[
    {
        "content": "<p>I encountered this error <a href=\"https://www.youtube.com/watch?v=ueFbfwVzBfI&amp;t=11276s\">here</a>, <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> below. Is this a bug? As you can see, there is an error because the equality is comparing an arrow to a unit. The error message even says this is the problem. But the red squiggly underlines a completely different place from where the error is.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"ueFbfwVzBfI\" href=\"https://www.youtube.com/watch?v=ueFbfwVzBfI&amp;t=11276s\"><img src=\"https://uploads.zulipusercontent.net/fb96ff34c49db5c54b25d92c50ab314a7a0ce7d5/68747470733a2f2f692e7974696d672e636f6d2f76692f756546626677567a4266492f64656661756c742e6a7067\"></a></div><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.CategoryTheory.Coherence</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">MonoidalCategory</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span>\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">MonoidalCategory</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonoidalCategory</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">otp</span>\n  <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">V‚ÇÅ</span> <span class=\"n\">V‚ÇÇ</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">V‚ÇÅ</span> <span class=\"bp\">‚äó</span> <span class=\"n\">V‚ÇÇ</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">V‚ÇÇ</span> <span class=\"bp\">‚äó</span> <span class=\"n\">V‚ÇÅ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">xor</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">V‚ÇÅ</span> <span class=\"n\">V‚ÇÇ</span> <span class=\"n\">V‚ÇÉ</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">V‚ÇÅ</span> <span class=\"bp\">‚äó</span> <span class=\"n\">V‚ÇÇ</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">V‚ÇÉ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">copy</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">V‚ÇÅ</span> <span class=\"n\">V‚ÇÇ</span> <span class=\"n\">V‚ÇÉ</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">V‚ÇÅ</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">V‚ÇÇ</span> <span class=\"bp\">‚äó</span> <span class=\"n\">V‚ÇÉ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">copy_xor_comm</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">V‚ÇÅ</span> <span class=\"n\">V‚ÇÇ</span> <span class=\"n\">V‚ÇÉ</span> <span class=\"n\">V‚ÇÑ</span> <span class=\"n\">V‚ÇÖ</span> <span class=\"n\">V‚ÇÜ</span> <span class=\"n\">V‚Çá</span> <span class=\"n\">V‚Çà</span> <span class=\"n\">V‚Çâ</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- The final arrow I want is V‚ÇÅ ‚äó V‚ÇÇ ‚ü∂ V‚ÇÉ ‚äó V‚ÇÑ</span>\n    <span class=\"o\">((((</span><span class=\"n\">copy</span> <span class=\"n\">V‚ÇÅ</span> <span class=\"n\">V‚ÇÖ</span> <span class=\"n\">V‚ÇÜ</span><span class=\"o\">)</span> <span class=\"bp\">‚äó</span> <span class=\"o\">(</span><span class=\"n\">copy</span> <span class=\"n\">V‚ÇÇ</span> <span class=\"n\">V‚Çá</span> <span class=\"n\">V‚Çà</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">V‚ÇÅ</span> <span class=\"bp\">‚äó</span> <span class=\"n\">V‚ÇÇ</span> <span class=\"bp\">‚ü∂</span> <span class=\"o\">(</span><span class=\"n\">V‚ÇÖ</span> <span class=\"bp\">‚äó</span> <span class=\"n\">V‚ÇÜ</span><span class=\"o\">)</span> <span class=\"bp\">‚äó</span> <span class=\"o\">(</span><span class=\"n\">V‚Çá</span> <span class=\"bp\">‚äó</span> <span class=\"n\">V‚Çà</span><span class=\"o\">)))</span> <span class=\"c1\">-- error highlights this line</span>\n      <span class=\"bp\">‚â´</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">_</span> <span class=\"bp\">‚äó‚â´</span> <span class=\"n\">V‚ÇÖ</span> <span class=\"bp\">‚óÅ</span> <span class=\"n\">R</span> <span class=\"n\">V‚ÇÜ</span> <span class=\"n\">V‚Çá</span> <span class=\"bp\">‚ñ∑</span> <span class=\"n\">V‚Çà</span> <span class=\"bp\">‚äó‚â´</span> <span class=\"mi\">ùüô</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n      <span class=\"bp\">‚â´</span> <span class=\"o\">(((</span><span class=\"n\">xor</span> <span class=\"n\">V‚ÇÖ</span> <span class=\"n\">V‚Çá</span> <span class=\"n\">V‚ÇÉ</span><span class=\"o\">)</span> <span class=\"bp\">‚äó</span> <span class=\"o\">(</span><span class=\"n\">xor</span> <span class=\"n\">V‚ÇÜ</span> <span class=\"n\">V‚Çà</span> <span class=\"n\">V‚ÇÑ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">V‚ÇÖ</span> <span class=\"bp\">‚äó</span> <span class=\"n\">V‚Çá</span><span class=\"o\">)</span> <span class=\"bp\">‚äó</span> <span class=\"o\">(</span><span class=\"n\">V‚ÇÜ</span> <span class=\"bp\">‚äó</span> <span class=\"n\">V‚Çà</span><span class=\"o\">)</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">V‚ÇÉ</span> <span class=\"bp\">‚äó</span> <span class=\"n\">V‚ÇÑ</span><span class=\"o\">)</span>\n       <span class=\"o\">:</span> <span class=\"n\">V‚ÇÅ</span> <span class=\"bp\">‚äó</span> <span class=\"n\">V‚ÇÇ</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">V‚ÇÉ</span> <span class=\"bp\">‚äó</span> <span class=\"n\">V‚ÇÑ</span><span class=\"o\">)</span>\n    <span class=\"bp\">=</span>\n    <span class=\"o\">()</span> <span class=\"c1\">-- but complains about this</span>\n  <span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">False</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span>\n  <span class=\"n\">False</span>\n  <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">MonoidalCategory</span>\n</code></pre></div>",
        "id": 422649264,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1708530846
    },
    {
        "content": "<p>I am noticing that if I delete some of the newlines the red squiggle gets longer. Is the issue that it is for some reason just impossible to make error highlighting span multiple lines?</p>",
        "id": 422659177,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1708533209
    },
    {
        "content": "<p>No, this is deliberate because otherwise many errors paint your entire declaration red, which people found confusing. We just don't usually have such \"big\" errors on the term level.</p>",
        "id": 422662937,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1708534274
    },
    {
        "content": "<p>Ok. I would suggest that, however confusing an error message that paints the entire term red may be, it might be even <em>more</em> confusing to put the error highlighting in a specific subterm which is not the locus of the problem.</p>\n<p>In this case in particular it seems that it should not be hard to put the highlighting in the correct place. The error message itself directly copies out the part of the term which is the problem. Why can't we highlight just that subterm?</p>",
        "id": 422663724,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1708534516
    },
    {
        "content": "<p>I can't answer that off the top of my head, it works without notation</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">Eq</span> <span class=\"n\">true</span> <span class=\"o\">()</span>\n<span class=\"k\">#check</span> <span class=\"n\">true</span> <span class=\"bp\">=</span> <span class=\"o\">()</span>\n</code></pre></div>",
        "id": 422665805,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1708535102
    },
    {
        "content": "<p>Likely a <code>binop%</code> issue, it does work with simpler notation</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">Unit</span> <span class=\"bp\">√ó</span> <span class=\"o\">()</span>\n</code></pre></div>",
        "id": 422666353,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1708535251
    },
    {
        "content": "<p>Interesting that notation affects it, perhaps that is part of the problem.</p>\n<p>I guess on further reflection, it makes more sense to me that the error message should highlight the whole equality when the types on either side don't match, because its not clear we should expect one side to be right over the other. So the concept that the error message reporting the <code>()</code> perhaps doesn't automatically mean that is what is wrong, and it doesn't mean we can just attach the highlighting there.</p>",
        "id": 422668406,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1708535831
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/error.20location.20bug/near/422665805\">said</a>:</p>\n<blockquote>\n<p>I can't answer that off the top of my head, it works without notation</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">Eq</span> <span class=\"n\">true</span> <span class=\"o\">()</span>\n<span class=\"k\">#check</span> <span class=\"n\">true</span> <span class=\"bp\">=</span> <span class=\"o\">()</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>No actually this has the same problem, look:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">Eq</span> <span class=\"n\">true</span> <span class=\"o\">()</span>\n<span class=\"k\">#check</span> <span class=\"n\">true</span>\n<span class=\"bp\">=</span> <span class=\"o\">()</span>\n</code></pre></div>\n<p>when I split the line, the second half of the line isn't highlighted.</p>",
        "id": 422668637,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1708535899
    },
    {
        "content": "<p>Wait, perhaps I have misunderstood this in the context of my later comment. Is the idea supposed to be that the highlighting for the <code>true = ()</code> is wrong and the <code>Eq true ()</code> highlighting is right?</p>",
        "id": 422670202,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1708536412
    },
    {
        "content": "<p>I think there are perhaps two issues at play here. One is my issue with how errors in the type of an argument to the function are highlighted on the argument, which I think can be a little confusing if the problem is with the function and not the argument, but I understand the desire to keep the error where lean becomes aware of it.</p>\n<p>The other is that the error highlighting is being changed by the presence of linebreaks, which I think is more objectively wrong behavior.</p>",
        "id": 422671264,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1708536703
    },
    {
        "content": "<p>There are some bugs with how <code>true = ()</code> shows the error. Working on a fix.</p>",
        "id": 422672581,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708537102
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"282271\">Bolton Bailey</span> <a href=\"#narrow/stream/270676-lean4/topic/error.20location.20bug/near/422668637\">said</a>:</p>\n<blockquote>\n<p>No actually this has the same problem, look:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">Eq</span> <span class=\"n\">true</span> <span class=\"o\">()</span>\n<span class=\"k\">#check</span> <span class=\"n\">true</span>\n<span class=\"bp\">=</span> <span class=\"o\">()</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I think the error diagnostics has the correct <code>fullRange</code> is this example (something like<br>\n<code>{start : {line: 1, character: 7}, end: {line: 2, character: 4}</code> but somehow VSCode (?) decides the correct thing to do here is to only highlight up to the first newline.</p>",
        "id": 422672670,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1708537139
    },
    {
        "content": "<p>The error message wasn't being localized to the expression under consideration, which could be solved with some <code>withRef</code>s:</p>\n<p><a href=\"/user_uploads/3121/UnFrz17uhzRad68fEDUAHGUy/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/UnFrz17uhzRad68fEDUAHGUy/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/UnFrz17uhzRad68fEDUAHGUy/image.png\"></a></div><p><a href=\"https://github.com/leanprover/lean4/pull/3442\">lean4#3442</a></p>",
        "id": 422674008,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708537672
    }
]