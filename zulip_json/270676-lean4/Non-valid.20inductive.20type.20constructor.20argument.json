[
    {
        "content": "<p>I'm trying to make some types that check if some finite set of arrows follow the end-to-end composability rules. I tried several approaches with no luck. Finally, I realized the domain and codomain could be stored in the types which helped with the type inference, but I'm still getting an error. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Arrow</span> <span class=\"o\">{</span><span class=\"n\">ObjNames</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">String</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">dom</span><span class=\"o\">:</span> <span class=\"n\">ObjNames</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cod</span><span class=\"o\">:</span> <span class=\"n\">ObjNames</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n  <span class=\"n\">name</span><span class=\"o\">:</span> <span class=\"n\">String</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">ComposablePath</span> <span class=\"o\">{</span><span class=\"n\">ObjNames</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">String</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">dom</span><span class=\"o\">:</span> <span class=\"n\">ObjNames</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cod</span><span class=\"o\">:</span> <span class=\"n\">ObjNames</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n <span class=\"c1\">-- Paths of length zero still have domains and codomains assigned in the type</span>\n <span class=\"bp\">|</span> <span class=\"n\">empty</span>\n <span class=\"c1\">-- The codomain of the path matches the domain of the new arrow being added to form a new path</span>\n <span class=\"bp\">|</span> <span class=\"n\">path</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ObjNames</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">Arrow</span> <span class=\"n\">dom</span> <span class=\"n\">cod</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">prev</span><span class=\"o\">:</span> <span class=\"n\">ComposablePath</span> <span class=\"n\">x</span> <span class=\"n\">dom</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The Error is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">kernel</span><span class=\"o\">)</span> <span class=\"n\">arg</span> <span class=\"bp\">#</span><span class=\"mi\">6</span> <span class=\"n\">of</span> <span class=\"bp\">'</span><span class=\"n\">ComposiblePath.path'</span> <span class=\"n\">contains</span> <span class=\"n\">a</span> <span class=\"n\">non</span> <span class=\"n\">valid</span> <span class=\"n\">occurrence</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">datatypes</span> <span class=\"n\">being</span> <span class=\"n\">declared</span>\n</code></pre></div>\n<p>I'm guessing that <code>ComposablePath x dom</code> is the non-valid occurance. It seems to assume that any term with in the type family of CompasiblePath which is inside one of the constructor arguments, must be parameterized the same way as the type of the value being constructed.</p>\n<p>Is this a general requirement inductive types in Lean or is there some mistake in the code?</p>",
        "id": 410113235,
        "sender_full_name": "Avi Craimer",
        "timestamp": 1703661491
    },
    {
        "content": "<p>So, there are type <em>parameters</em> and type <em>indices</em>. Syntactically they are distinguished by putting parameters before the <code>:</code> in the type declaration and indices after. Parameters need to be the same throughout the inductive declaration, indices can vary.</p>\n<p>If you make the inductive</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">ComposablePath</span> <span class=\"o\">{</span><span class=\"n\">ObjNames</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">String</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">ObjNames</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ObjNames</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>that should work!</p>",
        "id": 410117514,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1703664469
    },
    {
        "content": "<p>Wow that's awesome to know. I was never sure if there was a difference between putting arguments before the : or after. </p>\n<p>Is there only a difference when dealing with type definitions? Or is there also a difference when defining constructors and regular functions?</p>",
        "id": 410153513,
        "sender_full_name": "Avi Craimer",
        "timestamp": 1703683765
    },
    {
        "content": "<p>As a follow up on this. </p>\n<p>I figure out how to construct a value when using Set as a type. </p>\n<p>When I try to do it the naive way it fails. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">SetOfStrings</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"s2\">\"A\"</span><span class=\"o\">,</span> <span class=\"s2\">\"B\"</span><span class=\"o\">,</span> <span class=\"s2\">\"C\"</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ElementInSetOfStrings</span> <span class=\"o\">:</span> <span class=\"n\">SetOfStrings</span> <span class=\"o\">:=</span>  <span class=\"s2\">\"A\"</span>\n</code></pre></div>\n<p>Error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"s2\">\"A\"</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">String</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">↑</span><span class=\"n\">SetOfStrings</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>↑SetOfStrings is some kind of type, but I can't figure out how to inspect the guts of it to see what the structure of a value of this type actually is.  </p>\n<p>I tried reading the definitions of Set in MathLib4 but Set itself is defined as a function <code>def Set (α : Type u) := α → Prop</code> and I can't find where the ↑ operation is defined for Set.</p>",
        "id": 410165797,
        "sender_full_name": "Avi Craimer",
        "timestamp": 1703689237
    },
    {
        "content": "<p>Quite simply Set's are not types, <code>Set String</code> is a type and <code>SetOfStrings</code> is a value of type <code>Set String</code>. The statement <code>String : SetOfStrings</code> does not make sense in a Lean context. But you can say that a value is in a set with the classical membership operator that you know from math.</p>",
        "id": 410166253,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1703689432
    },
    {
        "content": "<p>But the error message says <code>↑SetOfStrings : Type</code> so evidently there is some kind of mechanism with the ↑ that turns a set into a type. I'm trying to figure out what is happening there.</p>",
        "id": 410166610,
        "sender_full_name": "Avi Craimer",
        "timestamp": 1703689579
    },
    {
        "content": "<p>There might be a coercion (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Coe.coe#doc\">docs#Coe.coe</a>) set up to do this but even then your idea wouldn't work out as you would then be saying that \"A\" which has type String is of type SetOfStrings which is still wrong (which is what the error message is telling you)</p>",
        "id": 410166949,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1703689764
    },
    {
        "content": "<p>I realize that <code>String: SetOfStrings</code> doesn't make sense. Sometimes Lean interprets the value of literal symbols from the context of the type annotations (e.g., 4: Nat vs 4: Real) so I thought that <code>def ElementInSetOfStrings : SetOfStrings :=  \"A\"</code> might be one of those cases where Lean automatically turns the literal \"A\" into the appropriate value for the type <code>↑SetOfStrings</code>, but it doesn't do it. </p>\n<p>So I'm just asking how I would explicitly construct a value of type <code>↑SetOfStrings</code>.</p>",
        "id": 410167145,
        "sender_full_name": "Avi Craimer",
        "timestamp": 1703689855
    },
    {
        "content": "<p>Check out <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subtype#doc\">docs#Subtype</a>. A value of type <code>{x // x ∈ SetOfStrings}</code> is (like) a pair of a value <code>x</code> of type <code>String</code> and a proof of <code>x ∈ SetOfStrings</code>. Here are a few ways to construct one.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">SetOfStrings</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"s2\">\"A\"</span><span class=\"o\">,</span> <span class=\"s2\">\"B\"</span><span class=\"o\">,</span> <span class=\"s2\">\"C\"</span><span class=\"o\">}</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">isElement</span> <span class=\"o\">:</span> <span class=\"s2\">\"A\"</span> <span class=\"bp\">∈</span> <span class=\"n\">SetOfStrings</span> <span class=\"o\">:=</span> <span class=\"n\">Set.mem_insert</span> <span class=\"s2\">\"A\"</span> <span class=\"o\">{</span><span class=\"s2\">\"B\"</span><span class=\"o\">,</span> <span class=\"s2\">\"C\"</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ElementInSetOfStrings₁</span> <span class=\"o\">:</span> <span class=\"n\">SetOfStrings</span> <span class=\"o\">:=</span>  <span class=\"o\">⟨</span><span class=\"s2\">\"A\"</span><span class=\"o\">,</span> <span class=\"n\">isElement</span><span class=\"o\">⟩</span>\n<span class=\"kd\">def</span> <span class=\"n\">ElementInSetOfStrings₂</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">SetOfStrings</span><span class=\"o\">}</span> <span class=\"o\">:=</span>  <span class=\"n\">Subtype.mk</span> <span class=\"s2\">\"A\"</span> <span class=\"n\">isElement</span>\n<span class=\"kd\">def</span> <span class=\"n\">ElementInSetOfStrings₃</span> <span class=\"o\">:</span> <span class=\"n\">Subtype</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">SetOfStrings</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"s2\">\"A\"</span><span class=\"o\">,</span> <span class=\"n\">property</span> <span class=\"o\">:=</span> <span class=\"n\">isElement</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 410169205,
        "sender_full_name": "Richard Copley",
        "timestamp": 1703690863
    },
    {
        "content": "<p>Thanks for your answer <span class=\"user-mention\" data-user-id=\"400544\">@Richard Copley</span></p>\n<p>I'm familiar with the subtype notation, I just didn't know the relationship between this and the coerced Set types. </p>\n<p>It sounds like you are saying that  when a <code>S: Set α</code>  is coerced to a type <code>↑S</code>, this type is equal to  <code>{ x:α  // x  ∈  S }</code>. Is that correct?</p>\n<p>If so it would be very helpful if the infoview displayed the subtype notation rather than ↑S.</p>",
        "id": 410171051,
        "sender_full_name": "Avi Craimer",
        "timestamp": 1703691790
    },
    {
        "content": "<ul>\n<li>Yes.</li>\n<li>You can use <del><code>set_option pp.coercions true</code></del>  <code>set_option pp.coercions false</code> to bring that about.</li>\n</ul>",
        "id": 410171297,
        "sender_full_name": "Richard Copley",
        "timestamp": 1703691913
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"400544\">Richard Copley</span> <a href=\"#narrow/stream/270676-lean4/topic/Non-valid.20inductive.20type.20constructor.20argument/near/410171297\">said</a>:</p>\n<blockquote>\n<ul>\n<li>Yes.</li>\n<li>You can use <del><code>set_option pp.coercions true</code></del>  <code>set_option pp.coercions false</code> to bring that about.</li>\n</ul>\n</blockquote>\n<p>That's great. There is nothing more frustrating than being unable to see what is really going on with types so that option is  pure gold to me!</p>",
        "id": 410171781,
        "sender_full_name": "Avi Craimer",
        "timestamp": 1703692167
    },
    {
        "content": "<p>It's useful sometimes, but not an unalloyed pleasure! I agree that it's frustrating when the a term is delaborated with an up-arrow and its type is not obvious, and also when those expressions don't round-trip (can't be elaborated as input).</p>",
        "id": 410172336,
        "sender_full_name": "Richard Copley",
        "timestamp": 1703692515
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"346046\">Avi Craimer</span> <a href=\"#narrow/stream/270676-lean4/topic/Non-valid.20inductive.20type.20constructor.20argument/near/410153513\">said</a>:</p>\n<blockquote>\n<p>Is there only a difference when dealing with type definitions?</p>\n</blockquote>\n<p>I believe it's the only place where the difference matters in the type theory, yeah!</p>",
        "id": 410205026,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1703713595
    }
]