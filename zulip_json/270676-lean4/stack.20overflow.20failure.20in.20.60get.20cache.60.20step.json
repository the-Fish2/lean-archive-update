[
    {
        "content": "<p>I don't think I already had a stack overflow in the <code>get cache</code> step (see <a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/8949168207/job/24583144189\">https://github.com/leanprover-community/mathlib4/actions/runs/8949168207/job/24583144189</a>). It's probably a transient failure, but I thought I would mention it here in case someone else encounters it.</p>",
        "id": 437003460,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1714811026
    },
    {
        "content": "<p>Crap, it did it again, so it looks like it's not purely transient. Any idea to debug this?</p>",
        "id": 437004066,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1714811672
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> , here is a deterministic way to get the issue:</p>\n<ul>\n<li>create a new branch based on mathlib master</li>\n<li>add a file <code>Mathlib/test.lean</code> only containing <code>import Mathlib</code></li>\n<li>commit and push</li>\n</ul>\n<p>Then the <code>get cache</code> step fails, with a stack overflow. See for instance <a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/8949293595/job/24583426811\">https://github.com/leanprover-community/mathlib4/actions/runs/8949293595/job/24583426811</a>.</p>",
        "id": 437004640,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1714812312
    },
    {
        "content": "<p>Probably not directly related, but in another run <a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/8949280481/job/24583395867\">https://github.com/leanprover-community/mathlib4/actions/runs/8949280481/job/24583395867</a> the <code>get cache</code> step downloaded 2586 files, but then started building everything again. Is there still something wrong with the cache or the Hoskinson machines? <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> ,  do you understand what might be going on?</p>",
        "id": 437004845,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1714812498
    },
    {
        "content": "<p>This is most likely not a problem in Lake but in cache. As a workaround, try putting <code>ulimit -s unlimited</code> in the preceding line</p>",
        "id": 437006382,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1714814169
    },
    {
        "content": "<p>Is this because we have a step that will add your new test.lean to Mathlib.lean?</p>",
        "id": 437006385,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1714814173
    },
    {
        "content": "<p>Oh you're right, this might be true infinite recursion between modules. Which Lake should be able to detect but cache might not.</p>",
        "id": 437006539,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1714814338
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sébastien Gouëzel</span> <a href=\"#narrow/stream/270676-lean4/topic/stack.20overflow.20failure.20in.20.60get.20cache.60.20step/near/437004845\">said</a>:</p>\n<blockquote>\n<p>Probably not directly related, but in another run <a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/8949280481/job/24583395867\">https://github.com/leanprover-community/mathlib4/actions/runs/8949280481/job/24583395867</a> the <code>get cache</code> step downloaded 2586 files, but then started building everything again. Is there still something wrong with the cache or the Hoskinson machines? <span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> ,  do you understand what might be going on?</p>\n</blockquote>\n<p>Are you sure it actually started building everything again? It looks like you misread the new lake output as it building everything, but I'm pretty sure it just printed everything because it only took 13 minutes to build</p>",
        "id": 437030546,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714837561
    },
    {
        "content": "<p>Does it say <code>Building foo.lean</code> even when there are available oleans? Because there are 4500 such lines in the build step, starting from the first files.</p>",
        "id": 437030836,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1714837824
    },
    {
        "content": "<p>yes</p>",
        "id": 437030855,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714837850
    },
    {
        "content": "<p>This is new behavior and not very well received, it's a side effect of the new logging architecture but I'm increasingly convinced we need a way to fix it anyway</p>",
        "id": 437030889,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714837897
    },
    {
        "content": "<p>the issue is that it prints that line to say it is preparing to build the target before it has checked to see whether it is up to date</p>",
        "id": 437030991,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714837977
    },
    {
        "content": "<p>Then probably I've just misread the build output. But I agree it would be a good idea to clarify the output!</p>",
        "id": 437031002,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1714837987
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> any chance we can get a fix for this in rc2?</p>",
        "id": 437031098,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714838077
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Unlikely/ It would require significant rearchitecture. I ahve some ides on how this could be done, but nothing easy.</p>",
        "id": 437038024,
        "sender_full_name": "Mac Malone",
        "timestamp": 1714844259
    },
    {
        "content": "<p>Also, it would be nice to have issues for these things, so I can have a recrod of the various improvements people would like to the logging output and keep them in mind. <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 437050277,
        "sender_full_name": "Mac Malone",
        "timestamp": 1714855090
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> <a href=\"#narrow/stream/270676-lean4/topic/stack.20overflow.20failure.20in.20.60get.20cache.60.20step/near/437050277\">said</a>:</p>\n<blockquote>\n<p>Also, it would be nice to have issues for these things, so I can have a recrod of the various improvements people would like to the logging output and keep them in mind. <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover/lean4/pull/4069\">lean4#4069</a></p>",
        "id": 437111321,
        "sender_full_name": "Richard Copley",
        "timestamp": 1714915480
    }
]