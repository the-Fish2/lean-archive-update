[
    {
        "content": "<p>Is there any reference to read what error codes mean? I'm getting a crash with just some error code (139) and it doesn't really tell me much more of what's going on:</p>\n<div class=\"codehilite\" data-code-language=\"Text output\"><pre><span></span><code><span class=\"go\">error: external command `/home/goens/.elan/toolchains/leanprover--lean4---v4.7.0/bin/lean` exited with code 139</span>\n</code></pre></div>\n<p>Rather than asking what 139 is specifically, I thought it might be worth asking how I can figure these things out on my own (didn't seem to find a thread asking about them in general)</p>",
        "id": 436065700,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1714402016
    },
    {
        "content": "<p>Here's yesterday's \"what does error code 139 mean?\" question: <a href=\"#narrow/stream/428973-nightly-testing/topic/Mathlib.20status.20updates/near/435877290\">https://leanprover.zulipchat.com/#narrow/stream/428973-nightly-testing/topic/Mathlib.20status.20updates/near/435877290</a></p>",
        "id": 436071882,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714403462
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean.20error.20codes.20.28e.2Eg.2E.20code.20139.29/near/436071882\">said</a>:</p>\n<blockquote>\n<p>Here's yesterday's \"what does error code 139 mean?\" question: <a href=\"#narrow/stream/428973-nightly-testing/topic/Mathlib.20status.20updates/near/435877290\">https://leanprover.zulipchat.com/#narrow/stream/428973-nightly-testing/topic/Mathlib.20status.20updates/near/435877290</a></p>\n</blockquote>\n<p>seems to also be unanswered</p>",
        "id": 436072277,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1714403559
    },
    {
        "content": "<p>GPT says segfault (but perhaps that is already know to everyone here. New to me)</p>",
        "id": 436072837,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1714403702
    },
    {
        "content": "<p>Maybe related to <a href=\"#narrow/stream/116290-rss/topic/Recent.20Commits.20to.20lean4.3Amaster/near/436021997\">this</a>...</p>",
        "id": 436077436,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1714404793
    },
    {
        "content": "<p>FWIW my error was on a file that was not importing Mathlib (I've fixed it now, it was because I was using <code>builtin_initalize</code> and not <code>initalize</code>), but I guess I want to know how to deal with these error codes in general in the future :)</p>",
        "id": 436078076,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1714404942
    },
    {
        "content": "<p>I imagine it's 11 (SIGSEGV) with bit 7 set by something else to indicate that it's a signal rather than an error code.</p>",
        "id": 436079458,
        "sender_full_name": "Richard Copley",
        "timestamp": 1714405259
    },
    {
        "content": "<p>Probably by <a href=\"https://github.com/leanprover/lean4/blob/c79c7c89b34617fe7036f0e8e08fbc50c1422f52/src/runtime/process.cpp#L272C34-L272C36\">this</a>.</p>",
        "id": 436080642,
        "sender_full_name": "Richard Copley",
        "timestamp": 1714405561
    },
    {
        "content": "<p>For most programs/languages it's usually but not always that yeah (a seg fault, and the error code is 128 + the real error code, with 11 being SIGSEGV).<br>\n<span class=\"user-mention\" data-user-id=\"315434\">@Andrés Goens</span> is your error reproducible? If so you can try enabling crash reports and then that may contain something helpful to someone on the dev team.</p>",
        "id": 436082892,
        "sender_full_name": "Julian Berman",
        "timestamp": 1714406070
    },
    {
        "content": "<p>It depends a bit on your Linux distribution where/how to do that, but <code>ulimit -S -c unlimited</code> is usually involved to actually make them be written out, and then we can go find where they end up on your machine.</p>",
        "id": 436083162,
        "sender_full_name": "Julian Berman",
        "timestamp": 1714406146
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span>,  would it be useful to change the message from Lake?</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>diff</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/src/lake/Lake/Util/Proc.lean b/src/lake/Lake/Util/Proc.lean</span>\n<span class=\"gh\">index 01239c7c53..ff77c9b91c 100644</span>\n<span class=\"gd\">--- a/src/lake/Lake/Util/Proc.lean</span>\n<span class=\"gi\">+++ b/src/lake/Lake/Util/Proc.lean</span>\n<span class=\"gu\">@@ -35,6 +35,9 @@ def proc (args : IO.Process.SpawnArgs) (quiet := false) : LogIO Unit := do</span>\n<span class=\"w\"> </span>  | .ok out =&gt;\n<span class=\"w\"> </span>    if out.exitCode = 0 then\n<span class=\"w\"> </span>      logProcWith args out logVerbose (logOutput := if quiet then logVerbose else logInfo)\n<span class=\"gi\">+    else if 128 &lt;= out.exitCode then</span>\n<span class=\"gi\">+      logProcWith args out logError</span>\n<span class=\"gi\">+      error s!\"external command `{args.cmd}` died with signal {out.exitCode - 128}\"</span>\n<span class=\"w\"> </span>    else\n<span class=\"w\"> </span>      logProcWith args out logError\n<span class=\"w\"> </span>      error s!\"external command `{args.cmd}` exited with code {out.exitCode}\"\n<span class=\"gu\">@@ -46,6 +49,9 @@ def captureProc (args : IO.Process.SpawnArgs) : LogIO String := do</span>\n<span class=\"w\"> </span>  | .ok out =&gt;\n<span class=\"w\"> </span>    if out.exitCode = 0 then\n<span class=\"w\"> </span>      return out.stdout.trim -- remove, e.g., newline at end\n<span class=\"gi\">+    else if 128 &lt;= out.exitCode then</span>\n<span class=\"gi\">+      logProcWith args out logError</span>\n<span class=\"gi\">+      error s!\"external command `{args.cmd}` died with signal {out.exitCode - 128}\"</span>\n<span class=\"w\"> </span>    else\n<span class=\"w\"> </span>      logProcWith args out logError\n<span class=\"w\"> </span>      error s!\"external command `{args.cmd}` exited with code {out.exitCode}\"\n</code></pre></div>\n</div></div>",
        "id": 436083658,
        "sender_full_name": "Richard Copley",
        "timestamp": 1714406274
    },
    {
        "content": "<p>I suppose not. It assumes the child is Lean, Bash, Perl or something that uses the same convention.</p>",
        "id": 436084888,
        "sender_full_name": "Richard Copley",
        "timestamp": 1714406588
    },
    {
        "content": "<p>I suspect that also will get wrong if someone actually intentionally exits with an exit code &gt; 128 for whatever reason.</p>",
        "id": 436085091,
        "sender_full_name": "Julian Berman",
        "timestamp": 1714406639
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean.20error.20codes.20.28e.2Eg.2E.20code.20139.29/near/436082892\">said</a>:</p>\n<blockquote>\n<p>For most programs/languages it's usually but not always that yeah (a seg fault, and the error code is 128 + the real error code, with 11 being SIGSEGV).<br>\n<span class=\"user-mention silent\" data-user-id=\"315434\">Andrés Goens</span> is your error reproducible? If so you can try enabling crash reports and then that may contain something helpful to someone on the dev team.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"321696\">@Julian Berman</span> yep it's reproducible! Happy to do that, how do I enable crash reports?</p>",
        "id": 436085998,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1714406876
    },
    {
        "content": "<p>That's that <code>ulimit -c unlimited</code> line I shared -- and then I forget if systemd is responsible for where those go at this point or not -- but share what distro you're on and we can look.</p>",
        "id": 436086437,
        "sender_full_name": "Julian Berman",
        "timestamp": 1714406992
    },
    {
        "content": "<p>Er, to be more explicit -- run that <code>ulimit</code> line, and then make sure you run <code>lean</code> and/or <code>lake</code> in the same exact shell as you ran that in.</p>",
        "id": 436086638,
        "sender_full_name": "Julian Berman",
        "timestamp": 1714407040
    },
    {
        "content": "<p>Hm, I guess it's not a stack overflow? it returns the same error and doesn't dump a core nor anything</p>",
        "id": 436087192,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1714407191
    },
    {
        "content": "<p>(I'm on nixos)</p>",
        "id": 436087230,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1714407203
    },
    {
        "content": "<p>Perhaps a null (or otherwise bad) pointer dereference, then.</p>",
        "id": 436087324,
        "sender_full_name": "Richard Copley",
        "timestamp": 1714407235
    },
    {
        "content": "<p>Or (more likely?) an out-of-bounds array index</p>",
        "id": 436087487,
        "sender_full_name": "Richard Copley",
        "timestamp": 1714407275
    },
    {
        "content": "<p>FWIW, valgrind doesn't seem to find anything strange either</p>",
        "id": 436088171,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1714407464
    },
    {
        "content": "<p>I'd suggest doing <code>lake --verbose</code> to find the command line of the process that crashed, then running that command in your debugger to get a backtrace.</p>",
        "id": 436088273,
        "sender_full_name": "Richard Copley",
        "timestamp": 1714407488
    },
    {
        "content": "<p>oh interesting, apparently it was segfaulting, but the indirection through lake was suppressing the segfault message :/ I did get a backtrace now:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>backtrace</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>program terminated with signal SIGSEGV, Segmentation fault.<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/0\">#0</a>  0x00007fa9fd20b4ca in lean_mark_persistent () from /home/goens/.elan/toolchains/leanprover--lean4---v4.7.0/bin/../lib/lean/libleanshared.so<br>\n(gdb) bt<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/0\">#0</a>  0x00007fa9fd20b4ca in lean_mark_persistent () from /home/goens/.elan/toolchains/leanprover--lean4---v4.7.0/bin/../lib/lean/libleanshared.so<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/1\">#1</a>  0x00007fa9f7c3fef6 in initialize_Egg_Tactic_Tags () from ./.lake/build/lib/libEgg-Tactic-Tags-1.so<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/2\">#2</a>  0x00007fa9fd1fc028 in lean_run_mod_init () from /home/goens/.elan/toolchains/leanprover--lean4---v4.7.0/bin/../lib/lean/libleanshared.so<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/3\">#3</a>  0x00007fa9fa70dd1c in l_Array_forInUnsafe_loop___at_Lean_registerInitAttrUnsafe___spec__22 () from /home/goens/.elan/toolchains/leanprover--lean4---v4.7.0/bin/../lib/lean/libleanshared.so<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/4\">#4</a>  0x00007fa9fa71157f in l_Lean_registerInitAttrUnsafe___lambda__3 () from /home/goens/.elan/toolchains/leanprover--lean4---v4.7.0/bin/../lib/lean/libleanshared.so<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/5\">#5</a>  0x00007fa9fd21775a in lean_apply_3 () from /home/goens/.elan/toolchains/leanprover--lean4---v4.7.0/bin/../lib/lean/libleanshared.so<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/6\">#6</a>  0x00007fa9fa228bd6 in l_Lean_registerParametricAttribute___rarg___lambda__1 () from /home/goens/.elan/toolchains/leanprover--lean4---v4.7.0/bin/../lib/lean/libleanshared.so<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/7\">#7</a>  0x00007fa9fd217798 in lean_apply_3 () from /home/goens/.elan/toolchains/leanprover--lean4---v4.7.0/bin/../lib/lean/libleanshared.so<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/8\">#8</a>  0x00007fa9fa6e49bf in l___private_Lean_Environment_0__Lean_finalizePersistentExtensions_loop () from /home/goens/.elan/toolchains/leanprover--lean4---v4.7.0/bin/../lib/lean/libleanshared.so<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/9\">#9</a>  0x00007fa9fa6ee0ba in l_Lean_finalizeImport___lambda__2 () from /home/goens/.elan/toolchains/leanprover--lean4---v4.7.0/bin/../lib/lean/libleanshared.so<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/10\">#10</a> 0x00007fa9fd21636e in lean_apply_2 () from /home/goens/.elan/toolchains/leanprover--lean4---v4.7.0/bin/../lib/lean/libleanshared.so<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/11\">#11</a> 0x00007fa9fd21559d in lean_apply_1 () from /home/goens/.elan/toolchains/leanprover--lean4---v4.7.0/bin/../lib/lean/libleanshared.so<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/12\">#12</a> 0x00007fa9fbb57463 in l_Lean_withImporting___rarg () from /home/goens/.elan/toolchains/leanprover--lean4---v4.7.0/bin/../lib/lean/libleanshared.so<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/13\">#13</a> 0x00007fa9fa6efbea in l_Lean_importModules___lambda__2___boxed () from /home/goens/.elan/toolchains/leanprover--lean4---v4.7.0/bin/../lib/lean/libleanshared.so<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/14\">#14</a> 0x00007fa9fd21636e in lean_apply_2 () from /home/goens/.elan/toolchains/leanprover--lean4---v4.7.0/bin/../lib/lean/libleanshared.so<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/15\">#15</a> 0x00007fa9fd21559d in lean_apply_1 () from /home/goens/.elan/toolchains/leanprover--lean4---v4.7.0/bin/../lib/lean/libleanshared.so<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/16\">#16</a> 0x00007fa9fcffa71e in l_Lean_profileitIOUnsafe___rarg___lambda__1 () from /home/goens/.elan/toolchains/leanprover--lean4---v4.7.0/bin/../lib/lean/libleanshared.so<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/17\">#17</a> 0x00007fa9fcffa91f in l_Lean_profileitIOUnsafe___rarg___lambda__1___boxed () from /home/goens/.elan/toolchains/leanprover--lean4---v4.7.0/bin/../lib/lean/libleanshared.so<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/18\">#18</a> 0x00007fa9fd215589 in lean_apply_1 () from /home/goens/.elan/toolchains/leanprover--lean4---v4.7.0/bin/../lib/lean/libleanshared.so<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/19\">#19</a> 0x00007fa9fd15cbc4 in lean_profileit () from /home/goens/.elan/toolchains/leanprover--lean4---v4.7.0/bin/../lib/lean/libleanshared.so<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/20\">#20</a> 0x00007fa9fcffa840 in l_Lean_profileitIOUnsafe___rarg () from /home/goens/.elan/toolchains/leanprover--lean4---v4.7.0/bin/../lib/lean/libleanshared.so<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/21\">#21</a> 0x00007fa9fa6efa7d in lean_import_modules () from /home/goens/.elan/toolchains/leanprover--lean4---v4.7.0/bin/../lib/lean/libleanshared.so<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/22\">#22</a> 0x00007fa9fc7d8f9e in l_Lean_Elab_processHeader () from /home/goens/.elan/toolchains/leanprover--lean4---v4.7.0/bin/../lib/lean/libleanshared.so<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/23\">#23</a> 0x00007fa9fc1750d8 in lean_run_frontend () from /home/goens/.elan/toolchains/leanprover--lean4---v4.7.0/bin/../lib/lean/libleanshared.so<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/24\">#24</a> 0x00007fa9fd0f754d in lean::run_new_frontend(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, lean::options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, lean::name const&amp;, unsigned int, lean::optional&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt; const&amp;) ()<br>\n   from /home/goens/.elan/toolchains/leanprover--lean4---v4.7.0/bin/../lib/lean/libleanshared.so<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/25\">#25</a> 0x00007fa9fd0f9f9f in lean_main () from /home/goens/.elan/toolchains/leanprover--lean4---v4.7.0/bin/../lib/lean/libleanshared.so<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/26\">#26</a> 0x00007fa9f923efce in __libc_start_call_main () from /nix/store/1zy01hjzwvvia6h9dq5xar88v77fgh9x-glibc-2.38-44/lib/libc.so.6<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/27\">#27</a> 0x00007fa9f923f089 in __libc_start_main_impl () from /nix/store/1zy01hjzwvvia6h9dq5xar88v77fgh9x-glibc-2.38-44/lib/libc.so.6<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/28\">#28</a> 0x000055dda6d33775 in _start ()</p>\n</div></div>",
        "id": 436090873,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1714408211
    },
    {
        "content": "<p>Thanks for taking the time!</p>",
        "id": 436111989,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714415084
    },
    {
        "content": "<p>BTW is it related to <a href=\"#narrow/stream/116290-rss/topic/Recent.20Commits.20to.20lean4.3Amaster/near/436021997\">this</a> ?</p>",
        "id": 436112122,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714415131
    },
    {
        "content": "<p>Lean core developers are looking into that issue. There's a chance it will be fixed by <a href=\"https://github.com/leanprover/lean4/pull/4028\">lean4#4028</a></p>",
        "id": 436113770,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714415683
    },
    {
        "content": "<p>Got same problem by just doing <code>lake exe cache get</code></p>",
        "id": 436133024,
        "sender_full_name": "Amos Turchet",
        "timestamp": 1714422438
    },
    {
        "content": "<p>Unfortunately <a href=\"https://github.com/leanprover/lean4/pull/4028\">lean4#4028</a> hasn't fixed the earlier issue. We're still looking.</p>",
        "id": 436160857,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714433957
    }
]