[
    {
        "content": "<p>Naming the arguments in only greek letters just seems a bit perverse. \\rho instead of 'seq' or something.</p>\n<p>I propose that we change it and am happy to implement it.</p>",
        "id": 410804308,
        "sender_full_name": "Alok Singh",
        "timestamp": 1704179111
    },
    {
        "content": "<p>Looking at <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ForIn#doc\">docs#ForIn</a>, I'm very puzzled by how <code>[inst : Monad m]</code> is quantified over in <code>ForIn.forIn</code>; surely we don't want to quantify over all non-canonical monad structures on <code>m</code>? Shouldn't <code>[Monad m]</code> be  a parameter on the typeclass instead?</p>",
        "id": 410824142,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704190732
    },
    {
        "content": "<p>I don't think it makes much of a difference. A <code>ForIn</code> impl is supposed to be parametric over the monad anyway</p>",
        "id": 410826120,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704191751
    },
    {
        "content": "<p>But it's true that it is a bit weird that <code>m</code> is a parameter but <code>Monad m</code> is an argument to the <code>forIn</code> function</p>",
        "id": 410826212,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704191782
    }
]