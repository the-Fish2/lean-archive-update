[
    {
        "content": "<p>Consider the following proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">forall</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"n\">Or</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Or</span> <span class=\"n\">q</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">h</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span>\n  <span class=\"bp\">.</span> <span class=\"n\">apply</span> <span class=\"n\">Or.inr</span>\n    <span class=\"n\">assumption</span>\n  <span class=\"bp\">.</span> <span class=\"n\">apply</span> <span class=\"n\">Or.inl</span>\n    <span class=\"n\">assumption</span>\n</code></pre></div>\n<p><code>cases h</code> here is applied to the metavariable generated by <code>intro p q h</code>. Right after <code>cases h</code>, if I were to query the value of this metavariable, I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">?</span><span class=\"n\">m.45</span> <span class=\"n\">_uniq.16</span> <span class=\"o\">(</span><span class=\"n\">Eq.refl</span> <span class=\"n\">_uniq.16</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>here we have an extra metavariable <code>?m.45</code>. Why is this not <code>Or.casesOn</code>? I think it could fill in <code>Or.casesOn</code> right away, because after the proof runs to completion, the value of the aforementioned metavariable becomes</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Or.casesOn</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_uniq.16</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">_uniq.13</span> <span class=\"bp\">∨</span> <span class=\"n\">_uniq.10</span><span class=\"o\">)</span> <span class=\"n\">_uniq.16</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"n\">h_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Eq.symm</span> <span class=\"n\">h_1</span> <span class=\"bp\">▸</span> <span class=\"n\">Or.inr</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"n\">h_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Eq.symm</span> <span class=\"n\">h_1</span> <span class=\"bp\">▸</span> <span class=\"n\">Or.inl</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Eq.refl</span> <span class=\"n\">_uniq.16</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>so at some point<code>?m.45</code> is replaced by <code>Or.casesOn ...</code>.  When does this happen?</p>",
        "id": 418968363,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1706676990
    },
    {
        "content": "<p>I believe you're looking at a delayed assignment metavariable. You need to follow <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.getDelayedMVarAssignment%3F#doc\">docs#Lean.getDelayedMVarAssignment?</a> for these.</p>\n<p>They don't get assigned until the metavariable associated to it is fully assigned with no pending metavariables.</p>",
        "id": 418969526,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1706677782
    }
]