[
    {
        "content": "<p>I've been experiencing some dramatic slowdowns in the infoview over the last week or so; the more goals and terms, the worse it gets. I'm on latest lean/mathlib and VSCode extension - is anyone else having this issue? I'm using Ubuntu 22.04. I think it's likely that this isn't actually a Lean issue, but probably something to do with how VSCode renders webviews.</p>",
        "id": 433818006,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1713368010
    },
    {
        "content": "<p>Could you downgrade your VS Code extension version to 0.0.136 and see if the issue persists? (Extensions &gt; Cog icon on lean4 extension &gt; Install another version &gt; 0.0.136)</p>",
        "id": 433820251,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1713368709
    },
    {
        "content": "<p>Wow, that completely fixed it. What's changed between those updates?</p>",
        "id": 433820412,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1713368762
    },
    {
        "content": "<p>What's an example for a Mathlib file + location where you experience lag that is especially bad?</p>",
        "id": 433820749,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1713368856
    },
    {
        "content": "<p>(I am suspecting <a href=\"https://github.com/leanprover-community/vscode-lean4/pull/408\">vscode-lean4#408</a> as the likely culprit)</p>",
        "id": 433821088,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1713368948
    },
    {
        "content": "<p>I don't use too much of mathlib so I can't give great examples - I'm looking around to find files with very large proof states.</p>",
        "id": 433821313,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1713369017
    },
    {
        "content": "<p>For example, <code>Mathlib/Analysis/BoxIntegral/DivergenceTheorem.lean</code>.</p>",
        "id": 433821534,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1713369088
    },
    {
        "content": "<p>Thanks, I'll see if I can reproduce and fix the issue tomorrow.</p>",
        "id": 433821588,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1713369109
    },
    {
        "content": "<p>I'm testing the lag out by attempting to scroll up and down in the infoview. On the latest version of the extension, it renders at ~5FPS.</p>",
        "id": 433821645,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1713369122
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 433821709,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1713369132
    },
    {
        "content": "<p>Oh no, that was supposed to be an optimization! <span class=\"user-mention\" data-user-id=\"221921\">@Marc Huisinga</span> if you find out do let me know what went wrong.</p>",
        "id": 433832723,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1713372543
    },
    {
        "content": "<p>Sometimes <code>apply?</code> gives me 360 suggestions (which I think is its cap) and that makes the infoview <em>very</em> slow. Here is a non-minimal example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Periodic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Function</span> <span class=\"n\">Set</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">exists_nsmul_near_of_pos'</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedAddCommMonoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Archimedean</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Sub</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">OrderedSub</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">ExistsAddOfLE</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CovariantClass</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">≤</span> <span class=\"bp\">·</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">ContravariantClass</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">≤</span> <span class=\"bp\">·</span><span class=\"o\">)]</span>\n    <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃!</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Ico</span> <span class=\"mi\">0</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">•</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">l</span> <span class=\"bp\">•</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">classical</span>\n  <span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">hk</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">Archimedean.arch</span> <span class=\"n\">y</span> <span class=\"n\">ha</span>\n  <span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">hl</span><span class=\"o\">,</span> <span class=\"n\">h2l</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.findX</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Archimedean.arch</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">•</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">ha</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">tsub_le_iff_left</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hl</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">tsub_le_iff_left</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h2l</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">l</span> <span class=\"bp\">•</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">k</span> <span class=\"bp\">•</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">le_tsub_of_add_le_left</span><span class=\"bp\">;</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">add_zero</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">tsub_lt_iff_left</span> <span class=\"n\">hl</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">not_le</span><span class=\"o\">]</span>\n    <span class=\"n\">nth_rw</span> <span class=\"mi\">2</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">one_smul</span> <span class=\"n\">ℕ</span> <span class=\"n\">a</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">add_smul</span><span class=\"o\">]</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span>\n    <span class=\"n\">cases'</span> <span class=\"n\">l</span> <span class=\"k\">with</span> <span class=\"n\">l</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n      <span class=\"gr\">sorry</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.succ_eq_add_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n      <span class=\"n\">apply</span> <span class=\"n\">h2l</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">lt_add_one</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n      <span class=\"n\">apply</span><span class=\"bp\">?</span>\n</code></pre></div>",
        "id": 433878827,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1713389876
    },
    {
        "content": "<p>PR to fix this at <a href=\"https://github.com/leanprover-community/vscode-lean4/pull/432\">vscode-lean4#432</a>. The <code>apply?</code> example doesn't significantly slow down the InfoView anymore for me with this fix, either.</p>",
        "id": 434036541,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1713443803
    },
    {
        "content": "<p>The fix has been released as part of version 0.0.140 now. If you downgraded to 0.0.136 previously to work around this issue, make sure to click \"Update\" in the extensions menu to unpin 0.0.136.</p>",
        "id": 434313948,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1713515510
    },
    {
        "content": "<p>It seems to be fixed on my end with that update, thanks!</p>",
        "id": 434379842,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1713538535
    }
]