[
    {
        "content": "<p>Why does this work</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.SetTheory.Cardinal.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Cardinal</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Function.Bijective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℵ₀</span> <span class=\"bp\">=</span> <span class=\"bp\">#</span><span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mk_nat</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">mk_congr</span> <span class=\"o\">(</span><span class=\"n\">Equiv.ofBijective</span> <span class=\"n\">_</span> <span class=\"n\">hf</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but this doesn't?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.SetTheory.Cardinal.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Cardinal</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">boof</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Function.Bijective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℵ₀</span> <span class=\"bp\">=</span> <span class=\"bp\">#</span><span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mk_nat</span><span class=\"o\">]</span> <span class=\"c1\">--fails</span>\n  <span class=\"n\">exact</span> <span class=\"n\">mk_congr</span> <span class=\"o\">(</span><span class=\"n\">Equiv.ofBijective</span> <span class=\"n\">_</span> <span class=\"n\">hf</span><span class=\"o\">)</span>\n</code></pre></div>\n<p><code>A</code> is autoImplicit, and in the theorem it's added as <code>Type u_1</code> while in the example it's added as <code>?u.x</code>. It makes sense that this wouldn't work if the universe level of <code>A</code> wasn't specified, so why does the example work? I don't really understand what <code>?u.x</code> represents here.</p>",
        "id": 419604019,
        "sender_full_name": "Nir Paz",
        "timestamp": 1706962532
    },
    {
        "content": "<p>Oh, I see now that <code>A</code> changes to be <code>Type</code> after the first line, so I guess in examples the universe levels are set as tbd, and the final thing we are proving is only decided by the proof, but this obviously shouldn't happen for theorems. Is that right?</p>",
        "id": 419604369,
        "sender_full_name": "Nir Paz",
        "timestamp": 1706962875
    },
    {
        "content": "<p>The main difference between example/defs and theorems is that the type of a  <code>theorem</code> is fully inferred from the left-hand side alone. In the case of a <code>def</code> or <code>example</code> the types of the lhs and rhs are inferred together if possible to match.</p>",
        "id": 419606132,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1706964611
    },
    {
        "content": "<p>It's concerning to see autoImplicits causing confusion even for people who are aware that autoImplicits exist :-( (I've also been picking up the pieces for this in my course recently, because the people taking it are beginners and I foolishly didn't turn them off project-wide initially).</p>",
        "id": 419607935,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706966194
    },
    {
        "content": "<p>In my original code I had <code>ℝ</code> but didn't import the reals, which is a problem that's pretty hard to catch (I know it's colored differently but my brain doesn't really see that). Also maybe not the best place to ask, but how can I turn it off for all files in a project?</p>",
        "id": 419608444,
        "sender_full_name": "Nir Paz",
        "timestamp": 1706966680
    },
    {
        "content": "<p>Just parroting some gobble-de-gook which I don't really understand from the <code>lakefile.lean</code> of my course:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">package</span> <span class=\"bp\">«</span><span class=\"n\">formalising</span><span class=\"bp\">-</span><span class=\"n\">mathematics</span><span class=\"bp\">-</span><span class=\"mi\">2024</span><span class=\"bp\">»</span> <span class=\"n\">where</span>\n  <span class=\"n\">leanOptions</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span>\n    <span class=\"o\">⟨</span><span class=\"bp\">`</span><span class=\"n\">pp.unicode.fun</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">⟩,</span> <span class=\"c1\">-- pretty-prints `fun a ↦ b`</span>\n    <span class=\"o\">⟨</span><span class=\"bp\">`</span><span class=\"n\">pp.proofs.withType</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">⟩,</span>\n    <span class=\"o\">⟨</span><span class=\"bp\">`</span><span class=\"n\">autoImplicit</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">⟩,</span>\n    <span class=\"o\">⟨</span><span class=\"bp\">`</span><span class=\"n\">relaxedAutoImplicit</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">⟩</span>\n  <span class=\"o\">]</span>\n</code></pre></div>\n<p>If it's just for one file then <code>set_option autoImplicit false</code> at the top will do it.</p>",
        "id": 419608739,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706966942
    },
    {
        "content": "<p>this isn't an autoimplicit issue, you get the same behavior if you put <code>{A}</code> at the start of both</p>",
        "id": 419608840,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706967021
    },
    {
        "content": "<p>But if you wrote <code>{A : Type u}</code> then you wouldn't, right?</p>",
        "id": 419608873,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706967059
    },
    {
        "content": "<p>right</p>",
        "id": 419608886,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706967067
    }
]