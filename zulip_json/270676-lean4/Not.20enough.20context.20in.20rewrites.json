[
    {
        "content": "<p>I am currently working through \"Mathematics in Lean\" and reached chapter 2.5, where I need to prove that the distributivity laws <code>a ⊔ (b ⊓ c) = (a ⊔ b) ⊓ (a ⊔ c)</code> and <code>a ⊓ (b ⊔ c) = a ⊓ b ⊔ a ⊓ c</code> are equivalent. Here is my work</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">⊔</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">⊓</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">⊔</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">⊓</span> <span class=\"n\">z</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⊓</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"c1\">-- Switched sides in the theorem statement!</span>\n  <span class=\"k\">calc</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">⊓</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">⊔</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">⊓</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">⊔</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">inf_comm</span><span class=\"o\">,</span> <span class=\"n\">inf_comm</span><span class=\"o\">]</span> <span class=\"c1\">-- Not enough context!</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">inf_sup_self</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"o\">((</span><span class=\"n\">c</span> <span class=\"bp\">⊓</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">⊔</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">⊓</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"n\">c</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">⊔</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">⊓</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">inf_comm</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"bp\">⊔</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⊓</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">sup_assoc</span><span class=\"o\">]</span> <span class=\"c1\">-- Not enough context!</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⊓</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sup_inf_self</span><span class=\"o\">]</span>\n</code></pre></div>\n<ol>\n<li>I found it easier to repeatedly apply h and simplify the right side of <code>a ⊔ (b ⊓ c) = (a ⊔ b) ⊓ (a ⊔ c)</code>in order to obtain the left side. However, this seems to \"only\" prove <code>(a ⊔ b) ⊓ (a ⊔ c) = a ⊔ (b ⊓ c)</code> (which is the same equation, but with reversed sides). I \"fixed\" this issue by switching both sides in the theorem statement itself. I was wondering how to tell lean that I want to prove the goal \"the other way around\".</li>\n<li>Some rewrites require more context for lean to know how to apply the theorems the way I want to. I peaked into the solution and <code>@inf_comm _ _ (a ⊔ b)</code> seems to do the trick. I guess that the <code>_</code>'s are placeholders which I leave lean to figure out for itself. I was wondering how to fill these placeholders myself, i.e. what is the manual way to do these rewrites?</li>\n</ol>",
        "id": 409675690,
        "sender_full_name": "Devon Andrews",
        "timestamp": 1703300022
    },
    {
        "content": "<p>You can <code>rw [eq_comm]</code></p>",
        "id": 409690955,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703314184
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=inf_comm#doc\">docs#inf_comm</a></p>",
        "id": 409704562,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1703325941
    },
    {
        "content": "<p>You can also write <code>inf_comm (a := a \\sup b)</code> if you want to avoid the <code>@</code></p>",
        "id": 409704683,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1703326054
    },
    {
        "content": "<p>Sorry, question 2 had in fact multiple subquestions (which are still unanswered):</p>\n<ol>\n<li>The solution is <code>@inf_comm _ _ (a ⊔ b)</code> or <code>@inf_comm _ _ (a ⊔ b) a</code> if I want to be more precise, but why do I need this format? What makes simply using <code>inf_comm (a ⊔ b) a</code> invalid?</li>\n<li>If the <code>_</code>'s are placeholders, but what is lean filling in?</li>\n<li>I don't get the syntax in the proposed alternative <code>inf_comm (a := a ⊔ b)</code>. What's going on here?</li>\n</ol>",
        "id": 409758421,
        "sender_full_name": "Devon Andrews",
        "timestamp": 1703374333
    },
    {
        "content": "<p>Here is my current working solution:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">⊔</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">⊓</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">⊔</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">⊓</span> <span class=\"n\">z</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⊓</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">eq_comm</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⊓</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span><span class=\"o\">))]</span>\n  <span class=\"k\">calc</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">⊓</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">⊔</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">⊓</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">⊔</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">inf_comm</span> <span class=\"n\">α</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">inf_comm</span> <span class=\"n\">α</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">inf_sup_self</span> <span class=\"n\">α</span> <span class=\"n\">_</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"o\">((</span><span class=\"n\">c</span> <span class=\"bp\">⊓</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">⊔</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">⊓</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"n\">c</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">⊔</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⊓</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">inf_comm</span> <span class=\"n\">α</span> <span class=\"n\">_</span> <span class=\"n\">c</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">inf_comm</span> <span class=\"n\">α</span> <span class=\"n\">_</span> <span class=\"n\">c</span> <span class=\"n\">b</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"bp\">⊔</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⊓</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"bp\">@</span><span class=\"n\">sup_assoc</span> <span class=\"n\">α</span> <span class=\"n\">_</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⊓</span> <span class=\"n\">c</span><span class=\"o\">)]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⊓</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">sup_inf_self</span> <span class=\"n\">α</span> <span class=\"n\">_</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>I figured out that <code>α</code> fits into the first placeholder.</p>",
        "id": 409759606,
        "sender_full_name": "Devon Andrews",
        "timestamp": 1703375535
    },
    {
        "content": "<p>Do you understand the difference between <code>{}</code> and <code>()</code> inputs to functions? If not then you might want to look at <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/\">#tpil</a> , it's chapter 6 or so</p>",
        "id": 409763632,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1703377889
    }
]