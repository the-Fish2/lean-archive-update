[
    {
        "content": "<p>Edit: Now I have a minimal working example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">D</span> <span class=\"n\">where</span>\n<span class=\"kd\">def</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">heq</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"kd\">by</span>\n  <span class=\"c1\">--have _ := x</span>\n  <span class=\"n\">infer_instance</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>Adding the commented line or specifying the type of the hypothesis x makes the typeclass inference work, but currently it fails. This is confusing since the proof state window in VS code still shows that x has type D.</p>\n<p>The inferior old version, just for reference:<br>\nA small (although depending on parts of Mathlib) example is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Category</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstanceAs</span> <span class=\"o\">(</span><span class=\"n\">Category</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">⟶</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">⟶</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">pInv</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">IsIso</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"n\">inv</span> <span class=\"n\">f</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">pInv_comp</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">IsIso</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">pInv</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"kd\">by</span>\n    <span class=\"c1\">--have hg' := hg</span>\n    <span class=\"n\">infer_instance</span><span class=\"o\">)</span>\n  <span class=\"bp\">=</span> <span class=\"n\">pInv</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">pInv</span> <span class=\"n\">g</span> <span class=\"n\">y</span> <span class=\"n\">hg</span><span class=\"o\">)</span> <span class=\"n\">hf</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Currently infer_instance fails. Providing the type <code>hg : IsIso g</code> explicitly, or adding the commented line, fixes this.<br>\nIs this intended behavior?</p>",
        "id": 439029274,
        "sender_full_name": "Sven Manthe",
        "timestamp": 1715868437
    },
    {
        "content": "<p>I think that writing <code>(hg : _)</code> and expecting things to work is probably not intended behaviour :-) but I do see your point; somehow the type of <code>hg</code> can be inferred by the time we've got to <code>pInv f...</code> but perhaps typeclass inference wants to run <del>on the LHS first?</del> before unification has run or something?</p>",
        "id": 439088974,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1715888346
    },
    {
        "content": "<p>Oh, I missed that before. The confusing thing is that the \"Tactic state\" window in the above example before the infer_instance shows <code>hg : IsIso g</code>; so in some sense the informations available to this window seem to be different to the ones available to typeclass search. Also, replacing <code>pInv g y hg</code> by <code>pInv g y (hg : IsIso g)</code> doesn't fix the issue. And that <code>have hg' := hg</code> helps still feels weird to me...</p>",
        "id": 439098751,
        "sender_full_name": "Sven Manthe",
        "timestamp": 1715892481
    },
    {
        "content": "<p>Today I discussed the issue with <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span>. My current understanding: There is a typeclass cache, which gets updated by let/have, causing infer_instance only to work afterward. Thus, I won't report a bug. Nonetheless, if my understanding is correct, it may be more intuitive (and would at least resolve my original problem) if the tactic \"infer_instance\" updated this cache before running \"exact inferInstance\".<br>\nPS: I seemingly cannot mark this as resolved; feel free to do so</p>",
        "id": 440901047,
        "sender_full_name": "Sven Manthe",
        "timestamp": 1716834083
    },
    {
        "content": "<p>I don't think it has anything to do with type class cache. The line <code>have _x := x</code> adds another local variable <code>_x</code>, and because it knows the type of <code>_x</code>, it figures out <code>_x</code> is an instance. But looking at the trace, I see that it still doesn't recognize <code>x</code> as an instance. I think the issue is that Lean only checks once whether a local variable is an instance or not, which is at the moment that it adds the variable to the context. And here it figures out the type of <code>x</code> later than that.</p>",
        "id": 441300088,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1717009851
    }
]