[
    {
        "content": "<p>I'm trying to understand why this code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a1</span> <span class=\"o\">:</span> <span class=\"n\">A</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a2</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span>\n\n<span class=\"kd\">mutual</span>\n\n  <span class=\"kd\">inductive</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n    <span class=\"bp\">|</span> <span class=\"n\">c1</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">as</span>\n    <span class=\"bp\">|</span> <span class=\"n\">c2</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">[]</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">c3</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">[</span><span class=\"n\">A.a2</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">[</span><span class=\"n\">A.a2</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">]</span>\n\n  <span class=\"kd\">inductive</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n    <span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">as</span> <span class=\"bp\">→</span> <span class=\"n\">Unit</span>\n  <span class=\"bp\">|</span> <span class=\"n\">C.c1</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">()</span>\n  <span class=\"bp\">|</span> <span class=\"n\">C.c2</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n  <span class=\"bp\">|</span> <span class=\"n\">C.c3</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>produces this error:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>fail to show termination for\n  f\nwith errors\nargument #2 was not used for structural recursion\n  application type mismatch\n    @C.brecOn (fun {as} x =&gt; Unit) as\n  argument\n    as\n  has type\n    List A : Type\n  but is expected to have type\n    B → Type : Type 1\n</code></pre></div>",
        "id": 433108022,
        "sender_full_name": "Don Unagi",
        "timestamp": 1713075711
    },
    {
        "content": "<p>This looks obviously structurally recursive to me, and seemingly unrelated changes like removing the definition of B make the error go away, so I'm confused about what's happening</p>",
        "id": 433108367,
        "sender_full_name": "Don Unagi",
        "timestamp": 1713075998
    },
    {
        "content": "<p>Lean does not support structural recursion over mutual data types (yet).  It seems that even an “unused” type definition in the mutual block makes it a mutual data type.</p>",
        "id": 433115575,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1713082908
    },
    {
        "content": "<p>It's curious that many other seemingly unrelated changes (for instance removing the <code>c2</code> constructor, or changing its type from <code>c2 : C [] → C [a]</code> to <code>c2 : C [a] → C []</code>, or a half dozen other random things I tried) also make the error go away</p>",
        "id": 433117715,
        "sender_full_name": "Don Unagi",
        "timestamp": 1713085069
    },
    {
        "content": "<p>I guess \"not supported\" could mean \"works unpredictably\" but I wonder if there's a heuristic for when it does and doesn't work?</p>",
        "id": 433117805,
        "sender_full_name": "Don Unagi",
        "timestamp": 1713085154
    },
    {
        "content": "<p>it will use well founded induction on <code>sizeOf</code>, so if there is something else which is decreasing then it may do the proof over that instead</p>",
        "id": 433117816,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713085175
    },
    {
        "content": "<p>Note that your original example works when written as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">as</span> <span class=\"bp\">→</span> <span class=\"n\">Unit</span>\n  <span class=\"bp\">|</span> <span class=\"n\">C.c1</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">()</span>\n  <span class=\"bp\">|</span> <span class=\"n\">C.c2</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n  <span class=\"bp\">|</span> <span class=\"n\">C.c3</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>It appears that lean is trying to do induction on <code>as</code> instead of <code>x</code>, resulting in the unprovable goal <code>sizeOf [A.a2 y x] &lt; sizeOf [A.a2 x y]</code></p>",
        "id": 433118224,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713085545
    },
    {
        "content": "<p>this seems like a bug in GuessLex <span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span></p>",
        "id": 433118240,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1713085561
    },
    {
        "content": "<p>If that's the case, a bug report is very much appreciated</p>",
        "id": 433121471,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1713088647
    },
    {
        "content": "<p>Had a look. This also works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">as</span> <span class=\"bp\">→</span> <span class=\"n\">Unit</span>\n  <span class=\"bp\">|</span> <span class=\"n\">C.c1</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">()</span>\n  <span class=\"bp\">|</span> <span class=\"n\">C.c2</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n  <span class=\"bp\">|</span> <span class=\"n\">C.c3</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n<span class=\"c1\">-- termination_by x2 =&gt; (sizeOf as, sizeOf x2)</span>\n<span class=\"n\">decreasing_by</span> <span class=\"n\">all_goals</span> <span class=\"n\">simp_wf</span><span class=\"bp\">;</span> <span class=\"n\">omega</span>\n</code></pre></div>\n<p>Here is what happens: GuessLex looks at how <code>as</code> and <code>x2</code> decrease in each call, and finds out that <code>(as, x2)</code> is a suitable termination measure. In the third case, <code>as</code> decreases non-strictly (≤) and <code>x2</code> decreases strictly (&lt;). Because GuessLex looks at how each of these behave separately, this looks promising, and it sets</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">termination_by</span> <span class=\"n\">x2</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">sizeOf</span> <span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"n\">sizeOf</span> <span class=\"n\">x2</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>But then the default <code>decreasing_tactic</code> is not able to make use sense of this, because </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">repeat</span> <span class=\"o\">(</span><span class=\"n\">first</span> <span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">Prod.Lex.right</span> <span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">Prod.Lex.left</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>can only handle <code>(&lt;, ?)</code> and <code>(=, &lt;)</code>, (with <code>=</code> being defeq), but not <code>(≤, &lt;)</code>. When I wrote GuessLex I was hoping to improve the <code>decreasing_tactic</code> behavior along it, but revamping that did not happen yet.</p>\n<p>Incidentially, omega has some (incomplete) support for Prod.Lex, that’s why <code>simp_wf; omega</code> works.</p>\n<p>Probably GuessLex should not even look for <code>≤</code>, at least not until the default termination tactic can handle that, as unfortunate as that is.</p>",
        "id": 433151355,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1713115963
    },
    {
        "content": "<p>Noted as <a href=\"https://github.com/leanprover/lean4/issues/3906\">https://github.com/leanprover/lean4/issues/3906</a>.</p>",
        "id": 433151776,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1713116315
    }
]