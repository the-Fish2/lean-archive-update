[
    {
        "content": "<p>I just noticed that Lean 4.8.0-rc1 no longer does a rather disturbing magic trick that Lean used to do (even in the Lean 3 days). My example is not minimal at all since it happens in the sphere eversion project. I can work on a minimization if Lean devs want to see it. But I expect that the magic trick was never intended to work and so this minimization work wouldn‚Äôt be useful. I‚Äôm writing this message to test this assumption, and also potentially help people who could stumble on this without having ever noticed this kind of (evil?) miracle.</p>\n<p>In <a href=\"https://github.com/leanprover-community/sphere-eversion/blob/eb1a9ac8a6d72b312e7cf8777805e7177fa7f766/SphereEversion/ToMathlib/Analysis/ContDiff.lean#L197\">this file</a>, one can read</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">contDiff_parametric_symm_of_deriv_pos</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">ContDiff</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚ä§</span> <span class=\"bp\">‚Üø</span><span class=\"n\">f</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hderiv</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">partialDerivSnd</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hsurj</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">Surjective</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">ContDiff</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚ä§</span> <span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">√ó</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚Ü¶</span>\n      <span class=\"o\">(</span><span class=\"n\">StrictMono.orderIsoOfSurjective</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">p.1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">strictMono_of_deriv_pos</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">hderiv</span> <span class=\"n\">p.1</span><span class=\"o\">)</span>\n            <span class=\"o\">(</span><span class=\"n\">hsurj</span> <span class=\"n\">p.1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">p.2</span>\n</code></pre></div>\n<p>where the only relevant thing is the presence of three explicit arguments, the last one being some surjectivity assumption.</p>\n<p>The lemma is used in <a href=\"https://github.com/leanprover-community/sphere-eversion/blob/eb1a9ac8a6d72b312e7cf8777805e7177fa7f766/SphereEversion/Loops/Reparametrization.lean#L466\">a later file</a> with the following surprising proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">reparametrize_smooth</span> <span class=\"o\">:</span> <span class=\"bp\">ùíû</span> <span class=\"bp\">‚àû</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">uncurry</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">Œ≥.reparametrize</span> <span class=\"n\">x</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">t</span> <span class=\"bp\">‚Ü¶</span> <span class=\"bp\">‚à´</span> <span class=\"n\">s</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">..</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">Œ≥.centeringDensity</span> <span class=\"n\">x</span> <span class=\"n\">s</span>\n  <span class=\"n\">change</span> <span class=\"bp\">ùíû</span> <span class=\"bp\">‚ä§</span> <span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">√ó</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚Ü¶</span> <span class=\"o\">(</span><span class=\"n\">StrictMono.orderIsoOfSurjective</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">p.1</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">p.2</span>\n  <span class=\"n\">apply</span> <span class=\"n\">contDiff_parametric_symm_of_deriv_pos</span>\n  <span class=\"bp\">¬∑</span> <span class=\"n\">exact</span> <span class=\"n\">contDiff_parametric_primitive_of_contDiff''</span> <span class=\"n\">Œ≥.centeringDensity_smooth</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">¬∑</span> <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">deriv_integral_centeringDensity_pos</span> <span class=\"n\">Œ≥</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>Notice how <code>apply contDiff_parametric_symm_of_deriv_pos</code> generates only two goals. The surjectivity assumption simply does not appear at all. Needless to say, this surjectivity is not <code>rfl</code> or ‚Äúfilled in by unification‚Äù or anything like this. So where Lean got it? One can look at the term generated by <code>apply</code> and see: <code>refine contDiff_parametric_symm_of_deriv_pos ?hf ?hderiv (reparametrize.proof_2 Œ≥)</code>. So Lean took the initiative to find some auto-generated lemma <code>reparametrize.proof_2</code> that was floating around. It came from a couple of lines above:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">reparametrize</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">EquivariantEquiv</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">‚Ü¶</span>\n  <span class=\"o\">({</span> <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">t</span> <span class=\"bp\">‚Ü¶</span> <span class=\"bp\">‚à´</span> <span class=\"n\">s</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">..</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">Œ≥.centeringDensity</span> <span class=\"n\">x</span> <span class=\"n\">s</span>\n     <span class=\"n\">invFun</span> <span class=\"o\">:=</span>\n       <span class=\"o\">(</span><span class=\"n\">StrictMono.orderIsoOfSurjective</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Œ≥.strictMono_integral_centeringDensity</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n           <span class=\"o\">(</span><span class=\"n\">Œ≥.surjective_integral_centeringDensity</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n     <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"n\">StrictMono.orderIsoOfSurjective_symm_apply_self</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n     <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">t</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">StrictMono.orderIsoOfSurjective_self_symm_apply</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Œ≥.strictMono_integral_centeringDensity</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">t</span>\n     <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"n\">integral_same</span>\n     <span class=\"n\">eqv'</span> <span class=\"o\">:=</span> <span class=\"n\">Œ≥.integral_add_one_centeringDensity</span> <span class=\"n\">x</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">EquivariantEquiv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</code></pre></div>\n<p>Note this surjectivity is not even a field of this structure, it appears as part of the proof of one of the fields. Specifically, it is the <code>Œ≥.surjective_integral_centeringDensity</code> that appears in <code>invFun</code>.</p>\n<p>Again this whole story worked in Lean 3 and up to Lean 4.7.0, and it no longer works in 4.8.0-rc1 which, very reasonably, asks for a surjectivity proof after the <code>apply</code> line.</p>\n<p>The question is: was this ever intended to work? Should we worry that it no longer works? Would a minimization be helpful?</p>",
        "id": 437299067,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715013373
    },
    {
        "content": "<p>Wow, I never knew this (and I might even be the author of that apply that surprisingly emits only two subgoals instead of three).</p>\n<p>I think I lean in favour of the new world in which this does not work: surely proofs should not be <em>this</em> non-local. I'd be interested to hear from Lean devs if they have remarks.</p>",
        "id": 437300887,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1715014068
    },
    {
        "content": "<p>I assume the change here is that unification no longer recurses into proofs? Hopefully it still <em>visits</em> top-level proofs.</p>",
        "id": 437308094,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715016950
    },
    {
        "content": "<p>Seeing a proof from another proof isn't too surprising, and it doesn't immediately imply a non-local effect. There's a step where proofs are abstracted out of definitions after the definition is constructed, and there's a cache for these abstracted proofs. It's possible that somehow pre-4.8.0 <code>apply</code> was able to come up with a surjectivity proof by some means and then it had the same type as something in the cache, and that cached proof was used.</p>\n<p>What does <code>#print reparametrize.proof_2</code> show?</p>",
        "id": 437315027,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715019811
    },
    {
        "content": "<p>I wonder what the change was. This also seems like the thing that could be caused by a cache that wasn't supposed to survive across declarations....</p>",
        "id": 437315335,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715019943
    },
    {
        "content": "<p>In 4.7.0 it shows the proof I mentioned:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">SmoothSurroundingFamily.reparametrize.proof_2.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">,</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">NormedSpace</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">FiniteDimensional</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">inst_3</span> <span class=\"o\">:</span> <span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst_4</span> <span class=\"o\">:</span> <span class=\"n\">NormedSpace</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst_5</span> <span class=\"o\">:</span> <span class=\"n\">FiniteDimensional</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">F</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">Œ≥</span> <span class=\"o\">:</span> <span class=\"n\">SmoothSurroundingFamily</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">inst_6</span> <span class=\"o\">:</span> <span class=\"n\">DecidablePred</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">affineBases</span> <span class=\"n\">Œπ</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">),</span>\n  <span class=\"n\">Surjective</span> <span class=\"k\">fun</span> <span class=\"n\">t</span> <span class=\"bp\">‚Ü¶</span> <span class=\"bp\">‚à´</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"mi\">0</span> <span class=\"bp\">..</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">centeringDensity</span> <span class=\"n\">Œ≥</span> <span class=\"n\">x</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">FiniteDimensional</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">FiniteDimensional</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">g</span><span class=\"o\">}</span> <span class=\"n\">Œ≥</span> <span class=\"o\">[</span><span class=\"n\">DecidablePred</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">affineBases</span> <span class=\"n\">Œπ</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">x</span> <span class=\"bp\">‚Ü¶</span>\n  <span class=\"n\">surjective_integral_centeringDensity</span> <span class=\"n\">Œ≥</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 437315788,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715020104
    },
    {
        "content": "<p>and the same in 4.8.0</p>",
        "id": 437316179,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715020276
    },
    {
        "content": "<p>No, I‚Äôm wrong. In 4.8.0 it is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">SmoothSurroundingFamily.reparametrize.proof_2.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">,</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">NormedSpace</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">FiniteDimensional</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">inst_3</span> <span class=\"o\">:</span> <span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst_4</span> <span class=\"o\">:</span> <span class=\"n\">NormedSpace</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst_5</span> <span class=\"o\">:</span> <span class=\"n\">FiniteDimensional</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">F</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">Œ≥</span> <span class=\"o\">:</span> <span class=\"n\">SmoothSurroundingFamily</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">inst_6</span> <span class=\"o\">:</span> <span class=\"n\">DecidablePred</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">affineBases</span> <span class=\"n\">Œπ</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">),</span>\n  <span class=\"bp\">‚à´</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"mi\">0</span> <span class=\"bp\">..</span><span class=\"o\">(</span><span class=\"n\">StrictMono.orderIsoOfSurjective</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">t</span> <span class=\"bp\">‚Ü¶</span> <span class=\"bp\">‚à´</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"mi\">0</span> <span class=\"bp\">..</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">Œ≥.centeringDensity</span> <span class=\"n\">x</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">‚ãØ</span> <span class=\"bp\">‚ãØ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n      <span class=\"n\">Œ≥.centeringDensity</span> <span class=\"n\">x</span> <span class=\"n\">s</span> <span class=\"bp\">=</span>\n    <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">FiniteDimensional</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">FiniteDimensional</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">g</span><span class=\"o\">}</span> <span class=\"n\">Œ≥</span> <span class=\"o\">[</span><span class=\"n\">DecidablePred</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">affineBases</span> <span class=\"n\">Œπ</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">x</span> <span class=\"n\">t</span> <span class=\"bp\">‚Ü¶</span>\n  <span class=\"n\">StrictMono.orderIsoOfSurjective_self_symm_apply</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">t</span> <span class=\"bp\">‚Ü¶</span> <span class=\"bp\">‚à´</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"mi\">0</span> <span class=\"bp\">..</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">Œ≥.centeringDensity</span> <span class=\"n\">x</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">strictMono_integral_centeringDensity</span> <span class=\"n\">Œ≥</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">surjective_integral_centeringDensity</span> <span class=\"n\">Œ≥</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">t</span>\n</code></pre></div>",
        "id": 437316316,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715020330
    },
    {
        "content": "<p>So in the new version it is the full field proof, not the subproof.</p>",
        "id": 437316365,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715020359
    },
    {
        "content": "<p>This guess could be totally off-base [edit: yes, this guess was totally off-base] (and I can't point to where in isDefEq this could have happened), but it seems plausible that what happened before was that <code>reparameterize</code> was being unfolded in <code>reparameterize_smooth</code> during a defeq check at <code>apply</code>, which put one of the proofs contained inside it into some cache, and then that was used to fill in a proof metavariable. Maybe with changes to isDefEq, it's not being unfolded anymore, so it doesn't get put into that cache?</p>\n<p>In any case, I think the old behavior was total magic and unintended <span aria-label=\"magic\" class=\"emoji emoji-1fa84\" role=\"img\" title=\"magic\">:magic:</span></p>",
        "id": 437316453,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715020407
    },
    {
        "content": "<p>It was certainly unintended by me (and Oliver).</p>",
        "id": 437316579,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715020455
    },
    {
        "content": "<p>I‚Äôll let you decide whether this is worth bringing to Leo‚Äôs attention.</p>",
        "id": 437316995,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715020620
    },
    {
        "content": "<p>The difference turns out to be in the <code>change</code>.</p>\n<p>Here are the goals after <code>change</code> (I did <code>set_option pp.proofs true</code> for this):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- On 4.7.0</span>\n\n<span class=\"bp\">‚ä¢</span> <span class=\"bp\">ùíû</span> <span class=\"bp\">‚ä§</span> <span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">‚Ü¶</span>\n  <span class=\"o\">(</span><span class=\"n\">OrderIso.symm</span> <span class=\"o\">(</span><span class=\"n\">StrictMono.orderIsoOfSurjective</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">p.1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">reparametrize.proof_1</span> <span class=\"n\">Œ≥</span> <span class=\"n\">p.1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">reparametrize.proof_2</span> <span class=\"n\">Œ≥</span> <span class=\"n\">p.1</span><span class=\"o\">)))</span>\n    <span class=\"n\">p.2</span>\n\n<span class=\"c1\">-- On 4.8.0-rc1</span>\n\n<span class=\"bp\">‚ä¢</span> <span class=\"bp\">ùíû</span> <span class=\"bp\">‚ä§</span> <span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">‚Ü¶</span>\n  <span class=\"o\">(</span><span class=\"n\">StrictMono.orderIsoOfSurjective</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">p.1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">strictMono_integral_centeringDensity</span> <span class=\"n\">Œ≥</span> <span class=\"n\">p.1</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"n\">surjective_integral_centeringDensity</span> <span class=\"n\">Œ≥</span> <span class=\"n\">p.1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n    <span class=\"n\">p.2</span>\n</code></pre></div>\n<p>Notice that <code>reparametrize.proof_2</code> is in the first one. If you look at the full conclusion for <code>contDiff_parametric_symm_of_deriv_pos</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">ùíû</span> <span class=\"bp\">‚ä§</span> <span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">‚Ü¶</span> <span class=\"o\">(</span><span class=\"n\">StrictMono.orderIsoOfSurjective</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">p.1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">strictMono_of_deriv_pos</span> <span class=\"o\">(</span><span class=\"n\">hderiv</span> <span class=\"n\">p.1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hsurj</span> <span class=\"n\">p.1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">p.2</span>\n</code></pre></div>\n<p>you can see that <code>hsurj p.1</code> lines up perfectly to unify with <code>reparametrize.proof_2 Œ≥ p.1</code>, so it's able to pick up the proof.</p>\n<p>In fact, if you change the proof in 4.8.0-rc1 to include a surjectivity proof in the second underscore for the <code>change</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">reparametrize_smooth</span> <span class=\"o\">:</span> <span class=\"bp\">ùíû</span> <span class=\"bp\">‚àû</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">uncurry</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">Œ≥.reparametrize</span> <span class=\"n\">x</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">t</span> <span class=\"bp\">‚Ü¶</span> <span class=\"bp\">‚à´</span> <span class=\"n\">s</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">..</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">Œ≥.centeringDensity</span> <span class=\"n\">x</span> <span class=\"n\">s</span>\n  <span class=\"k\">have</span> <span class=\"n\">hsurj</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">),</span> <span class=\"n\">Surjective</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">change</span> <span class=\"bp\">ùíû</span> <span class=\"bp\">‚ä§</span> <span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">√ó</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚Ü¶</span> <span class=\"o\">(</span><span class=\"n\">StrictMono.orderIsoOfSurjective</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">p.1</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">hsurj</span> <span class=\"n\">p.1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">p.2</span>\n  <span class=\"n\">apply</span> <span class=\"n\">contDiff_parametric_symm_of_deriv_pos</span>\n  <span class=\"bp\">¬∑</span> <span class=\"n\">exact</span> <span class=\"n\">contDiff_parametric_primitive_of_contDiff''</span> <span class=\"n\">Œ≥.centeringDensity_smooth</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">¬∑</span> <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">deriv_integral_centeringDensity_pos</span> <span class=\"n\">Œ≥</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>then the magic is back.</p>",
        "id": 437323304,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715023125
    },
    {
        "content": "<p>Ooooh‚Ä¶ It didn‚Äôt occur to me at all that the goal could be different before the apply. It makes a lot more sense than a <code>apply</code> change.</p>",
        "id": 437325066,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715023870
    },
    {
        "content": "<p>I‚Äôm still happier with my three goals, but I guess I‚Äôm probably using the same magic elsewhere without noticing it.</p>",
        "id": 437325201,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715023938
    },
    {
        "content": "<p>It's odd that isDefEq isn't seeing <code>surjective_integral_centeringDensity Œ≥</code> as being the necessary proof of surjectivity, but I guess it's in different of enough form that Lean doesn't notice.</p>\n<p>By beta expanding and inserting an <code>id</code>, I was able to get it back to three goals, so Lean <em>is</em> able to solve for this by unification if the stars align.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">reparametrize_smooth</span> <span class=\"o\">:</span> <span class=\"bp\">ùíû</span> <span class=\"bp\">‚àû</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">uncurry</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">Œ≥.reparametrize</span> <span class=\"n\">x</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">t</span> <span class=\"bp\">‚Ü¶</span> <span class=\"bp\">‚à´</span> <span class=\"n\">s</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">..</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">Œ≥.centeringDensity</span> <span class=\"n\">x</span> <span class=\"n\">s</span>\n  <span class=\"n\">change</span> <span class=\"bp\">ùíû</span> <span class=\"bp\">‚ä§</span> <span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">√ó</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚Ü¶</span> <span class=\"o\">(</span><span class=\"n\">StrictMono.orderIsoOfSurjective</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">p.1</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"o\">(((</span><span class=\"n\">id</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">surjective_integral_centeringDensity</span> <span class=\"n\">Œ≥</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">),</span> <span class=\"n\">Surjective</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">p.1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">p.2</span>\n  <span class=\"n\">apply</span> <span class=\"n\">contDiff_parametric_symm_of_deriv_pos</span>\n  <span class=\"bp\">¬∑</span> <span class=\"n\">exact</span> <span class=\"n\">contDiff_parametric_primitive_of_contDiff''</span> <span class=\"n\">Œ≥.centeringDensity_smooth</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">¬∑</span> <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">deriv_integral_centeringDensity_pos</span> <span class=\"n\">Œ≥</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 437325320,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715024008
    },
    {
        "content": "<p>I can't say what the exact change was, but the investigation is pointing toward \"this is working as intended, and this proof was previously relying on a higher-order unification of proof terms working out\"</p>",
        "id": 437325519,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715024107
    }
]