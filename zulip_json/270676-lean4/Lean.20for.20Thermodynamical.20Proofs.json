[
    {
        "content": "<p>I want to specify a  thermodynamic system and need help to set it up.</p>",
        "id": 436139043,
        "sender_full_name": "Heime",
        "timestamp": 1714424631
    },
    {
        "content": "<p>Given that you have just installed Lean, have you done any Lean before at all?</p>",
        "id": 436139161,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1714424670
    },
    {
        "content": "<p>Of course not.</p>",
        "id": 436139320,
        "sender_full_name": "Heime",
        "timestamp": 1714424730
    },
    {
        "content": "<p>I done lot of software design before.</p>",
        "id": 436139479,
        "sender_full_name": "Heime",
        "timestamp": 1714424776
    },
    {
        "content": "<p>Lean is not software design, if you don't have experience with teh basics of Lean helping you set up whatever is pretty pointless</p>",
        "id": 436139891,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1714424947
    },
    {
        "content": "<p>Are there any completed proofs from signal analysis in Lean that I can look and learn from ?  Integral transforms (fourier, wavelets) or from sequence and series convergence ?</p>",
        "id": 436141482,
        "sender_full_name": "Heime",
        "timestamp": 1714425598
    },
    {
        "content": "<p>Delved into Coq but found it terribly long to gets to follow an actual non-trivial proof without spending weeks focused on Coq   Structures.</p>",
        "id": 436142427,
        "sender_full_name": "Heime",
        "timestamp": 1714425914
    },
    {
        "content": "<p>Is Lean any better ?</p>",
        "id": 436142501,
        "sender_full_name": "Heime",
        "timestamp": 1714425944
    },
    {
        "content": "<p>Maybe something like <a href=\"https://eric-wieser.github.io/divf-2022/#/mathlib-knows-parseval/0\">this slide</a> and the ones around it are interesting to you, if you want a high level view of what some mathematics in similar areas looks like in Lean? Those slides are about lean 3, but you should be able to search for the corresponding lean4 results in the <a href=\"https://leanprover-community.github.io/mathlib4_docs\">#docs</a>.</p>",
        "id": 436147878,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714428124
    },
    {
        "content": "<p>If I search the lean4 results in the docs are these definitions (coding in Lean) or actually proving something with lean.  I want to prove things in Lean.  Not learning to code in Lean.</p>",
        "id": 436152523,
        "sender_full_name": "Heime",
        "timestamp": 1714430250
    },
    {
        "content": "<p>I don't really understand the distinction you are trying to draw</p>",
        "id": 436153300,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714430565
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=tsum_sq_fourierCoeff#doc\">docs#tsum_sq_fourierCoeff</a> is the lemma in question there</p>",
        "id": 436153429,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714430609
    },
    {
        "content": "<p>If you want to \"follow\" the proof, you will need to get <a href=\"#narrow/stream/270676-lean4/topic/Installing.20Lean4.20on.20Ubuntu.20Machine/near/436133960\">your installation</a> working first though; lean proofs are mostly written on the assumption that you are reading them with a working lean install and a clever editor of your choice.</p>",
        "id": 436153773,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714430717
    },
    {
        "content": "<p>Aren't there any books and tutorials showing how proofs are verified ?  I am looking for simple undergraduate theorems that have already been proved, to see how it is done.</p>",
        "id": 436157636,
        "sender_full_name": "Heime",
        "timestamp": 1714432150
    },
    {
        "content": "<p>There are a few different books for basic theorem proving in lean, starting with <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/\">#tpil</a> <br>\nThere are games like #nng4 and the set theory game to learn the basic tactics.</p>\n<p>That being said, without familiarity with lean the programming language, the metaprogramming facilities will prove hard to get started on.</p>",
        "id": 436157943,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1714432297
    },
    {
        "content": "<p>Also, for your specified interests, I suggest taking a look at scilean and the natural sciences stream on this zulip. There are a few discussions you might find informative</p>",
        "id": 436158100,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1714432367
    },
    {
        "content": "<p>Regarding <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=tsum_sq_fourierCoeff#doc\">docs#tsum_sq_fourierCoeff</a>   </p>\n<p>Is that a statement of the theorem, or its proof ?</p>",
        "id": 436158269,
        "sender_full_name": "Heime",
        "timestamp": 1714432464
    },
    {
        "content": "<p>What's listed there is a statement. You can click on the source link of the panel to see the tactic proof</p>",
        "id": 436158341,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1714432507
    },
    {
        "content": "<p>But in order to understand what that proof is doing, it is best to clone mathlib, set it up as per the README, and interact with it on vscode</p>",
        "id": 436158415,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1714432553
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 436158589,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1714432640
    },
    {
        "content": "<p>Right.  Rather than the statement of the theorems, I am more interested to see the actual proof that gets verified by lean.</p>",
        "id": 436158729,
        "sender_full_name": "Heime",
        "timestamp": 1714432706
    },
    {
        "content": "<p>Then you need to click on the source link of the panel. What you see is a tactic script that generates the proof</p>",
        "id": 436158978,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1714432836
    },
    {
        "content": "<p>Is there anything about convergence of sequences and series.  Have been looking, but cannot find anything yet.</p>",
        "id": 436159602,
        "sender_full_name": "Heime",
        "timestamp": 1714433207
    },
    {
        "content": "<p>I doubt that you'll find proofs of convergence of specific series. It is more likely that there are general theorems of convergence. You could search <a href=\"http://moogle.ai\">moogle</a> or <a href=\"http://loogle.lean-lang.org\">loogle</a>. Moogle supports natural language queries whereas loogle is a lot like Haskell's hoogle, which looks for specific patterns</p>",
        "id": 436161521,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1714434342
    },
    {
        "content": "<p>If you wish to learn proving things like that, you could check out the <a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">#mil</a> book (Mathematics in lean)</p>",
        "id": 436161718,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1714434450
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Real.tendsto_sum_range_one_div_nat_succ_atTop#src\">src#Real.tendsto_sum_range_one_div_nat_succ_atTop</a> is the divergence of the harmonic series, as an example.</p>",
        "id": 436161724,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714434457
    },
    {
        "content": "<p>Echoing the suggestion to read <a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">#mil</a>, but if you give some concrete examples people will probably be happy to help.</p>",
        "id": 436161745,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714434474
    },
    {
        "content": "<p>It is a shame that the book is not in pdf as well.  At any rate, I shall go through it to see how much it would help me.</p>",
        "id": 436163155,
        "sender_full_name": "Heime",
        "timestamp": 1714435253
    },
    {
        "content": "<p>But I can see that making sense of the proofs is hard.  Very hard actually !</p>",
        "id": 436163545,
        "sender_full_name": "Heime",
        "timestamp": 1714435460
    },
    {
        "content": "<p>You can get the pdf from its github repository : <a href=\"https://github.com/leanprover-community/mathematics_in_lean/blob/master/mathematics_in_lean.pdf\">https://github.com/leanprover-community/mathematics_in_lean/blob/master/mathematics_in_lean.pdf</a></p>",
        "id": 436163567,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1714435476
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"714044\">Heime</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean.20for.20Thermodynamical.20Proofs/near/436163545\">said</a>:</p>\n<blockquote>\n<p>But I can see that making sense of the proofs is hard.  Very hard actually !</p>\n</blockquote>\n<p>What you see as \"proofs\" in lean are scripts composed of tactics. Tactics are metaprograms that construct and supply a proof term in pieces. The proof terms produced by tactics can be rather unwieldy. A better way to understand them is to work with them through examples. This is where games come in handy : <a href=\"https://adam.math.hhu.de/\">https://adam.math.hhu.de/</a></p>",
        "id": 436163859,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1714435654
    },
    {
        "content": "<p>Fantastic discovery.  There are two things  to get used to: 1) Formalising mathematics for lean and 2) Proving the statements.</p>",
        "id": 436163865,
        "sender_full_name": "Heime",
        "timestamp": 1714435658
    },
    {
        "content": "<p>What basic and useful tactics should I learn about as I start with all this ?</p>",
        "id": 436164781,
        "sender_full_name": "Heime",
        "timestamp": 1714436182
    },
    {
        "content": "<p>I recommend following the natural number game. The tactics you need largely depend on what you do with lean, but that game has the basics. An almost certaintly incomplete common baseline could be : <code>rfl</code>, <code>rw</code>, <code>exact</code> (and <code>exact?</code>), <code>apply</code>(and <code>apply?</code>), <code>intro</code>, <code>use</code>,  <code>revert</code>, <code>cases</code>, <code>induction</code>, <code>gcongr</code>, <code>have/replace</code>,<code>induction</code>, and <code>simp</code>.</p>",
        "id": 436165120,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1714436401
    },
    {
        "content": "<p>But there's a lot more than these and many ways to combine them.</p>",
        "id": 436165271,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1714436473
    },
    {
        "content": "<p>Is there also a pdf for \"Theorem Proving in Lean 4\" ?</p>",
        "id": 436165478,
        "sender_full_name": "Heime",
        "timestamp": 1714436598
    },
    {
        "content": "<p>It's an mdbook. On the top right corner, next to the github icon you should be able to see a printer icon which you you can use to save the book as a pdf.</p>",
        "id": 436165831,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1714436801
    },
    {
        "content": "<p>You might find this tactic cheatsheet by <span class=\"user-mention\" data-user-id=\"417654\">@Martin Dvořák</span>  useful : <a href=\"https://github.com/madvorak/lean4-cheatsheet/blob/main/lean-tactics.pdf\">https://github.com/madvorak/lean4-cheatsheet/blob/main/lean-tactics.pdf</a></p>",
        "id": 436166693,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1714437293
    },
    {
        "content": "<p>Have found the printer icon as you say. Thank you so very much for the cheat sheet.  I am generally in contrasting mood to mathematicians as I often want to go through things fast.</p>",
        "id": 436167942,
        "sender_full_name": "Heime",
        "timestamp": 1714438047
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean.20for.20Thermodynamical.20Proofs/near/436166693\">said</a>:</p>\n<blockquote>\n<p>You might find this tactic cheatsheet by <span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span>  useful : <a href=\"https://github.com/madvorak/lean4-cheatsheet/blob/main/lean-tactics.pdf\">https://github.com/madvorak/lean4-cheatsheet/blob/main/lean-tactics.pdf</a></p>\n</blockquote>\n<p>That one is for print and is a bit obsolete. If you want to read it on your computer, I recommend this one:<br>\n<a href=\"https://github.com/madvorak/lean4-tactics\">https://github.com/madvorak/lean4-tactics</a></p>",
        "id": 436206962,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1714460162
    },
    {
        "content": "<p>As another newcomer from the software side, I strongly advise you not to read PDFs but actually run any code you see in a Lean-enabled editor, in order to see the state of the proof after each operation. Otherwise you won't be able to follow the steep learning curve, at all, that lies ahead of you.</p>",
        "id": 436210819,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1714461656
    },
    {
        "content": "<p>How can we solve this disease that whatever is done, it is done hard !</p>",
        "id": 436225822,
        "sender_full_name": "Heime",
        "timestamp": 1714467635
    },
    {
        "content": "<p>Well, it sounds like you're the one asking for the \"hard\" PDF copy of the documentation, rather than using the web version <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span>. What exactly do you mean by that?</p>",
        "id": 436226454,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714467869
    },
    {
        "content": "<p>I don't think it's remotely fair to the developers or the community to describe any part of Lean as a \"disease\", except for the fact that wanting to prove in it seems contagious!</p>",
        "id": 436226498,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714467895
    },
    {
        "content": "<p>The steep learning curve is a reality.  To look at things the way they are is something that many are not comfortable with.  Have realised that humans have not evolved as much as we think we have.  If this will be the future of mathematics, there will be very few.</p>",
        "id": 436230296,
        "sender_full_name": "Heime",
        "timestamp": 1714469261
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"714044\">@Heime</span> Please come with concrete suggestions for improvement instead of unconstructively labelling things \"disease\" or not \"decent\" etc...</p>",
        "id": 436231043,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1714469515
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"714044\">Heime</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean.20for.20Thermodynamical.20Proofs/near/436230296\">said</a>:</p>\n<blockquote>\n<p>To look at things the way they are is something that many are not comfortable with.</p>\n</blockquote>\n<p>I've met some Koreans who complained that formalized mathematics doesn't \"look like\" standard mathematics. I agree that we need a new method for writing formal proofs other than tactics or proof terms. I hope it'll resemble writing Fitch-style proofs.</p>\n<p>However, I think tactic proofs are better in some cases. For example, I spent about 170 hours proving the theorem <code>String.splitOn_of_valid</code>. See <a href=\"https://github.com/leanprover/std4/pull/743\">std#743</a>. Tactics make it much easier to simplify proof goals. I can't imagine writing an informal proof of this theorem without referring to the formal proof written in Lean.</p>\n<p>Besides, even I don't want to have an in-depth understanding of the proof I wrote. It's too complicated. In this case, tactic proofs are just fine because you only want to confirm that the proof is correct. Would an informal proof of <code>String.splitOn_of_valid</code> be much easier to understand? Probably yes, but only when it omitted many proof steps requiring delicacy.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"714044\">Heime</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean.20for.20Thermodynamical.20Proofs/near/436225822\">said</a>:</p>\n<blockquote>\n<p>How can we solve this disease that whatever is done, it is done hard !</p>\n</blockquote>\n<p>In conclusion, that \"disease\" saved my time. There's a good reason to do something the hard way.</p>",
        "id": 436370975,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1714520520
    },
    {
        "content": "<p>But Fitch-style proofs don't look like standard mathematics either!</p>",
        "id": 436438216,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1714537071
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean.20for.20Thermodynamical.20Proofs/near/436438216\">said</a>:</p>\n<blockquote>\n<p>But Fitch-style proofs don't look like standard mathematics either!</p>\n</blockquote>\n<p>Um, that's why I think the Koreans I mentioned wouldn't like Fitch-style proofs either. However, these proofs have the advantage of not requiring a user to run a proof assistant to examine the proof state of each step.</p>",
        "id": 436448325,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1714538730
    },
    {
        "content": "<p>I still don't know what the new method for writing formal proofs would exactly look like. I need to study more.</p>",
        "id": 436448380,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1714538764
    },
    {
        "content": "<p><code>#explode</code> gives a Fitch-style proof that's very helpful for figuring out what happened during the tactics and a possible better path. It seems easier to convert to informal proofs from there while maybe losing high-level ideas expressed by high-level tactics with a semantic similar to informal proofs.</p>",
        "id": 436486033,
        "sender_full_name": "Utensil Song",
        "timestamp": 1714563368
    },
    {
        "content": "<p>The result of running <code>#explode String.lt_iff_toList_lt</code> is in <a href=\"https://paste.sr.ht/~chabulhwi/c57c0555c142cbd2eaf1ee4401fd3b94c764acca\">https://paste.sr.ht/~chabulhwi/c57c0555c142cbd2eaf1ee4401fd3b94c764acca</a>.</p>\n<p>My goal is to make auto-generated Fitch-style proofs more readable.</p>",
        "id": 436488101,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1714564573
    },
    {
        "content": "<p>I think there was a version of explode that generated HTML instead of ASCII art, which is a bit easier to keep aligned when there are long subexpressions</p>",
        "id": 436529022,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714579750
    },
    {
        "content": "<p>The original <code>#explode</code> predates infoview widgets, but I think we can do a lot better these days presentation-wise</p>",
        "id": 436529279,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714579807
    },
    {
        "content": "<p>There is some code at <a href=\"https://github.com/leanprover-community/mathlib3port/blob/master/Mathbin/Tactic/ExplodeWidget.lean\">https://github.com/leanprover-community/mathlib3port/blob/master/Mathbin/Tactic/ExplodeWidget.lean</a> that could be adapted</p>",
        "id": 436579771,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714601010
    },
    {
        "content": "<p>I also want to have the option to hide the inner workings of tactics when using the <code>#explode</code> command. I'll try to make it in the future.</p>",
        "id": 436597543,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1714611572
    }
]