[
    {
        "content": "<p>As my previous Alectryon/LeanInk setup failed with <a href=\"https://github.com/utensil/lean-playground/actions/runs/7309672746/job/19917515075\">some Python errors</a>, and Verso supports proof states now (<span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span>), I am trying to port those Lean files to Verso.</p>\n<p>I could not find the source of e.g. <a href=\"https://lean-lang.org/blog/2024-2-29-lean-460/\">https://lean-lang.org/blog/2024-2-29-lean-460/</a> , so I just cloned verso and run <code>lake build</code> following its README and trying to fiddle with the demo site, then I got this error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"mi\">89</span><span class=\"bp\">/</span><span class=\"mi\">100</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">DemoSite.Blog.Subprojects</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">&gt;</span> <span class=\"n\">LEAN_PATH</span><span class=\"bp\">=./.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">subverso</span><span class=\"bp\">/.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span> <span class=\"n\">DYLD_LIBRARY_PATH</span><span class=\"bp\">=./.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span> <span class=\"bp\">/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">utensil</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---v4.7.0-rc1/bin/lean ././examples/website/DemoSite/Blog/Subprojects.lean -R ././examples/website -o ./.lake/build/lib/DemoSite/Blog/Subprojects.olean -i ./.lake/build/lib/DemoSite/Blog/Subprojects.ilean -c ./.lake/build/ir/DemoSite/Blog/Subprojects.c</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">stdout</span><span class=\"o\">:</span>\n<span class=\"bp\">././</span><span class=\"n\">examples</span><span class=\"bp\">/</span><span class=\"n\">website</span><span class=\"bp\">/</span><span class=\"n\">DemoSite</span><span class=\"bp\">/</span><span class=\"n\">Blog</span><span class=\"bp\">/</span><span class=\"n\">Subprojects.lean</span><span class=\"o\">:</span><span class=\"mi\">24</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">Build</span> <span class=\"n\">process</span> <span class=\"n\">failed.</span>\n<span class=\"n\">stderr</span><span class=\"o\">:</span>\n<span class=\"n\">could</span> <span class=\"n\">not</span> <span class=\"n\">execute</span> <span class=\"n\">external</span> <span class=\"n\">process</span> <span class=\"bp\">'/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">utensil</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">lake'</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">stderr</span><span class=\"o\">:</span>\n<span class=\"n\">Build</span> <span class=\"n\">process</span> <span class=\"n\">failed.</span>\n<span class=\"n\">CWD</span><span class=\"o\">:</span> <span class=\"bp\">/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">utensil</span><span class=\"bp\">/</span><span class=\"n\">projects</span><span class=\"bp\">/</span><span class=\"n\">verso</span><span class=\"bp\">/</span><span class=\"n\">examples</span><span class=\"bp\">/</span><span class=\"n\">website</span><span class=\"bp\">-</span><span class=\"n\">examples</span>\n<span class=\"n\">Command</span><span class=\"o\">:</span> <span class=\"bp\">/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">utensil</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">lake</span>\n<span class=\"n\">Exit</span> <span class=\"n\">code</span><span class=\"o\">:</span> <span class=\"mi\">255</span>\n<span class=\"n\">stdout</span><span class=\"o\">:</span>\n<span class=\"n\">stderr</span><span class=\"o\">:</span> <span class=\"n\">could</span> <span class=\"n\">not</span> <span class=\"n\">execute</span> <span class=\"n\">external</span> <span class=\"n\">process</span> <span class=\"bp\">'/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">utensil</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">lake'</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">external</span> <span class=\"n\">command</span> <span class=\"bp\">`/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">utensil</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---v4.7.0-rc1/bin/lean` exited with code 1</span>\n</code></pre></div>\n<p>I'm on Mac M1 and I have no clue whether there should be a <code>lake</code> in <code>.elan/bin</code> nowadays (and how I end up having no <code>lake</code> in <code>.elan/bin</code> and how to fix it if needed), and other Lean projects seems to be working well with <code>lake</code> inside the toolchain specific <code>bin/lake</code> while verso uses <code>.elan/bin/lake</code> per <a href=\"https://github.com/leanprover/subverso/blob/fe51c0e6ddc68758f425c901551cd7fddf70913e/src/examples/SubVerso/Examples.lean#L93-L110\"><code>SubVerso.Examples.findElanLake</code></a>.</p>",
        "id": 426048283,
        "sender_full_name": "Utensil Song",
        "timestamp": 1710214278
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">%</span> <span class=\"n\">git</span> <span class=\"n\">clone</span> <span class=\"n\">git</span><span class=\"bp\">@</span><span class=\"n\">github.com</span><span class=\"o\">:</span><span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">verso.git</span>\n<span class=\"bp\">%</span> <span class=\"n\">cd</span> <span class=\"n\">verso</span>\n<span class=\"bp\">%</span> <span class=\"n\">lake</span> <span class=\"n\">build</span>\n</code></pre></div>\n<p>is working for me.</p>",
        "id": 426065225,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710227210
    },
    {
        "content": "<p>I would assume your <code>elan</code> is broken in some way, and would suggest just deleting <code>~/.elan</code>, reinstalling elan, and trying again.</p>",
        "id": 426065275,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710227233
    },
    {
        "content": "<p>If that fails, could you try to make an exact repro?</p>",
        "id": 426065292,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710227244
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"296911\">@Utensil Song</span> Is your elan from homebrew?</p>",
        "id": 426066637,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1710227919
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Verso.3A.20could.20not.20execute.20external.20process/near/426066637\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> Is your elan from homebrew?</p>\n</blockquote>\n<p>Yes, it was installed by <code>brew install elan-init</code> as instructed <a href=\"https://leanprover-community.github.io/install/macos.html\">here</a>.</p>",
        "id": 426073203,
        "sender_full_name": "Utensil Song",
        "timestamp": 1710231268
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/Verso.3A.20could.20not.20execute.20external.20process/near/426065275\">said</a>:</p>\n<blockquote>\n<p>I would assume your <code>elan</code> is broken in some way, and would suggest just deleting <code>~/.elan</code>, reinstalling elan, and trying again.</p>\n</blockquote>\n<p>I have indeed tried this, but the same error persists. I wonder if the search priority for lake in the subverso code is optimal, since other projects successfully found a lake (in toolchain-specific <code>bin</code>).</p>",
        "id": 426073673,
        "sender_full_name": "Utensil Song",
        "timestamp": 1710231548
    },
    {
        "content": "<p>BTW, any chances the source of <a href=\"https://lean-lang.org/blog/2024-2-29-lean-460/\">https://lean-lang.org/blog/2024-2-29-lean-460/</a>  is publicly available somewhere?</p>",
        "id": 426073833,
        "sender_full_name": "Utensil Song",
        "timestamp": 1710231620
    },
    {
        "content": "<p>As far as I can tell, it is generated from the private repo <a href=\"https://github.com/leanprover/lean-fro.org\">https://github.com/leanprover/lean-fro.org</a> (although I don't understand which branch, if that is the correct source: <code>master</code> hasn't been updated for months...)</p>\n<p><span class=\"user-mention\" data-user-id=\"354934\">@David Thrane Christiansen</span>?</p>",
        "id": 426075608,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710232368
    },
    {
        "content": "<p>The reason it wants to run <code>lake</code> is because of newly-landed support for including code examples written in other versions of Lean. The demonstration website does this. It jumps through some hoops to avoid the toolchain-specific version, as it needs to get the Elan proxy binary in order to cross Lean versions, but this is clearly not general enough right now. I created <a href=\"https://github.com/leanprover/subverso/issues/4\">an issue</a> to track it. Right now, if <code>$ELAN_HOME</code> is set, it assumes that there's a <code>lake</code> proxy there - it should probably check first, and then iterate over <code>$PATH</code> if not. Thanks for finding this!</p>\n<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> It is indeed that private repo, but the <code>leandoc</code> branch. That repo generates both our websites, and they share a fair bit of code.</p>\n<p>The repo is private because we sometimes want to prepare something privately, e.g. in connection with job postings. This is definitely less great from the perspective of using it as an example - I'll talk over the tradeoffs with the rest of the FRO.</p>",
        "id": 426107955,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1710244382
    },
    {
        "content": "<p>Thanks for the issue and the explanations. I used the following workaround on Mac for an elan from homebrew without a <code>~/.elan/bin/lake</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">mkdir</span> <span class=\"bp\">~/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span>\n<span class=\"n\">ln</span> <span class=\"bp\">-</span><span class=\"n\">s</span> <span class=\"bp\">~/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---v4.7.0-rc2/bin/lake ~/.elan/bin/lake</span>\n</code></pre></div>\n<p>Then it seems to be unable to use the old Lean version as intended:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">stdout</span><span class=\"o\">:</span>\n<span class=\"bp\">././</span><span class=\"n\">examples</span><span class=\"bp\">/</span><span class=\"n\">website</span><span class=\"bp\">/</span><span class=\"n\">DemoSite</span><span class=\"bp\">/</span><span class=\"n\">Blog</span><span class=\"bp\">/</span><span class=\"n\">Subprojects.lean</span><span class=\"o\">:</span><span class=\"mi\">52</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">Didn't</span> <span class=\"k\">match</span> <span class=\"bp\">-</span> <span class=\"n\">expected</span> <span class=\"n\">one</span> <span class=\"n\">of</span><span class=\"o\">:</span>\n  <span class=\"o\">[</span><span class=\"s2\">\"4.7.0-rc2\"</span> <span class=\"o\">]</span>\n<span class=\"n\">but</span> <span class=\"n\">got</span><span class=\"o\">:</span>\n  <span class=\"s2\">\"4.5.0\"</span>\n</code></pre></div>\n<p>I can bypass this by changing it to \"4.7.0-rc2\" in Lean and <code>lake build</code> and site generation no longer complains, but the resulting page also doesn't seem to be using the old Lean features correctly:</p>\n<p><a href=\"/user_uploads/3121/q0_Mbeu668mbKgSwM8rd9vJQ/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/q0_Mbeu668mbKgSwM8rd9vJQ/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/q0_Mbeu668mbKgSwM8rd9vJQ/image.png\"></a></div>",
        "id": 426871541,
        "sender_full_name": "Utensil Song",
        "timestamp": 1710576407
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"354934\">David Thrane Christiansen</span> <a href=\"#narrow/stream/270676-lean4/topic/Verso.3A.20could.20not.20execute.20external.20process/near/426107955\">said</a>:</p>\n<blockquote>\n<p>Right now, if <code>$ELAN_HOME</code> is set, it assumes that there's a <code>lake</code> proxy there - it should probably check first, and then iterate over <code>$PATH</code> if not. Thanks for finding this!</p>\n</blockquote>\n<p>This sounds imilar to an issue <a href=\"#narrow/stream/287929-mathlib4/topic/Disable.20lake.20post-hook.20when.20importing.20mathlib.3F/near/401540936\">I previously encountered</a> with assuming <code>elan</code> would be located in <code>$ELAN_HOME/bin</code>. It now sounds like it is not safe to assume either <code>elan</code> or <code>lake</code> are in <code>$ELAN_HOME/bin</code> when installed <a href=\"#narrow/stream/287929-mathlib4/topic/Disable.20lake.20post-hook.20when.20importing.20mathlib.3F/near/401813930\">via a a distro</a>. This  makes me curious what <em>is</em> guarenteed to be in the <code>bin</code> directory of <code>ELAN_HOME</code>, if anything. <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>, could you offer some insights as to the expected behavior/structure of <code>ELAN_HOME</code>?</p>",
        "id": 426921922,
        "sender_full_name": "Mac Malone",
        "timestamp": 1710623254
    },
    {
        "content": "<p>ELAN_HOME is the home of toolchains, not necessarily of elan's own binaries. So don't assume bin/ to exist.</p>",
        "id": 427223027,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1710709943
    },
    {
        "content": "<p>Yes, my observation after a few reinstallations is that there is no <code>bin</code> under  <code>ELAN_HOME</code> at all.</p>\n<p><code>which elan</code> gives <code>/opt/homebrew/bin/elan</code> while <code> which lake</code> gives <code>/opt/homebrew/bin/lake</code>.</p>",
        "id": 427282397,
        "sender_full_name": "Utensil Song",
        "timestamp": 1710725614
    },
    {
        "content": "<p>I won't get this fixed for the next week or so - apologies! But it should work for now to symlink the Elan proxies for the Lean tools into the ELAN_HOME/bin directories, rather than the concrete toolchain that you're using.</p>",
        "id": 427974417,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1710953578
    },
    {
        "content": "<p>Aha, I see where my workaround went wrong, thanks!</p>\n<p>EDIT: Using</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ln</span> <span class=\"bp\">-</span><span class=\"n\">s</span> <span class=\"bp\">`</span><span class=\"n\">which</span> <span class=\"n\">lake</span><span class=\"bp\">`</span> <span class=\"bp\">~/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">lake</span>\n</code></pre></div>\n<p>instead, it now works like a charm!</p>",
        "id": 428040781,
        "sender_full_name": "Utensil Song",
        "timestamp": 1710982963
    },
    {
        "content": "<p>Good to hear!</p>",
        "id": 428073714,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1711008062
    }
]