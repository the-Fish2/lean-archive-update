[
    {
        "content": "<p>With the new <code>have</code> syntax, can we recover from errors more gracefully? That is: if the proof term contains an error then the tactic execution still continues with the new hypothesis added. Compare:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span>\n    <span class=\"n\">False.elim</span> <span class=\"c1\">-- expected error</span>\n  <span class=\"n\">assumption</span> <span class=\"c1\">-- bad error: no goals to be solved</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">exact</span> <span class=\"n\">False.elim</span> <span class=\"c1\">-- expected error</span>\n  <span class=\"n\">assumption</span> <span class=\"c1\">-- no error as expected</span>\n</code></pre></div>\n<p>Note that to avoid this error I am switching from tactic mode to term mode to tactic mode to term mode. And these \"no goals to be solved\" errors can be really confusing to new users.</p>",
        "id": 425283053,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1709811019
    },
    {
        "content": "<p><a href=\"#narrow/stream/270676-lean4/topic/have.20tactic.20error.20recovery/near/425283053\">A message</a> was moved here from <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/have.20syntax.20without.20.22.3A.3D.20by.22\">#lean4 &gt; have syntax without \":= by\"</a> by <span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span>.</p>",
        "id": 425283104,
        "sender_full_name": "Notification Bot",
        "timestamp": 1709811045
    },
    {
        "content": "<p>This also applies to <code>let</code>, <code>replace</code>, <code>obtain</code>, etc</p>",
        "id": 425303891,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709818588
    },
    {
        "content": "<p>Here's a possible solution to this: <a href=\"https://github.com/leanprover/lean4/pull/3633\">lean4#3633</a></p>\n<p>My interpretation of the underlying issue is that <code>elabTermEnsuringType</code> doesn't take <code>errToSorry</code> into account when it throws the type mismatch error. This PR makes it respect <code>errToSorry</code>, since it's a frontend to the main term elaborator.</p>",
        "id": 425384135,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709841371
    }
]