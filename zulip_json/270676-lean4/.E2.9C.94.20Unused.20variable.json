[
    {
        "content": "<p>Why am I  getting the message <code>unused variable  w [linter.unusedVariables]</code>? <br>\nSeems that since the w is in the scope of the λ, it is \"used\".</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Calculus.Deriv.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Calculus.Deriv.Mul</span>\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">D</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">deriv</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">const_mul_D</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">w</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">id</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">z</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">id.def</span><span class=\"o\">]</span>\n\n  <span class=\"n\">funext</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"k\">calc</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">deriv</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">y</span>                    <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">deriv</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">y</span>               <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[(</span><span class=\"n\">funext</span> <span class=\"n\">h₁</span><span class=\"o\">)]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">deriv</span> <span class=\"n\">id</span> <span class=\"n\">y</span><span class=\"o\">)</span>                            <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span><span class=\"o\">[(</span><span class=\"n\">deriv_const_mul</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">differentiable_id</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">)]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span>                                       <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">deriv_id</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>                                           <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_one</span><span class=\"o\">]))</span>\n</code></pre></div>",
        "id": 410572388,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1703969607
    },
    {
        "content": "<p>Could you please add the required imports for this code snippet (<a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>)?</p>",
        "id": 410572459,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1703969666
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 410572835,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1703970088
    },
    {
        "content": "<p>You're getting <code>unused variable 'w'</code> precisely because <code>w</code> is a variable name you're introducing in the scope of the term <code>λ w : ℝ =&gt; a</code>, but never use. That is, you can also write this as <code>λ _ : ℝ =&gt; a</code>.</p>",
        "id": 410572967,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1703970159
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245476\">Quinn Culver</span> has marked this topic as resolved.</p>",
        "id": 410573020,
        "sender_full_name": "Notification Bot",
        "timestamp": 1703970200
    }
]