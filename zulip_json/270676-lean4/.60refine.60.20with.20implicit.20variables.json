[
    {
        "content": "<p>I noticed some interesting behavior with <code>refine</code> (<a href=\"https://live.lean-lang.org/#code=theorem%20of_not_not%20%7B%CE%B1%20%3A%20Prop%7D%20(h%20%3A%20%C2%AC%C2%AC%CE%B1)%20%3A%20%CE%B1%20%3A%3D%20Classical.not_not.mp%20h%0A%0A%2F--%20info%3A%20Try%20this%3A%20refine%20of_not_not%20%3Fm.26%20-%2F%0A%23guard_msgs%20in%0Aexample%20%3A%20%E2%88%80%20n%20%3A%20Nat%2C%20n%20%3D%20n%20%3A%3D%20by%0A%20%20show_term%20refine%20of_not_not%20%3F_%0A%20%20rw%20%5BClassical.not_not%5D%3B%20intro%3B%20rfl%0A%0A--%20looks%20suspicious%3A%0A%2F--%20info%3A%20Try%20this%3A%20refine%20fun%20%7Bn%7D%20%3D%3E%20of_not_not%20%3Fm.56%20-%2F%0A%23guard_msgs%20in%0Aexample%20%3A%20%E2%88%80%20%7Bn%20%3A%20Nat%7D%2C%20n%20%3D%20n%20%3A%3D%20by%0A%20%20show_term%20refine%20of_not_not%20%3F_%0A%20%20rw%20%5BClassical.not_not%5D%0A%0A%2F--%20info%3A%20Try%20this%3A%20refine%20%40of_not_not%20(%E2%88%80%20%7Bn%20%3A%20Nat%7D%2C%20n%20%3D%20n)%20%3Fh%20-%2F%0A%23guard_msgs%20in%0Aexample%20%3A%20%E2%88%80%20%7Bn%20%3A%20Nat%7D%2C%20n%20%3D%20n%20%3A%3D%20by%0A%20%20show_term%20apply%20of_not_not%0A%20%20rw%20%5BClassical.not_not%5D%3B%20intro%3B%20rfl\">playground link</a>)</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">of_not_not</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Prop</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">¬¬</span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Classical</span><span class=\"bp\">.</span><span class=\"n\">not_not</span><span class=\"bp\">.</span><span class=\"n\">mp</span><span class=\"w\"> </span><span class=\"n\">h</span>\n\n<span class=\"sd\">/-- info: Try this: refine of_not_not ?m.26 -/</span>\n<span class=\"bp\">#</span><span class=\"n\">guard_msgs</span><span class=\"w\"> </span><span class=\"k\">in</span>\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">show_term</span><span class=\"w\"> </span><span class=\"n\">refine</span><span class=\"w\"> </span><span class=\"n\">of_not_not</span><span class=\"w\"> </span><span class=\"bp\">?_</span>\n<span class=\"w\">  </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Classical</span><span class=\"bp\">.</span><span class=\"n\">not_not</span><span class=\"o\">]</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">intro</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">rfl</span>\n\n<span class=\"c1\">-- looks suspicious:</span>\n<span class=\"sd\">/-- info: Try this: refine fun {n} =&gt; of_not_not ?m.56 -/</span>\n<span class=\"bp\">#</span><span class=\"n\">guard_msgs</span><span class=\"w\"> </span><span class=\"k\">in</span>\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">},</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">show_term</span><span class=\"w\"> </span><span class=\"n\">refine</span><span class=\"w\"> </span><span class=\"n\">of_not_not</span><span class=\"w\"> </span><span class=\"bp\">?_</span>\n<span class=\"w\">  </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Classical</span><span class=\"bp\">.</span><span class=\"n\">not_not</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- info: Try this: refine @of_not_not (∀ {n : Nat}, n = n) ?h -/</span>\n<span class=\"bp\">#</span><span class=\"n\">guard_msgs</span><span class=\"w\"> </span><span class=\"k\">in</span>\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">},</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">show_term</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">of_not_not</span>\n<span class=\"w\">  </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Classical</span><span class=\"bp\">.</span><span class=\"n\">not_not</span><span class=\"o\">]</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">intro</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">rfl</span>\n</code></pre></div>\n<p>Is the <code>refine</code> behavior correct/benign? It looks suspicious (and it did indeed cause an issue with a weird niche use-case we had), but I can't come up with a normal use case in which it would cause an issue.</p>",
        "id": 446193814,
        "sender_full_name": "llllvvuu",
        "timestamp": 1719012258
    },
    {
        "content": "<p><code>refine</code> is off the hook here, this is term-mode behavior:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">},</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">of_not_not</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">info: def foo : ∀ {n : Nat}, n = n :=</span>\n<span class=\"sd\">fun {n} =&gt; of_not_not (sorryAx ¬¬n = n)</span>\n<span class=\"sd\">-/</span>\n<span class=\"bp\">#</span><span class=\"n\">guard_msgs</span><span class=\"w\"> </span><span class=\"k\">in</span>\n<span class=\"bp\">#</span><span class=\"n\">print</span><span class=\"w\"> </span><span class=\"n\">foo</span>\n</code></pre></div>",
        "id": 446299491,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719077272
    },
    {
        "content": "<p>Using <code>refine (of_not_not ?_ : _)</code> instead of <code>refine of_not_not ?_</code> fixes this</p>",
        "id": 446299639,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719077363
    },
    {
        "content": "<p>Nice find! Question remains whether it is correct behavior or a bug</p>",
        "id": 446314104,
        "sender_full_name": "llllvvuu",
        "timestamp": 1719084619
    },
    {
        "content": "<p>Weirdly, <code>: _)</code> works here but not <code>:)</code></p>",
        "id": 446316884,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719086366
    },
    {
        "content": "<p>There's something called \"the implicit lambda feature\" in the elaborator. If the expected type is a function type, then implicit arguments get auto-intro'd.</p>",
        "id": 446325497,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1719090015
    },
    {
        "content": "<p>One of the ways to inhibit it is <code>refine @(of_not_not ?_)</code></p>",
        "id": 446325663,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1719090099
    },
    {
        "content": "<p>Do you know why <code>:)</code>  and <code>: _)</code> behave differently here? I always assumed the former was short for the latter.</p>",
        "id": 446327230,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719091216
    },
    {
        "content": "<p>In <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.Term.blockImplicitLambda#doc\">docs#Lean.Elab.Term.blockImplicitLambda</a> there's a check that it's not a type ascription (via <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.Term.isTypeAscription#doc\">docs#Lean.Elab.Term.isTypeAscription</a>). Maybe <code>Lean.Elab.Term.isTypeAscription</code> should match on <code>($_ :)</code> as well?</p>",
        "id": 446359899,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1719112367
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/4536\">lean4#4536</a></p>",
        "id": 446362564,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1719113700
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> That's how it was in Lean 3, but now in Lean 4 the <code>(x :)</code> notation ensures that <code>x</code> is elaborated without an expected type and I'm not sure that <code>(x : _)</code> does anything (except for, apparently, disabling the implicit lambda feature).</p>",
        "id": 446362815,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1719113787
    },
    {
        "content": "<p>I think <code>: _)</code> also has the effect of elaborating without an expected type</p>",
        "id": 446377438,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719123151
    },
    {
        "content": "<p>Yes and no. With <code>(x :)</code> there is absolutely no expected type, but with <code>(x : _)</code> there is a metavariable as an expected type for <code>x</code>. If <code>x</code> postpones for some reason, then in the latter case <code>x</code> can see the expected type for the whole type ascription.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Lean</span>\n\n<span class=\"kn\">syntax</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">printExpectedType</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"s2\">\"printExpectedType% \"</span><span class=\"w\"> </span><span class=\"n\">term</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">term</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">term_elab</span><span class=\"w\"> </span><span class=\"n\">printExpectedType</span><span class=\"kd\">]</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">elabPrintExpectedType</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Elab</span><span class=\"bp\">.</span><span class=\"n\">Term</span><span class=\"bp\">.</span><span class=\"n\">TermElab</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">stx</span><span class=\"w\"> </span><span class=\"n\">expectedType?</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">  </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">stx</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">printExpectedType</span><span class=\"bp\">%</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"n\">expectedType</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">expectedType?</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">      </span><span class=\"n\">logInfo</span><span class=\"w\"> </span><span class=\"n\">m!</span><span class=\"s2\">\"expected type is {← instantiateMVars &lt;| expectedType}\"</span>\n<span class=\"w\">    </span><span class=\"k\">else</span>\n<span class=\"w\">      </span><span class=\"n\">logInfo</span><span class=\"w\"> </span><span class=\"n\">m!</span><span class=\"s2\">\"there is no expected type\"</span>\n<span class=\"w\">    </span><span class=\"n\">Elab</span><span class=\"bp\">.</span><span class=\"n\">Term</span><span class=\"bp\">.</span><span class=\"n\">elabTerm</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"n\">expectedType?</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Elab</span><span class=\"bp\">.</span><span class=\"n\">throwUnsupportedSyntax</span>\n\n<span class=\"kn\">elab</span><span class=\"w\"> </span><span class=\"s2\">\"requireExpectedType% \"</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">term</span><span class=\"w\"> </span><span class=\"bp\">&lt;=</span><span class=\"w\"> </span><span class=\"n\">expectedType</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"n\">Elab</span><span class=\"bp\">.</span><span class=\"n\">Term</span><span class=\"bp\">.</span><span class=\"n\">elabTerm</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"n\">expectedType</span>\n\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">printExpectedType</span><span class=\"bp\">%</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Int</span><span class=\"o\">)</span>\n<span class=\"c1\">-- expected type is Int</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"n\">printExpectedType</span><span class=\"bp\">%</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Int</span><span class=\"o\">)</span>\n<span class=\"c1\">-- expected type is ?m.951</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"n\">printExpectedType</span><span class=\"bp\">%</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">:)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Int</span><span class=\"o\">)</span>\n<span class=\"c1\">-- there is no expected type</span>\n\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"n\">requireExpectedType</span><span class=\"bp\">%</span><span class=\"w\"> </span><span class=\"n\">printExpectedType</span><span class=\"bp\">%</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Int</span><span class=\"o\">)</span>\n<span class=\"c1\">-- expected type is Int</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"n\">requireExpectedType</span><span class=\"bp\">%</span><span class=\"w\"> </span><span class=\"n\">printExpectedType</span><span class=\"bp\">%</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">:)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Int</span><span class=\"o\">)</span>\n<span class=\"c1\">-- expected type is ?m.1464</span>\n<span class=\"c1\">-- (I'm not sure why this is a metavariable in this case.)</span>\n</code></pre></div>",
        "id": 446380886,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1719126072
    },
    {
        "content": "<p>Thanks for the detailed explanation!</p>",
        "id": 446435811,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719158721
    }
]