[
    {
        "content": "<p>I am trying to performed \"aimed substitutions\", where Lean reports the location of some syntax to be changed and some other script (in bash/python/...) actually performs the substitutions.</p>\n<p>The main stumbling point, though, is that I can easily get a line number that I can work with, but not a usable <em>column</em> number.  The underlying issue is that I do not know how to use the character count that Lean (and VSCode) uses with what <code>sed</code>/<code>awk</code>/python use.</p>\n<p>Does anyone know how to either get Lean to report something that can be used by another program or how to use what Lean natively reports elsewhere?</p>\n<p>Thanks!</p>",
        "id": 441175171,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716965076
    },
    {
        "content": "<p>For instance, the angle bracket <code>⟨</code> counts as 1 character for Lean, but more than 1 for everything else that I tried.</p>",
        "id": 441175440,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716965214
    },
    {
        "content": "<p>It should be one character in Python too</p>",
        "id": 441175790,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716965385
    },
    {
        "content": "<p>The keyword distinction here is unicode codepoint index vs utf-8-encoded byte offset</p>",
        "id": 441175985,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716965470
    },
    {
        "content": "<p>I think <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.FileMap#doc\">docs#Lean.FileMap</a> does what you want</p>",
        "id": 441176045,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716965488
    },
    {
        "content": "<p>I have tried with that, but I am not sure that every character is encoded in the same way.  I'll try to find an example, though probably this afternoon.</p>",
        "id": 441176143,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716965522
    },
    {
        "content": "<p>The filemap converts between a single number to a pair (line, column), right?</p>",
        "id": 441176232,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716965552
    },
    {
        "content": "<p>Or <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.FileMap.ofPosition#doc\">docs#Lean.FileMap.ofPosition</a> to go in the other direction</p>",
        "id": 441176291,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716965578
    },
    {
        "content": "<p>However, I think that it does not actually change the \"column\" count, it only tells you how far you are from a line break, with the same measure for individual characters.</p>",
        "id": 441176311,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716965590
    },
    {
        "content": "<p>Ok, I'll play a bit more with those, but I have not had success earlier.</p>",
        "id": 441176337,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716965612
    },
    {
        "content": "<p>The value returned by Lean.FileMap.ofPosition is a byte offset, so to use it in Python you will need to use <code>open(..., 'rb')</code></p>",
        "id": 441176451,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716965658
    },
    {
        "content": "<p>Ah, <code>'rb'</code> was not suggested by chatGPT!  I had <code>'r'</code>!</p>",
        "id": 441176599,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716965736
    },
    {
        "content": "<p>Thanks, I will try it and will report if I still have problems!</p>",
        "id": 441176630,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716965748
    },
    {
        "content": "<p>Why not do the replacement on the Lean side?</p>",
        "id": 441176865,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716965876
    },
    {
        "content": "<p>Because the reformatting makes it very hard to \"just add a <code>?</code> before this <code>_</code>.</p>",
        "id": 441176950,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716965910
    },
    {
        "content": "<p>It will add line breaks everywhere.</p>",
        "id": 441176967,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716965921
    },
    {
        "content": "<p>(Or, I do not know how to extract the source string for the syntax that Lean is parsing.)</p>",
        "id": 441177045,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716965962
    },
    {
        "content": "<p>You could read the source file by hand in the same way you are doing in Python</p>",
        "id": 441177105,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716965990
    },
    {
        "content": "<p>True, I like this better!</p>",
        "id": 441177243,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716966023
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/converting.20between.20.60Lean.2EPosition.60.20and.2E.2E.2E.20something.20else!/near/441176451\">said</a>:</p>\n<blockquote>\n<p>The value returned by Lean.FileMap.ofPosition is a byte offset, so to use it in Python you will need to use <code>open(..., 'rb')</code></p>\n</blockquote>\n<p>Is this the kind of \"position\" that is sent to LSP clients in diagnostics and so on?<br>\nIf so <code>column</code> is a count of UTF-16 code units (not bytes, not characters, not glyphs, not columns, not Unicode code points). Very awkward, but it is what the LSP spec originally required. You will need Unicode functions.</p>",
        "id": 441181402,
        "sender_full_name": "Richard Copley",
        "timestamp": 1716967644
    },
    {
        "content": "<p>No! <code>Lean.FileMap.ofPosition</code> is a <code>String.Pos</code>, which should be a UTF-8 offset (a byte, like you said, assuming the file is encoded in UTF-8 as it should be). The UTF-16 things are <code>Lean.Lsp.Position</code>.</p>",
        "id": 441183487,
        "sender_full_name": "Richard Copley",
        "timestamp": 1716968506
    },
    {
        "content": "<p>Thank you both, I had a quick look and it seems that Eric's suggestion of working directly in Lean works great!</p>\n<p>This way, I do not have to worry about conversions: I just work with what Lean gives.</p>",
        "id": 441218558,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1716981417
    },
    {
        "content": "<p>Mostly for my future reference, here is one of the main traps in which I fell -- over and over again:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Elab</span><span class=\"bp\">.</span><span class=\"n\">Command</span>\n\n<span class=\"n\">run_cmd</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"s2\">\"⟨⟩\"</span>\n<span class=\"w\">  </span><span class=\"n\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">shortTest</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"bp\">.</span><span class=\"n\">take</span><span class=\"w\"> </span><span class=\"n\">i</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">shortTest</span><span class=\"bp\">.</span><span class=\"n\">toList</span><span class=\"w\"> </span><span class=\"bp\">==</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">List</span><span class=\"bp\">.</span><span class=\"n\">range</span><span class=\"w\"> </span><span class=\"n\">shortTest</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">shortTest</span><span class=\"bp\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"bp\">⟨·⟩</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"n\">dbg_trace</span><span class=\"w\"> </span><span class=\"s2\">\"equal\"</span>\n<span class=\"w\">    </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"n\">dbg_trace</span><span class=\"w\"> </span><span class=\"s2\">\"different\"</span>\n</code></pre></div>",
        "id": 441306618,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717012823
    },
    {
        "content": "<p>Yes, to convert a nat to a codepoint position within <code>s</code> you probably want <code>(s.iter.nextn n).pos</code></p>",
        "id": 441328364,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717021074
    },
    {
        "content": "<p>Using <code>String.Pos.mk</code>, as you do above, is the wrong choice for sure</p>",
        "id": 441328431,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717021091
    },
    {
        "content": "<p>Thank you for the suggestion to use Lean directly: the script performed about 1000 surgical replacements and (possibly with one exception) wrote correct Lean code!</p>",
        "id": 441329209,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717021448
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/13357\">#13357</a> is the corresponding PR.</p>",
        "id": 441329247,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717021469
    }
]