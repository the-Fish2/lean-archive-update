[
    {
        "content": "<p>Consider this example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">as</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">Append.append</span> <span class=\"n\">as</span> <span class=\"o\">[]</span> <span class=\"bp\">=</span> <span class=\"n\">as</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">as</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List.rec</span>\n    <span class=\"n\">rfl</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">as</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ih</span><span class=\"o\">:</span> <span class=\"n\">Append.append</span> <span class=\"n\">as</span> <span class=\"o\">[]</span> <span class=\"bp\">=</span> <span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">of_eq_true</span> <span class=\"o\">(</span><span class=\"n\">Eq.trans</span> <span class=\"o\">(</span><span class=\"n\">congrArg</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">ih</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">eq_self</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">))))</span>\n    <span class=\"n\">as</span>\n</code></pre></div>\n<p>This typechecks just fine, but if I replace <code>List.rec</code> with <code>@List.rec</code>, suddenly it does not anymore:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">as</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">Append.append</span> <span class=\"n\">as</span> <span class=\"o\">[]</span> <span class=\"bp\">=</span> <span class=\"n\">as</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">as</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">@</span><span class=\"n\">List.rec</span>\n    <span class=\"n\">_</span>\n    <span class=\"n\">_</span>\n    <span class=\"n\">rfl</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">as</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ih</span><span class=\"o\">:</span> <span class=\"n\">Append.append</span> <span class=\"n\">as</span> <span class=\"o\">[]</span> <span class=\"bp\">=</span> <span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">of_eq_true</span> <span class=\"o\">(</span><span class=\"n\">Eq.trans</span> <span class=\"o\">(</span><span class=\"n\">congrArg</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">ih</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">eq_self</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">))))</span>\n    <span class=\"n\">as</span>\n</code></pre></div>\n<p>with the message being</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">Eq.trans</span> <span class=\"o\">(</span><span class=\"n\">congrArg</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">ih</span><span class=\"o\">)))</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">congrArg</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">ih</span><span class=\"o\">))</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">Append.append</span> <span class=\"n\">as</span> <span class=\"o\">[]</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"o\">([]</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">m.55151</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>Why does this happen? Is there a way to write the proof with <code>@List.rec</code>?</p>",
        "id": 432832269,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1712899766
    },
    {
        "content": "<p>I suspect that you will have to provide the <code>motive</code> (more) explicitly.</p>\n<p>I do not know the details, but I think that <code>@</code> affects the order in which lean tries to figure out stuff and <code>motive</code>s are <em>very</em> fragile.</p>",
        "id": 432835795,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712902448
    },
    {
        "content": "<p>I just checked and this seems to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">as</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">Append.append</span> <span class=\"n\">as</span> <span class=\"o\">[]</span> <span class=\"bp\">=</span> <span class=\"n\">as</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">as</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">@</span><span class=\"n\">List.rec</span>\n    <span class=\"n\">_</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">as</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Append.append</span> <span class=\"n\">as</span> <span class=\"o\">[]</span> <span class=\"bp\">=</span> <span class=\"n\">as</span><span class=\"o\">)</span>\n    <span class=\"n\">rfl</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">as</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ih</span><span class=\"o\">:</span> <span class=\"n\">Append.append</span> <span class=\"n\">as</span> <span class=\"o\">[]</span> <span class=\"bp\">=</span> <span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">of_eq_true</span> <span class=\"o\">(</span><span class=\"n\">Eq.trans</span> <span class=\"o\">(</span><span class=\"n\">congrArg</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">ih</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">eq_self</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">))))</span>\n    <span class=\"n\">as</span>\n</code></pre></div>",
        "id": 432837787,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712903581
    },
    {
        "content": "<p>In particular, <code>@</code> turns off the feature that solves for a motive.</p>",
        "id": 432842703,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1712906183
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"599027\">Leni Aniva</span> has marked this topic as resolved.</p>",
        "id": 432963882,
        "sender_full_name": "Notification Bot",
        "timestamp": 1712947854
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Difference.20between.20.60.40List.2Erec.60.20and.20.60List.2Erec.60/near/432842703\">said</a>:</p>\n<blockquote>\n<p>In particular, <code>@</code> turns off the feature that solves for a motive.</p>\n</blockquote>\n<p>What is that feature called in Lean's source code?</p>",
        "id": 432971960,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1712951443
    },
    {
        "content": "<p><code>elab_as_elim</code></p>",
        "id": 432977029,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1712953692
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/blob/ddbdfb954b9d7a043cfb625198ccac7a333a6b0e/src/Lean/Elab/App.lean#L942\">https://github.com/leanprover/lean4/blob/ddbdfb954b9d7a043cfb625198ccac7a333a6b0e/src/Lean/Elab/App.lean#L942</a></p>",
        "id": 432987478,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1712958780
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Difference.20between.20.60.40List.2Erec.60.20and.20.60List.2Erec.60/near/432987478\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover/lean4/blob/ddbdfb954b9d7a043cfb625198ccac7a333a6b0e/src/Lean/Elab/App.lean#L942\">https://github.com/leanprover/lean4/blob/ddbdfb954b9d7a043cfb625198ccac7a333a6b0e/src/Lean/Elab/App.lean#L942</a></p>\n</blockquote>\n<p>Is there a way to enforce this behaviour during a call to <code>elabTerm</code>?</p>",
        "id": 433433364,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1713237760
    },
    {
        "content": "<p>I'm not sure exactly what \"this\" is, but if you mean \"turning off elab-as-eliminator\", then the line right before the linked one shows a configuration option you could set, <code>heedElabAsElim</code>.</p>",
        "id": 433435866,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713239034
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Difference.20between.20.60.40List.2Erec.60.20and.20.60List.2Erec.60/near/433435866\">said</a>:</p>\n<blockquote>\n<p>I'm not sure exactly what \"this\" is, but if you mean \"turning off elab-as-eliminator\", then the line right before the linked one shows a configuration option you could set, <code>heedElabAsElim</code>.</p>\n</blockquote>\n<p>I mean is there a way to turn off the automatic deduction of the motive argument during <code>isDefEq</code>?</p>",
        "id": 433562629,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1713284843
    },
    {
        "content": "<p>Does <code>isDefEq</code> deduce motives? I don't see anything like that in <code>ExprDefEq.lean</code></p>",
        "id": 433563294,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713285050
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Difference.20between.20.60.40List.2Erec.60.20and.20.60List.2Erec.60/near/433563294\">said</a>:</p>\n<blockquote>\n<p>Does <code>isDefEq</code> deduce motives? I don't see anything like that in <code>ExprDefEq.lean</code></p>\n</blockquote>\n<p>When I tried to unify</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Nat.brecOn</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>with <code>n + 0 = n</code> with <code>isDefEq</code>, it filled in the motive argument to be <code>forall (t: Nat), n + 0 = t</code>, but the result type is <code>motive t</code> and it should not be able to deduce either the motive or the major.</p>",
        "id": 433563508,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1713285104
    }
]