[
    {
        "content": "<p>Suppose I have the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"n\">n₁</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n    <span class=\"k\">let</span> <span class=\"n\">n₂</span> <span class=\"o\">:=</span> <span class=\"n\">n₁</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n    <span class=\"n\">n₂</span>\n\n  <span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">f</span>\n    <span class=\"n\">simp</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">zeta</span> <span class=\"o\">:=</span> <span class=\"n\">False</span><span class=\"o\">})</span> <span class=\"n\">only</span>\n</code></pre></div>\n<p>The goal looks like this after the <code>unfold</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">▶</span> <span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"n\">s₀</span> <span class=\"n\">s₁</span> <span class=\"o\">:</span> <span class=\"n\">State</span>\n<span class=\"n\">fuel</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"k\">let</span> <span class=\"n\">n₁</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">n₂</span> <span class=\"o\">:=</span> <span class=\"n\">n₁</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">;</span>\n  <span class=\"n\">n₂</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"mi\">4</span>\n</code></pre></div>\n<p>How can I zeta-reduce just the first <code>let</code>?</p>",
        "id": 412816097,
        "sender_full_name": "Malcolm Langfield",
        "timestamp": 1705239934
    },
    {
        "content": "<p>I don't think there is any tactic that will do this, but you can write your own</p>",
        "id": 412817204,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705240832
    },
    {
        "content": "<p>Thanks for the answer, that sounds promising. Let me ask a different but related question: how can I write a tactic to do this?</p>\n<p>I have a beginner's familiarity with tactic writing and stuff in <code>MetaM</code>/<code>TacticM</code>, but it would super helpful to get pointed in the right direction of what goal manipulation functions to use.</p>",
        "id": 412817692,
        "sender_full_name": "Malcolm Langfield",
        "timestamp": 1705241253
    },
    {
        "content": "<p>Or if this info is in the metaprogramming book, where to look!</p>",
        "id": 412817795,
        "sender_full_name": "Malcolm Langfield",
        "timestamp": 1705241331
    },
    {
        "content": "<p>I think you can do this using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Core.transform#doc\">docs#Lean.Core.transform</a> to change the expression and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.MVarId.replaceTargetDefEq#doc\">docs#Lean.MVarId.replaceTargetDefEq</a> to apply the replacement to the target</p>",
        "id": 412817945,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705241431
    },
    {
        "content": "<p>Here is a tactic that unfolds a let binding using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Expr.replace#doc\">docs#Lean.Expr.replace</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"n\">Conv</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">let_unfold</span><span class=\"o\">)</span> <span class=\"s2\">\" let_unfold \"</span> <span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">conv</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">letUnfold</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span>\n  <span class=\"n\">e.replace</span> <span class=\"bp\">λ</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">e.isLet</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">e.letName</span><span class=\"bp\">!</span> <span class=\"bp\">=</span> <span class=\"n\">id</span> <span class=\"k\">then</span>\n      <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">e.letBody</span><span class=\"bp\">!.</span><span class=\"n\">instantiate1</span> <span class=\"n\">e.letValue</span><span class=\"bp\">!</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">none</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">tactic</span> <span class=\"n\">let_unfold</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">convLetUnfold</span> <span class=\"o\">:</span> <span class=\"n\">Tactic</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">conv</span><span class=\"bp\">|</span> <span class=\"n\">let_unfold</span> <span class=\"bp\">$</span><span class=\"n\">id</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getMainGoal</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">withContext</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">lhs</span> <span class=\"bp\">←</span> <span class=\"n\">getLhs</span>\n\n    <span class=\"n\">changeLhs</span> <span class=\"o\">(</span><span class=\"n\">letUnfold</span> <span class=\"n\">lhs</span> <span class=\"n\">id.getId</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Lean.Elab.throwUnsupportedSyntax</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\" let_unfold \"</span> <span class=\"n\">id</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">let_unfold</span> <span class=\"bp\">$</span><span class=\"n\">id</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">n₁</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"k\">let</span> <span class=\"n\">n₂</span> <span class=\"o\">:=</span> <span class=\"n\">n₁</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"n\">n₂</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">f</span>\n  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">lhs</span>\n    <span class=\"n\">let_unfold</span> <span class=\"n\">n₁</span>\n</code></pre></div>",
        "id": 412819397,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1705242738
    },
    {
        "content": "<p>Oh my gosh, wow! Thanks very much <span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span>.</p>",
        "id": 412821825,
        "sender_full_name": "Malcolm Langfield",
        "timestamp": 1705244523
    },
    {
        "content": "<p>This doesn't do exactly what you asked for, but maybe it's worth considering:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">n₁</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"k\">let</span> <span class=\"n\">n₂</span> <span class=\"o\">:=</span> <span class=\"n\">n₁</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"n\">n₂</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">f</span>\n  <span class=\"n\">lift_lets</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  ⊢ let n₁ := 2 + 1;</span>\n<span class=\"cm\">    let n₂ := n₁ + 1;</span>\n<span class=\"cm\">    n₂ = 4</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n₁</span>\n  <span class=\"n\">unfold_let</span> <span class=\"n\">n₁</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  ⊢ let n₂ := 2 + 1 + 1;</span>\n<span class=\"cm\">    n₂ = 4</span>\n<span class=\"cm\">  -/</span>\n</code></pre></div>",
        "id": 412827947,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705249803
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span> Is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Expr.replace#doc\">docs#Lean.Expr.replace</a> safe to use here? What if the let value contains bound variables? Experimentally it seems to work, so <code>instantiate1</code> must be updating bvars in the substituted expression, which I never realized it did.</p>",
        "id": 412829128,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705250816
    },
    {
        "content": "<p>Here's another for zeta reducing outermost lets in an expression.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">n₁</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"k\">let</span> <span class=\"n\">n₂</span> <span class=\"o\">:=</span> <span class=\"n\">n₁</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"n\">n₂</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"k\">in</span>\n<span class=\"sd\">/--</span>\n<span class=\"sd\">Zeta reduce the outermost `let` bindings in an expression.</span>\n<span class=\"sd\">-/</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"zeta1\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">liftMetaTactic1</span> <span class=\"k\">fun</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">ty</span> <span class=\"bp\">←</span> <span class=\"n\">g.getType</span>\n  <span class=\"k\">let</span> <span class=\"n\">ty'</span> <span class=\"bp\">←</span> <span class=\"n\">Core.transform</span> <span class=\"n\">ty</span>\n    <span class=\"o\">(</span><span class=\"n\">pre</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">if</span> <span class=\"n\">e.isLet</span> <span class=\"k\">then</span>\n        <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">done</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">e.letBody</span><span class=\"bp\">!.</span><span class=\"n\">instantiate1</span> <span class=\"n\">e.letValue</span><span class=\"bp\">!</span>\n      <span class=\"k\">else</span>\n        <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">continue</span><span class=\"o\">)</span>\n  <span class=\"n\">g.replaceTargetDefEq</span> <span class=\"n\">ty'</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">f</span>\n  <span class=\"n\">zeta1</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  ⊢ (let n₂ := 2 + 1 + 1; n₂) = 4</span>\n<span class=\"cm\">  -/</span>\n</code></pre></div>\n<p>(I used <code>Core.transform</code> rather than <code>Meta.transform</code> because apparently <code>instantiate1</code> handles bvars better than I thought it did.)</p>",
        "id": 412829224,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705250906
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/Simplifying.20only.20the.20first.20level.20of.20.60let.60.20bindings/near/412829128\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"346070\">Tomas Skrivan</span> Is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Expr.replace#doc\">docs#Lean.Expr.replace</a> safe to use here? What if the let value contains bound variables? Experimentally it seems to work, so <code>instantiate1</code> must be updating bvars in the substituted expression, which I never realized it did.</p>\n</blockquote>\n<p>I always get confused by bound variables. I think <code>instantiate1</code> has to update bvars in the body not the value, no? It should not do anything to bvars in the value.</p>",
        "id": 412829422,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1705251113
    },
    {
        "content": "<p>Consider</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">n₁</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"k\">let</span> <span class=\"n\">n₂</span> <span class=\"o\">:=</span> <span class=\"n\">n₁</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n₂</span>\n</code></pre></div>\n<p>and doing <code>let_unfold n₂</code>. The value for <code>n₂</code> is <code>bvar0 + 1</code>, and if you substituted that directly you'd get <code>let n₁ := n + 1; fun x =&gt; x + 1</code>, which is incorrect. Instead it seems to see that it's going into one level of bvar depth inside that <code>fun</code> and bumps up the bvar index to actually substitute in <code>bvar1 + 1</code> so that it refers to <code>n₁</code>.</p>",
        "id": 412829949,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705251470
    },
    {
        "content": "<p>Ohh I missed that!</p>",
        "id": 412830101,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1705251589
    },
    {
        "content": "<p>This appears to be one of the C++-implemented functions. <a href=\"https://github.com/leanprover/lean4/blob/master/src/kernel/instantiate.cpp#L29\">This line</a> calls <code>lift_loose_bvars</code>, which I haven't looked at yet, but I'd guess it's doing this bvar bumping.</p>",
        "id": 412830172,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705251612
    },
    {
        "content": "<p>This is good to know about <code>instantiate1</code>. I'll put it on my todo list to write a docstring for it!</p>",
        "id": 412830264,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705251720
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span> <a href=\"https://github.com/leanprover/lean4/pull/3183\">lean4#3183</a>. It'd be nice to get some feedback on the new docstrings. These functions are a little tricky to explain.)</p>",
        "id": 412845695,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705265550
    }
]