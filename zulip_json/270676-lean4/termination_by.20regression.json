[
    {
        "content": "<p>The following code fails to compile on latest Lean 4 with no imports:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Recursive</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">α</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∀</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"bp\">&lt;</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Recursive</span> <span class=\"n\">β</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">Recursive</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>The error is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">MathlibLatest.lean</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"mi\">25</span>\n<span class=\"n\">too</span> <span class=\"n\">many</span> <span class=\"kd\">variable</span> <span class=\"n\">names</span>\n\n<span class=\"n\">MathlibLatest.lean</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n<span class=\"n\">Too</span> <span class=\"n\">many</span> <span class=\"n\">extra</span> <span class=\"kd\">parameters</span> <span class=\"n\">bound</span><span class=\"bp\">;</span> <span class=\"n\">the</span> <span class=\"n\">function</span> <span class=\"kd\">definition</span> <span class=\"n\">only</span> <span class=\"n\">has</span> <span class=\"mi\">1</span> <span class=\"n\">extra</span> <span class=\"kd\">parameters</span><span class=\"bp\">.</span>\n</code></pre></div>\n<p>This code worked on previous versions.</p>",
        "id": 419713670,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1707066524
    },
    {
        "content": "<p>In fact, even this fails (with the same message):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Recursive</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">α</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Recursive</span> <span class=\"mi\">0</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">Recursive</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 419713827,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1707066652
    },
    {
        "content": "<p>(Of course, this example is supposed to fail, but this is failing for the wrong reason.)</p>",
        "id": 419713853,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1707066673
    },
    {
        "content": "<p>You shouldn't write the function name (<code>Recursive</code>) any more in <code>termination_by</code> clauses. See the Lean release notes. This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Recursive</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">α</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∀</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"bp\">&lt;</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Recursive</span> <span class=\"n\">β</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>(The error message is questionable though.)</p>",
        "id": 419714213,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1707066927
    },
    {
        "content": "<p>Ah, I see. Thanks for letting me know!</p>",
        "id": 419714301,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1707066984
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span>, what would you think of adding a special test to check if the first \"parameter\" is actually the definition name, and then print a more helpful error message?</p>",
        "id": 419742487,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1707089707
    },
    {
        "content": "<p>It's plausible. I didn't do it because I was unsure how often it will be useful, but it might well be worth it. It won't (easily) catch the common <code>termination_by _ =&gt;</code> case, though.</p>",
        "id": 419777486,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1707117934
    },
    {
        "content": "<p>I would suggest an error message like \"termination_by: &lt;x&gt; parameters bound, but &lt;fun&gt; only has &lt;y&gt; parameters\", with the squiggly line below the first extraneous parameter. Also, there is currently an additional message \"too many variable names\"; I guess that's an oversight.</p>",
        "id": 419786430,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1707121944
    },
    {
        "content": "<p>Oh, yeah, that's a bit silly to print it twice. Sloppy programming on my side (I think I assumed the longer error would prevent the shorter from even be reached). I'll have a look.</p>",
        "id": 419786929,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1707122140
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/3255\">https://github.com/leanprover/lean4/pull/3255</a> should improve matters. Thanks for the nudge.</p>",
        "id": 419802201,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1707127415
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> , what is the workflow to get something backported onto the v4.6 release branch? Just ping you after I merged this? Cherry-pick and push? Cherry-pick and open PR?</p>",
        "id": 419807165,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1707129197
    },
    {
        "content": "<p>Thank you! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 419810455,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1707130311
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> there is a <code>releases/v4.6.0</code> branch that you can cherry-pick onto. (Ping me so I know it is happening, but I don't think it requires a PR.)</p>",
        "id": 419827523,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1707135985
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> please consider yourself pinged; I just pushed.</p>",
        "id": 419848517,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1707142483
    }
]