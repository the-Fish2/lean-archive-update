[
    {
        "content": "<p>I'm trying to write an elaborator that takes takes some syntax which is a list, separated by <code>;</code>, of lists of strings, separated by <code>,</code>, but I'm having a hard time figuring out how to write the necessary quotation... Can someone point me in the right direction?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"foo%\"</span> <span class=\"o\">((</span><span class=\"n\">str</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"s2\">\";\"</span><span class=\"o\">)</span><span class=\"bp\">*</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span>\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"bp\">%</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">xs</span><span class=\"bp\">;</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- xs : TSyntax `str ???</span>\n  <span class=\"c1\">-- recursive step???</span>\n</code></pre></div>\n<p>In the exapmle above, the single case gives me a string literal for <code>xs</code>, where I would have expected an array of string literals. And I don't even know how to start writing the recursive step which considers more than one list of string literals.</p>",
        "id": 419098450,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1706724972
    },
    {
        "content": "<p>Maybe look at <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Matrix.matrixNotation#doc\">docs#Matrix.matrixNotation</a> for inspiration? It's a little more complicated than what you need, since it's handling the case of 0 x n and m x 0 matrices.</p>",
        "id": 419099322,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1706725304
    },
    {
        "content": "<p>Thanks Kyle! Yes I should have thought of that -- this is essentially exactly the same sort of parsing I'm trying to do</p>",
        "id": 419099659,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1706725416
    },
    {
        "content": "<p>Then again, here you go:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"foo%\"</span> <span class=\"n\">sepBy</span><span class=\"o\">((</span><span class=\"n\">str</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">),</span><span class=\"s2\">\";\"</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span>\n\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">xss</span><span class=\"o\">],</span><span class=\"bp\">*</span><span class=\"o\">]</span><span class=\"bp\">;*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- xss : Array (Array (TSyntax `str))</span>\n</code></pre></div>",
        "id": 419099710,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1706725442
    },
    {
        "content": "<p>(Untested beyond not seeing any errors!)</p>",
        "id": 419099794,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1706725467
    },
    {
        "content": "<p>Amazing! Thanks! I always seem to have a hard time remembering where to put the <code>[</code>,<code>]</code>  and <code>$</code> :)</p>",
        "id": 419099810,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1706725472
    },
    {
        "content": "<p>Adam, you're not alone...</p>",
        "id": 419104941,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1706727417
    },
    {
        "content": "<p>We really need some cheatsheet with very many examples of this sort!</p>",
        "id": 419105028,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1706727447
    },
    {
        "content": "<p>It somehow makes me think of Perl...</p>",
        "id": 419107129,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1706728223
    },
    {
        "content": "<p>Is that a good or bad thing?</p>",
        "id": 419107181,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1706728247
    },
    {
        "content": "<p>I think it's meant to make you think of racket.</p>",
        "id": 419163104,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1706756234
    },
    {
        "content": "<p>Rust, actually</p>",
        "id": 419187457,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1706772540
    }
]