[
    {
        "content": "<p>in this code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Init.Data.List</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Data.List</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Dedup</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Pairwise</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Join</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Infix</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Lattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Lemmas</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Bool.AllAny</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Bool.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Classical</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">And</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Or</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Not</span> <span class=\"o\">:</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span>\n<span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">normalizable</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">reducible</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">toProp</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pred</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">And</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span>  <span class=\"n\">toProp</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">toProp</span> <span class=\"n\">b</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Or</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">toProp</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">toProp</span> <span class=\"n\">b</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Not</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">toProp</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">toProp_not</span> <span class=\"o\">:</span> <span class=\"n\">toProp</span> <span class=\"o\">(</span><span class=\"n\">Not</span> <span class=\"n\">n₁</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"n\">toProp</span> <span class=\"n\">n₁</span> <span class=\"o\">:=</span> <span class=\"n\">Iff.rfl</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">toProp_and</span> <span class=\"o\">:</span> <span class=\"n\">toProp</span> <span class=\"o\">(</span><span class=\"n\">And</span> <span class=\"n\">n₁</span> <span class=\"n\">n₂</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">toProp</span> <span class=\"n\">n₁</span> <span class=\"bp\">∧</span> <span class=\"n\">toProp</span> <span class=\"n\">n₂</span> <span class=\"o\">:=</span> <span class=\"n\">Iff.rfl</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">toProp_or</span> <span class=\"o\">:</span> <span class=\"n\">toProp</span> <span class=\"o\">(</span><span class=\"n\">Or</span> <span class=\"n\">n₁</span> <span class=\"n\">n₂</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">toProp</span> <span class=\"n\">n₁</span> <span class=\"bp\">∨</span> <span class=\"n\">toProp</span> <span class=\"n\">n₂</span> <span class=\"o\">:=</span> <span class=\"n\">Iff.rfl</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">toProp_atom</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">toProp</span> <span class=\"o\">(</span><span class=\"n\">atom</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">pred</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">Iff.rfl</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">subnormalize</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Or</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[[</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">n</span><span class=\"o\">],[</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">n</span><span class=\"o\">],[</span><span class=\"n\">Not</span> <span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">Not</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">Not</span> <span class=\"n\">n</span><span class=\"o\">]]</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">List.append</span> <span class=\"o\">(</span><span class=\"n\">subnormalize</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">subnormalize</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"n\">And</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[[</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">n</span><span class=\"o\">],[</span><span class=\"n\">Not</span> <span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">Not</span> <span class=\"n\">n</span><span class=\"o\">],[</span><span class=\"n\">Not</span> <span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">Not</span> <span class=\"n\">n</span><span class=\"o\">]]</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">List.append</span> <span class=\"o\">(</span><span class=\"n\">subnormalize</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">subnormalize</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Not</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[[</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"n\">Not</span> <span class=\"n\">i</span><span class=\"o\">],[</span><span class=\"n\">Not</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">]]</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">subnormalize</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[[[</span><span class=\"n\">n</span><span class=\"o\">],[</span><span class=\"n\">Not</span> <span class=\"n\">n</span><span class=\"o\">]]]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">normalize</span> <span class=\"o\">:</span>  <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">o</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"o\">[[</span><span class=\"n\">o</span><span class=\"o\">]]</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">subnormalize</span> <span class=\"n\">o</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">nStrip</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Not</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">false</span><span class=\"o\">,</span><span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">true</span><span class=\"o\">,</span><span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">booleanize</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">))))</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n  <span class=\"n\">n.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">y.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">z</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nStrip</span> <span class=\"n\">z</span><span class=\"o\">)))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">normalizel</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n  <span class=\"n\">booleanize</span> <span class=\"o\">(</span><span class=\"n\">normalize</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">wToProp</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">w.fst</span> <span class=\"k\">then</span> <span class=\"n\">toProp</span> <span class=\"n\">w.snd</span> <span class=\"k\">else</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">toProp</span> <span class=\"n\">w.snd</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sToProp</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">s.all</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">wToProp</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">gToProp</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">g.any</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sToProp</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">nToProp</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">))))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">n.all</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">gToProp</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fToProp</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">))))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">n.all</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.any</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">y.all</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">z</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">toProp</span> <span class=\"n\">z</span><span class=\"o\">)))</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">nStrip_equiv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">,</span> <span class=\"n\">toProp</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;-&gt;</span> <span class=\"n\">wToProp</span> <span class=\"o\">(</span><span class=\"n\">nStrip</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">nStrip</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">wToProp</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">wToProp</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">wToProp</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">wToProp</span>\n  <span class=\"n\">simp</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">booleanize_eqiv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">))),</span> <span class=\"n\">fToProp</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;-&gt;</span> <span class=\"n\">nToProp</span> <span class=\"o\">(</span><span class=\"n\">booleanize</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">nToProp</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">fToProp</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">booleanize</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">gToProp</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">sToProp</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">nStrip_equiv</span><span class=\"o\">]</span>\n\n  <span class=\"kd\">theorem</span> <span class=\"n\">andGateTaut</span> <span class=\"o\">:</span>  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">Classical.em</span> <span class=\"n\">a</span>\n  <span class=\"n\">cases</span> <span class=\"n\">Classical.em</span> <span class=\"n\">b</span>\n  <span class=\"n\">left</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">right</span>\n  <span class=\"n\">right</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">push_neg</span>\n  <span class=\"n\">intro</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">right</span>\n  <span class=\"n\">left</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">and_comm</span><span class=\"o\">]</span>\n  <span class=\"n\">push_neg</span>\n  <span class=\"n\">intro</span>\n  <span class=\"n\">assumption</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">orGateTaut</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">∨</span> <span class=\"o\">((</span><span class=\"bp\">¬</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">Classical.em</span> <span class=\"n\">a</span>\n  <span class=\"n\">left</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">left</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">right</span>\n  <span class=\"n\">cases</span> <span class=\"n\">Classical.em</span> <span class=\"n\">b</span>\n  <span class=\"n\">left</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">right</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">right</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">push_neg</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">assumption</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">all_and</span> <span class=\"o\">:</span> <span class=\"n\">List.all</span> <span class=\"o\">(</span> <span class=\"n\">a</span> <span class=\"bp\">++</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;-&gt;</span> <span class=\"n\">List.all</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">List.all</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">intro</span> <span class=\"n\">ha</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">intro</span> <span class=\"n\">b</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hb</span>\n  <span class=\"n\">apply</span> <span class=\"n\">ha</span>\n  <span class=\"n\">left</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hb</span>\n  <span class=\"n\">intro</span> <span class=\"n\">c</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hc</span>\n  <span class=\"n\">apply</span> <span class=\"n\">ha</span>\n  <span class=\"n\">right</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hc</span>\n  <span class=\"n\">intro</span> <span class=\"n\">ha</span>\n  <span class=\"n\">intro</span> <span class=\"n\">b</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hb</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hb</span>\n  <span class=\"n\">apply</span> <span class=\"n\">ha.left</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">apply</span> <span class=\"n\">ha.right</span>\n  <span class=\"n\">assumption</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">subnormal</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">,</span> <span class=\"n\">fToProp</span> <span class=\"o\">(</span><span class=\"n\">subnormalize</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">k</span> <span class=\"n\">l</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">subnormalize</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">fToProp</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">toProp</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Classical.em</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">subnormalize</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">fToProp</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.all_cons</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">List.any_cons</span><span class=\"o\">,</span> <span class=\"n\">List.all_cons</span><span class=\"o\">,</span> <span class=\"n\">List.all_nil</span><span class=\"o\">,</span> <span class=\"n\">Bool.and_true</span><span class=\"o\">,</span> <span class=\"n\">List.any_nil</span><span class=\"o\">,</span>\n    <span class=\"n\">Bool.or_false</span><span class=\"o\">,</span> <span class=\"n\">Bool.and_eq_true</span><span class=\"o\">,</span> <span class=\"n\">Bool.or_eq_true</span><span class=\"o\">,</span> <span class=\"n\">decide_eq_true_eq</span><span class=\"o\">,</span>\n    <span class=\"n\">List.mem_append</span><span class=\"o\">,</span> <span class=\"n\">List.any_eq_true</span><span class=\"o\">,</span><span class=\"n\">toProp_not</span><span class=\"o\">,</span><span class=\"n\">toProp_and</span><span class=\"o\">]</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">toProp_not</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">toProp_and</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">andGateTaut</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">all_and</span><span class=\"o\">]</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">fToProp</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">subnormalize</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.all_cons</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">List.any_cons</span><span class=\"o\">,</span> <span class=\"n\">List.all_cons</span><span class=\"o\">,</span> <span class=\"n\">toProp_or</span><span class=\"o\">,</span> <span class=\"n\">List.all_nil</span><span class=\"o\">,</span> <span class=\"n\">Bool.and_true</span><span class=\"o\">,</span> <span class=\"n\">toProp_not</span><span class=\"o\">,</span>\n    <span class=\"n\">List.any_nil</span><span class=\"o\">,</span> <span class=\"n\">Bool.or_false</span><span class=\"o\">,</span> <span class=\"n\">List.append_eq</span><span class=\"o\">,</span> <span class=\"n\">Bool.and_eq_true</span><span class=\"o\">,</span> <span class=\"n\">Bool.or_eq_true</span><span class=\"o\">,</span>\n    <span class=\"n\">decide_eq_true_eq</span><span class=\"o\">,</span> <span class=\"n\">List.mem_append</span><span class=\"o\">,</span> <span class=\"n\">List.any_eq_true</span><span class=\"o\">]</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">toProp_not</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">toProp_or</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">orGateTaut</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">all_and</span><span class=\"o\">]</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">fToProp</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">subnormalize</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.all_cons</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">List.any_cons</span><span class=\"o\">,</span> <span class=\"n\">List.all_cons</span><span class=\"o\">,</span> <span class=\"n\">toProp_not</span><span class=\"o\">,</span> <span class=\"n\">List.all_nil</span><span class=\"o\">,</span> <span class=\"n\">Bool.and_true</span><span class=\"o\">,</span> <span class=\"n\">Bool.and_self</span><span class=\"o\">,</span>\n    <span class=\"n\">not_not</span><span class=\"o\">,</span> <span class=\"n\">List.any_nil</span><span class=\"o\">,</span> <span class=\"n\">Bool.or_false</span><span class=\"o\">,</span> <span class=\"n\">Bool.and_eq_true</span><span class=\"o\">,</span> <span class=\"n\">Bool.or_eq_true</span><span class=\"o\">,</span> <span class=\"n\">decide_eq_true_eq</span><span class=\"o\">,</span>\n     <span class=\"n\">List.any_eq_true</span><span class=\"o\">]</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">cases</span> <span class=\"n\">Classical.em</span> <span class=\"o\">(</span><span class=\"n\">toProp</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n  <span class=\"n\">right</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">left</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">fToProp</span> <span class=\"n\">at</span> <span class=\"n\">l</span>\n  <span class=\"n\">exact</span> <span class=\"n\">l</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">normal</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">,</span> <span class=\"n\">toProp</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;-&gt;</span> <span class=\"n\">nToProp</span> <span class=\"o\">(</span><span class=\"n\">normalizel</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">normalizel</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">normalize</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">booleanize_eqiv</span><span class=\"o\">]</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">fToProp</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">List.all_cons</span><span class=\"o\">,</span> <span class=\"n\">List.any_cons</span><span class=\"o\">,</span> <span class=\"n\">List.all_nil</span><span class=\"o\">,</span> <span class=\"n\">Bool.and_true</span><span class=\"o\">,</span> <span class=\"n\">List.any_nil</span><span class=\"o\">,</span> <span class=\"n\">Bool.or_false</span><span class=\"o\">,</span>\n    <span class=\"n\">Bool.and_eq_true</span><span class=\"o\">,</span> <span class=\"n\">decide_eq_true_eq</span><span class=\"o\">,</span> <span class=\"n\">List.any_eq_true</span><span class=\"o\">,</span> <span class=\"n\">iff_self_and</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span>\n  <span class=\"n\">apply</span> <span class=\"n\">subnormal</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">coherent</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">))))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)),</span> <span class=\"n\">g</span> <span class=\"bp\">∈</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">),</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">g</span> <span class=\"bp\">-&gt;</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">,</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">-&gt;</span>\n  <span class=\"n\">w.snd</span> <span class=\"bp\">==</span> <span class=\"n\">x.snd</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">w.fst</span> <span class=\"bp\">==</span> <span class=\"n\">x.fst</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">s.Nodup</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">makeCoherent</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">))))</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n  <span class=\"n\">n.map</span>\n  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">x.filter</span>\n  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">y.Pairwise</span>\n  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a.snd</span> <span class=\"bp\">==</span> <span class=\"n\">b.snd</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">a.fst</span> <span class=\"bp\">==</span> <span class=\"n\">b.fst</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">map</span>\n  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">y.dedup</span><span class=\"o\">))</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">coherency</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">))),</span> <span class=\"n\">coherent</span> <span class=\"o\">(</span><span class=\"n\">makeCoherent</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span> <span class=\"n\">g</span> <span class=\"n\">hg</span> <span class=\"n\">s</span> <span class=\"n\">hs</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">makeCoherent</span> <span class=\"n\">at</span> <span class=\"n\">hg</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha_in_n</span><span class=\"o\">,</span> <span class=\"n\">ha_transformed_to_g</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">List.mem_map.mp</span> <span class=\"n\">hg</span>\n  <span class=\"n\">subst</span> <span class=\"n\">ha_transformed_to_g</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">intros</span> <span class=\"n\">w</span> <span class=\"n\">x</span> <span class=\"n\">hw</span> <span class=\"n\">heq</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.mem_map</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hs</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb_in_filtered_a</span><span class=\"o\">,</span> <span class=\"n\">hb_eq_s</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hs</span>\n  <span class=\"n\">subst</span> <span class=\"n\">hb_eq_s</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.mem_filter</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hb_in_filtered_a</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">hb_in_a</span><span class=\"o\">,</span> <span class=\"n\">hb_pw</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hb_in_filtered_a</span>\n  <span class=\"k\">have</span> <span class=\"n\">hb_pairwise</span> <span class=\"o\">:</span> <span class=\"n\">b.Pairwise</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">c.snd</span> <span class=\"bp\">=</span> <span class=\"n\">d.snd</span> <span class=\"bp\">→</span> <span class=\"n\">c.fst</span> <span class=\"bp\">=</span> <span class=\"n\">d.fst</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">decide_eq_true_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hb_pw</span>\n\n    <span class=\"n\">exact</span> <span class=\"n\">hb_pw</span>\n  <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 424085834,
        "sender_full_name": "Jared green",
        "timestamp": 1709232538
    },
    {
        "content": "<p>you can just use <code>simpa</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">hb_pairwise</span> <span class=\"o\">:</span> <span class=\"n\">b.Pairwise</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">c.snd</span> <span class=\"bp\">=</span> <span class=\"n\">d.snd</span> <span class=\"bp\">→</span> <span class=\"n\">c.fst</span> <span class=\"bp\">=</span> <span class=\"n\">d.fst</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">hb_pw</span>\n</code></pre></div>",
        "id": 424105250,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1709239677
    },
    {
        "content": "<p>similar problem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">coherency</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">))),</span> <span class=\"n\">coherent</span> <span class=\"o\">(</span><span class=\"n\">makeCoherent</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span> <span class=\"n\">g</span> <span class=\"n\">hg</span> <span class=\"n\">s</span> <span class=\"n\">hs</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">makeCoherent</span> <span class=\"n\">at</span> <span class=\"n\">hg</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha_in_n</span><span class=\"o\">,</span> <span class=\"n\">ha_transformed_to_g</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">List.mem_map.mp</span> <span class=\"n\">hg</span>\n  <span class=\"n\">subst</span> <span class=\"n\">ha_transformed_to_g</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">intros</span> <span class=\"n\">w</span> <span class=\"n\">x</span> <span class=\"n\">hw</span> <span class=\"n\">heqw</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.mem_map</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hs</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb_in_filtered_a</span><span class=\"o\">,</span> <span class=\"n\">hb_eq_s</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hs</span>\n  <span class=\"n\">subst</span> <span class=\"n\">hb_eq_s</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.mem_filter</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hb_in_filtered_a</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">hb_in_a</span><span class=\"o\">,</span> <span class=\"n\">hb_pw</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hb_in_filtered_a</span>\n  <span class=\"k\">have</span> <span class=\"n\">hb_pairwise</span> <span class=\"o\">:</span> <span class=\"n\">b.Pairwise</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">c.snd</span> <span class=\"bp\">=</span> <span class=\"n\">d.snd</span> <span class=\"bp\">→</span> <span class=\"n\">c.fst</span> <span class=\"bp\">=</span> <span class=\"n\">d.fst</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">hb_pw</span>\n  <span class=\"k\">have</span> <span class=\"n\">snd_eq</span> <span class=\"o\">:</span> <span class=\"n\">w.snd</span> <span class=\"bp\">=</span> <span class=\"n\">x.snd</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n\n  <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 424112521,
        "sender_full_name": "Jared green",
        "timestamp": 1709242486
    },
    {
        "content": "<p>(nevermind)</p>",
        "id": 424112656,
        "sender_full_name": "Jared green",
        "timestamp": 1709242556
    },
    {
        "content": "<p>Next time can you please post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>. You'll get a faster answer if you clean up your code first.</p>",
        "id": 424462353,
        "sender_full_name": "Chris Wong",
        "timestamp": 1709430174
    }
]