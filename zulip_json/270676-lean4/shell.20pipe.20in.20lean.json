[
    {
        "content": "<p>Following up from the <a href=\"#narrow/stream/270676-lean4/topic/.60git.20ls-files.60.20in.20Lean\">thread about running a shell command in lean</a>, I would like now to \"pipe\" a command into another one.</p>\n<p>For example, how can I perform</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"nb\">echo</span><span class=\"w\"> </span><span class=\"s2\">\"#eval 0\"</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>lake<span class=\"w\"> </span>env<span class=\"w\"> </span>lean<span class=\"w\"> </span>--stdin\n</code></pre></div>\n<p>in lean?</p>",
        "id": 442453679,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717483795
    },
    {
        "content": "<p>Here the thing you want to know about is called \"process substitution\". In general pipes are overused interactively.</p>",
        "id": 442453879,
        "sender_full_name": "Julian Berman",
        "timestamp": 1717483864
    },
    {
        "content": "<p>Specifically... <code>lake env lean &lt;(echo '#eval 0')</code> -- that's zsh syntax, but I think bash has copied it by now.</p>",
        "id": 442453914,
        "sender_full_name": "Julian Berman",
        "timestamp": 1717483883
    },
    {
        "content": "<p>Oh, so I can use <code>&lt;(...)</code> as one of the arguments?</p>",
        "id": 442453958,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717483912
    },
    {
        "content": "<p>Ah sorry, the whole point of the question is <em>in lean</em> I guess? So what I told you is nonsense.</p>",
        "id": 442454045,
        "sender_full_name": "Julian Berman",
        "timestamp": 1717483934
    },
    {
        "content": "<p>Oh, yes, basically, I want to avoid having to store the output of some command in a file to then have lean parse that file.  Hence the question.</p>",
        "id": 442454139,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717483976
    },
    {
        "content": "<p>No that too is shell syntax for creating a FIFO</p>",
        "id": 442454154,
        "sender_full_name": "Julian Berman",
        "timestamp": 1717483984
    },
    {
        "content": "<p>(And all this within a Lean script.)</p>",
        "id": 442454165,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717483988
    },
    {
        "content": "<p>I'm not sure whether core Lean exposes what's needed for doing that yourself, let's see...</p>",
        "id": 442454184,
        "sender_full_name": "Julian Berman",
        "timestamp": 1717483996
    },
    {
        "content": "<p>I suspect that <code>Child</code> is relevant, but I was not able to work my head around it.</p>",
        "id": 442454220,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717484018
    },
    {
        "content": "<p>(The functionality is of course part of libc, so it's a question of whether it's being exported to you)</p>",
        "id": 442454234,
        "sender_full_name": "Julian Berman",
        "timestamp": 1717484024
    },
    {
        "content": "<p>(Near <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IO.Process#doc\">docs#IO.Process</a>, I think.)</p>",
        "id": 442454249,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717484031
    },
    {
        "content": "<p>However, it uses <code>handles</code> and I have not really understood what they are.</p>",
        "id": 442454382,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717484071
    },
    {
        "content": "<p>Yeah you're in the right place (and I've done nothing but tell you irrelevant things). I'm not sure I'll be any more help considering I don't this API either, but let's see, looking.</p>",
        "id": 442454489,
        "sender_full_name": "Julian Berman",
        "timestamp": 1717484135
    },
    {
        "content": "<p>Great, thanks!  If you can give me any insight, I would be very happy!  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 442454590,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717484167
    },
    {
        "content": "<p>If I follow scanning this right, the steps should be you need to set <code>stdin</code> (from <code>StdioConfig</code>, which <code>SpawnArgs</code> extends) to <code>Stdio.piped</code></p>",
        "id": 442455401,
        "sender_full_name": "Julian Berman",
        "timestamp": 1717484485
    },
    {
        "content": "<p>And then you need to write to that pipe</p>",
        "id": 442455413,
        "sender_full_name": "Julian Berman",
        "timestamp": 1717484491
    },
    {
        "content": "<p>Then <code>Child</code> may indeed be relevant because Lean will probably wait for you to close that pipe before it exits.</p>",
        "id": 442455546,
        "sender_full_name": "Julian Berman",
        "timestamp": 1717484547
    },
    {
        "content": "<p>Let's see if I can do a proper example...</p>",
        "id": 442455580,
        "sender_full_name": "Julian Berman",
        "timestamp": 1717484558
    },
    {
        "content": "<p>Wow, thanks!  Even this has already clarified some of my ideas!</p>",
        "id": 442455666,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717484588
    },
    {
        "content": "<p>If you can literally do the example above, I think that I can probably take it from there: my actual command is piping a single shell command into <code>lake env lean --stdin</code>.</p>",
        "id": 442455803,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717484651
    },
    {
        "content": "<p>(An even higher level API would look like <a href=\"https://docs.python.org/3/library/subprocess.html#subprocess.run\">https://docs.python.org/3/library/subprocess.html#subprocess.run</a> and let you pass directly some file-like thing while spawning your subprocess, but I don't see such functionality yet)</p>",
        "id": 442455805,
        "sender_full_name": "Julian Berman",
        "timestamp": 1717484652
    },
    {
        "content": "<p>Ah yes if you have a shell command it may even be easier -- then you don't do the write, you want to pass the stdout directly from your previous process as the stdin of the child process</p>",
        "id": 442455909,
        "sender_full_name": "Julian Berman",
        "timestamp": 1717484698
    },
    {
        "content": "<p>At the same time, I am trying to get <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.runFrontend#doc\">docs#Lean.Elab.runFrontend</a> to work -- maybe this allows me to bypass the shell entirely.</p>",
        "id": 442458197,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717485501
    },
    {
        "content": "<p>(I don't have something working which is why I haven't responded yet :) -- the obvious first attempt was</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">pipeLeft</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">IO</span><span class=\"bp\">.</span><span class=\"n\">Process</span><span class=\"bp\">.</span><span class=\"n\">SpawnArgs</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">cmd</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"s2\">\"echo\"</span>\n<span class=\"w\">  </span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"Hello world!\"</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"n\">stdout</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">IO</span><span class=\"bp\">.</span><span class=\"n\">Process</span><span class=\"bp\">.</span><span class=\"n\">Stdio</span><span class=\"bp\">.</span><span class=\"n\">piped</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">cmd</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">IO</span><span class=\"bp\">.</span><span class=\"n\">Process</span><span class=\"bp\">.</span><span class=\"n\">SpawnArgs</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">cmd</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"s2\">\"tac\"</span>\n\n<span class=\"bp\">#</span><span class=\"n\">eval</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">child</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">IO</span><span class=\"bp\">.</span><span class=\"n\">Process</span><span class=\"bp\">.</span><span class=\"n\">spawn</span><span class=\"w\"> </span><span class=\"n\">pipeLeft</span>\n<span class=\"w\">  </span><span class=\"n\">IO</span><span class=\"bp\">.</span><span class=\"n\">println</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">IO</span><span class=\"bp\">.</span><span class=\"n\">Process</span><span class=\"bp\">.</span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">cmd</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"n\">stdin</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">child</span><span class=\"bp\">.</span><span class=\"n\">stdout</span><span class=\"w\"> </span><span class=\"o\">}</span>\n</code></pre></div>\n<p>but that doesn't work, it looks like it's our job to actually connect the pipe. Not sure how yet.</p>",
        "id": 442458267,
        "sender_full_name": "Julian Berman",
        "timestamp": 1717485521
    },
    {
        "content": "<p>Julian, thank you!  I'll play some more with converting <code>child</code> to <code>IO.Process.Stdio</code> and also with using <code>runFrontEnd</code> directly: I hope that one of the two will work!</p>",
        "id": 442459736,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717486014
    },
    {
        "content": "<p>Getting there, now by cheating and looking at <a href=\"https://github.com/leanprover/lean4/blob/9d4696123693b2f0deee658b8021236e5168b4de/tests/lean/Process.lean#L27\">https://github.com/leanprover/lean4/blob/9d4696123693b2f0deee658b8021236e5168b4de/tests/lean/Process.lean#L27</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">eval</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">child</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">IO</span><span class=\"bp\">.</span><span class=\"n\">Process</span><span class=\"bp\">.</span><span class=\"n\">spawn</span><span class=\"w\"> </span><span class=\"o\">{</span>\n<span class=\"w\">    </span><span class=\"n\">cmd</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"s2\">\"echo\"</span><span class=\"o\">,</span>\n<span class=\"w\">    </span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"#check 37\"</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"n\">stdout</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">IO</span><span class=\"bp\">.</span><span class=\"n\">Process</span><span class=\"bp\">.</span><span class=\"n\">Stdio</span><span class=\"bp\">.</span><span class=\"n\">piped</span>\n<span class=\"w\">  </span><span class=\"o\">}</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">stdout</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">child</span><span class=\"bp\">.</span><span class=\"n\">stdout</span><span class=\"bp\">.</span><span class=\"n\">readToEnd</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">lean</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">IO</span><span class=\"bp\">.</span><span class=\"n\">Process</span><span class=\"bp\">.</span><span class=\"n\">spawn</span><span class=\"w\"> </span><span class=\"o\">{</span>\n<span class=\"w\">    </span><span class=\"n\">cmd</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"s2\">\"lake\"</span><span class=\"o\">,</span>\n<span class=\"w\">    </span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"env\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"s2\">\"lean\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"s2\">\"--stdin\"</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"n\">stdin</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">IO</span><span class=\"bp\">.</span><span class=\"n\">Process</span><span class=\"bp\">.</span><span class=\"n\">Stdio</span><span class=\"bp\">.</span><span class=\"n\">piped</span>\n<span class=\"w\">  </span><span class=\"o\">}</span>\n<span class=\"w\">  </span><span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">stdin</span><span class=\"bp\">.</span><span class=\"n\">putStr</span><span class=\"w\"> </span><span class=\"n\">stdout</span>\n<span class=\"w\">  </span><span class=\"n\">child</span><span class=\"bp\">.</span><span class=\"n\">wait</span><span class=\"w\"> </span><span class=\"bp\">&lt;|&gt;</span><span class=\"w\"> </span><span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">wait</span>\n</code></pre></div>\n<p>The above is wrong for multiple reasons (it buffers the data in memory), but yeah sharing brain dumps in case anything helps you.</p>",
        "id": 442460582,
        "sender_full_name": "Julian Berman",
        "timestamp": 1717486298
    },
    {
        "content": "<p>(n.b. I think buffering in memory seems required, which probably I knew at one point and have forgotten -- the higher level Python API just looks like it does that buffering optimally by not doing <em>everything</em> and incrementally writing to the pipe, so maybe the above is not totally far off)</p>",
        "id": 442460856,
        "sender_full_name": "Julian Berman",
        "timestamp": 1717486381
    },
    {
        "content": "<p>Thank you very much!  I will have to play a bit with this to understand what it is doing.</p>\n<p>It also seems to interact poorly with VSCode, in that it appears to freeze.</p>\n<p>Anyway, this is very helpful and I am getting a better feel for how to deal with <code>stdin</code> and <code>stdout</code>.</p>",
        "id": 442463765,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717487277
    },
    {
        "content": "<p>Yeah I noticed that (it freezes neovim too of course). \"Run everything I type\" is a really poor way to develop this kind of thing, I would be super afraid to develop anything that even touches IO.process or the FS package -- if/(hopefully when?) I write real programs in Lean I probably will do them with the LSP entirely off, unless someone who knows things tells us what the way to do this is. Live typing info is nice but \"I accidentally blew away my computer which was running everything as I type\" seems like a risk not worth taking.</p>",
        "id": 442464515,
        "sender_full_name": "Julian Berman",
        "timestamp": 1717487482
    },
    {
        "content": "<p>Yes, I find myself constantly writing the commands in a <code>def myCommand</code> and then just below commenting and uncommenting <code>#eval myCommand</code>.</p>",
        "id": 442465219,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717487691
    },
    {
        "content": "<p>I am especially nervous when I use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IO.FS.writeFile#doc\">docs#IO.FS.writeFile</a>.</p>",
        "id": 442465345,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717487740
    },
    {
        "content": "<p>My recollection is there's some old issue by Gabriel somewhere that talks about this.</p>",
        "id": 442465536,
        "sender_full_name": "Julian Berman",
        "timestamp": 1717487790
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean3/issues/1781\">https://github.com/leanprover/lean3/issues/1781</a> I guess though I thought there was a longer one somewhere.</p>",
        "id": 442465691,
        "sender_full_name": "Julian Berman",
        "timestamp": 1717487848
    },
    {
        "content": "<p>Anyway, if I can actually bypass the shell entirely and use directly the <code>runFrontEnd</code> I would be happier!</p>",
        "id": 442465742,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717487864
    },
    {
        "content": "<p>FWIW pendantically for terminology, there is (should be) no shell involved here unless Lean is secretly invoking one which I would strongly doubt, especially given the function is called <code>spawn</code>. This is \"spawning external processes\". But your sentiment is still understood/I agree that that sounds even nicer if it can be used.</p>",
        "id": 442466102,
        "sender_full_name": "Julian Berman",
        "timestamp": 1717487972
    },
    {
        "content": "<p>Oh, I did not know about the issue, but it seems that the outcome is \"live with it\"!  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 442466128,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717487981
    },
    {
        "content": "<p>If it is not a shell, then who is executing the \"shell-like\" commands?</p>",
        "id": 442466324,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717488026
    },
    {
        "content": "<p>Your operating system has some primitive that says \"start a process\". A shell is one kind of program that calls that API to start processes. But you can call it directly (and that's what you're doing here).</p>",
        "id": 442466536,
        "sender_full_name": "Julian Berman",
        "timestamp": 1717488099
    },
    {
        "content": "<p>In fact there are a few such APIs -- on *nix operating systems the modern one is called <code>man 2 posix_spawn</code> -- and the older one is a combination of <code>man 2 fork</code> (which is an API that means \"copy the current process\") and <code>man 2 exec</code> (which is an API that means \"replace the current process entirely with some other one\", the combination of the two mean you can spawn new subprocesses)</p>",
        "id": 442466843,
        "sender_full_name": "Julian Berman",
        "timestamp": 1717488190
    },
    {
        "content": "<p>So, these commands are just instructing the computer to do the same operations that running them in a shell would?  (I am probably exposing some deep ignorance here, so feel free to say that this is nonsense!)</p>",
        "id": 442467160,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717488280
    },
    {
        "content": "<p>No that's exactly right, your shell broadly does a 2 step process -- \"parse the string you typed\" and then \"use the parsed thing to spawn some process\".</p>",
        "id": 442467259,
        "sender_full_name": "Julian Berman",
        "timestamp": 1717488315
    },
    {
        "content": "<p>The language your shell uses (parses) to do the first part is nuts.</p>",
        "id": 442467308,
        "sender_full_name": "Julian Berman",
        "timestamp": 1717488329
    },
    {
        "content": "<p>So generally whenever one can avoid it (subjective opinion of course) it's right to avoid it.</p>",
        "id": 442467353,
        "sender_full_name": "Julian Berman",
        "timestamp": 1717488342
    },
    {
        "content": "<p>Ok, thanks!  What is that lower language?</p>",
        "id": 442467424,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717488363
    },
    {
        "content": "<p>That's the language that adds things like <code>~</code> means \"my home directory\", <code>&lt;(...)</code> means process substitution, <code>|</code> means \"create a pipe and pipe\", etc.</p>",
        "id": 442467435,
        "sender_full_name": "Julian Berman",
        "timestamp": 1717488364
    },
    {
        "content": "<p>Or even more basic things like <code>echo hello</code> means 2 arguments</p>",
        "id": 442467492,
        "sender_full_name": "Julian Berman",
        "timestamp": 1717488385
    },
    {
        "content": "<p>Which is why in your case you instead have a Lean array, the shell is what normally does the splitting.</p>",
        "id": 442467562,
        "sender_full_name": "Julian Berman",
        "timestamp": 1717488408
    },
    {
        "content": "<p>That clears up so much!  So the various steps of word splitting, globbing, variable expansions, these have to be done \"manually\" when using IO.Process, right?  (It was not really clear to me what was allowed and what was not allowed).</p>",
        "id": 442467766,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717488478
    },
    {
        "content": "<p>Exactly right.</p>",
        "id": 442467896,
        "sender_full_name": "Julian Berman",
        "timestamp": 1717488511
    },
    {
        "content": "<p>Ok, that explains now why I need an array of arguments and not just a single string!  <span aria-label=\"man facepalming\" class=\"emoji emoji-1f926-200d-2642\" role=\"img\" title=\"man facepalming\">:man_facepalming:</span></p>",
        "id": 442468016,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717488545
    },
    {
        "content": "<p>And hence, what you wrote above is how to \"parse\" a pipe and convert it into more basic operations.</p>",
        "id": 442468179,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717488597
    },
    {
        "content": "<p>Yep, sounds like you've got it.</p>",
        "id": 442468423,
        "sender_full_name": "Julian Berman",
        "timestamp": 1717488657
    },
    {
        "content": "<p>I realize that this is not genuinely a solution, but you could then also do <code>cmd = \"eval\" , args = \"just one string\"</code>?</p>",
        "id": 442468508,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717488686
    },
    {
        "content": "<p>What is <code>eval</code> there?</p>",
        "id": 442468570,
        "sender_full_name": "Julian Berman",
        "timestamp": 1717488708
    },
    {
        "content": "<p>You're asking \"can I get a shell to do all my work\" I suspect, right?</p>",
        "id": 442468600,
        "sender_full_name": "Julian Berman",
        "timestamp": 1717488717
    },
    {
        "content": "<p>Oh, the shell <code>eval</code>?</p>",
        "id": 442468607,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717488720
    },
    {
        "content": "<p>If so the answer is \"yes\", you can do cmd = \"bash\", args = #[\"-c\", \"just one string\"]</p>",
        "id": 442468695,
        "sender_full_name": "Julian Berman",
        "timestamp": 1717488740
    },
    {
        "content": "<p>(But now you run into fun stuff which you wish you won't want to know -- namely lots of things are not portable across shells, not all systems, will have all shells, even bash, installed, ...) It's a deep and terrible rabbit hole.</p>",
        "id": 442468842,
        "sender_full_name": "Julian Berman",
        "timestamp": 1717488792
    },
    {
        "content": "<p>and the <code>just one string</code> could contain pipes and process substitutions.  (I don't like this approach, but just testing my understanding)</p>",
        "id": 442468858,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717488796
    },
    {
        "content": "<p>But yes it's still for better or worse common.</p>",
        "id": 442468866,
        "sender_full_name": "Julian Berman",
        "timestamp": 1717488799
    },
    {
        "content": "<p>Correct.</p>",
        "id": 442468905,
        "sender_full_name": "Julian Berman",
        "timestamp": 1717488811
    },
    {
        "content": "<p>Ok, thank you very much: I learned a lot!</p>",
        "id": 442468964,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717488834
    },
    {
        "content": "<p>And with all this knowledge, I will try to avoid as much as possible using <code>IO.Process</code>!  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 442469146,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717488881
    },
    {
        "content": "<p>(To be clear which I'm sure you knew ha I think spawning processes, without shells, is in generally totally fine -- but as you say, if there's some even more appropriate API, great, saves the trouble)</p>",
        "id": 442469365,
        "sender_full_name": "Julian Berman",
        "timestamp": 1717488954
    },
    {
        "content": "<p>Yes, I can probably work with the solution that you wrote above, but I would also like to catch messages that Lean would produce while parsing the string, so if I can \"stay within Lean\", it will probably simplify my code later on.</p>",
        "id": 442469721,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717489052
    },
    {
        "content": "<p>If anyone else wonders about the eventual solution, I got <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.runFrontend#doc\">docs#Lean.Elab.runFrontend</a> (or rather <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.process#doc\">docs#Lean.Elab.process</a>) to run:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"w\">  </span><span class=\"bp\">...</span>\n<span class=\"w\">  </span><span class=\"c1\">-- find the root of the project</span>\n<span class=\"w\">  </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">initSearchPath</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">findSysroot</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"c1\">-- create the environment with `import Mathlib.Tactic.UpdateDeprecations`</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">env</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Environment</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">importModules</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[{</span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"ss\">`Mathlib.Tactic.UpdateDeprecations</span><span class=\"o\">}]</span><span class=\"w\"> </span><span class=\"o\">{}</span>\n<span class=\"w\">  </span><span class=\"c1\">-- process the `lake build` output, catching messages</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">msgLog</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Elab</span><span class=\"bp\">.</span><span class=\"n\">process</span><span class=\"w\"> </span><span class=\"n\">buildOutput</span><span class=\"w\"> </span><span class=\"n\">env</span><span class=\"w\"> </span><span class=\"o\">{}</span>\n<span class=\"w\">  </span><span class=\"bp\">...</span>\n</code></pre></div>\n<p>(adapted from <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Unable.20to.20import.20module.20Init.20while.20running.20in.20flake.20env.2E.2E.2E/near/430005106\">this code</a>)</p>",
        "id": 442516360,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717503580
    },
    {
        "content": "<p>This bypasses, for my use-case, the need to pipe a <code>lake build</code> step into a <code>lake env lean --stdin</code>.</p>",
        "id": 442516647,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717503653
    },
    {
        "content": "<p>and if anyone does want to replicate pipe from Lean (and only on Unix), here's an example of using a FIFO special file: <a href=\"https://github.com/JamesGallicchio/LeanSAT/blob/cake-lpr/LeanSAT/Solver/Impl/CakeLpr.lean\">example</a>, <a href=\"https://github.com/JamesGallicchio/LeanSAT/blob/cake-lpr/LeanSAT/Util/MkFIFO.lean\">relevant utility file</a>, <a href=\"https://man7.org/linux/man-pages/man7/fifo.7.html\">fifo file man page</a></p>",
        "id": 442633750,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1717537035
    }
]