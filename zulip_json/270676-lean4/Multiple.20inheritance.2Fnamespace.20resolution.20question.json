[
    {
        "content": "<p>Here is a toy example that demonstrates a thing I'm confused by:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">X</span> <span class=\"n\">where</span>\n  <span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">A</span> <span class=\"kd\">extends</span> <span class=\"n\">X</span> <span class=\"n\">where</span>\n  <span class=\"n\">countA</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">B</span> <span class=\"kd\">extends</span> <span class=\"n\">X</span> <span class=\"n\">where</span>\n  <span class=\"n\">countB</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">A</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getTwiceCountA</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a.countA</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">A</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">B</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getTwiceCountB</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">b.countB</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">B</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">C</span> <span class=\"kd\">extends</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">B</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getCounts</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">c.countA</span> <span class=\"bp\">+</span> <span class=\"n\">c.countB</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getTwiceCounts</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">c.getTwiceCountA</span> <span class=\"bp\">+</span> <span class=\"n\">c.getTwiceCountB</span>\n</code></pre></div>\n<p>Why does <code>getCounts</code> work but <code>getTwiceCounts</code> does not?</p>",
        "id": 422898930,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1708633703
    },
    {
        "content": "<p>Note that this does work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"n\">countA</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">B</span> <span class=\"n\">where</span>\n  <span class=\"n\">countB</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">A</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getTwiceCountA</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a.countA</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">A</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">B</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getTwiceCountB</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">b.countB</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">B</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">C</span> <span class=\"kd\">extends</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">B</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getCounts</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">c.countA</span> <span class=\"bp\">+</span> <span class=\"n\">c.countB</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getTwiceCounts</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">c.getTwiceCountA</span> <span class=\"bp\">+</span> <span class=\"n\">c.getTwiceCountB</span>\n</code></pre></div>",
        "id": 422899011,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1708633751
    },
    {
        "content": "<p>It looks like it's because <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.Term.findMethod%3F#doc\">docs#Lean.Elab.Term.findMethod?</a> uses <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.getParentStructures#doc\">docs#Lean.getParentStructures</a>, which only returns parent structures that correspond to subobject fields.</p>\n<p>The shared <code>X</code> causes only <code>A</code> to have a <code>toA</code> field; <code>B</code> is only represented by the <code>countB</code> field:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">C.mk</span>\n<span class=\"c1\">-- C.mk (toA : A) (countB : â„•) : C</span>\n</code></pre></div>\n<p>I think this is a bug. Could you report it?</p>",
        "id": 422901375,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708634685
    },
    {
        "content": "<p>Yeah, will do</p>",
        "id": 422901432,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1708634708
    },
    {
        "content": "<p>It's Lean.Elab.App.findMethod? btw</p>",
        "id": 422919828,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1708643185
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/issues/3467\">https://github.com/leanprover/lean4/issues/3467</a></p>",
        "id": 422924155,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1708645549
    }
]