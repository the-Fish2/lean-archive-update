[
    {
        "content": "<p>In the example, I want to shadow the default <code>LT Nat</code> instance with my <code>sampleInst (i: Info)</code>. The catch here is that this instance is dependent on some extra info <code>i</code>, and I'm not sure if <code>default_instance</code> is appropriate.<br>\nOne thing I tried is <code>useInst</code>, but to use it I have to do the <code>@useInst</code> to pass the instance in the first <code>example</code>. </p>\n<p>Is there someway I could achieve the syntax of the second <code>example</code>, but still get <code>sampleInst</code> as <code>LT</code> when defining <code>useInst'</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Info</span> <span class=\"n\">where</span>\n  <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">sampleInst</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">Info</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">LT</span> <span class=\"n\">Nat</span> <span class=\"n\">where</span>\n  <span class=\"n\">lt</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">i.s</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">useInst</span> <span class=\"o\">[</span><span class=\"n\">inst</span><span class=\"o\">:</span> <span class=\"n\">LT</span> <span class=\"n\">Nat</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span>\n\n<span class=\"c1\">-- usage:</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">I</span><span class=\"o\">:</span> <span class=\"n\">Info</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">useInst</span> <span class=\"o\">(</span><span class=\"n\">sampleInst</span> <span class=\"n\">I</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- What I want to achieve</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">useInst'</span> <span class=\"o\">(</span><span class=\"n\">I</span><span class=\"o\">:</span> <span class=\"n\">Info</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"c1\">-- some magic code here or in the `def` to make this def use (sampleInst I) as the LT instance for x and y?</span>\n  <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">I</span><span class=\"o\">:</span> <span class=\"n\">Info</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">useInst'</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- or some magic here?</span>\n</code></pre></div>",
        "id": 434547587,
        "sender_full_name": "Zhuanhao Wu",
        "timestamp": 1713661879
    },
    {
        "content": "<p>You can use explicit binders (<code>def useInst (inst: LT Nat)</code>) and it will use <code>inst</code> inside the body of the function.</p>\n<p>You can also write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">I</span><span class=\"o\">:</span> <span class=\"n\">Info</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">letI</span> <span class=\"n\">inst</span> <span class=\"o\">:=</span> <span class=\"n\">sampleInst</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>The <code>I</code> in <code>letI</code> means \"inline\" — it will substitute in <code>sampleInst i</code> wherever <code>inst</code> is used. If you use <code>let</code>, then it will keep a <code>let</code> expression around.</p>",
        "id": 434548281,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713662549
    },
    {
        "content": "<p>Thanks, this works!</p>",
        "id": 434587248,
        "sender_full_name": "Zhuanhao Wu",
        "timestamp": 1713704562
    }
]