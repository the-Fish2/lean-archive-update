[
    {
        "content": "<p>The result of calling <code>Tactic.SavedState.restore</code> is different depending on how variables were introduced into the local context:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"ex\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">getMainTarget</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">saveState</span>\n  <span class=\"n\">evalTactic</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Nat.zero_add</span><span class=\"o\">])</span>\n  <span class=\"n\">s.restore</span>\n  <span class=\"n\">logInfo</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"n\">ppExpr</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ex</span> <span class=\"c1\">-- 0 + a = b</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n  <span class=\"n\">ex</span> <span class=\"c1\">-- 0 + _uniq.2298 = _uniq.2301</span>\n</code></pre></div>\n<p>How can I restore the correct context in the second example?</p>",
        "id": 419247227,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1706794528
    },
    {
        "content": "<p>I would guess that you need to also restore the <code>Core</code>, <code>Meta</code> and <code>Elab</code>states.</p>",
        "id": 419254863,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1706796919
    },
    {
        "content": "<p>When you see <code>_uniq.1234</code> variables, that indicates that you have the wrong local context in the current state -- this is how fvars are pretty printed if the local context is wrong.</p>\n<p>Since you're working with the main goal, you could do this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"ex\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">getMainTarget</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">saveState</span>\n  <span class=\"n\">evalTactic</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Nat.zero_add</span><span class=\"o\">])</span>\n  <span class=\"n\">s.restore</span>\n  <span class=\"n\">logInfo</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"n\">ppExpr</span> <span class=\"n\">t</span>\n</code></pre></div>",
        "id": 419293754,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1706807378
    },
    {
        "content": "<p>Also, no need to do ppExpr yourself if you use <code>m!</code> message strings.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{t}\"</span>\n</code></pre></div>",
        "id": 419293909,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1706807415
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"266304\">Siddhartha Gadgil</span> <a href=\"#narrow/stream/270676-lean4/topic/Tactic.2ESavedState.2Erestore/near/419254863\">said</a>:</p>\n<blockquote>\n<p>I would guess that you need to also restore the <code>Core</code>, <code>Meta</code> and <code>Elab</code>states.</p>\n</blockquote>\n<p>These are already included in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Tactic.SavedState#doc\">docs#Tactic.SavedState</a></p>",
        "id": 419316184,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706815000
    },
    {
        "content": "<p>By the way, there's a combinator wrapping up <code>saveState</code>/<code>restoreState</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">withoutModifyingState</span> <span class=\"k\">do</span>\n    <span class=\"n\">evalTactic</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Nat.zero_add</span><span class=\"o\">])</span>\n</code></pre></div>",
        "id": 419316473,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1706815123
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>, how is the wrong local context showing up in the original version? Is it not being restored correctly with the rest of the state?</p>",
        "id": 419316842,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706815265
    },
    {
        "content": "<p>That's a good question, and I'm not sure. The local context is part of the reader state, so I thought it wasn't supposed to be modifiable.</p>",
        "id": 419317470,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1706815518
    },
    {
        "content": "<p>I know though that in a tactic you can't count on the local context being set to anything sensible.</p>",
        "id": 419317616,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1706815565
    },
    {
        "content": "<p>The <code>restoreState</code> is a red herring:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"ex\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">getMainTarget</span>\n  <span class=\"n\">logInfo</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"n\">ppExpr</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ex</span> <span class=\"c1\">-- 0 + a = b</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n  <span class=\"n\">ex</span> <span class=\"c1\">-- 0 + _uniq.924 = _uniq.927</span>\n</code></pre></div>\n<p>The real issue is that in both examples, the local context in which <code>ex</code> is run is that of the initial goal. But in the second example, the printed expression lives in the local context of the goal produced by <code>intro a b</code>.</p>\n<p>In general, as Kyle says, the local context is not mutable and is therefore not part of the <code>SavedState</code> that gets saved by <code>saveState</code> and restored by <code>restoreState</code>.</p>",
        "id": 419322890,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1706817524
    },
    {
        "content": "<p>To be clear, the normal way to fix Jannis' example is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"ex\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">getMainTarget</span>\n  <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"n\">logInfo</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"n\">ppExpr</span> <span class=\"n\">t</span>\n</code></pre></div>",
        "id": 419511323,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1706898473
    }
]