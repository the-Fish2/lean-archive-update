[
    {
        "content": "<p>Here's a question for everyone: do you agree it would be an improvement if types such as <code>Fin</code>, <code>Subtype</code>, and <code>Sigma</code> pretty printed as <code>⟨x, y⟩</code> rather than <code>{val := x, isLt := y}</code> or <code>{val := x, property := y}</code> or <code>{fst := x, snd := y}</code>?</p>\n<p>Lean 3 had a feature where you could give structures the <code>pp_using_anonymous_constructor</code> attribute to cause them to pretty print using anonymous constructor notation rather than structure instance notation.</p>",
        "id": 425705445,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710006003
    },
    {
        "content": "<p>I have implemented this here: <a href=\"https://github.com/leanprover/lean4/pull/3640\">lean4#3640</a></p>\n<p>Please let me know what you think, or if there are any objections to the list of types I have applied the attribute to. Lean 3 included <code>Sigma</code>, <code>PSigma</code>, <code>PProd</code>, <code>Subtype</code>, <code>And</code>, and <code>Fin</code>, and so I started with these. (It also had a few others for monad types, but these didn't seem immediately useful.)</p>",
        "id": 425705521,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710006049
    },
    {
        "content": "<p>I had <code>{val := x, property := ...}</code> today in some subexpression.</p>",
        "id": 425705582,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1710006107
    },
    {
        "content": "<p>Yes, the default Lean 4 behavior makes my goal view hugely unreadable on a regular basis.</p>",
        "id": 425705588,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710006113
    },
    {
        "content": "<p>although the culprit to me is usually <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Rat#doc\">docs#Rat</a></p>",
        "id": 425705642,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710006130
    },
    {
        "content": "<p>It would be neat if there was an inbetween notation like <code>{x, isLt := _}</code> that hides the name of the \"obvious\" fields</p>",
        "id": 425708545,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710008449
    },
    {
        "content": "<p>How does this behave for nested sigma types; do we get the flattened set of angle brackets, or nested ones? (I think there are arguments either way, but as I don't remember what Lean 3 did I probably don't care either way)</p>",
        "id": 425708700,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710008592
    },
    {
        "content": "<p>That particular notation is short for <code>{x := x, isLt := _}</code> already. Something like <code>⟨x, isLt := _⟩</code> could be workable though.</p>",
        "id": 425708741,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710008629
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/.60pp_using_anonymous_constructor.60/near/425708700\">said</a>:</p>\n<blockquote>\n<p>How does this behave for nested sigma types; do we get the flattened set of angle brackets, or nested ones?</p>\n</blockquote>\n<p>It doesn't flatten. If it were to flatten, you wouldn't be able to hover over the interpolated ones, since the angle bracket notation is a single Syntax node.</p>",
        "id": 425708843,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710008704
    },
    {
        "content": "<p>even un-flattened this will be a very big boost to readability for me. does it have to live in core or can this be put in Std?</p>",
        "id": 426287426,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1710320335
    }
]