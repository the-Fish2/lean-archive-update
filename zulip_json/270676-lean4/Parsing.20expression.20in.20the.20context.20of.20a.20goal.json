[
    {
        "content": "<p>Programatically, how can I parse an expression that refers to variables in the local context? For example, suppose the goal (with a <code>TermElabM</code> context and <code>MVarId</code>  looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span>\n</code></pre></div>\n<p>and I want to type the expression <code>Or.inl h</code>. It seems like its not sufficient to restore the <code>TermElabM</code> context and then run <code>Lean.Elab.Term.elabTerm</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">state.term.restore</span>\n<span class=\"k\">let</span> <span class=\"n\">expr</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">Elab.Term.elabTerm</span> <span class=\"n\">stx</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>Below is a MWE showing what I want to do. The program crashes when the expression <code>Or.inl h</code> is elaborated.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">filename</span> <span class=\"o\">:=</span> <span class=\"s2\">\"&lt;example&gt;\"</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Context</span> <span class=\"n\">where</span>\n  <span class=\"n\">env</span><span class=\"o\">:</span> <span class=\"n\">Environment</span>\n  <span class=\"n\">coreContext</span> <span class=\"o\">:</span> <span class=\"n\">Core.Context</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">currNamespace</span> <span class=\"o\">:=</span> <span class=\"n\">Name.anonymous</span><span class=\"o\">,</span>\n    <span class=\"n\">openDecls</span> <span class=\"o\">:=</span> <span class=\"o\">[],</span>\n    <span class=\"n\">fileName</span> <span class=\"o\">:=</span> <span class=\"s2\">\"&lt;stdin&gt;\"</span><span class=\"o\">,</span>\n    <span class=\"n\">fileMap</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">source</span> <span class=\"o\">:=</span> <span class=\"s2\">\"\"</span><span class=\"o\">,</span> <span class=\"n\">positions</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n  <span class=\"n\">elabContext</span> <span class=\"o\">:</span> <span class=\"n\">Elab.Term.Context</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">declName</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">none</span><span class=\"o\">,</span>\n    <span class=\"n\">errToSorry</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n  <span class=\"o\">}</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">ReaderT</span> <span class=\"n\">Context</span> <span class=\"n\">m</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">parse_expr</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">):</span> <span class=\"n\">Elab.TermElabM</span> <span class=\"n\">Lean.Expr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">syn</span> <span class=\"o\">:=</span> <span class=\"n\">Parser.runParserCategory</span>\n    <span class=\"o\">(</span><span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"n\">MonadEnv.getEnv</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">catName</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">term</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">input</span> <span class=\"o\">:=</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">fileName</span> <span class=\"o\">:=</span> <span class=\"n\">filename</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">toOption</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">get</span><span class=\"bp\">!</span>\n  <span class=\"k\">let</span> <span class=\"n\">expr</span> <span class=\"bp\">←</span> <span class=\"n\">Elab.Term.elabType</span> <span class=\"n\">syn</span>\n  <span class=\"n\">Elab.Term.synthesizeSyntheticMVarsNoPostponing</span>\n  <span class=\"k\">let</span> <span class=\"n\">expr</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"n\">expr</span>\n  <span class=\"n\">return</span> <span class=\"n\">expr</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">start_tactic_state</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">):</span> <span class=\"n\">Elab.TermElabM</span> <span class=\"n\">Elab.Tactic.SavedState</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mvar</span> <span class=\"bp\">←</span> <span class=\"n\">Meta.mkFreshExprMVar</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">kind</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">synthetic</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">termState</span> <span class=\"o\">:</span> <span class=\"n\">Elab.Term.SavedState</span> <span class=\"bp\">←</span> <span class=\"n\">Elab.Term.saveState</span>\n  <span class=\"k\">let</span> <span class=\"n\">tacticState</span> <span class=\"o\">:</span> <span class=\"n\">Elab.Tactic.SavedState</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">term</span> <span class=\"o\">:=</span> <span class=\"n\">termState</span><span class=\"o\">,</span> <span class=\"n\">tactic</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">goals</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">mvar.mvarId</span><span class=\"bp\">!</span><span class=\"o\">]</span> <span class=\"o\">}}</span>\n  <span class=\"n\">IO.println</span> <span class=\"s2\">\"Tactic state started\"</span>\n  <span class=\"n\">return</span> <span class=\"n\">tacticState</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">execute_tactic</span> <span class=\"o\">(</span><span class=\"n\">state</span><span class=\"o\">:</span> <span class=\"n\">Elab.Tactic.SavedState</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">goalId</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">):</span>\n  <span class=\"n\">Elab.TermElabM</span> <span class=\"n\">Elab.Tactic.SavedState</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">stx</span> <span class=\"o\">:=</span> <span class=\"n\">Parser.runParserCategory</span>\n    <span class=\"o\">(</span><span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"n\">MonadEnv.getEnv</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">catName</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">tactic</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">input</span> <span class=\"o\">:=</span> <span class=\"n\">tactic</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">fileName</span> <span class=\"o\">:=</span> <span class=\"n\">filename</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">toOption</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">get</span><span class=\"bp\">!</span>\n  <span class=\"n\">state.term.restore</span>\n  <span class=\"k\">let</span> <span class=\"n\">tac</span> <span class=\"o\">:</span> <span class=\"n\">Elab.Tactic.TacticM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"n\">set</span> <span class=\"n\">state.tactic</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">Elab.Tactic.evalTactic</span> <span class=\"n\">stx</span>\n  <span class=\"k\">let</span> <span class=\"n\">mvarId</span> <span class=\"o\">:=</span> <span class=\"n\">state.tactic.goals.get</span><span class=\"bp\">!</span> <span class=\"n\">goalId</span>\n  <span class=\"n\">Elab.Term.synthesizeSyntheticMVarsNoPostponing</span>\n  <span class=\"k\">let</span> <span class=\"n\">unsolvedGoals</span> <span class=\"bp\">←</span> <span class=\"n\">Elab.Tactic.run</span> <span class=\"n\">mvarId</span> <span class=\"n\">tac</span>\n  <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getThe</span> <span class=\"n\">Core.State</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">messages.hasErrors</span> <span class=\"k\">then</span>\n    <span class=\"k\">let</span> <span class=\"n\">messages</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getThe</span> <span class=\"n\">Core.State</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">messages</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">toList.toArray</span>\n    <span class=\"k\">let</span> <span class=\"n\">errors</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">messages.map</span> <span class=\"n\">Message.data</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mapM</span> <span class=\"k\">fun</span> <span class=\"n\">md</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">md.toString</span>\n    <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{errors}\"</span>\n    <span class=\"n\">return</span> <span class=\"n\">state</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">unsolvedGoals.forM</span> <span class=\"n\">instantiateMVarDeclMVars</span>\n    <span class=\"k\">let</span> <span class=\"n\">nextState</span> <span class=\"o\">:</span> <span class=\"n\">Elab.Tactic.SavedState</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n      <span class=\"n\">term</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Elab.Term.saveState</span><span class=\"o\">),</span>\n      <span class=\"n\">tactic</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">goals</span> <span class=\"o\">:=</span> <span class=\"n\">unsolvedGoals</span> <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">let</span> <span class=\"n\">goals</span> <span class=\"bp\">←</span> <span class=\"n\">unsolvedGoals.mapM</span> <span class=\"k\">fun</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">toString</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Meta.ppGoal</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n    <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Tactic '{tactic}' succeeded.\"</span>\n    <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{goals}\"</span>\n    <span class=\"n\">return</span> <span class=\"n\">nextState</span>\n<span class=\"kd\">def</span> <span class=\"n\">try_assign</span> <span class=\"o\">(</span><span class=\"n\">state</span><span class=\"o\">:</span> <span class=\"n\">Elab.Tactic.SavedState</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">goalId</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">):</span>\n  <span class=\"n\">Elab.TermElabM</span> <span class=\"n\">Elab.Tactic.SavedState</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">state.term.restore</span>\n  <span class=\"k\">let</span> <span class=\"n\">mvarId</span> <span class=\"o\">:=</span> <span class=\"n\">state.tactic.goals.get</span><span class=\"bp\">!</span> <span class=\"n\">goalId</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span> <span class=\"n\">Parser.runParserCategory</span>\n    <span class=\"o\">(</span><span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"n\">MonadEnv.getEnv</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">catName</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">term</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">input</span> <span class=\"o\">:=</span> <span class=\"n\">expr</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">fileName</span> <span class=\"o\">:=</span> <span class=\"n\">filename</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">toOption</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">get</span><span class=\"bp\">!</span>\n  <span class=\"k\">let</span> <span class=\"n\">goalType</span> <span class=\"bp\">←</span> <span class=\"n\">mvarId.getType</span>\n  <span class=\"k\">let</span> <span class=\"n\">expr</span> <span class=\"bp\">←</span> <span class=\"n\">Elab.Term.elabTerm</span> <span class=\"o\">(</span><span class=\"n\">stx</span> <span class=\"o\">:=</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">expectedType</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">goalType</span><span class=\"o\">)</span>\n\n  <span class=\"n\">mvarId.checkNotAssigned</span> <span class=\"bp\">`</span><span class=\"n\">try_assign</span>\n  <span class=\"n\">mvarId.assign</span> <span class=\"n\">expr</span>\n\n  <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getThe</span> <span class=\"n\">Lean.Core.State</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">messages.hasErrors</span> <span class=\"k\">then</span>\n    <span class=\"k\">let</span> <span class=\"n\">messages</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getThe</span> <span class=\"n\">Lean.Core.State</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">messages</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">toList.toArray</span>\n    <span class=\"k\">let</span> <span class=\"n\">errors</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">messages.map</span> <span class=\"n\">Lean.Message.data</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mapM</span> <span class=\"k\">fun</span> <span class=\"n\">md</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">md.toString</span>\n    <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{errors}\"</span>\n    <span class=\"n\">return</span> <span class=\"n\">state</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">prevMCtx</span> <span class=\"o\">:=</span> <span class=\"n\">state.term.meta.meta.mctx</span>\n  <span class=\"k\">let</span> <span class=\"n\">nextMCtx</span> <span class=\"bp\">←</span> <span class=\"n\">getMCtx</span>\n  <span class=\"c1\">-- Generate a list of mvarIds that exist in the parent state; Also test the</span>\n  <span class=\"c1\">-- assertion that the types have not changed on any mvars.</span>\n  <span class=\"k\">let</span> <span class=\"n\">newMVars</span> <span class=\"bp\">←</span> <span class=\"n\">nextMCtx.decls.foldlM</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">acc</span> <span class=\"n\">mvarId</span> <span class=\"n\">mvarDecl</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">prevMVarDecl</span> <span class=\"o\">:=</span> <span class=\"n\">prevMCtx.decls.find</span><span class=\"bp\">?</span> <span class=\"n\">mvarId</span> <span class=\"k\">then</span>\n      <span class=\"n\">assert</span><span class=\"bp\">!</span> <span class=\"n\">prevMVarDecl.type</span> <span class=\"bp\">==</span> <span class=\"n\">mvarDecl.type</span>\n      <span class=\"n\">return</span> <span class=\"n\">acc</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">return</span> <span class=\"n\">mvarId</span> <span class=\"o\">::</span> <span class=\"n\">acc</span>\n    <span class=\"o\">)</span> <span class=\"o\">[]</span>\n  <span class=\"k\">let</span> <span class=\"n\">nextGoals</span> <span class=\"bp\">←</span> <span class=\"n\">newMVars.filterM</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">mvar</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">pure</span> <span class=\"bp\">!</span><span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mvar.isAssigned</span><span class=\"o\">))</span>\n  <span class=\"k\">let</span> <span class=\"n\">nextState</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Elab.Tactic.SavedState</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">term</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Lean.Elab.Term.saveState</span><span class=\"o\">),</span>\n    <span class=\"n\">tactic</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">goals</span> <span class=\"o\">:=</span> <span class=\"n\">nextGoals</span> <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n  <span class=\"n\">return</span> <span class=\"n\">nextState</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">execute_term_elab</span> <span class=\"o\">(</span><span class=\"n\">termElabM</span><span class=\"o\">:</span> <span class=\"n\">Lean.Elab.TermElabM</span> <span class=\"n\">α</span><span class=\"o\">):</span> <span class=\"n\">M</span> <span class=\"n\">IO</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">Lean.Core.State</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">context</span> <span class=\"bp\">←</span> <span class=\"n\">read</span>\n  <span class=\"k\">let</span> <span class=\"n\">metaM</span> <span class=\"o\">:</span> <span class=\"n\">Lean.MetaM</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">termElabM.run'</span> <span class=\"o\">(</span><span class=\"n\">ctx</span> <span class=\"o\">:=</span> <span class=\"n\">context.elabContext</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">coreM</span> <span class=\"o\">:</span> <span class=\"n\">Lean.CoreM</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">metaM.run'</span>\n  <span class=\"k\">let</span> <span class=\"n\">coreState</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Core.State</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"n\">context.env</span> <span class=\"o\">}</span>\n  <span class=\"n\">coreM.toIO</span> <span class=\"n\">context.coreContext</span> <span class=\"n\">coreState</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">proof</span><span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">context</span> <span class=\"bp\">←</span> <span class=\"n\">read</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">execute_term_elab</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">expr</span> <span class=\"bp\">←</span> <span class=\"n\">parse_expr</span> <span class=\"s2\">\"∀ (p q: Prop), p → ((p ∨ q) ∨ (p ∨ q))\"</span>\n    <span class=\"k\">let</span> <span class=\"n\">state</span> <span class=\"bp\">←</span> <span class=\"n\">start_tactic_state</span> <span class=\"n\">expr</span>\n    <span class=\"k\">let</span> <span class=\"n\">state</span> <span class=\"bp\">←</span> <span class=\"n\">execute_tactic</span> <span class=\"n\">state</span> <span class=\"mi\">0</span> <span class=\"s2\">\"intro p q h\"</span>\n    <span class=\"k\">let</span> <span class=\"n\">branch</span> <span class=\"bp\">←</span> <span class=\"n\">try_assign</span> <span class=\"n\">state</span> <span class=\"mi\">0</span> <span class=\"s2\">\"Or.inl (Or.inl h)\"</span>\n  <span class=\"n\">IO.println</span> <span class=\"s2\">\"Completed\"</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span><span class=\"o\">:</span> <span class=\"n\">Lean.Environment</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.importModules</span>\n    <span class=\"o\">(</span><span class=\"n\">imports</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">Init</span><span class=\"o\">])</span>\n    <span class=\"o\">(</span><span class=\"n\">opts</span> <span class=\"o\">:=</span> <span class=\"o\">{})</span>\n    <span class=\"o\">(</span><span class=\"n\">trustLevel</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"n\">proof</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">run</span> <span class=\"o\">{</span> <span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"n\">env</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>The error is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"sc\">'h'</span>\n</code></pre></div>",
        "id": 431713523,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1712446055
    },
    {
        "content": "<p>I found the solution: <code>Lean.Meta.withLCtx</code></p>",
        "id": 431726697,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1712460173
    }
]