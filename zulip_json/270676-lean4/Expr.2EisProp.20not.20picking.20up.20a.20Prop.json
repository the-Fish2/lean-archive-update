[
    {
        "content": "<p>I'm trying to get a list of the Prop hypotheses in context.  I tried this, but it misses some:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Elab.Tactic.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"test_tactic\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"n\">liftMetaTactic</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">fun</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"c1\">-- collect the nontrivial hypotheses</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">hyps</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"n\">for</span> <span class=\"n\">h</span> <span class=\"k\">in</span> <span class=\"bp\">←</span> <span class=\"n\">getLCtx</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"bp\">!</span><span class=\"n\">h.isImplementationDetail</span> <span class=\"k\">then</span>\n      <span class=\"n\">hyps</span> <span class=\"o\">:=</span> <span class=\"n\">hyps.push</span> <span class=\"n\">h.type</span>\n  <span class=\"c1\">-- find their types</span>\n  <span class=\"k\">let</span> <span class=\"n\">hyp_types</span> <span class=\"bp\">←</span> <span class=\"n\">hyps.mapM</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"n\">whnfR</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">a</span><span class=\"o\">)))</span>\n  <span class=\"n\">trace</span> <span class=\"bp\">`</span><span class=\"n\">debug</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"found hypotheses {hyps} of types {hyp_types}\"</span><span class=\"o\">)</span>\n  <span class=\"c1\">-- run `Expr.isProp`</span>\n  <span class=\"n\">trace</span> <span class=\"bp\">`</span><span class=\"n\">debug</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"These ones are Props according to Expr.isProp: {hyp_types.map Expr.isProp}\"</span><span class=\"o\">)</span>\n  <span class=\"n\">pure</span> <span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 409642664,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1703279438
    },
    {
        "content": "<p>For example, here it finds <code>h</code> but not <code>h'</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.debug</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"n\">Classical.byContradiction</span> <span class=\"k\">fun</span> <span class=\"n\">h'</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">test_tactic</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">[debug] found hypotheses [Prop, Prop, P ∧ Q, ¬(P ∨ Q)] of types [Type, Type, Prop, Prop]</span>\n\n<span class=\"cm\">[debug] These ones are Props according to Expr.isProp: [false, false, true, false]</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 409642675,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1703279450
    },
    {
        "content": "<p><code>instantiateMVars</code> fixes it</p>",
        "id": 409643432,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703279974
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"test_tactic\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"n\">liftMetaTactic</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">fun</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"c1\">-- collect the nontrivial hypotheses</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">hyps</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"n\">for</span> <span class=\"n\">h</span> <span class=\"k\">in</span> <span class=\"bp\">←</span> <span class=\"n\">getLCtx</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"bp\">!</span><span class=\"n\">h.isImplementationDetail</span> <span class=\"k\">then</span>\n      <span class=\"n\">hyps</span> <span class=\"o\">:=</span> <span class=\"n\">hyps.push</span> <span class=\"n\">h.type</span>\n  <span class=\"c1\">-- find their types</span>\n  <span class=\"k\">let</span> <span class=\"n\">hyp_types</span> <span class=\"bp\">←</span> <span class=\"n\">hyps.mapM</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"n\">instantiateMVars</span> <span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"n\">whnfR</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">a</span><span class=\"o\">))))</span>\n  <span class=\"n\">trace</span><span class=\"o\">[</span><span class=\"n\">debug</span><span class=\"o\">]</span> <span class=\"s2\">\"found hypotheses {hyps} of types {hyp_types}\"</span>\n  <span class=\"c1\">-- run `Expr.isProp`</span>\n  <span class=\"n\">trace</span><span class=\"o\">[</span><span class=\"n\">debug</span><span class=\"o\">]</span>  <span class=\"s2\">\"These ones are Props according to Expr.isProp: {hyp_types.map Expr.isProp}\"</span>\n  <span class=\"n\">pure</span> <span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 409643520,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703280016
    },
    {
        "content": "<p>Thanks!  Is there a preferred order, <code>instantiateMVars</code> before or after <code>whnfR</code>?</p>",
        "id": 409643581,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1703280072
    },
    {
        "content": "<p>That is definitely beyond my paygrade!</p>",
        "id": 409643595,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703280086
    },
    {
        "content": "<p>My preferred approach would be through Qq:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Qq</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"test_tactic\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"n\">liftMetaTactic</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">fun</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"c1\">-- collect the nontrivial hypotheses</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">hyps</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"n\">for</span> <span class=\"n\">h</span> <span class=\"k\">in</span> <span class=\"bp\">←</span> <span class=\"n\">getLCtx</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"bp\">!</span><span class=\"n\">h.isImplementationDetail</span> <span class=\"k\">then</span>\n      <span class=\"n\">hyps</span> <span class=\"o\">:=</span> <span class=\"n\">hyps.push</span> <span class=\"n\">h.type</span>\n  <span class=\"c1\">-- find their types</span>\n  <span class=\"k\">let</span> <span class=\"n\">hyp_props</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Prop</span><span class=\"o\">))</span> <span class=\"bp\">←</span> <span class=\"n\">hyps.mapM</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"n\">a</span>\n    <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"n\">P</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"n\">inferTypeQ</span> <span class=\"n\">a</span> <span class=\"k\">then</span>\n      <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span> <span class=\"n\">pure</span> <span class=\"n\">none</span><span class=\"o\">)</span>\n  <span class=\"n\">trace</span><span class=\"o\">[</span><span class=\"n\">debug</span><span class=\"o\">]</span> <span class=\"s2\">\"Found props: {hyp_props}\"</span>\n  <span class=\"n\">pure</span> <span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 409644166,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703280466
    },
    {
        "content": "<p>Which I guess forced my hand into calling <code>instantiateMVars</code> before</p>",
        "id": 409644319,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703280544
    },
    {
        "content": "<p>(note that this <code>let</code> matching on inferTypeQ was broken until a month ago, so this pattern isn't very common yet)</p>",
        "id": 409644367,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703280580
    },
    {
        "content": "<p>If you're doing whnf, you don't need <code>instantiateMVars</code> before but you do need it after.</p>",
        "id": 409651239,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1703285073
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.isProp#doc\">docs#Lean.Meta.isProp</a> is the function that handles everything for you</p>",
        "id": 409651273,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1703285104
    },
    {
        "content": "<p>My rule of thumb is \"be suspicious about matching/recognition functions from <code>Lean.Expr</code>, and try to look for a <code>Lean.Meta</code> version that handles whnf and metavariables for you\". There's not a perfect correspondence between these namespaces unfortunately.</p>",
        "id": 409651500,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1703285266
    },
    {
        "content": "<p>This sounds like a great use-case for docstrings on the <code>Expr</code> versions that recommend the Meta versions where possible</p>",
        "id": 409652024,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703285726
    }
]