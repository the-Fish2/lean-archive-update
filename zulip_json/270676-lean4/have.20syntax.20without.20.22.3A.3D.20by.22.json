[
    {
        "content": "<p>Just updated some of my projects from 4.3.0 to 4.6.0 and it seems like the syntax for <code>have</code> is now more restrictive? I used to be able to write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span>\n  <span class=\"bp\">Â·</span> <span class=\"n\">skip</span>\n</code></pre></div>\n<p>But that doesn't seems to be parsed anymore, why is that?</p>",
        "id": 425087441,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1709732117
    },
    {
        "content": "<p>Or better: Where should I be looking for a documentation of breaking changes like that before upgrading?</p>",
        "id": 425087644,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1709732176
    },
    {
        "content": "<p>In this particular case you can <code>import Mathlib.Tactic.Have</code> to recover it (see <a href=\"https://github.com/leanprover-community/mathlib4/pull/10534\">#10534</a>). I don't think there is documentation for Mathlib breaking changes.</p>",
        "id": 425089005,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1709732591
    },
    {
        "content": "<p>Ah, didn't know mathlib changed the syntax, thought it came directly from lean4</p>",
        "id": 425089308,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1709732695
    },
    {
        "content": "<p>In general <a href=\"https://github.com/leanprover/lean4/blob/master/RELEASES.md\">https://github.com/leanprover/lean4/blob/master/RELEASES.md</a> should list breaking upstream changes.</p>",
        "id": 425094601,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1709734108
    },
    {
        "content": "<p>So the <code>:= by ...</code> is the form that's recommended now? It seems a bit silly to go out and into tactic mode  unnecessarily</p>",
        "id": 425096309,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1709734513
    },
    {
        "content": "<p>You can still write <code>have h : ... := &lt;proof term&gt;</code>.</p>",
        "id": 425097825,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709734837
    },
    {
        "content": "<p>Yes, but I rarely write proofs terms directly when using haves</p>",
        "id": 425099084,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1709735206
    },
    {
        "content": "<p>The <code>:=</code> form is the only one that exists in core lean 4 at this point; I don't know if there's appetite to add another spelling there</p>",
        "id": 425099492,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1709735317
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110789\">Jakob von Raumer</span> <a href=\"#narrow/stream/270676-lean4/topic/have.20syntax.20without.20.22.3A.3D.20by.22/near/425099084\">said</a>:</p>\n<blockquote>\n<p>Yes, but I rarely write proofs terms directly when using haves</p>\n</blockquote>\n<p>But then you want to be in tactic mode anyway.</p>",
        "id": 425106402,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1709737093
    },
    {
        "content": "<p>I think Jakob's point is that you use <code>:=</code> to go from tactic to term mode and then immediately use <code>by</code> to return to tactic mode, which seems wasteful(?) in a way</p>",
        "id": 425106919,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1709737216
    },
    {
        "content": "<p>You can always stay in tactic mode with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n</code></pre></div>",
        "id": 425117293,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709739698
    },
    {
        "content": "<p>Which is consistent with things like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cases</span> <span class=\"n\">s</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n<span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n</code></pre></div>",
        "id": 425117354,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709739716
    },
    {
        "content": "<p>I didn't know <code>?_</code> worked there too!</p>",
        "id": 425201162,
        "sender_full_name": "Chris Wong",
        "timestamp": 1709769946
    },
    {
        "content": "<p>Does that mean <code>refine</code> is redundant now, if <code>exact foo ?_</code> does the same thing <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 425201253,
        "sender_full_name": "Chris Wong",
        "timestamp": 1709769984
    },
    {
        "content": "<p>But I don't think <code>exact foo ?_</code> works...</p>",
        "id": 425208693,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709774409
    },
    {
        "content": "<p>Right -- <code>exact</code> is the redundant one as it can be replaced with <code>refine</code>, as can <code>use</code>, <code>constructor</code>,... .</p>",
        "id": 425239276,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709794918
    }
]