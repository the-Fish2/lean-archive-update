[
    {
        "content": "<p>I've been having some trouble with the profiler not giving the correct time. in particular it seems like time spent on type class synthesis is not counted towards the total time. Minimal example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler.threshold</span> <span class=\"mi\">1</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">typeclass inference of CoeT took 2.52ms</span>\n<span class=\"cm\">typeclass inference of CompleteLattice took 1.84ms</span>\n<span class=\"cm\">typeclass inference of CompleteLattice took 2.15ms</span>\n<span class=\"cm\">typeclass inference of Fintype took 346ms</span>\n<span class=\"cm\">elaboration took 1.6ms</span>\n\n<span class=\"cm\">-/</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Fintype</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">∪</span><span class=\"n\">B</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The elaboration supposedly only takes 1.6ms, but the type class inference itself took 346ms!?</p>",
        "id": 430676049,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1712011353
    },
    {
        "content": "<p>Does <code>set_option trace.profiler true</code> help?</p>\n<p>Also, instead of asking for time in seconds, you could try <code>count_heartbeats in</code> to see how many heartbeats are being taken.</p>",
        "id": 430679705,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1712013471
    },
    {
        "content": "<p>Yes, I didn't know about <code>trace.profiler</code>, and it seems to give the correct time.</p>",
        "id": 430693990,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1712022779
    },
    {
        "content": "<p>I assume what is going on is that <code>Lean.profileit</code> only counts time towards the innermost call of the function, instead of to all nested calls. That would explain why type class inference steals all the time of the main elaboration time. Is this intended?</p>",
        "id": 431114057,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1712156460
    },
    {
        "content": "<p>yes</p>",
        "id": 431115247,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1712156770
    },
    {
        "content": "<p>In that case, should this be stated as a warning at the <code>profiler</code> option? Because I had always been using <code>set_option profiler true</code> to measure the amount of time takes by a command. But this isn't what it does...</p>",
        "id": 431122727,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1712158914
    },
    {
        "content": "<p>It now says \"activate nested traces with execution time over threshold\", but I don't remember having read this actually.</p>",
        "id": 431123252,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1712159062
    },
    {
        "content": "<p>Or is there a different option that actually measures the amount of time taken by a command? I currently use <code>profileitM Exception \"rw??\" (← getOptions) do</code> in my library rewrite tactic, but since it involves quite a bit of type class synthesis, I don't think this is the right function for profiling.</p>",
        "id": 431124022,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1712159307
    },
    {
        "content": "<p>You already said that trace.profiler works for you?</p>",
        "id": 431124220,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1712159369
    },
    {
        "content": "<p>Ah, sorry yes.</p>",
        "id": 431124510,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1712159452
    },
    {
        "content": "<p>But what about profiling library search? Do you agree that it should display the total time?</p>",
        "id": 431124861,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1712159556
    },
    {
        "content": "<p>Use <code>withTraceNode</code> then to opt into trace.profiler</p>",
        "id": 431125279,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1712159672
    },
    {
        "content": "<p><code>profiler</code> is what the speedcenter uses but it likely will not be extended going forward in favor of <code>trace.profiler</code> - <a href=\"https://github.com/leanprover-community/mathlib4/pull/3801\">#3801</a></p>",
        "id": 431125892,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1712159874
    },
    {
        "content": "<p>In the case of interactive library search, the profiling messages don't appear like usual messages, because the lean function is called from the widget, but instead they appear as lines in the output, which is a nice alternative. This doesn't happen with <code>withTraceNode</code>. But I now have a testing command to run the library search straight from lean, so this is not a problem anymore.</p>",
        "id": 431132216,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1712161733
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Profiler.20time.20bug/near/431125892\">said</a>:</p>\n<blockquote>\n<ul>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/3801\">#3801</a></li>\n</ul>\n</blockquote>\n<p>It links to the mathlib PR instead of the Lean PR</p>",
        "id": 431132291,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1712161767
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/3801\">lean4#3801</a></p>",
        "id": 431160400,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1712172460
    },
    {
        "content": "<p>I fear I will keep making this mistake until we decide to default four-digit references to lean4 <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 431162234,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1712173094
    }
]