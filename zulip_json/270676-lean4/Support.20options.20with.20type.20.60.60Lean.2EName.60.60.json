[
    {
        "content": "<p>Is it possible to support options with type <code>Lean.Name</code>? I need this type of options in <code>lean-auto</code>. Currently we can register options of type <code>Lean.Name</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">register_option</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Name</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">defValue</span> <span class=\"o\">:=</span> <span class=\"s2\">\"\"</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>But cannot <code>set_option</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">foo</span> <span class=\"bp\">``</span><span class=\"n\">Nat.add</span>\n</code></pre></div>\n<p>Seems like the parser is not supporting Name literals</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Lean/Parser/Command.lean</span>\n<span class=\"kd\">def</span> <span class=\"n\">optionValue</span> <span class=\"o\">:=</span> <span class=\"n\">nonReservedSymbol</span> <span class=\"s2\">\"true\"</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">nonReservedSymbol</span> <span class=\"s2\">\"false\"</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">strLit</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">numLit</span>\n<span class=\"kd\">@[</span><span class=\"n\">builtin_command_parser</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"bp\">«</span><span class=\"kd\">set_option</span><span class=\"bp\">»</span>   <span class=\"o\">:=</span> <span class=\"n\">leading_parser</span>\n  <span class=\"s2\">\"set_option \"</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">ident</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">ppSpace</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">optionValue</span>\n</code></pre></div>",
        "id": 439502794,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1716184061
    },
    {
        "content": "<p>Currently I'm using a workaround: register options of type <code>String</code> and use <code>name_str.foldl (fun acc s =&gt; Name.str acc s) .anonymous</code>.</p>",
        "id": 439502988,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1716184146
    },
    {
        "content": "<p>There's a possibility. There are some questions about the implementation.</p>\n<p>There are two options:</p>\n<ol>\n<li>Have <code>set_option foo `name</code> and <code>set_option foo ``name</code>, where single vs double backquote work like how they do for normal names (the latter would do name resolution)</li>\n<li>Have <code>set_option foo name</code>, where either (a) <code>name</code> is not resolved or (b) <code>name</code> always attempts to resolve and either b.1 doesn't throw an error if it doesn't or b.2 throws an error if it does.</li>\n</ol>\n<p>Could you mention the use case for name-valued options in <code>lean-auto</code>? Could you also evaluate the difference between this proposed <code>set_option</code> feature and using an attribute?</p>",
        "id": 439604091,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1716221123
    },
    {
        "content": "<p>In <code>lean-auto</code>, I sometimes want to leave \"hole\"s in the code using <code>Lean.evalConst</code>:</p>\n<ul>\n<li>I want users to be able to customize e.g. the translation from <code>lean-auto</code>'s internal representation to Lean. This can be done by leaving a hole in the code.</li>\n<li>I need to debug code deep in the import tree (long compilation time), and testing <code>lean-auto</code> might require importing mathlib (long loading time). Sometimes I have to make several attempts to get the code right. So, I leave a hole in the code deep in the import tree, and fill the hole directly in the test file.</li>\n</ul>",
        "id": 439621736,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1716226969
    },
    {
        "content": "<p>I think <code>set_option foo `name</code> and <code>set_option foo ``name</code> is better within the two options.</p>",
        "id": 439622480,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1716227223
    },
    {
        "content": "<p>Using attributes would also be ok, but <code>set_option</code> seems more convenient?</p>",
        "id": 439622826,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1716227359
    },
    {
        "content": "<p>Is it more convenient than writing something like the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">rebind</span> <span class=\"n\">myFn</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">newFn</span> <span class=\"o\">:</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>That would be rather than</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">newFn</span> <span class=\"o\">:</span> <span class=\"bp\">...</span>\n\n<span class=\"n\">setOption</span> <span class=\"n\">myFn</span> <span class=\"bp\">``</span><span class=\"n\">newFn</span>\n</code></pre></div>",
        "id": 439624665,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1716228027
    },
    {
        "content": "<p>I'm a bit confused. My intended <code>set_option</code> approach looks like this overall:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">register_option</span> <span class=\"n\">hole_func_name</span> <span class=\"o\">:</span> <span class=\"n\">Name</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"bp\">...</span>\n  <span class=\"k\">let</span> <span class=\"n\">hole_func</span> <span class=\"bp\">←</span> <span class=\"n\">hole_func_name.get</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getOptions</span><span class=\"o\">)</span>\n  <span class=\"bp\">&lt;</span><span class=\"n\">check</span> <span class=\"n\">that</span> <span class=\"n\">hole_func</span> <span class=\"k\">have</span> <span class=\"n\">the</span> <span class=\"n\">correct</span> <span class=\"n\">type</span><span class=\"bp\">&gt;</span>\n  <span class=\"k\">let</span> <span class=\"n\">hole</span> <span class=\"bp\">←</span> <span class=\"n\">evalConst</span> <span class=\"bp\">&lt;</span><span class=\"n\">expected_type</span><span class=\"bp\">&gt;</span> <span class=\"n\">hole_func</span>\n  <span class=\"bp\">...</span>\n\n<span class=\"c1\">-- In another Lean file</span>\n<span class=\"kd\">def</span> <span class=\"n\">newFn</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">hole_func_name</span> <span class=\"bp\">``</span><span class=\"n\">newFn</span>\n</code></pre></div>\n<p>If I understand correctly, the <code>rebind</code> approach only replaces</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- In another Lean file</span>\n<span class=\"kd\">def</span> <span class=\"n\">newFn</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">hole_func_name</span> <span class=\"bp\">``</span><span class=\"n\">newFn</span>\n</code></pre></div>\n<p>with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">rebind</span> <span class=\"n\">hole_func_name</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">newFn</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 439627480,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1716229075
    },
    {
        "content": "<p>That would be a little more convenient.</p>",
        "id": 439630754,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1716230245
    },
    {
        "content": "<p>However, the <code>set_option</code> approach will allow <code>def newFn := ...</code> and <code>set_option hole_func_name ``newFn</code> to reside in different Lean files, while the <code>rebind</code> approach won't.</p>",
        "id": 439631452,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1716230518
    },
    {
        "content": "<p>You could use the <code>attribute [rebind hole_func_name] newFn</code> syntax from a different file just fine</p>",
        "id": 439659514,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1716231624
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>code: Rebind.lean</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">RebindDescr</span> <span class=\"n\">where</span>\n  <span class=\"n\">fnName</span> <span class=\"o\">:</span> <span class=\"n\">Name</span>\n  <span class=\"n\">type</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span>\n  <span class=\"n\">impl</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Name</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Inhabited</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">RebindState</span> <span class=\"o\">:=</span> <span class=\"n\">NameMap</span> <span class=\"n\">RebindDescr</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">RebindExtension</span> <span class=\"o\">:=</span> <span class=\"n\">SimpleScopedEnvExtension</span> <span class=\"n\">RebindDescr</span> <span class=\"n\">RebindState</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">RebindState.addEntry</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">NameMap</span> <span class=\"n\">RebindDescr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">RebindDescr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">NameMap</span> <span class=\"n\">RebindDescr</span> <span class=\"o\">:=</span>\n  <span class=\"n\">s.insert</span> <span class=\"n\">r.fnName</span> <span class=\"n\">r</span>\n\n<span class=\"n\">initialize</span> <span class=\"n\">rebindExtension</span> <span class=\"o\">:</span> <span class=\"n\">RebindExtension</span> <span class=\"bp\">←</span>\n  <span class=\"n\">registerSimpleScopedEnvExtension</span> <span class=\"o\">{</span>\n    <span class=\"n\">initial</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n    <span class=\"n\">addEntry</span> <span class=\"o\">:=</span> <span class=\"n\">RebindState.addEntry</span>\n  <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getRebinds</span> <span class=\"o\">(</span><span class=\"n\">env</span> <span class=\"o\">:</span> <span class=\"n\">Environment</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">NameMap</span> <span class=\"n\">RebindDescr</span> <span class=\"o\">:=</span> <span class=\"n\">rebindExtension.getState</span> <span class=\"n\">env</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getRebind</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">env</span> <span class=\"o\">:</span> <span class=\"n\">Environment</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fnName</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">RebindDescr</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">getRebinds</span> <span class=\"n\">env</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">find</span><span class=\"bp\">?</span> <span class=\"n\">fnName</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">rebindAttr</span><span class=\"o\">)</span> <span class=\"s2\">\"rebind \"</span> <span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">attr</span>\n\n<span class=\"n\">initialize</span>\n  <span class=\"n\">registerBuiltinAttribute</span> <span class=\"o\">{</span>\n    <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">rebindAttr</span>\n    <span class=\"n\">descr</span> <span class=\"o\">:=</span> <span class=\"s2\">\"add a rebind\"</span>\n    <span class=\"n\">add</span>   <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">decl</span> <span class=\"n\">stx</span> <span class=\"n\">kind</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">match</span> <span class=\"n\">stx</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">attr</span><span class=\"bp\">|</span> <span class=\"n\">rebind</span> <span class=\"bp\">$</span><span class=\"n\">fnName</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withRef</span> <span class=\"n\">stx</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n        <span class=\"k\">let</span> <span class=\"n\">fnName</span> <span class=\"o\">:=</span> <span class=\"n\">fnName.getId.eraseMacroScopes</span>\n        <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">getRebind</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span> <span class=\"n\">fnName</span>\n          <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"No such rebindable function {fnName}\"</span>\n        <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">info</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">find</span><span class=\"bp\">?</span> <span class=\"n\">decl</span> <span class=\"bp\">|</span> <span class=\"n\">unreachable</span><span class=\"bp\">!</span>\n        <span class=\"n\">unless</span> <span class=\"n\">info.levelParams.isEmpty</span> <span class=\"k\">do</span>\n          <span class=\"n\">throwError</span> <span class=\"s2\">\"Declaration has level parameters, which is not supported.\"</span>\n        <span class=\"n\">unless</span> <span class=\"bp\">←</span> <span class=\"n\">Meta.MetaM.run'</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Meta.isDefEq</span> <span class=\"n\">info.type</span> <span class=\"n\">r.type</span> <span class=\"k\">do</span>\n          <span class=\"n\">throwError</span> <span class=\"s2\">\"Type is{indentD info.type}</span><span class=\"se\">\\n</span><span class=\"s2\">but it must be{indentD r.type}\"</span>\n        <span class=\"k\">let</span> <span class=\"n\">r'</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"k\">with</span> <span class=\"n\">impl</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"n\">decl</span><span class=\"o\">}</span>\n        <span class=\"n\">rebindExtension.add</span> <span class=\"n\">r'</span> <span class=\"n\">kind</span>\n      <span class=\"bp\">|</span> <span class=\"n\">_</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"invalid `[rebind]` attribute\"</span>\n  <span class=\"o\">}</span>\n\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">RebindExtension.eval</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonadEnv</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonadError</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonadOptions</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">getRebind</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span> <span class=\"n\">n</span>\n    <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"No such rebindable function {n}\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">impl</span> <span class=\"o\">:=</span> <span class=\"n\">c.impl</span><span class=\"bp\">?</span>\n    <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"No implementation exists for rebind {n}\"</span>\n  <span class=\"n\">evalConst</span> <span class=\"n\">α</span> <span class=\"n\">impl</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"declare_rebindable \"</span> <span class=\"n\">fnName</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"s2\">\" : \"</span> <span class=\"n\">type</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">Elab.Command.runTermElabM</span> <span class=\"k\">fun</span> <span class=\"n\">args</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">type</span> <span class=\"bp\">←</span> <span class=\"n\">Elab.Term.elabType</span> <span class=\"n\">type</span>\n    <span class=\"n\">Elab.Term.synthesizeSyntheticMVarsUsingDefault</span>\n    <span class=\"k\">let</span> <span class=\"n\">type</span> <span class=\"bp\">←</span> <span class=\"n\">Meta.mkForallFVars</span> <span class=\"o\">(</span><span class=\"n\">usedOnly</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"n\">args</span> <span class=\"n\">type</span>\n    <span class=\"k\">let</span> <span class=\"n\">type</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"n\">type</span>\n    <span class=\"k\">if</span> <span class=\"n\">type.hasMVar</span> <span class=\"k\">then</span>\n      <span class=\"n\">throwError</span> <span class=\"s2\">\"Type contains metavariables{indentD type}\"</span>\n    <span class=\"k\">if</span> <span class=\"n\">type.hasLevelParam</span> <span class=\"k\">then</span>\n      <span class=\"n\">throwError</span> <span class=\"s2\">\"Type contains level parameters{indentD type}\"</span>\n    <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">RebindDescr</span> <span class=\"o\">:=</span>\n      <span class=\"o\">{</span> <span class=\"n\">fnName</span> <span class=\"o\">:=</span> <span class=\"n\">fnName.getId</span>\n        <span class=\"n\">type</span> <span class=\"o\">:=</span> <span class=\"n\">type</span>\n        <span class=\"n\">impl</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"n\">none</span> <span class=\"o\">}</span>\n    <span class=\"n\">rebindExtension.add</span> <span class=\"n\">r</span> <span class=\"bp\">.</span><span class=\"n\">global</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">evalRebindStx</span><span class=\"o\">)</span> <span class=\"s2\">\"eval_rebind% \"</span> <span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">term_elab</span> <span class=\"n\">evalRebindStx</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">elabEvalRebindStx</span> <span class=\"o\">:</span> <span class=\"n\">Elab.Term.TermElab</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">eval_rebind</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">fnName</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">expectedType</span><span class=\"bp\">?</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">getRebind</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span> <span class=\"n\">fnName.getId</span>\n      <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"No such rebindable function {fnName}\"</span>\n    <span class=\"k\">let</span> <span class=\"n\">stx</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">unsafe</span> <span class=\"n\">RebindExtension.eval</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Elab.Term.exprToSyntax</span> <span class=\"n\">c.type</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">fnName.getId</span><span class=\"o\">))</span>\n    <span class=\"n\">Elab.Term.elabTerm</span> <span class=\"n\">stx</span> <span class=\"n\">expectedType</span><span class=\"bp\">?</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Elab.throwUnsupportedSyntax</span>\n</code></pre></div>\n</div></div>\n<p>Example usage (you need to fix the import first):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"c\">/-</span><span class=\"cm\">packagename-/</span><span class=\"bp\">.</span><span class=\"n\">Rebind</span>\n\n<span class=\"n\">declare_rebindable</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">Lean.MetaM</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">eval_rebind</span><span class=\"bp\">%</span> <span class=\"n\">foo</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">test</span>\n<span class=\"c1\">-- No implementation exists for rebind foo</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">rebind</span> <span class=\"n\">foo</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">myFoo</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">22</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">test</span>\n<span class=\"c1\">-- 22</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kd\">@[</span><span class=\"n\">local</span> <span class=\"n\">rebind</span> <span class=\"n\">foo</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">myFoo'</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">37</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">test</span>\n<span class=\"c1\">-- 37</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">test</span>\n<span class=\"c1\">-- 22</span>\n</code></pre></div>",
        "id": 439666657,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1716234127
    },
    {
        "content": "<p>Extending the examples:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">declare_rebindable</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n<span class=\"n\">declare_rebindable</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test2</span> <span class=\"o\">:</span> <span class=\"n\">Lean.MetaM</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">eval_rebind</span><span class=\"bp\">%</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">eval_rebind</span><span class=\"bp\">%</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">rebind</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"n\">myFoo</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">rebind</span> <span class=\"n\">f</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">myF</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">test2</span>\n<span class=\"c1\">-- 44</span>\n</code></pre></div>",
        "id": 439668080,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1716234716
    },
    {
        "content": "<p>Note that the type of <code>eval_rebind% f</code> in this example is <code>m (Nat -&gt; Nat)</code>, for <code>m</code> some monad that supports what <code>evalConst</code> requires.</p>\n<p>Note also that since this is being done with a term elaborator like this, we can safely omit <code>unsafe</code> because we can ensure it has the right type.</p>",
        "id": 439668330,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1716234821
    },
    {
        "content": "<p>Thanks! I'm using <code>rebind</code> in <code>lean-auto</code> now.</p>",
        "id": 439725567,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1716262674
    }
]