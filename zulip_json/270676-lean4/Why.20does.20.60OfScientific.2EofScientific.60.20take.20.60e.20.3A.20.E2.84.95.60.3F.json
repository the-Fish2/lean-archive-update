[
    {
        "content": "<p>I'm a bit surprised the contract is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ofScientific</span> <span class=\"o\">(</span><span class=\"n\">mantissa</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">exponentSign</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">decimalExponent</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>instead of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ofScientific</span> <span class=\"o\">(</span><span class=\"n\">mantissa</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">decimalExponent</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>is there some reason relating to IEEE 754 why we permit both <code>1e0</code> and <code>1e-0</code> and allocate them different <code>Expr</code>s?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"mi\">1</span><span class=\"n\">e0</span>  <span class=\"c1\">-- 1e0</span>\n<span class=\"k\">#check</span> <span class=\"mi\">1</span><span class=\"n\">e</span><span class=\"bp\">-</span><span class=\"mi\">0</span> <span class=\"c1\">-- 1.0</span>\n<span class=\"k\">#eval</span>  <span class=\"mi\">1</span><span class=\"n\">e0</span>  <span class=\"c1\">-- 1.000000</span>\n<span class=\"k\">#eval</span>  <span class=\"mi\">1</span><span class=\"n\">e</span><span class=\"bp\">-</span><span class=\"mi\">0</span> <span class=\"c1\">-- 1.000000</span>\n</code></pre></div>",
        "id": 435885216,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714319140
    },
    {
        "content": "<p>Possibly this is trying to support all possible float bit patterns?</p>",
        "id": 435886370,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1714319698
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/IEEE_754#/media/File:Float_example.svg\">https://en.wikipedia.org/wiki/IEEE_754#/media/File:Float_example.svg</a> doesn't have this <code>exponentSign</code> bit though</p>",
        "id": 435887067,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714320171
    },
    {
        "content": "<p>(it only has a regular sign bit, but that's handled by <code>ofScientific m e</code> vs <code>-ofScientific m e</code>)</p>",
        "id": 435887120,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714320204
    },
    {
        "content": "<p>Oh right. Huh.</p>",
        "id": 435891865,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1714324071
    },
    {
        "content": "<p>I think this is just the natural result of parsing</p>",
        "id": 435947203,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714363374
    },
    {
        "content": "<p>it's agnostic as to the way the data is stored in the target type or whether +0 and -0 are distinguished etc</p>",
        "id": 435947260,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714363413
    },
    {
        "content": "<p>I don't think the +0 vs -0 distinction would be relevant here even if it weren't agnostic, this is about <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>0</mn></msup></mrow><annotation encoding=\"application/x-tex\">10^0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span></span></span></span> vs <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mrow><mo>−</mo><mn>0</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">10^{-0}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span></span></span></span></span> which not even floats distinguish</p>",
        "id": 435970614,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714374183
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Why.20does.20.60OfScientific.2EofScientific.60.20take.20.60e.20.3A.20.E2.84.95.60.3F/near/435947203\">said</a>:</p>\n<blockquote>\n<p>I think this is just the natural result of parsing</p>\n</blockquote>\n<p>I guess because there is no integer parser in the first place?</p>",
        "id": 435970871,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714374267
    },
    {
        "content": "<p>Although, the mantissa being a <code>Nat</code> instead of a Nat plus exponent offset means that you can't really differentiate +0 and -0 anyway</p>",
        "id": 435971846,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714374666
    },
    {
        "content": "<p>that is, <code>1.0e1</code> is interpreted as <code>10e+0</code> and <code>1.0e0</code> is the same as <code>10e-1</code>, this is effectively an offset computed in <code>Int</code> and so <code>e-0</code> is not a possible output</p>",
        "id": 435972136,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714374783
    },
    {
        "content": "<p>Oh but there is also another consideration, which is that <code>ofScientific</code> takes <em>raw</em> Nat arguments</p>",
        "id": 435972355,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714374875
    },
    {
        "content": "<p>That sounds like the compelling one. Should we have some kind of <code>RawNat</code> type synonym to make that obvious from the docs?</p>",
        "id": 435973844,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714375457
    },
    {
        "content": "<p>Presumably that also means that lemmas which expand ofScientific should be inserting <code>ofNat</code>s?</p>",
        "id": 435973965,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714375523
    },
    {
        "content": "<p>simp does this already</p>",
        "id": 435973994,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714375537
    },
    {
        "content": "<p>Does <code>rw</code>?</p>",
        "id": 435974036,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714375556
    },
    {
        "content": "<p>We could use \"raw Int arguments\" but currently core has no conception of this (<code>norm_num</code> does though)</p>",
        "id": 435974094,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714375569
    },
    {
        "content": "<p>I'm not sure, you should check how <code>ofNat</code> is expanded in e.g. <code>Nat.cast</code> lemmas</p>",
        "id": 435974358,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714375679
    }
]