[
    {
        "content": "<p>I noticed that the following very small example takes several seconds to compile:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"c1\">-- compilation of _example took 4.71s</span>\n  <span class=\"n\">for</span> <span class=\"n\">_</span> <span class=\"k\">in</span> <span class=\"o\">[:</span><span class=\"mi\">5</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"n\">logInfo</span> <span class=\"s2\">\"\"</span>\n</code></pre></div>\n<p>Interestingly, simply lowering the monad to <code>TermElabM</code> fixes the issue. (I checked the <code>synthInstance</code> and <code>isDefEq</code> traces and couldn't find much, but there are a lot of traces, so maybe it adds up. Though I'm not sure whether that's counted in compilation time or not in the first place.)</p>\n<p>(On web, it seems to take only about 2 seconds.)</p>\n<p>This is present on 4.7.0-nightly-2024-02-26.</p>",
        "id": 423906489,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1709155847
    },
    {
        "content": "<p>Also, adding <code>pure ()</code> at the end of the <code>for</code> loop seems to fix it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"c1\">-- no trace</span>\n  <span class=\"n\">for</span> <span class=\"n\">_</span> <span class=\"k\">in</span> <span class=\"o\">[:</span><span class=\"mi\">5</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"n\">logInfo</span> <span class=\"s2\">\"\"</span>\n    <span class=\"n\">pure</span> <span class=\"o\">()</span>\n</code></pre></div>",
        "id": 423907179,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1709156143
    },
    {
        "content": "<p>That doesn't look like too much IR in the trace so this is probably the old compiler being overeager at attempting to do things <span aria-label=\"tm\" class=\"emoji emoji-2122\" role=\"img\" title=\"tm\">:tm:</span>. While annoying this will probably only ever get fixed with the new compiler next year-ish.</p>",
        "id": 423920741,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1709162472
    }
]