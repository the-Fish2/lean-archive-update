[
    {
        "content": "<p>Is there a way to force all delay assigned metavariables to be instantiated?</p>\n<p>For example, if I have an expression <code>?m.1 ?m.2</code>, where</p>\n<ul>\n<li><code>?m.2</code> is not instantiated</li>\n<li><code>?m.1</code> is delay assigned to <code>fun x =&gt; x + ?m.3</code></li>\n<li><code>?m.3</code> is not instantiated<br>\nIs there a way to convert the expression <code>?m.1 ?m.2</code> to <code>?m.2 + ?m.3</code> or <code>(fun x =&gt; x + ?m.3) ?m.2</code>? i.e. I want all metavariables to be \"as instantiated as possible\".</li>\n</ul>",
        "id": 437906110,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1715300267
    },
    {
        "content": "<p>does <code>instantiateMVars</code> not do that?</p>",
        "id": 437920674,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1715313499
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Force.20instantiate.20delay.20assigned.20metavariable/near/437920674\">said</a>:</p>\n<blockquote>\n<p>does <code>instantiateMVars</code> not do that?</p>\n</blockquote>\n<p>No. It seems like it only instantiates delay assigned metavariables that don't refer to other metavariables</p>",
        "id": 438018741,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1715361710
    },
    {
        "content": "<p>That's right. The transformation you suggest, where delayed-assigned mvars are replaced with an abstraction, might also be sound, but afaik it's not implemented anywhere.</p>",
        "id": 438019182,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1715361877
    },
    {
        "content": "<p>I was under the impression that delayed meta variables are always just substitutions of other meta variables, not terms like <code>x + ?m</code>. Am I wrong?</p>",
        "id": 438019184,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1715361878
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/270676-lean4/topic/Force.20instantiate.20delay.20assigned.20metavariable/near/438019184\">said</a>:</p>\n<blockquote>\n<p>I was under the impression that delayed meta variables are always just substitutions of other meta variables, not terms like <code>x + ?m</code>. Am I wrong?</p>\n</blockquote>\n<p>In this case its <code>fun x =&gt; x + ?m</code></p>",
        "id": 438019347,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1715361937
    },
    {
        "content": "<p>Then my understanding of delayed meta variables is still wanting :-)</p>",
        "id": 438020576,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1715362405
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span> <a href=\"#narrow/stream/270676-lean4/topic/Force.20instantiate.20delay.20assigned.20metavariable/near/438019182\">said</a>:</p>\n<blockquote>\n<p>That's right. The transformation you suggest, where delayed-assigned mvars are replaced with an abstraction, might also be sound, but afaik it's not implemented anywhere.</p>\n</blockquote>\n<p>so delay assigned metavariables can only be instantiated if they are fully resolved?</p>",
        "id": 438021494,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1715362742
    },
    {
        "content": "<p>That's my understanding, yes.</p>",
        "id": 438022855,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1715363327
    },
    {
        "content": "<p>That's my understanding, yes.</p>",
        "id": 438022866,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1715363334
    },
    {
        "content": "<p>Is there a way to determine what metavariables must be resolved before a delay assigned metavariable can be instantiated?</p>",
        "id": 438023212,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1715363516
    },
    {
        "content": "<p>For example if <code>?m := fun x =&gt; x + ?m.3</code> is delay assigned, then <code>?m</code> depends on <code>?m.3</code></p>",
        "id": 438023282,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1715363538
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span> <a href=\"#narrow/stream/270676-lean4/topic/Force.20instantiate.20delay.20assigned.20metavariable/near/438019182\">said</a>:</p>\n<blockquote>\n<p>That's right. The transformation you suggest, where delayed-assigned mvars are replaced with an abstraction, might also be sound, but afaik it's not implemented anywhere.</p>\n</blockquote>\n<p>Would it be possible to write this transformation using the expression transform functions?</p>",
        "id": 438039138,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1715371335
    },
    {
        "content": "<p>Yeah, you can force delayed assignment metavariables to make progress if they're partially assigned. There's nothing built-in, but it's not so hard to write the transformation.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">Instantiate metavariables, including partially assigned delayed assignment metavariables.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">semiInstantiateMVars</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">Meta.transform</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">pre</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">e.withApp</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"n\">args</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">mvar</span> <span class=\"n\">mvarId</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"k\">then</span>\n        <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">decl</span> <span class=\"bp\">←</span> <span class=\"n\">getDelayedMVarAssignment</span><span class=\"bp\">?</span> <span class=\"n\">mvarId</span> <span class=\"k\">then</span>\n          <span class=\"k\">if</span> <span class=\"n\">args.size</span> <span class=\"bp\">≥</span> <span class=\"n\">decl.fvars.size</span> <span class=\"k\">then</span>\n            <span class=\"k\">let</span> <span class=\"n\">pending</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">mvar</span> <span class=\"n\">decl.mvarIdPending</span><span class=\"o\">)</span>\n            <span class=\"k\">if</span> <span class=\"bp\">!</span><span class=\"n\">pending.isMVar</span> <span class=\"k\">then</span>\n              <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">visit</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkLambdaFVars</span> <span class=\"n\">decl.fvars</span> <span class=\"n\">pending</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">beta</span> <span class=\"n\">args</span>\n      <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">continue</span><span class=\"o\">)</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"check \"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Elab.Tactic.withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">Elab.Tactic.elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">none</span>\n  <span class=\"k\">if</span> <span class=\"n\">e.isFVar</span> <span class=\"k\">then</span>\n    <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">val</span> <span class=\"bp\">←</span> <span class=\"n\">e.fvarId</span><span class=\"bp\">!.</span><span class=\"n\">getValue</span><span class=\"bp\">?</span> <span class=\"k\">then</span>\n      <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">val</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{e}\"</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"check' \"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Elab.Tactic.withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">Elab.Tactic.elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">none</span>\n  <span class=\"k\">if</span> <span class=\"n\">e.isFVar</span> <span class=\"k\">then</span>\n    <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">val</span> <span class=\"bp\">←</span> <span class=\"n\">e.fvarId</span><span class=\"bp\">!.</span><span class=\"n\">getValue</span><span class=\"bp\">?</span> <span class=\"k\">then</span>\n      <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">val</span>\n  <span class=\"k\">let</span> <span class=\"n\">e'</span> <span class=\"bp\">←</span> <span class=\"n\">semiInstantiateMVars</span> <span class=\"n\">e</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{e'}\"</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">foo</span>\n  <span class=\"n\">case'</span> <span class=\"n\">foo</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">refine</span> <span class=\"n\">congrArg</span> <span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">rotate_left</span>\n  <span class=\"n\">check</span> <span class=\"n\">h</span>   <span class=\"c1\">-- fun x y ↦ ?m.4924 x y</span>\n  <span class=\"n\">check'</span> <span class=\"n\">h</span>  <span class=\"c1\">-- fun x y ↦ congrArg (HAdd.hAdd 1) (?m.4955 x y)</span>\n  <span class=\"n\">trivial</span>\n</code></pre></div>",
        "id": 438042381,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715373152
    },
    {
        "content": "<p>I've only tested this with this one example, so there might be bugs.</p>",
        "id": 438042465,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715373204
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/Force.20instantiate.20delay.20assigned.20metavariable/near/438042381\">said</a>:</p>\n<blockquote>\n<p>Yeah, you can force delayed assignment metavariables to make progress if they're partially assigned. There's nothing built-in, but it's not so hard to write the transformation.</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">Instantiate metavariables, including partially assigned delayed assignment metavariables.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">semiInstantiateMVars</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">Meta.transform</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">pre</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">e.withApp</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"n\">args</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">mvar</span> <span class=\"n\">mvarId</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"k\">then</span>\n        <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">decl</span> <span class=\"bp\">←</span> <span class=\"n\">getDelayedMVarAssignment</span><span class=\"bp\">?</span> <span class=\"n\">mvarId</span> <span class=\"k\">then</span>\n          <span class=\"k\">if</span> <span class=\"n\">args.size</span> <span class=\"bp\">≥</span> <span class=\"n\">decl.fvars.size</span> <span class=\"k\">then</span>\n            <span class=\"k\">let</span> <span class=\"n\">pending</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">mvar</span> <span class=\"n\">decl.mvarIdPending</span><span class=\"o\">)</span>\n            <span class=\"k\">if</span> <span class=\"bp\">!</span><span class=\"n\">pending.isMVar</span> <span class=\"k\">then</span>\n              <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">visit</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkLambdaFVars</span> <span class=\"n\">decl.fvars</span> <span class=\"n\">pending</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">beta</span> <span class=\"n\">args</span>\n      <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">continue</span><span class=\"o\">)</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"check \"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Elab.Tactic.withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">Elab.Tactic.elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">none</span>\n  <span class=\"k\">if</span> <span class=\"n\">e.isFVar</span> <span class=\"k\">then</span>\n    <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">val</span> <span class=\"bp\">←</span> <span class=\"n\">e.fvarId</span><span class=\"bp\">!.</span><span class=\"n\">getValue</span><span class=\"bp\">?</span> <span class=\"k\">then</span>\n      <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">val</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{e}\"</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"check' \"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Elab.Tactic.withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">Elab.Tactic.elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">none</span>\n  <span class=\"k\">if</span> <span class=\"n\">e.isFVar</span> <span class=\"k\">then</span>\n    <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">val</span> <span class=\"bp\">←</span> <span class=\"n\">e.fvarId</span><span class=\"bp\">!.</span><span class=\"n\">getValue</span><span class=\"bp\">?</span> <span class=\"k\">then</span>\n      <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">val</span>\n  <span class=\"k\">let</span> <span class=\"n\">e'</span> <span class=\"bp\">←</span> <span class=\"n\">semiInstantiateMVars</span> <span class=\"n\">e</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{e'}\"</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">foo</span>\n  <span class=\"n\">case'</span> <span class=\"n\">foo</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">refine</span> <span class=\"n\">congrArg</span> <span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">rotate_left</span>\n  <span class=\"n\">check</span> <span class=\"n\">h</span>   <span class=\"c1\">-- fun x y ↦ ?m.4924 x y</span>\n  <span class=\"n\">check'</span> <span class=\"n\">h</span>  <span class=\"c1\">-- fun x y ↦ congrArg (HAdd.hAdd 1) (?m.4955 x y)</span>\n  <span class=\"n\">trivial</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I tried this but sometimes it gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">PANIC</span> <span class=\"n\">at</span> <span class=\"n\">Lean.LocalContext.get</span><span class=\"bp\">!</span> <span class=\"n\">Lean.LocalContext</span><span class=\"o\">:</span><span class=\"mi\">227</span><span class=\"o\">:</span><span class=\"mi\">14</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">free</span> <span class=\"kd\">variable</span>\n<span class=\"n\">backtrace</span><span class=\"o\">:</span>\n<span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">test</span><span class=\"o\">(</span><span class=\"n\">lean_panic_fn</span><span class=\"bp\">+</span><span class=\"mi\">0xa3</span><span class=\"o\">)[</span><span class=\"mi\">0x61d100e1d643</span><span class=\"o\">]</span>\n<span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">test</span><span class=\"o\">(</span><span class=\"n\">l_Lean_MetavarContext_MkBinding_mkBinding___lambda__2</span><span class=\"bp\">+</span><span class=\"mi\">0x171</span><span class=\"o\">)[</span><span class=\"mi\">0x61d0ffee65a1</span><span class=\"o\">]</span>\n<span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">test</span><span class=\"o\">(</span><span class=\"n\">lean_apply_1</span><span class=\"bp\">+</span><span class=\"mi\">0x260</span><span class=\"o\">)[</span><span class=\"mi\">0x61d100e270c0</span><span class=\"o\">]</span>\n<span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">test</span><span class=\"o\">(</span><span class=\"n\">l_EStateM_bind___rarg</span><span class=\"bp\">+</span><span class=\"mi\">0x16</span><span class=\"o\">)[</span><span class=\"mi\">0x61d100d9db66</span><span class=\"o\">]</span>\n<span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">test</span><span class=\"o\">(</span><span class=\"n\">lean_apply_1</span><span class=\"bp\">+</span><span class=\"mi\">0x15d</span><span class=\"o\">)[</span><span class=\"mi\">0x61d100e26fbd</span><span class=\"o\">]</span>\n<span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">test</span><span class=\"o\">(</span><span class=\"n\">lean_apply_2</span><span class=\"bp\">+</span><span class=\"mi\">0xd36</span><span class=\"o\">)[</span><span class=\"mi\">0x61d100e287d6</span><span class=\"o\">]</span>\n<span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">test</span><span class=\"o\">(</span><span class=\"n\">l_Lean_MetavarContext_mkBinding</span><span class=\"bp\">+</span><span class=\"mi\">0x1a2</span><span class=\"o\">)[</span><span class=\"mi\">0x61d0ffee8e12</span><span class=\"o\">]</span>\n<span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">test</span><span class=\"o\">(</span><span class=\"n\">l_Lean_Meta_mkLambdaFVars</span><span class=\"bp\">+</span><span class=\"mi\">0x3a8</span><span class=\"o\">)[</span><span class=\"mi\">0x61d0fefe8098</span><span class=\"o\">]</span>\n<span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">test</span><span class=\"o\">(</span><span class=\"n\">l_Lean_Expr_withAppAux___at_Pantograph_instantiatePartialDelayedMVars___spec__1</span><span class=\"bp\">+</span><span class=\"mi\">0x629</span><span class=\"o\">)[</span><span class=\"mi\">0x61d0fd87a349</span><span class=\"o\">]</span>\n<span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">test</span><span class=\"o\">(</span><span class=\"n\">l_Pantograph_instantiatePartialDelayedMVars___lambda__1</span><span class=\"bp\">+</span><span class=\"mi\">0xc9</span><span class=\"o\">)[</span><span class=\"mi\">0x61d0fd87a8c9</span><span class=\"o\">]</span>\n<span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">test</span><span class=\"o\">(</span><span class=\"n\">lean_apply_5</span><span class=\"bp\">+</span><span class=\"mi\">0x363</span><span class=\"o\">)[</span><span class=\"mi\">0x61d100e2a9c3</span><span class=\"o\">]</span>\n<span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">test</span><span class=\"o\">(</span><span class=\"n\">lean_apply_6</span><span class=\"bp\">+</span><span class=\"mi\">0xb65</span><span class=\"o\">)[</span><span class=\"mi\">0x61d100e2be45</span><span class=\"o\">]</span>\n<span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">test</span><span class=\"o\">(</span><span class=\"n\">l_ReaderT_bind___at_Lean_Meta_zetaReduce___spec__14___rarg</span><span class=\"bp\">+</span><span class=\"mi\">0xb7</span><span class=\"o\">)[</span><span class=\"mi\">0x61d0ffd9cc37</span><span class=\"o\">]</span>\n<span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">test</span><span class=\"o\">(</span><span class=\"n\">lean_apply_6</span><span class=\"bp\">+</span><span class=\"mi\">0x3a5</span><span class=\"o\">)[</span><span class=\"mi\">0x61d100e2b685</span><span class=\"o\">]</span>\n<span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">test</span><span class=\"o\">(</span><span class=\"n\">l_Lean_Meta_withIncRecDepth___at_Lean_Meta_zetaReduce___spec__15</span><span class=\"bp\">+</span><span class=\"mi\">0x45b</span><span class=\"o\">)[</span><span class=\"mi\">0x61d0ffd9d5eb</span><span class=\"o\">]</span>\n<span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">test</span><span class=\"o\">(</span><span class=\"n\">l_Lean_Meta_transform_visit___at_Lean_Meta_zetaReduce___spec__2</span><span class=\"bp\">+</span><span class=\"mi\">0x859</span><span class=\"o\">)[</span><span class=\"mi\">0x61d0ffd926c9</span><span class=\"o\">]</span>\n<span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">test</span><span class=\"o\">(</span><span class=\"n\">l_Array_mapMUnsafe_map___at_Lean_Meta_zetaReduce___spec__10</span><span class=\"bp\">+</span><span class=\"mi\">0x1ec</span><span class=\"o\">)[</span><span class=\"mi\">0x61d0ffd98fcc</span><span class=\"o\">]</span>\n<span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">test</span><span class=\"o\">(</span><span class=\"n\">l_Lean_Expr_withAppAux___at_Lean_Meta_zetaReduce___spec__13</span><span class=\"bp\">+</span><span class=\"mi\">0xa6f</span><span class=\"o\">)[</span><span class=\"mi\">0x61d0ffd9b94f</span><span class=\"o\">]</span>\n<span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">test</span><span class=\"o\">(</span><span class=\"n\">l_Lean_Meta_transform_visit___at_Lean_Meta_zetaReduce___spec__2___lambda__1</span><span class=\"bp\">+</span><span class=\"mi\">0x7e1</span><span class=\"o\">)[</span><span class=\"mi\">0x61d0ffd9ee11</span><span class=\"o\">]</span>\n<span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">test</span><span class=\"o\">(</span><span class=\"n\">lean_apply_7</span><span class=\"bp\">+</span><span class=\"mi\">0x4e1</span><span class=\"o\">)[</span><span class=\"mi\">0x61d100e2c3f1</span><span class=\"o\">]</span>\n<span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">test</span><span class=\"o\">(</span><span class=\"n\">l_ReaderT_bind___at_Lean_Meta_zetaReduce___spec__14___rarg</span><span class=\"bp\">+</span><span class=\"mi\">0x264</span><span class=\"o\">)[</span><span class=\"mi\">0x61d0ffd9cde4</span><span class=\"o\">]</span>\n<span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">test</span><span class=\"o\">(</span><span class=\"n\">lean_apply_6</span><span class=\"bp\">+</span><span class=\"mi\">0x3a5</span><span class=\"o\">)[</span><span class=\"mi\">0x61d100e2b685</span><span class=\"o\">]</span>\n<span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">test</span><span class=\"o\">(</span><span class=\"n\">l_Lean_Meta_withIncRecDepth___at_Lean_Meta_zetaReduce___spec__15</span><span class=\"bp\">+</span><span class=\"mi\">0x45b</span><span class=\"o\">)[</span><span class=\"mi\">0x61d0ffd9d5eb</span><span class=\"o\">]</span>\n<span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">test</span><span class=\"o\">(</span><span class=\"n\">l_Lean_Meta_transform_visit___at_Lean_Meta_zetaReduce___spec__2</span><span class=\"bp\">+</span><span class=\"mi\">0x859</span><span class=\"o\">)[</span><span class=\"mi\">0x61d0ffd926c9</span><span class=\"o\">]</span>\n<span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">test</span><span class=\"o\">(</span><span class=\"n\">l_Lean_Meta_transform___at_Lean_Meta_zetaReduce___spec__1</span><span class=\"bp\">+</span><span class=\"mi\">0xf6</span><span class=\"o\">)[</span><span class=\"mi\">0x61d0ffda0246</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 438722583,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1715748705
    },
    {
        "content": "<p>Is it always true that the free variables in the <code>mvarIdPending</code> mvar of a delay assigned mvar are either in the <code>fvars</code> list or in the local context of the caller context? If there is only a simple substitution involved here maybe I could use a function that replace the occurrence of mvars instead of <code>Expr.beta</code>?</p>",
        "id": 438723618,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1715749052
    },
    {
        "content": "<p>In this case I found an example where the lctx has <code>_uniq.63</code>, and the <code>fvars</code> list of a delay assigned mvar has <code>_uniq.80</code>, but the pending mvar is assigned to <code>Eq.{?_uniq.83} ?_uniq.87 ?_uniq.88 ?_uniq.89</code></p>",
        "id": 438857335,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1715795567
    }
]