[
    {
        "content": "<p>mwe</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"w\"> </span><span class=\"n\">Elab</span><span class=\"w\"> </span><span class=\"n\">Command</span>\n\n<span class=\"kn\">syntax</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">generate_capnproto</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"s2\">\"#generate_capnproto \"</span><span class=\"w\"> </span><span class=\"n\">term</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"s2\">\" {{ \"</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"s2\">\" }}\"</span><span class=\"w\"> </span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">command</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">command_elab</span><span class=\"w\"> </span><span class=\"n\">generate_capnproto</span><span class=\"kd\">]</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">genCapnProtoHandler</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">CommandElab</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">stx</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"n\">logInfo</span><span class=\"w\"> </span><span class=\"o\">(</span>\n<span class=\"w\">    </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">liftCoreM</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">PrettyPrinter</span><span class=\"bp\">.</span><span class=\"n\">ppCommand</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"w\"> </span><span class=\"n\">stx</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"n\">generate_capnproto</span><span class=\"w\"> </span><span class=\"s2\">\"hi\"</span><span class=\"w\"> </span><span class=\"o\">{{</span>\n<span class=\"w\">  </span><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">what</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">  </span><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">who</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n<span class=\"o\">}}</span>\n<span class=\"c1\">-- Prints out:</span>\n<span class=\"c1\">-- #generate_capnproto \"hi\" {{</span>\n<span class=\"c1\">--   def what :=</span>\n<span class=\"c1\">--     1def who :=</span>\n<span class=\"c1\">--     2 }}</span>\n</code></pre></div>\n<p>Is there an easy way to get nicer output here?</p>",
        "id": 444101361,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1718140276
    },
    {
        "content": "<p>the newline is missing no matter what commands you put in there and regardless of the line length; I got this output in my actual code before making the MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"w\">  </span><span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"kn\">#check</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"n\">def</span><span class=\"w\"> </span><span class=\"bp\">«</span><span class=\"n\">schema</span><span class=\"bp\">.</span><span class=\"n\">capnp</span><span class=\"o\">:</span><span class=\"n\">Test</span><span class=\"bp\">»</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">    </span><span class=\"n\">CapnProtoLean</span><span class=\"bp\">.</span><span class=\"n\">Struct</span><span class=\"w\"> </span><span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">CapnProtoLean</span><span class=\"bp\">.</span><span class=\"n\">Struct</span><span class=\"bp\">.</span><span class=\"n\">IsStruct</span><span class=\"w\"> </span><span class=\"bp\">«</span><span class=\"n\">schema</span><span class=\"bp\">.</span><span class=\"n\">capnp</span><span class=\"o\">:</span><span class=\"n\">Test</span><span class=\"bp\">»</span>\n<span class=\"w\">      </span><span class=\"kn\">where</span>\n<span class=\"w\">    </span><span class=\"n\">fromStruct</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">id</span>\n<span class=\"w\">    </span><span class=\"n\">expectedDataWords</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"n\">expectedPtrWords</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"n\">def</span><span class=\"w\"> </span><span class=\"bp\">«</span><span class=\"n\">schema</span><span class=\"bp\">.</span><span class=\"n\">capnp</span><span class=\"o\">:</span><span class=\"n\">Test</span><span class=\"bp\">».</span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">self</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">«</span><span class=\"n\">schema</span><span class=\"bp\">.</span><span class=\"n\">capnp</span><span class=\"o\">:</span><span class=\"n\">Test</span><span class=\"bp\">»</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">UInt64</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">    </span><span class=\"gr\">sorry</span><span class=\"w\"> </span><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"bp\">«</span><span class=\"n\">schema</span><span class=\"bp\">.</span><span class=\"n\">capnp</span><span class=\"o\">:</span><span class=\"n\">Test</span><span class=\"bp\">».</span><span class=\"n\">bar</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">self</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">«</span><span class=\"n\">schema</span><span class=\"bp\">.</span><span class=\"n\">capnp</span><span class=\"o\">:</span><span class=\"n\">Test</span><span class=\"bp\">»</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">CapnProtoLean</span><span class=\"bp\">.</span><span class=\"n\">List</span><span class=\"bp\">.</span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">UInt64</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">    </span><span class=\"gr\">sorry</span><span class=\"w\"> </span><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"bp\">«</span><span class=\"n\">schema</span><span class=\"bp\">.</span><span class=\"n\">capnp</span><span class=\"o\">:</span><span class=\"n\">Test</span><span class=\"bp\">».</span><span class=\"n\">zing</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">self</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">«</span><span class=\"n\">schema</span><span class=\"bp\">.</span><span class=\"n\">capnp</span><span class=\"o\">:</span><span class=\"n\">Test</span><span class=\"bp\">»</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">CapnProtoLean</span><span class=\"bp\">.</span><span class=\"n\">List</span><span class=\"bp\">.</span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"bp\">«</span><span class=\"n\">schema</span><span class=\"bp\">.</span><span class=\"n\">capnp</span><span class=\"o\">:</span><span class=\"n\">Test</span><span class=\"bp\">»</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">    </span><span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 444102322,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1718140615
    },
    {
        "content": "<p>Here's a solution:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">syntax</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">generate_capnproto</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"s2\">\"#generate_capnproto \"</span><span class=\"w\"> </span><span class=\"n\">term</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"s2\">\" {{ \"</span><span class=\"w\"> </span><span class=\"n\">ppDedent</span><span class=\"o\">((</span><span class=\"n\">ppLine</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">ppLine</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"s2\">\" }}\"</span><span class=\"w\"> </span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">command</span>\n</code></pre></div>",
        "id": 444102358,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718140633
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">generate_capnproto</span><span class=\"w\"> </span><span class=\"s2\">\"hi\"</span><span class=\"w\"> </span><span class=\"o\">{{</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">what</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"mi\">1</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">who</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"mi\">2</span>\n<span class=\"w\"> </span><span class=\"o\">}}</span>\n</code></pre></div>",
        "id": 444102380,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718140646
    },
    {
        "content": "<p>Oh, I didn't need the <code>ppDedent</code></p>",
        "id": 444102396,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718140654
    },
    {
        "content": "<p>Here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">syntax</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">generate_capnproto</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"s2\">\"#generate_capnproto \"</span><span class=\"w\"> </span><span class=\"n\">term</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"s2\">\" {{ \"</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ppLine</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">ppDedent</span><span class=\"o\">(</span><span class=\"n\">ppLine</span><span class=\"w\"> </span><span class=\"s2\">\"}}\"</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">command</span>\n</code></pre></div>\n<p>yields</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">generate_capnproto</span><span class=\"w\"> </span><span class=\"s2\">\"hi\"</span><span class=\"w\"> </span><span class=\"o\">{{</span>\n<span class=\"w\">  </span><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">what</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>\n<span class=\"w\">  </span><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">who</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">    </span><span class=\"mi\">2</span>\n<span class=\"o\">}}</span>\n</code></pre></div>",
        "id": 444102508,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718140701
    },
    {
        "content": "<p>new parser combinator discovered <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 444102527,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1718140712
    }
]