[
    {
        "content": "<p>Can I somehow make a system call from within Lean that will tell me whether  it is running on Linux, Windows, OS/X, or OS/X ARM?</p>",
        "id": 431136357,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1712163146
    },
    {
        "content": "<p>There are</p>\n<ul>\n<li><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=System.Platform.isWindows#doc\">docs#System.Platform.isWindows</a>,</li>\n<li><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=System.Platform.isOSX#doc\">docs#System.Platform.isOSX</a>,</li>\n<li><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=System.Platform.isEmscripten#doc\">docs#System.Platform.isEmscripten</a>.</li>\n</ul>\n<p>I <del>never</del>just used them and I do not know what <code>Emscripten</code>, but they look promising!</p>",
        "id": 431137644,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712163567
    },
    {
        "content": "<p>And there is also</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">System.Platform.target</span> <span class=\"c1\">--  `x86_64-unknown-linux-gnu`, on my computer</span>\n</code></pre></div>",
        "id": 431138673,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712163876
    },
    {
        "content": "<p>Thanks! This is really helpful.</p>",
        "id": 431138846,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1712163945
    },
    {
        "content": "<p>I do not know why you need them, but I knew about those functions since, when messing with paths, there is already support in <code>IO.FS</code> for dealing with path separators, extensions and such.</p>",
        "id": 431139312,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712164118
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/270676-lean4/topic/determine.20operating.20system/near/431137644\">said</a>:</p>\n<blockquote>\n<p>I <del>never</del>just used them and I do not know what <code>Emscripten</code>, but they look promising!</p>\n</blockquote>\n<p><code>emscripten</code> is the WASM compiler. But compiling lean to wasm, for running lean client-side on the web, is (unfortunately) no longer really supported and is at \"experimental\" support level at this point.</p>",
        "id": 431205580,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712194401
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span> Here's the code (extracted from <code>cache</code>) for differentiating the 5 different OS/arch combinations Lean officially supports:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">IO</span> <span class=\"n\">String</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"n\">System.Platform.isWindows</span> <span class=\"k\">then</span>\n    <span class=\"n\">pure</span> <span class=\"s2\">\"x86 Windows\"</span>\n  <span class=\"k\">else</span>\n    <span class=\"k\">let</span> <span class=\"n\">arch</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">stdout.trim</span><span class=\"o\">)</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">IO.Process.output</span> <span class=\"o\">{</span> <span class=\"n\">cmd</span> <span class=\"o\">:=</span> <span class=\"s2\">\"uname\"</span><span class=\"o\">,</span> <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"-m\"</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n    <span class=\"k\">match</span> <span class=\"n\">arch</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"s2\">\"arm64\"</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">System.Platform.isOSX</span> <span class=\"k\">then</span> <span class=\"n\">pure</span> <span class=\"s2\">\"ARM OSX\"</span> <span class=\"k\">else</span> <span class=\"n\">pure</span> <span class=\"s2\">\"ARM Linux\"</span>\n    <span class=\"bp\">|</span> <span class=\"s2\">\"x86_64\"</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">System.Platform.isOSX</span> <span class=\"k\">then</span> <span class=\"n\">pure</span> <span class=\"s2\">\"x86 OSX\"</span> <span class=\"k\">else</span> <span class=\"n\">pure</span> <span class=\"s2\">\"x86 Linux\"</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">IO.userError</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"unsupported architecture {arch}\"</span>\n</code></pre></div>",
        "id": 431206401,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712195026
    },
    {
        "content": "<p>Thanks to both of you! </p>\n<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span>, I am co-teaching a course with a Lean repository in which students are required to do an exercise with an SMT solver. They create a problem file in Lean, send it to Z3, and then read back and decode the solution. The easiest way to let students call Z3 is to put a copy of each binary in the repository and automatically call the appropriate one. Ultimately it would be nice to have a better solution where e.g. the lakefile requires a \"lean-z3\" project and e.g. <code>lake exe cache get</code> fetches the right one. But in the meanwhile, this solution does the job.</p>",
        "id": 431208934,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1712196564
    },
    {
        "content": "<p>Jeremy, that's a cool project: thanks for the details!</p>\n<p>Mario, thanks for the explanation about <code>emscripten</code>!</p>",
        "id": 431222416,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712204479
    }
]