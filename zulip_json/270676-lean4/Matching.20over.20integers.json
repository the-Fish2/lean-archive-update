[
    {
        "content": "<p>I'm trying to write matches over integers. The following works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">is_one</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n</code></pre></div>\n<p>However, I have a syntax error here (<code>invalid pattern, constructor or constant marked with '[match_pattern]' expected</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">is_minus_one</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n</code></pre></div>\n<p>Is there something I can do to make Lean accept this definition? In particular, I'm not sure how the <code>-1</code> is elaborated.</p>",
        "id": 425346251,
        "sender_full_name": "Son Ho",
        "timestamp": 1709828797
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">is_minus_one</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">is_minus_one</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"c1\">-- true</span>\n<span class=\"k\">#eval</span> <span class=\"n\">is_minus_one</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"c1\">-- false</span>\n<span class=\"k\">#eval</span> <span class=\"n\">is_minus_one</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">)</span>  <span class=\"c1\">-- false</span>\n</code></pre></div>\n<p>Note <code>Int</code> instead of <code>ℤ</code>. <code>ℤ</code> is a Mathlib notation, so maybe it just wasn't imported.</p>",
        "id": 425347529,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1709829167
    },
    {
        "content": "<p>This is strange, it still doesn't work on my side. Maybe it is because on the contrary I imported too many things from mathlib?</p>",
        "id": 425347841,
        "sender_full_name": "Son Ho",
        "timestamp": 1709829254
    },
    {
        "content": "<p>Can you post a file where it doesn't work?</p>",
        "id": 425347993,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1709829299
    },
    {
        "content": "<p>Yes, I'm currently minimizing it</p>",
        "id": 425348031,
        "sender_full_name": "Son Ho",
        "timestamp": 1709829311
    },
    {
        "content": "<p>The problem comes from the fact that I introduced a \"heterogeneous negation\" typeclass, with the corresponding notation.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">HNeg</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n  <span class=\"n\">hNeg</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n\n<span class=\"kd\">prefix</span><span class=\"o\">:</span><span class=\"mi\">75</span>  <span class=\"s2\">\"-\"</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">HNeg.hNeg</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_minus_one</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n</code></pre></div>\n<p>So my question becomes (sorry for the noise): how can I introduce the notation above without breaking the <code>is_minus_one</code> example?</p>",
        "id": 425349179,
        "sender_full_name": "Son Ho",
        "timestamp": 1709829672
    },
    {
        "content": "<p>Then you have to add the <code>match_pattern</code> attribute. This tells Lean that an arbitrary function (here <code>HNeg.hNeg</code>) is allowed to appear in patterns.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">HNeg</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n  <span class=\"n\">hNeg</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n\n<span class=\"kd\">prefix</span><span class=\"o\">:</span><span class=\"mi\">75</span>  <span class=\"s2\">\"-\"</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">HNeg.hNeg</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">match_pattern</span><span class=\"o\">]</span> <span class=\"n\">HNeg.hNeg</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_minus_one</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n</code></pre></div>",
        "id": 425351448,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1709830345
    },
    {
        "content": "<p>Perfect, thanks Jannis! :)</p>",
        "id": 425351773,
        "sender_full_name": "Son Ho",
        "timestamp": 1709830448
    }
]