[
    {
        "content": "<p>I've been trying to prove some theorems with Groups, but I ended up with this error that I have no idea how to fix. It's on the end of the code block, when I'm trying to prove that <code>inv id = id</code>, in other words.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">------------------------------------------------</span>\n<span class=\"c1\">-- Useful Theorems :</span>\n<span class=\"c1\">------------------------------------------------</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">determinist_fun</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a'</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a'</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">a'</span> <span class=\"n\">h</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n\n<span class=\"c1\">------------------------------------------------</span>\n<span class=\"c1\">-- Group Definition :</span>\n<span class=\"c1\">------------------------------------------------</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Group</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span>\n  <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">G</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span>\n  <span class=\"n\">Op_Ass</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">op</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"n\">Id_Op</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">op</span> <span class=\"n\">e</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n  <span class=\"n\">Op_Id</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">op</span> <span class=\"n\">a</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n  <span class=\"n\">Op_Inv_L</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">e</span>\n  <span class=\"n\">Op_Inv_R</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">op</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">e</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Group</span>\n\n<span class=\"kd\">infixl</span><span class=\"o\">:</span><span class=\"mi\">65</span>   <span class=\"s2\">\" ⋆ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">op</span>\n<span class=\"kd\">postfix</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"s2\">\"⁻¹\"</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">inv</span>\n\n<span class=\"c1\">------------------------------------------------</span>\n<span class=\"c1\">-- Group Theorems:</span>\n<span class=\"c1\">------------------------------------------------</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Op_Can_R</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">⋆</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">⋆</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span>  <span class=\"n\">a</span> <span class=\"bp\">⋆</span> <span class=\"n\">c</span> <span class=\"bp\">⋆</span> <span class=\"n\">c</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">⋆</span> <span class=\"n\">c</span> <span class=\"bp\">⋆</span> <span class=\"n\">c</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">exact</span> <span class=\"n\">determinist_fun</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">⋆</span> <span class=\"n\">c</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⋆</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⋆</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Op_Ass</span><span class=\"o\">,</span> <span class=\"n\">Op_Inv_R</span><span class=\"o\">,</span> <span class=\"n\">Op_Ass</span><span class=\"o\">,</span> <span class=\"n\">Op_Inv_R</span><span class=\"o\">,</span> <span class=\"n\">Op_Id</span><span class=\"o\">,</span> <span class=\"n\">Op_Id</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h1</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h1</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Op_Can_L</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">c</span> <span class=\"bp\">⋆</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">⋆</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span>  <span class=\"n\">c</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">⋆</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">⋆</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">⋆</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">⋆</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">exact</span> <span class=\"n\">determinist_fun</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">⋆</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">⋆</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">⋆</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Op_Ass</span><span class=\"o\">,</span> <span class=\"n\">Op_Inv_L</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Op_Ass</span><span class=\"o\">,</span> <span class=\"n\">Op_Inv_L</span><span class=\"o\">,</span> <span class=\"n\">Id_Op</span><span class=\"o\">,</span> <span class=\"n\">Id_Op</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h1</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h1</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Pass</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">⋆</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span>  <span class=\"n\">a</span> <span class=\"bp\">⋆</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">⋆</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">exact</span> <span class=\"n\">determinist_fun</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">⋆</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Op_Inv_R</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h1</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h1</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Back</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">⋆</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span>  <span class=\"n\">a</span> <span class=\"bp\">⋆</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">⋆</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"bp\">⋆</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">exact</span> <span class=\"n\">determinist_fun</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">⋆</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⋆</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"n\">e</span> <span class=\"n\">h</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Id_Op</span><span class=\"o\">,</span> <span class=\"n\">Op_Ass</span><span class=\"o\">,</span> <span class=\"n\">Op_Inv_L</span><span class=\"o\">,</span> <span class=\"n\">Op_Id</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h1</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h1</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Op_Exists_Res_R</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">⋆</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">⋆</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Op_Ass</span><span class=\"o\">,</span> <span class=\"n\">Op_Inv_R</span><span class=\"o\">,</span> <span class=\"n\">Id_Op</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Op_Exists_Res_L</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">⋆</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨(</span><span class=\"n\">b</span> <span class=\"bp\">⋆</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">),</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Op_Ass</span><span class=\"o\">,</span> <span class=\"n\">Op_Inv_L</span><span class=\"o\">,</span> <span class=\"n\">Op_Id</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Op_Only_Res_R</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">u</span> <span class=\"n\">u'</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">⋆</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">⋆</span> <span class=\"n\">u'</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"n\">u'</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">u</span> <span class=\"n\">u'</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⋆</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">⋆</span> <span class=\"n\">u'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h.1</span><span class=\"o\">,</span> <span class=\"n\">h.2</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Op_Can_L</span> <span class=\"n\">u</span> <span class=\"n\">u'</span> <span class=\"n\">a</span> <span class=\"n\">h1</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Op_Only_Res_L</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">u</span> <span class=\"n\">u'</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">u</span> <span class=\"bp\">⋆</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">u'</span> <span class=\"bp\">⋆</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"n\">u'</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">u</span> <span class=\"n\">u'</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">⋆</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">u'</span> <span class=\"bp\">⋆</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h.1</span><span class=\"o\">,</span> <span class=\"n\">h.2</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Op_Can_R</span> <span class=\"n\">u</span> <span class=\"n\">u'</span> <span class=\"n\">a</span> <span class=\"n\">h1</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Cheap_Id_L</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">u</span> <span class=\"bp\">⋆</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">u</span> <span class=\"n\">h</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Op_Only_Res_L</span> <span class=\"n\">a</span> <span class=\"n\">u</span> <span class=\"n\">e</span> <span class=\"o\">⟨</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">Id_Op</span> <span class=\"n\">a</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Cheap_Id_R</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">⋆</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">u</span> <span class=\"n\">a</span> <span class=\"n\">h</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Op_Only_Res_R</span> <span class=\"n\">a</span> <span class=\"n\">u</span> <span class=\"n\">e</span> <span class=\"o\">⟨</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">Op_Id</span> <span class=\"n\">a</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Cheap_Inv_L</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">u</span> <span class=\"bp\">⋆</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"bp\">→</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">u</span> <span class=\"n\">h</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Op_Only_Res_L</span> <span class=\"n\">a</span> <span class=\"n\">u</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"o\">⟨</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">Op_Inv_L</span> <span class=\"n\">a</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Cheap_Inv_R</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">⋆</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"bp\">→</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">u</span> <span class=\"n\">h</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Op_Only_Res_R</span> <span class=\"n\">a</span> <span class=\"n\">u</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"o\">⟨</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">Op_Inv_R</span> <span class=\"n\">a</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Inv_Cheap_R</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">⋆</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"bp\">→</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">u</span> <span class=\"n\">h</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Op_Only_Res_R</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"n\">u</span> <span class=\"n\">a</span> <span class=\"o\">⟨</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">Op_Inv_L</span> <span class=\"n\">a</span><span class=\"o\">⟩</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Inv_Inv</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span>\n  <span class=\"k\">suffices</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">⋆</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"k\">from</span> <span class=\"n\">Inv_Cheap_R</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"n\">h</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Op_Inv_R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Inv_Id</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">e</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"k\">suffices</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">⋆</span> <span class=\"n\">e</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"k\">from</span> <span class=\"n\">Cheap_Id_R</span> <span class=\"n\">e</span><span class=\"bp\">⁻¹</span> <span class=\"n\">h</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">Group.lean:145:9</span>\n<span class=\"cm\">Expected type</span>\n<span class=\"cm\">G : Type ?u.16886</span>\n<span class=\"cm\">inst✝ : Group G</span>\n<span class=\"cm\">⊢ {G : Type ?u.16893} → [self : Group G] → G</span>\n<span class=\"cm\">Messages (1)</span>\n<span class=\"cm\"> Group.lean:145:8</span>\n<span class=\"cm\">  typeclass instance problem is stuck, it is often due to metavariables</span>\n<span class=\"cm\">    Group ?m.16910</span>\n<span class=\"cm\">All Messages (1)</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 438037872,
        "sender_full_name": "Hannah Santos",
        "timestamp": 1715370661
    },
    {
        "content": "<p>Lean doesn't know what the type of <code>e</code> is supposed to be. If you explicitly annotate its type, it works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Inv_Id</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">e</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 438038254,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1715370873
    },
    {
        "content": "<p>Yes, there is no way Lean can guess the type of <code>e</code> in this statement.</p>",
        "id": 438038560,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715371067
    },
    {
        "content": "<p>But why does that happen? Wasn't it supposed to be infer it by the type of <code>=</code>?</p>",
        "id": 438038629,
        "sender_full_name": "Hannah Santos",
        "timestamp": 1715371086
    },
    {
        "content": "<p>Or by the Goup.e in itself?</p>",
        "id": 438038658,
        "sender_full_name": "Hannah Santos",
        "timestamp": 1715371103
    },
    {
        "content": "<p>Perhaps this is more clear in the following example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G'</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">e</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>In this case, which type should Lean choose for <code>e</code>?</p>",
        "id": 438038687,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1715371128
    },
    {
        "content": "<p>Also, lean complains about the <em>second</em> <code>e</code>, but you can ascript the <em>first</em> <code>e</code> and also that is good enough.</p>",
        "id": 438038747,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1715371172
    },
    {
        "content": "<p>Thank you, guys.</p>",
        "id": 438039026,
        "sender_full_name": "Hannah Santos",
        "timestamp": 1715371298
    },
    {
        "content": "<p>Side note: Your <code>determinist_fun</code> is basically just <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=congrArg#doc\">docs#congrArg</a>.</p>",
        "id": 438039034,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1715371301
    },
    {
        "content": "<p>I have tried getting mathlib, but even with the tutorial I just couldn't, no idea why.</p>",
        "id": 438039328,
        "sender_full_name": "Hannah Santos",
        "timestamp": 1715371441
    },
    {
        "content": "<p>Also, I don't mind, since I use Lean for this specific reason anyway, to write proofs and study.</p>",
        "id": 438039473,
        "sender_full_name": "Hannah Santos",
        "timestamp": 1715371534
    },
    {
        "content": "<p>congrArg is not part of mathlib, it's part of Lean itself</p>",
        "id": 438039791,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715371701
    },
    {
        "content": "<p>(you can tell because the top of the page that links to says <code>Init.</code> instead of <code>Mathlib.</code>)</p>",
        "id": 438039832,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715371738
    },
    {
        "content": "<p>(Also, if you <em>do</em> want to use Mathlib, people here could probably walk you through the setup in no time.)</p>",
        "id": 438040043,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1715371851
    }
]