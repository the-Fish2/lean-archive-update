[
    {
        "content": "<p>If I do some refactoring, resulting in file <code>A.lean</code> importing <code>B.lean</code> which doesn't exist, the error message doesn't mention <code>A</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">%</span> <span class=\"n\">lake</span> <span class=\"n\">build</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"sc\">'B'</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">such</span> <span class=\"n\">file</span> <span class=\"n\">or</span> <span class=\"n\">directory</span> <span class=\"o\">(</span><span class=\"n\">error</span> <span class=\"n\">code</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"n\">file</span><span class=\"o\">:</span> <span class=\"bp\">./././</span><span class=\"n\">B.lean</span>\n</code></pre></div>\n<p>That's an artificial error message.  Here is a real one:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">%</span> <span class=\"n\">lake</span> <span class=\"n\">build</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">'</span><span class=\"n\">Ray.Dynamics.Multibrot.Effective'</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">such</span> <span class=\"n\">file</span> <span class=\"n\">or</span> <span class=\"n\">directory</span> <span class=\"o\">(</span><span class=\"n\">error</span> <span class=\"n\">code</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"n\">file</span><span class=\"o\">:</span> <span class=\"bp\">./././</span><span class=\"n\">Ray</span><span class=\"bp\">/</span><span class=\"n\">Dynamics</span><span class=\"bp\">/</span><span class=\"n\">Multibrot</span><span class=\"bp\">/</span><span class=\"n\">Effective.lean</span>\n</code></pre></div>\n<p>Here the problematic files importing the now missing <code>Effective.lean</code> are</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">%</span> <span class=\"n\">sg</span> <span class=\"bp\">-</span><span class=\"n\">w</span> <span class=\"n\">Effective</span> <span class=\"bp\">|</span> <span class=\"n\">grep</span> <span class=\"kn\">import</span>\n<span class=\"bp\">./</span><span class=\"n\">Ray.lean</span><span class=\"o\">:</span><span class=\"kn\">import</span> <span class=\"n\">Ray.Dynamics.Multibrot.Effective</span>\n<span class=\"bp\">./</span><span class=\"n\">Ray</span><span class=\"bp\">/</span><span class=\"n\">Dynamics</span><span class=\"bp\">/</span><span class=\"n\">Multibrot</span><span class=\"bp\">/</span><span class=\"n\">Isomorphism.lean</span><span class=\"o\">:</span><span class=\"kn\">import</span> <span class=\"n\">Ray.Dynamics.Multibrot.Effective</span>\n</code></pre></div>\n<p>Should I file this as a bug?  Would it go in the lean4 repo?</p>",
        "id": 416012540,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1705493107
    },
    {
        "content": "<p>I think this is already fixed</p>",
        "id": 416012954,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705493252
    },
    {
        "content": "<p>Ah, nice!  Is the problem that I'm using <code>lake</code> from Homebrew and it's a bit old?</p>",
        "id": 416013028,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1705493283
    },
    {
        "content": "<p>no, it's not in an RC yet</p>",
        "id": 416013156,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705493336
    },
    {
        "content": "<p>but on the development version of lean you get errors like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">'</span><span class=\"n\">test.Test'</span> <span class=\"bp\">▸</span> <span class=\"bp\">'</span><span class=\"n\">Test.A'</span> <span class=\"bp\">▸</span> <span class=\"bp\">'</span><span class=\"n\">Test.foo'</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">such</span> <span class=\"n\">file</span> <span class=\"n\">or</span> <span class=\"n\">directory</span> <span class=\"o\">(</span><span class=\"n\">error</span> <span class=\"n\">code</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"n\">file</span><span class=\"o\">:</span> <span class=\"bp\">./././</span><span class=\"n\">Test</span><span class=\"bp\">/</span><span class=\"n\">foo.lean</span>\n</code></pre></div>",
        "id": 416013215,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705493363
    },
    {
        "content": "<p>the sequence of modules seems to be the path from the root of the import hierarchy to the nonexistent file, generally you only care about the second to last entry</p>",
        "id": 416013474,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705493457
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Error.20messages.20for.20missing.20files.20don't.20say.20the.20culprit.20file/near/416013156\">said</a>:</p>\n<blockquote>\n<p>no, it's not in an RC yet</p>\n</blockquote>\n<p>I'm pretty sure this was out a while ago? <a href=\"https://github.com/leanprover/lean4/pull/2616\">lean4#2616</a> so it should be in recent lake versions. Do you have a reason to use homebrew's Geoffrey?</p>",
        "id": 416014207,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1705493792
    },
    {
        "content": "<p>Is the error now attached the the <code>import</code> line with the problem?</p>",
        "id": 416014268,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705493822
    },
    {
        "content": "<p>I just tested it on v4.5.0-rc1 and did not get the nice error message</p>",
        "id": 416014612,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705493989
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Lake</span> <span class=\"n\">version</span> <span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">-</span><span class=\"n\">b614ff1</span> <span class=\"o\">(</span><span class=\"n\">Lean</span> <span class=\"n\">version</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">-</span><span class=\"n\">rc1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 416014910,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705494100
    },
    {
        "content": "<p>Hmm, I'm sure I saw this working fine in my leaff demo <a href=\"https://youtu.be/VkKfIWoM3Ms?t=135\">https://youtu.be/VkKfIWoM3Ms?t=135</a> which was also <code>Lake version 5.0.0-b614ff1 (Lean version 4.5.0-rc1)</code></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"VkKfIWoM3Ms\" href=\"https://youtu.be/VkKfIWoM3Ms?t=135\"><img src=\"https://uploads.zulipusercontent.net/856d53b320ab024411b84c1e1622fbc3b00d3dba/68747470733a2f2f692e7974696d672e636f6d2f76692f566b4b6649576f4d334d732f64656661756c742e6a7067\"></a></div>",
        "id": 416015413,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1705494293
    },
    {
        "content": "<p>I just checked and the code in question is definitely present on <code>b614ff1d12bc</code></p>",
        "id": 416015463,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705494318
    },
    {
        "content": "<p>but if I try to just mangle an import in mathlib and run <code>lake build</code> I don't get any call stack</p>",
        "id": 416015550,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705494353
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/Error.20messages.20for.20missing.20files.20don't.20say.20the.20culprit.20file/near/416014268\">said</a>:</p>\n<blockquote>\n<p>Is the error now attached the the <code>import</code> line with the problem?</p>\n</blockquote>\n<p>Nope, that one is still future work, probably dependent on getting json output from lean</p>",
        "id": 416015747,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705494429
    },
    {
        "content": "<p>actually maybe not, since lake is the one that is reporting the missing file and also parses the imports</p>",
        "id": 416015905,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705494495
    },
    {
        "content": "<p>I guess the issue is in the other direction, the server doesn't understand what lake is saying</p>",
        "id": 416015978,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705494530
    },
    {
        "content": "<p>This was refactored in <a href=\"https://github.com/leanprover/lean4/pull/2677\">lean4#2677</a>, maybe the refactoring broke something? I don't know how to run lake tests</p>",
        "id": 416016306,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1705494644
    },
    {
        "content": "<p>I think you just run <code>./test.sh</code> in each lake test</p>",
        "id": 416016872,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705494851
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/270676-lean4/topic/Error.20messages.20for.20missing.20files.20don't.20say.20the.20culprit.20file/near/416014207\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Error.20messages.20for.20missing.20files.20don't.20say.20the.20culprit.20file/near/416013156\">said</a>:</p>\n<blockquote>\n<p>no, it's not in an RC yet</p>\n</blockquote>\n<p>I'm pretty sure this was out a while ago? <a href=\"https://github.com/leanprover/lean4/pull/2616\">lean4#2616</a> so it should be in recent lake versions. Do you have a reason to use homebrew's Geoffrey?</p>\n</blockquote>\n<p>To amend: I’m using elan from Homebrew but <code>leanprover/lean4:v4.5.0-rc1</code> (same as mathlib4).</p>",
        "id": 416019044,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1705495614
    },
    {
        "content": "<p>Ok, ignore my message, I ran the commands in the test and the breadcrumb showed up</p>",
        "id": 416019765,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1705495889
    },
    {
        "content": "<p>I think the thing here is that <code>lake build</code> does not show the breadcrumb on Mathlib, but <code>lake setup-file File.lean Init Import1 Import2</code>, which is what gets executed via LSP when editing a file interactively, does.</p>",
        "id": 416330531,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1705523186
    }
]