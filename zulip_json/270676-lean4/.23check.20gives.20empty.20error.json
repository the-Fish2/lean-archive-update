[
    {
        "content": "<p>I was speed-running through mpil when I came across a case where <code>#check</code> would error out with no error message. I have isolated the <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> and marked the spot with the comment. It seems to show an error on the entire line containing <code>#check</code> rather than just the argument to it. Is this a parsing error? Is the empty error message intentional? If so why?:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"c1\">-- Incorrect answer for demonstrating error</span>\n<span class=\"kd\">def</span> <span class=\"n\">ex9expr_wrong</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"n\">Expr.forallE</span> <span class=\"bp\">`</span><span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">sort</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">forallE</span> <span class=\"bp\">`</span><span class=\"n\">hP</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">bvar</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">bvar</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">.</span><span class=\"n\">default</span><span class=\"o\">)</span> <span class=\"bp\">.</span><span class=\"n\">default</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"ex9expr_wrong_term\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">return</span> <span class=\"n\">ex9expr_wrong</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">ex9expr_wrong_term</span>\n\n<span class=\"c1\">-- The correct so</span>\n<span class=\"kd\">def</span> <span class=\"n\">ex9expr</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"n\">Expr.lam</span> <span class=\"bp\">`</span><span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">sort</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">lam</span> <span class=\"bp\">`</span><span class=\"n\">hP</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">bvar</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">bvar</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">.</span><span class=\"n\">default</span><span class=\"o\">)</span> <span class=\"bp\">.</span><span class=\"n\">default</span>\n</code></pre></div>\n<p>EDIT : Example matches screenshot</p>",
        "id": 421896623,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1708101400
    },
    {
        "content": "<p>Here's a screenshot of what I see<br>\n<a href=\"/user_uploads/3121/_TGV1T8t5W0cUlHLZ5Di0CzZ/Screenshot-2024-02-16-at-17.39.08.png\">Screenshot-2024-02-16-at-17.39.08.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/_TGV1T8t5W0cUlHLZ5Di0CzZ/Screenshot-2024-02-16-at-17.39.08.png\" title=\"Screenshot-2024-02-16-at-17.39.08.png\"><img src=\"/user_uploads/3121/_TGV1T8t5W0cUlHLZ5Di0CzZ/Screenshot-2024-02-16-at-17.39.08.png\"></a></div>",
        "id": 421897223,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1708101592
    },
    {
        "content": "<p>I have a panic pop up, and it gets printed in the error log.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Lean</span> <span class=\"n\">server</span> <span class=\"n\">printed</span> <span class=\"n\">an</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">PANIC</span> <span class=\"n\">at</span> <span class=\"n\">Lean.Meta.whnfEasyCases</span> <span class=\"n\">Lean.Meta.WHNF</span><span class=\"o\">:</span><span class=\"mi\">363</span><span class=\"o\">:</span><span class=\"mi\">22</span><span class=\"o\">:</span> <span class=\"n\">loose</span> <span class=\"n\">bvar</span> <span class=\"k\">in</span> <span class=\"n\">expression</span>\n</code></pre></div>",
        "id": 421897450,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708101654
    },
    {
        "content": "<p>I extended that example to make sure that ex9expr is correct. So the only difference between <code>ex9expr</code> and <code>ex9expr_wrong</code> is that the former uses <code>Expr.lam</code> and the latter uses <code>Expr.forallE</code>.</p>",
        "id": 421898207,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1708101919
    },
    {
        "content": "<p>Here's the full example : </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"c1\">-- Incorrect answer for demonstrating error</span>\n<span class=\"kd\">def</span> <span class=\"n\">ex9expr_wrong</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"n\">Expr.forallE</span> <span class=\"bp\">`</span><span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">sort</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">forallE</span> <span class=\"bp\">`</span><span class=\"n\">hP</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">bvar</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">bvar</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">.</span><span class=\"n\">default</span><span class=\"o\">)</span> <span class=\"bp\">.</span><span class=\"n\">default</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"ex9expr_wrong_term\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">return</span> <span class=\"n\">ex9expr_wrong</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">ex9expr_wrong_term</span>\n\n<span class=\"c1\">-- The correct so</span>\n<span class=\"kd\">def</span> <span class=\"n\">ex9expr</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"n\">Expr.lam</span> <span class=\"bp\">`</span><span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">sort</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">lam</span> <span class=\"bp\">`</span><span class=\"n\">hP</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">bvar</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">bvar</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">.</span><span class=\"n\">default</span><span class=\"o\">)</span> <span class=\"bp\">.</span><span class=\"n\">default</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"ex9expr_term\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">return</span> <span class=\"n\">ex9expr</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">ex9expr_term</span>\n</code></pre></div>",
        "id": 421898300,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1708101961
    },
    {
        "content": "<p>Does <code>forallE</code> deal with bound variables differently?</p>",
        "id": 421898412,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1708101991
    },
    {
        "content": "<p>Otherwise I don't understand what is going wrong.</p>",
        "id": 421898474,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1708102021
    },
    {
        "content": "<p>With this last example, I'm seeing an error for the first <code>#check</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">expected</span>\n  <span class=\"n\">hP</span>\n</code></pre></div>\n<p>That's because forall typing rules require that in <code>.forallE n ty b _</code> that <code>b</code> be a type, but <code>.bvar 0</code> is referring to <code>hP</code>, which is a proof of <code>p</code>.</p>",
        "id": 421899248,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708102282
    },
    {
        "content": "<p>There's no such constraint for <code>.lam n ty b _</code> other than that <code>ty</code> be a type.</p>",
        "id": 421899415,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708102331
    },
    {
        "content": "<p>Sorry there is a typo in the second example. I will fix it. The first bvar is supposed to be 1</p>",
        "id": 421899726,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1708102446
    },
    {
        "content": "<p>If the first <code>.bvar</code> is <code>.bvar 1</code>, then you have a loose bvar, since it's referring to something \"outside\" the first <code>.forallE</code></p>",
        "id": 421899806,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708102489
    },
    {
        "content": "<p>Edited it. See the example now.</p>",
        "id": 421899894,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1708102522
    },
    {
        "content": "<p>I'm not sure that <code>#check</code> does full typechecking -- I think it only goes as far as trying to do <code>inferType</code>, which can randomly throw errors, but it's under no obligation to do so.</p>",
        "id": 421899941,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708102539
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/.23check.20gives.20empty.20error/near/421899806\">said</a>:</p>\n<blockquote>\n<p>If the first <code>.bvar</code> is <code>.bvar 1</code>, then you have a loose bvar, since it's referring to something \"outside\" the first <code>.forallE</code></p>\n</blockquote>\n<p>at the point that I am calling <code>.bvar  1</code> there are two binders. Also the example with <code>.lam</code> works perfectly.</p>",
        "id": 421900083,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1708102579
    },
    {
        "content": "<p>Try hovering over the variables in <code>#check ex9expr_term</code>. You see <code>#0</code> for the loose bvar, which is indicative of a malformed expression.</p>",
        "id": 421900120,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708102595
    },
    {
        "content": "<p>The <code>ty</code> parameter to <code>.forallE</code> and <code>.lam</code> doesn't count as being under the binder</p>",
        "id": 421900210,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708102629
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/.23check.20gives.20empty.20error/near/421900120\">said</a>:</p>\n<blockquote>\n<p>Try hovering over the variables in <code>#check ex9expr_term</code>. </p>\n</blockquote>\n<p>I get <code>(p : Prop) → (hP : p) → hP</code></p>",
        "id": 421900269,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1708102653
    },
    {
        "content": "<p>Hover over <code>hP</code></p>",
        "id": 421900308,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708102675
    },
    {
        "content": "<p>in the value, not the type</p>",
        "id": 421900373,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708102686
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/ACkOIq0PKsl2OPjRPH54jugO/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/ACkOIq0PKsl2OPjRPH54jugO/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/ACkOIq0PKsl2OPjRPH54jugO/image.png\"></a></div>",
        "id": 421900433,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708102713
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 421900809,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1708102849
    },
    {
        "content": "<p>Ah I see.</p>",
        "id": 421901006,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1708102918
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/.23check.20gives.20empty.20error/near/421900210\">said</a>:</p>\n<blockquote>\n<p>The <code>ty</code> parameter to <code>.forallE</code> and <code>.lam</code> doesn't count as being under the binder</p>\n</blockquote>\n<p>This makes sense. Although I am still not sure why the <code>forallE</code> version  causes <code>#check</code> to fail without a message.</p>",
        "id": 421901196,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1708102966
    },
    {
        "content": "<p>If you're getting a panic, I'm not sure there's much hope to get a message</p>",
        "id": 421901629,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708103111
    },
    {
        "content": "<p>This is what I see from that line:</p>\n<p><a href=\"/user_uploads/3121/dk_-XmUApKXVUMDBa4_x_u9s/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/dk_-XmUApKXVUMDBa4_x_u9s/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/dk_-XmUApKXVUMDBa4_x_u9s/image.png\"></a></div>",
        "id": 421901712,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708103137
    },
    {
        "content": "<p>The lambda also panics, but somehow in a different way (like it might be a panic in the pretty printer routines, which are invoked <em>after</em> the messages make it into a list to be shipped out to the infoview, as I understand it). Like I mentioned, I'm guessing because of  the differences in how <code>inferType</code> infers types for forall versus lambda.</p>",
        "id": 421902036,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708103233
    },
    {
        "content": "<p>okay. I am going to brush it under the carpet of implementation detail for now.</p>",
        "id": 421905655,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1708104366
    },
    {
        "content": "<p>Thanks a lot :)</p>",
        "id": 421905666,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1708104371
    }
]