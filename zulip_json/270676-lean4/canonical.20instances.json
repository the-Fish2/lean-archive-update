[
    {
        "content": "<p>I've found the reason for the need for <code>backward.synthInstance.canonInstances false</code> in probability theory in many places in mathlib:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Logic</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">FooClass</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">backward.synthInstance.canonInstances</span> <span class=\"n\">false</span> <span class=\"k\">in</span> <span class=\"c1\">-- if you comment this line, the instance is not found</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"n\">Œπ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">FooClass</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">FooClass</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">FooClass</span> <span class=\"n\">Œ±</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span>\n</code></pre></div>\n<p>In this example, when looking for <code>FooClass Œ±</code>, typeclass inference tries to apply <code>f ?m.36</code>, but it can not guess <code>?m.36</code>, so it decides (rightly) that the instance can not be found here. Then it caches that there is no instance, and does not try to apply the main instance. I can't really decide if this is a bug (if typeclass inference fails because it can not guess a metavariable, then it shouldn't cache the failure) or a feature (after all, in the assumptions of <code>bar</code> one may argue that there are many different instances of <code>FooClass Œ±</code> floating around, which shouldn't be allowed). Thoughts welcome!</p>\n<p>This shows up often in probability theory, where there is a main instance <code>[mŒ© : MeasurableSpace Œ©]</code>, and sub-sigma-algebras parameterized by time, i.e., <code>ùìï : ‚Ñï ‚Üí MeasurableSpace Œ©</code>. A workaround is to declare <code>mŒ©</code> after <code>ùìï</code> to make sure it's the one which is tried first, but for instance if you define a sequence of sub-sigma-algebras inside a proof this won't work. Not so bad when you're aware of the issue, but newcomers may easily get bitten by this.</p>",
        "id": 439257434,
        "sender_full_name": "S√©bastien Gou√´zel",
        "timestamp": 1715963699
    },
    {
        "content": "<p>It is not clear to me why <a href=\"https://github.com/leanprover/lean4/pull/4003\">lean4#4003</a> has the effect that there is no backtracking here. My understanding is that it should not backtrack to search for solutions of an instance search problem after one had been found already, but here no instance has been found at the relevant point.</p>",
        "id": 439274428,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1715971055
    },
    {
        "content": "<p>Reported as <a href=\"https://github.com/leanprover/lean4/pull/4213\">lean#4213</a>.</p>",
        "id": 439340442,
        "sender_full_name": "S√©bastien Gou√´zel",
        "timestamp": 1716023466
    },
    {
        "content": "<p>This has been fixed in <a href=\"https://github.com/leanprover/lean4/pull/4216\">lean#4216</a>, and will land in v4.9.0-rc1 at the beginning of June (but if you tell me you want it now, v4.8.0-rc2 is probably okay, which will land in a day or two).</p>",
        "id": 439489801,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716175627
    },
    {
        "content": "<p>It can definitely wait for 4.9. Thanks!</p>",
        "id": 439524481,
        "sender_full_name": "S√©bastien Gou√´zel",
        "timestamp": 1716193082
    }
]