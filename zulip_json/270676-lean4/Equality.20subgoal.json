[
    {
        "content": "<p>For some reason I am unable to state an equality subgoal using the <code>have</code> tactic - I keep getting syntax errors. Other kinds of subgoals work fine with <code>have</code>. I even rewrote it as <code>Eq a b</code> instead of <code>a = b</code> but that didn't help! This is with hierarchical bullets.</p>",
        "id": 420562896,
        "sender_full_name": "Robin Green",
        "timestamp": 1707436875
    },
    {
        "content": "<p>Could you make some working example that illustrates the error? (<a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> has some pointers)</p>",
        "id": 420565355,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1707438105
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Equiv.Defs</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">String.Pos.Valid</span> <span class=\"o\">{</span> <span class=\"n\">data</span> <span class=\"o\">:=</span> <span class=\"n\">c</span> <span class=\"o\">::</span> <span class=\"n\">cs</span> <span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">String.Pos.Valid</span> <span class=\"o\">{</span> <span class=\"n\">data</span> <span class=\"o\">:=</span> <span class=\"n\">cs</span> <span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">String.Pos.Valid</span><span class=\"o\">]</span>\n  <span class=\"n\">intros</span> <span class=\"n\">s</span> <span class=\"n\">s1</span> <span class=\"n\">seq</span> <span class=\"n\">h1</span>\n  <span class=\"n\">cases</span> <span class=\"n\">s</span>\n  <span class=\"bp\">.</span> <span class=\"n\">case</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"gr\">admit</span>\n\n  <span class=\"bp\">.</span> <span class=\"n\">case</span> <span class=\"n\">cons</span> <span class=\"n\">h</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">exists</span> <span class=\"n\">t</span>\n      <span class=\"n\">constructor</span>\n      <span class=\"bp\">.</span> <span class=\"n\">case</span> <span class=\"n\">left</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"gr\">admit</span>\n\n      <span class=\"bp\">.</span> <span class=\"n\">case</span> <span class=\"n\">right</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">c</span>\n          <span class=\"bp\">.</span> <span class=\"n\">case</span> <span class=\"n\">h2</span> <span class=\"bp\">=&gt;</span>\n              <span class=\"n\">injection</span> <span class=\"n\">seq</span>\n          <span class=\"bp\">.</span> <span class=\"n\">case</span> <span class=\"n\">blah</span> <span class=\"bp\">=&gt;</span>\n              <span class=\"gr\">admit</span>\n</code></pre></div>\n<p>I am getting <code>unexpected token '.'; expected '|'</code> from Lean 4.5.0 after the <code>have</code> line.</p>",
        "id": 420566696,
        "sender_full_name": "Robin Green",
        "timestamp": 1707438841
    },
    {
        "content": "<p>Without mathlib tactics, the only <code>have</code> available is the <code>have h2 : h = c := ...</code> form (that <code>...</code> could be <code>by ...</code> for example).</p>\n<p>If you add <code>import Mathlib.Tactic</code> you'll get the one you want. You can do <code>import Mathlib.Tactic.Have</code> if you just want this tactic.</p>",
        "id": 420567353,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1707439202
    }
]