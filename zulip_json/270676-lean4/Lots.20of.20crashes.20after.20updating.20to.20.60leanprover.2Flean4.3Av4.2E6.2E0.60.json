[
    {
        "content": "<p>I'm getting a lot of stack overflows after updating to v4.6.0.  This is in slightly fragile code that has constants like 2^64 everywhere, and each crash is fixable by replacing <code>simp</code> uses with <code>rw</code>, so presumably what's happening is that <code>simp</code> is now digging into the constants somehow in ways it didn't use to.  It's slightly annoying to minimize as it takes down the whole Lean server each time:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Lean</span> <span class=\"n\">server</span> <span class=\"n\">printed</span> <span class=\"n\">an</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">libc</span><span class=\"bp\">++</span><span class=\"n\">abi</span><span class=\"o\">:</span> <span class=\"n\">terminating</span> <span class=\"n\">due</span> <span class=\"n\">to</span> <span class=\"n\">uncaught</span> <span class=\"n\">exception</span> <span class=\"n\">of</span> <span class=\"n\">type</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">stack_space_exception</span><span class=\"o\">:</span> <span class=\"n\">deep</span> <span class=\"n\">recursion</span> <span class=\"n\">was</span> <span class=\"n\">detected</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">replace'</span> <span class=\"o\">(</span><span class=\"n\">potential</span> <span class=\"n\">solution</span><span class=\"o\">:</span> <span class=\"n\">increase</span> <span class=\"n\">stack</span> <span class=\"n\">space</span> <span class=\"k\">in</span> <span class=\"n\">your</span> <span class=\"n\">system</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>If this seems worth minimizing I can do that.</p>",
        "id": 420069078,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1707232341
    },
    {
        "content": "<p>Wild guess: some new <code>simprocs</code> might be the culprit. I assume these can be disabled?</p>",
        "id": 420071031,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1707232894
    },
    {
        "content": "<p><code>set_option simprocs false</code></p>",
        "id": 420071099,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1707232917
    },
    {
        "content": "<p>Here's a small example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.UInt</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">UInt64.toNat_add</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toNat</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">m.toNat</span> <span class=\"bp\">+</span> <span class=\"n\">n.toNat</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"n\">UInt64.size</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">UInt64.toNat</span><span class=\"o\">,</span> <span class=\"n\">UInt64.add_def</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">HAdd.hAdd</span><span class=\"o\">,</span> <span class=\"n\">Add.add</span><span class=\"o\">,</span> <span class=\"n\">Fin.add</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_eq</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 420071289,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1707232970
    },
    {
        "content": "<p>That set_option doesn't seem to fix it.</p>",
        "id": 420071393,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1707233001
    },
    {
        "content": "<p>Here's a version that doesn't crash, using different simp lemmas:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.UInt</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">UInt64.toNat_add</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toNat</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">m.toNat</span> <span class=\"bp\">+</span> <span class=\"n\">n.toNat</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"n\">UInt64.size</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">UInt64.toNat</span><span class=\"o\">,</span> <span class=\"n\">UInt64.add_def</span><span class=\"o\">,</span> <span class=\"n\">Fin.add_def</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 420071590,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1707233053
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"514145\">@Geoffrey Irving</span> I suspect Leo will be very interested, but only if you build a Mathlib-free example.</p>",
        "id": 420078117,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707234845
    },
    {
        "content": "<p>Here's a crash with no imports:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">UInt64.add_def</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">a.val</span> <span class=\"bp\">+</span> <span class=\"n\">b.val</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">UInt64.toNat_add</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toNat</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">m.toNat</span> <span class=\"bp\">+</span> <span class=\"n\">n.toNat</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"n\">UInt64.size</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">UInt64.toNat</span><span class=\"o\">,</span> <span class=\"n\">UInt64.add_def</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">HAdd.hAdd</span><span class=\"o\">,</span> <span class=\"n\">Add.add</span><span class=\"o\">,</span> <span class=\"n\">Fin.add</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_eq</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 420079513,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1707235230
    },
    {
        "content": "<p>Great, you can now open an issue in the lean4 repo.</p>",
        "id": 420079654,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707235269
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/issues/3267\">https://github.com/leanprover/lean4/issues/3267</a></p>",
        "id": 420094539,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1707239317
    }
]