[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> You mentioned you have pretty printing issues with <code>Rat</code>. You you give an example?</p>",
        "id": 425705700,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710006197
    },
    {
        "content": "<p>I am currently working on defining <code>NNRat.cast</code> in <a href=\"https://github.com/leanprover-community/mathlib4/pull/11203\">#11203</a> and as such I need to understand proofs like the one of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Rat.cast_mk_of_ne_zero#doc\">docs#Rat.cast_mk_of_ne_zero</a>. In there, you see a goal of <code>⊢ ↑{ num := n, den := d, den_nz := h, reduced := c } = ↑a / ↑b</code> (at the <code>-- Porting note: was symm</code>) and the corresponding goal in the <code>NNRat</code> version (which is in <a href=\"https://github.com/leanprover-community/mathlib4/pull/11203\">#11203</a> but not master) is even worse because there an extra <code>Subtype.mk</code> on top.</p>",
        "id": 425707481,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710007593
    },
    {
        "content": "<p>I'm not sure I understand what you expect it to print as</p>",
        "id": 425708438,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710008383
    },
    {
        "content": "<p>Anything less verbose. <code>⟨n, d, h, c⟩</code> would be great (maybe not as the default but at least as a <code>set_option</code>)</p>",
        "id": 425708970,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710008820
    },
    {
        "content": "<p>There is a set option for this, pp.structureInstances or something of the like iirc</p>",
        "id": 425718180,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1710017915
    }
]