[
    {
        "content": "<p>I'm working through the tactics chapter of Theorem Proving in Lean 4, and I came up with this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"conj_disj_assumptions\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">conj_disj_assumptions</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">first</span>\n                <span class=\"bp\">|</span> <span class=\"n\">assumption</span>\n                <span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">Or.inl</span><span class=\"bp\">;</span> <span class=\"n\">conj_disj_assumptions</span>\n                <span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">Or.inr</span><span class=\"bp\">;</span> <span class=\"n\">conj_disj_assumptions</span>\n                <span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">And.intro</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">conj_disj_assumptions</span> <span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">conj_disj_assumptions</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">conj_disj_assumptions</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">conj_disj_assumptions</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span> <span class=\"bp\">∨</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">conj_disj_assumptions</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span> <span class=\"bp\">∧</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">conj_disj_assumptions</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">conj_disj_assumptions</span>\n</code></pre></div>\n<p>Does something along these lines exist already?</p>",
        "id": 429765942,
        "sender_full_name": "James Sully",
        "timestamp": 1711502871
    },
    {
        "content": "<p>All those examples can by proved by <code>tauto</code>.</p>",
        "id": 429766608,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1711503277
    },
    {
        "content": "<p>beautiful, thank you</p>",
        "id": 429766812,
        "sender_full_name": "James Sully",
        "timestamp": 1711503414
    },
    {
        "content": "<p>just learned about <code>trivial</code>, which does the conjunctions but not disjunctions</p>",
        "id": 429776783,
        "sender_full_name": "James Sully",
        "timestamp": 1711511155
    },
    {
        "content": "<p>also turns out all the non-<code>trivial</code> ones are true <code>by simp [*]</code></p>",
        "id": 429795787,
        "sender_full_name": "James Sully",
        "timestamp": 1711522951
    },
    {
        "content": "<p>Aesop can be understood as a much expanded version of your tactic and has built-in rules for these logical operations.</p>",
        "id": 429834523,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1711537570
    },
    {
        "content": "<p>what a rad acronym</p>",
        "id": 429834853,
        "sender_full_name": "James Sully",
        "timestamp": 1711537706
    },
    {
        "content": "<p>looks great, thanks!</p>",
        "id": 429834899,
        "sender_full_name": "James Sully",
        "timestamp": 1711537729
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"621161\">James Sully</span> has marked this topic as resolved.</p>",
        "id": 430442465,
        "sender_full_name": "Notification Bot",
        "timestamp": 1711856586
    }
]