[
    {
        "content": "<p>Hi, say I wanted to prove:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">6</span>\n</code></pre></div>\n<p>Now, if I type the LHS into the #eval command, I see it reduces to the cauchy sequence representation for 6. So I would expect this to mean that the LHS is definitionally equal to 6 : ℝ. However, the <code>rfl</code> tactic fails to prove this. So what is #eval actually doing, and how do I actually prove this?</p>\n<p>Thanks.</p>",
        "id": 410620116,
        "sender_full_name": "Timothy Z",
        "timestamp": 1704015200
    },
    {
        "content": "<p><code>#eval</code> uses Lean's VM, which is not part of the trusted code base. You prove it with the <code>norm_num</code> tactic.</p>",
        "id": 410620475,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704015583
    },
    {
        "content": "<p>Ah I see, thanks!</p>",
        "id": 410620617,
        "sender_full_name": "Timothy Z",
        "timestamp": 1704015717
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"675788\">Timothy Z</span> has marked this topic as resolved.</p>",
        "id": 410621601,
        "sender_full_name": "Notification Bot",
        "timestamp": 1704016660
    },
    {
        "content": "<p>This would be true by definition, were it not for the fact that <code>Real.add</code> is marked <code>irreducible</code> which hides the definition from the kernel.</p>",
        "id": 410623528,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704018399
    },
    {
        "content": "<p>(I believe this is a performance optimization)</p>",
        "id": 410623551,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704018426
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Definitional.20Equality.20and.20Reals/near/410623528\">said</a>:</p>\n<blockquote>\n<p>This would be true by definition, were it not for the fact that <code>Real.add</code> is marked <code>irreducible</code> which hides the definition from the kernel.</p>\n</blockquote>\n<p>*from the elaborator</p>",
        "id": 410641804,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704036872
    },
    {
        "content": "<p>I think it's actually <code>irreducible_def</code>, which hides it from both? Or is that not what <code>opaque</code> does?</p>",
        "id": 410642205,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704037252
    },
    {
        "content": "<p>oh, yes <code>irreducible_def</code> is opaque to the kernel</p>",
        "id": 410643926,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704038775
    },
    {
        "content": "<p>TBH the name is not great</p>",
        "id": 410643946,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704038799
    }
]