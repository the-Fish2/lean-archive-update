[
    {
        "content": "<p>I have lately noticed (in the last ~month) that <code>exact?</code> is giving me deterministic timeouts frequently, even when importing only a small fraction of Mathlib. <br>\nIf I understand the current behavior of <code>exact?</code> correctly, the end-users is now constructing a cache for <code>exact?</code> the first time they use <code>exact?</code> on a particular commit. I <em>think</em>  the timeout happens during the computation of this cache. I've noticed the following behavior:</p>\n<ul>\n<li><code>exact?</code> keeps timing out over and over again</li>\n<li>Then I get <code>exact?</code> working in a simpler problem (maybe with fewer imports)</li>\n<li>Then suddenly <code>exact?</code> will work reliably again, either succeeding or failing quickly (failing with a \"could not find lemma\" error, not with a deterministic timeout).</li>\n</ul>\n<p>At the LFTCM24 conference, I've heard various people also saying that <code>exact?</code> was timing out regularly for them.<br>\n(small note: the Mathlib-version of <code>exact?</code> we had a few months ago would rarely timeout for me, much less than the current version).</p>",
        "id": 429675849,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1711465508
    },
    {
        "content": "<p>related: <a href=\"#narrow/stream/287929-mathlib4/topic/exact.3F.20failure/near/429666273\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/exact.3F.20failure/near/429666273</a></p>",
        "id": 429676901,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1711465769
    },
    {
        "content": "<p>Thanks for the detailed report.  I'll followup in the other thread.  Fixes will likely  go in <a href=\"https://github.com/leanprover/lean4/pull/3769\">lean4#3769</a>.</p>",
        "id": 429678756,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1711466248
    },
    {
        "content": "<p>I am having the same experience</p>",
        "id": 429702957,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711473312
    },
    {
        "content": "<p>I have also been having the same problem.</p>",
        "id": 433161589,
        "sender_full_name": "Jeremy Kahn",
        "timestamp": 1713125575
    },
    {
        "content": "<p>Same here. Do we have any news about this?</p>",
        "id": 433448658,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1713248074
    },
    {
        "content": "<p>I appreciate the patience.</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/3769\">#3769</a> was merged in 3 weeks ago, so it is in the nightly builds starting from <a href=\"https://github.com/leanprover/lean4-nightly/releases/tag/nightly-2024-03-27\">nightly-2024-03-27</a>.  It should be in the next release candidate (4.8 iirc).</p>\n<p>If you have timeouts from nightly-2024-03-27 or later, it'd be great to see a concrete issue.</p>",
        "id": 433451781,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1713249531
    },
    {
        "content": "<p>For the record, for one month I've been using the following workaround when working on a heavy file or a heavy proof: Towards the beginning of the file, include the lemma</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span><span class=\"bp\">?</span>\n</code></pre></div>\n<p>to make sure that <code>exact?</code>'s discrimination tree is initialized in a proof where it won't be interrupted. Then everything is fine. (Don't forget to erase the lemma when you're done with the file, though!)</p>",
        "id": 433461410,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1713253403
    },
    {
        "content": "<p>That workaround doesn't work for me. With heavy imports, even that small lemma times out (and I believe <code>exact?</code> doesn't use the standard heartbeats, so I'm not even sure how to increase the heartbeats for it).</p>\n<p>My workaround is to incrementally build the cache, by running (in a new file):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span><span class=\"bp\">?</span>\n</code></pre></div>\n<p>and then </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span><span class=\"bp\">?</span>\n</code></pre></div>\n<p>and then restart the file I was working on.</p>",
        "id": 433815568,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1713367676
    },
    {
        "content": "<p>I'm confused by this work-around. The cache isn't even shared between files anymore.</p>",
        "id": 434672333,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713770724
    },
    {
        "content": "<p>Oh, that is surprising. This workaround worked for at least two participants of LFTCM last month, and for myself also multiple times, including once last week.</p>",
        "id": 434726898,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1713786477
    },
    {
        "content": "<p>I just downloaded the latest version of mathlib and its cache, and against my expectation the following worked immediately.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span><span class=\"bp\">?</span>\n</code></pre></div>",
        "id": 434727268,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1713786587
    },
    {
        "content": "<p>Could it be possible that running <code>exact?</code> on a complicated goal causes the <code>exact?</code> cache to be corrupted so that it will also timeout on simple goals? It is possible that the only functional step in my workaround was \"restart the file I was working on\".</p>",
        "id": 434727521,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1713786664
    },
    {
        "content": "<p>Yes, once <code>exact?</code> has failed me it will fail forever, probably because it will not try to build the cache again, and the only way I found is to restart the server.</p>",
        "id": 434735822,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1713788945
    }
]