[
    {
        "content": "<p>Here's my example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- `SymmGen r` is the symmetric relation generated by `r`. -/</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">SymmGen</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">rel</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">SymmGen</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n  <span class=\"bp\">|</span> <span class=\"n\">symm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">SymmGen</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">SymmGen</span> <span class=\"n\">y</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">MyRel</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">SymmGen</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">preserve_add'</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">},</span> <span class=\"n\">MyRel</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">MyRel</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">SymmGen.rel</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">SymmGen.rel</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_right_comm</span><span class=\"o\">])</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">SymmGen.symm</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">SymmGen.symm</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">preserve_add'</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I'd expect structural recursion to succeed in the final case, since I'm applying preserve_add' to a structurally smaller term. Using the induction tactic works, but why does the equation compiler fail to recognise this is structural recursion?</p>",
        "id": 435315956,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1714023850
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span></p>",
        "id": 435316174,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1714024009
    },
    {
        "content": "<p>I haven't touched the code that compiles structural recursion over inductive predicates (which works differently than when recursing over inductive types) yet, so hard to tell before breakfast :-)</p>\n<p><span class=\"user-mention\" data-user-id=\"235513\">@Daniel Fabian</span>, who authored that code, might be able to debug this better.</p>",
        "id": 435322931,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1714027787
    },
    {
        "content": "<p>Does inlining <code>MyRel</code> help?</p>",
        "id": 435323340,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1714027991
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/270676-lean4/topic/structural.20recursion.20fails/near/435322931\">said</a>:</p>\n<blockquote>\n<p>I haven't touched the code that compiles structural recursion over inductive predicates (which works differently than when recursing over inductive types) yet, so hard to tell before breakfast :-)</p>\n</blockquote>\n<p>Ahh okay, then I don't feel as bad for thinking that structural recursion on inductive predicates didn't get better with your change!</p>",
        "id": 435323792,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1714028249
    },
    {
        "content": "<p>Inlining MyRel doesn't make a difference</p>",
        "id": 435323802,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1714028255
    },
    {
        "content": "<p>My changes so far only affected well-founded recursion</p>",
        "id": 435327149,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1714029634
    },
    {
        "content": "<p>Anyways, this looks like a bug worth opening an issue for.</p>",
        "id": 435327216,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1714029666
    },
    {
        "content": "<p>Based on the available trace options, the issue is somewhere in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">findBelowIdx</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"bp\">$</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">Expr</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">xs.findSomeM</span><span class=\"bp\">?</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">xTy</span> <span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">x</span>\n  <span class=\"n\">xTy.withApp</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">match</span> <span class=\"n\">f.constName</span><span class=\"bp\">?</span><span class=\"o\">,</span> <span class=\"n\">xs.indexOf</span><span class=\"bp\">?</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">name</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"n\">idx</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>                                                                       <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">isInductivePredicate</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n      <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">belowTy</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">belowType</span> <span class=\"n\">motive</span> <span class=\"n\">xs</span> <span class=\"n\">idx</span>                                                      <span class=\"k\">let</span> <span class=\"n\">below</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprSyntheticOpaqueMVar</span> <span class=\"n\">belowTy</span>\n      <span class=\"n\">try</span>\n        <span class=\"n\">trace</span><span class=\"o\">[</span><span class=\"n\">Meta.IndPredBelow.match</span><span class=\"o\">]</span> <span class=\"s2\">\"{←Meta.ppGoal below.mvarId!}\"</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">backwardsChaining</span> <span class=\"n\">below.mvarId</span><span class=\"bp\">!</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n          <span class=\"n\">trace</span><span class=\"o\">[</span><span class=\"n\">Meta.IndPredBelow.match</span><span class=\"o\">]</span> <span class=\"s2\">\"Found below term in the local context: {below}\"</span>\n          <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">xs.anyM</span> <span class=\"o\">(</span><span class=\"n\">isDefEq</span> <span class=\"n\">below</span><span class=\"o\">))</span> <span class=\"k\">then</span> <span class=\"n\">pure</span> <span class=\"n\">none</span> <span class=\"k\">else</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">below</span><span class=\"o\">,</span> <span class=\"n\">idx.val</span><span class=\"o\">)</span>                      <span class=\"k\">else</span>\n          <span class=\"n\">trace</span><span class=\"o\">[</span><span class=\"n\">Meta.IndPredBelow.match</span><span class=\"o\">]</span> <span class=\"s2\">\"could not find below term in the local context\"</span>\n          <span class=\"n\">pure</span> <span class=\"n\">none</span>\n      <span class=\"n\">catch</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">none</span>\n    <span class=\"k\">else</span> <span class=\"n\">pure</span> <span class=\"n\">none</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">none</span>\n</code></pre></div>",
        "id": 435331884,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1714031450
    },
    {
        "content": "<p>I also have a failing structural recursion on the following, it's the same issue right</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">Tm</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Steps</span> <span class=\"o\">(</span><span class=\"n\">Step</span> <span class=\"o\">:</span> <span class=\"n\">Tm</span> <span class=\"bp\">→</span> <span class=\"n\">Tm</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">):</span> <span class=\"n\">Tm</span> <span class=\"bp\">→</span> <span class=\"n\">Tm</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Steps</span> <span class=\"n\">Step</span> <span class=\"n\">a</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">trans</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Step</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">Steps</span> <span class=\"n\">Step</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">Steps</span> <span class=\"n\">Step</span> <span class=\"n\">a</span> <span class=\"n\">c</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">stepsTrans</span> <span class=\"o\">{</span><span class=\"n\">Step</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Tm</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r₁</span> <span class=\"o\">:</span> <span class=\"n\">Steps</span> <span class=\"n\">Step</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r₂</span> <span class=\"o\">:</span> <span class=\"n\">Steps</span> <span class=\"n\">Step</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Steps</span> <span class=\"n\">Step</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">r₁</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Steps.refl</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">r₂</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Steps.trans</span> <span class=\"n\">r</span> <span class=\"n\">r₁</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Steps.trans</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">stepsTrans</span> <span class=\"n\">r₁</span> <span class=\"n\">r₂</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Was the issue ever opened? Is there a link to it?</p>",
        "id": 438231379,
        "sender_full_name": "Jonathan Chan",
        "timestamp": 1715567869
    },
    {
        "content": "<p>I guess not.</p>",
        "id": 438232746,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1715568677
    },
    {
        "content": "<p>Oops, sorry, I forgot about this. Here's an issue for it: <a href=\"https://github.com/leanprover/lean4/issues/4540\">https://github.com/leanprover/lean4/issues/4540</a></p>",
        "id": 446420812,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1719150735
    }
]