[
    {
        "content": "<p><code>unfold_let</code> and <code>unfold</code> seem to serve a very similar purpose, one for \"local definitions\" and the other one for \"global\" definitions.</p>\n<p>Would it make sense to merge the two tactics to a single <code>unfold</code> that can handle both or are there good reasons why they should stay distinct? Is it a problem if Lean first has to figure out what the arguments provided are, fvars or global constants?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"k\">let</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">A</span>\n    <span class=\"n\">C</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">C</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  AB: Type</span>\n<span class=\"cm\">  h: A = B</span>\n<span class=\"cm\">  C: Type := A</span>\n<span class=\"cm\">  ⊢ C = B</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"n\">unfold_let</span> <span class=\"n\">C</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">=</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">C</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">C</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 435411452,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1714057681
    },
    {
        "content": "<p>I agree that this distinction looks like a historical accident that could be fixed now that everything is in core (I guess everything is core?).</p>",
        "id": 435415076,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714058860
    },
    {
        "content": "<p><code>unfold_let</code> is a mathlib tactic, and it pre-dated being able to write <code>dsimp only [C]</code></p>",
        "id": 435418897,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714060131
    },
    {
        "content": "<p>Can’t you simply merge it with <code>unfold</code> now? This is a really natural expectation for new users.</p>",
        "id": 435419258,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714060243
    },
    {
        "content": "<p>I wonder if there's a clear explanation somewhere when you need <code>unfold</code> rather than <code>dsimp</code> or the other way around</p>",
        "id": 435419684,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1714060388
    },
    {
        "content": "<p>ok, in that case I might give it a shot to merge the two at some point <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 435420620,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1714060718
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> It's on my list of things to look into</p>",
        "id": 435420667,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714060731
    },
    {
        "content": "<p>I'm not exactly sure, but I think <code>dsimp [C]</code> does just a little bit more than <code>unfold </code>.  So far I've been using <code>unfold</code> as \"plug in the definition but don't do anything else\". Not aware of anything that <code>unfold</code> could do which <code>dsimp</code> does not</p>",
        "id": 435421042,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1714060833
    },
    {
        "content": "<p><code>dsimp only [C]</code> makes sure to not use dsimp lemmas (simp lemmas that are proved by rfl), but it also does some reductions, like beta reduction, etc.</p>",
        "id": 435430198,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714064007
    },
    {
        "content": "<p>RFC: <a href=\"https://github.com/leanprover/lean4/pull/4090\">lean4#4090</a></p>",
        "id": 437473454,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715094274
    }
]