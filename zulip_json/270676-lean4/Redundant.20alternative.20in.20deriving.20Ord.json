[
    {
        "content": "<p>I have the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">Var</span> <span class=\"o\">:=</span> <span class=\"n\">Int</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Ty</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">int</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bool</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">reducible</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">Ty.type</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">int</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Int</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">bool</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Bool</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Expr</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">litInt</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"bp\">.</span><span class=\"n\">int</span>\n  <span class=\"bp\">|</span> <span class=\"n\">litBool</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"bp\">.</span><span class=\"n\">bool</span>\n  <span class=\"bp\">|</span> <span class=\"n\">varInt</span> <span class=\"o\">:</span> <span class=\"n\">Var</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"bp\">.</span><span class=\"n\">int</span>\n  <span class=\"bp\">|</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">.</span><span class=\"n\">int</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"bp\">.</span><span class=\"n\">int</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"bp\">.</span><span class=\"n\">int</span>\n  <span class=\"bp\">|</span> <span class=\"n\">minus</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">.</span><span class=\"n\">int</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"bp\">.</span><span class=\"n\">int</span>\n  <span class=\"bp\">|</span> <span class=\"n\">lt</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">.</span><span class=\"n\">int</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"bp\">.</span><span class=\"n\">int</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"bp\">.</span><span class=\"n\">bool</span>\n  <span class=\"bp\">|</span> <span class=\"n\">eq</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">.</span><span class=\"n\">int</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"bp\">.</span><span class=\"n\">int</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"bp\">.</span><span class=\"n\">bool</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Ord</span>\n</code></pre></div>\n<p>but I have this error on the deriving: <code>redudant alternative</code>. I'd really like to not have to manually write this Ord instance.<br>\nI'm on leanprover/lean4:v4.7.0-rc2</p>",
        "id": 427262837,
        "sender_full_name": "ohhaimark",
        "timestamp": 1710720478
    },
    {
        "content": "<p>Smaller repro</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Ty</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">int</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bool</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Expr</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">.</span><span class=\"n\">int</span>\n  <span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">.</span><span class=\"n\">bool</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Ord</span>\n</code></pre></div>",
        "id": 427264080,
        "sender_full_name": "ohhaimark",
        "timestamp": 1710720811
    },
    {
        "content": "<p>Well now I realize I don't need that Ord instance, but still a bug.</p>",
        "id": 427265171,
        "sender_full_name": "ohhaimark",
        "timestamp": 1710721085
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"244748\">@ohhaimark</span>, could you please open an issue on the Lean repo?</p>",
        "id": 427265409,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710721157
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/issues/3706\">https://github.com/leanprover/lean4/issues/3706</a></p>",
        "id": 427268813,
        "sender_full_name": "ohhaimark",
        "timestamp": 1710722030
    },
    {
        "content": "<p>Where does lean implement deriving tactics? More specifically, where can I find Ord's?</p>",
        "id": 428063407,
        "sender_full_name": "ohhaimark",
        "timestamp": 1711001683
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Elab/Deriving/Ord.lean\">https://github.com/leanprover/lean4/blob/master/src/Lean/Elab/Deriving/Ord.lean</a></p>",
        "id": 428068325,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1711005266
    }
]