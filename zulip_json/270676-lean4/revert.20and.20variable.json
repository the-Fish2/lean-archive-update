[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> and me found a situation, where the tactic revert fails expectedly, but creates a not so nice error message. This also affects the extract_goal tactic of Mathlib, which just passes this message on.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"c1\">--import Mathlib.Tactic.ExtractGoal</span>\n\n<span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Prop</span><span class=\"o\">}</span>\n<span class=\"kn\">example</span>\n<span class=\"w\">  </span><span class=\"c1\">--{P : Prop} --uncommenting this line fixes the issue</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"kt\">Prop</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"bp\">∃</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hx</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"n\">hx</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">Exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span>\n<span class=\"w\">  </span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"c1\">--revert P</span>\n<span class=\"w\">    </span><span class=\"c1\">--extract_goal</span>\n<span class=\"w\">    </span><span class=\"gr\">sorry</span>\n<span class=\"w\">  </span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 445432095,
        "sender_full_name": "Sven Manthe",
        "timestamp": 1718735515
    },
    {
        "content": "<p>PS: I just realized that uncommenting the parameter line actually makes revert P succeed.</p>",
        "id": 445432623,
        "sender_full_name": "Sven Manthe",
        "timestamp": 1718735654
    },
    {
        "content": "<p>For the benefit from away from the computer, whats the error message?</p>",
        "id": 445433293,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1718735886
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>tactic 'clear' failed, target depends on '_example'\n</code></pre></div>",
        "id": 445436822,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1718737017
    },
    {
        "content": "<p>The issue has to do with the fact that the goal contains a metavariable, and this metavariable depends on an auxiliary local constant(?). It is interesting that the behavior changes depending on whether <code>P</code> is an argument or a variable.</p>",
        "id": 445437080,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1718737110
    },
    {
        "content": "<p>I wonder if this <code>_example</code> is the name for the current function in case you want to make it recursive. Can you produce this issue with <code>def</code> as well?</p>",
        "id": 445443297,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1718738723
    },
    {
        "content": "<p>Yes, with <code>theorem</code> it will give the same error message with the theorem name. It gives the same error message The same error message occurs when writing <code>clear &lt;thmname&gt;</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">foo</span>\n<span class=\"w\">  </span><span class=\"c1\">-- {P : Type} --uncommenting this line fixes the issue</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"kt\">Prop</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"bp\">∃</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hx</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"n\">hx</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">Exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span>\n<span class=\"w\">  </span><span class=\"n\">revert</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"c1\">-- tactic 'clear' failed, target depends on 'foo'</span>\n<span class=\"w\">  </span><span class=\"c1\">-- clear foo -- gives same error message, but also fails with P as argument</span>\n</code></pre></div>",
        "id": 445443811,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1718738898
    },
    {
        "content": "<p>Yes, it is the name of the current function (we used a def originally)</p>",
        "id": 445443813,
        "sender_full_name": "Sven Manthe",
        "timestamp": 1718738898
    },
    {
        "content": "<p>I see. probably worth recording in an issue.</p>",
        "id": 445462245,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1718744963
    },
    {
        "content": "<p>Just out of curiosity, what happens if you add <code>nonrec</code> to the declaration?  (I have a vague memory that <code>_example</code> is what <del>non</del>rec uses.)</p>",
        "id": 445464884,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718746044
    },
    {
        "content": "<p>Then the revert succeeds and <code>extract_goal</code> fails with the expected \"extracted goal has metavariables\" error.<br>\nGood point, I forgot about that modifier. That can at least be a workaround.</p>",
        "id": 445465416,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1718746275
    },
    {
        "content": "<p>Actually, it seems more successful than what I hoped for!</p>",
        "id": 445466039,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718746582
    },
    {
        "content": "<p>Weird, I was tried to minimize, and for some unknown reason <code>revert</code> is removing the second goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Prop</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∃</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">Exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span>\n<span class=\"w\">  </span><span class=\"n\">revert</span><span class=\"w\"> </span><span class=\"n\">p</span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n<span class=\"c1\">-- (kernel) declaration has metavariables 'foo'</span>\n</code></pre></div>\n<p>(4.10.0, commit 0a1a855ba80e51515570439f3d73d3d9414ac053)</p>",
        "id": 445666021,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718818679
    }
]