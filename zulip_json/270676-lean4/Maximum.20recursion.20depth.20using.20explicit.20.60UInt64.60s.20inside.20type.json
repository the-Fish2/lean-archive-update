[
    {
        "content": "<p>I've done a bunch of reduction of this infinite loop example, though I expect it is reducible further.  I'd like the <code>bad</code> lemma to work as well as the <code>good</code> lemma does, but instead it hits a <code>maxRecDepth</code> error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.UInt</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Real</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Int64</span> <span class=\"n\">where</span>\n  <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Neg</span> <span class=\"n\">Int64</span> <span class=\"n\">where</span> <span class=\"n\">neg</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">-</span><span class=\"n\">x.n</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">Int64</span> <span class=\"n\">n</span> <span class=\"n\">where</span> <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Int64</span><span class=\"o\">}</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Fixed</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Int64</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Int64</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Sub</span> <span class=\"o\">(</span><span class=\"n\">Fixed</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">sub</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">bif</span> <span class=\"n\">x</span> <span class=\"bp\">==</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"n\">y</span> <span class=\"k\">else</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Fixed.ofNat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Fixed</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"n\">s.n.toNat</span>\n  <span class=\"n\">bif</span> <span class=\"n\">k</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"o\">⟨</span><span class=\"gr\">sorry</span><span class=\"o\">⟩</span> <span class=\"k\">else</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Interval</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Int64</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">lo</span> <span class=\"o\">:</span> <span class=\"n\">Fixed</span> <span class=\"n\">s</span>\n  <span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">Fixed</span> <span class=\"n\">s</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Interval.approx</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Interval</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">x.lo</span> <span class=\"bp\">=</span> <span class=\"n\">x.hi</span> <span class=\"k\">then</span> <span class=\"n\">Set.univ</span> <span class=\"k\">else</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Sub</span> <span class=\"o\">(</span><span class=\"n\">Interval</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">sub</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">x.lo</span> <span class=\"bp\">-</span> <span class=\"n\">y.hi</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">subset_approx_sub</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Interval</span> <span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⊆</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">approx</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Interval.ofNat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Interval</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">ofNat</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">ofNat</span> <span class=\"n\">n</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">One</span> <span class=\"o\">(</span><span class=\"n\">Interval</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">ofNat</span> <span class=\"mi\">1</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fixed</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Fixed</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">Int64</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Interval</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">good</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fixed</span> <span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Fixed</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"bp\">⊆</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">mul</span> <span class=\"n\">x</span> <span class=\"n\">c</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">approx</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- This one works, presumably because `t` is abstract rather than being `-61`</span>\n  <span class=\"n\">apply</span> <span class=\"n\">subset_approx_sub</span>\n  <span class=\"n\">repeat</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">bad</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fixed</span> <span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Fixed</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">61</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"bp\">⊆</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">mul</span> <span class=\"n\">x</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">61</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">approx</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- maximum recursion depth has been reached (use `set_option maxRecDepth &lt;num&gt;` to increase limit)</span>\n  <span class=\"n\">apply</span> <span class=\"n\">subset_approx_sub</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Any ideas what might be going wrong?</p>",
        "id": 411951994,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1704812505
    },
    {
        "content": "<p><code>refine subset_approx_sub (b := ?_)</code> seems to work</p>",
        "id": 411953087,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704812778
    },
    {
        "content": "<p>Are you sure <code>b</code> is supposed to be there? It's not used in the statement in any way</p>",
        "id": 411953152,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704812792
    },
    {
        "content": "<p><code>b</code> was residue from minimization.  I think I removed it locally (and kept the apply) and the problem remains, but unfortunately I have to run an errand so more later.</p>",
        "id": 411964418,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1704816052
    },
    {
        "content": "<p>Confirmed that <code>refine</code> fixes it.  But even after <code>b</code> is gone (fixed above), <code>apply</code> still fails.  I'm curious to know why, in order to solve my original non-minimized problem.</p>",
        "id": 411976587,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1704819892
    },
    {
        "content": "<p>Does <code>refine</code> succeed in your original example?</p>",
        "id": 411976690,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704819933
    },
    {
        "content": "<p>Yes.  However, manually using <code>refine</code> is a poor solution in the original case, as <code>mono</code> seems to do <code>apply</code> and has the same problem.  I'd like to use <code>mono</code> to do a bunch of relevant applies in a row.</p>",
        "id": 411977186,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1704820057
    },
    {
        "content": "<p>What does fix it in the original problem for both <code>apply</code> and <code>mono</code>, and in the reduced one, is marking <code>Interval.ofNat</code> as <code>@[irreducible]</code>.  So I think I'm set, as that seems like a reasonable fix.</p>",
        "id": 411978674,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1704820483
    }
]