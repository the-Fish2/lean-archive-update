[
    {
        "content": "<p>How do I run <code>a : MetaM Unit</code> inside of <code>IO Unit</code>. I can do <code>#eval a</code> in a file.</p>\n<p>My expectation is that I need to do something like <code>a.run {} {} ... &lt;path to lean project/file&gt;</code>.</p>\n<p>Here is mwe</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Lean</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Qq</span>\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"w\"> </span><span class=\"n\">Qq</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">MetaM</span><span class=\"w\"> </span><span class=\"n\">Unit</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">cls</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Field</span><span class=\"w\"> </span><span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">inst</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">Meta</span><span class=\"bp\">.</span><span class=\"n\">synthInstance</span><span class=\"w\"> </span><span class=\"n\">cls</span>\n<span class=\"w\">  </span><span class=\"n\">IO</span><span class=\"bp\">.</span><span class=\"n\">println</span><span class=\"w\"> </span><span class=\"n\">s!</span><span class=\"s2\">\"instance of {← Meta.ppExpr cls} is {← Meta.ppExpr inst}\"</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">IO</span><span class=\"w\"> </span><span class=\"n\">Unit</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Core</span><span class=\"bp\">.</span><span class=\"n\">Context</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">IO</span><span class=\"bp\">.</span><span class=\"n\">Ref</span><span class=\"w\"> </span><span class=\"n\">Core</span><span class=\"bp\">.</span><span class=\"n\">State</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">{}</span><span class=\"w\"> </span><span class=\"o\">{}</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toIO</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">userError</span><span class=\"w\"> </span><span class=\"s2\">\"ups\"</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>How do I properly initialize <code>Core.Context</code> and <code>Core.State</code>? For example, I want to get whole mathlib which is installed in <code>~/Documents/mathlib</code> directory.</p>",
        "id": 446687491,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1719253944
    },
    {
        "content": "<p><code>a.run</code> will reduce it to <code>CoreM</code>, which you can then run with one of the variants of <code>withImport</code>.</p>",
        "id": 446690031,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1719254764
    },
    {
        "content": "<p>Thanks! But the only usable function I found is in mathlib <code>CoreM.withImportModules</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Lean</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Qq</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"w\"> </span><span class=\"n\">Qq</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">MetaM</span><span class=\"w\"> </span><span class=\"n\">Unit</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">cls</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Field</span><span class=\"w\"> </span><span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">inst</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">Meta</span><span class=\"bp\">.</span><span class=\"n\">synthInstance</span><span class=\"w\"> </span><span class=\"n\">cls</span>\n<span class=\"w\">  </span><span class=\"n\">IO</span><span class=\"bp\">.</span><span class=\"n\">println</span><span class=\"w\"> </span><span class=\"n\">s!</span><span class=\"s2\">\"instance of {← Meta.ppExpr cls} is {← Meta.ppExpr inst}\"</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">CoreM</span><span class=\"w\"> </span><span class=\"n\">Unit</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">{}</span><span class=\"w\"> </span><span class=\"o\">{}</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">IO</span><span class=\"w\"> </span><span class=\"n\">Unit</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"n\">CoreM</span><span class=\"bp\">.</span><span class=\"n\">withImportModules</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"ss\">`Mathlib</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">bar</span>\n\n<span class=\"bp\">#</span><span class=\"n\">eval</span><span class=\"w\"> </span><span class=\"n\">main</span>\n</code></pre></div>",
        "id": 446693882,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1719256150
    },
    {
        "content": "<p>Ohh but this does not work when I compile it and run. I guess setting up the <code>searchPath</code> argument somehow.</p>\n<p>I have tried this</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">IO</span><span class=\"w\"> </span><span class=\"n\">Unit</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"n\">CoreM</span><span class=\"bp\">.</span><span class=\"n\">withImportModules</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"ss\">`Mathlib</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">bar</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">searchPath</span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"s2\">\"/home/tskrivan/doodle/lean/math/.lake/build\"</span><span class=\"o\">,</span>\n<span class=\"w\">                         </span><span class=\"s2\">\"/home/tskrivan/doodle/lean/math/\"</span><span class=\"o\">,</span>\n<span class=\"w\">                         </span><span class=\"s2\">\"/home/tskrivan/doodle/lean/math/.lake/packages/mathlib\"</span><span class=\"o\">,</span>\n<span class=\"w\">                         </span><span class=\"s2\">\"/home/tskrivan/doodle/lean/math/.lake/packages/mathlib/.lake/build\"</span><span class=\"o\">])</span>\n</code></pre></div>\n<p>but I'm getting this error</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">uncaught</span><span class=\"w\"> </span><span class=\"n\">exception</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">object</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"bp\">'/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">tskrivan</span><span class=\"bp\">/</span><span class=\"n\">doodle</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">math</span><span class=\"bp\">/.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">olean'</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"w\"> </span><span class=\"n\">does</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">exist</span>\n</code></pre></div>",
        "id": 446699709,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1719257490
    },
    {
        "content": "<p>You might want <code>compile_time_search_path%</code></p>",
        "id": 446706910,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1719259833
    },
    {
        "content": "<p>Progress! Now I'm getting</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">uncaught</span><span class=\"w\"> </span><span class=\"n\">exception</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Could</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">find</span><span class=\"w\"> </span><span class=\"n\">native</span><span class=\"w\"> </span><span class=\"n\">implementation</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">external</span><span class=\"w\"> </span><span class=\"n\">declaration</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"n\">UInt64</span><span class=\"bp\">.</span><span class=\"n\">ofNatCore'</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">symbols</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"n\">l_UInt64_ofNatCore___boxed'</span><span class=\"w\"> </span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"n\">l_UInt64_ofNatCore'</span><span class=\"o\">)</span><span class=\"bp\">.</span>\n<span class=\"n\">For</span><span class=\"w\"> </span><span class=\"n\">declarations</span><span class=\"w\"> </span><span class=\"k\">from</span><span class=\"w\"> </span><span class=\"ss\">`Init</span><span class=\"bp\">`</span><span class=\"w\"> </span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"ss\">`Lean</span><span class=\"bp\">`</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">you</span><span class=\"w\"> </span><span class=\"n\">need</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"ss\">`supportInterpreter</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">true</span><span class=\"bp\">`</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">relevant</span><span class=\"w\"> </span><span class=\"ss\">`lean_exe</span><span class=\"bp\">`</span><span class=\"w\"> </span><span class=\"n\">statement</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">your</span><span class=\"w\"> </span><span class=\"ss\">`lakefile.lean</span><span class=\"bp\">`.</span>\n</code></pre></div>",
        "id": 446707196,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1719259927
    },
    {
        "content": "<p>Well this is fixable exactly with <code>supportInterpreter := true</code> as the error message suggests.</p>",
        "id": 446707957,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1719260194
    }
]