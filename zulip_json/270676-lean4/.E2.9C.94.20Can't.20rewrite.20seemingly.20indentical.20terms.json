[
    {
        "content": "<p>I'm trying to prove this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">DirectSum</span> <span class=\"n\">BigOperators</span> <span class=\"n\">Classical</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">R'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">AddChar.instMonoidHomClass</span> <span class=\"o\">[</span><span class=\"n\">CommMonoid</span> <span class=\"n\">R'</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">MonoidHomClass</span> <span class=\"o\">(</span><span class=\"n\">AddChar</span> <span class=\"n\">R</span> <span class=\"n\">R'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Multiplicative</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">R'</span> <span class=\"o\">:=</span>\n  <span class=\"n\">MonoidHom.instMonoidHomClass</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">equiv_DirectSum_AddChar.</span><span class=\"o\">{</span><span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommMonoid</span> <span class=\"n\">R'</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u₂</span><span class=\"o\">)</span> <span class=\"o\">[(</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">AddChar</span> <span class=\"o\">(</span><span class=\"bp\">⨁</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">R'</span> <span class=\"bp\">≃</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">AddChar</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">R'</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">χ</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n    <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">χ</span> <span class=\"o\">(</span><span class=\"n\">DirectSum.of</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n    <span class=\"n\">map_one'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"o\">}</span>\n  <span class=\"n\">invFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">χf</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n    <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∏</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">χf</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n    <span class=\"n\">map_one'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"o\">}</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span>\n    <span class=\"n\">apply</span> <span class=\"n\">AddChar.ext</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x₁</span>\n    <span class=\"n\">change</span> <span class=\"bp\">∏</span> <span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">Multiplicative.ofAdd</span> <span class=\"o\">((</span><span class=\"n\">of</span> <span class=\"n\">f</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">Multiplicative.toAdd</span> <span class=\"n\">x₁</span><span class=\"o\">)</span> <span class=\"n\">x_1</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"n\">x₁</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">map_prod</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Multiplicative.ofAdd</span> <span class=\"o\">((</span><span class=\"n\">of</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">Multiplicative.toAdd</span> <span class=\"n\">x₁</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">)))</span> <span class=\"n\">Finset.univ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">DirectSum</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>but in that <code>rw</code>, even though the goal is <code>∏ x_1 : l, x (Multiplicative.ofAdd ((of f x_1) ((Multiplicative.toAdd x₁) x_1))) = x x₁</code> and <code>this</code> is <code>∏ x_1 : l, x (Multiplicative.ofAdd ((of f x_1) ((Multiplicative.toAdd x₁) x_1))) =\n  x (∏ x : l, Multiplicative.ofAdd ((of f x) ((Multiplicative.toAdd x₁) x)))</code> it can't find an instance of the pattern. Any idea what's going on and how I can fix that? I tried checking type-by-type and they all seem equal</p>",
        "id": 423982053,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1709199759
    },
    {
        "content": "<p>I'm pretty sure that instance is a bad idea, though can't yet tell you if its related to your issue</p>",
        "id": 423984538,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709200634
    },
    {
        "content": "<p>True, it feels like that, but without it even less works</p>",
        "id": 423984718,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1709200687
    },
    {
        "content": "<p>The whole point of <code>AddChar</code> is that you never have to mention <code>Multiplicative</code></p>",
        "id": 423985564,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709200943
    },
    {
        "content": "<p>Yes, but it's defined as <code>Multiplicative R →* R'</code> so I don't see how to avoid it</p>",
        "id": 423985766,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1709201012
    },
    {
        "content": "<p>You're not supposed to care about the definition, that's why it's a <code>def</code>!</p>",
        "id": 423985824,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709201034
    },
    {
        "content": "<p>I'd love to avoid it, but I don't know how to</p>",
        "id": 423986982,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1709201459
    },
    {
        "content": "<p>It looks  like my last message got swallowed by a bad internet connection; I think your issue is that you need a <code>Finset.sum</code> version of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AddChar.map_add_mul#doc\">docs#AddChar.map_add_mul</a></p>",
        "id": 423990893,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709202910
    },
    {
        "content": "<p>I recommend writing that lemma first (where you might need to care about the actual definition); then in your original goal you can just use the lemma directly.</p>",
        "id": 423990993,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709202946
    },
    {
        "content": "<p>That worked, thanks!</p>",
        "id": 424071802,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1709227933
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"690858\">Command Master</span> has marked this topic as resolved.</p>",
        "id": 424071807,
        "sender_full_name": "Notification Bot",
        "timestamp": 1709227935
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> has marked this topic as resolved.</p>",
        "id": 424076075,
        "sender_full_name": "Notification Bot",
        "timestamp": 1709229214
    },
    {
        "content": "<p>I've never seen a thread as resolved as this one!</p>",
        "id": 424108211,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709240754
    },
    {
        "content": "<p>I moved a single message from the identical thread without resolution tick to this thread, and apparently that caused the bot to notify us as me resolving the thread a second time.</p>",
        "id": 424108368,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1709240807
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"439115\">@Alya Abbott</span> in case you're interested!</p>",
        "id": 424108615,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709240896
    },
    {
        "content": "<p>This is a helpful report, thanks!</p>",
        "id": 424111896,
        "sender_full_name": "Alya Abbott",
        "timestamp": 1709242254
    }
]