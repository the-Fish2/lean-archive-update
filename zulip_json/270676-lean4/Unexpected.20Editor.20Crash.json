[
    {
        "content": "<p>Hi, </p>\n<p>My Lean editor crashes when running the following code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span>\n\n<span class=\"c1\">-- A sequence of α with index in [a, b]</span>\n<span class=\"c1\">-- Empty sequence if b &lt; a</span>\n<span class=\"kd\">def</span> <span class=\"n\">Sequence</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">arr.size</span> <span class=\"bp\">=</span> <span class=\"n\">max</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">Sequence.get</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Sequence</span> <span class=\"n\">α</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">i</span> <span class=\"bp\">∧</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">s.1.get</span> <span class=\"o\">⟨</span><span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">s.2</span><span class=\"o\">]</span>\n    <span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">have</span> <span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span>\n      <span class=\"n\">linarith</span>\n  <span class=\"o\">⟩</span>\n\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">GetElem</span> <span class=\"o\">(</span><span class=\"n\">Sequence</span> <span class=\"n\">α</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">ℕ</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">i</span> <span class=\"bp\">∧</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">getElem</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s.get</span> <span class=\"n\">i</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Sequence</span> <span class=\"n\">ℕ</span> <span class=\"mi\">2</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">],</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n<span class=\"k\">#eval</span> <span class=\"n\">s</span><span class=\"o\">[</span><span class=\"mi\">5</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>However, after removing <code>variable {α : Type u} {a b : Nat}</code>,  the code can run with the expected result below:<br>\n<a href=\"/user_uploads/3121/hhc3xKklF4j3ydjykoa--paU/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/hhc3xKklF4j3ydjykoa--paU/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/hhc3xKklF4j3ydjykoa--paU/image.png\"></a></div><p>I'm wondering if <code>variable {α : Type u} {a b : Nat}</code> makes any difference here. Thanks!</p>",
        "id": 433800993,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1713366055
    },
    {
        "content": "<p>The issue can be reproduced on <a href=\"https://live.lean-lang.org/\">https://live.lean-lang.org/</a></p>",
        "id": 433802376,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1713366201
    },
    {
        "content": "<p>It looks like this example might be easy to remove Mathlib from (which is pretty much a pre-requisite for getting bugs diagnosed / fixed). Does the same behaviour show after replacing the Mathlib tactics by <code>sorry</code> (and replacing <code>ℕ</code> with <code>Nat</code>)?</p>",
        "id": 433896062,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713400429
    },
    {
        "content": "<p>Removing mathlib doesn't help. Below is a MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Sequence</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">arr.size</span> <span class=\"bp\">=</span> <span class=\"n\">max</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">Sequence.get</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Sequence</span> <span class=\"n\">α</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">i</span> <span class=\"bp\">∧</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">s.1.get</span> <span class=\"o\">⟨</span><span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩</span>\n\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">GetElem</span> <span class=\"o\">(</span><span class=\"n\">Sequence</span> <span class=\"n\">α</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">Nat</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">i</span> <span class=\"bp\">∧</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">getElem</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s.get</span> <span class=\"n\">i</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Sequence</span> <span class=\"n\">Nat</span> <span class=\"mi\">2</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">],</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n<span class=\"k\">#eval</span> <span class=\"n\">s</span><span class=\"o\">[</span><span class=\"mi\">5</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Now it crashes w/ or w/o <code>variable {α : Type u} {a b : Nat}</code>.</p>",
        "id": 433901422,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1713404642
    },
    {
        "content": "<p>That's great -- I wasn't expecting that removing mathlib would help, rather that now this makes a great issue to report on the lean4 repo. :-)</p>",
        "id": 433906713,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713408257
    },
    {
        "content": "<p>Is this <a href=\"https://github.com/leanprover/lean4/pull/2252\">lean4#2252</a> (i.e., <a href=\"https://github.com/leanprover/lean4/pull/1697\">lean4#1697</a>)?</p>",
        "id": 433993465,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1713429038
    },
    {
        "content": "<p>Seems likely!</p>",
        "id": 434017686,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713436838
    }
]