[
    {
        "content": "<p>Hello! I'm new here, so let me know if I've put this in the wrong spot. I have a proof that involves cases over a disjunction that are very similar, but not quite the same. Here's a short snippet from the proof that hopefully illustrates what I'm asking about:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">inl</span><span class=\"w\"> </span><span class=\"n\">w'</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">left</span>\n<span class=\"w\">    </span><span class=\"n\">exists</span><span class=\"w\"> </span><span class=\"n\">w'</span>\n<span class=\"w\">    </span><span class=\"n\">constructor</span>\n<span class=\"w\">    </span><span class=\"bp\">.</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">h₁</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">assumption</span>\n<span class=\"w\">    </span><span class=\"bp\">.</span><span class=\"w\"> </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">eval_plus_l</span><span class=\"w\"> </span><span class=\"n\">M₁</span><span class=\"w\"> </span><span class=\"n\">M₂</span><span class=\"w\"> </span><span class=\"n\">w'</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">h₂</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">assumption</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">inr</span><span class=\"w\"> </span><span class=\"n\">w'</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">right</span>\n<span class=\"w\">    </span><span class=\"n\">exists</span><span class=\"w\"> </span><span class=\"n\">w'</span>\n<span class=\"w\">    </span><span class=\"n\">constructor</span>\n<span class=\"w\">    </span><span class=\"bp\">.</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">h₁</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">assumption</span>\n<span class=\"w\">    </span><span class=\"bp\">.</span><span class=\"w\"> </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">eval_plus_r</span><span class=\"w\"> </span><span class=\"n\">M₁</span><span class=\"w\"> </span><span class=\"n\">M₂</span><span class=\"w\"> </span><span class=\"n\">w'</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">h₂</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">assumption</span>\n</code></pre></div>\n<p>The only differences are the use of <code>left</code>/<code>right</code> tactics at the start, and the use of <code>eval_plus_l</code>/<code>eval_plus_r</code> lemmas at the end. Is there a way to \"compress\" this proof (maybe tactics or combinators I'm not aware of), that eliminates this redundancy from the tactic code for the proof?</p>",
        "id": 447906853,
        "sender_full_name": "Jacob Weightman",
        "timestamp": 1719627303
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, but perhaps something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"bp\">&lt;;&gt;</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">left</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">right</span><span class=\"o\">]</span>\n<span class=\"n\">all_goals</span>\n<span class=\"w\">  </span><span class=\"n\">exists</span><span class=\"w\"> </span><span class=\"n\">w'</span>\n<span class=\"w\">  </span><span class=\"n\">constructor</span>\n<span class=\"w\">  </span><span class=\"bp\">.</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">h₁</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">assumption</span>\n<span class=\"w\">  </span><span class=\"bp\">.</span><span class=\"w\"> </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">eval_plus_r</span><span class=\"w\"> </span><span class=\"n\">M₁</span><span class=\"w\"> </span><span class=\"n\">M₂</span><span class=\"w\"> </span><span class=\"n\">w'</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">h₂</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">assumption</span>\n</code></pre></div>",
        "id": 447936655,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719643344
    },
    {
        "content": "<p>Less general, but maybe <code>refine w.imp ?_ ?_ &lt;;&gt; intro w' ...</code> works if I got the lemma name right</p>",
        "id": 447940432,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1719644718
    },
    {
        "content": "<p>Oh perfect, in all my scouring of the docs and published tutorials I didn't come across <code>[left; right]</code>. That's exactly what I was looking for! Thanks <span class=\"user-mention\" data-user-id=\"110087\">@Kim Morrison</span></p>",
        "id": 447941117,
        "sender_full_name": "Jacob Weightman",
        "timestamp": 1719645276
    },
    {
        "content": "<p>(I think it is not a core tactic, but defined in Batteries.)</p>",
        "id": 447941129,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719645299
    },
    {
        "content": "<p>Oh, you're right. In my particular case I guess the Batteries were included, but that's a good caveat to be aware of</p>",
        "id": 447941344,
        "sender_full_name": "Jacob Weightman",
        "timestamp": 1719645486
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"732199\">Jacob Weightman</span> has marked this topic as resolved.</p>",
        "id": 448007983,
        "sender_full_name": "Notification Bot",
        "timestamp": 1719683477
    }
]