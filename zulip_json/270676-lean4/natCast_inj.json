[
    {
        "content": "<p>I'm trying to prove <code>↑n = ↑m → n = m</code> where <code>n, m : ℕ</code> and the equality is at the reals. I assume there's either a lemma for this somewhere or some nuclear tactic. Is that correct?</p>",
        "id": 423925684,
        "sender_full_name": "Cody Roux",
        "timestamp": 1709165079
    },
    {
        "content": "<p>BTW, <code>apply?</code> really does not seem to help, unfortunately.</p>",
        "id": 423925740,
        "sender_full_name": "Cody Roux",
        "timestamp": 1709165115
    },
    {
        "content": "<p><code>hint</code> leads to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.cast_inj#doc\">docs#Nat.cast_inj</a> which works just fine.</p>",
        "id": 423926184,
        "sender_full_name": "Terence Tao",
        "timestamp": 1709165452
    },
    {
        "content": "<p>Indeed, <code>exact?</code> does not work here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span><span class=\"bp\">?</span>\n</code></pre></div>",
        "id": 423927517,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709166489
    },
    {
        "content": "<p><code>Nat.cast_injective</code> is the exact statement of your question:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Nat.cast_injective</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 423927579,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709166516
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 423947268,
        "sender_full_name": "Cody Roux",
        "timestamp": 1709179793
    },
    {
        "content": "<p>In 2018 you had to learn all of these function names to move between nat, int, rat, real and complex (there was even a cheat sheet!). But nowadays we have the <code>norm_cast</code> and <code>push_cast</code> tactics (and friends such as <code>assumption_mod_cast</code>) which do all the dirty work for you automatically.</p>",
        "id": 423977114,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709197888
    },
    {
        "content": "<p>Wow <code>norm_cast</code> is a godsend!</p>",
        "id": 424124559,
        "sender_full_name": "Cody Roux",
        "timestamp": 1709247630
    },
    {
        "content": "<p>We spent a while trying to get <code>simp</code> to do this, but Mario was always adamant that this wasn't <code>simp</code>s job, and then Rob Lewis I think supervised an UG or masters project which became <code>norm_cast</code>. Note that <code>Nat.cast_inj</code> is tagged <code>@[norm_cast]</code> in the source.</p>",
        "id": 424125640,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709248121
    },
    {
        "content": "<p>Is <code>norm_cast</code> inspired by another proof assistant, or is it a Lean original?</p>",
        "id": 425016522,
        "sender_full_name": "Chris Wong",
        "timestamp": 1709706978
    },
    {
        "content": "<p>The conclusion of this paper seems to imply the latter – <a href=\"https://lean-forward.github.io/norm_cast/norm_cast.pdf\">https://lean-forward.github.io/norm_cast/norm_cast.pdf</a></p>",
        "id": 425016574,
        "sender_full_name": "Chris Wong",
        "timestamp": 1709707042
    }
]