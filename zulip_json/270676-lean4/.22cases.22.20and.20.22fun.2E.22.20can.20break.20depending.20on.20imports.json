[
    {
        "content": "<p>The behaviour of <code>cases</code> depends on what is imported. This can break <code>fun.</code> proofs from <code>Std.Tactic.NoMatch</code>, for example when importing modules like <code>Mathlib.Data.Finset.Basic</code> (or <code>Mathlib.Data.Nat.Basic</code>).</p>\n<p>A minimal example prepared by <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  is the following.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Order.Monoid.Defs</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">DagFormula</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">box</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">DagFormula</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">DagFormula</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OrderedCancelAddCommMonoid</span> <span class=\"n\">‚Ñï</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.add</span> <span class=\"c1\">-- sorry either of these fields to remove the errors below</span>\n  <span class=\"n\">lt</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.lt</span> <span class=\"c1\">-- sorry either of these fields to remove the errors below</span>\n  <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">zero_add</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">add_zero</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">nsmul</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">nsmul_zero</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">nsmul_succ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">add_comm</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">le_refl</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">le_trans</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">lt_iff_le_not_le</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">le_antisymm</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">add_le_add_left</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">le_of_add_le_add_left</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">formulaNotSelfContaining</span> <span class=\"o\">:</span> <span class=\"bp\">¬¨</span> <span class=\"o\">(</span><span class=\"n\">DagFormula.box</span> <span class=\"n\">Œ≤</span> <span class=\"o\">(</span><span class=\"n\">œà</span> <span class=\"o\">:</span> <span class=\"n\">DagFormula</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">œà</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a</span>\n  <span class=\"c1\">-- dependent elimination failed, failed to solve equation</span>\n  <span class=\"c1\">--   œà = DagFormula.box Œ≤ œà</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">formulaNotSelfContaining'</span> <span class=\"o\">:</span> <span class=\"bp\">¬¨</span> <span class=\"o\">(</span><span class=\"n\">DagFormula.box</span> <span class=\"n\">Œ≤</span> <span class=\"o\">(</span><span class=\"n\">œà</span> <span class=\"o\">:</span> <span class=\"n\">DagFormula</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">œà</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span><span class=\"bp\">.</span>\n  <span class=\"c1\">--missing cases</span>\n</code></pre></div>\n<p>I am unsure if this can be considered a bug in Lean or in <a class=\"stream\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4\">#mathlib4</a> . If yes, should I file an issue somewhere? If no, what is the best way to deal with such problems?</p>\n<p>An ugly workaround is to move the types for which I want \"does not contain itself\" proofs into a separate file that does not import too much.</p>\n<p>For more examples and the motivation, see the previous discussion <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20well-foundedness.20of.20my.20own.20inductive.3F/near/413001088\">here</a> and the later messages there.</p>",
        "id": 417010364,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1705773034
    },
    {
        "content": "<p>Just to clarify: the error appears if you edit the above code so that <code>lt := Nat.lt</code>, and the reason is that Lean seems to try to use <code>SizeOf</code> to make progress and the instance above gives an instance of e.g. <code>ContravariantClass ‚Ñï ‚Ñï (Function.swap fun x x_1 =&gt; x + x_1) fun x x_1 =&gt; x &lt; x_1</code> which for some reason is breaking the <code>cases</code> tactic. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- import Mathlib.Data.Nat.Order.Basic -- uncomment to break the file</span>\n\n<span class=\"c1\">-- #synth OrderedCancelAddCommMonoid ‚Ñï -- if this succeeds, the proof below fails</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">DagFormula</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">box</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">DagFormula</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">DagFormula</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">formulaNotSelfContaining</span> <span class=\"o\">:</span> <span class=\"bp\">¬¨</span> <span class=\"o\">(</span><span class=\"n\">DagFormula.box</span> <span class=\"n\">Œ≤</span> <span class=\"o\">(</span><span class=\"n\">œà</span> <span class=\"o\">:</span> <span class=\"n\">DagFormula</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">œà</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a</span>\n  <span class=\"c1\">-- dependent elimination failed, failed to solve equation</span>\n  <span class=\"c1\">--   œà = DagFormula.box Œ≤ œà</span>\n</code></pre></div>",
        "id": 417012450,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705774924
    },
    {
        "content": "<p>When the proof works, the instance trace is</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>[Meta.synthInstance] ‚úÖ SizeOf DagFormula ‚ñ∂\n\n[Meta.synthInstance] ‚úÖ SizeOf DagFormula ‚ñ∂\n\n[Meta.synthInstance] ‚úÖ LT Nat ‚ñ∂\n\n[Meta.synthInstance] ‚úÖ LT Nat ‚ñ∂\n</code></pre></div>\n<p>and when it doesn't, it's</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>[Meta.synthInstance] ‚úÖ SizeOf DagFormula ‚ñ∂\n\n[Meta.synthInstance] ‚úÖ SizeOf DagFormula ‚ñ∂\n\n[Meta.synthInstance] ‚úÖ LT ‚Ñï ‚ñ∂\n\n[Meta.synthInstance] ‚úÖ LT ‚Ñï ‚ñ∂\n\n[Meta.synthInstance] üí• Preorder ?Œ± ‚ñ∂\n\n[Meta.synthInstance] üí• Preorder ?Œ± ‚ñ∂\n\n[Meta.synthInstance] üí• LT ?Œ± ‚ñ∂\n\n[Meta.synthInstance] üí• LT ?Œ± ‚ñ∂\n\n[Meta.synthInstance] ‚úÖ AddZeroClass ‚Ñï ‚ñ∂\n\n[Meta.synthInstance] ‚úÖ AddZeroClass ‚Ñï ‚ñ∂\n\n[Meta.synthInstance] ‚úÖ LT ‚Ñï ‚ñ∂\n\n[Meta.synthInstance] ‚úÖ CovariantClass ‚Ñï ‚Ñï (Function.swap fun x x_1 =&gt; x + x_1) fun x x_1 =&gt; x &lt; x_1 ‚ñ∂\n\n[Meta.synthInstance] ‚úÖ ContravariantClass ‚Ñï ‚Ñï (Function.swap fun x x_1 =&gt; x + x_1) fun x x_1 =&gt; x &lt; x_1 ‚ñ∂\n\n[Meta.synthInstance] ‚úÖ LE ‚Ñï ‚ñ∂\n\n[Meta.synthInstance] üí• Preorder ?Œ± ‚ñ∂\n\n[Meta.synthInstance] üí• Preorder ?Œ± ‚ñ∂\n\n[Meta.synthInstance] ‚úÖ Preorder ‚Ñï ‚ñ∂\n\n[Meta.synthInstance] ‚úÖ Preorder ‚Ñï ‚ñ∂\n\n[Meta.synthInstance] ‚ùå Subsingleton ‚Ñï ‚ñ∂\n\n[Meta.synthInstance] ‚ùå CanonicallyOrderedCommMonoid ‚Ñï ‚ñ∂\n\n[Meta.synthInstance] ‚ùå CanonicallyOrderedCommMonoid ?Œ± ‚ñ∂\n\n[Meta.synthInstance] ‚ùå CanonicallyOrderedCommMonoid ?Œ± ‚ñ∂\n</code></pre></div>",
        "id": 417013090,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705775461
    }
]