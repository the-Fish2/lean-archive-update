[
    {
        "content": "<p>I'm trying to learn some basic metaprogramming, and I'm currently trying to understand the implementation of the tactic<code>cancel_denoms</code> in mathlib. I want to experiment a bit with its helper functions, such as <code>findCancelFactor</code>, which takes <code>e : Expr</code> as an argument. Is there a way to conveniently write down non-trivial expressions to test this function, such as for example <code>5x/10 + 23y/2</code>, without having to manually write down the corresponding <code>Expr</code> object?</p>",
        "id": 438881250,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1715805429
    },
    {
        "content": "<p>This is what <code>Qq</code> is for.</p>",
        "id": 438881646,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1715805592
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Qq</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Qq</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Qq</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Rat</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Rat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"bp\">*</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"mi\">10</span> <span class=\"bp\">+</span> <span class=\"mi\">23</span> <span class=\"bp\">*</span> <span class=\"bp\">$</span><span class=\"n\">y</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Rat</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 438881931,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1715805712
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/270676-lean4/topic/Creating.20Expr.20objects/near/438881931\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Qq</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Qq</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Qq</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Rat</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Rat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"bp\">*</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"mi\">10</span> <span class=\"bp\">+</span> <span class=\"mi\">23</span> <span class=\"bp\">*</span> <span class=\"bp\">$</span><span class=\"n\">y</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Rat</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Amazing, thanks a lot!</p>",
        "id": 438882031,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1715805748
    },
    {
        "content": "<p>But beware that <code>Qq</code> is unfortunately still difficult to use.</p>",
        "id": 438882343,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1715805887
    },
    {
        "content": "<p>Yeah, I was just going to ask if there was any place I could read more about it. I came across it before in <code>cancel_denoms</code> but I struggled to find documentation about it then</p>",
        "id": 438882620,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1715806010
    },
    {
        "content": "<p>I promised at some point to write some tutorial-like documentation for it, but that hasn't happened yet...</p>",
        "id": 438886703,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715807601
    },
    {
        "content": "<p>If you want to see how to generate an Expr, you could use the Mathlib <code>ToExpr Expr</code> instance:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span> <span class=\"n\">Term</span> <span class=\"k\">in</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"#expr \"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">liftTermElabM</span> <span class=\"k\">do</span> <span class=\"n\">elabTermAndSynthesize</span> <span class=\"n\">t</span> <span class=\"n\">none</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{toExpr e}\"</span>\n\n<span class=\"bp\">#</span><span class=\"n\">expr</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Rat</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">5</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">/</span><span class=\"mi\">10</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">Lean.Expr.lam `x (Lean.Expr.const `Rat [])</span>\n<span class=\"cm\">  (((((((Lean.Expr.const `HDiv.hDiv [Lean.Level.zero, Lean.Level.zero, Lean.Level.zero]).app</span>\n<span class=\"cm\">                        (Lean.Expr.const `Rat [])).app</span>\n<span class=\"cm\">                    (Lean.Expr.const `Rat [])).app</span>\n<span class=\"cm\">                (Lean.Expr.const `Rat [])).app</span>\n<span class=\"cm\">            (((Lean.Expr.const `instHDiv [Lean.Level.zero]).app (Lean.Expr.const `Rat [])).app</span>\n<span class=\"cm\">              (Lean.Expr.const `Rat.instDiv []))).app</span>\n<span class=\"cm\">        (((((((Lean.Expr.const `HMul.hMul [Lean.Level.zero, Lean.Level.zero, Lean.Level.zero]).app</span>\n<span class=\"cm\">                              (Lean.Expr.const `Rat [])).app</span>\n<span class=\"cm\">                          (Lean.Expr.const `Rat [])).app</span>\n<span class=\"cm\">                      (Lean.Expr.const `Rat [])).app</span>\n<span class=\"cm\">                  (((Lean.Expr.const `instHMul [Lean.Level.zero]).app (Lean.Expr.const `Rat [])).app</span>\n<span class=\"cm\">                    (Lean.Expr.const `Rat.instMul []))).app</span>\n<span class=\"cm\">              ((((Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]).app (Lean.Expr.const `Rat [])).app</span>\n<span class=\"cm\">                    (Lean.Expr.lit (Lean.Literal.natVal 5))).app</span>\n<span class=\"cm\">                ((Lean.Expr.const `Rat.instOfNat []).app (Lean.Expr.lit (Lean.Literal.natVal 5))))).app</span>\n<span class=\"cm\">          (Lean.Expr.bvar 0))).app</span>\n<span class=\"cm\">    ((((Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]).app (Lean.Expr.const `Rat [])).app</span>\n<span class=\"cm\">          (Lean.Expr.lit (Lean.Literal.natVal 10))).app</span>\n<span class=\"cm\">      ((Lean.Expr.const `Rat.instOfNat []).app (Lean.Expr.lit (Lean.Literal.natVal 10)))))</span>\n<span class=\"cm\">  Lean.BinderInfo.default</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 438922814,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715829576
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/Creating.20Expr.20objects/near/438886703\">said</a>:</p>\n<blockquote>\n<p>I promised at some point to write some tutorial-like documentation for it, but that hasn't happened yet...</p>\n</blockquote>\n<p>I think this was a shared promise and I'm not out of exams before a month, so...</p>",
        "id": 438932443,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715834686
    }
]