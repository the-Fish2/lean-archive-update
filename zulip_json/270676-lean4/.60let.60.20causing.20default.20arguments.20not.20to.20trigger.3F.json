[
    {
        "content": "<p>I'm just working through FPIL to come up to a curious bug:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">WithLog</span> <span class=\"o\">(</span><span class=\"n\">logged</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">log</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">logged</span>\n  <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"c1\">-- works on its own:</span>\n<span class=\"c1\">-- instance : Monad (WithLog logged) where</span>\n<span class=\"c1\">-- pure := (⟨[], ·⟩)</span>\n<span class=\"c1\">-- bind logged f := f logged.val</span>\n\n<span class=\"c1\">--wants me to define 'map', 'mapConst', 'seq', 'seqLeft'.</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"o\">(</span><span class=\"n\">WithLog</span> <span class=\"n\">logged</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span> <span class=\"o\">:=</span> <span class=\"o\">(⟨[],</span> <span class=\"bp\">·</span><span class=\"o\">⟩)</span>\n  <span class=\"n\">bind</span> <span class=\"n\">logged</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"n\">new</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">logged.val</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"o\">⟨</span><span class=\"n\">logged.log</span> <span class=\"bp\">++</span> <span class=\"n\">new.log</span><span class=\"o\">,</span> <span class=\"n\">new.val</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>It seems to be something to do with the <code>let</code>, as <code>  bind logged f := let new := f logged.val; new</code> also has the same effect.  However, a simplistic reproduction seems to have no effect:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Bar</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">FooBar</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Foo</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">Bar</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">b</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"mi\">37</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">FooBar</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">a</span> <span class=\"n\">_x</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">_x</span><span class=\"bp\">;</span> <span class=\"n\">t.2</span> <span class=\"c1\">-- works fine</span>\n</code></pre></div>\n<p>Note that the issue does not happen if the <code>let</code> binding is unused; e.g., <code>let new := f logged.val; f logged.val</code> will not give me such an error.</p>",
        "id": 418268090,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1706273021
    },
    {
        "content": "<p>(this is all on 4.5.0rc1)</p>",
        "id": 418268765,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1706273283
    },
    {
        "content": "<p>Huh, changing <code>let</code> to <code>letI</code> or <code>have</code> makes the problem go away. (<code>letI</code> isn't a solution -- that causes <code>f logged.val</code> to be evaluated twice)</p>",
        "id": 418302609,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1706284331
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>  This is issue <a href=\"https://github.com/leanprover/lean4/pull/3146\">lean4#3146</a>, fixed in <a href=\"https://github.com/leanprover/lean4/pull/3152\">lean4#3152</a>. I put it as a draft instead of PR because I didn't get the explicit approval from a developer to a make the PR (accordingly with the <a href=\"https://github.com/leanprover/lean4/blob/master/.github/PULL_REQUEST_TEMPLATE.md\">PR template</a>), but it is ready for review.</p>",
        "id": 418318360,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1706289553
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"432410\">@Arthur Adjedj</span>, I've put reviewing your PR on my list of things to do</p>",
        "id": 418344049,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1706299563
    }
]