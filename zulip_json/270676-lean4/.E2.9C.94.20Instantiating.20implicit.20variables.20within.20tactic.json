[
    {
        "content": "<p>Hi, I have a question about using <code>evalTactic</code> and then getting an uninstantiated variable in my state. </p>\n<p>I'm using <code>evalTactic (← (tactic| apply Classical.byContradiction; intro))</code> to turn the goal into false and get the original goal as a negated hypothesis. That works fine; if I put the cursor after an invocation of my tactic I can clearly see the goal now as a hypothesis. However, when I pretty print all the types of my hypothesis within my tactic using <code>dbg_trace</code>, the newly added hypothesis just has type <code>?p</code>. Or <code>?_uniq.10432</code>, if I don't pretty print it. I guess this makes some sense, there is an implicit argument in <code>byContradiction</code> called <code>p</code>. How do I instantiate this implicit variable within the tactic? It looks like lean takes care of straightening this out after my tactic terminates, can I somehow instruct it to do it earlier? Or should I stay away from using <code>evalTactic</code> to manipulate the tactic state and do it differently?</p>\n<p>Some extra context: this is what my <code>dbg_traces</code> print:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Hypothesis</span><span class=\"o\">:</span> <span class=\"n\">a._</span><span class=\"bp\">@.</span><span class=\"n\">BfSat._hyg.1953.1982</span><span class=\"o\">,</span> <span class=\"n\">type</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span>\n<span class=\"n\">Hypothesis</span><span class=\"o\">:</span> <span class=\"n\">a._</span><span class=\"bp\">@.</span><span class=\"n\">BfSat._hyg.1959.1984</span><span class=\"o\">,</span> <span class=\"n\">type</span><span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">c</span>\n<span class=\"n\">Hypothesis</span><span class=\"o\">:</span> <span class=\"n\">a._</span><span class=\"bp\">@.</span><span class=\"n\">Init.Classical.1137.BfSat._hyg.1989</span><span class=\"o\">,</span> <span class=\"n\">type</span><span class=\"o\">:</span> <span class=\"bp\">¬?</span><span class=\"n\">p</span>\n<span class=\"n\">found</span> <span class=\"n\">a</span> <span class=\"n\">not</span> <span class=\"n\">applied</span> <span class=\"n\">to</span><span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">p</span>\n<span class=\"n\">found</span> <span class=\"n\">a</span> <span class=\"n\">not</span> <span class=\"n\">applied</span> <span class=\"n\">to</span><span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">_uniq.10432</span>\n<span class=\"n\">found</span> <span class=\"n\">a</span> <span class=\"n\">not</span> <span class=\"n\">applied</span> <span class=\"n\">to</span><span class=\"o\">:</span> <span class=\"bp\">¬?</span><span class=\"n\">p</span>\n</code></pre></div>\n<p>And this is what it looks like in lean:<br>\n<a href=\"/user_uploads/3121/O6YRSH9Xnw1y-vC0diihLNbh/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/O6YRSH9Xnw1y-vC0diihLNbh/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/O6YRSH9Xnw1y-vC0diihLNbh/image.png\"></a></div><p>I am at a loss on how to trigger instantiation of <code>?p</code>...</p>",
        "id": 421690236,
        "sender_full_name": "Bob Rubbens",
        "timestamp": 1708013723
    },
    {
        "content": "<p>Do you have a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 421691310,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708013986
    },
    {
        "content": "<p>Hope it is small enough:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"n\">Term</span> <span class=\"n\">Meta</span> <span class=\"n\">PrettyPrinter</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">quickpp</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">Format</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">d</span> <span class=\"bp\">←</span> <span class=\"n\">delab</span> <span class=\"n\">e</span>\n  <span class=\"n\">PrettyPrinter.formatCategory</span> <span class=\"bp\">`</span><span class=\"n\">type</span> <span class=\"n\">d</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">nonSplittingSimplify</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"n\">g.withContext</span> <span class=\"k\">do</span>\n  <span class=\"n\">dbg_trace</span> <span class=\"n\">f</span><span class=\"bp\">!</span><span class=\"s2\">\"-- Hypotheses --\"</span>\n  <span class=\"n\">for</span> <span class=\"n\">ldecl</span> <span class=\"k\">in</span> <span class=\"bp\">←</span> <span class=\"n\">getLCtx</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">ldecl.fvarId</span>\n    <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">h.getType</span>\n    <span class=\"n\">dbg_trace</span> <span class=\"n\">f</span><span class=\"bp\">!</span><span class=\"s2\">\"Hypothesis: {← h.getUserName}, type: {← quickpp t}\"</span>\n    <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"bp\">←</span> <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Expr.app</span> <span class=\"o\">(</span><span class=\"n\">Expr.const</span> <span class=\"bp\">``</span><span class=\"n\">And.intro</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">dbg_trace</span> <span class=\"s2\">\"found an and!\"</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Expr.app</span> <span class=\"o\">(</span><span class=\"n\">Expr.const</span> <span class=\"bp\">``</span><span class=\"n\">Not</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">inner</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">dbg_trace</span> <span class=\"n\">f</span><span class=\"bp\">!</span><span class=\"s2\">\"found a not applied to: {← quickpp inner}\"</span>\n      <span class=\"n\">dbg_trace</span> <span class=\"n\">f</span><span class=\"bp\">!</span><span class=\"s2\">\"found a not applied to: {inner}\"</span>\n      <span class=\"k\">let</span> <span class=\"n\">inferred</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.Meta.inferType</span> <span class=\"n\">ldecl.toExpr</span>\n      <span class=\"n\">dbg_trace</span> <span class=\"n\">f</span><span class=\"bp\">!</span><span class=\"s2\">\"found a not applied to: {← quickpp inferred}\"</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">continue</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">Classical.byContradiction</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"bfsat\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">evalTactic</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">Classical.byContradiction</span><span class=\"bp\">;</span> <span class=\"n\">intro</span><span class=\"o\">))</span>\n  <span class=\"n\">nonSplittingSimplify</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getMainGoal</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">bfsat</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 421692460,
        "sender_full_name": "Bob Rubbens",
        "timestamp": 1708014282
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">h.getType</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 421693026,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1708014434
    },
    {
        "content": "<p>Assigned metavariables don't get replaced with their assignment automatically; you have to <code>instantiateMVars</code> to achieve this. Many functions do it for you, but <code>debug_trace</code> is not among them. (<code>trace[debug]</code> does and is generally better, so I suggest you use that whenever you can.)</p>",
        "id": 421693518,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1708014557
    },
    {
        "content": "<p>Ugh, I have to read the manual more carefully... Thanks a lot! Out of curiosty, is there a reason my evalTactic call does not instantiate the mvar before terminating? I would expect the intro call to take care of that, but that's a naive intuition then?</p>",
        "id": 421693577,
        "sender_full_name": "Bob Rubbens",
        "timestamp": 1708014572
    },
    {
        "content": "<p>There is no expectation that a function which returns an <code>Expr</code> instantiates any mvars. It may do so, but doesn't have to. Rather, there is an expectation that whenever you consume an <code>Expr</code>, you instantiate mvars.</p>",
        "id": 421694099,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1708014707
    },
    {
        "content": "<p>I see, that makes sense</p>",
        "id": 421694189,
        "sender_full_name": "Bob Rubbens",
        "timestamp": 1708014725
    },
    {
        "content": "<p>The manual probably doesn't explain this, but the <a href=\"https://leanprover-community.github.io/lean4-metaprogramming-book/\">metaprogramming book</a> hopefully does.</p>",
        "id": 421694704,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1708014849
    },
    {
        "content": "<p>In adding case <code>      trace[debug] f!\"found a not applied to: {← quickpp inner}\"</code>does not instantiate the mvar for me. Is trace[debug] supposed to instantiate all mvars in an expression or only sometimes? Or should I not rely upon that in general?</p>",
        "id": 421694799,
        "sender_full_name": "Bob Rubbens",
        "timestamp": 1708014878
    },
    {
        "content": "<p>This does it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">trace</span><span class=\"o\">[</span><span class=\"n\">debug</span><span class=\"o\">]</span> <span class=\"s2\">\"Hypothesis: {← h.getUserName}, type: {t}\"</span>\n</code></pre></div>",
        "id": 421696692,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1708015378
    },
    {
        "content": "<p>Note the missing <code>f!</code>. <code>trace[debug]</code> interprets a string argument <code>\"...\"</code> as <code>m!\"...\"</code>, which constructs <code>MessageData</code>. <code>MessageData</code>, in turn, can store expressions and later pretty-print them correctly.</p>",
        "id": 421697180,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1708015503
    },
    {
        "content": "<p>You can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.instantiateMVarDeclMVars#doc\">docs#Lean.instantiateMVarDeclMVars</a> to instantiateMVars in everything in the local context and the target, updating the goal</p>",
        "id": 421698294,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708015810
    },
    {
        "content": "<p>Thanks a lot!</p>",
        "id": 421736249,
        "sender_full_name": "Bob Rubbens",
        "timestamp": 1708029385
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"381694\">Bob Rubbens</span> has marked this topic as resolved.</p>",
        "id": 421736271,
        "sender_full_name": "Notification Bot",
        "timestamp": 1708029395
    }
]