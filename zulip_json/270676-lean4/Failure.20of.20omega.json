[
    {
        "content": "<p>Here's something that <code>ring</code> can solve but <code>omega</code> cannot:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Tactic</span><span class=\"bp\">.</span><span class=\"n\">Ring</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℤ</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"c1\">-- omega -- fails</span>\n<span class=\"w\">  </span><span class=\"n\">ring</span>\n</code></pre></div>\n<p>Is this expected?</p>",
        "id": 446137997,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718992018
    },
    {
        "content": "<p>I thought omega was only useful for nat. Is it not?</p>",
        "id": 446139872,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1718992742
    },
    {
        "content": "<p>I was going to say \"be sure to read the first line of the docstring,\" but I guess I need to read it too:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">The</span><span class=\"w\"> </span><span class=\"n\">omega</span><span class=\"w\"> </span><span class=\"n\">tactic</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">for</span><span class=\"w\"> </span><span class=\"n\">resolving</span><span class=\"w\"> </span><span class=\"n\">integer</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">natural</span><span class=\"w\"> </span><span class=\"n\">linear</span><span class=\"w\"> </span><span class=\"n\">arithmetic</span><span class=\"w\"> </span><span class=\"n\">problems</span>\n</code></pre></div>\n<p>This is nonlinear arithmetic, so I guess I shouldn't be surprised it failed!</p>",
        "id": 446140045,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718992806
    },
    {
        "content": "<p>(Not only is omega useful for Int, but my understanding is that it converts everything from Nat to Int internally.)</p>",
        "id": 446140257,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718992879
    },
    {
        "content": "<p>Omega the decision procedure is a complete procedure for quantifier free linear integer arithmetic (or QF_LIA in SMT speak) our omega is an implementation of that procedure (not a complete implementation, it misses handling for some special cases) + lean specific things on top like the Nat reasoning etc.</p>",
        "id": 446142075,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1718993532
    },
    {
        "content": "<p>Oh right. I recall reading that omega is a decision procedure for quantifier free portion of presburger arithmetic which I thought was first order theory of natural numbers with addition. TIL integers are included.</p>",
        "id": 446144103,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1718994343
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 446144195,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1718994366
    },
    {
        "content": "<p>Multiplications are just treated as atoms by <code>omega</code>.</p>",
        "id": 446216171,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719028591
    }
]