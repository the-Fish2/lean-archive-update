[
    {
        "content": "<p>I was writing a tactic proof and declared a variable <code>U</code> with <code>let</code>, which I used throughout the proof. However, <code>U</code> is marked as unused by the linter. Am I doing something wrong or is there a bug in the linter? This isn't a big deal, but I'm just curious.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"c1\">-- https://math.stackexchange.com/a/4204</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">continuous_induction</span> <span class=\"o\">[</span><span class=\"n\">ConditionallyCompleteLinearOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">IsMax</span> <span class=\"n\">x</span> <span class=\"bp\">∨</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"bp\">&gt;</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">Set.Ico</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"bp\">≥</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">Set.Ico</span> <span class=\"n\">l</span> <span class=\"n\">y</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">Set.Ici</span> <span class=\"n\">l</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">by_contra</span> <span class=\"n\">hc</span>\n    <span class=\"k\">let</span> <span class=\"n\">U</span> <span class=\"o\">:=</span> <span class=\"n\">s</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">∩</span> <span class=\"n\">Set.Ici</span> <span class=\"n\">l</span> <span class=\"c1\">-- unused variable `U` [linter.unusedVariables]</span>\n\n    <span class=\"c1\">-- Proof that `U` is nonempty</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Set.not_subset</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hc</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">ht₁</span><span class=\"o\">,</span> <span class=\"n\">ht₂</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hc</span>\n    <span class=\"k\">have</span> <span class=\"n\">ht₃</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">ht₂</span><span class=\"o\">,</span> <span class=\"n\">ht₁</span><span class=\"o\">⟩</span>\n    <span class=\"k\">have</span> <span class=\"n\">hU</span> <span class=\"o\">:</span> <span class=\"n\">U.Nonempty</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">ht₃</span><span class=\"o\">⟩</span>\n\n    <span class=\"c1\">-- `l` is a lower bound to U</span>\n    <span class=\"k\">have</span> <span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">∈</span> <span class=\"n\">lowerBounds</span> <span class=\"n\">U</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">apply</span> <span class=\"n\">union_lowerBounds_subset_lowerBounds_inter</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Set.mem_union_right</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">lowerBounds_Ici</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"n\">Set.right_mem_Iic</span>\n\n    <span class=\"c1\">-- Let `y` be the greatest lower bound of `U`. From (iii), `y ∈ s`</span>\n    <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">sInf</span> <span class=\"n\">U</span>\n    <span class=\"k\">have</span> <span class=\"n\">hyl</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">le_csInf</span> <span class=\"n\">hU</span> <span class=\"n\">hl</span>\n    <span class=\"k\">have</span> <span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">apply</span> <span class=\"n\">h₂</span> <span class=\"n\">y</span> <span class=\"n\">hyl</span>\n      <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"o\">⟨</span><span class=\"n\">hx₁</span><span class=\"o\">,</span> <span class=\"n\">hx₂</span><span class=\"o\">⟩</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">∩</span> <span class=\"n\">Set.Ici</span> <span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">ᶜ</span> <span class=\"o\">:=</span> <span class=\"n\">not_mem_of_lt_csInf</span> <span class=\"n\">hx₂</span> <span class=\"o\">⟨</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">hl</span><span class=\"o\">⟩</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Set.compl_inter</span><span class=\"o\">,</span> <span class=\"n\">Set.mem_union</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n      <span class=\"n\">cases</span> <span class=\"n\">this</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">Set.not_not_mem.mp</span> <span class=\"n\">h</span>\n      <span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">hx₁</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n\n    <span class=\"n\">cases</span> <span class=\"n\">h₁</span> <span class=\"n\">y</span> <span class=\"n\">hy</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"n\">hz</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">hz₁</span><span class=\"o\">,</span> <span class=\"n\">hz₂</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hz</span>\n      <span class=\"n\">apply</span> <span class=\"n\">not_le_of_lt</span> <span class=\"n\">hz₁</span>\n      <span class=\"n\">apply</span> <span class=\"n\">le_csInf</span> <span class=\"n\">hU</span>\n      <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">hx</span>\n      <span class=\"n\">cases</span> <span class=\"n\">le_or_lt</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">csInf_le</span> <span class=\"o\">⟨</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">hl</span><span class=\"o\">⟩</span> <span class=\"n\">hx</span>\n        <span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">not_lt_of_le</span> <span class=\"n\">this</span><span class=\"o\">)</span>\n      <span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">by_contra</span> <span class=\"n\">hx'</span>\n        <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">hx'</span>\n        <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">hz₂</span> <span class=\"o\">⟨</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hx'</span><span class=\"o\">⟩</span>\n        <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"bp\">ᶜ</span> <span class=\"o\">:=</span> <span class=\"n\">Set.mem_of_mem_inter_left</span> <span class=\"n\">hx</span>\n        <span class=\"n\">contradiction</span>\n    <span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"n\">hm</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">IsMax.eq_of_le</span> <span class=\"n\">hm</span> <span class=\"o\">(</span><span class=\"n\">csInf_le</span> <span class=\"o\">⟨</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">hl</span><span class=\"o\">⟩</span>  <span class=\"n\">ht₃</span><span class=\"o\">)</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hy</span>\n      <span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"n\">hy</span> <span class=\"n\">ht₂</span>\n</code></pre></div>\n<p>This was tested both on a slightly outdated version of Lean and <a href=\"http://live.lean-lang.org\">live.lean-lang.org</a> so this must not be a new problem.</p>",
        "id": 409799950,
        "sender_full_name": "Niels Voss",
        "timestamp": 1703409282
    },
    {
        "content": "<p>Weird, the <code>let U</code> line appears twice if you <code>#print continuous_induction</code>.</p>",
        "id": 409803129,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1703412313
    }
]