[
    {
        "content": "<p>The following is a consequence of <code>autoParam</code>, and it can be a bit inconvenient. Is this a bug, or intentional for some reason? This affects both <code>rw</code> and <code>simp</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m.succ</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">assumption</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m.succ</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo'</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m.succ</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m.succ</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m.succ</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m.succ</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">foo'</span><span class=\"o\">]</span> <span class=\"c1\">-- succeeds, leaving the goal `⊢ m.succ = n`</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m.succ</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m.succ</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">foo</span> <span class=\"n\">_</span><span class=\"o\">]</span> <span class=\"c1\">-- succeeds, the autoParam fills the proof obligation</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m.succ</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m.succ</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">]</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  tactic 'assumption' failed</span>\n\n<span class=\"cm\">  m✝: Nat</span>\n<span class=\"cm\">  h: Nat.succ m✝ = 1</span>\n<span class=\"cm\">  m: Nat</span>\n<span class=\"cm\">  ⊢ Nat.succ m = 1</span>\n<span class=\"cm\">  -/</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m.succ</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m.succ</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">foo</span> <span class=\"n\">_</span><span class=\"o\">]</span> <span class=\"c1\">-- succeeds, the autoParam fills the proof obligation</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m.succ</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">m.succ</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">]</span> <span class=\"c1\">-- simp made no progress</span>\n</code></pre></div>",
        "id": 422459446,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1708447865
    },
    {
        "content": "<p>bumping this thread because it seems it got lost in the weeds yesterday.</p>",
        "id": 422708260,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1708551172
    },
    {
        "content": "<p>Leo recently fixed some issues with <code>autoParam</code>s in <code>simp</code>, so if you haven't tried this with a very recent nightly yet, that could be worth a shot.</p>",
        "id": 422711458,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1708552776
    },
    {
        "content": "<p>I just tried it on a master branch from today, and it has the same errors</p>",
        "id": 422713858,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708553940
    },
    {
        "content": "<p>I updated the example because Leo pointed out that the right hand side has a metavariable</p>",
        "id": 422713905,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1708553965
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> did you try it with the updated example above?</p>",
        "id": 422713934,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1708553980
    },
    {
        "content": "<p>I second Kyle’s findings.</p>",
        "id": 422714729,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1708554377
    }
]