[
    {
        "content": "<p>No MWE, but do people have tips for debugging very slow <code>simp</code> calls? I have a mutual block where <code>set_option profile true</code> reports this back:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"n\">execution</span> <span class=\"n\">of</span> <span class=\"n\">Lean.Parser.Tactic.unfold</span> <span class=\"n\">took</span> <span class=\"mi\">388</span><span class=\"n\">ms</span>\n<span class=\"n\">simp</span> <span class=\"n\">took</span> <span class=\"mi\">160</span><span class=\"n\">ms</span>\n<span class=\"n\">simp</span> <span class=\"n\">took</span> <span class=\"mi\">866</span><span class=\"n\">ms</span>\n<span class=\"n\">simp</span> <span class=\"n\">took</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">68</span><span class=\"n\">s</span>\n<span class=\"n\">simp</span> <span class=\"n\">took</span> <span class=\"mi\">100</span><span class=\"n\">ms</span>\n<span class=\"n\">simp</span> <span class=\"n\">took</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">55</span><span class=\"n\">s</span>\n</code></pre></div>\n<p>and that's with half the proofs behind <code>stop</code>. Advice would be appreciated!!</p>",
        "id": 418926363,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1706651487
    },
    {
        "content": "<p>(also, 388ms for a call to <code>unfold</code> seems a bit crazy to me, is that maybe the cost of the lazily generated equational lemmas or something?)</p>",
        "id": 418926427,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1706651521
    },
    {
        "content": "<p>Standard reply: have you tried <code>trace.profiler</code>? I actually don't remember if I've tested it on <code>simp</code> yet</p>",
        "id": 418926905,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1706651720
    },
    {
        "content": "<p>Ah, definitely a bit more information, at least lets me figure out exactly which simp calls are so slow. But not much debug info beyond which simps are slow:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>          <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">169936</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">reduce</span><span class=\"o\">]</span> <span class=\"bp\">▼</span>\n            <span class=\"o\">[</span><span class=\"n\">Kernel</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">010725</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">typechecking</span> <span class=\"n\">declaration</span>\n            <span class=\"o\">[</span><span class=\"n\">Kernel</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">010832</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">typechecking</span> <span class=\"n\">declaration</span>\n</code></pre></div>",
        "id": 418927882,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1706652133
    },
    {
        "content": "<p>Ah, <code>set_option trace.Meta.Tactic.simp true</code> lists all the simp lemmas which it's trying and failing to apply, which leads me to some probably bad simp lemmas I've marked simp</p>",
        "id": 418928310,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1706652335
    },
    {
        "content": "<p>okay, I was a bit suspicious of this simp lemma to begin with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">theorem</span> <span class=\"n\">Finset.app_mapEquiv_symm</span> <span class=\"o\">(</span><span class=\"bp\">...</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">f'</span> <span class=\"bp\">=</span> <span class=\"n\">f.1</span> <span class=\"bp\">→</span> <span class=\"n\">f'</span> <span class=\"o\">((</span><span class=\"n\">Finset.mapEquiv</span> <span class=\"n\">s</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x.val</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>It seems simp is quite zealously applying this to every instance of application... Is that because the head of the LHS term is an application with a variable? I was hoping this would be indexed in such a way that it only triggers when <code>Finset.mapEquiv</code> is involved, but I don't know have any idea how the indexing algorithm works.</p>",
        "id": 418929031,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1706652668
    }
]