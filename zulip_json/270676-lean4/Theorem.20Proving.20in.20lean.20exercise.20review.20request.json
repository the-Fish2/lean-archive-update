[
    {
        "content": "<p>I went a bit crazy doing a version of the expression evaluator exercise from chapter 7 exercise 3 of Theorem Proving. </p>\n<blockquote>\n<p>Define an inductive data type consisting of terms built up from the following constructors:</p>\n<ul>\n<li>const n, a constant denoting the natural number n</li>\n<li>var n, a variable, numbered n</li>\n<li>plus s t, denoting the sum of s and t</li>\n<li>times s t, denoting the product of s and t</li>\n</ul>\n<p>Recursively define a function that evaluates any such term with respect to an assignment of values to the variables.</p>\n</blockquote>\n<p>I've simplified it as much as I know how, does anyone have any suggestions for neatening it?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Expr</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">plus</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">times</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Expr</span>\n<span class=\"kd\">def</span> <span class=\"n\">varInExpr</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span>\n  <span class=\"bp\">|</span> <span class=\"n\">plus</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">varInExpr</span> <span class=\"n\">n</span> <span class=\"n\">s</span> <span class=\"bp\">∨</span> <span class=\"n\">varInExpr</span> <span class=\"n\">n</span> <span class=\"n\">t</span>\n  <span class=\"bp\">|</span> <span class=\"n\">times</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">varInExpr</span> <span class=\"n\">n</span> <span class=\"n\">s</span> <span class=\"bp\">∨</span> <span class=\"n\">varInExpr</span> <span class=\"n\">n</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">varInEnv</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">env</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">env.map</span> <span class=\"n\">Prod.fst</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">mem_head_or_tail</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tl</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">hd</span> <span class=\"o\">::</span> <span class=\"n\">tl</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">hd</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">tl</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">head</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">left</span><span class=\"bp\">;</span> <span class=\"n\">eq_refl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">tail</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">right</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getEnv</span> <span class=\"o\">(</span><span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">env</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">ok</span> <span class=\"o\">:</span> <span class=\"n\">varInEnv</span> <span class=\"n\">key</span> <span class=\"n\">env</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">env</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">exfalso</span>\n    <span class=\"n\">cases</span> <span class=\"n\">ok</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">key'</span><span class=\"o\">,</span> <span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">rest</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">key</span> <span class=\"bp\">=</span> <span class=\"n\">key'</span> <span class=\"bp\">∨</span> <span class=\"n\">key</span> <span class=\"bp\">∈</span> <span class=\"n\">rest.map</span> <span class=\"n\">Prod.fst</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">exact</span> <span class=\"n\">mem_head_or_tail</span> <span class=\"n\">key</span> <span class=\"n\">key'</span> <span class=\"o\">(</span><span class=\"n\">List.map</span> <span class=\"n\">Prod.fst</span> <span class=\"n\">rest</span><span class=\"o\">)</span> <span class=\"n\">ok</span>\n    <span class=\"k\">if</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">key</span> <span class=\"bp\">==</span> <span class=\"n\">key'</span> <span class=\"k\">then</span>\n      <span class=\"n\">val</span>\n    <span class=\"k\">else</span>\n      <span class=\"k\">have</span> <span class=\"n\">ok'</span> <span class=\"o\">:</span> <span class=\"n\">varInEnv</span> <span class=\"n\">key</span> <span class=\"n\">rest</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"n\">varInEnv</span> <span class=\"n\">key</span> <span class=\"n\">rest</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">key</span> <span class=\"bp\">∈</span> <span class=\"n\">rest.map</span> <span class=\"n\">Prod.fst</span><span class=\"o\">)</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">]</span>\n        <span class=\"n\">simp_all</span>\n      <span class=\"n\">getEnv</span> <span class=\"n\">key</span> <span class=\"n\">rest</span> <span class=\"n\">ok'</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">varInExpr</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">varInExpr</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"mi\">10</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">left</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">env</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span><span class=\"o\">))</span>\n         <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span>\n         <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">varInExpr</span> <span class=\"n\">n</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">varInEnv</span> <span class=\"n\">n</span> <span class=\"n\">env</span><span class=\"o\">)</span>\n         <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">varInExpr</span> <span class=\"n\">i</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h₂</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">varInEnv</span> <span class=\"n\">i</span> <span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp_all</span> <span class=\"n\">only</span>\n    <span class=\"n\">getEnv</span> <span class=\"n\">i</span> <span class=\"n\">env</span> <span class=\"o\">‹</span><span class=\"n\">varInEnv</span> <span class=\"n\">i</span> <span class=\"n\">env</span><span class=\"o\">›</span>\n  <span class=\"bp\">|</span> <span class=\"n\">plus</span>  <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">sOk</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">varInExpr</span> <span class=\"n\">n</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">varInEnv</span> <span class=\"n\">n</span> <span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">intro</span> <span class=\"n\">n</span> <span class=\"n\">h₃</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">varInExpr</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">s.plus</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">left</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">h₃</span>\n      <span class=\"n\">simp_all</span> <span class=\"n\">only</span>\n    <span class=\"k\">have</span> <span class=\"n\">tOk</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">varInExpr</span> <span class=\"n\">n</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">varInEnv</span> <span class=\"n\">n</span> <span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">intro</span> <span class=\"n\">n</span> <span class=\"n\">h₃</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">varInExpr</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">s.plus</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">right</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">h₃</span>\n      <span class=\"n\">simp_all</span> <span class=\"n\">only</span>\n    <span class=\"n\">eval</span> <span class=\"n\">env</span> <span class=\"n\">s</span> <span class=\"n\">sOk</span> <span class=\"bp\">+</span> <span class=\"n\">eval</span> <span class=\"n\">env</span> <span class=\"n\">t</span> <span class=\"n\">tOk</span>\n  <span class=\"bp\">|</span> <span class=\"n\">times</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">sOk</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">varInExpr</span> <span class=\"n\">n</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">varInEnv</span> <span class=\"n\">n</span> <span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">intro</span> <span class=\"n\">n</span> <span class=\"n\">h₃</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">varInExpr</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">s.times</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">left</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">h₃</span>\n      <span class=\"n\">simp_all</span> <span class=\"n\">only</span>\n    <span class=\"k\">have</span> <span class=\"n\">tOk</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">varInExpr</span> <span class=\"n\">n</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">varInEnv</span> <span class=\"n\">n</span> <span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">intro</span> <span class=\"n\">n</span> <span class=\"n\">h₃</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">varInExpr</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">s.times</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">right</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">h₃</span>\n      <span class=\"n\">simp_all</span> <span class=\"n\">only</span>\n    <span class=\"n\">eval</span> <span class=\"n\">env</span> <span class=\"n\">s</span> <span class=\"n\">sOk</span> <span class=\"bp\">*</span> <span class=\"n\">eval</span> <span class=\"n\">env</span> <span class=\"n\">t</span> <span class=\"n\">tOk</span>\n\n<span class=\"k\">#eval</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"o\">[(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">42</span><span class=\"o\">)]</span>\n  <span class=\"k\">let</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span> <span class=\"n\">var</span> <span class=\"mi\">1</span>\n  <span class=\"k\">let</span> <span class=\"n\">ok</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">varInExpr</span> <span class=\"n\">n</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">varInEnv</span> <span class=\"n\">n</span> <span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"n\">expr</span> <span class=\"bp\">=</span> <span class=\"n\">var</span> <span class=\"mi\">1</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">]</span>\n    <span class=\"n\">intro</span> <span class=\"n\">n</span> <span class=\"n\">h</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"n\">varInExpr</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"k\">suffices</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">varInEnv</span> <span class=\"n\">n</span> <span class=\"n\">env</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">∈</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">])</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h₁</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">left</span>\n    <span class=\"k\">calc</span> <span class=\"n\">varInEnv</span> <span class=\"n\">n</span> <span class=\"n\">env</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">env.map</span> <span class=\"n\">Prod.fst</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">])</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">∈</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">])</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n\n  <span class=\"n\">eval</span> <span class=\"n\">env</span> <span class=\"n\">expr</span> <span class=\"n\">ok</span>\n</code></pre></div>",
        "id": 430595675,
        "sender_full_name": "James Sully",
        "timestamp": 1711979489
    },
    {
        "content": "<p>in particular I'm not happy with the repetition in the <code>plus</code> and <code>times</code> branches of <code>eval</code></p>",
        "id": 430596040,
        "sender_full_name": "James Sully",
        "timestamp": 1711979614
    },
    {
        "content": "<p>alternative formulations of <code>varInExpr</code>, <code>varInEnv</code>, or the precondition for <code>eval</code> that make the proofs easier would be welcome as well</p>",
        "id": 430596600,
        "sender_full_name": "James Sully",
        "timestamp": 1711979844
    },
    {
        "content": "<p>This would obviously be a lot simpler if the env was a <code>Nat -&gt; Nat</code>, or <code>eval</code> returned <code>Option Nat</code> or something, but this is more fun</p>",
        "id": 430597399,
        "sender_full_name": "James Sully",
        "timestamp": 1711980192
    },
    {
        "content": "<p>I'm guessing not all of this is relevant to you, but if I wanted to go super fancy I'd do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Expr</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span>   <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">plus</span>  <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">times</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Expr</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">Expr</span> <span class=\"n\">n</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">prefix</span><span class=\"o\">:</span><span class=\"mi\">100</span> <span class=\"s2\">\"%\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Expr.var</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">Expr</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">plus</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"n\">Expr</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">times</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Mem</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"n\">_</span>            <span class=\"bp\">=&gt;</span> <span class=\"n\">False</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">%</span><span class=\"n\">m</span>                 <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span>\n  <span class=\"bp\">|</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">times</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Mem</span> <span class=\"n\">n</span> <span class=\"n\">s</span> <span class=\"bp\">∨</span> <span class=\"n\">Mem</span> <span class=\"n\">n</span> <span class=\"n\">t</span> <span class=\"c1\">-- We can't use `*` for pattern matching of `.times`: https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Mul.20match_pattern</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Membership</span> <span class=\"n\">Nat</span> <span class=\"n\">Expr</span> <span class=\"n\">where</span>\n  <span class=\"n\">mem</span> <span class=\"o\">:=</span> <span class=\"n\">Mem</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Env</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Env</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Mem</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">env</span> <span class=\"o\">:</span> <span class=\"n\">Env</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">env.map</span> <span class=\"n\">Prod.fst</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Membership</span> <span class=\"n\">Nat</span> <span class=\"n\">Env</span> <span class=\"n\">where</span>\n  <span class=\"n\">mem</span> <span class=\"o\">:=</span> <span class=\"n\">Env.Mem</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Mem.iff_mem</span> <span class=\"o\">(</span><span class=\"n\">env</span> <span class=\"o\">:</span> <span class=\"n\">Env</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">env</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">env.map</span> <span class=\"n\">Prod.fst</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Iff.rfl</span>\n\n<span class=\"kn\">local</span> <span class=\"n\">macro</span> <span class=\"s2\">\"get_mem\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">simp_all</span> <span class=\"o\">[</span><span class=\"n\">Mem.iff_mem</span><span class=\"o\">])</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">get</span> <span class=\"o\">(</span><span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">env</span> <span class=\"o\">:</span> <span class=\"n\">Env</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">key</span> <span class=\"bp\">∈</span> <span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">get_mem</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">key'</span><span class=\"o\">,</span> <span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">rest</span> <span class=\"o\">:=</span> <span class=\"n\">env</span>\n  <span class=\"k\">if</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">key</span> <span class=\"bp\">==</span> <span class=\"n\">key'</span> <span class=\"k\">then</span> <span class=\"n\">val</span> <span class=\"k\">else</span> <span class=\"n\">get</span> <span class=\"n\">key</span> <span class=\"n\">rest</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Completes</span> <span class=\"o\">(</span><span class=\"n\">env</span> <span class=\"o\">:</span> <span class=\"n\">Env</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">env</span>\n\n<span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"s2\">\" ⊢ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Completes</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Completes</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">var</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">env</span> <span class=\"bp\">⊢</span> <span class=\"bp\">%</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">env</span> <span class=\"o\">:=</span>\n  <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">plus_left</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">env</span> <span class=\"bp\">⊢</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">env</span> <span class=\"bp\">⊢</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">hn</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">hn</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">plus_right</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">env</span> <span class=\"bp\">⊢</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">env</span> <span class=\"bp\">⊢</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">hn</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">hn</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">times_left</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">env</span> <span class=\"bp\">⊢</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">env</span> <span class=\"bp\">⊢</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">hn</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">hn</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">times_right</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">env</span> <span class=\"bp\">⊢</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">env</span> <span class=\"bp\">⊢</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">hn</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">hn</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Completes</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Env</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">∈</span> <span class=\"bp\">%</span><span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">∈</span> <span class=\"bp\">%</span><span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">10</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">left</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">local</span> <span class=\"n\">macro</span> <span class=\"s2\">\"eval_compl\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span>\n  <span class=\"n\">first</span>\n    <span class=\"bp\">|</span> <span class=\"n\">simp_all</span> <span class=\"o\">[</span><span class=\"n\">Env.Completes.plus_left</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">simp_all</span> <span class=\"o\">[</span><span class=\"n\">Env.Completes.plus_right</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">simp_all</span> <span class=\"o\">[</span><span class=\"n\">Env.Completes.times_left</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">simp_all</span> <span class=\"o\">[</span><span class=\"n\">Env.Completes.times_right</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›]</span>\n<span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">env</span> <span class=\"o\">:</span> <span class=\"n\">Env</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">compl</span> <span class=\"o\">:</span> <span class=\"n\">env</span> <span class=\"bp\">⊢</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">eval_compl</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">expr</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"n\">n</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"n\">i</span>     <span class=\"bp\">=&gt;</span> <span class=\"n\">env.get</span> <span class=\"n\">i</span> <span class=\"n\">compl.var</span>\n  <span class=\"bp\">|</span> <span class=\"n\">plus</span> <span class=\"n\">s</span> <span class=\"n\">t</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">eval</span> <span class=\"n\">env</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">eval</span> <span class=\"n\">env</span> <span class=\"n\">t</span>\n  <span class=\"bp\">|</span> <span class=\"n\">times</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">eval</span> <span class=\"n\">env</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"n\">eval</span> <span class=\"n\">env</span> <span class=\"n\">t</span>\n\n<span class=\"k\">#eval</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"o\">[(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">42</span><span class=\"o\">)]</span>\n  <span class=\"k\">let</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span> <span class=\"bp\">%</span><span class=\"mi\">1</span>\n  <span class=\"n\">eval</span> <span class=\"n\">env</span> <span class=\"n\">expr</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span> <span class=\"n\">intro</span><span class=\"bp\">;</span> <span class=\"n\">simp_all</span> <span class=\"o\">[</span><span class=\"n\">expr</span><span class=\"o\">,</span> <span class=\"n\">env</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">∈</span> <span class=\"bp\">·</span><span class=\"o\">),</span> <span class=\"n\">Expr.Mem</span><span class=\"o\">,</span> <span class=\"n\">Env.Mem</span><span class=\"o\">,</span> <span class=\"n\">List.Mem.head</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 430623685,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1711989092
    },
    {
        "content": "<p>Some good stuff in here, thanks. I especially like <code>iff_mem</code> and <code>get_mem</code> for reducing the definitional rewrites. In the general case I'd probably be worried about a <code>Membership Nat Expr</code> instance for vars bc I might theoretically also want to talk about whether particular consts are in the expression. At that point maybe it'd be worth creating types for <code>Var</code> and <code>Const</code> and having </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Expr</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"o\">:</span> <span class=\"n\">Const</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span>   <span class=\"o\">:</span> <span class=\"n\">Var</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n</code></pre></div>",
        "id": 430663206,
        "sender_full_name": "James Sully",
        "timestamp": 1712005315
    },
    {
        "content": "<p>I don't know enough maths to know why <code>⊢</code> is an appropriate choice of symbol for this, but it's cool</p>",
        "id": 430663455,
        "sender_full_name": "James Sully",
        "timestamp": 1712005453
    },
    {
        "content": "<p>Turnstyle has a lot of meanings in the logic world, generally there is always some context on the left (\"context\" is generally a name for \"collection of variables, often with associated types\") and then some expression on the right that is considered \"valid\" in that context. \"valid\" can mean a lot of things, in this case \"all variables are bound\" but for example the notation is also common as</p>\n<p><span class=\"tex-error\">\\Gamma \\turnstyle x : \\tau</span></p>\n<p>in type theory where it means \"the expression x has type tau in context Gamma</p>",
        "id": 430664070,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1712005764
    },
    {
        "content": "<p>default argument with a tactic is a cool strategy. I think indexing works that way with <code>get_elem_tactic</code></p>",
        "id": 430664103,
        "sender_full_name": "James Sully",
        "timestamp": 1712005783
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/Theorem.20Proving.20in.20lean.20exercise.20review.20request/near/430664070\">said</a>:</p>\n<blockquote>\n<p>Turnstyle has a lot of meanings in the logic world, generally there is always some context on the left (\"context\" is generally a name for \"collection of variables, often with associated types\") and then some expression on the right that is considered \"valid\" in that context. \"valid\" can mean a lot of things, in this case \"all variables are bound\" but for example the notation is also common as</p>\n<p><span class=\"tex-error\">\\Gamma \\turnstyle x : \\tau</span></p>\n<p>in type theory where it means \"the expression x has type tau in context Gamma</p>\n</blockquote>\n<p>That makes sense, the infoview would be an example</p>",
        "id": 430664284,
        "sender_full_name": "James Sully",
        "timestamp": 1712005859
    },
    {
        "content": "<p>Precisely! The infoview is the dump of the context + expected type at that point and you are constructing the x</p>",
        "id": 430664553,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1712006003
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"372804\">Marcus Rossel</span> <a href=\"#narrow/stream/270676-lean4/topic/Theorem.20Proving.20in.20lean.20exercise.20review.20request/near/430623685\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">get</span> <span class=\"o\">(</span><span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">env</span> <span class=\"o\">:</span> <span class=\"n\">Env</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">key</span> <span class=\"bp\">∈</span> <span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">get_mem</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">key'</span><span class=\"o\">,</span> <span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">rest</span> <span class=\"o\">:=</span> <span class=\"n\">env</span>\n  <span class=\"k\">if</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">key</span> <span class=\"bp\">==</span> <span class=\"n\">key'</span> <span class=\"k\">then</span> <span class=\"n\">val</span> <span class=\"k\">else</span> <span class=\"n\">get</span> <span class=\"n\">key</span> <span class=\"n\">rest</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>What specifically is the criteria for lean being able to know that a case is inconsistent and can be left out, like the <code>[]</code> case here?</p>",
        "id": 430666686,
        "sender_full_name": "James Sully",
        "timestamp": 1712006938
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"621161\">@James Sully</span> I'm not sure. But in this case the <code>[]</code> branch could be closed using <code>by contradiction</code>, so perhaps that's one of the things Lean checks.</p>",
        "id": 430751295,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1712050956
    },
    {
        "content": "<p>I did a quick experiment:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">myList₁</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n\n  <span class=\"c1\">-- match myList₁ with</span>\n  <span class=\"c1\">-- | [] =&gt; 1</span>\n  <span class=\"c1\">-- | n :: ns =&gt; by contradiction -- \"error: tactic 'contradiction' failed\"</span>\n\n  <span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">myList₁</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">::</span> <span class=\"n\">ns</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">contradiction</span> <span class=\"c1\">-- ok, since we have `h`</span>\n\n  <span class=\"c1\">-- let [] := myList₁ -- \"error: missing cases: (List.cons _ _)\"</span>\n\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">myList₁</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"k\">let</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">myList₁</span> <span class=\"c1\">-- ok</span>\n</code></pre></div>\n<p>It's a bit strange to me that the <code>let</code> before the <code>have</code> is an error, it feels like something the system ought to be able to work out. </p>\n<p>Could lean not whenever it sees <br>\n<code>let x := e</code><br>\nautomatically also add an anonymous hypothesis that <code>x = e</code> to the context? I'm sure there's some good reason this isn't done, but I don't immediately see what it is.</p>",
        "id": 430760986,
        "sender_full_name": "James Sully",
        "timestamp": 1712054479
    },
    {
        "content": "<p><code>let [] := ...</code> surely makes no sense, because you are in no position to say what you want <code>[]</code> to mean; it already means something.</p>",
        "id": 430761659,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1712054732
    },
    {
        "content": "<p>It's just a pattern match, I can easily switch the whole thing around to use cons instead, it makes no difference. But there would be destructuring bindings, so the statement would have a purpose, if that bothers you.</p>",
        "id": 430761940,
        "sender_full_name": "James Sully",
        "timestamp": 1712054860
    },
    {
        "content": "<p>here it is the other way around, if that's less distracting</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">myList₁</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span>\n\n  <span class=\"c1\">-- match myList₁ with</span>\n  <span class=\"c1\">-- | [] =&gt; by contradiction -- error: tactic 'contradiction' failed</span>\n  <span class=\"c1\">-- | n :: ns =&gt; 1</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">myList₁</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">contradiction</span> <span class=\"c1\">-- ok, since we have `h`</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">::</span> <span class=\"n\">ns</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n\n  <span class=\"c1\">-- let [n] := myList₁ -- error: missing cases: (List.cons _ (List.cons _ _))</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">myList₁</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"k\">let</span> <span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">myList₁</span> <span class=\"c1\">-- ok</span>\n\n  <span class=\"n\">IO.println</span> <span class=\"n\">n</span> <span class=\"c1\">-- prints 1</span>\n</code></pre></div>",
        "id": 430762945,
        "sender_full_name": "James Sully",
        "timestamp": 1712055263
    }
]