[
    {
        "content": "<p>What I mean by “compile” is the following:</p>\n<p>I have a function <code>useMyAttr : Environment → Input → Foo</code> which looks up entries in an environment extension (in my case, a <code>KeyedDeclsAttribute</code>), then applies them (unsafely, via some <code>eval…</code>) to <code>Input</code>.</p>\n<p>I’d like to write a function <code>useMyAttrNow : Input → IO Foo</code> which applies these entries. It doesn’t need to apply decls that will be tagged in the future; the ones in specific known files are all it needs.</p>\n<p>Since I know the files that hold the tagged decls I care about, my current approach is to use <code>importModules</code> or <code>withImportModules</code>, then use that <code>Environment</code>.</p>\n<p>I’m wondering if this is the “best” way, though.  I don’t need the whole environment, and I could even use the environment <code>useMyAttrNow</code> is defined in instead of “re-importing” each time <code>useMyAttrNow</code> is used.</p>\n<p>(I wonder if this is an “imaginary cost”, though, as maybe the environment doesn’t stick around in the form I’m imagining, and so we’d have to do the appropriate lookups in more or less the same way anyway.)</p>\n<p>If there were a way to more statically say “here are all the keyed decls you need to try”, would it be worth it?</p>\n<p>I suppose I’m also not sure what is <em>really</em> meant by <code>IO.Ref</code> under the hood, which is used in the implementation of <code>KeyedDeclsAttribute</code>—at least for built in attributes? (I have control over the attributes, so I could make them built in if desirable.)</p>",
        "id": 439094400,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1715890677
    },
    {
        "content": "<p>It sounds like you're asking how to do the metaprogramming to read an environment extension and create a function from the data that's there? There's no need to eval anything, the idea is that you get the names of all the declarations that matter, and then you assemble it into an expression that does what you need it to do. You can do this from within an elaborator, which has access to the current environment state.</p>\n<p>Here's an example of that: <a href=\"#narrow/stream/270676-lean4/topic/Internationalization/near/402576630\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Internationalization/near/402576630</a></p>",
        "id": 439094940,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715890911
    },
    {
        "content": "<p>Hmm, I’m not sure that’s what I want to do…I do specifically need a function that lands in <code>IO</code>. Do you mean I’d spin up an elaborator within IO…?</p>",
        "id": 439095316,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1715891096
    },
    {
        "content": "<p>For Advent of Code, I had a little fun and used an elaborator to create the <code>main</code> function: <a href=\"https://github.com/kmill/kmill-aoc2023/blob/main/AoC.lean#L36-L37\">https://github.com/kmill/kmill-aoc2023/blob/main/AoC.lean#L36-L37</a></p>\n<p>The elaborator is <a href=\"https://github.com/kmill/kmill-aoc2023/blob/main/AoC2023/CmdAttr.lean\">here</a> and <a href=\"https://github.com/kmill/kmill-aoc2023/blob/main/AoC2023/Day10/Part2.lean#L209\">here's an example</a> of it being applied.</p>",
        "id": 439095371,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715891121
    },
    {
        "content": "<p>It really depends on what you're trying to do though. What I'm showing you is how to handle staging. The environment is a purely compile time construct, and this sort of metaprogramming is how you can make some aspect of it survive to run time. I thought this might be what you were getting at, but if it's not you'll have to refine your question.</p>",
        "id": 439096499,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715891587
    },
    {
        "content": "<p>Hmm, I think I see how that approach could be used in principle, but I guess the issue with it here is that I would probably want to use the keying provided by <code>KeyedDeclsAttribute</code> to look up which decls to apply in the course of dealing with some arbitrary <code>Input</code> (instead of having a function that just inlines all of them).</p>\n<p>Actually, does it essentially inline all of them? Maybe I’d better get back to my computer and see what <code>#print main</code> looks like.</p>\n<p>(Well, I <em>think</em> that’s what I’d want, anyway, but I could be wrong!)</p>\n<p>I think you’re correct about me wanting to use some part of the environment during runtime, though.</p>",
        "id": 439097331,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1715891942
    },
    {
        "content": "<p>I think you'll have to say what concrete problem you're working on, rather than talking in the abstract.</p>",
        "id": 439097777,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715892114
    },
    {
        "content": "<p>The key idea here is just that you can turn the data in your environment extension into data you can embed in your function.</p>\n<p>I my case, I decided to encode that data in an if/else chain, but you can do whatever you want. It's not inlining bodies of the tagged declarations to be clear, it's just including the declaration names (as constants).</p>",
        "id": 439098064,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715892212
    },
    {
        "content": "<p>Hmm, yeah—in that vein, I <em>feel</em> as though I need to “store the current <code>KeyedDeclsAttribute</code> lookup table somewhere in an olean”, but I’m not sure if this is, in fact, what I need. Or if it’s already there.</p>\n<p>Basically the problem is “expand macros in IO”, except I’m using my own elab-like attribute instead of <code>@[macro k]</code>.</p>",
        "id": 439099147,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1715892631
    },
    {
        "content": "<p>It's still unclear to me what your concrete goals are. Is this meant to be in the realm of metaprogramming (i.e., compile-time activities) or in the realm of something that will work in a compiled program, given everything that has the attribute at compile time (i.e., a run time activity)?</p>",
        "id": 439100162,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715893071
    },
    {
        "content": "<p>The latter; for more context, this is a “process a(n arbitrary) lean file via a frontend”-type situation, except my rewrite rules can only be known to the processing function, not the (potential, arbitrary) file which will be processed (so I can’t use its environment).</p>",
        "id": 439100378,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1715893154
    }
]