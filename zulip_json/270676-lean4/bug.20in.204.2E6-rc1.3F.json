[
    {
        "content": "<p>im not sure if i found a bug. something which should have been equal somehow isn't?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Init.Data.List</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Data.List</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Dedup</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Pairwise</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Join</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Infix</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Lattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Lemmas</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Bool.AllAny</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Bool.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">Classical</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">And</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Or</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Not</span> <span class=\"o\">:</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span>\n<span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">normalizable</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">reducible</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">toProp</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pred</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">And</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span>  <span class=\"n\">toProp</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">toProp</span> <span class=\"n\">b</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Or</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">toProp</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">toProp</span> <span class=\"n\">b</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Not</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">toProp</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">toProp_not</span> <span class=\"o\">:</span> <span class=\"n\">toProp</span> <span class=\"o\">(</span><span class=\"n\">Not</span> <span class=\"n\">n₁</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"n\">toProp</span> <span class=\"n\">n₁</span> <span class=\"o\">:=</span> <span class=\"n\">Iff.rfl</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">toProp_and</span> <span class=\"o\">:</span> <span class=\"n\">toProp</span> <span class=\"o\">(</span><span class=\"n\">And</span> <span class=\"n\">n₁</span> <span class=\"n\">n₂</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">toProp</span> <span class=\"n\">n₁</span> <span class=\"bp\">∧</span> <span class=\"n\">toProp</span> <span class=\"n\">n₂</span> <span class=\"o\">:=</span> <span class=\"n\">Iff.rfl</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">toProp_or</span> <span class=\"o\">:</span> <span class=\"n\">toProp</span> <span class=\"o\">(</span><span class=\"n\">Or</span> <span class=\"n\">n₁</span> <span class=\"n\">n₂</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">toProp</span> <span class=\"n\">n₁</span> <span class=\"bp\">∨</span> <span class=\"n\">toProp</span> <span class=\"n\">n₂</span> <span class=\"o\">:=</span> <span class=\"n\">Iff.rfl</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">toProp_atom</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">toProp</span> <span class=\"o\">(</span><span class=\"n\">atom</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">pred</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">Iff.rfl</span>\n<span class=\"kd\">def</span> <span class=\"n\">wToProp</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">w.fst</span> <span class=\"k\">then</span> <span class=\"n\">toProp</span> <span class=\"n\">w.snd</span> <span class=\"k\">else</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">toProp</span> <span class=\"n\">w.snd</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sToProp</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">s.all</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">wToProp</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">gToProp</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">g.any</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sToProp</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">nToProp</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">))))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">n.all</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">gToProp</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fToProp</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">))))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">n.all</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.any</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">y.all</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">z</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">toProp</span> <span class=\"n\">z</span><span class=\"o\">)))</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">any_erase</span> <span class=\"o\">:</span><span class=\"bp\">∀</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">b</span><span class=\"o\">,</span><span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n                     <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">List.any</span> <span class=\"n\">l</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;-&gt;</span> <span class=\"n\">List.any</span> <span class=\"o\">(</span><span class=\"n\">List.erase</span> <span class=\"n\">l</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">l</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span>\n  <span class=\"n\">intro</span> <span class=\"n\">s</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hs</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hnas</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">l</span> <span class=\"k\">with</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hs</span>\n  <span class=\"n\">cases'</span> <span class=\"o\">(</span><span class=\"n\">Classical.em</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"k\">with</span> <span class=\"n\">hsc</span> <span class=\"n\">hsd</span>\n  <span class=\"k\">have</span> <span class=\"n\">hed</span> <span class=\"o\">:</span> <span class=\"n\">List.erase</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">::</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">d</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">List.erase</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hsc</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hed</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hsc</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hsd</span>\n  <span class=\"n\">cases'</span> <span class=\"n\">hsd</span> <span class=\"k\">with</span> <span class=\"n\">hsdl</span> <span class=\"n\">hsdr</span>\n  <span class=\"n\">by_contra</span>\n  <span class=\"n\">apply</span> <span class=\"n\">hnas</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hsdl</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hsdr</span>\n  <span class=\"n\">cases'</span> <span class=\"n\">hs</span> <span class=\"k\">with</span> <span class=\"n\">hsl</span> <span class=\"n\">hsr</span>\n  <span class=\"n\">by_contra</span>\n  <span class=\"n\">apply</span> <span class=\"n\">hsd</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hsl</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Bool.or_eq_true</span><span class=\"o\">,</span> <span class=\"n\">List.any_eq_true</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">e</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hl</span>\n  <span class=\"n\">apply</span> <span class=\"n\">e</span> <span class=\"n\">at</span> <span class=\"n\">hsr</span>\n  <span class=\"k\">have</span> <span class=\"n\">hcd</span> <span class=\"o\">:</span> <span class=\"n\">List.erase</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">::</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">::</span> <span class=\"n\">List.erase</span> <span class=\"n\">d</span> <span class=\"n\">s</span>\n  <span class=\"n\">nth_rewrite</span> <span class=\"mi\">1</span> <span class=\"o\">[</span> <span class=\"n\">List.erase</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">ne_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hsd</span>\n  <span class=\"n\">apply</span> <span class=\"n\">beq_false_of_ne</span> <span class=\"n\">at</span> <span class=\"n\">hsd</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hsd</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hcd</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hl</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">hsr</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hl</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hs</span>\n  <span class=\"n\">cases'</span> <span class=\"o\">(</span><span class=\"n\">Classical.em</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"k\">with</span> <span class=\"n\">hsl</span> <span class=\"n\">hsr</span>\n  <span class=\"k\">have</span> <span class=\"n\">hed</span> <span class=\"o\">:</span> <span class=\"n\">List.erase</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">::</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">d</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">List.erase</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hsl</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hed</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span> <span class=\"n\">hsl</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">f</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hf</span>\n  <span class=\"n\">intro</span> <span class=\"n\">haf</span>\n  <span class=\"n\">right</span>\n  <span class=\"n\">use</span> <span class=\"n\">f</span>\n  <span class=\"k\">have</span> <span class=\"n\">hcd</span> <span class=\"o\">:</span> <span class=\"n\">List.erase</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">::</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">::</span> <span class=\"n\">List.erase</span> <span class=\"n\">d</span> <span class=\"n\">s</span>\n  <span class=\"n\">nth_rewrite</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"n\">List.erase</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">ne_eq</span><span class=\"o\">]</span><span class=\"n\">at</span> <span class=\"n\">hsr</span>\n  <span class=\"n\">apply</span> <span class=\"n\">beq_false_of_ne</span> <span class=\"n\">at</span> <span class=\"n\">hsr</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hsr</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hcd</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.any_cons</span><span class=\"o\">]</span>\n  <span class=\"n\">cases'</span> <span class=\"n\">hs</span> <span class=\"k\">with</span> <span class=\"n\">hsc</span> <span class=\"n\">hsd</span>\n  <span class=\"n\">by_contra</span>\n  <span class=\"n\">apply</span> <span class=\"n\">hsr</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hsc</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">e</span> <span class=\"n\">at</span> <span class=\"n\">hsd</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.any_cons</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Bool.or_eq_true</span><span class=\"o\">,</span> <span class=\"n\">List.any_eq_true</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hcl</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hsd</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hsd</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hcl</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hcl</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">property2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">))),</span>\n                    <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)),</span> <span class=\"n\">g</span> <span class=\"bp\">∈</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span>\n                    <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">),</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">g</span> <span class=\"bp\">-&gt;</span>\n                    <span class=\"o\">((</span><span class=\"n\">nToProp</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">sToProp</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">nToProp</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">gToProp</span> <span class=\"n\">g</span> <span class=\"bp\">&lt;-&gt;</span> <span class=\"n\">gToProp</span> <span class=\"o\">(</span><span class=\"n\">g.erase</span> <span class=\"n\">s</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span>\n  <span class=\"n\">intro</span> <span class=\"n\">g</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hg</span>\n  <span class=\"n\">intro</span> <span class=\"n\">s</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hs</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hns</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hn</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">gToProp</span>\n  <span class=\"k\">have</span> <span class=\"n\">hnos</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">sToProp</span> <span class=\"n\">s</span>\n  <span class=\"n\">apply</span> <span class=\"n\">hns</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hn</span>\n  <span class=\"n\">apply</span> <span class=\"n\">any_erase</span> <span class=\"n\">at</span> <span class=\"n\">g</span>\n  <span class=\"n\">apply</span> <span class=\"n\">g</span> <span class=\"n\">at</span> <span class=\"n\">hs</span>\n  <span class=\"n\">apply</span> <span class=\"n\">hs</span> <span class=\"n\">at</span> <span class=\"n\">hnos</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hnos</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span>\n  <span class=\"c1\">--should have ended with rfl here</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hxs</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">hx</span><span class=\"o\">,</span><span class=\"n\">hsx</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hxs</span>\n  <span class=\"n\">use</span> <span class=\"n\">x</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"gr\">sorry</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hsx</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 424908382,
        "sender_full_name": "Jared green",
        "timestamp": 1709655968
    },
    {
        "content": "<p>im still using 4.6.0-rc1</p>",
        "id": 424908653,
        "sender_full_name": "Jared green",
        "timestamp": 1709656032
    },
    {
        "content": "<p>There are so many errors in the code that you posted, that I do not know which one is the one that you are referring to.  Can you post something that has a single issue, checking that it has only one error using the web-browser?</p>",
        "id": 424910849,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709656611
    },
    {
        "content": "<p>sorry there was something i had forgotten to include. i just edited it.</p>",
        "id": 424911884,
        "sender_full_name": "Jared green",
        "timestamp": 1709656859
    },
    {
        "content": "<p>The first error that I see is on line 74: that is I think because the syntax for <code>have</code> changed and now you should use <code>:= by</code> and then indent the rest of the proof.</p>",
        "id": 424913761,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709657312
    },
    {
        "content": "<p>it worked without that.</p>",
        "id": 424914308,
        "sender_full_name": "Jared green",
        "timestamp": 1709657485
    },
    {
        "content": "<p>Ok, so, yes, this changed and I don't think that it is considered a bug.</p>",
        "id": 424914494,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709657533
    },
    {
        "content": "<p>the bug i described is at the end.</p>",
        "id": 424914628,
        "sender_full_name": "Jared green",
        "timestamp": 1709657579
    },
    {
        "content": "<p>After Lean gives an error, you should not trust what it says: can you produce an example that has a single error?  Otherwise, it is not clear whether the issue arises from the previous error or not.</p>",
        "id": 424914927,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709657667
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/270676-lean4/topic/bug.20in.204.2E6-rc1.3F/near/424913761\">said</a>:</p>\n<blockquote>\n<p>The first error that I see is on line 74: that is I think because the syntax for <code>have</code> changed and now you should use <code>:= by</code> and then indent the rest of the proof.</p>\n</blockquote>\n<p>Or add <code>import Mathlib.Tactic.Have</code></p>",
        "id": 424915319,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709657778
    },
    {
        "content": "<p>there is no error. you would get one if you place rfl where i thought it should be, and thats a problem.</p>",
        "id": 424915398,
        "sender_full_name": "Jared green",
        "timestamp": 1709657807
    },
    {
        "content": "<p>Have you opened your code with the web-editor?</p>",
        "id": 424915467,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709657835
    },
    {
        "content": "<p>i am editing it in vscode</p>",
        "id": 424915539,
        "sender_full_name": "Jared green",
        "timestamp": 1709657861
    },
    {
        "content": "<p>I hacked your code to get it to the <code>should have ended with rfl here</code> line, and yes, <code>rfl</code> doesn't work there. You can use the <code>congr!</code> tactic to help debug what the difference is.</p>\n<p>There are two BEq instances that aren't defeq. The <code>congr!</code> tactic shows <code>instBEq = List.instBEqList</code> is the difference. With <code>pp.explicit</code> set to true, you can see the instances better:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- First</span>\n<span class=\"bp\">@</span><span class=\"n\">instBEq</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Prod</span> <span class=\"n\">Bool</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)))</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">↦</span>\n  <span class=\"n\">propDecidable</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Eq</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Prod</span> <span class=\"n\">Bool</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)))</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n<span class=\"c1\">-- Second</span>\n<span class=\"bp\">@</span><span class=\"n\">List.instBEqList</span> <span class=\"o\">(</span><span class=\"n\">Prod</span> <span class=\"n\">Bool</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instBEqProd</span> <span class=\"n\">Bool</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instBEq</span> <span class=\"n\">Bool</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">↦</span> <span class=\"n\">instDecidableEqBool</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instBEq</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">↦</span> <span class=\"bp\">@</span><span class=\"n\">instDecidableEqNormalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">↦</span> <span class=\"n\">h</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 424920998,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709659573
    },
    {
        "content": "<p>That's saying that the first one comes from a Decidable instance, and the second one comes from a BEq instance for List. This is a \"diamond\" in the instance hierarchy.</p>",
        "id": 424921633,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709659774
    },
    {
        "content": "<p>Here's a workaround:</p>\n<p>First you need these theorems somewhere:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">ext</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">beq_ext</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">inst1</span> <span class=\"o\">:</span> <span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">inst2</span> <span class=\"o\">:</span> <span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">BEq.beq</span> <span class=\"n\">_</span> <span class=\"n\">inst1</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">BEq.beq</span> <span class=\"n\">_</span> <span class=\"n\">inst2</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">inst1</span> <span class=\"bp\">=</span> <span class=\"n\">inst2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">beq1</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">inst1</span>\n  <span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">beq2</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">inst2</span>\n  <span class=\"n\">congr</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">lawful_beq_subsingleton</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">inst1</span> <span class=\"o\">:</span> <span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">inst2</span> <span class=\"o\">:</span> <span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">LawfulBEq</span> <span class=\"n\">α</span> <span class=\"n\">inst1</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">LawfulBEq</span> <span class=\"n\">α</span> <span class=\"n\">inst2</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">inst1</span> <span class=\"bp\">=</span> <span class=\"n\">inst2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">beq_eq_decide</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Then rather than <code>rfl</code>, you do <code>congr!</code> followed by <code>apply lawful_beq_subsingleton</code></p>",
        "id": 424923696,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709660372
    },
    {
        "content": "<p>unknown identifier beq_eq_decide</p>",
        "id": 424929645,
        "sender_full_name": "Jared green",
        "timestamp": 1709662360
    },
    {
        "content": "<p>You can use the search box in <a href=\"https://leanprover-community.github.io/mathlib4_docs/\">this documentation</a> to find out what you need to import to use it.</p>",
        "id": 424930393,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709662635
    },
    {
        "content": "<p>i already have it imported.</p>",
        "id": 424930555,
        "sender_full_name": "Jared green",
        "timestamp": 1709662693
    },
    {
        "content": "<p>still doesnt work.</p>",
        "id": 424930607,
        "sender_full_name": "Jared green",
        "timestamp": 1709662711
    },
    {
        "content": "<p>when was that theorem added? my version doesnt have it.</p>",
        "id": 424931772,
        "sender_full_name": "Jared green",
        "timestamp": 1709663090
    },
    {
        "content": "<p>It looks like it was added ten days ago: <a href=\"https://mathlib-changelog.org/v4/commit/a62da66e\">https://mathlib-changelog.org/v4/commit/a62da66e</a></p>\n<p>You can copy that theorem into your project too, or update your mathlib.</p>",
        "id": 424932003,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709663166
    },
    {
        "content": "<p>how do i update mathlib?</p>",
        "id": 424932087,
        "sender_full_name": "Jared green",
        "timestamp": 1709663196
    },
    {
        "content": "<p>In any case I just made <a href=\"https://github.com/leanprover-community/mathlib4/pull/11179\">mathlib4#11179</a> to improve <code>congr!</code> to be able to handle this situation.</p>\n<p>It would be nice if someone could figure out what's going on with this BEq instance diamond. At least this <code>congr!</code> upgrade will be able to help work around these issues as they come up.</p>",
        "id": 424932096,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709663201
    },
    {
        "content": "<p>There are instructions here: <a href=\"https://github.com/leanprover-community/mathlib4/wiki/Using-mathlib4-as-a-dependency\">https://github.com/leanprover-community/mathlib4/wiki/Using-mathlib4-as-a-dependency</a></p>",
        "id": 424932371,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709663299
    },
    {
        "content": "<p>Is this the BEq Vs DecidableEq issue that's been filed long ago?</p>",
        "id": 424933958,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1709663912
    }
]