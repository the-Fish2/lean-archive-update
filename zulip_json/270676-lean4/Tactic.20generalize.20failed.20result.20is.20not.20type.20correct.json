[
    {
        "content": "<p>I was trying to expand the definition of the non-inductive Fin2 type, using the PFin2 type defined below to match on it. However, as I was doing so, I encountered the following error, which I was unable to understand. Here is an MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"sd\">/-- An alternate definition of `fin n` defined as an inductive type instead of a subtype of `Nat`. -/</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">PFin2</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> `0` as a member of `fin (succ n)` (`fin 0` is empty) -/</span>\n  <span class=\"bp\">|</span> <span class=\"n\">fz</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">PFin2</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"sd\">/-- `n` as a member of `fin (succ n)` -/</span>\n  <span class=\"n\">fs</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">PFin2</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">PFin2</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">func</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin2</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Fin2.fz</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">PFin2</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Fin2.fs</span> <span class=\"n\">Fin2.fz</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">PFin2</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sample1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin2</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">func</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Fin2.fz</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Fin2.fs</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sample2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin2</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">func</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Fin2.fz</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Fin2.fs</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ofFin2</span> <span class=\"o\">:</span> <span class=\"n\">Fin2</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">PFin2</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">fz</span>   <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">fz</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">fs</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">fs</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">ofFin2</span> <span class=\"n\">i</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">toFin2</span> <span class=\"o\">:</span> <span class=\"n\">PFin2</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Fin2</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">fz</span>   <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">fz</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">fs</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">fs</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">toFin2</span> <span class=\"n\">i</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">ofFin2_toFin2_iso</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin2</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">toFin2</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">ofFin2</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">i</span>\n  <span class=\"bp\">.</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">.</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ofFin2</span><span class=\"o\">,</span> <span class=\"n\">toFin2</span><span class=\"o\">,</span> <span class=\"bp\">*</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">sample1</span> <span class=\"bp\">=</span> <span class=\"n\">sample2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">apply</span> <span class=\"n\">funext</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span>\n  <span class=\"n\">apply</span> <span class=\"n\">funext</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ofFin2_toFin2_iso</span> <span class=\"mi\">2</span> <span class=\"n\">x</span><span class=\"o\">)]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x_1</span>\n  <span class=\"c1\">-- fails with result is not type correct error</span>\n  <span class=\"c1\">-- cases (ofFin2 x)</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>Assistance would really help, thanks!</p>",
        "id": 427621966,
        "sender_full_name": "Arnav Sabharwal",
        "timestamp": 1710825418
    },
    {
        "content": "<p>Does</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">generalize</span> <span class=\"n\">ofFin2</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n  <span class=\"n\">cases</span> <span class=\"n\">g</span>\n</code></pre></div>\n<p>do what you're looking for?</p>",
        "id": 427683474,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1710851606
    },
    {
        "content": "<p>Yes, thank you!</p>",
        "id": 427773676,
        "sender_full_name": "Arnav Sabharwal",
        "timestamp": 1710868355
    },
    {
        "content": "<p>What are we doing differently when mentioned substitution is made? A clarification would really help in reasoning about future issues of this form, thanks!</p>",
        "id": 427774208,
        "sender_full_name": "Arnav Sabharwal",
        "timestamp": 1710868509
    },
    {
        "content": "<p>If I have some number n in a proof, and then can I suddenly decide to do induction on n^2+3? I'm not really entirely sure what this means. Is the inductive step supposed to be something like \"if it's true when n^2+3=7 then it's true for n^2+3=8\"? But n^2+3 can't ever be 8. Similarly, \"it's true for n^2+3=6\" is a vacuous statement so can't possibly help for the case n^2+3=7.</p>\n<p>I feel like what you're doing here is a bit similar. You are trying to do induction on something which isn't a bare variable. Sure you can split into cases for <code>ofFin2 x</code> but that's not really doing induction on something (which is what <code>cases</code> is doing under the hood).</p>",
        "id": 427794854,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1710875543
    }
]