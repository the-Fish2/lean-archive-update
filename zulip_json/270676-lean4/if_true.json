[
    {
        "content": "<p>In statement of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=if_true#doc\">docs4#if_true</a>, the argument <code>h : Decidable True</code> is an implicit argument:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">theorem</span> <span class=\"n\">if_true</span> <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"n\">True</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ite</span> <span class=\"n\">True</span> <span class=\"n\">t</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>Seeing as <code>Decidable _</code> is a typeclass, why isn't this a typeclass argument? </p>\n<p>And how then does Lean manage to fill in that argument in the following proof?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">thm</span> <span class=\"o\">:</span> <span class=\"k\">if</span> <span class=\"n\">True</span> <span class=\"k\">then</span> <span class=\"n\">true</span> <span class=\"k\">else</span> <span class=\"n\">false</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n  <span class=\"n\">if_true</span> <span class=\"n\">true</span> <span class=\"n\">false</span>\n</code></pre></div>",
        "id": 423383997,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1708949963
    },
    {
        "content": "<p>Ah, I guess in <code>thm</code> it can fill in the typeclass argument by unification which is already synthesized when elaborating the type of the theorem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">pp.explicit</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"k\">#print</span> <span class=\"n\">thm</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">theorem thm : @Eq Bool (@ite Bool True instDecidableTrue true false) true :=</span>\n<span class=\"cm\">@if_true Bool instDecidableTrue true false</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 423384572,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1708950197
    },
    {
        "content": "<p>Yes exactly. That saves an instance search and, since Lean 4 is very petty about ensuring that typeclass arguments are the ones synthesized by TC inference, means we can apply the theorem to non-canonical instances of <code>Decidable True</code></p>",
        "id": 423385210,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708950460
    },
    {
        "content": "<p>Is this approach used in other theorems (about other things than <code>ite</code>) as well?</p>",
        "id": 423390104,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1708952256
    },
    {
        "content": "<p>In general the approach is pretty fragile, as usually you need both the <code>{}</code> and<code>[]</code> versions of the theorem</p>",
        "id": 423390202,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708952283
    },
    {
        "content": "<p>The <code>{}</code> approach only works when the term is about <code>@func someInst</code> where <code>someInst : Foo</code>, not <code>@func someInst.toFoo</code> where <code>someInst : Bar</code></p>",
        "id": 423390403,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708952349
    },
    {
        "content": "<p>Some relevant incoming changes to lean: <a href=\"https://github.com/leanprover/lean4/pull/3507\">lean#3507</a>, <a href=\"https://github.com/leanprover/lean4/pull/3509\">lean#3509</a></p>",
        "id": 423490998,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1708984744
    },
    {
        "content": "<p>Oh that's big news!</p>",
        "id": 423491272,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708984833
    },
    {
        "content": "<p>I thought there was some principled stance that <code>rw</code> and <code>simp</code> shouldn't be allowed to work on non-canonical instances (in the same way as everything else is not supposed to); is that stance shifting globally, or is this just a pragmatic local change?</p>",
        "id": 423491435,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708984902
    },
    {
        "content": "<p>(the remaining one that comes to mind is that <code>{}</code> notation for structures is not permitted to infer its instance arguments by unification, and so sometimes cannot be used)</p>",
        "id": 423491576,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708984938
    },
    {
        "content": "<p>Is that last comment of yours documented somewhere <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>? Something I'm going to look at is getting structure instance notation to be able to infer more instances automatically, and this sounds like a good to know about</p>",
        "id": 423520971,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709001174
    }
]