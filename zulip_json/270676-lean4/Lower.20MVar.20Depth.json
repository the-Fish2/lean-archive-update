[
    {
        "content": "<p>Is there some way to allow mvars created at depth <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">d + 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7778em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> to be used at depth <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">d</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">d</span></span></span></span>? I'm creating mvars at depth <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">d + 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7778em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>, so they're the only ones assignable during <code>isDefEq</code>. But I would like to turn some of them into subgoals (as a result of calling a tactic) afterwards.</p>",
        "id": 439630638,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1716230192
    },
    {
        "content": "<p>Could you say a bit more about why you want to only assign certain mvars?</p>\n<p>(I'm not aware of any API for letting certain mvars \"escape\". I've run into situations too where I thought it would be useful.)</p>",
        "id": 439667720,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1716234561
    },
    {
        "content": "<p>My situation is the following. I'm writing a tactic which generates sequences of rewrites (based on given equation lemmas) for proving goals of the form <code>lhs = rhs</code>. When the goal contains mvars (e.g. as a result of applying <code>Eq.trans</code>), I do not want to assign those mvars, as that would mean deciding what the proof goal should be. </p>\n<p>Unfortunately, if I do not increase mvar depth, I sometimes assign those mvars as follows. Let's say we want to prove <code>x = y</code> based on an equational lemma <code>l : ∀ a b c, x = y</code>. Then I first instantiate <code>a</code>, <code>b</code> and <code>c</code> in <code>l</code> with fresh mvars. Let's call the resulting equality <code>l' : x' = y'</code>. Next, I do <code>isDefEq</code> on <code>x</code> and <code>x'</code>, as well as <code>y</code> and <code>y'</code>. Thus, the mvars in <code>l'</code> are assigned to match the values required by the proof goal. The problem now is that if the proof goal contains an mvar <code>?m</code>, then the <code>isDefEq</code> step might assign one of the fresh mvars in <code>l'</code> to <code>?m</code>. Thus, I currently increase the mvar depth before instantiating <code>l</code> with fresh mvars, which means that <code>?m</code> will never be assigned by <code>isDefEq</code>. Until now, this setup works great.</p>\n<p>The need for lowering mvar depth now arises when conditional rewrites come into play. Namely, if the equation lemma <code>k</code> has the type <code>(h : p) → ∀ a b c, x = y</code>, then I still instantiate <code>k</code> with fresh mvars to get <code>k' : x' = y'</code>. The <code>isDefEq</code> step then only assigns <code>a</code>, <code>b</code> and <code>c</code>, but <code>h</code> remains unassigned. So now I want to generate a new subgoal for <code>h</code>. But as the fresh mvar for <code>h</code> was created at the increased mvar depth, I can't use it to create the subgoal.</p>",
        "id": 439768873,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1716282991
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/Lower.20MVar.20Depth/near/439667720\">said</a>:</p>\n<blockquote>\n<p>I've run into situations too where I thought it would be useful.</p>\n</blockquote>\n<p>Did you ultimately find that it wasn't really necessary though?</p>",
        "id": 439772566,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1716283779
    },
    {
        "content": "<p>For <a href=\"https://github.com/leanprover/lean4/pull/4225\">lean4#4225</a>, I think it would be useful to do the opposite: increase the depth of some metavariables when bumping up the depth.</p>",
        "id": 439776605,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716285274
    },
    {
        "content": "<p>\"increase\" meaning \"allow assignment despite entering depth <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">d + 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7778em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>\"?</p>",
        "id": 439788403,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716289132
    },
    {
        "content": "<p>Exactly, so choose which ones can be and which ones can't be instantiated</p>",
        "id": 439793218,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716290377
    },
    {
        "content": "<p>I suppose both of these things can be achieved by making a copy metavariable at the wanted depth, and assigning this to the old mvar.</p>",
        "id": 439793980,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1716290587
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"372804\">@Marcus Rossel</span> It might seem a bit wasteful, but you can split it into two phases, a query phase and an application phase. During the query, you increase the metavariable depth and do all the isDefEq queries you want. If the query succeeds, then you go ahead and use isDefEq again, but this time for unification purposes. This can be more flexible than trying it all at once.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"372804\">Marcus Rossel</span> <a href=\"#narrow/stream/270676-lean4/topic/Lower.20MVar.20Depth/near/439772566\">said</a>:</p>\n<blockquote>\n<p>Did you ultimately find that it wasn't really necessary though?</p>\n</blockquote>\n<p>I've usually found some sort of workaround, but the reason I asked was because if there are enough cases where people feel like they need to adjust depths of metavariables then this aspect of metaprogramming could get some more attention. There are some difficulties here though since you need to check that the metavariables at this higher depth are not assigned expressions involving high-depth metavariables — we don't want anything to escape.</p>",
        "id": 439919699,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1716330956
    }
]