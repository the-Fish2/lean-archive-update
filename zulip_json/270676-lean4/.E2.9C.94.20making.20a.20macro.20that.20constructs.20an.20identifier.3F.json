[
    {
        "content": "<p>How can I define a new identifier  in a macro, where the new identifier is constructed from the name of an existing one?  The easiest example I can think of is a macro that for any variable v:ident defines my_v to be a copy of v. It would look something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lab</span> <span class=\"s2\">\"redef  \"</span> <span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n <span class=\"n\">elabCommand</span> <span class=\"bp\">$</span> <span class=\"bp\">&lt;-</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">command</span><span class=\"bp\">|</span> <span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"s2\">\"my_\"</span> <span class=\"bp\">++</span> <span class=\"n\">v</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>  <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but of course $(\"my_\" ++ v)  is not legal Lean.<br>\nOf course this example is artifical, but understanding it would help me understand how macros can deal with <br>\nidentifiers (while breaking or not breaking hygiene).</p>",
        "id": 437983352,
        "sender_full_name": "Dan Synek",
        "timestamp": 1715348142
    },
    {
        "content": "<p>you want <code>mkIdent</code> there</p>",
        "id": 437983489,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1715348188
    },
    {
        "content": "<p>MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"redef  \"</span> <span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n <span class=\"n\">elabCommand</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">command</span><span class=\"bp\">|</span> <span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdentFrom</span> <span class=\"n\">v</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Name.appendBefore</span> <span class=\"n\">v.getId</span> <span class=\"s2\">\"my_\"</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">)</span>\n\n<span class=\"n\">redef</span> <span class=\"n\">Nat.succ</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">Nat.my_succ</span>\n<span class=\"c1\">-- info: def Nat.my_succ : Nat → Nat :=</span>\n<span class=\"c1\">-- Nat.succ</span>\n</code></pre></div>",
        "id": 437984123,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1715348428
    },
    {
        "content": "<p>Thanks @Mario Carneiro for the quick reply!</p>",
        "id": 438016928,
        "sender_full_name": "Dan Synek",
        "timestamp": 1715361005
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"698527\">Dan Synek</span> has marked this topic as resolved.</p>",
        "id": 438016960,
        "sender_full_name": "Notification Bot",
        "timestamp": 1715361019
    }
]