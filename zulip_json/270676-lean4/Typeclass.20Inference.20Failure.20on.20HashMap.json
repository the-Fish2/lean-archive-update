[
    {
        "content": "<p>(deleted)</p>",
        "id": 439841433,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1716304722
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 439842070,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1716304914
    },
    {
        "content": "<p>Lean fails to synthesize typeclass instances in the following code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">HashMap.ofList</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">find</span><span class=\"bp\">?</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>error messages:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">implicit</span> <span class=\"n\">argument</span>\n  <span class=\"bp\">@</span><span class=\"n\">HashMap.ofList</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.3770</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.3771</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">a</span>\n<span class=\"n\">context</span><span class=\"o\">:</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">Hashable</span> <span class=\"n\">Nat</span>\n\n<span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">implicit</span> <span class=\"n\">argument</span>\n  <span class=\"bp\">@</span><span class=\"n\">HashMap.find</span><span class=\"bp\">?</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.3770</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.3771</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">HashMap.ofList</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"mi\">0</span>\n<span class=\"n\">context</span><span class=\"o\">:</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">Hashable</span> <span class=\"n\">Nat</span>\n</code></pre></div>",
        "id": 439842209,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1716304941
    },
    {
        "content": "<p>If you're using the hash map in <code>Lean.Data.HashMap</code>, I assume this is because the instances of <code>BEq</code> and <code>Hashable</code> on <code>HashMap.ofList</code> are marked as regular implicits and not inst/typeclass implicits. I don't know why that is, I was surprised when I looked at the docs.</p>\n<p>There are two implementations of <code>HashMap</code>, I think the one in <code>Lean.Data.HashMap</code> is still mostly for internal use. The other one is <code>Batteries.Data.HashMap</code>, where <code>Batteries</code> is like a standard library.</p>",
        "id": 439862625,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1716311218
    },
    {
        "content": "<p>Fixed in <a href=\"https://github.com/leanprover/lean4/pull/4248\">lean#4248</a></p>",
        "id": 439946294,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716346092
    }
]