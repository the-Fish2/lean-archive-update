[
    {
        "content": "<p>If I have written a proof in Lean 4, it may use some tactics like \"simp\" and \"ring_nf\"</p>\n<p>In a 100 years nobody will know what this means.</p>\n<p>So when I save my proof, I would need to save not only the proof but definitions of every function and tactic I used, in a human readable AND computer readable way.</p>\n<p>What are the best ways to save your proof for eternity that a future human will be able to reconstruct your proof, even if the Lean language is forgotten to time?</p>",
        "id": 444703613,
        "sender_full_name": "Mr Proof",
        "timestamp": 1718372585
    },
    {
        "content": "<p>Many lean proofs are written in such a way that they are split up into a myriad of individual statements that are easy to show on their own. The Lean proofs that exist in mathlib right now are not optimized for human readability either.</p>",
        "id": 444706843,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1718373553
    },
    {
        "content": "<p>I see. But my point is, if I wanted to save my proof and put it on a USB stick for future generations. I would have to also save a copy of Mathlib and also the Lean software. Or at least a specification of the Lean software?</p>\n<p>e.g. if my proof contained something like \"simp;ring_nf;rw[&lt;-sqrt_sq]\" and then in Lean 4.1 the definitions of those things changed my proof would no longer work. </p>\n<p>I mean I could just write a proof and after every line write \"this is easy to show\". But then is it really a proof anymore?</p>\n<p>So I'm just wondering about future-proofing-proofs.</p>",
        "id": 444708097,
        "sender_full_name": "Mr Proof",
        "timestamp": 1718373918
    },
    {
        "content": "<p>The way this currently works is that your project specifies explicitly what version of lean and dependencies it uses, and even if things change in lean 4.1, you keep using the version that works</p>",
        "id": 444711123,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1718374840
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"725689\">Mr Proof</span> <a href=\"#narrow/stream/270676-lean4/topic/How.20do.20you.20save.20your.20proof.20for.20eternity.3F/near/444708097\">said</a>:</p>\n<blockquote>\n<p>I see. But my point is, if I wanted to save my proof and put it on a USB stick for future generations. [...]</p>\n</blockquote>\n<p>Stick it on github. It's arctic code vault will most likely survive your usb stick.</p>",
        "id": 444844614,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1718442390
    },
    {
        "content": "<p>I'm not sure that either usb sticks or arctic code vaults are really in the right direction.</p>",
        "id": 444845553,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718443237
    },
    {
        "content": "<p>It's reproducible builds, and people caring, that gets you there.</p>",
        "id": 444845564,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718443247
    },
    {
        "content": "<p>And \"for eternity\" seems overly ambitious.</p>",
        "id": 444850990,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718446967
    },
    {
        "content": "<p>For eternity, it's indeed reproducible builds, and people caring, assuming we manage to survive the Great Filters ahead of us, and we run CI across the galaxy.</p>\n<p>For post-apocalyptic scenarios, it would seem reasonable to vendorize and freeze everything that your proof depends on in a Github repo except for the bootstrap stuff already available in arctic code vault (see <em>How do you handle repositories with dependencies, like libraries? What about build system? Will you archive everything needed to build my repository?</em> in this <a href=\"https://archiveprogram.github.com/faq/\">FAQ</a> and <a href=\"https://archiveprogram.github.com/assets/img/archive-repos.txt\">this list of the stuff you don't need to archive</a>, e.g. clang compiler but we need <a href=\"https://github.com/leanprover/lean-llvm/\">lean-llvm</a> anyway). It's reasonable to assume that people need many years to recover to a state to care about mathematical proofs, and by then they would have already recovered quite some other useful stuff (e.g. a Github, and many other dependencies) from the arctic code vault.</p>",
        "id": 444851918,
        "sender_full_name": "Utensil Song",
        "timestamp": 1718447788
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"725689\">Mr Proof</span> <a href=\"#narrow/stream/270676-lean4/topic/How.20do.20you.20save.20your.20proof.20for.20eternity.3F/near/444708097\">said</a>:</p>\n<blockquote>\n<p>e.g. if my proof contained something like \"simp;ring_nf;rw[&lt;-sqrt_sq]\" and then in Lean 4.1 the definitions of those things changed my proof would no longer work. </p>\n</blockquote>\n<p>This is why you shouldn't use <code>simp</code> nonterminally.</p>\n<p>Ultimately, however (no matter how many good code practices you follow), you will also have to preserve the version of Lean and Mathlib you depend on.</p>",
        "id": 445151467,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1718635793
    }
]