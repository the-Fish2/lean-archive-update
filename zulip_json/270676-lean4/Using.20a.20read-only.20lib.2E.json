[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> How are we meant to use a library from a read-only folder? The naive idea of having <code>require foo from \"/usr/lib/foo\"</code> in the main project lakefile doesn't work. <code>lake build</code> ran from the main project seems to try to write at least in <code>/usr/lib/foo/.lake/lakefile.olean.trace</code> and <code>/usr/lib/foo/.lake/lakefile.olean.lock</code>. Having this difficult to setup is a huge regression compared to Lean 3. This is a very common case when teaching. It was already very useful in Lean 3 but now that Mathlib is 4Gb it becomes unavoidable.</p>",
        "id": 419738452,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707086793
    },
    {
        "content": "<p>A read-only package folder is not currently a supported use case. Lake is expected to be reading-and writing from a build directory within the package folder. Changing this is possible, but had not yet come up as a priority. For comparison, Cargo <a href=\"https://github.com/rust-lang/cargo/issues/10096\">will also fail if a crate is read-only</a>.</p>",
        "id": 419742264,
        "sender_full_name": "Mac Malone",
        "timestamp": 1707089506
    },
    {
        "content": "<p>Is there an issue for this? If not, let's make one asap, and then see what needs to be done to resolve it.</p>\n<p>For teaching this is really important.</p>",
        "id": 419742349,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1707089566
    },
    {
        "content": "<p>Did you try symlinking (or hardlinking) all files?</p>",
        "id": 419742385,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707089619
    },
    {
        "content": "<p>I know, this is a workaround, not a solution.</p>",
        "id": 419742440,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707089645
    },
    {
        "content": "<p>It seems that it may also be worth clarifying whther Is the ultimate goal here specifically  to support read-only packages or more generally to have a package cache / shared a dependent package across multiple projects.</p>",
        "id": 419742566,
        "sender_full_name": "Mac Malone",
        "timestamp": 1707089770
    },
    {
        "content": "<p>I think that the goal is to have a shared dependency but this dependency has to be read-only if we don't want students to mess with other students' projects.</p>",
        "id": 419742682,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707089895
    },
    {
        "content": "<p>I don't think read-only packages per se are anyone's requirement. I think there are two things going on:</p>\n<ol>\n<li>We need to support people with very limited writable storage (but larger read-only storage).</li>\n<li>We need to do this <em>soon</em>, as currently someone investigating whether they can teach a Lean course may conclude that they can't because of this issue.</li>\n</ol>\n<p>The combination of those two suggest that the path forward should be:</p>\n<ul>\n<li><code>lake</code> just shrugs and does it's best when it can't write to a read-only directory</li>\n<li>later, a package cache / sharing dependent packages can provide a better solution.</li>\n</ul>",
        "id": 419742839,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1707090039
    },
    {
        "content": "<p>The requirement is to be able to use Lean for teaching. Here the typical scenario is that student work in a computer lab where they have a small home directory but can access a system lib (or part of a teacher's home) in read-only.</p>",
        "id": 419743466,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707090722
    },
    {
        "content": "<p>Even without storage constraint it looks utterly crazy to me to tell students: in order to use Lean the only thing that is possible is that each student install mathlib in their home because it cannot be installed system-wide.</p>",
        "id": 419743601,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707090857
    },
    {
        "content": "<p>And again this was a complete non-issue with Lean 3. And I would have never imagined this could be an issue, even in my worst nightmares of the night before a new class starts.</p>",
        "id": 419743642,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707090925
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> I sympathsize with problem. Python's Anaconda gave me similar woes when trying to sandbox student notebooks. (Conda requires write access to sahred packages.) The way I solved it was precisely by ensuring each user had there own installation. AFAIK, that is the only way to achieve that in Python (e.g., see <a href=\"https://stackoverflow.com/questions/60453776/using-conda-environments-with-a-read-only-base-installation\">this StackOverflow question</a>).</p>",
        "id": 419743801,
        "sender_full_name": "Mac Malone",
        "timestamp": 1707091093
    },
    {
        "content": "<p>I've never heard of a programming language where you cannot install a library system-wide because using a library requires write access to the library folder.</p>",
        "id": 419743811,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707091109
    },
    {
        "content": "<p>I don't know what you are talking about when suggesting Python suffers from this. I have hundreds of python libs installed system wide and I don't need to sudo in order to use them.</p>",
        "id": 419743856,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707091184
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/270676-lean4/topic/Using.20a.20read-only.20lib.2E/near/419742385\">said</a>:</p>\n<blockquote>\n<p>Did you try symlinking (or hardlinking) all files?</p>\n</blockquote>\n<p>It seems like this could work -- link the <code>.lake/packages</code> directory to a read only one, with pre-build oleans. Is there anything that could go wrong here, assuming that the main project has an unchanging manifest and lean-toolchain?</p>",
        "id": 419743948,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1707091223
    },
    {
        "content": "<p>I will try after dinner.</p>",
        "id": 419744147,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707091324
    },
    {
        "content": "<p>If it does work, there could be a script in the meantime to set that kind of project up automatically. Maybe in the future <code>lake</code> might have some way to have pre-built libraries that you can link into your project like this? I hesitate suggesting to modify the lakefile with paths, since you should be able to, as a use, have your dependencies come from wherever you want.</p>",
        "id": 419744151,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1707091327
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> Unfortunately, that will not work. Lake currently writes to the <code>.lake</code> directory of dependent packages.</p>",
        "id": 419744203,
        "sender_full_name": "Mac Malone",
        "timestamp": 1707091374
    },
    {
        "content": "<p>That's why I suggested symlinking all <strong>files</strong> by using something like <a href=\"https://linux.die.net/man/1/lndir\">lndir</a></p>",
        "id": 419744222,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707091405
    },
    {
        "content": "<p>When does it write to the <code>.lake/packages/*/.lake</code> directories? Does <code>lake</code> need to if everything is up-to-date?</p>",
        "id": 419744294,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1707091450
    },
    {
        "content": "<p>(And let's assume that these are dependent packages that have been set aside to be dependent for some particular project, like a project students download for their course.)</p>",
        "id": 419744318,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1707091489
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/Using.20a.20read-only.20lib.2E/near/419743856\">said</a>:</p>\n<blockquote>\n<p>I don't know what you are talking about when suggesting Python suffers from this. I have hundreds of python libs installed system wide and I don't need to sudo in order to use them.</p>\n</blockquote>\n<p>That has not been my experience (or that of the StackOverflow users in the question I linked). Are you sure those libraries are stored in a read-only location? In fact, there is a <a href=\"https://github.com/pypa/setuptools/issues/3237\">PIP Issues about it not supporitng read-only source trees</a>.  The key way  it can get around this is by doing an \"out-of-tree\" build which means hoisting all the build results to the downstream package (which is exactly what you are trying to avoid here).</p>",
        "id": 419744504,
        "sender_full_name": "Mac Malone",
        "timestamp": 1707091668
    },
    {
        "content": "<p>Back to caches, isn't a difference is that usually Python packages come with a cache of pre-built pyc files?</p>",
        "id": 419744618,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1707091778
    },
    {
        "content": "<p>My big confusion here is that it is not clear to me what one is expecting Lake to be doing if it cannot write files. The fundamental purpose of Lake is to write files (build modules and manage packages).</p>",
        "id": 419744623,
        "sender_full_name": "Mac Malone",
        "timestamp": 1707091783
    },
    {
        "content": "<p>If it needs to rebuild a file in a package that is in a read-only directory, then IMHO it should fail.</p>",
        "id": 419744794,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1707091944
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> The problem is that for Lake to know whether it needs to build files, it often needs to write files (e.g., write lock files, download caches / metadata, etc.) so it needs somewhere to put those.</p>",
        "id": 419744918,
        "sender_full_name": "Mac Malone",
        "timestamp": 1707092093
    },
    {
        "content": "<p>However, despite this, there does exist some limited set of features (e.g., <code>lake env</code> and perhaps <code>lake serve</code>) that could conceivably be made to to work without write access.</p>",
        "id": 419744928,
        "sender_full_name": "Mac Malone",
        "timestamp": 1707092103
    },
    {
        "content": "<p>If everything is up to date, I don't see why lake would need to write any files</p>",
        "id": 419745077,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707092259
    },
    {
        "content": "<p>Does lake need to write a lockfile before checking that things are up-to-date? If so, maybe Lake can see if the directory is readonly and skip writing the lockfile?</p>",
        "id": 419745145,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1707092298
    },
    {
        "content": "<p>why would it even need to write-lock the directory if it isn't writing anything?</p>",
        "id": 419745165,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707092323
    },
    {
        "content": "<p>It needs to read-lock?</p>",
        "id": 419745179,
        "sender_full_name": "Mac Malone",
        "timestamp": 1707092336
    },
    {
        "content": "<p>why is that a thing</p>",
        "id": 419745203,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707092366
    },
    {
        "content": "<p>My goal here is to draw out more details of the intended use case and see if there that issue can be addressed (since the more general one sounds infeasible).</p>",
        "id": 419745219,
        "sender_full_name": "Mac Malone",
        "timestamp": 1707092382
    },
    {
        "content": "<p>what is the \"more general one\" in your mind?</p>",
        "id": 419745311,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707092462
    },
    {
        "content": "<p>I agree with Kyle that if the directory is readonly then there is no need to read-lock</p>",
        "id": 419745402,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707092541
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/Using.20a.20read-only.20lib.2E/near/419745145\">said</a>:</p>\n<blockquote>\n<p>Does lake need to write a lockfile before checking that things are up-to-date? If so, maybe Lake can see if the directory is readonly and skip writing the lockfile?</p>\n</blockquote>\n<p>Interstingly, you have proposed <a href=\"https://github.com/rust-lang/cargo/pull/10716\">the exact feature</a> that was turned down by the Cargo team to address <a href=\"https://github.com/rust-lang/cargo/issues/10096\">a similar issue</a>.</p>\n<p>However, I do think something like this could work.</p>",
        "id": 419745412,
        "sender_full_name": "Mac Malone",
        "timestamp": 1707092554
    },
    {
        "content": "<p>An alternative idea I thought of was to have lake check for the existence of a <code>.lake/packages/foo/readonly</code> file, in case checking for readonly privileges is sketchy for some reason.</p>",
        "id": 419745554,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1707092694
    },
    {
        "content": "<p>(Lake packages shouldn't have a <code>readonly</code> file themselves -- this is something you'd do <em>to</em> a dependency. It could be an error for Lake packages to have this file, that way it's free to use for this purpose.)</p>",
        "id": 419745714,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1707092876
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Using.20a.20read-only.20lib.2E/near/419745077\">said</a>:</p>\n<blockquote>\n<p>If everything is up to date, I don't see why lake would need to write any files</p>\n</blockquote>\n<p>If everything is in fact \"up-to-date\" in the most complete sense of the word, I don't think Lake will try to write anything. Partick's initial example was a <code>lakefile.olean.trace</code> which should not be written again after it is written once if the configuration does not change.</p>",
        "id": 419745813,
        "sender_full_name": "Mac Malone",
        "timestamp": 1707092958
    },
    {
        "content": "<p>Does that use case actually work currently?</p>",
        "id": 419745834,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707092988
    },
    {
        "content": "<p>it sounds like the writing of the lockfile will cause problems</p>",
        "id": 419745903,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707093015
    },
    {
        "content": "<p>Lake only writes to the lock file if it needs to reconfigure.</p>",
        "id": 419745933,
        "sender_full_name": "Mac Malone",
        "timestamp": 1707093041
    },
    {
        "content": "<p>I would define an \"up-to-date dependency\" as containing <code>olean.trace</code> files</p>",
        "id": 419745934,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707093045
    },
    {
        "content": "<p>Maybe this issue needs a MWE</p>",
        "id": 419745961,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707093081
    },
    {
        "content": "<p>However, I think the problem may be that you need to acquire a write handle on a file to acquire a FS lock (even a read /shared lock) on the file (at least on Windows) and that may break on a read-only file.</p>",
        "id": 419746038,
        "sender_full_name": "Mac Malone",
        "timestamp": 1707093152
    },
    {
        "content": "<p>I guess the trouble is that <code>lakefile.olean.trace</code> files are not shipped by <code>cache</code></p>",
        "id": 419746042,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707093156
    },
    {
        "content": "<p>plus there are potentially some OS dependency issues with shipping everything in <code>.lake</code> to students</p>",
        "id": 419746065,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707093191
    },
    {
        "content": "<p>If we're in a shared filesystem situation, that might not be an issue since students wouldn't be downloading anything from that cache, assuming the dependency is fully built and on that shared filesystem</p>",
        "id": 419746126,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1707093246
    },
    {
        "content": "<p>I think this is the setup that Patrick in particular wants to support. There are computer labs he uses for teaching.</p>",
        "id": 419746136,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1707093269
    },
    {
        "content": "<p>right, the point is that you need a special process to be able to set up that shared filesystem correctly though</p>",
        "id": 419746144,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707093285
    },
    {
        "content": "<p>Mac, we can't possibly be talking about the same thing. I can tell you there is no user-writable folder in my <code>/usr/lib/python3/dist-packages</code>. Why would there be?</p>",
        "id": 419746150,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707093291
    },
    {
        "content": "<p>I don't want to update or compile anything here. I want a fully compiled Mathlib living in a system-wide location that users can't write to without  <code>sudo</code>.</p>",
        "id": 419746179,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707093329
    },
    {
        "content": "<p>the easiest way would be to just set up a lake project similar to a student project, but using the admin account / with the shared FS being writable so that lake sets up the files the way it wants; then hopefully student projects will see that the dependency is already set up correctly and not do any further modification</p>",
        "id": 419746249,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707093369
    },
    {
        "content": "<p>And <code>/usr/lib/ghc/</code> is also not writable.</p>",
        "id": 419746252,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707093374
    },
    {
        "content": "<p>it's not clear to me whether the case I just described is in fact broken currently. Patrick do you have a repro?</p>",
        "id": 419746337,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707093483
    },
    {
        "content": "<p>I can tell you what I tried. I created a new user on my computer. Then I logged as this user and downloaded the <code>verbose-lean4</code> library and fully build it. Then I made the whole folder readable to everybody. I switched back to my normal user and created a Lean project with the require line I indicated at the very beginning of this thread.</p>",
        "id": 419746495,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707093641
    },
    {
        "content": "<p>See whether it makes a difference if you create a project depending on <code>verbose-lean4</code> from the first user</p>",
        "id": 419746532,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707093700
    },
    {
        "content": "<p>i.e. it might be that lake sets things up differently for root packages vs dependencies</p>",
        "id": 419746598,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707093740
    },
    {
        "content": "<p>did the aforementioned <code>.lake/lakefile.olean.trace</code> and <code>.lake/lakefile.olean.lock</code> files already exist?</p>",
        "id": 419746648,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707093808
    },
    {
        "content": "<p>No they didn't.</p>",
        "id": 419746720,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707093876
    },
    {
        "content": "<p>In particular, the fact that is was writing <code>lakefile.olean.lock</code> is concerning. That implies Lake was trying to reconfigure the package.</p>",
        "id": 419746750,
        "sender_full_name": "Mac Malone",
        "timestamp": 1707093907
    },
    {
        "content": "<p>What is the trigger for that?</p>",
        "id": 419746778,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707093945
    },
    {
        "content": "<p>Patrick's answer of them not existing already is one reason.</p>",
        "id": 419746843,
        "sender_full_name": "Mac Malone",
        "timestamp": 1707093991
    },
    {
        "content": "<p>I am confused as to how he built the package without getting a <code>lakefile.olean.trace</code> in the process. though.</p>",
        "id": 419746864,
        "sender_full_name": "Mac Malone",
        "timestamp": 1707094019
    },
    {
        "content": "<p>And also I doesn't only happen to me. We are having discussion because other people asked my help after hitting this wall.</p>",
        "id": 419746871,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707094026
    },
    {
        "content": "<p>I don't understand what you want me to try.</p>",
        "id": 419746983,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707094109
    },
    {
        "content": "<p>Do you think you could provide a list of shell commands to repro this?</p>",
        "id": 419746999,
        "sender_full_name": "Mac Malone",
        "timestamp": 1707094133
    },
    {
        "content": "<p>I will try to produce this list.</p>",
        "id": 419747032,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707094182
    },
    {
        "content": "<p>Maybe I will try without creating a new user, simply using sudo to put files in a read-only place.</p>",
        "id": 419747106,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707094237
    },
    {
        "content": "<ol>\n<li>Make user <code>newuser</code></li>\n<li>Create project <code>verbose-lean4</code> in <code>/usr/lib/verbose-lean4</code> or wherever, with write access only by <code>newuser</code></li>\n<li><code>lake build</code> verbose-lean4</li>\n<li>Create project <code>myproj</code> in <code>/home/newuser/myproj</code>, <code>require verbose-lean4 from \"/usr/lib/verbose-lean4\"</code></li>\n<li><code>lake build</code> myproj</li>\n<li>switch to <code>otheruser</code></li>\n<li>Create project <code>otherproj</code> in <code>/home/otheruser/otherproj</code>, <code>require verbose-lean4 from \"/usr/lib/verbose-lean4\"</code></li>\n<li><code>lake build</code> otherproj</li>\n</ol>",
        "id": 419747148,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707094294
    },
    {
        "content": "<p>You are making it more complicated than needed. I already fails with only one project depending on a readonly lib, no need to have two.</p>",
        "id": 419747346,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707094461
    },
    {
        "content": "<p>my hope is that steps 1-5 will produce a <code>/usr/lib/verbose-lean4</code> which is in the right state to be used in step 8</p>",
        "id": 419747351,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707094482
    },
    {
        "content": "<p>if you skip steps 4-5 (which I think you did) some files may not be generated and cause a failure in step 8</p>",
        "id": 419747375,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707094506
    },
    {
        "content": "<p><code>myproj</code> is not actually being used here, it is only something which gets lake to compile <code>verbose-lean4</code> as a dependency</p>",
        "id": 419747454,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707094570
    },
    {
        "content": "<p>I see.</p>",
        "id": 419747478,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707094610
    },
    {
        "content": "<p>I will try it here.</p>",
        "id": 419747485,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707094622
    },
    {
        "content": "<p>So you say we are missing a <code>lake actually-build</code> command?</p>",
        "id": 419747719,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707094860
    },
    {
        "content": "<p>Trying your procedure I realize the whole thing is doomed anyway because the dummy project in the middle is recloning its own copy of Mathlib instead of using the one that is already present and compiled in the <code>verbose-lean4/.lake</code> folder.</p>",
        "id": 419747866,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707095011
    },
    {
        "content": "<p>So I guess the actual project will also do this and we will end up duplicating Mathlib anyway.</p>",
        "id": 419747893,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707095035
    },
    {
        "content": "<p>Although I guess I could require <code>verbose-lean4</code> <em>and</em> <code>mathlib</code> from the student project, although it certainly sounds stupid.</p>",
        "id": 419747955,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707095068
    },
    {
        "content": "<p>yeah I think you have to do that</p>",
        "id": 419748072,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707095181
    },
    {
        "content": "<p>also all of mathlib's dependencies...</p>",
        "id": 419748078,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707095193
    },
    {
        "content": "<p>I think this is what \"not a supported use case\" looks like</p>",
        "id": 419748089,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707095219
    },
    {
        "content": "<p>Do you think I can do <code>require foo from \"/usr/lib/foo/.lake/lake-packages/mathlib\"</code> or will lake insist that mathlib should really be duplicated in <code>/usr/lib</code>?</p>",
        "id": 419748214,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707095313
    },
    {
        "content": "<p>I think you can do that</p>",
        "id": 419748221,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707095325
    },
    {
        "content": "<p>The trick with the dummy package in the middle doesn't work.</p>",
        "id": 419748481,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707095598
    },
    {
        "content": "<p>Building the dummy package does not make the lib usable. lake still want to write in <code>verbose-lean4/.lake/lakefile.olean.trace</code></p>",
        "id": 419748499,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707095631
    },
    {
        "content": "<p>And just in case someone asks when I'm away: all those projects have the same lean-toolchain file.</p>",
        "id": 419748636,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707095759
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> even if you can't fix lake, can you at least write a message saying: I acknowledge that Python and Rust allow you to use a library that is installed on your system in a folder you can't write to? And that those Python and Rust discussions you linked to earlier have nothing to do with the current conversation?</p>",
        "id": 419748938,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707096013
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/Using.20a.20read-only.20lib.2E/near/419748499\">said</a>:</p>\n<blockquote>\n<p>Building the dummy package does not make the lib usable. lake still want to write in <code>verbose-lean4/.lake/lakefile.olean.trace</code></p>\n</blockquote>\n<p>Does the <code>lakefile.olean.trace</code> file exist now?</p>",
        "id": 419749418,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707096460
    },
    {
        "content": "<p>does building the dummy package create it and then delete it again or something?</p>",
        "id": 419749440,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707096480
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> To clarify, I do think this use case is important and I do want to do the best I can to support it. We are currrently brainstorming ideas on how to do this. Our understanding of your constraints is as follows:</p>\n<ul>\n<li>In order to save space, Lake should be able to make use of a single shared hardcopy of the package (particularly, the soure files and build artifacts).</li>\n<li>Users must not be able to modify each other's instance of the shared package.</li>\n<li>Each user should be using the same version / configuration of the shared package.</li>\n</ul>",
        "id": 419755977,
        "sender_full_name": "Mac Malone",
        "timestamp": 1707101531
    },
    {
        "content": "<p>(Probably there's lots of prior art that might be useful, but perhaps PNPM can be of some inspiration as well: <a href=\"https://pnpm.io/motivation\">https://pnpm.io/motivation</a> )</p>",
        "id": 419756098,
        "sender_full_name": "Julian Berman",
        "timestamp": 1707101668
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321696\">@Julian Berman</span> Yeah, a content-addressed store would certainly be the ideal way to solve this. That would likely be a longer-term solution, though.</p>",
        "id": 419756519,
        "sender_full_name": "Mac Malone",
        "timestamp": 1707102025
    },
    {
        "content": "<p>For me, writing to the location listed in <code>requires</code> violates the principle of least surprise: it seems to specify the location of sources, and I would not expect it to behave fundamentally different if there is a remote (e.g. <code>git</code>) location or a local (<code>file</code>) location, and would have expected that all intermediate files are written to the current project's <code>.lake</code> directory. </p>\n<p>In particular I'd be surprised if this may modify files there. Maybe that other project has different toolchain or dependencies? I may be surprised to see those build files disappear, or see odd interactions if I rebuild there </p>\n<p>But I admit that I wouldn't even expect it to share build artifacts with that other location, even though I can see why some would want or even expect that. And that may make it tricky.</p>",
        "id": 419784481,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1707121186
    },
    {
        "content": "<p>Just noting in this thread that <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> has already made some initial progress on this problem, at <a href=\"https://github.com/leanprover/lean4/pull/3254\">lean#3254</a>.</p>",
        "id": 419837951,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1707139303
    },
    {
        "content": "<p>To add on to <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>'s note, I believe <a href=\"https://github.com/leanprover/lean4/pull/3254\">lean4#3254</a> should fix the <code>lakefile.olean.trace</code> issue and a fully \"up-to-date\" read-only dependency should work with that PR release. I have tested it locally with a root-owned copy of mathlib and a user-level project and it worked for me, but I would be happy to have others test it as welll and see if they encoutner any errors.</p>",
        "id": 419882070,
        "sender_full_name": "Mac Malone",
        "timestamp": 1707150969
    },
    {
        "content": "<p>What is the procedure to test this branch locally? Is there a toolchain we can give to elan?</p>",
        "id": 419882553,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707151131
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Yes, you can use <code>leanprover/lean4-pr-releases:pr-release-3254</code> as your Lean toolchain to use the version of Lean from the PR. Right now there is only a Linux version, but I will get the CI to fix that shortly.</p>",
        "id": 419883025,
        "sender_full_name": "Mac Malone",
        "timestamp": 1707151285
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 419883232,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707151341
    },
    {
        "content": "<p>Also, mathlib has been built on the release, so <code>lake exe cache get</code> should work as well (and did in my testing).</p>",
        "id": 419883354,
        "sender_full_name": "Mac Malone",
        "timestamp": 1707151374
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Just to be clear, are we talking about the read-only folder being on some base image that is copied to each machine or on a network drive? In the latter case, access times would be a separate concern. But perhaps people here already have experience with serving mathlib oleans over the network?</p>",
        "id": 419888875,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1707153006
    },
    {
        "content": "<p>I don't know the exact setup used by the colleagues who asked me this question. But both should work. Of course accessing Mathlib over the network will probably be slower but there is nothing Lean can do about that.</p>",
        "id": 419891244,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707153805
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Using.20a.20read-only.20lib.2E/near/419745402\">said</a>:</p>\n<blockquote>\n<p>I agree with Kyle that if the directory is readonly then there is no need to read-lock</p>\n</blockquote>\n<p>I imagine that we don't care about this at all, but presumably this can fail when the directory is readonly to one user but writeable to another, and the latter is performing modifications.</p>",
        "id": 419907806,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707159537
    },
    {
        "content": "<p>I suppose that's a good reason to have a way to lock it permanently with a lockfile (like that <code>readonly</code> file suggestion)</p>",
        "id": 419923577,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1707165254
    },
    {
        "content": "<p>I see a Mathlib branch at <a href=\"https://github.com/leanprover-community/mathlib4/commits/lean-pr-testing-3254/\">https://github.com/leanprover-community/mathlib4/commits/lean-pr-testing-3254/</a> whose name is promising but it doesn't seem to have oleans, even if I require the previous commt on that branch. Is it meant to have some?</p>",
        "id": 419963649,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707186554
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/Using.20a.20read-only.20lib.2E/near/419891244\">said</a>:</p>\n<blockquote>\n<p>but there is nothing Lean can do about that.</p>\n</blockquote>\n<p>Well, in principle it could, by using ltar on the fly.</p>",
        "id": 420037693,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1707223081
    },
    {
        "content": "<p>Related: I love the Lean 4 <code>mmap</code>-able oleans, but symlinking <code>.lake</code> to a <code>/run</code> or <code>/dev/shm</code> subdirectory (two world-writable RAM-backed directories mounted by default in most Linux distros) could be a hacky way to get around disk space limitations if you have enough RAM; as long as you run <code>lake exe cache get</code> in every session, this simulates Lean 3 behaviour in a way.</p>",
        "id": 420049268,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1707226850
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/Using.20a.20read-only.20lib.2E/near/419963649\">said</a>:</p>\n<blockquote>\n<p>I see a Mathlib branch at <a href=\"https://github.com/leanprover-community/mathlib4/commits/lean-pr-testing-3254/\">https://github.com/leanprover-community/mathlib4/commits/lean-pr-testing-3254/</a> whose name is promising but it doesn't seem to have oleans, even if I require the previous commit on that branch. Is it meant to have some?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> do you know the answer to this question?</p>",
        "id": 420170754,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1707273718
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> works fine for me on 0279e4fc</p>",
        "id": 420234283,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707306550
    },
    {
        "content": "<p>Dear all, I am one of the colleagues Patrick mentioned. The PR seems to solve the issue. I will confirm this soon but regardless of the outcome of the other test that we will do tonight, I'd like to thank <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> for raising the issue and <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> for the fix :)</p>",
        "id": 420297841,
        "sender_full_name": "Pierre Boutry",
        "timestamp": 1707324734
    },
    {
        "content": "<p>I have a follow-up question. Feel free to move my question to another topic if here is not the place to ask such a question. With our setup we get many warnings. So to give some details, we are using the <a href=\"https://github.com/PatrickMassot/verbose-lean4/tree/master\">https://github.com/PatrickMassot/verbose-lean4/tree/master</a> project. I modified its <code>lakefile.lean</code> to the following thing.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lake</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lake</span> <span class=\"n\">DSL</span>\n\n<span class=\"n\">package</span> <span class=\"n\">verbose</span> <span class=\"n\">where</span>\n  <span class=\"n\">leanOptions</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span>\n    <span class=\"o\">⟨</span><span class=\"bp\">`</span><span class=\"n\">pp.unicode.fun</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">⟩,</span> <span class=\"c1\">-- pretty-prints `fun a ↦ b`</span>\n    <span class=\"o\">⟨</span><span class=\"bp\">`</span><span class=\"n\">autoImplicit</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">⟩,</span>\n    <span class=\"o\">⟨</span><span class=\"bp\">`</span><span class=\"n\">relaxedAutoImplicit</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">⟩,</span>\n    <span class=\"o\">⟨</span><span class=\"bp\">`</span><span class=\"n\">pp.proofs.withType</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">⟩]</span>\n\n<span class=\"n\">require</span> <span class=\"n\">mathlib</span> <span class=\"k\">from</span> <span class=\"n\">git</span>\n  <span class=\"s2\">\"https://github.com/leanprover-community/mathlib4.git\"</span><span class=\"bp\">@</span><span class=\"s2\">\"lean-pr-testing-3254\"</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">default_target</span><span class=\"kd\">]</span>\n<span class=\"n\">lean_lib</span> <span class=\"n\">Verbose</span> <span class=\"n\">where</span>\n</code></pre></div>\n<p>I also modified the <code>lean-toolchain</code> file so it contains <code>leanprover/lean4-pr-releases:pr-release-3254</code>.</p>\n<p>And for the \"package\" that contains the exercises for the students I have the following for the <code>lakefile.lean</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lake</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lake</span> <span class=\"n\">DSL</span>\n\n<span class=\"n\">package</span> <span class=\"bp\">«</span><span class=\"n\">FCR</span><span class=\"bp\">»</span> <span class=\"n\">where</span>\n\n<span class=\"n\">require</span> <span class=\"n\">verbose</span>      <span class=\"k\">from</span> <span class=\"s2\">\"/adhome/p/pi/pierre.boutry/FCR-LEAN-SETUP/verbose-lean4\"</span>\n<span class=\"n\">require</span> <span class=\"n\">mathlib</span>      <span class=\"k\">from</span> <span class=\"s2\">\"/adhome/p/pi/pierre.boutry/FCR-LEAN-SETUP/verbose-lean4/.lake/packages/mathlib\"</span>\n<span class=\"n\">require</span> <span class=\"n\">std</span>          <span class=\"k\">from</span> <span class=\"s2\">\"/adhome/p/pi/pierre.boutry/FCR-LEAN-SETUP/verbose-lean4/.lake/packages/std\"</span>\n<span class=\"n\">require</span> <span class=\"n\">Qq</span>           <span class=\"k\">from</span> <span class=\"s2\">\"/adhome/p/pi/pierre.boutry/FCR-LEAN-SETUP/verbose-lean4/.lake/packages/Qq\"</span>\n<span class=\"n\">require</span> <span class=\"n\">aesop</span>        <span class=\"k\">from</span> <span class=\"s2\">\"/adhome/p/pi/pierre.boutry/FCR-LEAN-SETUP/verbose-lean4/.lake/packages/aesop\"</span>\n<span class=\"n\">require</span> <span class=\"n\">proofwidgets</span> <span class=\"k\">from</span> <span class=\"s2\">\"/adhome/p/pi/pierre.boutry/FCR-LEAN-SETUP/verbose-lean4/.lake/packages/proofwidgets\"</span>\n<span class=\"n\">require</span> <span class=\"n\">Cli</span>          <span class=\"k\">from</span> <span class=\"s2\">\"/adhome/p/pi/pierre.boutry/FCR-LEAN-SETUP/verbose-lean4/.lake/packages/Cli\"</span>\n<span class=\"n\">require</span> <span class=\"n\">importGraph</span>  <span class=\"k\">from</span> <span class=\"s2\">\"/adhome/p/pi/pierre.boutry/FCR-LEAN-SETUP/verbose-lean4/.lake/packages/importGraph\"</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">default_target</span><span class=\"kd\">]</span>\n<span class=\"n\">lean_lib</span> <span class=\"n\">FCR</span> <span class=\"n\">where</span>\n</code></pre></div>\n<p>When doing <code>lake build</code> one sees many warnings.</p>",
        "id": 422709499,
        "sender_full_name": "Pierre Boutry",
        "timestamp": 1708551794
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Int</span><span class=\"bp\">/</span><span class=\"n\">Order.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">List</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Util</span><span class=\"bp\">/</span><span class=\"n\">TermUnsafe.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Tactic</span><span class=\"bp\">/</span><span class=\"n\">OpenPrivate.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Meta</span><span class=\"bp\">/</span><span class=\"n\">DiscrTree.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">NameMapAttribute.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Option</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Tactic</span><span class=\"bp\">/</span><span class=\"n\">CoeExt.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Tactic</span><span class=\"bp\">/</span><span class=\"n\">Ext</span><span class=\"bp\">/</span><span class=\"n\">Attr.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Tactic</span><span class=\"bp\">/</span><span class=\"n\">Lint.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Tactic</span><span class=\"bp\">/</span><span class=\"n\">Relation</span><span class=\"bp\">/</span><span class=\"n\">Rfl.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Tactic</span><span class=\"bp\">/</span><span class=\"n\">Relation</span><span class=\"bp\">/</span><span class=\"n\">Symm.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">CodeAction</span><span class=\"bp\">/</span><span class=\"n\">Attr.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Tactic</span><span class=\"bp\">/</span><span class=\"n\">Lint</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Expr.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Classes</span><span class=\"bp\">/</span><span class=\"n\">Dvd.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">String</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Util</span><span class=\"bp\">/</span><span class=\"n\">LibraryNote.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Rat</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Command.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Tactic</span><span class=\"bp\">/</span><span class=\"n\">LabelAttr.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Classes</span><span class=\"bp\">/</span><span class=\"n\">SetNotation.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Tactic</span><span class=\"bp\">/</span><span class=\"n\">Ext.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Logic.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Tactic</span><span class=\"bp\">/</span><span class=\"n\">Simpa.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Nat</span><span class=\"bp\">/</span><span class=\"n\">Lemmas.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">WF.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Parser.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Tactic</span><span class=\"bp\">/</span><span class=\"n\">LeftRight.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">HashMap</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">SMap.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Linter</span><span class=\"bp\">/</span><span class=\"n\">UnreachableTactic.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Util</span><span class=\"bp\">/</span><span class=\"n\">ExtendedBinder.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Syntax.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Bool.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Tactic</span><span class=\"bp\">/</span><span class=\"n\">RCases.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">aesop</span><span class=\"bp\">/</span><span class=\"n\">Aesop.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Qq</span><span class=\"bp\">/</span><span class=\"n\">Qq.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">importGraph</span><span class=\"bp\">/</span><span class=\"n\">ImportGraph</span><span class=\"bp\">/</span><span class=\"n\">Imports.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Meta</span><span class=\"bp\">/</span><span class=\"n\">Inaccessible.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Util</span><span class=\"bp\">/</span><span class=\"n\">Cache.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Tactic</span><span class=\"bp\">/</span><span class=\"n\">TryThis.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Control</span><span class=\"bp\">/</span><span class=\"n\">Nondet</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Util</span><span class=\"bp\">/</span><span class=\"n\">Pickle.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Tactic</span><span class=\"bp\">/</span><span class=\"n\">SolveByElim.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">MLList</span><span class=\"bp\">/</span><span class=\"n\">Heartbeats.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Tactic</span><span class=\"bp\">/</span><span class=\"n\">Replace.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">List</span><span class=\"bp\">/</span><span class=\"n\">Init</span><span class=\"bp\">/</span><span class=\"n\">Lemmas.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">MLList</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Tactic</span><span class=\"bp\">/</span><span class=\"n\">GuardMsgs.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Qq</span><span class=\"bp\">/</span><span class=\"n\">Qq</span><span class=\"bp\">/</span><span class=\"n\">Match.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">CodeAction.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">proofwidgets</span><span class=\"bp\">/</span><span class=\"n\">ProofWidgets</span><span class=\"bp\">/</span><span class=\"n\">Component</span><span class=\"bp\">/</span><span class=\"n\">MakeEditLink.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">proofwidgets</span><span class=\"bp\">/</span><span class=\"n\">ProofWidgets</span><span class=\"bp\">/</span><span class=\"n\">Component</span><span class=\"bp\">/</span><span class=\"n\">OfRpcMethod.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">CoreM.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Qq</span><span class=\"bp\">/</span><span class=\"n\">Qq</span><span class=\"bp\">/</span><span class=\"n\">MetaM.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Tactic</span><span class=\"bp\">/</span><span class=\"n\">SolveByElim</span><span class=\"bp\">/</span><span class=\"n\">Backtrack.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Tactic</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">List</span><span class=\"bp\">/</span><span class=\"n\">Lemmas.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">RBMap</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Tactic</span><span class=\"bp\">/</span><span class=\"n\">HaveI.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Tactic</span><span class=\"bp\">/</span><span class=\"n\">Exact.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Fin</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Option</span><span class=\"bp\">/</span><span class=\"n\">Lemmas.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Int</span><span class=\"bp\">/</span><span class=\"n\">DivMod.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Tactic</span><span class=\"bp\">/</span><span class=\"n\">Lint</span><span class=\"bp\">/</span><span class=\"n\">Misc.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Tactic</span><span class=\"bp\">/</span><span class=\"n\">Omega.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Tactic</span><span class=\"bp\">/</span><span class=\"n\">NoMatch.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Tactic</span><span class=\"bp\">/</span><span class=\"n\">Alias.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">BitVec.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">DList.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">RBMap</span><span class=\"bp\">/</span><span class=\"n\">Lemmas.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Classes</span><span class=\"bp\">/</span><span class=\"n\">Order.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Nat</span><span class=\"bp\">/</span><span class=\"n\">Gcd.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Option</span><span class=\"bp\">/</span><span class=\"n\">Init</span><span class=\"bp\">/</span><span class=\"n\">Lemmas.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Tactic</span><span class=\"bp\">/</span><span class=\"n\">Where.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">proofwidgets</span><span class=\"bp\">/</span><span class=\"n\">ProofWidgets</span><span class=\"bp\">/</span><span class=\"n\">Component</span><span class=\"bp\">/</span><span class=\"n\">PenroseDiagram.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">proofwidgets</span><span class=\"bp\">/</span><span class=\"n\">ProofWidgets</span><span class=\"bp\">/</span><span class=\"n\">Presentation</span><span class=\"bp\">/</span><span class=\"n\">Expr.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">List</span><span class=\"bp\">/</span><span class=\"n\">Perm.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">HashMap</span><span class=\"bp\">/</span><span class=\"n\">WF.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n</code></pre></div>\n<p>It would be nice to understand how to avoid them. They are actually surprising as the files can be found.</p>",
        "id": 422709505,
        "sender_full_name": "Pierre Boutry",
        "timestamp": 1708551798
    },
    {
        "content": "<p>Before checking whether they were there or not, I thought that maybe they were not downloaded as they were not required to build verbose-lean4. So I tried adding the dependencies for these packages in the <code>lakefile.lean</code> in the following way. It changed nothing but I prefer to specify it in case someone thinks it might allow to get rid of these warnings. And sorry for the multiple messages but the length of the warnings made posting this in one message impossible as I was going above the 10k characters allowed by message.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lake</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lake</span> <span class=\"n\">DSL</span>\n\n<span class=\"n\">package</span> <span class=\"n\">verbose</span> <span class=\"n\">where</span>\n  <span class=\"n\">leanOptions</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span>\n    <span class=\"o\">⟨</span><span class=\"bp\">`</span><span class=\"n\">pp.unicode.fun</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">⟩,</span> <span class=\"c1\">-- pretty-prints `fun a ↦ b`</span>\n    <span class=\"o\">⟨</span><span class=\"bp\">`</span><span class=\"n\">autoImplicit</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">⟩,</span>\n    <span class=\"o\">⟨</span><span class=\"bp\">`</span><span class=\"n\">relaxedAutoImplicit</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">⟩,</span>\n    <span class=\"o\">⟨</span><span class=\"bp\">`</span><span class=\"n\">pp.proofs.withType</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">⟩]</span>\n\n<span class=\"n\">require</span> <span class=\"n\">mathlib</span>      <span class=\"k\">from</span> <span class=\"n\">git</span>\n  <span class=\"s2\">\"https://github.com/leanprover-community/mathlib4\"</span>      <span class=\"bp\">@</span> <span class=\"s2\">\"lean-pr-testing-3254\"</span>\n<span class=\"n\">require</span> <span class=\"n\">std</span>          <span class=\"k\">from</span> <span class=\"n\">git</span>\n  <span class=\"s2\">\"https://github.com/leanprover/std4\"</span>                    <span class=\"bp\">@</span> <span class=\"s2\">\"nightly-testing-2024-02-02\"</span>\n<span class=\"n\">require</span> <span class=\"n\">Qq</span>           <span class=\"k\">from</span> <span class=\"n\">git</span>\n  <span class=\"s2\">\"https://github.com/leanprover-community/quote4\"</span>        <span class=\"bp\">@</span> <span class=\"s2\">\"master\"</span>\n<span class=\"n\">require</span> <span class=\"n\">aesop</span>        <span class=\"k\">from</span> <span class=\"n\">git</span>\n  <span class=\"s2\">\"https://github.com/leanprover-community/aesop\"</span>         <span class=\"bp\">@</span> <span class=\"s2\">\"master\"</span>\n<span class=\"n\">require</span> <span class=\"n\">proofwidgets</span> <span class=\"k\">from</span> <span class=\"n\">git</span>\n  <span class=\"s2\">\"https://github.com/leanprover-community/ProofWidgets4\"</span> <span class=\"bp\">@</span> <span class=\"s2\">\"v0.0.27\"</span>\n<span class=\"n\">require</span> <span class=\"n\">Cli</span>          <span class=\"k\">from</span> <span class=\"n\">git</span>\n  <span class=\"s2\">\"https://github.com/leanprover/lean4-cli\"</span>               <span class=\"bp\">@</span> <span class=\"s2\">\"main\"</span>\n<span class=\"n\">require</span> <span class=\"n\">importGraph</span>  <span class=\"k\">from</span> <span class=\"n\">git</span>\n  <span class=\"s2\">\"https://github.com/leanprover-community/import-graph\"</span>  <span class=\"bp\">@</span> <span class=\"s2\">\"main\"</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">default_target</span><span class=\"kd\">]</span>\n<span class=\"n\">lean_lib</span> <span class=\"n\">Verbose</span> <span class=\"n\">where</span>\n</code></pre></div>",
        "id": 422710096,
        "sender_full_name": "Pierre Boutry",
        "timestamp": 1708552103
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"690050\">@Pierre Boutry</span> I don't have time to look at this all now. Could you please try to simplify your setup by using nightlies rather than <code>lean-pr-testing-NNNN</code> branches?</p>",
        "id": 422710491,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1708552307
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/3254\">lean4#3254</a> merged 5 days ago. Hopefully you can find a <code>nightly-YYYY-MM-DD</code> that postdates that, and for which <code>nightly-testing-YYYY-MM-DD</code> exists on both Std and Mathlib.</p>",
        "id": 422710611,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1708552344
    },
    {
        "content": "<p>If such a date does not exist, please complain. :-)</p>",
        "id": 422710722,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1708552405
    },
    {
        "content": "<p>Mathlib has not been able to keep up recently, unfortunately, so the problem may be there.</p>",
        "id": 422710751,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1708552421
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/Using.20a.20read-only.20lib.2E/near/422710611\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover/lean4/pull/3254\">lean4#3254</a> merged 5 days ago. Hopefully you can find a <code>nightly-YYYY-MM-DD</code> that postdates that, and for which <code>nightly-testing-YYYY-MM-DD</code> exists on both Std and Mathlib.</p>\n</blockquote>\n<p>I'll look at this tomorrow them. The next lab session is in 9 hours with a night in between so I would not want to mess up the setup. After the lab I will have plenty of time to do some tests.</p>",
        "id": 422710858,
        "sender_full_name": "Pierre Boutry",
        "timestamp": 1708552461
    },
    {
        "content": "<p>(But do note that you are well beyond the \"officially supported\" setup here. :-) If you want to use Mathlib with a nightly or pr-testing-release, you're sort of expected to do the patching yourself. :-)</p>",
        "id": 422710900,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1708552482
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/Using.20a.20read-only.20lib.2E/near/422710900\">said</a>:</p>\n<blockquote>\n<p>(But do note that you are well beyond the \"officially supported\" setup here. :-) If you want to use Mathlib with a nightly or pr-testing-release, you're sort of expected to do the patching yourself. :-)</p>\n</blockquote>\n<p>Is there a release to be expected soon with the merge PR btw?</p>",
        "id": 422711120,
        "sender_full_name": "Pierre Boutry",
        "timestamp": 1708552580
    },
    {
        "content": "<p>Releases happen monthly. This patch will land in v4.7.0-rc1, targeted for March 1.</p>",
        "id": 422711321,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1708552692
    },
    {
        "content": "<p>Great :)</p>",
        "id": 422711344,
        "sender_full_name": "Pierre Boutry",
        "timestamp": 1708552706
    },
    {
        "content": "<p>Assuming Mathlib is building against nightlies on the nightly-testing branch at that point, we will try to move Mathlib to that release the same day.</p>",
        "id": 422711377,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1708552725
    },
    {
        "content": "<p>(But that assumption is currently invalid, so ...)</p>",
        "id": 422711397,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1708552737
    },
    {
        "content": "<p>I think the next lab would be on the 14th so maybe there is some hope.</p>",
        "id": 422711571,
        "sender_full_name": "Pierre Boutry",
        "timestamp": 1708552815
    },
    {
        "content": "<p>We'll see what we can do.</p>",
        "id": 422711618,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1708552831
    },
    {
        "content": "<p>I admit I am horrified to discover that someone is using a lean-pr-testing-NNNN branch in a lab with live humans. :-)</p>",
        "id": 422711663,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1708552852
    },
    {
        "content": "<p>Thanks. And no worries. It isn't really problematic. During the first session, I just had some students killing the program once they saw so many warnings and then I had to help those one by one which wasted some time. But I'll warn the ones I'll have tomorrow that it is to be expected hoping it is enough :)</p>",
        "id": 422711948,
        "sender_full_name": "Pierre Boutry",
        "timestamp": 1708552972
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/Using.20a.20read-only.20lib.2E/near/422711663\">said</a>:</p>\n<blockquote>\n<p>I admit I am horrified to discover that someone is using a lean-pr-testing-NNNN branch in a lab with live humans. :-)</p>\n</blockquote>\n<p>When you read the above topic you'll understand. There was no prior way of sharing the mathlib. We have about 200 students so I'd rather avoid having about 1TB of mathlib on the university server :)</p>",
        "id": 422712205,
        "sender_full_name": "Pierre Boutry",
        "timestamp": 1708553072
    },
    {
        "content": "<p>Sorry about this. I very much understand the problem with using shared distributions of Lean libraries, and am looking forward to having this behind us. I didn't mean that you were doing something wrong. The \"horrified\" was more along the lines of worried about what I got myself into by automating the production of the <code>lean-pr-testing-NNNN</code> branches!</p>",
        "id": 422732427,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1708566162
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/Using.20a.20read-only.20lib.2E/near/422710491\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"690050\">Pierre Boutry</span> I don't have time to look at this all now. Could you please try to simplify your setup by using nightlies rather than <code>lean-pr-testing-NNNN</code> branches?</p>\n</blockquote>\n<p>I have now switched to a newer version of lean, i.e. the content for my <code>lean-toolchain</code> is now <code>leanprover/lean4:v4.7.0-rc2</code>, and I still get the same warnings.</p>\n<p>To provide some detail, here is the content of my <code>lakefile.lean</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lake</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lake</span> <span class=\"n\">DSL</span>\n\n<span class=\"n\">package</span> <span class=\"bp\">&lt;</span><span class=\"n\">C2</span><span class=\"bp\">&gt;&lt;</span><span class=\"n\">AB</span><span class=\"bp\">&gt;</span><span class=\"n\">FCR</span><span class=\"bp\">&lt;</span><span class=\"n\">C2</span><span class=\"bp\">&gt;&lt;</span><span class=\"n\">BB</span><span class=\"bp\">&gt;</span> <span class=\"n\">where</span>\n\n<span class=\"n\">require</span> <span class=\"n\">verbose</span>      <span class=\"k\">from</span> <span class=\"s2\">\"/adhome/p/pi/pierre.boutry/test/FCR/verbose-lean4\"</span>\n<span class=\"n\">require</span> <span class=\"n\">mathlib</span>      <span class=\"k\">from</span> <span class=\"s2\">\"/adhome/p/pi/pierre.boutry/test/FCR/verbose-lean4/.lake/packages/mathlib\"</span>\n<span class=\"n\">require</span> <span class=\"n\">std</span>          <span class=\"k\">from</span> <span class=\"s2\">\"/adhome/p/pi/pierre.boutry/test/FCR/verbose-lean4/.lake/packages/std\"</span>\n<span class=\"n\">require</span> <span class=\"n\">Qq</span>           <span class=\"k\">from</span> <span class=\"s2\">\"/adhome/p/pi/pierre.boutry/test/FCR/verbose-lean4/.lake/packages/Qq\"</span>\n<span class=\"n\">require</span> <span class=\"n\">aesop</span>        <span class=\"k\">from</span> <span class=\"s2\">\"/adhome/p/pi/pierre.boutry/test/FCR/verbose-lean4/.lake/packages/aesop\"</span>\n<span class=\"n\">require</span> <span class=\"n\">proofwidgets</span> <span class=\"k\">from</span> <span class=\"s2\">\"/adhome/p/pi/pierre.boutry/test/FCR/verbose-lean4/.lake/packages/proofwidgets\"</span>\n<span class=\"n\">require</span> <span class=\"n\">Cli</span>          <span class=\"k\">from</span> <span class=\"s2\">\"/adhome/p/pi/pierre.boutry/test/FCR/verbose-lean4/.lake/packages/Cli\"</span>\n<span class=\"n\">require</span> <span class=\"n\">importGraph</span>  <span class=\"k\">from</span> <span class=\"s2\">\"/adhome/p/pi/pierre.boutry/test/FCR/verbose-lean4/.lake/packages/importGraph\"</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">default_target</span><span class=\"kd\">]</span>\n<span class=\"n\">lean_lib</span> <span class=\"n\">FCR</span> <span class=\"n\">where</span>\n</code></pre></div>",
        "id": 426539201,
        "sender_full_name": "Pierre Boutry",
        "timestamp": 1710422253
    },
    {
        "content": "<p>A related question is if it it possible to define a variable that would contain the path <code>/adhome/p/pi/pierre.boutry/test/FCR/verbose-lean4</code> in order to avoid the tedious and error prone repetition.</p>",
        "id": 426539564,
        "sender_full_name": "Pierre Boutry",
        "timestamp": 1710422357
    },
    {
        "content": "<p>I don't have any real understanding of what you're actually supposed to be doing here, but let me make the following comment: I also have a project which needs mathlib, aesop, proof widgets, std etc but I don't have anything like this in my <code>lakefile.lean</code> (I just looked): the only thing I have is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">package</span> <span class=\"n\">FLT</span> <span class=\"n\">where</span>\n\n<span class=\"n\">require</span> <span class=\"n\">mathlib</span> <span class=\"k\">from</span> <span class=\"n\">git</span> <span class=\"s2\">\"https://github.com/leanprover-commu</span>\n<span class=\"s2\">nity/mathlib4.git\"</span>\n</code></pre></div>\n<p>and all the other stuff gets pulled in automatically as they're all dependencies of mathlib. My understanding is that doing it this way guarantees that the versions of all the mathlib dependencies are then sorted out by mathlib so I don't get issues with dependency conflicts. Sorry in advance if this is no help to you.</p>",
        "id": 426540770,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1710422741
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/Using.20a.20read-only.20lib.2E/near/426540770\">said</a>:</p>\n<blockquote>\n<p>I don't have any real understanding of what you're actually supposed to be doing here, but let me make the following comment: I also have a project which needs mathlib, aesop, proof widgets, std etc but I don't have anything like this in my <code>lakefile.lean</code> (I just looked): the only thing I have is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">package</span> <span class=\"n\">FLT</span> <span class=\"n\">where</span>\n\n<span class=\"n\">require</span> <span class=\"n\">mathlib</span> <span class=\"k\">from</span> <span class=\"n\">git</span> <span class=\"s2\">\"https://github.com/leanprover-commu</span>\n<span class=\"s2\">nity/mathlib4.git\"</span>\n</code></pre></div>\n<p>and all the other stuff gets pulled in automatically as they're all dependencies of mathlib. My understanding is that doing it this way guarantees that the versions of all the mathlib dependencies are then sorted out by mathlib so I don't get issues with dependency conflicts. Sorry in advance if this is no help to you.</p>\n</blockquote>\n<p>I could drop this lines in another context. But here it is the package for a course. Given that there are more than 200 students following this course and that the mathlib takes up more than 4 GB of disk space, we wanted to share it. This is why I have these lines.</p>",
        "id": 426542061,
        "sender_full_name": "Pierre Boutry",
        "timestamp": 1710423126
    },
    {
        "content": "<p>I have downloaded the dependencies in my homedir and the students use them so as to avoid having more than 800 GB taken on the server.</p>",
        "id": 426542386,
        "sender_full_name": "Pierre Boutry",
        "timestamp": 1710423229
    },
    {
        "content": "<p>But yes I assume I would not have these warnings if I did not have these lines.</p>",
        "id": 426542937,
        "sender_full_name": "Pierre Boutry",
        "timestamp": 1710423370
    },
    {
        "content": "<p>With respect to the shortening, does this work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">root</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"s2\">\"/adhome/p/pi/pierre.boutry/test/FCR/verbose-lean4\"</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">pack</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"s2\">\"/.lake/packages/\"</span>\n\n<span class=\"n\">require</span> <span class=\"n\">verbose</span>      <span class=\"k\">from</span> <span class=\"n\">root</span>\n<span class=\"n\">require</span> <span class=\"n\">mathlib</span>      <span class=\"k\">from</span> <span class=\"n\">root</span> <span class=\"bp\">++</span> <span class=\"n\">pack</span> <span class=\"bp\">++</span> <span class=\"s2\">\"mathlib\"</span>\n<span class=\"n\">require</span> <span class=\"n\">std</span>          <span class=\"k\">from</span> <span class=\"n\">root</span> <span class=\"bp\">++</span> <span class=\"n\">pack</span> <span class=\"bp\">++</span> <span class=\"s2\">\"std\"</span>\n<span class=\"n\">require</span> <span class=\"n\">Qq</span>           <span class=\"k\">from</span> <span class=\"n\">root</span> <span class=\"bp\">++</span> <span class=\"n\">pack</span> <span class=\"bp\">++</span> <span class=\"s2\">\"Qq\"</span>\n<span class=\"n\">require</span> <span class=\"n\">aesop</span>        <span class=\"k\">from</span> <span class=\"n\">root</span> <span class=\"bp\">++</span> <span class=\"n\">pack</span> <span class=\"bp\">++</span> <span class=\"s2\">\"aesop\"</span>\n<span class=\"n\">require</span> <span class=\"n\">proofwidgets</span> <span class=\"k\">from</span> <span class=\"n\">root</span> <span class=\"bp\">++</span> <span class=\"n\">pack</span> <span class=\"bp\">++</span> <span class=\"s2\">\"proofwidgets\"</span>\n<span class=\"n\">require</span> <span class=\"n\">Cli</span>          <span class=\"k\">from</span> <span class=\"n\">root</span> <span class=\"bp\">++</span> <span class=\"n\">pack</span> <span class=\"bp\">++</span> <span class=\"s2\">\"Cli\"</span>\n<span class=\"n\">require</span> <span class=\"n\">importGraph</span>  <span class=\"k\">from</span> <span class=\"n\">root</span> <span class=\"bp\">++</span> <span class=\"n\">pack</span> <span class=\"bp\">++</span> <span class=\"s2\">\"importGraph\"</span>\n</code></pre></div>",
        "id": 426545466,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1710424124
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"690050\">@Pierre Boutry</span>, I'm sorry, I'm not sure what is going on here. Unfortunately this is a situation that is hard to debug remotely.</p>\n<p>Could you try to come up with a minimal example of these warnings?</p>\n<p>e.g. write a script that downloads a dependency into a fixed path, and uses the minimum number of dependencies possible? Or alternatively prepare a git repo that just has the upstream repo committed directly into the repo?</p>\n<p>I think that to get to the bottom of this you're going to need to provide just a few lines that someone can type into a shell on a fresh computer (with elan installed, of course), and observe your problem.</p>",
        "id": 426636504,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710453493
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"690050\">@Pierre Boutry</span>, the warning message you're reporting doesn't come from Lake or Lean itself, but rather from the <code>cache</code> tool provided in Mathlib. (Normally run via <code>lake exe cache get</code>.)</p>\n<p>In your setup, you shouldn't be running <code>cache</code> at all: it's definitely not going to cope with read only directories. (Of course, you may want to run it <em>before</em> moving to the students's perspective, as you'll need to have all the oleans in place for them manually.)</p>",
        "id": 426638136,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710454253
    },
    {
        "content": "<p>You've said above that <code>lake build</code> produced those warnings.</p>",
        "id": 426638162,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710454263
    },
    {
        "content": "<p>That doesn't make sense to me: <code>lake build</code> does not result in <code>lake exe cache get</code> running (one day! :-), so I don't see a code path that could get from <code>lake build</code> to these warnings.</p>",
        "id": 426638217,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710454296
    },
    {
        "content": "<p>Are you in fact running some other command when you see these warnings?</p>",
        "id": 426638237,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710454306
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/270676-lean4/topic/Using.20a.20read-only.20lib.2E/near/426545466\">said</a>:</p>\n<blockquote>\n<p>With respect to the shortening, does this work?</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">root</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"s2\">\"/adhome/p/pi/pierre.boutry/test/FCR/verbose-lean4\"</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">pack</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"s2\">\"/.lake/packages/\"</span>\n\n<span class=\"n\">require</span> <span class=\"n\">verbose</span>      <span class=\"k\">from</span> <span class=\"n\">root</span>\n<span class=\"n\">require</span> <span class=\"n\">mathlib</span>      <span class=\"k\">from</span> <span class=\"n\">root</span> <span class=\"bp\">++</span> <span class=\"n\">pack</span> <span class=\"bp\">++</span> <span class=\"s2\">\"mathlib\"</span>\n<span class=\"n\">require</span> <span class=\"n\">std</span>          <span class=\"k\">from</span> <span class=\"n\">root</span> <span class=\"bp\">++</span> <span class=\"n\">pack</span> <span class=\"bp\">++</span> <span class=\"s2\">\"std\"</span>\n<span class=\"n\">require</span> <span class=\"n\">Qq</span>           <span class=\"k\">from</span> <span class=\"n\">root</span> <span class=\"bp\">++</span> <span class=\"n\">pack</span> <span class=\"bp\">++</span> <span class=\"s2\">\"Qq\"</span>\n<span class=\"n\">require</span> <span class=\"n\">aesop</span>        <span class=\"k\">from</span> <span class=\"n\">root</span> <span class=\"bp\">++</span> <span class=\"n\">pack</span> <span class=\"bp\">++</span> <span class=\"s2\">\"aesop\"</span>\n<span class=\"n\">require</span> <span class=\"n\">proofwidgets</span> <span class=\"k\">from</span> <span class=\"n\">root</span> <span class=\"bp\">++</span> <span class=\"n\">pack</span> <span class=\"bp\">++</span> <span class=\"s2\">\"proofwidgets\"</span>\n<span class=\"n\">require</span> <span class=\"n\">Cli</span>          <span class=\"k\">from</span> <span class=\"n\">root</span> <span class=\"bp\">++</span> <span class=\"n\">pack</span> <span class=\"bp\">++</span> <span class=\"s2\">\"Cli\"</span>\n<span class=\"n\">require</span> <span class=\"n\">importGraph</span>  <span class=\"k\">from</span> <span class=\"n\">root</span> <span class=\"bp\">++</span> <span class=\"n\">pack</span> <span class=\"bp\">++</span> <span class=\"s2\">\"importGraph\"</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thank you it works and does exactly what I had in mind.</p>",
        "id": 426639649,
        "sender_full_name": "Pierre Boutry",
        "timestamp": 1710454983
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"690050\">Pierre Boutry</span> <a href=\"#narrow/stream/270676-lean4/topic/Using.20a.20read-only.20lib.2E/near/426542061\">said</a>:</p>\n<blockquote>\n<p>I could drop this lines in another context. But here it is the package for a course. Given that there are more than 200 students following this course and that the mathlib takes up more than 4 GB of disk space, we wanted to share it. This is why I have these lines.</p>\n</blockquote>\n<p>I'd be curious to hear <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span>'s take on whether this this the right solution; as far I'm aware, your choices are:</p>\n<ul>\n<li>do what you're doing: override the origin of all your transitive dependencies</li>\n<li>modify the lakefile.lean within your local copies of transitive dependencies, to refer to each other</li>\n</ul>",
        "id": 426658926,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710466607
    },
    {
        "content": "<p>I do not say it is the right solution. Just one that fits our needs. I would adapt it if there is a right solution of course.</p>",
        "id": 426694633,
        "sender_full_name": "Pierre Boutry",
        "timestamp": 1710491383
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/Using.20a.20read-only.20lib.2E/near/426636504\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"690050\">Pierre Boutry</span>, I'm sorry, I'm not sure what is going on here. Unfortunately this is a situation that is hard to debug remotely.</p>\n<p>Could you try to come up with a minimal example of these warnings?</p>\n<p>e.g. write a script that downloads a dependency into a fixed path, and uses the minimum number of dependencies possible? Or alternatively prepare a git repo that just has the upstream repo committed directly into the repo?</p>\n<p>I think that to get to the bottom of this you're going to need to provide just a few lines that someone can type into a shell on a fresh computer (with elan installed, of course), and observe your problem.</p>\n</blockquote>\n<p>I will try.</p>",
        "id": 426695206,
        "sender_full_name": "Pierre Boutry",
        "timestamp": 1710491591
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/Using.20a.20read-only.20lib.2E/near/426638136\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"690050\">Pierre Boutry</span>, the warning message you're reporting doesn't come from Lake or Lean itself, but rather from the <code>cache</code> tool provided in Mathlib. (Normally run via <code>lake exe cache get</code>.)</p>\n<p>In your setup, you shouldn't be running <code>cache</code> at all: it's definitely not going to cope with read only directories. (Of course, you may want to run it <em>before</em> moving to the students's perspective, as you'll need to have all the oleans in place for them manually.)</p>\n</blockquote>\n<p>I only run <code>lake exe cache get</code> to get the dependencies for <a href=\"https://github.com/PatrickMassot/verbose-lean4/tree/master\">verbose-lean</a>. And then for the \"package\" that depends on it I simply do <code>lake build</code>.</p>",
        "id": 426695675,
        "sender_full_name": "Pierre Boutry",
        "timestamp": 1710491780
    },
    {
        "content": "<p>Ah, okay. <code>lake exe cache get</code> is not going to work if your lakefile has relative paths: the warnings are not really surprising.</p>",
        "id": 426695846,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710491860
    },
    {
        "content": "<p>You're more or less responsible at this point to put the oleans in the right place.</p>",
        "id": 426695956,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710491896
    },
    {
        "content": "<p>But it sounds like your students won't see any warnings, right? So all is well?</p>",
        "id": 426696012,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710491925
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/Using.20a.20read-only.20lib.2E/near/426695846\">said</a>:</p>\n<blockquote>\n<p>Ah, okay. <code>lake exe cache get</code> is not going to work if your lakefile has relative paths: the warnings are not really surprising.</p>\n</blockquote>\n<p>I do not do <code>lake exe cache get</code> there. Only for verbose-lean. I taught this morning and do so again this afternoon. I'll write a script to replicate the bug afterwards. I believe it will make things clearer.</p>",
        "id": 426724601,
        "sender_full_name": "Pierre Boutry",
        "timestamp": 1710502458
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/Using.20a.20read-only.20lib.2E/near/426696012\">said</a>:</p>\n<blockquote>\n<p>But it sounds like your students won't see any warnings, right? So all is well?</p>\n</blockquote>\n<p>They do. At least it did this morning and the last time I tested. Let's see once I will have sent the script.</p>",
        "id": 426724743,
        "sender_full_name": "Pierre Boutry",
        "timestamp": 1710502517
    },
    {
        "content": "<p>If your students are seeing it, that it means that <code>lake exe cache get</code> is running in their system. That is not going to work.</p>",
        "id": 426724826,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710502554
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#!/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">bash</span>\n\n<span class=\"bp\">#</span> <span class=\"n\">Add</span> <span class=\"n\">the</span> <span class=\"n\">elan</span> <span class=\"n\">bin</span> <span class=\"k\">from</span> <span class=\"n\">my</span> <span class=\"o\">(</span><span class=\"n\">pierre.boutry</span><span class=\"o\">)</span> <span class=\"n\">home</span> <span class=\"n\">to</span> <span class=\"n\">the</span> <span class=\"n\">path</span> <span class=\"n\">of</span> <span class=\"n\">each</span> <span class=\"n\">student</span>\n<span class=\"n\">touch</span> <span class=\"bp\">~/.</span><span class=\"n\">profile</span>\n<span class=\"o\">[</span> <span class=\"bp\">-</span><span class=\"n\">d</span> <span class=\"bp\">~/.</span><span class=\"n\">elan</span> <span class=\"o\">]</span> <span class=\"bp\">||</span> <span class=\"n\">ln</span> <span class=\"bp\">-</span><span class=\"n\">s</span> <span class=\"bp\">/</span><span class=\"n\">adhome</span><span class=\"bp\">/</span><span class=\"n\">p</span><span class=\"bp\">/</span><span class=\"n\">pi</span><span class=\"bp\">/</span><span class=\"n\">pierre.boutry</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span> <span class=\"bp\">~/.</span><span class=\"n\">elan</span>\n<span class=\"n\">grep</span> <span class=\"bp\">-</span><span class=\"n\">q</span> <span class=\"s2\">\"export PATH=</span><span class=\"se\">\\\"</span><span class=\"err\">\\</span><span class=\"s2\">$HOME</span><span class=\"err\">\\</span><span class=\"s2\">/</span><span class=\"err\">\\</span><span class=\"s2\">.elan</span><span class=\"err\">\\</span><span class=\"s2\">/bin:</span><span class=\"err\">\\</span><span class=\"s2\">$PATH</span><span class=\"se\">\\\"</span><span class=\"s2\">\"</span> <span class=\"bp\">~/.</span><span class=\"n\">profile</span> <span class=\"bp\">||</span> <span class=\"n\">echo</span> <span class=\"bp\">'</span><span class=\"kn\">export</span> <span class=\"n\">PATH</span><span class=\"bp\">=</span><span class=\"s2\">\"$HOME/.elan/bin:$PATH\"</span><span class=\"bp\">'</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"bp\">~/.</span><span class=\"n\">profile</span>\n<span class=\"kn\">export</span> <span class=\"n\">PATH</span><span class=\"bp\">=</span><span class=\"s2\">\"$HOME/.elan/bin:$PATH\"</span>\n\n<span class=\"bp\">#</span> <span class=\"n\">Install</span> <span class=\"n\">the</span> <span class=\"n\">Lean4</span> <span class=\"n\">VS</span> <span class=\"n\">Code</span> <span class=\"n\">extension</span> <span class=\"o\">(</span><span class=\"n\">the</span> <span class=\"n\">folder</span> <span class=\"n\">is</span> <span class=\"n\">less</span> <span class=\"n\">than</span> <span class=\"mi\">3</span><span class=\"n\">MB</span> <span class=\"n\">so</span> <span class=\"n\">I</span> <span class=\"n\">think</span> <span class=\"n\">it</span> <span class=\"n\">won't</span> <span class=\"n\">be</span> <span class=\"n\">a</span> <span class=\"n\">problem</span> <span class=\"n\">to</span> <span class=\"n\">not</span> <span class=\"n\">share</span> <span class=\"n\">it</span><span class=\"o\">)</span>\n<span class=\"n\">code</span> <span class=\"c1\">--install-extension leanprover.lean4</span>\n\n<span class=\"bp\">#</span> <span class=\"n\">Copy</span> <span class=\"n\">the</span> <span class=\"n\">skeleton</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">erxercises</span> <span class=\"n\">for</span> <span class=\"n\">the</span> <span class=\"n\">labs</span> <span class=\"n\">to</span> <span class=\"n\">the</span> <span class=\"n\">root</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">home</span> <span class=\"n\">dir</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">students</span> <span class=\"n\">and</span> <span class=\"n\">build</span> <span class=\"n\">the</span> <span class=\"n\">package</span>\n<span class=\"n\">MyCurrentPath</span><span class=\"bp\">=$</span><span class=\"n\">PWD</span>\n<span class=\"n\">mkdir</span> <span class=\"bp\">-</span><span class=\"n\">p</span> <span class=\"bp\">~/</span><span class=\"n\">FCR</span><span class=\"bp\">/</span><span class=\"n\">FCR</span>\n<span class=\"n\">mkdir</span> <span class=\"bp\">-</span><span class=\"n\">p</span> <span class=\"bp\">~/</span><span class=\"n\">FCR</span><span class=\"bp\">/.</span><span class=\"n\">vscode</span>\n<span class=\"n\">cd</span> <span class=\"bp\">~/</span><span class=\"n\">FCR</span>\n<span class=\"n\">cp</span> <span class=\"bp\">/</span><span class=\"n\">adhome</span><span class=\"bp\">/</span><span class=\"n\">p</span><span class=\"bp\">/</span><span class=\"n\">pi</span><span class=\"bp\">/</span><span class=\"n\">pierre.boutry</span><span class=\"bp\">/</span><span class=\"n\">FCR</span><span class=\"bp\">-</span><span class=\"n\">LEAN</span><span class=\"bp\">-</span><span class=\"n\">SETUP</span><span class=\"bp\">/</span><span class=\"n\">FCR</span><span class=\"bp\">/</span><span class=\"n\">FCR.lean</span>       <span class=\"bp\">.</span>\n<span class=\"n\">cp</span> <span class=\"bp\">/</span><span class=\"n\">adhome</span><span class=\"bp\">/</span><span class=\"n\">p</span><span class=\"bp\">/</span><span class=\"n\">pi</span><span class=\"bp\">/</span><span class=\"n\">pierre.boutry</span><span class=\"bp\">/</span><span class=\"n\">FCR</span><span class=\"bp\">-</span><span class=\"n\">LEAN</span><span class=\"bp\">-</span><span class=\"n\">SETUP</span><span class=\"bp\">/</span><span class=\"n\">FCR</span><span class=\"bp\">/</span><span class=\"n\">lakefile.lean</span>  <span class=\"bp\">.</span>\n<span class=\"n\">cp</span> <span class=\"bp\">/</span><span class=\"n\">adhome</span><span class=\"bp\">/</span><span class=\"n\">p</span><span class=\"bp\">/</span><span class=\"n\">pi</span><span class=\"bp\">/</span><span class=\"n\">pierre.boutry</span><span class=\"bp\">/</span><span class=\"n\">FCR</span><span class=\"bp\">-</span><span class=\"n\">LEAN</span><span class=\"bp\">-</span><span class=\"n\">SETUP</span><span class=\"bp\">/</span><span class=\"n\">FCR</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">toolchain</span> <span class=\"bp\">.</span>\n<span class=\"n\">cp</span> <span class=\"bp\">/</span><span class=\"n\">adhome</span><span class=\"bp\">/</span><span class=\"n\">p</span><span class=\"bp\">/</span><span class=\"n\">pi</span><span class=\"bp\">/</span><span class=\"n\">pierre.boutry</span><span class=\"bp\">/</span><span class=\"n\">FCR</span><span class=\"bp\">-</span><span class=\"n\">LEAN</span><span class=\"bp\">-</span><span class=\"n\">SETUP</span><span class=\"bp\">/</span><span class=\"n\">FCR</span><span class=\"bp\">/.</span><span class=\"n\">vscode</span><span class=\"bp\">/</span><span class=\"n\">settings.json</span> <span class=\"bp\">.</span><span class=\"n\">vscode</span><span class=\"bp\">/</span>\n<span class=\"o\">[</span> <span class=\"bp\">-</span><span class=\"n\">f</span> <span class=\"bp\">~/</span><span class=\"n\">FCR</span><span class=\"bp\">/</span><span class=\"n\">FCR</span><span class=\"bp\">/</span><span class=\"n\">TP1.lean</span> <span class=\"o\">]</span> <span class=\"bp\">||</span> <span class=\"n\">cp</span> <span class=\"bp\">/</span><span class=\"n\">adhome</span><span class=\"bp\">/</span><span class=\"n\">p</span><span class=\"bp\">/</span><span class=\"n\">pi</span><span class=\"bp\">/</span><span class=\"n\">pierre.boutry</span><span class=\"bp\">/</span><span class=\"n\">FCR</span><span class=\"bp\">-</span><span class=\"n\">LEAN</span><span class=\"bp\">-</span><span class=\"n\">SETUP</span><span class=\"bp\">/</span><span class=\"n\">FCR</span><span class=\"bp\">/</span><span class=\"n\">FCR</span><span class=\"bp\">/</span><span class=\"n\">TP1.lean</span> <span class=\"n\">FCR</span><span class=\"bp\">/</span>\n<span class=\"o\">[</span> <span class=\"bp\">-</span><span class=\"n\">f</span> <span class=\"bp\">~/</span><span class=\"n\">FCR</span><span class=\"bp\">/</span><span class=\"n\">FCR</span><span class=\"bp\">/</span><span class=\"n\">TP2.lean</span> <span class=\"o\">]</span> <span class=\"bp\">||</span> <span class=\"n\">cp</span> <span class=\"bp\">/</span><span class=\"n\">adhome</span><span class=\"bp\">/</span><span class=\"n\">p</span><span class=\"bp\">/</span><span class=\"n\">pi</span><span class=\"bp\">/</span><span class=\"n\">pierre.boutry</span><span class=\"bp\">/</span><span class=\"n\">FCR</span><span class=\"bp\">-</span><span class=\"n\">LEAN</span><span class=\"bp\">-</span><span class=\"n\">SETUP</span><span class=\"bp\">/</span><span class=\"n\">FCR</span><span class=\"bp\">/</span><span class=\"n\">FCR</span><span class=\"bp\">/</span><span class=\"n\">TP2.lean</span> <span class=\"n\">FCR</span><span class=\"bp\">/</span>\n<span class=\"n\">lake</span> <span class=\"n\">build</span>\n<span class=\"n\">cd</span> <span class=\"bp\">$</span><span class=\"n\">MyCurrentPath</span>\n</code></pre></div>\n<p>This won't allow to reproduce the bug as it is just the script, that I also want to cleanup, that sets things up for them. As you can see there is no <code>lake exe cache get</code> there.</p>",
        "id": 426725167,
        "sender_full_name": "Pierre Boutry",
        "timestamp": 1710502687
    },
    {
        "content": "<p>The warning messages you quoted above are definitely from <code>cache</code>. So the challenge is to work out which step is running it.</p>",
        "id": 426725458,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710502805
    },
    {
        "content": "<p>Locating it should be easy. I can just try to comment out lines and see the minimal number of comments needed to avoid them. Then it will mean that the commented line(s) are the ones triggering <code>lake exe cache get</code>.</p>",
        "id": 426725894,
        "sender_full_name": "Pierre Boutry",
        "timestamp": 1710502983
    },
    {
        "content": "<p>Oh surely it's <code>lake build</code></p>",
        "id": 426727638,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1710503620
    },
    {
        "content": "<p>I am not an expert in the infrastructure so do take this message with a pinch of salt. But my memory is that <code>lake build</code> was changed relatively recently to do <code>lake exe cache get</code> first, because people were complaining that <em>obviously</em> if you want to build your project then you always want to download all relevant oleans first.</p>\n<p>Apologies if this is a red herring.</p>",
        "id": 426727856,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1710503700
    },
    {
        "content": "<p>I don't think that's true, Kevin. I think you remember <code>lake update</code> calling <code>lake exe cache get</code> in projects that depend on mathlib</p>",
        "id": 426734391,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1710506074
    },
    {
        "content": "<p>I think <code>lake build</code> might do a <code>lake update</code> if the manifest is out of date with the lakefile?</p>",
        "id": 426736198,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710506740
    },
    {
        "content": "<p>Aah maybe that's what I'm remembering</p>",
        "id": 426739575,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1710507901
    },
    {
        "content": "<p>There's a flag you can set to tell <code>lake update</code> not to run <code>cache get</code></p>",
        "id": 426748021,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710510679
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/Using.20a.20read-only.20lib.2E/near/426748021\">said</a>:</p>\n<blockquote>\n<p>There's a flag you can set to tell <code>lake update</code> not to run <code>cache get</code></p>\n</blockquote>\n<p>You can set the env variable <code>MATHLIB_NO_CACHE_ON_UPDATE=1</code>, which can be looked up in mathlib's <a href=\"https://github.com/leanprover-community/mathlib4/blob/d7e494414a0bfb3d4df1cb006b2e61aae29ca34e/lakefile.lean#L89C1-L89C65\">lakefile.lean</a></p>\n<p>And <code>lake build</code> warns you about an outdated <code>lake_manifest.json</code>, but I don't think it runs <code>lake update</code>, unless there is no <code>lake_manifest.json</code> at all.<br>\n(which is the case in the script posted above, so yes, here <code>lake build</code> will call the lake post-update-hook which calls <code>lake exe cache get</code>)</p>",
        "id": 426752482,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1710512177
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"385895\">Jon Eugster</span> <a href=\"#narrow/stream/270676-lean4/topic/Using.20a.20read-only.20lib.2E/near/426752482\">said</a>:</p>\n<blockquote>\n<p><code>MATHLIB_NO_CACHE_ON_UPDATE=1</code></p>\n</blockquote>\n<p>Thanks as your mention of fact that an outdated, or in my case missing, <code>lake_manifest.json</code> file leads to warning made me realize I was not copying it to their copy. It seems to do the trick now. I have asked someone else to test to confirm. Thank you :)</p>",
        "id": 426826591,
        "sender_full_name": "Pierre Boutry",
        "timestamp": 1710538957
    }
]