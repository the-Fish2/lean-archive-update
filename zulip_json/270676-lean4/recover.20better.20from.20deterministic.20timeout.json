[
    {
        "content": "<p>I think it would be nice if Lean deals a bit better when it reaches a deterministic timeout. In a typical case my timeout is in the proof of a theorem, and I would like Lean to still treat that declaration as if there was a sorry/other error in the proof<br>\nIn particular:</p>\n<ul>\n<li>It should show mouse-over information over the term that it parsed</li>\n<li>It should add the declaration (with proof sorry'd) to the environment if the type was elaborated successfully</li>\n</ul>",
        "id": 424075990,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1709229190
    },
    {
        "content": "<p>This would be amazing.</p>",
        "id": 424105334,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1709239701
    },
    {
        "content": "<p>RFC please! :-)</p>",
        "id": 424145610,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709257437
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/3554\">lean4#3554</a></p>",
        "id": 424248735,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1709303097
    },
    {
        "content": "<p>Apparently in simple cases Lean already does this, see Leo's comment at <a href=\"https://github.com/leanprover/lean4/pull/3554\">lean4#3554</a>. <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> <span class=\"user-mention\" data-user-id=\"514145\">@Geoffrey Irving</span> if you have an example where Lean doesn't do this yet (preferably minimized), please post it there.</p>",
        "id": 425281664,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1709810467
    },
    {
        "content": "<p>I just tried to recreate the timeout I had in a file where I had it earlier, but I didn't manage to do that quickly.</p>",
        "id": 425281830,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1709810524
    },
    {
        "content": "<p>I came across this behavior again, this time with a different Lean error. I managed to find a MWE for the original issue:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">foo</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">100</span> <span class=\"k\">in</span> <span class=\"c\">/-</span><span class=\"cm\"> note: when we remove this, there is a max recursion depth error,</span>\n<span class=\"cm\">and that also causes bar to not be added to the environment -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"n\">foo</span> <span class=\"mi\">1000</span> <span class=\"bp\">=</span> <span class=\"mi\">1000</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">]</span> <span class=\"c1\">-- (deterministic) timeout</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">bar</span> <span class=\"c1\">-- unknown constant 'bar'</span>\n</code></pre></div>\n<p>The problem seems to be \"if there is an error during elaboration of terms in a tactic, some tactics (like <code>apply</code> and <code>simp</code>) don't tag the term with term info anymore, so that hovers and jump-to-definition don't work anymore.<br>\nI opened this issue as <a href=\"https://github.com/leanprover/lean4/pull/3831\">lean4#3831</a>, but afterwards I realized this is probably caused by the same code as <a href=\"https://github.com/leanprover/lean4/pull/3554\">lean4#3554</a>.</p>",
        "id": 431296175,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1712232135
    }
]