[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- \"simp made no progress\"</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- \"simp made no progress\"</span>\n</code></pre></div>\n<p>I would expect <code>simp</code> to change the first to <code>P ∧ Q</code> and the second to <code>True</code>.<br>\nIf <code>simp</code> does not do that (and similar things), is there a tactic that simplifies a propositional term as far as possible? (<code>tauto</code> does not do it unless the result is <code>True</code>, since it is a finishing tactic.)</p>\n<p>Motivation: in a proof coming up in <a href=\"https://github.com/leanprover-community/mathlib4/pull/9240\">#9240</a>, I have a complicated propositional expression (an equivalence) that <code>tauto</code> does not clear, since for each direction, there is one extra reasoning step that is necessary. It would be nice to be able to produce a simplified version, so that it is easier to focus on the actual content.</p>",
        "id": 409927553,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703524502
    },
    {
        "content": "<p>Does contextual:=true work?</p>",
        "id": 409928540,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1703525602
    },
    {
        "content": "<p>Yes for the second example (as expected, I guess), but no for the first.</p>",
        "id": 409929070,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703526144
    },
    {
        "content": "<p>However, this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">contextual</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">})</span>\n</code></pre></div>\n<p>(<code>simp</code> by itself reduces it to the second example...)</p>",
        "id": 409929158,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703526248
    }
]