[
    {
        "content": "<p>I have a defeq check with meta variable that fails for some reason. It happens inside of a new tactic I'm writing and in any attempt of minimizing it the defeq check passes.</p>\n<p>I'm checking</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Function.invFun</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">g</span>\n</code></pre></div>\n<p>and it fails. I'm expecting that <code>fun x x =&gt; Function.invFun (fun x =&gt; x - s) 0 </code> gets assigned to <code>?g</code></p>\n<p>The trace says</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Function.invFun</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">g</span>\n      <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Function.invFun</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">[</span><span class=\"n\">nonassignable</span><span class=\"o\">]</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">g</span> <span class=\"o\">[</span><span class=\"n\">assignable</span><span class=\"o\">]</span>\n      <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.assign</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"bp\">?</span><span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Function.invFun</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"mi\">0</span>\n        <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.assign.outOfScopeFVar</span><span class=\"o\">]</span> <span class=\"n\">s</span> <span class=\"bp\">@</span> <span class=\"bp\">?</span><span class=\"n\">g</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Function.invFun</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"mi\">0</span>\n        <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.foApprox</span><span class=\"o\">]</span> <span class=\"bp\">?</span><span class=\"n\">g</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Function.invFun</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"mi\">0</span>\n        <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.constApprox</span><span class=\"o\">]</span> <span class=\"bp\">?</span><span class=\"n\">g</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Function.invFun</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"mi\">0</span>\n        <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.assign.outOfScopeFVar</span><span class=\"o\">]</span> <span class=\"n\">s</span> <span class=\"bp\">@</span> <span class=\"bp\">?</span><span class=\"n\">g</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Function.invFun</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>The type of <code>?g</code> and the expression are the same and it is <code>Unit → Unit → R</code></p>\n<p>Any tip on how to debug this? Any trace option I can't turn on to reveal more info? Is there explanation of <code>outOfScopeFVar</code>, <code>foApprox</code> and <code>constApprox</code> traces?</p>",
        "id": 438993695,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1715858193
    },
    {
        "content": "<p>The <code>outOfScopeFVar</code> seems to indicate that an fvar from the potential assignment, so <code>s</code>, is not present in the local context of <code>?g</code>.</p>",
        "id": 439002349,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1715861106
    },
    {
        "content": "<p>That would make sense why it fails. I have to investigate, but <code>s</code> should be in the context of  <code>?g</code>. Maybe I have messed up when creating the mvar.</p>",
        "id": 439003330,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1715861326
    },
    {
        "content": "<p>Indeed <code>s</code> is not in the context of <code>?g</code>. Now I have to figure out why :)</p>",
        "id": 439014742,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1715864348
    }
]