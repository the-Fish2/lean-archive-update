[
    {
        "content": "<p><a href=\"/user_uploads/3121/Gf56-VT_3sHa0Clc0DItxUMG/image.png\">image.png</a><br>\nthere's a natural number game here <a href=\"https://adam.math.hhu.de/#/g/hhu-adam/NNG4/world/AdvAddition/level/6\">https://adam.math.hhu.de/#/g/hhu-adam/NNG4/world/AdvAddition/level/6</a><br>\nsurely the tactic tauto solves the problem, but I feel like it is cheating, how are you supposed to solve this level?</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Gf56-VT_3sHa0Clc0DItxUMG/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/Gf56-VT_3sHa0Clc0DItxUMG/image.png\"></a></div>",
        "id": 399264974,
        "sender_full_name": "Kreijstal",
        "timestamp": 1698659558
    },
    {
        "content": "<p>You might use <code>apply False.elim</code> (which I’m not sure was shown in NNG though) and <code>zero_ne_succ</code> if you want all the intermediate steps I guess</p>",
        "id": 399266658,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1698660039
    },
    {
        "content": "<p>Why's it cheating? The panel on the left suggests using it</p>",
        "id": 399269828,
        "sender_full_name": "Leo Shine",
        "timestamp": 1698661039
    },
    {
        "content": "<p><code>contradiction</code> solved it for me, but I'm also not convinced that that was the way in which we are supposed to solve this level.</p>",
        "id": 399271300,
        "sender_full_name": "David Méndez",
        "timestamp": 1698661523
    },
    {
        "content": "<p>Thank you for this discussion. There are often many ways that you can solve a level and I don't think I have a \"right\" or a \"wrong\" way in my mind when I'm writing worlds, I just have a route through to a solution which uses only tactics which I have introduced so far. I will take a closer look at this thread and see if I can tidy things up, but please bear in mind that right now game development is very active (I have advanced multiplication world ready to go, I am moving where <code>tauto</code> is introduced and encouraging people to use it more) and things are still likely to be shifting around.</p>",
        "id": 399272010,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698661719
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/0CDyFOrI8ubGPfgInvMQzN9L/image.png\">image.png</a><br>\nlike this, lol</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/0CDyFOrI8ubGPfgInvMQzN9L/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/0CDyFOrI8ubGPfgInvMQzN9L/image.png\"></a></div>",
        "id": 399272718,
        "sender_full_name": "Kreijstal",
        "timestamp": 1698661888
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/KbYGtBaQhn58pocpffAH97Hh/image.png\">image.png</a><br>\nyay</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/KbYGtBaQhn58pocpffAH97Hh/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/KbYGtBaQhn58pocpffAH97Hh/image.png\"></a></div>",
        "id": 399281237,
        "sender_full_name": "Kreijstal",
        "timestamp": 1698664947
    },
    {
        "content": "<p>Hiya, I'm working through the natural number game, I'm up to less than equal world level 5:<br>\n<code>theorem le_zero (x : ℕ) (hx : x ≤ 0) : x = 0 := by</code></p>\n<p>The hint says </p>\n<blockquote>\n<p>It's \"intuitively obvious\" that there are no numbers less than zero, but to prove it you will need a result which you showed in advanced addition world.</p>\n</blockquote>\n<p>The theorems from that world are:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"n\">succ</span> <span class=\"n\">n</span>\n<span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n<span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n<span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>I'm a bit stuck on this, can I get another hint? It feels like it's probably referring to the last two but I'm not sure how to start.</p>",
        "id": 405281149,
        "sender_full_name": "James Sully",
        "timestamp": 1701410057
    },
    {
        "content": "<p>from the link <a href=\"#narrow/stream/270676-lean4/topic/Natural.20Number.20Game/near/399264974\">above</a> it seems like level 6 is <code>a + b = 0 -&gt; a = 0</code> which looks like the right lemma to use here</p>",
        "id": 405282166,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701410324
    },
    {
        "content": "<p>how is less-equal defined?</p>",
        "id": 405282370,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701410369
    },
    {
        "content": "<p>a &lt;= b if exists c such that b = a + c</p>",
        "id": 405282615,
        "sender_full_name": "James Sully",
        "timestamp": 1701410414
    },
    {
        "content": "<p>so it introduced me to <code>use</code> in earlier exercises</p>",
        "id": 405282713,
        "sender_full_name": "James Sully",
        "timestamp": 1701410432
    },
    {
        "content": "<p>okay, so you should use that definition to get <code>a + b = 0</code> from the assumption</p>",
        "id": 405282958,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701410475
    },
    {
        "content": "<p>do you know how to unpack an existence assumption? <code>use</code> is for constructing one</p>",
        "id": 405283232,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701410523
    },
    {
        "content": "<p>I'm assuming I use <code>cases</code>?</p>",
        "id": 405283410,
        "sender_full_name": "James Sully",
        "timestamp": 1701410550
    },
    {
        "content": "<p>I'm pretty fuzzy on what it means though</p>",
        "id": 405283442,
        "sender_full_name": "James Sully",
        "timestamp": 1701410558
    },
    {
        "content": "<p>the basic idea is that if you are trying to prove goal <code>P</code> and you have an assumption <code>h</code> that says there exists an x such that <code>Q x</code> holds, then <code>cases h</code> will give you such an <code>x</code> and the fact that <code>Q x</code> holds, and your goal is still to prove <code>P</code></p>",
        "id": 405283821,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701410632
    },
    {
        "content": "<p>the lean server on the website keeps crashing unfortunately</p>",
        "id": 405283849,
        "sender_full_name": "James Sully",
        "timestamp": 1701410638
    },
    {
        "content": "<p>got it, thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cases</span> <span class=\"n\">hx</span> <span class=\"k\">with</span> <span class=\"n\">a</span>\n<span class=\"n\">symm</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n<span class=\"n\">apply</span> <span class=\"n\">eq_zero_of_add_right_eq_zero</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n<span class=\"n\">exact</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 405284646,
        "sender_full_name": "James Sully",
        "timestamp": 1701410909
    },
    {
        "content": "<p>where <code>hx</code> was <code>x &lt;= 0</code></p>",
        "id": 405284704,
        "sender_full_name": "James Sully",
        "timestamp": 1701410946
    },
    {
        "content": "<p>I guess I don't need the <code>with</code>, I had thought that was a required part of the syntax</p>",
        "id": 405284833,
        "sender_full_name": "James Sully",
        "timestamp": 1701411004
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I was thinking of suggesting using induction on <code>n</code>. Is that unadvised?</p>",
        "id": 405287036,
        "sender_full_name": "Mac Malone",
        "timestamp": 1701411986
    },
    {
        "content": "<p>The way this game is structured you generally only have to do one induction per level</p>",
        "id": 405287139,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701412038
    },
    {
        "content": "<p>and you don't need to write your own inductive hypotheses</p>",
        "id": 405287170,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701412053
    },
    {
        "content": "<p>in this case the lemma to prove by induction is <code>a + b = 0 -&gt; a = 0</code> by induction on <code>b</code>, and this was done already in a previous level (which is the reason for the hint)</p>",
        "id": 405287308,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701412102
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> What is the motivation behind avoiding induction? Typing <code>induction x</code> in the level autogenerates the case split for you, so there isn't much overhead there.</p>",
        "id": 405287579,
        "sender_full_name": "Mac Malone",
        "timestamp": 1701412192
    },
    {
        "content": "<p>induction is the \"creative\" step when it comes to these kind of problems</p>",
        "id": 405287744,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701412223
    },
    {
        "content": "<p>so it is helpful to control when it is done when teaching</p>",
        "id": 405287836,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701412252
    },
    {
        "content": "<p>What is a \"creative\" step?</p>",
        "id": 405287940,
        "sender_full_name": "Mac Malone",
        "timestamp": 1701412278
    },
    {
        "content": "<p>It's well known in ATPs that the hardest step when reasoning about inductive types like Nat is coming up with the right inductive hypothesis or loop invariant, everything else is just \"follow your nose\"</p>",
        "id": 405288305,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701412374
    },
    {
        "content": "<p>In this case, you might be tempted to prove <code>a &lt;= 0 -&gt; a = 0</code> by induction on <code>a</code>, but this is the wrong move and you will get stuck</p>",
        "id": 405288405,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701412409
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I did that and it worked. (I passed the level via induction on exactly that).</p>",
        "id": 405288585,
        "sender_full_name": "Mac Malone",
        "timestamp": 1701412459
    },
    {
        "content": "<p>if you have the right other lemmas you can still do it</p>",
        "id": 405288613,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701412472
    },
    {
        "content": "<p>it's true after all</p>",
        "id": 405288644,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701412486
    },
    {
        "content": "<p>so you can never really get stuck when applying <code>induction</code> with the wrong IH, but the induction might not do you any good</p>",
        "id": 405288679,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701412502
    },
    {
        "content": "<p>That's certainly fair and true. In this case, though, induction does help.</p>",
        "id": 405289594,
        "sender_full_name": "Mac Malone",
        "timestamp": 1701412925
    },
    {
        "content": "<p>But I presume your point is that the goal is to avoid cases were it could hurt. However, isn't that true of other theorems as well (i.e., <code>le_trans</code> and the like can be applied ad nauseum to little effect as well if you don't have a plan).</p>",
        "id": 405289981,
        "sender_full_name": "Mac Malone",
        "timestamp": 1701413047
    },
    {
        "content": "<p>not exactly, there is a precise sense in which those are easier from an ATP perspective (and to some extent when hand proving too): you can enumerate all the consequences of what you know until you don't get any new things, and this can handle <code>le_trans</code> reasoning</p>",
        "id": 405290280,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701413154
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I assume this applies when the strategy is strictly to apply one of the possible theorems to the current goal. Because you could continue building infinite <code>have</code> s by <code>le_trans</code>/<code>le_succ</code> from 0 upwards in the Nats (in a manner similar to inducitng up them). (iirc, one of these is forward reasoning and one is backwards reasoning?)</p>",
        "id": 405290993,
        "sender_full_name": "Mac Malone",
        "timestamp": 1701413375
    },
    {
        "content": "<p>I think the trick that makes saturation work is the subformula property: (under some conditions) if there is a proof then there is a proof which only uses subterms of what you already have</p>",
        "id": 405291402,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701413505
    },
    {
        "content": "<p>so you know that just building up big terms doesn't help</p>",
        "id": 405291437,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701413518
    },
    {
        "content": "<p>Ok, now I'm stuck on one that definitely does involve induction:<br>\n<a href=\"https://adam.math.hhu.de/#/g/hhu-adam/NNG4/world/LessOrEqual/level/8\">https://adam.math.hhu.de/#/g/hhu-adam/NNG4/world/LessOrEqual/level/8</a></p>\n<p>Here's what I have so far:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">le_total</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">∨</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n\n<span class=\"n\">induction</span> <span class=\"n\">y</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span>\n<span class=\"c1\">-- base</span>\n<span class=\"n\">right</span>\n<span class=\"n\">exact</span> <span class=\"n\">zero_le</span> <span class=\"n\">x</span>\n\n<span class=\"c1\">-- inductive</span>\n<span class=\"n\">cases</span> <span class=\"n\">hd</span> <span class=\"k\">with</span> <span class=\"n\">x_le_d</span> <span class=\"n\">d_le_x</span>\n<span class=\"c1\">-- x_le_d case</span>\n<span class=\"n\">left</span>\n<span class=\"n\">apply</span> <span class=\"n\">le_trans</span> <span class=\"n\">x</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">x_le_d</span> <span class=\"o\">(</span><span class=\"n\">le_succ_self</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Now my goal is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Current</span> <span class=\"n\">Goal</span>\n<span class=\"n\">Objects</span><span class=\"o\">:</span>\n<span class=\"n\">xd</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">Assumptions</span><span class=\"o\">:</span>\n<span class=\"n\">d_le_x</span><span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span>\n<span class=\"n\">Goal</span><span class=\"o\">:</span>\n<span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">succ</span> <span class=\"n\">d</span> <span class=\"bp\">∨</span> <span class=\"n\">succ</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>but the goal doesn't seem to me to follow from the assumption? It's difficult for me to keep track of what's going on haha</p>",
        "id": 405293214,
        "sender_full_name": "James Sully",
        "timestamp": 1701414253
    },
    {
        "content": "<p>presumably it must and I'm mistaken. But i'm not sure where to go next</p>",
        "id": 405293402,
        "sender_full_name": "James Sully",
        "timestamp": 1701414344
    },
    {
        "content": "<p>Maybe you should have started with <code>induction y with d hd generalizing x</code></p>",
        "id": 405301462,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1701417009
    },
    {
        "content": "<p>hmm, that may be a better approach, but I haven't been introduced to <code>generalizing</code> yet and don't know what it is, and the hint says</p>\n<blockquote>\n<p>Start with <code>induction y with d hd</code>.</p>\n</blockquote>\n<p>So presumably it's not the intended solution</p>",
        "id": 405302514,
        "sender_full_name": "James Sully",
        "timestamp": 1701417311
    },
    {
        "content": "<p>Generalizing won't help you here, I think. Do I not offer some hints with this level? It's one of the hardest ones. How do you get over the line with <code>generalizing</code>? Am I pushing people the wrong way?</p>",
        "id": 405304919,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1701417849
    },
    {
        "content": "<p>My idea was: cases on d_le_x with a and then cases on a</p>",
        "id": 405305206,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1701417968
    },
    {
        "content": "<p>I didn't actually manage to finish it with generalizing either :)</p>",
        "id": 405311011,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1701419660
    },
    {
        "content": "<p>The key for me was realizing how to <code>use</code> numbers to make progress on ≤ goals, then working backwards. Without the usual things accessible, it took a bit to figure out which of the very few tools available were suitable! :P</p>",
        "id": 405311065,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1701419682
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/Natural.20Number.20Game/near/405305206\">said</a>:</p>\n<blockquote>\n<p>My idea was: cases on d_le_x with a and then cases on a</p>\n</blockquote>\n<p>it seems very simple and obvious and mechanical when you put it like that haha. I guess I just lost faith</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">induction</span> <span class=\"n\">y</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span>\n<span class=\"c1\">-- base</span>\n<span class=\"n\">right</span>\n<span class=\"n\">exact</span> <span class=\"n\">zero_le</span> <span class=\"n\">x</span>\n<span class=\"c1\">-- inductive</span>\n<span class=\"n\">cases</span> <span class=\"n\">hd</span> <span class=\"k\">with</span> <span class=\"n\">x_le_d</span> <span class=\"n\">d_le_x</span>\n<span class=\"c1\">-- x_le_d case</span>\n<span class=\"n\">left</span>\n<span class=\"n\">apply</span> <span class=\"n\">le_trans</span> <span class=\"n\">x</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">x_le_d</span> <span class=\"o\">(</span><span class=\"n\">le_succ_self</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n<span class=\"n\">cases</span> <span class=\"n\">d_le_x</span> <span class=\"k\">with</span> <span class=\"n\">a</span>\n<span class=\"n\">cases</span> <span class=\"n\">a</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n<span class=\"n\">left</span>\n<span class=\"n\">exact</span> <span class=\"n\">le_succ_self</span> <span class=\"n\">d</span>\n\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_succ</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">succ_add</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n<span class=\"n\">right</span>\n<span class=\"n\">use</span> <span class=\"n\">a_1</span>\n<span class=\"n\">exact</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 405311129,
        "sender_full_name": "James Sully",
        "timestamp": 1701419705
    },
    {
        "content": "<p>(Btw, <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, typo at the end: \"remarks that with you've\")</p>",
        "id": 405311183,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1701419722
    },
    {
        "content": "<p>thanks for the help!</p>",
        "id": 405311357,
        "sender_full_name": "James Sully",
        "timestamp": 1701419784
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Natural.20Number.20Game/near/405288405\">said</a>:</p>\n<blockquote>\n<p>In this case, you might be tempted to prove <code>a &lt;= 0 -&gt; a = 0</code> by induction on <code>a</code>, but this is the wrong move and you will get stuck</p>\n</blockquote>\n<p>As an FYI, here is how I solved LE world level 5 via induciton:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">le_zero</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n\n<span class=\"n\">induction</span> <span class=\"n\">x</span>\n<span class=\"n\">rfl</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">n_ih</span> <span class=\"bp\">$</span> <span class=\"n\">le_trans</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">le_succ_self</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">hx</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span>\n<span class=\"n\">cases</span> <span class=\"n\">hx</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">add_succ</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n<span class=\"n\">exact</span> <span class=\"n\">False.elim</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">zero_ne_succ</span> <span class=\"n\">_</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>Noting this here in case <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> desires to forbid such an inductive solution.</p>",
        "id": 405315063,
        "sender_full_name": "Mac Malone",
        "timestamp": 1701420901
    },
    {
        "content": "<p>(One worry is that my use of <code>cases</code> on the <code>≤</code> term may be an unintentional leakage of the underlying definition.)</p>",
        "id": 405316667,
        "sender_full_name": "Mac Malone",
        "timestamp": 1701421345
    },
    {
        "content": "<p>Level 4 explicitly teaches using cases like this</p>",
        "id": 405318446,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1701422017
    },
    {
        "content": "<p>I doubt Kevin actually wants to <em>forbid</em> proofs off the beaten track; finding a solution via an unexpected strategy is one of the joys of gaming</p>",
        "id": 405325226,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701424393
    },
    {
        "content": "<p>I finished the game!</p>",
        "id": 405327988,
        "sender_full_name": "James Sully",
        "timestamp": 1701425252
    },
    {
        "content": "<p>that was fun</p>",
        "id": 405328008,
        "sender_full_name": "James Sully",
        "timestamp": 1701425259
    },
    {
        "content": "<p>For one of my goals</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Objects</span><span class=\"o\">:</span>\n<span class=\"n\">abn_1</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">Assumptions</span><span class=\"o\">:</span>\n<span class=\"n\">n_ih</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n_1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">n_1</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">n_1</span>\n<span class=\"n\">Goal</span><span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n_1</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">n_1</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">n_1</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I am tring rw [mul_comm a b^n_1]  but getting the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">rewrite'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">equality</span> <span class=\"n\">or</span> <span class=\"n\">iff</span> <span class=\"n\">proof</span> <span class=\"n\">expected</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.39929</span>\n<span class=\"n\">case</span> <span class=\"n\">succ</span>\n<span class=\"n\">abn_1</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">n_ih</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n_1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">n_1</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">n_1</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n_1</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">n_1</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">n_1</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>can someone please explain the error to me and how to apply mul_comm here?</p>",
        "id": 405328238,
        "sender_full_name": "learnreal",
        "timestamp": 1701425322
    },
    {
        "content": "<p><code>rw [mul_comm a (b^n_1)]</code> should work.</p>",
        "id": 405329036,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1701425531
    },
    {
        "content": "<p>You're not the first person who has run into this and I don't know what to do about it :-/</p>",
        "id": 405355142,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1701434690
    },
    {
        "content": "<p>Explicitly add example in documenttion? May be it's there but I missed it!</p>",
        "id": 405359517,
        "sender_full_name": "learnreal",
        "timestamp": 1701436074
    },
    {
        "content": "<p>Maybe we could add a custom elaborator that would catch equalities raised to the power of something and then throw a sensible error message?</p>",
        "id": 406920539,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1702117847
    },
    {
        "content": "<p>Hi,</p>\n<p>I just came across Lean and wanted to start practising it by means of the Natural Number Game. However, I am stuck at:<br>\nWorld: Addition World, level 2/5, step case of the induction<br>\n<a href=\"/user_uploads/3121/WyINygCQbUihsU7yUR7DTWuk/image.png\">image.png</a><br>\nI've tried numerous approaches, but cannot figure out how to reach the solution.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/WyINygCQbUihsU7yUR7DTWuk/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/WyINygCQbUihsU7yUR7DTWuk/image.png\"></a></div><p>Does anyone have a hint/tip to get me in the right direction?</p>\n<p>Thanks.</p>",
        "id": 410548724,
        "sender_full_name": "Paul Söntgerath",
        "timestamp": 1703945848
    },
    {
        "content": "<p>Managed to figure it out myself.</p>",
        "id": 410550238,
        "sender_full_name": "Paul Söntgerath",
        "timestamp": 1703947426
    },
    {
        "content": "<p>The game appears to be broken right now; a css and a js file are not transmitted correctly. The error is a content mismatch (partial content) error.</p>\n<p>Looking at the server's response for <a href=\"https://adam.math.hhu.de/assets/index-c6c07006.js\">https://adam.math.hhu.de/assets/index-c6c07006.js</a>, it promises us <code>Content-Length: 5909974</code> (around 6 MB) but the response is only about 100 kB long.</p>",
        "id": 412851507,
        "sender_full_name": "Joscha Mennicken",
        "timestamp": 1705271177
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"385895\">@Jon Eugster</span> <span class=\"user-mention\" data-user-id=\"129120\">@Alexander Bentkamp</span> could this be related to Dan Velleman's DM reporting the error \"<code>tmp/djvelleman_stg4_1168333537/game.zip: write error (disk full?). Continue? (y/n/^C)</code>\"?</p>",
        "id": 412853074,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705272749
    },
    {
        "content": "<p>might be, Ill have a look today</p>",
        "id": 412901305,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1705304862
    },
    {
        "content": "<p>I can't reproduce this today. <span class=\"user-mention\" data-user-id=\"421885\">@Joscha Mennicken</span> if you still experience problems could you open an issue <a href=\"https://github.com/leanprover-community/lean4game/issues\">here on the repo</a> or DM me more details, please :)</p>",
        "id": 412914909,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1705310425
    },
    {
        "content": "<p>The website was not working yesterday, for sure.</p>",
        "id": 412915022,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705310480
    },
    {
        "content": "<p>I see, the server is 97% full. So probably one of the scripts just freed up some space again this morning <span aria-label=\"light bulb\" class=\"emoji emoji-1f4a1\" role=\"img\" title=\"light bulb\">:light_bulb:</span></p>",
        "id": 412915495,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1705310663
    },
    {
        "content": "<p>Hi, I'm somehow stuck on Advanced Addition World level 5. I tried:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cases</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">d</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_zero</span><span class=\"o\">]</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span>\n<span class=\"n\">exact</span> <span class=\"n\">h</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_succ</span><span class=\"o\">]</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>And now I'm trying to do <code>apply (succ_ne_zero (a+d))</code> - but I just get <code>unknown identifier 'succ_ne_zero'</code> - is that a bug?</p>",
        "id": 417396952,
        "sender_full_name": "Tainnor",
        "timestamp": 1705999744
    },
    {
        "content": "<p>Yeah, that's odd. As far as I can tell this should work</p>",
        "id": 417398611,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706000360
    },
    {
        "content": "<p>To unblock you, it seems to be possible to do <code>symm at h</code> and use <code>zero_ne_succ</code> instead</p>",
        "id": 417398848,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706000431
    },
    {
        "content": "<p>There's definitely a point in the game when you only have one of these, not the other.</p>",
        "id": 417399191,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706000548
    },
    {
        "content": "<p>Yeah but on the right panel, I see both</p>",
        "id": 417399589,
        "sender_full_name": "Tainnor",
        "timestamp": 1706000695
    },
    {
        "content": "<p>^ that is what made me think it should be available</p>",
        "id": 417400505,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706001053
    },
    {
        "content": "<p>It looks like this to me: <a href=\"/user_uploads/3121/G8HDhV6Dv7IwSMuW-bGky9Ye/AdvAdditionLvl5.png\">AdvAdditionLvl5.png</a>. Does it depend on what other levels you've finished?</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/G8HDhV6Dv7IwSMuW-bGky9Ye/AdvAdditionLvl5.png\" title=\"AdvAdditionLvl5.png\"><img src=\"/user_uploads/3121/G8HDhV6Dv7IwSMuW-bGky9Ye/AdvAdditionLvl5.png\"></a></div>",
        "id": 417400904,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1706001188
    },
    {
        "content": "<p>it's possible since I did algorithm world first</p>",
        "id": 417401553,
        "sender_full_name": "Tainnor",
        "timestamp": 1706001421
    },
    {
        "content": "<p>Indeed: on my computer (Linux) using Chrome, when I use <code>none</code> as rules, I have all names in black, but using the other settings for the rules, there are some shaded lemmas.</p>",
        "id": 417401660,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706001458
    },
    {
        "content": "<p>it works with symm though - thanks <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span></p>",
        "id": 417401831,
        "sender_full_name": "Tainnor",
        "timestamp": 1706001504
    },
    {
        "content": "<p>Tactics stay available if you unlocked them in a different world. That's a decision that has been made to allow leave worlds that introduce high level tactics. E.g. the old NNG3 introduced <code>simp</code> somewhere out there, and it would completely optional to use in the rest of the game.</p>\n<p><code>succ_ne_zero</code> seems indeed not to be available yet. I understand why the error message is there, but it would be better if it said \"not unlocked\" instead of \"unknown identifier\". I'll add this as an issue to be improved<span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 417407951,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1706003515
    },
    {
        "content": "<p>If the user chooses to do Algorithm World (which includes <code>succ_ne_zero</code> in <a href=\"https://adam.math.hhu.de/#/g/leanprover-community/nng4/world/Algorithm/level/6\">level 6</a>) before Advanced Addition World (which the map certainly allows them to do), should they be allowed to access <code>succ_ne_zero</code> in Advanced Addition World?</p>",
        "id": 417434440,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706012554
    },
    {
        "content": "<p>Yes, I think typically users should be allowed everything they have learned. Maybe you can import succ ne zero in advanced addition world?</p>",
        "id": 417439601,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1706014496
    },
    {
        "content": "<p>But would that make algorithm world a prerequisite for advanced addition world?</p>",
        "id": 417450614,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706018172
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/Natural.20Number.20Game/near/417450614\">said</a>:</p>\n<blockquote>\n<p>But would that make algorithm world a prerequisite for advanced addition world?</p>\n</blockquote>\n<p>No, only if you use anything in your sample proofs. That's the only thing which determines the drawn dependencies between worlds. I think that part is not fully flechted out. For tactics it's clear: you are expected to import all tactics in all levels (i.e. in some preliminaries/metadata file, so that the only restriction to using tactics is the game disallowing some.</p>\n<p>For theorems that does not work. If lemmas depend on each other, they simply cannot be available yet because they cannot be imported in the lean file. For your situation, importing adv. multiplication world works but in general I think there are always situations where the game would allow a theorem, but it's not imported in the underlying lean file <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> so that might need to be fixed.</p>",
        "id": 417451526,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1706018427
    },
    {
        "content": "<p>I'll try this later today -- thanks!</p>",
        "id": 417451675,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706018474
    },
    {
        "content": "<p>I've had it happen multiple times that the game just replies with \"oops!\" - that makes it a bit hard to understand what one has done wrong</p>",
        "id": 417507012,
        "sender_full_name": "Tainnor",
        "timestamp": 1706035337
    },
    {
        "content": "<p>ha ha, that's <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> 's fault :-) His preliminary version of <code>apply ... at</code> had that in, and it wasn't in actual mathlib at that time so I went with his version. Now <code>apply ... at</code> is in mathlib so we should bump mathlib and fix this. Thanks!</p>",
        "id": 417507504,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706035524
    },
    {
        "content": "<p>Oops!</p>",
        "id": 417507701,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1706035585
    },
    {
        "content": "<p>It means \"you used <code>apply ... at</code> in an invalid way\" btw :-)</p>",
        "id": 417507790,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706035622
    },
    {
        "content": "<p>thanks for the explanation! I'm currently unsure, what I'm doing wrong here (inequality world, level 10):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cases</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"n\">x'</span> <span class=\"n\">hx'</span>\n<span class=\"n\">left</span>\n<span class=\"n\">rfl</span>\n<span class=\"n\">cases</span> <span class=\"n\">x'</span> <span class=\"k\">with</span> <span class=\"n\">x''</span> <span class=\"n\">hx''</span>\n<span class=\"n\">right</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">one_eq_succ_zero</span><span class=\"o\">]</span>\n<span class=\"n\">rfl</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">one_eq_succ_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span>\n<span class=\"n\">apply</span> <span class=\"n\">succ_le_succ</span> <span class=\"n\">at</span> <span class=\"n\">hx</span>\n<span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span> <span class=\"n\">at</span> <span class=\"n\">hx</span>\n<span class=\"n\">apply</span> <span class=\"n\">zero_le</span> <span class=\"n\">at</span> <span class=\"n\">hx</span>\n</code></pre></div>\n<p>that last line is an \"oops\" :)</p>",
        "id": 417508395,
        "sender_full_name": "Tainnor",
        "timestamp": 1706035832
    },
    {
        "content": "<p>just before <code>apply zero_le at hx</code>, the type of <code>hx</code> is <code>0 ≤ succ x'' → succ x'' = 0</code>. What do you expect <code>apply zero_le at hx</code> to do in this case?</p>",
        "id": 417509145,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1706036081
    },
    {
        "content": "<p>zero_le would prove <code>0 &lt;= succ x''</code>, no? So I would have thought that just gives me <code>succ x'' = 0</code></p>",
        "id": 417509417,
        "sender_full_name": "Tainnor",
        "timestamp": 1706036169
    },
    {
        "content": "<p>ok, indeed <code>apply .. at ..</code> is not set up to handle such use cases. Do you know about the <code>specialize</code> tactic? Is that available in the NNG (I honestly don't know!)?</p>",
        "id": 417509640,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1706036262
    },
    {
        "content": "<p>ah I don't think it's available</p>",
        "id": 417509741,
        "sender_full_name": "Tainnor",
        "timestamp": 1706036290
    },
    {
        "content": "<p>I guess I'll have to find another way then</p>",
        "id": 417509771,
        "sender_full_name": "Tainnor",
        "timestamp": 1706036305
    },
    {
        "content": "<p>For those who are familiar with coq's <code>apply .. at ..</code> tactic: is that something that one is able to do in coq?</p>",
        "id": 417509919,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1706036368
    },
    {
        "content": "<p>OK: <code>apply ... at</code> is now oops-free on <code>main</code>; but I have not managed to fix the succ_ne_zero issue <span class=\"user-mention\" data-user-id=\"129120\">@Alexander Bentkamp</span> . Do you expect the following error if I'm playing on \"regular\" rules?</p>\n<p><a href=\"/user_uploads/3121/P_ifTptUakMYQhZPLdtrCa8n/succ_ne_zero.png\">succ_ne_zero.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/P_ifTptUakMYQhZPLdtrCa8n/succ_ne_zero.png\" title=\"succ_ne_zero.png\"><img src=\"/user_uploads/3121/P_ifTptUakMYQhZPLdtrCa8n/succ_ne_zero.png\"></a></div><p>I imported all of algorithm world into level 1 of advanced addition world, compiled locally, cleared my save, I then speedran the game up to doing all of algorithm world and then started on advanced addition world and it wouldn't let me use succ_ne_zero even though I'd unlocked it.</p>",
        "id": 417531149,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706045040
    },
    {
        "content": "<p>I didn't expect it when I wrote to you earlier today, but after speaking to <span class=\"user-mention\" data-user-id=\"385895\">@Jon Eugster</span> , yes, that is the current behavior. Certainly not ideal. We have discussed a better solution today and I beliebe Jon will implement it.</p>",
        "id": 417531993,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1706045347
    },
    {
        "content": "<p>Well, on the plus side the latest new world -- advanced multiplication world -- is now live! Much bigger than the original NNG3 advanced multiplication world, it also contains some of the basic things you'll need for the forthcoming divisibility world :-)</p>",
        "id": 417533409,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706045915
    },
    {
        "content": "<p>In level 6 of Advanced Multiplication World, it says \"you can type ≠ with e\" - is that a mistake? Or am I misunderstanding the instruction?</p>",
        "id": 417637213,
        "sender_full_name": "Tainnor",
        "timestamp": 1706100241
    },
    {
        "content": "<p>I guess it should say \"with \\ne\"? Thinking of it, I'm wondering if somehow that \"\\n\" got parsed as a newline somewhere :D</p>",
        "id": 417637455,
        "sender_full_name": "Tainnor",
        "timestamp": 1706100320
    },
    {
        "content": "<p>lol yes I'm sure you're right :-) Thanks!</p>",
        "id": 417653995,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706105728
    },
    {
        "content": "<p>Thanks for being a beta tester for Advanced Multiplication World!</p>",
        "id": 417654055,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706105743
    },
    {
        "content": "<p>I fixed the problem locally, pushed, didn't wait for it to compile, attempted to update the server, and now I think I've broken the game completely, but if it's any consolation, it's working fine for me with <code>\\ne</code> so if you're in London then feel free to pop into my office.</p>",
        "id": 417656167,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706106398
    },
    {
        "content": "<p>OK, should be fixed on the server now! Thanks!</p>",
        "id": 417658315,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706107023
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/Natural.20Number.20Game/near/417654055\">said</a>:</p>\n<blockquote>\n<p>Thanks for being a beta tester for Advanced Multiplication World!</p>\n</blockquote>\n<p>Thanks for making this project available. :)</p>",
        "id": 417660691,
        "sender_full_name": "Tainnor",
        "timestamp": 1706107759
    },
    {
        "content": "<p>I just wrote the Lean code -- there's a whole bunch of other people that did the \"making it available\" part :-) (Patrick Massot, Mohammad Pedramfar, Jon Eugster, Alex Bentkamp)</p>",
        "id": 417666425,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706109332
    },
    {
        "content": "<p>Thanks to all of you</p>",
        "id": 417714122,
        "sender_full_name": "Tainnor",
        "timestamp": 1706124965
    },
    {
        "content": "<p>Maybe one day I'll become a Lean wizard and can contribute something back :)</p>",
        "id": 417714288,
        "sender_full_name": "Tainnor",
        "timestamp": 1706125035
    },
    {
        "content": "<p>world 9 of Advanced Multiplication World doesn't appear to work. It tells me to use <code>induction b with d hd generalizing c</code> but when I try that it replies with <code>You have not unlocked the tactic 'generalizing' yet!</code></p>",
        "id": 417968089,
        "sender_full_name": "Tainnor",
        "timestamp": 1706132330
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"385895\">@Jon Eugster</span> <span class=\"user-mention\" data-user-id=\"129120\">@Alexander Bentkamp</span> any idea what to do about this? Note that <code>main</code> has moved on from the commit which I deployed, which was almost certainly <code>2cbb347</code>, and indeed when I compile this commit I get (a ton of deprecation warnings, now fixed on main +) the warning</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>./././Game.lean:113:0: warning: No world introducing generalizing, but required by AdvMultiplication\n</code></pre></div>\n<p>But <code>generalizing</code> isn't a tactic :-( (and it's not complaining that <code>at</code> isn't introduced, even though <code>apply ... at ...</code> is a thing...). Note that the \"model answer\" for that level in the repo starts with <code>induction b with d hd generalizing c</code>. To verify the bug report above I suspect I'd have to play through a load more of the game and right now I don't have time (I'm packing to leave for Italy tomorrow). <span class=\"user-mention\" data-user-id=\"685366\">@Tainnor</span> I suspect that one fix might be to go back to the overworld and select \"none\" for rules -- this seems to work for me on the online version of the game.</p>\n<p>Slightly off-topic remark: after removing all the deprecated commands and compiling I now get the even worse</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>stdout:\n./././Game.lean:113:0: warning: No world introducing induction, but required by LessOrEqual\n./././Game.lean:113:0: warning: No world introducing induction, but required by AdvMultiplication\n./././Game.lean:113:0: warning: No world introducing generalizing, but required by AdvMultiplication\n./././Game.lean:113:0: warning: No world introducing induction, but required by Multiplication\n./././Game.lean:113:0: warning: No world introducing induction, but required by AdvAddition\n./././Game.lean:113:0: warning: No world introducing induction, but required by Addition\n./././Game.lean:113:0: warning: No world introducing induction, but required by Power\n</code></pre></div>\n<p>so goodness knows what I've screwed up here...</p>",
        "id": 417980390,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706138294
    },
    {
        "content": "<p>We have a list of keywords that dont count as tactics. Apparently generalizing is not on it yet?</p>",
        "id": 418065391,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1706184377
    },
    {
        "content": "<p>[\"with\", \"fun\", \"at\", \"only\", \"by\", \"to\"]</p>",
        "id": 418065618,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1706184474
    },
    {
        "content": "<p>Setting \"none\" for the rules works. <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 418083167,
        "sender_full_name": "Tainnor",
        "timestamp": 1706190605
    },
    {
        "content": "<p>You can switch it off after you've done the level :-) Perhaps the proof will stop working if you revisit the level, but to be honest I slightly reorganised one or two earlier levels when I added advanced multiplication world so your history is probably a bit broken anyway :-/ Thanks for beta testing the game! I played through it all but I was on \"none\" so I missed this issue.</p>",
        "id": 418084776,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706191077
    },
    {
        "content": "<p>neat - I'm done with this world now too</p>",
        "id": 418092537,
        "sender_full_name": "Tainnor",
        "timestamp": 1706193331
    },
    {
        "content": "<p>OK I'll try and get divisibility world up and running :-)</p>",
        "id": 418097118,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706194572
    },
    {
        "content": "<p>no rush, playing through Set Theory Game right now</p>",
        "id": 418130488,
        "sender_full_name": "Tainnor",
        "timestamp": 1706203989
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">#mil</a> is another good thing to do next btw</p>",
        "id": 418140485,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706207376
    },
    {
        "content": "<p>yeah, I also started looking at that</p>",
        "id": 418140945,
        "sender_full_name": "Tainnor",
        "timestamp": 1706207532
    },
    {
        "content": "<p>my hope is that I'll learn enough so I can prove some theorems in my complex analysis text</p>",
        "id": 418140986,
        "sender_full_name": "Tainnor",
        "timestamp": 1706207549
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129120\">Alexander Bentkamp</span> <a href=\"#narrow/stream/270676-lean4/topic/Natural.20Number.20Game/near/418065391\">said</a>:</p>\n<blockquote>\n<p>We have a list of keywords that dont count as tactics. Apparently generalizing is not on it yet?</p>\n</blockquote>\n<p>I think it is fixed on the <code>dev</code> branch already and will be fixed for nng once the game updates to the next lean release.</p>",
        "id": 418181196,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1706225309
    },
    {
        "content": "<p>I have a concern about Algorithm World level 5. It purports to show that <code>succ_inj</code> is a theorem and not an axiom.</p>\n<p>But I don't see how the <code>pred</code> function can be defined at all without first postulating <code>succ_inj</code>. Suppose there were a natural number, <code>0'</code>, which was not equal to 7 but the successor of which was 8. In that case, the definition of pred would tell us that <code>pred (succ 7) = 7</code>, and it would also tell us that <code>pred (succ 0') = 0'</code>. But since <code>succ 7 = 8</code> and <code>succ 0' = 8</code>, but <code>0' ≠ 7</code>, this is a contradiction.</p>\n<p>The Peano axiom that assures us that this contradiction cannot arise is <code>succ_inj</code>.</p>\n<p>Am I missing something?</p>",
        "id": 418398660,
        "sender_full_name": "Michael",
        "timestamp": 1706342615
    },
    {
        "content": "<p>I guess the induction axiom could also provide this assurance?</p>",
        "id": 418398921,
        "sender_full_name": "Michael",
        "timestamp": 1706342887
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"686884\">@Michael</span> Lean does not use Peano Arithmetic as its foundation. It uses the Calculus of Inductive Constructions, which when specialized to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Nat</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span>\n</code></pre></div>\n<p>gives something surprisingly close to the peano axioms, but not quite. Specifically, we get five things:</p>\n<ol>\n<li><code>Nat : Type</code></li>\n<li><code>zero : Nat</code></li>\n<li><code>succ : Nat -&gt; Nat</code></li>\n<li><code>Nat.rec : {motive : Nat → Sort u} → motive zero → ((n : Nat) → motive n → motive (succ n)) → (t : Nat) → motive t</code></li>\n<li>\n<p>computation rules:</p>\n<ul>\n<li><code>Nat.rec z s zero = z</code></li>\n<li><code>Nat.rec z s (succ n) = s n (Nat.rec z s n)</code></li>\n</ul>\n</li>\n</ol>\n<p>If you squint, you might recognize <code>Nat.rec</code> as a variation on the peano induction axiom. But there is a twist, which is that <code>motive</code> can produce values in an arbitrary <code>Sort u</code>. If it is a <code>Prop</code> then this is induction, but if it is a <code>Type</code> then this is actually definition by recursion, which in PA is a derived principle; here it is primitive.</p>\n<p>So the short answer to your question is that <code>pred</code> comes directly out of the ability to define functions by recursion on <code>Nat</code>, and with a <a href=\"https://xenaproject.wordpress.com/2018/03/24/no-confusion-over-no_confusion/\">very clever choice of recursive definition</a> you can use this to prove <code>succ_inj</code> and <code>succ_ne_zero</code>.</p>",
        "id": 418399515,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706343585
    },
    {
        "content": "<p>This question comes up a lot, especially from people who have been indoctrinated by Peano's version of the axioms. As Mario says, the point is that the principle of recursion says that you are allowed to define a function by saying what it does on <code>0</code> and on <code>succ n</code>, so you're allowed to define <code>pred</code>, and you're just discovering the real power of this principle -- it has nontrivial consequences.</p>",
        "id": 418402490,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706346822
    },
    {
        "content": "<p>It's not obvious to me that this is coming from \"the principle of recursion\", but to be fair I don't see a statement of that to compare to.</p>\n<p>There seems to be an implicit statement, I guess in the Calculus of Inductive Constructions, that when we define the inductive type Nat, the construction rule <code>succ</code> must produce a value that didn't otherwise exist. (If the only natural number were zero, that would violate the axiom that zero is not the successor of any number, but it would not appear to conflict with the definition</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Nat</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span>\n</code></pre></div>\n<p>; it would just imply that the successor of zero was also zero.)</p>\n<p>Suppose I want to define a subset of the natural numbers this way:</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mn>5</mn><mo>∈</mo><mi>S</mi><mspace linebreak=\"newline\"></mspace><mi>n</mi><mo>∈</mo><mi>S</mi><mo>→</mo><mi>n</mi><mo>+</mo><mn>2</mn><mo>∈</mo><mi>S</mi><mspace linebreak=\"newline\"></mspace><mi>n</mi><mo>∈</mo><mi>S</mi><mo>→</mo><mi>n</mi><mo>+</mo><mn>3</mn><mo>∈</mo><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">5 \\in S \\\\\nn \\in S \\to n + 2 \\in S \\\\\nn \\in S \\to n + 3 \\in S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6835em;vertical-align:-0.0391em;\"></span><span class=\"mord\">5</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6835em;vertical-align:-0.0391em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6835em;vertical-align:-0.0391em;\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span></span></p>\n<p>I take it that if I were to make this an inductive type:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">my_subset</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">five</span> <span class=\"o\">:</span> <span class=\"n\">my_subset</span>\n<span class=\"bp\">|</span> <span class=\"n\">two_plus</span> <span class=\"o\">:</span> <span class=\"n\">my_subset</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">my_subset</span>\n<span class=\"bp\">|</span> <span class=\"n\">three_plus</span> <span class=\"o\">:</span> <span class=\"n\">my_subset</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">my_subset</span>\n</code></pre></div>\n<p>there would be an implicit assumption that <code>two_plus (two_plus (two_plus five))</code> is a different object than <code>three_plus (three_plus five)</code>?</p>\n<p>I see a minor emphasis in <a href=\"https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html\">https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html</a> on the assumption that, when a type is defined inductively, the listed constructors are the only way to produce an object of the type, but I don't see a mention of the assumption that an object produced by a given series of constructors is necessarily distinct from an object produced by a different series of constructors.</p>",
        "id": 418411723,
        "sender_full_name": "Michael",
        "timestamp": 1706356134
    },
    {
        "content": "<p>That's because you can prove this fact using the recursor, as explained in <a href=\"https://xenaproject.wordpress.com/2018/03/24/no-confusion-over-no_confusion/\">https://xenaproject.wordpress.com/2018/03/24/no-confusion-over-no_confusion/</a> (that's the very clever choice of recursive definition Mario mentioned)</p>",
        "id": 418412073,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1706356421
    },
    {
        "content": "<p>But this is not actually a fact. 2 + 2 + 2 + 5 is in fact equal to 3 + 3 + 5. The inductively defined set is still valid even though it's possible for most elements to be constructed in more than one way.</p>",
        "id": 418412206,
        "sender_full_name": "Michael",
        "timestamp": 1706356543
    },
    {
        "content": "<p>But the only connection between <code>b (b (b a))</code> and <code>2 + 2 + 2 + 5</code> are the names you picked for the constructors. You'd have to take quotients to assign arithmetic meaning to equality for your inductive type.</p>",
        "id": 418412444,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1706356781
    },
    {
        "content": "<p>But until a meaning is assigned, we can't say that the objects are or aren't different. That includes not being able to say that they are different.</p>",
        "id": 418412537,
        "sender_full_name": "Michael",
        "timestamp": 1706356841
    },
    {
        "content": "<p>Are you saying you want a system where equality depends on the names of the constructors you pick? I'm not sure other people would prefer that.</p>",
        "id": 418412640,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1706356933
    },
    {
        "content": "<p>You don't \"assign meaning\" to constructors for an inductive type (for the purposes of verifying equality), they're just constructors</p>",
        "id": 418412688,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1706356987
    },
    {
        "content": "<p>I am saying that when you don't know whether two expressions are equal, it doesn't make sense to state that they aren't.</p>",
        "id": 418412700,
        "sender_full_name": "Michael",
        "timestamp": 1706357006
    },
    {
        "content": "<p>But looping back around, if part of the definition of the <code>inductive</code> keyword is that all related constructors are injective, it's not much of a theorem to show that an <code>inductive</code> constructor is injective.</p>",
        "id": 418412781,
        "sender_full_name": "Michael",
        "timestamp": 1706357074
    },
    {
        "content": "<p>As far as \"you don't 'assign meaning' to constructors\", I feel like it's pretty common to define sets in just this manner, by including certain elements explicitly and others by saying that the set is closed under certain operations. And an inductive type looks to me like it is meant to reflect that concept?</p>",
        "id": 418412928,
        "sender_full_name": "Michael",
        "timestamp": 1706357198
    },
    {
        "content": "<p>Mario listed the axioms related to the <code>inductive</code> keyword, and injectivity is not one of the axioms since it follows from <code>Nat.rec</code> using the \"no confusion\" trick. If you don't like Kevin's blog post, there's also the nice paper of McBride where the term originated (see section 7): <a href=\"https://personal.cis.strath.ac.uk/conor.mcbride/PolyTest.pdf\">https://personal.cis.strath.ac.uk/conor.mcbride/PolyTest.pdf</a></p>",
        "id": 418413053,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1706357294
    },
    {
        "content": "<p>(actually, I'm not sure the term originated there, but that's where I know it from)</p>",
        "id": 418413145,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1706357395
    },
    {
        "content": "<p>But, yes, if it didn't follow from the axioms, injectivity would probably be added as a separate axiom. I think I understand where you're coming from, because inductively defined subsets are very common in computer science and mathematics. But the <code>inductive</code> keyword is not quite that; it is defining a new type, not a subset with certain properties. </p>\n<p>I guess in HoTT you'd be able to express the desired equivalences as part of the definition? I know nothing about HoTT.</p>",
        "id": 418413373,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1706357612
    },
    {
        "content": "<p>I didn't actually know that injectivity of constructors could be proven, I had assumed that it would have been an axiom. I'm somewhat familiar with ML type languages like Haskell and Idris where data constructors are injective by nature</p>",
        "id": 418416155,
        "sender_full_name": "Tainnor",
        "timestamp": 1706360493
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"325367\">Mauricio Collares</span> <a href=\"#narrow/stream/270676-lean4/topic/Natural.20Number.20Game/near/418412073\">said</a>:</p>\n<blockquote>\n<p>That's because you can prove this fact using the recursor, as explained in <a href=\"https://xenaproject.wordpress.com/2018/03/24/no-confusion-over-no_confusion/\">https://xenaproject.wordpress.com/2018/03/24/no-confusion-over-no_confusion/</a> (that's the very clever choice of recursive definition Mario mentioned)</p>\n</blockquote>\n<p>Hmm, but that definition of <code>mytype_equal'</code> only makes sense if we assume constructors to be disjoint. If we could have <code>AA</code> being the same value as <code>ZZ</code>, then that definition wouldn't even work.</p>\n<p>Maybe the difference here is between \"sameness of expressions\" (two expressions are the same if they have the same normal form) and \"equality as a proposition\" - i.e., \"axiomatically\", AA and ZZ are different expressions but there isn't an axiom that is saying <code>AA \\ne ZZ</code> - that's a theorem that can be derived. But in general, I think, two expressions A and B can be different and (by axiom or proof) still satsify <code>A = B</code>.</p>",
        "id": 418421500,
        "sender_full_name": "Tainnor",
        "timestamp": 1706365592
    },
    {
        "content": "<p>At least that's what my little knowledge of dependent type theory tells me, but I could be wrong</p>",
        "id": 418421567,
        "sender_full_name": "Tainnor",
        "timestamp": 1706365658
    },
    {
        "content": "<p>My naïve/intuitive interpretation of recursors is \"whatever is required of the underlying theory to make pattern matching work as expected\". The pattern match in <code>mytype_equal'</code> gets compiled down to a Type.rec application, and you can print it to see how it's done.</p>",
        "id": 418421801,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1706365856
    },
    {
        "content": "<p>This is Lean 3 to match the blog post, but it doesn't really matter:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">mytype</span>\n<span class=\"bp\">|</span> <span class=\"n\">AA</span> <span class=\"o\">:</span> <span class=\"n\">mytype</span>\n<span class=\"bp\">|</span> <span class=\"n\">ZZ</span> <span class=\"o\">:</span> <span class=\"n\">mytype</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">mytype</span>\n\n<span class=\"kd\">definition</span> <span class=\"n\">mytype_equal'</span> <span class=\"o\">:</span> <span class=\"n\">mytype</span> <span class=\"bp\">→</span> <span class=\"n\">mytype</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">AA</span> <span class=\"n\">AA</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">AA</span> <span class=\"n\">ZZ</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"n\">ZZ</span> <span class=\"n\">AA</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"n\">ZZ</span> <span class=\"n\">ZZ</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">mytype_equal'._main</span>\n<span class=\"c1\">-- def mytype_equal'._main : mytype → mytype → Prop :=</span>\n<span class=\"c1\">-- λ (ᾰ ᾰ_1 : mytype),</span>\n<span class=\"c1\">--  ᾰ.cases_on (ᾰ_1.cases_on (id_rhs Prop true) (id_rhs Prop false))</span>\n<span class=\"c1\">--    (ᾰ_1.cases_on (id_rhs Prop false) (id_rhs Prop true))</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">mytype.cases_on</span>\n<span class=\"c1\">-- @[reducible]</span>\n<span class=\"c1\">-- protected def mytype.cases_on : Π {motive : mytype → Sort l} (n : mytype), motive AA → motive ZZ → motive n :=</span>\n<span class=\"c1\">-- λ {motive : mytype → Sort l} (n : mytype) (e_1 : motive AA) (e_2 : motive ZZ), mytype.rec e_1 e_2 n</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">mytype.rec</span>\n<span class=\"c1\">-- protected eliminator mytype.rec : Π {motive : mytype → Sort l}, motive AA → motive ZZ → Π (n : mytype), motive n</span>\n</code></pre></div>",
        "id": 418422412,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1706366392
    },
    {
        "content": "<p>Sure, but when the runtime evaluates a <code>rec</code> expression somewhere, it ultimately has to decide when expressions are the same and when they aren't</p>",
        "id": 418422920,
        "sender_full_name": "Tainnor",
        "timestamp": 1706366871
    },
    {
        "content": "<p>You should think of inductive types as being \"the universal object satisfying the rules\", not just \"any object satisfying the rules\". The reason <code>two_plus two_plus two_plus five</code> isn't equal to <code>three_plus three_plus five</code> is because the inductive type you've constructed isn't \"any old set with a 5 and a 2+ and a 3+\", it's \"the most general set with a 5 and a 2+ and a 3+\" (where these are now random functions from the set to itself). If you want relations on your inductive type, that's absolutely fine: just write down what they are, make an equivalence relation, and take a quotient.</p>",
        "id": 418424985,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706368636
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"686884\">@Michael</span></p>",
        "id": 418425008,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706368674
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"686884\">Michael</span> <a href=\"#narrow/stream/270676-lean4/topic/Natural.20Number.20Game/near/418412781\">said</a>:</p>\n<blockquote>\n<p>But looping back around, if part of the definition of the <code>inductive</code> keyword is that all related constructors are injective, it's not much of a theorem to show that an <code>inductive</code> constructor is injective.</p>\n</blockquote>\n<p>You need to accept that when you are so close to foundations then intuition no longer plays any role. The fact that <em>you</em> feel that injectivity of constructors are part of the definition of inductive type has no consequence on reality. Mario showed you the actual axioms that are generated and they do not include any injectivity. And then you were shown a actual proof that injectivity follows.</p>",
        "id": 418425229,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1706368875
    },
    {
        "content": "<p>Another way to think about it: if you have any set N with an element Z and a function S : N -&gt; N then the rules of lean guarantee that there must be a map f from Lean's naturals to N sending 0 to Z and succ(a) to S(f(a)). If you had \"loops\" in lean's naturals then this so-called universal property wouldn't hold</p>",
        "id": 418425236,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706368884
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/Natural.20Number.20Game/near/418425229\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"686884\">Michael</span> <a href=\"#narrow/stream/270676-lean4/topic/Natural.20Number.20Game/near/418412781\">said</a>:</p>\n<blockquote>\n<p>But looping back around, if part of the definition of the <code>inductive</code> keyword is that all related constructors are injective, it's not much of a theorem to show that an <code>inductive</code> constructor is injective.</p>\n</blockquote>\n<p>You need to accept that when you are so close to foundations then intuition no longer plays any role. The fact that <em>you</em> feel that injectivity of constructors are part of the definition of inductive type has no consequence on reality. Mario showed you the actual axioms that are generated and they do not include any injectivity. And then you were shown a actual proof that injectivity follows.</p>\n</blockquote>\n<p>sure, but there's quite some heavy lifting that is being done by the fact that you can even define functions on inductive datatypes (which wouldn't work if the constructors weren't disjoint).</p>",
        "id": 418427654,
        "sender_full_name": "Tainnor",
        "timestamp": 1706370905
    },
    {
        "content": "<p>In CIC, <em>you can define functions on inductive datatypes</em>, by fiat. It is a consequence of this fact that the inductive constructors are disjoint. In PA it's the other way around: the inductive constructors are disjoint by fiat, and the induction principle holds, and it is a consequence of this that you can define functions by recursion. Same end result, different paths to get there.</p>",
        "id": 418428288,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706371443
    },
    {
        "content": "<p>It's fine to keep as your mental model that the constructors of an inductive type are disjoint - it's true after all. But it turns out that recursors generalize better to all the different kinds of inductive type that lean supports, and disjointness is provable anyway, so there is no need to have it as a separate axiom.</p>",
        "id": 418428489,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706371601
    },
    {
        "content": "<blockquote>\n<p>Mario showed you the actual axioms that are generated and they do not include any injectivity.</p>\n</blockquote>\n<p>Well...</p>\n<p>Axiom (4) states that, given a value of f(0); a function which, given the value of f(n ∈ ℕ), tells you the value of f(succ n); and a value t ∈ ℕ, you can compute the value of f(t) . And then the computation rules state that you can do this by building t up from zero via repeatedly taking successors.</p>\n<blockquote>\n<p>the principle of recursion says that you are allowed to define a function by saying what it does on <code>0</code> and on <code>succ n</code>, so you're allowed to define <code>pred</code></p>\n</blockquote>\n<p>The principle of recursion doesn't say that; you're always allowed to define a function by cases. Here is one:</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo>∈</mo><mi mathvariant=\"double-struck\">R</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mrow><mo fence=\"true\">{</mo><mtable rowspacing=\"0.16em\" columnalign=\"left left\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>5</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>x</mi><mo>≤</mo><mn>7</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>x</mi><mo>−</mo><mn>2</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>x</mi><mo>≥</mo><mn>7</mn></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding=\"application/x-tex\">f(x \\in \\mathbb{R}) =\n\\left\\{\n\\begin{array}{ll}\n5 &amp; x \\leq 7 \\\\\nx - 2 &amp; x \\geq 7 \\\\\n\\end{array}\n\\right.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">R</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.4em;vertical-align:-0.95em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">{</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.45em;\"><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">5</span></span></span><span style=\"top:-2.41em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.95em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.45em;\"><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">7</span></span></span><span style=\"top:-2.41em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">7</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.95em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<p>What you really want, defining a function by cases, is for the cases to be disjoint. They aren't here, but the function is well-defined anyway because, for all values of x where multiple cases apply, all applicable cases produce the same result, 5.</p>\n<p>If we assume that the function posited by axiom (4) is well-defined, that is sufficient to prove that <code>succ</code> is injective.</p>\n<p>But in the other direction, if we assume that <code>succ</code> is injective, then the computation rules given in (5) are an existence proof of the function posited by Nat.rec, and the assumption that <code>succ</code> is injective will prove that this function is well-defined.</p>\n<p>(Unless I've made a mistake?)</p>\n<p>If I haven't, then <code>succ_inj</code> is not really a consequence of axiom (4), it is a restatement of it. This is more or less why I view it as being postulated. I think it is strange to say that a collection of axioms does not include a particular axiom, when it does include an axiom that is logically equivalent.</p>",
        "id": 418428593,
        "sender_full_name": "Michael",
        "timestamp": 1706371684
    },
    {
        "content": "<p>There's another reason why we don't make disjointness of constructors axiomatic though, which is that I lied just now, it's not always true:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">MyType</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">AA</span> <span class=\"o\">:</span> <span class=\"n\">MyType</span>\n<span class=\"bp\">|</span> <span class=\"n\">ZZ</span> <span class=\"o\">:</span> <span class=\"n\">MyType</span>\n<span class=\"kn\">open</span> <span class=\"n\">MyType</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">AA</span> <span class=\"bp\">=</span> <span class=\"n\">ZZ</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 418428611,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706371698
    },
    {
        "content": "<p>The trick is that on this type, <code>MyType.noConfusion</code> cannot be defined so the proof of disjointness doesn't work</p>",
        "id": 418428635,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706371731
    },
    {
        "content": "<p>huh, what is happening there?</p>",
        "id": 418428793,
        "sender_full_name": "Tainnor",
        "timestamp": 1706371888
    },
    {
        "content": "<blockquote>\n<p>Axiom (4) states that, given a value of f(0); a function which, given the value of f(n ∈ ℕ), tells you the value of f(succ n); and a value t ∈ ℕ, you can compute the value of f(t) . And then the computation rules state that you can do this by building t up from zero via repeatedly taking successors.</p>\n</blockquote>\n<p>I would phrase it slightly differently: It states that given a value <code>z</code> and a function <code>s</code>, gives you some function f, and the computation rules tell you what this function <code>f</code> does when operating on <code>0</code> and <code>succ n</code>. (It's not immediately obvious that every value <code>t</code> is of the form <code>succ ... succ 0</code>, and on an arbitrary variable <code>f t</code> doesn't have any particular computation rules, but you do know that it is of the right type because <code>f</code> is a function.)</p>",
        "id": 418428894,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706371982
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"685366\">@Tainnor</span> The type is in <code>Prop</code> and has two constructors, which means it is a \"small eliminating inductive\"; when this happens the <code>MyType.rec</code> function looks like this instead:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">recursor</span> <span class=\"n\">MyType.rec</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">MyType</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">},</span> <span class=\"n\">motive</span> <span class=\"n\">AA</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">ZZ</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">MyType</span><span class=\"o\">),</span> <span class=\"n\">motive</span> <span class=\"n\">t</span>\n</code></pre></div>\n<p>where the key point is the <code>Prop</code> in the <code>motive</code> argument (contrast with <code>Sort u</code> in the <code>Nat.rec</code> example from before). This recursor is <em>only</em> good for proofs by induction, you can't use it to construct functions</p>",
        "id": 418429038,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706372109
    },
    {
        "content": "<blockquote>\n<p>It's not immediately obvious that every value <code>t</code> is of the form <code>succ ... succ 0</code></p>\n</blockquote>\n<p>On the assumption that the constructors declared for an inductive type form an exhaustive list, which is explicitly mentioned... somewhere, this does look obvious to me?</p>",
        "id": 418429059,
        "sender_full_name": "Michael",
        "timestamp": 1706372139
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Natural.20Number.20Game/near/418429038\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"685366\">Tainnor</span> The type is in <code>Prop</code> and has two constructors, which means it is a \"small eliminating inductive\"; when this happens the <code>MyType.rec</code> function looks like this instead:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">recursor</span> <span class=\"n\">MyType.rec</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">MyType</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">},</span> <span class=\"n\">motive</span> <span class=\"n\">AA</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">ZZ</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">MyType</span><span class=\"o\">),</span> <span class=\"n\">motive</span> <span class=\"n\">t</span>\n</code></pre></div>\n<p>where the key point is the <code>Prop</code> in the <code>motive</code> argument (contrast with <code>Sort u</code> in the <code>Nat.rec</code> example from before). This recursor is <em>only</em> good for proofs by induction, you can't use it to construct functions</p>\n</blockquote>\n<p>Ok, this is beyond my pay grade. I'll check back in 5 years when I've thoroughly studied type theory. :D<br>\nIt still confuses me that <code>AA = ZZ</code>, though</p>",
        "id": 418429164,
        "sender_full_name": "Tainnor",
        "timestamp": 1706372203
    },
    {
        "content": "<p>That's because of proof irrelevance: <code>AA</code> and <code>ZZ</code> are both \"proofs\" of the proposition <code>MyType</code>, which is basically another way to write <code>True</code></p>",
        "id": 418429201,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706372245
    },
    {
        "content": "<p>ah! ok yes, makes sense</p>",
        "id": 418429210,
        "sender_full_name": "Tainnor",
        "timestamp": 1706372257
    },
    {
        "content": "<p>I think I'm comparing Lean to something like Pie from \"The Little Typer\", where I think distinctness of constructors is really baked in the evaluation rules for specific types. But it makes sense that that wouldn't generalize to proof terms</p>",
        "id": 418429404,
        "sender_full_name": "Tainnor",
        "timestamp": 1706372412
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"686884\">Michael</span> <a href=\"#narrow/stream/270676-lean4/topic/Natural.20Number.20Game/near/418429059\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>It's not immediately obvious that every value <code>t</code> is of the form <code>succ ... succ 0</code></p>\n</blockquote>\n<p>On the assumption that the constructors declared for an inductive type form an exhaustive list, which is explicitly mentioned... somewhere, this does look obvious to me?</p>\n</blockquote>\n<p>It is true, but the proof of this involves another induction, and it's not clear how to turn the computation rules into something you can do induction on. You can only use the computation rules to completion on <em>concrete numerals</em> like <code>37</code>, if you just have variables like <code>example (m n : Nat) : m + n = n + m</code> you can't \"just compute both sides\" because they aren't concrete numbers</p>",
        "id": 418429418,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706372425
    },
    {
        "content": "<p>But perhaps this point is not so important</p>",
        "id": 418429449,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706372478
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"686884\">Michael</span> <a href=\"#narrow/stream/270676-lean4/topic/Natural.20Number.20Game/near/418428593\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>Mario showed you the actual axioms that are generated and they do not include any injectivity.</p>\n</blockquote>\n<p>Well...</p>\n<p>Axiom (4) states that, given a value of f(0); a function which, given the value of f(n ∈ ℕ), tells you the value of f(succ n); and a value t ∈ ℕ, you can compute the value of f(t) . And then the computation rules state that you can do this by building t up from zero via repeatedly taking successors.</p>\n<blockquote>\n<p>the principle of recursion says that you are allowed to define a function by saying what it does on <code>0</code> and on <code>succ n</code>, so you're allowed to define <code>pred</code></p>\n</blockquote>\n<p>The principle of recursion doesn't say that; you're always allowed to define a function by cases.</p>\n</blockquote>\n<p>No, that's the principle of definition by cases (?). The principle of recursion says exactly what you wrote in the first paragraph: given values <code>z : A</code> and <code>s : Nat -&gt; A -&gt; A</code> there exists a function <code>f</code> such that <code>f 0 = z</code> and <code>f (succ n) = s n (f n)</code>. In CIC this function is given the name <code>Nat.rec z s</code>.</p>",
        "id": 418429601,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706372632
    },
    {
        "content": "<blockquote>\n<p>The principle of recursion says exactly what you wrote in the first paragraph: given values <code>z : A</code> and <code>s : Nat -&gt; A -&gt; A</code> there exists a function...</p>\n</blockquote>\n<p>I think we have some crossed terminology here; I'm going for the idea that I'm allowed to describe the function whether or not it exists, and once described I can investigate whether it's valid. As I read you, the principle of recursion says that a function matching this description is axiomatically valid.</p>",
        "id": 418429839,
        "sender_full_name": "Michael",
        "timestamp": 1706372848
    },
    {
        "content": "<p>I suppose you are saying that there is an alternative definition of <code>pred</code> along the lines of:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">pred</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>And then you observe that in order to use this to deduce that <code>pred (succ n) = n</code> we have to prove that <code>succ n != 0</code>. This is true, but this isn't the definition of <code>pred</code> being used here.</p>",
        "id": 418429841,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706372852
    },
    {
        "content": "<blockquote>\n<p>I think it is strange to say that a collection of axioms does not include a particular axiom, when it does include an axiom that is logically equivalent.</p>\n</blockquote>\n<p>It's true that in such a situation it becomes largely a matter of taste which is taken as the axiom and which is the theorem. (As a terminological matter, this is fairly clear-cut though, axioms are explicitly and only the ones you are assuming directly and not other things which are logically equivalent to them. Keep in mind that all axioms and theorems are logically equivalent to <code>True</code>, so it's not a very discerning measure.)</p>\n<p>In this case I think that's not what we have though, injectivity of constructors is not equivalent to the principle of recursion, it is a strictly weaker corollary of it. (For technical reasons even injectivity of constructors + induction is not equivalent to recursion in CIC, it requires the axiom of choice and even then you miss some definitional equalities given by the recursor.)</p>",
        "id": 418430180,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706373183
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Natural.20Number.20Game/near/418429841\">said</a>:</p>\n<blockquote>\n<p>I suppose you are saying that there is an alternative definition of <code>pred</code> along the lines of:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">pred</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>And then you observe that in order to use this to deduce that <code>pred (succ n) = n</code> we have to prove that <code>succ n != 0</code>. This is true, but this isn't the definition of <code>pred</code> being used here.</p>\n</blockquote>\n<p>I'm a little queasy about having that attributed to me just because <code>n - 1</code> isn't real. I'm happy to work with</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>∈</mo><mi mathvariant=\"double-struck\">N</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mrow><mo fence=\"true\">{</mo><mtable rowspacing=\"0.16em\" columnalign=\"left left\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>256</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>n</mi><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mi>m</mi></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi mathvariant=\"normal\">∃</mi><mi>m</mi><mo>∈</mo><mi mathvariant=\"double-struck\">N</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>=</mo><mi>S</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding=\"application/x-tex\">f(n \\in \\mathbb{N}) =\n\\left\\{\n\\begin{array}{ll}\n256 &amp; n = 0 \\\\\nm &amp; \\exists m \\in \\mathbb{N} (n = S(m)) \\\\\n\\end{array}\n\\right.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">N</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.4em;vertical-align:-0.95em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">{</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.45em;\"><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">256</span></span></span><span style=\"top:-2.41em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.95em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.45em;\"><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">0</span></span></span><span style=\"top:-2.41em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">∃</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathbb\">N</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">))</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.95em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<p>where all the cases use terminology that exists.</p>\n<p>But I guess you're right about what I'm thinking; in order to show that this function is well defined everywhere, it's necessary to show that when <code>n = 0</code>, no <code>m</code> (other than 256, in this example, I guess) exists for which <code>n = succ m</code>, which is the same thing as saying that <code>succ n ≠ 0</code> for all n.</p>",
        "id": 418430647,
        "sender_full_name": "Michael",
        "timestamp": 1706373658
    },
    {
        "content": "<p>(It would also be necessary to show that for any two naturals sharing the same successor, they are equal to each other! This is precisely <code>succ_inj</code>.)</p>",
        "id": 418430695,
        "sender_full_name": "Michael",
        "timestamp": 1706373710
    },
    {
        "content": "<p>you can't literally write that because <code>m</code> is out of scope of the existential</p>",
        "id": 418430870,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706373894
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Natural.20Number.20Game/near/418430870\">said</a>:</p>\n<blockquote>\n<p>you can't literally write that because <code>m</code> is out of scope of the existential</p>\n</blockquote>\n<p>I don't understand?</p>",
        "id": 418430890,
        "sender_full_name": "Michael",
        "timestamp": 1706373924
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"686884\">Michael</span> <a href=\"#narrow/stream/270676-lean4/topic/Natural.20Number.20Game/near/418430647\">said</a>:</p>\n<blockquote>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>∈</mo><mi mathvariant=\"double-struck\">N</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mrow><mo fence=\"true\">{</mo><mtable rowspacing=\"0.16em\" columnalign=\"left left\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>256</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>n</mi><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mi>m</mi></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi mathvariant=\"normal\">∃</mi><mi>m</mi><mo>∈</mo><mi mathvariant=\"double-struck\">N</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>=</mo><mi>S</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding=\"application/x-tex\">f(n \\in \\mathbb{N}) =\n\\left\\{\n\\begin{array}{ll}\n256 &amp; n = 0 \\\\\nm &amp; \\exists m \\in \\mathbb{N} (n = S(m)) \\\\\n\\end{array}\n\\right.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">N</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.4em;vertical-align:-0.95em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">{</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.45em;\"><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">256</span></span></span><span style=\"top:-2.41em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.95em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.45em;\"><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">0</span></span></span><span style=\"top:-2.41em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">∃</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathbb\">N</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">))</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.95em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span><br>\n</p>\n</blockquote>\n<p>The <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> here being returned is not a variable in scope</p>",
        "id": 418430961,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706373967
    },
    {
        "content": "<p>I know what you are trying to say, but not only do you have to prove that the choice is independent of <code>m</code>, you also have to prove that such an <code>m</code> exists, which is exactly what you needed the function <code>pred</code> for</p>",
        "id": 418431013,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706374027
    },
    {
        "content": "<p>remember that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo mathvariant=\"normal\">≠</mo><mn>0</mn><mo>→</mo><mi mathvariant=\"normal\">∃</mi><mi>m</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>=</mo><mi>S</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">n\\ne0\\to\\exists m(n=S(m))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mrel\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∃</span><span class=\"mord mathnormal\">m</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">))</span></span></span></span> is <em>also</em> not an axiom provided by CIC</p>",
        "id": 418431032,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706374064
    },
    {
        "content": "<p>(how are you doing the inline math?)</p>",
        "id": 418431117,
        "sender_full_name": "Michael",
        "timestamp": 1706374166
    },
    {
        "content": "<p>basically, this is a definition approach that would make sense if you were given <code>succ_inj</code> and <code>succ_ne_zero</code> as primitives, but in CIC the more natural definition looks like:</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.25em\" columnalign=\"right left\" columnspacing=\"0em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mrow></mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mn>256</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mrow></mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mi>n</mi></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{align*}\nf(0) ={}&amp; 256 \\\\\nf(n+1) ={}&amp; n\n\\end{align*}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:3em;vertical-align:-1.25em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.75em;\"><span style=\"top:-3.91em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\"></span></span></span><span style=\"top:-2.41em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\"></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.25em;\"><span></span></span></span></span></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.75em;\"><span style=\"top:-3.91em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mord\">256</span></span></span><span style=\"top:-2.41em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mord mathnormal\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.25em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>",
        "id": 418431207,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706374239
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"686884\">Michael</span> <a href=\"#narrow/stream/270676-lean4/topic/Natural.20Number.20Game/near/418431117\">said</a>:</p>\n<blockquote>\n<p>(how are you doing the inline math?)</p>\n</blockquote>\n<p><code>$$n\\ne 0$$</code> -&gt; <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo mathvariant=\"normal\">≠</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">n\\ne 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mrel\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>. Also you can use \"view message source\" on any post to find out how it was done</p>",
        "id": 418431246,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706374287
    },
    {
        "content": "<blockquote>\n<p>As a terminological matter, this is fairly clear-cut though, axioms are explicitly and only the ones you are assuming directly and not other things which are logically equivalent to them.</p>\n</blockquote>\n<p>This is fair, but it leaves me with a bad taste in my mouth over the in-game commentary saying \"we will show you how to prove what Peano had to assume\".</p>\n<blockquote>\n<p>Keep in mind that all axioms and theorems are logically equivalent to True, so it's not a very discerning measure.</p>\n</blockquote>\n<p>This is unfair; that's a different and weaker sense of \"logical equivalence\".</p>",
        "id": 418431491,
        "sender_full_name": "Michael",
        "timestamp": 1706374549
    },
    {
        "content": "<p>I will be the first one to say that PA is a much simpler axiomatic system than CIC</p>",
        "id": 418432026,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706375022
    },
    {
        "content": "<p>but it is true that CIC has this one swiss army knife recursor thing that subsumes 3 PA axioms</p>",
        "id": 418432105,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706375072
    },
    {
        "content": "<p>it's not really a competition as such; rather this is a game with slightly different base rules than you might be used to and there are new strats to go with it</p>",
        "id": 418432229,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706375207
    },
    {
        "content": "<p>in this game, definition by cases is less natural and in fact is re-cast as definitions by recursion on the inductive type</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">isFalse</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"n\">p</span>\n  <span class=\"bp\">|</span> <span class=\"n\">isTrue</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"n\">p</span>\n</code></pre></div>\n<p>Because in the CIC game, <em>everything</em> is defined using recursion on inductives (+ basic lambda calculus)</p>",
        "id": 418432343,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706375328
    },
    {
        "content": "<p>Hello, where can we ask questions about the number game? I am stuck:<br>\nGoal:<br>\n<code>succ a + 0 = succ (a + 0)</code><br>\ntyping <code>rw [add_zero] </code> does nothing<br>\n<a href=\"/user_uploads/3121/aeoqyAI_hXGNK7XSVR2q6nCT/Screenshot-2024-05-27-at-10.24.41.png\">Screenshot-2024-05-27-at-10.24.41.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/aeoqyAI_hXGNK7XSVR2q6nCT/Screenshot-2024-05-27-at-10.24.41.png\" title=\"Screenshot-2024-05-27-at-10.24.41.png\"><img src=\"/user_uploads/3121/aeoqyAI_hXGNK7XSVR2q6nCT/Screenshot-2024-05-27-at-10.24.41.png\"></a></div>",
        "id": 440803429,
        "sender_full_name": "Attila Vajda",
        "timestamp": 1716798815
    },
    {
        "content": "<p>The best place is <a class=\"stream\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members\">#new members</a></p>",
        "id": 440803480,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716798836
    },
    {
        "content": "<p>Thanks</p>",
        "id": 440803628,
        "sender_full_name": "Attila Vajda",
        "timestamp": 1716798878
    }
]