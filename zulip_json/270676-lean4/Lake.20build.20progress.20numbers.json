[
    {
        "content": "<p>(I'm sure this has been discussed before but my search-fu has failed me!)</p>\n<p>What is the precise meaning of the numbers in the Lake progress line? For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"mi\">2478</span><span class=\"bp\">/</span><span class=\"mi\">4006</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Mathlib.LinearAlgebra.QuotientPi</span>\n</code></pre></div>\n<p>The second one seems to be the number of files that the build depends on (starting off lower until Lake has finished scanning all dependencies?)</p>\n<p>For the first one I can't really offer an explanation: it increases but not strictly monotonically, so it's not quite the index into the compilation queue. Is it something like <code>total dependencies - file dependencies</code>?</p>",
        "id": 409584054,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1703252195
    },
    {
        "content": "<p>The second one is the number of <em>discovered</em> files that the build depends on. It's not quite all the files at the start because not all imports have been explored.</p>",
        "id": 409584341,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1703252330
    },
    {
        "content": "<p>Here's Antoine asking <a href=\"#narrow/stream/287929-mathlib4/topic/Meaning.20of.20numbers.20when.20one.20builds.20mathlib/near/385505191\">here</a> and me answering, and I think my answer was informed by the fact that I'd asked the same question at some earlier stage...</p>",
        "id": 409584355,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1703252341
    },
    {
        "content": "<p>Aha, it doesn't increase strictly because it measures the number of completed builds, not scheduled builds. Thanks :D</p>",
        "id": 409584592,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1703252447
    },
    {
        "content": "<p>Here's <a href=\"#narrow/stream/270676-lean4/topic/.22denominator.22.20in.20lake.20build.20output.3F/near/398072257\">me</a> asking the same question (after answering Antoine but when I realised I didn't know why the denominators were going up)</p>",
        "id": 409584640,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1703252477
    },
    {
        "content": "<p>Actually I'm still not sure I understand the numbers correctly. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>error:<span class=\"w\"> </span>stdout:\n./././Mathlib/LinearAlgebra/LinearIndependent.lean:1065:2:<span class=\"w\"> </span>error:<span class=\"w\"> </span>simp<span class=\"w\"> </span>made<span class=\"w\"> </span>no<span class=\"w\"> </span>progress\nerror:<span class=\"w\"> </span>external<span class=\"w\"> </span><span class=\"nb\">command</span><span class=\"w\"> </span><span class=\"sb\">`</span>/home/arch/arb/.elan/toolchains/mattrobball--lean4---redEta/bin/lean<span class=\"sb\">`</span><span class=\"w\"> </span>exited<span class=\"w\"> </span>with<span class=\"w\"> </span>code<span class=\"w\"> </span><span class=\"m\">1</span>\n<span class=\"o\">[</span><span class=\"m\">2596</span>/4006<span class=\"o\">]</span><span class=\"w\"> </span>Building<span class=\"w\"> </span>Mathlib.LinearAlgebra.AffineSpace.Pointwise\n<span class=\"o\">[</span><span class=\"m\">2596</span>/4006<span class=\"o\">]</span><span class=\"w\"> </span>Building<span class=\"w\"> </span>Mathlib.LinearAlgebra.AffineSpace.Restrict\n<span class=\"o\">[</span><span class=\"m\">2596</span>/4006<span class=\"o\">]</span><span class=\"w\"> </span>Building<span class=\"w\"> </span>Mathlib.Analysis.Normed.Group.AddTorsor\n<span class=\"o\">[</span><span class=\"m\">2596</span>/4006<span class=\"o\">]</span><span class=\"w\"> </span>Building<span class=\"w\"> </span>Mathlib.LinearAlgebra.AffineSpace.Combination\n^C\n$<span class=\"w\"> </span>vim<span class=\"w\"> </span>Mathlib/LinearAlgebra/LinearIndependent.lean<span class=\"w\"> </span><span class=\"c1\"># Fix error</span>\n$<span class=\"w\"> </span>lake<span class=\"w\"> </span>build\n<span class=\"o\">[</span><span class=\"m\">1189</span>/1566<span class=\"o\">]</span><span class=\"w\"> </span>Building<span class=\"w\"> </span>Mathlib.LinearAlgebra.LinearIndependent\n<span class=\"o\">[</span><span class=\"m\">1194</span>/1585<span class=\"o\">]</span><span class=\"w\"> </span>Building<span class=\"w\"> </span>Mathlib.Algebra.Star.NonUnitalSubalgebra\n<span class=\"o\">[</span><span class=\"m\">1472</span>/2210<span class=\"o\">]</span><span class=\"w\"> </span>Building<span class=\"w\"> </span>Mathlib.LinearAlgebra.AffineSpace.Combination\n<span class=\"o\">[</span><span class=\"m\">1911</span>/3276<span class=\"o\">]</span><span class=\"w\"> </span>Building<span class=\"w\"> </span>Mathlib.Topology.Algebra.Module.Basic\n<span class=\"o\">[</span><span class=\"m\">2574</span>/4006<span class=\"o\">]</span><span class=\"w\"> </span>Building<span class=\"w\"> </span>Mathlib.CategoryTheory.Abelian.ProjectiveResolution\n</code></pre></div>\n<p>Why do we lose 25 built files in between? I thought dependencies of erroring files don't get built, so once everything is scanned we should have the same number again.</p>",
        "id": 409585286,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1703252812
    },
    {
        "content": "<p>I think discovering that a file exists in the dependency tree happens earlier than discovering it is already built (which only happens just when you're about to build it).</p>",
        "id": 409617892,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1703265981
    },
    {
        "content": "<p>So if you have X CPU cores and the first X scheduled builds correspond to files that need to be rebuilt, then the already-built files will need to wait their turn for the counter to find out they're in fact done.</p>",
        "id": 409618138,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1703266090
    },
    {
        "content": "<p>The real question is: is there anything that could be printed here that wouldn't be utterly confusing?</p>",
        "id": 409618299,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1703266196
    },
    {
        "content": "<p>Having separate discovery and build phases would reduce the confusion</p>",
        "id": 409618485,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703266269
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lake/pull/169\">lake#169</a> is the relevant discussion</p>",
        "id": 409619016,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1703266509
    },
    {
        "content": "<p>The tl;dr is that a refactor is planned but doing it properly takes time, and I'm sure there are many other features competing for developer time.</p>",
        "id": 409619334,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1703266657
    }
]