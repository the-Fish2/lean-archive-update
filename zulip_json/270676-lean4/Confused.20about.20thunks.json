[
    {
        "content": "<p>Hi there, my use of thunks doesn't seem to be thunking:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">sum</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">List.foldl</span> <span class=\"n\">Nat.add</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">expensive</span> <span class=\"o\">:</span> <span class=\"n\">Thunk</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">Thunk.mk</span> <span class=\"k\">fun</span> <span class=\"o\">()</span> <span class=\"bp\">↦</span> <span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">List.range</span> <span class=\"mi\">100000000</span><span class=\"o\">)</span>\n  <span class=\"k\">match</span> <span class=\"n\">args</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">IO.println</span> <span class=\"s2\">\"Skipping expensive computation\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Result: {expensive.get}\"</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$<span class=\"w\"> </span><span class=\"nb\">time</span><span class=\"w\"> </span>./.lake/build/bin/laziness\nSkipping<span class=\"w\"> </span>expensive<span class=\"w\"> </span>computation\n\n________________________________________________________\nExecuted<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\">    </span><span class=\"m\">1</span>.94<span class=\"w\"> </span>secs<span class=\"w\">    </span>fish<span class=\"w\">           </span>external\n<span class=\"w\">   </span>usr<span class=\"w\"> </span><span class=\"nb\">time</span><span class=\"w\">    </span><span class=\"m\">1</span>.10<span class=\"w\"> </span>secs<span class=\"w\">  </span><span class=\"m\">898</span>.00<span class=\"w\"> </span>micros<span class=\"w\">    </span><span class=\"m\">1</span>.10<span class=\"w\"> </span>secs\n<span class=\"w\">   </span>sys<span class=\"w\"> </span><span class=\"nb\">time</span><span class=\"w\">    </span><span class=\"m\">0</span>.84<span class=\"w\"> </span>secs<span class=\"w\">  </span><span class=\"m\">131</span>.00<span class=\"w\"> </span>micros<span class=\"w\">    </span><span class=\"m\">0</span>.84<span class=\"w\"> </span>secs\n\n$<span class=\"w\"> </span><span class=\"nb\">time</span><span class=\"w\"> </span>./.lake/build/bin/laziness<span class=\"w\"> </span>asdf\nResult:<span class=\"w\"> </span><span class=\"m\">4999999950000000</span>\n\n________________________________________________________\nExecuted<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\">    </span><span class=\"m\">1</span>.93<span class=\"w\"> </span>secs<span class=\"w\">    </span>fish<span class=\"w\">           </span>external\n<span class=\"w\">   </span>usr<span class=\"w\"> </span><span class=\"nb\">time</span><span class=\"w\">    </span><span class=\"m\">1</span>.05<span class=\"w\"> </span>secs<span class=\"w\">  </span><span class=\"m\">724</span>.00<span class=\"w\"> </span>micros<span class=\"w\">    </span><span class=\"m\">1</span>.05<span class=\"w\"> </span>secs\n<span class=\"w\">   </span>sys<span class=\"w\"> </span><span class=\"nb\">time</span><span class=\"w\">    </span><span class=\"m\">0</span>.87<span class=\"w\"> </span>secs<span class=\"w\">  </span><span class=\"m\">105</span>.00<span class=\"w\"> </span>micros<span class=\"w\">    </span><span class=\"m\">0</span>.87<span class=\"w\"> </span>secs\n</code></pre></div>\n<p>It seems to take the same amount of time either way. What am I doing wrong here?</p>",
        "id": 425057789,
        "sender_full_name": "James Sully",
        "timestamp": 1709722484
    },
    {
        "content": "<p>Make the computation dependent on <code>args</code> so that the compiler can't hoist it out</p>",
        "id": 425076246,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1709728722
    },
    {
        "content": "<p>Thanks! Seems like a bit of a footgun</p>",
        "id": 425098028,
        "sender_full_name": "James Sully",
        "timestamp": 1709734896
    },
    {
        "content": "<p>it definitely is, for anyone trying to time code: <a href=\"#narrow/streams/public/search/.22set_option.20compiler.2Eextract_closed.20false.22\">https://leanprover.zulipchat.com/#narrow/streams/public/search/.22set_option.20compiler.2Eextract_closed.20false.22</a><br>\nbut I'm not entirely sure what the \"right\" approach here is</p>",
        "id": 425661295,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1709970334
    }
]