[
    {
        "content": "<p>I have a function similar to this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Subtype</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Subtype</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Subtype.mk</span> <span class=\"o\">(</span><span class=\"n\">n.val</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">n.property</span>\n    <span class=\"n\">linarith</span>\n</code></pre></div>\n<p>Which I would like to iterate, but since the input and output type are not the same, <code>Nat.iterate</code> doesn't work. Is there already some implementation for this?</p>\n<p>I didn't find any, so I wrote my own:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/--</span>\n<span class=\"sd\">`cast` with reversed arguments, so it's easier to provide multi-line proofs.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">@[</span><span class=\"n\">inline</span><span class=\"kd\">]</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">cast'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"n\">cast</span> <span class=\"n\">h</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">iterateDep</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">i</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cast'</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">zero_add</span><span class=\"o\">]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">i'</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"n\">a'</span> <span class=\"o\">:=</span> <span class=\"n\">cast'</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span>\n        <span class=\"n\">apply</span> <span class=\"n\">congrArg</span>\n        <span class=\"n\">linarith</span>\n      <span class=\"n\">cast'</span> <span class=\"o\">(</span><span class=\"n\">iterateDep</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">op</span> <span class=\"n\">i'</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span>\n        <span class=\"n\">apply</span> <span class=\"n\">congrArg</span>\n        <span class=\"n\">linarith</span>\n</code></pre></div>\n<p>Unfortunately if I try this with <code>foo</code> above, the inferred <code>β</code> is slightly off:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">iterateFoo</span> <span class=\"o\">:=</span> <span class=\"n\">iterateDep</span> <span class=\"n\">foo</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">iterateFoo</span> <span class=\"c1\">-- iterateFoo (i : ℕ) {j : ℕ} (a : { x // x = j + 1 }) : { x // x = i + j + 1 }</span>\n<span class=\"k\">#eval</span> <span class=\"n\">iterateFoo</span> <span class=\"mi\">5</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"c1\">-- error</span>\n<span class=\"k\">#eval</span> <span class=\"n\">iterateFoo</span> <span class=\"mi\">5</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"c1\">-- works</span>\n</code></pre></div>\n<p>But it works if I specify <code>β</code> explicitly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">iterateFoo'</span> <span class=\"o\">:=</span> <span class=\"n\">iterateDep</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Subtype</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"n\">foo</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">iterateFoo'</span> <span class=\"c1\">-- iterateFoo' (i : ℕ) {j : ℕ} (a : (fun m =&gt; { x // x = m }) j) : (fun m =&gt; { x // x = m }) (i + j)</span>\n<span class=\"k\">#eval</span> <span class=\"n\">iterateFoo'</span> <span class=\"mi\">5</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"c1\">-- works</span>\n</code></pre></div>\n<p>Why would lean infer <code>a : { x // x = j + 1 }</code> rather than <code>a : { x // x = j}</code> and how could I change my code so it infers the correct <code>β</code>?</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>complete mwe with import:</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Subtype</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Subtype</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Subtype.mk</span> <span class=\"o\">(</span><span class=\"n\">n.val</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">n.property</span>\n    <span class=\"n\">linarith</span>\n\n<span class=\"c1\">-- def iterateFoo := Nat.iterate foo</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">`cast` with reversed arguments, so it's easier to provide multiline proofs.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">@[</span><span class=\"n\">inline</span><span class=\"kd\">]</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">cast'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"n\">cast</span> <span class=\"n\">h</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">iterateDep</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">i</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cast'</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">zero_add</span><span class=\"o\">]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">i'</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"n\">a'</span> <span class=\"o\">:=</span> <span class=\"n\">cast'</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span>\n        <span class=\"n\">apply</span> <span class=\"n\">congrArg</span>\n        <span class=\"n\">linarith</span>\n      <span class=\"n\">cast'</span> <span class=\"o\">(</span><span class=\"n\">iterateDep</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">op</span> <span class=\"n\">i'</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span>\n        <span class=\"n\">apply</span> <span class=\"n\">congrArg</span>\n        <span class=\"n\">linarith</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">iterateFoo</span> <span class=\"o\">:=</span> <span class=\"n\">iterateDep</span> <span class=\"n\">foo</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">iterateFoo</span> <span class=\"c1\">-- iterateFoo (i : ℕ) {j : ℕ} (a : { x // x = j + 1 }) : { x // x = i + j + 1 }</span>\n<span class=\"k\">#eval</span> <span class=\"n\">iterateFoo</span> <span class=\"mi\">5</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"c1\">-- error</span>\n<span class=\"k\">#eval</span> <span class=\"n\">iterateFoo</span> <span class=\"mi\">5</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">iterateFoo'</span> <span class=\"o\">:=</span> <span class=\"n\">iterateDep</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Subtype</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"n\">foo</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">iterateFoo'</span> <span class=\"c1\">-- iterateFoo' (i : ℕ) {j : ℕ} (a : (fun m =&gt; { x // x = m }) j) : (fun m =&gt; { x // x = m }) (i + j)</span>\n<span class=\"k\">#eval</span> <span class=\"n\">iterateFoo'</span> <span class=\"mi\">5</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"c1\">-- works</span>\n</code></pre></div>\n</div></div>",
        "id": 420257001,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1707314136
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">iterateFoo</span> <span class=\"o\">:=</span> <span class=\"n\">iterateDep</span> <span class=\"bp\">@</span><span class=\"n\">foo</span>\n</code></pre></div>\n<p>There is an unfortunate behavior going on with your implicit arguments, where Lean interprets <code>iterateDep foo</code> as <code>iterateDep (fun {i} =&gt; @foo (i+1))</code></p>",
        "id": 420268164,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1707317239
    },
    {
        "content": "<p>Side remark: I strongly recommend that you generalize <code>iterateDep</code> to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">iterateDep</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n    <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">j</span>\n</code></pre></div>\n<p>This will provide more flexibility.</p>",
        "id": 420268504,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1707317315
    },
    {
        "content": "<p>I'm trying to implement your suggested generalization. However, I'm struggling to prove termination, since <code>i</code> and <code>j</code> are implicit arguments. How would I do this here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"sd\">/--</span>\n<span class=\"sd\">`cast` with reversed arguments, so it's easier to provide multiline proofs.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">@[</span><span class=\"n\">inline</span><span class=\"kd\">]</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">cast'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"n\">cast</span> <span class=\"n\">h</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">iterateDep'</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n    <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">j</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">diff</span> <span class=\"o\">:=</span> <span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">i</span>\n  <span class=\"k\">match</span> <span class=\"n\">h_diff</span> <span class=\"o\">:</span> <span class=\"n\">diff</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cast'</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span>\n      <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.le_of_sub_eq_zero</span> <span class=\"n\">h_diff</span>\n      <span class=\"n\">apply</span> <span class=\"n\">congrArg</span>\n      <span class=\"n\">linarith</span>\n    <span class=\"bp\">|</span> <span class=\"n\">diff'</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"n\">a'</span> <span class=\"o\">:=</span> <span class=\"n\">cast'</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span>\n        <span class=\"n\">apply</span> <span class=\"n\">congrArg</span>\n        <span class=\"n\">linarith</span>\n      <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">unfold_let</span> <span class=\"n\">diff</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n        <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.zero_lt_succ</span> <span class=\"n\">diff'</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">h_diff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n        <span class=\"n\">exact</span> <span class=\"n\">Nat.add_le_of_le_sub'</span> <span class=\"n\">h</span> <span class=\"n\">this</span>\n      <span class=\"n\">cast'</span> <span class=\"o\">(</span><span class=\"n\">iterateDep'</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">h'</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span>\n        <span class=\"n\">apply</span> <span class=\"n\">congrArg</span>\n        <span class=\"n\">linarith</span>\n</code></pre></div>",
        "id": 420276861,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1707319468
    },
    {
        "content": "<p>Got it to work after reading<br>\n<a href=\"#narrow/stream/113488-general/topic/termination_by.20.20needing.20implicit.20argument/near/411618975\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/termination_by.20.20needing.20implicit.20argument/near/411618975</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">iterateDep'</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n    <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">j</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">diff</span> <span class=\"o\">:=</span> <span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">i</span>\n  <span class=\"k\">match</span> <span class=\"n\">h_diff</span> <span class=\"o\">:</span> <span class=\"n\">diff</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cast'</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span>\n      <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.le_of_sub_eq_zero</span> <span class=\"n\">h_diff</span>\n      <span class=\"n\">apply</span> <span class=\"n\">congrArg</span>\n      <span class=\"n\">linarith</span>\n    <span class=\"bp\">|</span> <span class=\"n\">diff'</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"n\">i'</span> <span class=\"o\">:=</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n      <span class=\"k\">let</span> <span class=\"n\">a'</span> <span class=\"o\">:=</span> <span class=\"n\">cast'</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span>\n        <span class=\"n\">apply</span> <span class=\"n\">congrArg</span>\n        <span class=\"n\">linarith</span>\n      <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">i'</span> <span class=\"bp\">≤</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">unfold_let</span> <span class=\"n\">diff</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n        <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.zero_lt_succ</span> <span class=\"n\">diff'</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">h_diff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n        <span class=\"n\">exact</span> <span class=\"n\">Nat.add_le_of_le_sub'</span> <span class=\"n\">h</span> <span class=\"n\">this</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">i'</span> <span class=\"bp\">&lt;</span> <span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">unfold_let</span> <span class=\"n\">diff</span> <span class=\"n\">i'</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n        <span class=\"n\">exact</span> <span class=\"n\">Nat.sub_succ_lt_self</span> <span class=\"n\">j</span> <span class=\"n\">i</span> <span class=\"n\">h'</span>\n      <span class=\"n\">cast'</span> <span class=\"o\">(</span><span class=\"n\">iterateDep'</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">i'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">h'</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span>\n        <span class=\"n\">apply</span> <span class=\"n\">congrArg</span>\n        <span class=\"n\">linarith</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">iterateDep'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">i</span>\n</code></pre></div>",
        "id": 420278998,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1707320054
    },
    {
        "content": "<p>Here is a way avoiding any termination proofs:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">iterateDep</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n    <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">j</span>\n  <span class=\"n\">case</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">cases</span> <span class=\"n\">i</span>\n    <span class=\"n\">case</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">a</span>\n    <span class=\"n\">case</span> <span class=\"n\">succ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exfalso</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">Nat.zero_lt_succ</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">not_le</span> <span class=\"n\">h</span>\n  <span class=\"n\">case</span> <span class=\"n\">succ</span> <span class=\"n\">j</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j.succ</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">hi</span> <span class=\"bp\">▸</span> <span class=\"n\">a</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">ih</span> <span class=\"bp\">$</span> <span class=\"kd\">by</span> <span class=\"n\">omega</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 420279307,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1707320123
    },
    {
        "content": "<p>This looks really nice, but I can't get <code>iterateFoo</code> to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">iterateDep</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n    <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">j</span>\n  <span class=\"n\">case</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">cases</span> <span class=\"n\">i</span>\n    <span class=\"n\">case</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">a</span>\n    <span class=\"n\">case</span> <span class=\"n\">succ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exfalso</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">Nat.zero_lt_succ</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">not_le</span> <span class=\"n\">h</span>\n  <span class=\"n\">case</span> <span class=\"n\">succ</span> <span class=\"n\">j</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j.succ</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">hi</span> <span class=\"bp\">▸</span> <span class=\"n\">a</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">ih</span> <span class=\"bp\">$</span> <span class=\"kd\">by</span> <span class=\"n\">omega</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Subtype</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Subtype</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Subtype.mk</span> <span class=\"o\">(</span><span class=\"n\">n.val</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">n.property</span>\n    <span class=\"n\">linarith</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">iterateFoo</span> <span class=\"o\">:=</span> <span class=\"n\">iterateDep</span> <span class=\"bp\">@</span><span class=\"n\">foo</span> <span class=\"c1\">-- error</span>\n</code></pre></div>",
        "id": 420284665,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1707321489
    },
    {
        "content": "<p>It's also not tail recursive:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">iterateDep</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n    <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">j</span>\n  <span class=\"n\">case</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">cases</span> <span class=\"n\">i</span>\n    <span class=\"n\">case</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">a</span>\n    <span class=\"n\">case</span> <span class=\"n\">succ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exfalso</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">Nat.zero_lt_succ</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">not_le</span> <span class=\"n\">h</span>\n  <span class=\"n\">case</span> <span class=\"n\">succ</span> <span class=\"n\">j</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j.succ</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">hi</span> <span class=\"bp\">▸</span> <span class=\"n\">a</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">ih</span> <span class=\"bp\">$</span> <span class=\"kd\">by</span> <span class=\"n\">omega</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Subtype</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Subtype</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Subtype.mk</span> <span class=\"o\">(</span><span class=\"n\">n.val</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">n.property</span>\n    <span class=\"n\">linarith</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">iterateDep</span> <span class=\"bp\">@</span><span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">omega</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"mi\">1000000</span><span class=\"o\">)</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"c1\">-- Server process for file:///LeanProject.lean crashed, likely due to a stack overflow or a bug</span>\n</code></pre></div>",
        "id": 420290070,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1707322745
    },
    {
        "content": "<p>Here's a tail recursive version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">iterateDepAux</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">Σ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">i</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">val</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">val</span>\n  <span class=\"bp\">|</span> <span class=\"n\">steps</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">iterateDepAux</span> <span class=\"n\">steps</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">op</span> <span class=\"n\">x</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">iterateDepAux_fst</span> <span class=\"o\">(</span><span class=\"n\">steps</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"bp\">Σ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">iterateDepAux</span> <span class=\"n\">β</span> <span class=\"n\">op</span> <span class=\"n\">steps</span> <span class=\"n\">val</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">val.1</span> <span class=\"bp\">+</span> <span class=\"n\">steps</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">steps</span> <span class=\"n\">generalizing</span> <span class=\"n\">val</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">steps</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">iterateDepAux</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">Nat.succ_eq_add_one</span><span class=\"o\">]</span>\n    <span class=\"n\">ring</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">β</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">iterateDep</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">j</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">iterateDepAux</span> <span class=\"n\">β</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">⟩</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">iterateDepAux</span> <span class=\"n\">β</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">⟩)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">iterateDepAux_fst</span><span class=\"o\">]</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">only</span>\n    <span class=\"n\">omega</span>\n  <span class=\"n\">this</span> <span class=\"bp\">▸</span> <span class=\"n\">x.2</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Subtype</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Subtype</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Subtype.mk</span> <span class=\"o\">(</span><span class=\"n\">n.val</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">n.property</span>\n    <span class=\"n\">linarith</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">iterateDep</span> <span class=\"bp\">@</span><span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">omega</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"mi\">1000000</span><span class=\"o\">)</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n<span class=\"c1\">-- 1000000</span>\n</code></pre></div>",
        "id": 420306601,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1707327424
    }
]