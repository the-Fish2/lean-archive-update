[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Algebra.Subalgebra.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Subalgebra</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Subalgebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"bp\">ᵐᵒᵖ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Subalgebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"n\">__</span> <span class=\"o\">:=</span> <span class=\"n\">MulOpposite.unop</span> <span class=\"o\">(</span><span class=\"n\">Submodule.equivOpposite</span> <span class=\"o\">(</span><span class=\"n\">toSubmodule</span> <span class=\"n\">S</span><span class=\"o\">))</span>\n  <span class=\"n\">mul_mem'</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"c1\">-- comment out the next line and uncomment the one after to cause a stack overflow</span>\n  <span class=\"n\">algebraMap_mem'</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"c1\">-- algebraMap_mem' r := by sorry</span>\n</code></pre></div>\n<p>Reported by <span class=\"user-mention\" data-user-id=\"366779\">@Jz Pan</span>  <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Subalgebra.2EequivOpposite/near/431695379\">here</a>. I haven't made any attempt to minimise, my first instinct was to raise the issue here as is, to see if anyone could guess what might be going on. The goal at the <code>sorry</code> is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">r</span> <span class=\"bp\">∈</span>\n  <span class=\"o\">{</span> <span class=\"n\">toSubmonoid</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">toSubsemigroup</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"n\">__spread</span><span class=\"bp\">✝⁻⁰.</span><span class=\"n\">carrier</span><span class=\"o\">,</span> <span class=\"n\">mul_mem'</span> <span class=\"o\">:=</span> <span class=\"bp\">⋯</span> <span class=\"o\">},</span> <span class=\"n\">one_mem'</span> <span class=\"o\">:=</span> <span class=\"bp\">⋯</span> <span class=\"o\">},</span>\n      <span class=\"n\">add_mem'</span> <span class=\"o\">:=</span> <span class=\"bp\">⋯</span><span class=\"o\">,</span> <span class=\"n\">zero_mem'</span> <span class=\"o\">:=</span> <span class=\"bp\">⋯</span> <span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">carrier</span>\n</code></pre></div>",
        "id": 431700283,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1712432384
    },
    {
        "content": "<p>This also crashes:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Algebra.Subalgebra.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Subalgebra</span>\n\n<span class=\"c1\">-- just define an identity map</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Subalgebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Subalgebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"n\">__</span> <span class=\"o\">:=</span> <span class=\"n\">toSubmodule</span> <span class=\"n\">S</span>\n  <span class=\"n\">mul_mem'</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"c1\">-- comment out the next line and uncomment the one after to cause a stack overflow</span>\n  <span class=\"n\">algebraMap_mem'</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"c1\">-- algebraMap_mem' r := by sorry</span>\n</code></pre></div>",
        "id": 431700676,
        "sender_full_name": "Jz Pan",
        "timestamp": 1712432720
    },
    {
        "content": "<p>It would be great if someone could generate a Mathlib-free minimisation of this problem. Looks pretty buggy to me!</p>",
        "id": 431710895,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712442886
    },
    {
        "content": "<p>The keyword <code>__</code> does not work if import nothing.</p>",
        "id": 431712520,
        "sender_full_name": "Jz Pan",
        "timestamp": 1712444877
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Algebra.Subalgebra.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Subalgebra</span>\n\n<span class=\"c1\">-- just define an identity map</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Subalgebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Subalgebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">toSubmodule</span> <span class=\"n\">S</span> <span class=\"k\">with</span>\n  <span class=\"n\">mul_mem'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n  <span class=\"c1\">-- comment out the next line and uncomment the one after to cause a stack overflow</span>\n  <span class=\"n\">algebraMap_mem'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"bp\">↦</span> <span class=\"gr\">sorry</span>\n  <span class=\"c1\">-- algebraMap_mem' := fun r ↦ by sorry</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 431712974,
        "sender_full_name": "Jz Pan",
        "timestamp": 1712445451
    },
    {
        "content": "<p>This does not crash:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">MyZero</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"n\">myZero'</span> <span class=\"o\">:</span> <span class=\"n\">T</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">myZero</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">MyZero</span> <span class=\"n\">T</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"n\">MyZero.myZero'</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">MyAlgebra</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MyZero</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MyZero</span> <span class=\"n\">T</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"n\">myAlgebraMap'</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">T</span>\n  <span class=\"n\">map_zero'</span> <span class=\"o\">:</span> <span class=\"n\">myAlgebraMap'</span> <span class=\"n\">myZero</span> <span class=\"bp\">=</span> <span class=\"n\">myZero</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">myAlgebraMap</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MyZero</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MyZero</span> <span class=\"n\">T</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MyAlgebra</span> <span class=\"n\">S</span> <span class=\"n\">T</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"n\">MyAlgebra.myAlgebraMap'</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">my_map_zero</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MyZero</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MyZero</span> <span class=\"n\">T</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MyAlgebra</span> <span class=\"n\">S</span> <span class=\"n\">T</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">myAlgebraMap</span> <span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"n\">myZero</span> <span class=\"bp\">=</span> <span class=\"n\">myZero</span> <span class=\"o\">:=</span> <span class=\"n\">MyAlgebra.map_zero'</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">MySubmodule</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MyZero</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MyZero</span> <span class=\"n\">T</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">carrier</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"n\">zero_mem'</span> <span class=\"o\">:</span> <span class=\"n\">carrier</span> <span class=\"n\">myZero</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">MySubalgebra</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MyZero</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MyZero</span> <span class=\"n\">T</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MyAlgebra</span> <span class=\"n\">S</span> <span class=\"n\">T</span><span class=\"o\">]</span> <span class=\"kd\">extends</span>\n  <span class=\"n\">MySubmodule</span> <span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"n\">where</span>\n  <span class=\"n\">algebraMap_mem'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">carrier</span> <span class=\"o\">(</span><span class=\"n\">myAlgebraMap</span> <span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n  <span class=\"n\">zero_mem'</span> <span class=\"o\">:=</span> <span class=\"n\">my_map_zero</span> <span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"bp\">▸</span> <span class=\"n\">algebraMap_mem'</span> <span class=\"n\">myZero</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">MyZero</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MyZero</span> <span class=\"n\">T</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MyAlgebra</span> <span class=\"n\">S</span> <span class=\"n\">T</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">MySubalgebra</span> <span class=\"n\">S</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MySubalgebra</span> <span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">M.toMySubmodule</span> <span class=\"k\">with</span>\n  <span class=\"n\">algebraMap_mem'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>I assume that it must get more complicated.</p>",
        "id": 431713048,
        "sender_full_name": "Jz Pan",
        "timestamp": 1712445516
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 431714869,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1712447759
    },
    {
        "content": "<p>Here is an import-free version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">SubInhabited</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"n\">carrier</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"n\">default_mem</span> <span class=\"o\">:</span> <span class=\"n\">carrier</span> <span class=\"n\">default</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">SubInhabited2</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"kd\">extends</span>\n  <span class=\"n\">SubInhabited</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"n\">new_default_mem</span> <span class=\"o\">:</span> <span class=\"n\">carrier</span> <span class=\"n\">default</span>\n  <span class=\"n\">default_mem</span> <span class=\"o\">:=</span> <span class=\"n\">new_default_mem</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">SubInhabited2</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SubInhabited2</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"n\">S.carrier</span>\n  <span class=\"n\">new_default_mem</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- stack overflow</span>\n  <span class=\"c1\">-- uncomment the following to make the error go away</span>\n  <span class=\"c1\">-- default_mem := sorry</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 431770904,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1712495310
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/3839\">lean4#3839</a></p>",
        "id": 431771536,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1712495902
    }
]