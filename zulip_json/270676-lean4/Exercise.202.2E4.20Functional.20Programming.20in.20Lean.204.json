[
    {
        "content": "<p>Does anyone have a solution to the \"--help\" exercise in section 2.4?  Among other things, I tried the code below where everything except lines 4-7 is from the textbook.  One problem I'm getting is IO Unit and IO UInt32 are mismatched types and I don't know how to put a message like \"you want help\" in type IO UInt32.  Thanks!</p>\n<p>def process (exitCode : UInt32) (args : List String) : IO UInt32 := do<br>\n  match args with<br>\n  | [] =&gt; pure exitCode<br>\n  | \"--help\" :: args =&gt;<br>\n    let stdout ←  s!\"You want help!\"<br>\n    dump stdout<br>\n    process exitCode args<br>\n  | \"-\" :: args =&gt;<br>\n    let stdin ← IO.getStdin<br>\n    dump stdin<br>\n    process exitCode args<br>\n  | filename :: args =&gt;<br>\n    let stream ← fileStream ⟨filename⟩<br>\n    match stream with<br>\n    | none =&gt;<br>\n      process 1 args<br>\n    | some stream =&gt;<br>\n      dump stream<br>\n      process exitCode args</p>",
        "id": 447326573,
        "sender_full_name": "Austin Anderson",
        "timestamp": 1719433351
    },
    {
        "content": "<p>Please use <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> for your code. Note that there is no need to put the string into the <code>IO</code> monad, you can just use a normal let binding: <code>let stdout := \"You want help!\"</code></p>",
        "id": 447327307,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1719433499
    },
    {
        "content": "<p>Thank you.  So below is the whole thing, all but 3 lines copied from Functional Programming in Lean section 2.4.  And it gives an error when I type </p>\n<blockquote>\n<p>lake build</p>\n</blockquote>\n<p>in terminal.  The error is below that.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">bufsize</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">USize</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"bp\">*</span><span class=\"mi\">1024</span>\n<span class=\"n\">partial</span><span class=\"w\"> </span><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">dump</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">stream</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">IO</span><span class=\"bp\">.</span><span class=\"n\">FS</span><span class=\"bp\">.</span><span class=\"n\">Stream</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">IO</span><span class=\"w\"> </span><span class=\"n\">Unit</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">stream</span><span class=\"bp\">.</span><span class=\"n\">read</span><span class=\"w\"> </span><span class=\"n\">bufsize</span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"bp\">.</span><span class=\"n\">isEmpty</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">    </span><span class=\"n\">pure</span><span class=\"w\"> </span><span class=\"o\">()</span>\n<span class=\"w\">  </span><span class=\"k\">else</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">stdout</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">IO</span><span class=\"bp\">.</span><span class=\"n\">getStdout</span>\n<span class=\"w\">    </span><span class=\"n\">stdout</span><span class=\"bp\">.</span><span class=\"n\">write</span><span class=\"w\"> </span><span class=\"n\">buf</span>\n<span class=\"w\">    </span><span class=\"n\">dump</span><span class=\"w\"> </span><span class=\"n\">stream</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">fileStream</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">filename</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">System</span><span class=\"bp\">.</span><span class=\"n\">FilePath</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">IO</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Option</span><span class=\"w\"> </span><span class=\"n\">IO</span><span class=\"bp\">.</span><span class=\"n\">FS</span><span class=\"bp\">.</span><span class=\"n\">Stream</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">fileExists</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">filename</span><span class=\"bp\">.</span><span class=\"n\">pathExists</span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">fileExists</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">stderr</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">IO</span><span class=\"bp\">.</span><span class=\"n\">getStderr</span>\n<span class=\"w\">    </span><span class=\"n\">stderr</span><span class=\"bp\">.</span><span class=\"n\">putStrLn</span><span class=\"w\"> </span><span class=\"n\">s!</span><span class=\"s2\">\"File not fizzound: {filename}\"</span>\n<span class=\"w\">    </span><span class=\"n\">pure</span><span class=\"w\"> </span><span class=\"n\">none</span>\n<span class=\"w\">  </span><span class=\"k\">else</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">handle</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">IO</span><span class=\"bp\">.</span><span class=\"n\">FS</span><span class=\"bp\">.</span><span class=\"n\">Handle</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"w\"> </span><span class=\"n\">filename</span><span class=\"w\"> </span><span class=\"n\">IO</span><span class=\"bp\">.</span><span class=\"n\">FS</span><span class=\"bp\">.</span><span class=\"n\">Mode</span><span class=\"bp\">.</span><span class=\"n\">read</span>\n<span class=\"w\">    </span><span class=\"n\">pure</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">IO</span><span class=\"bp\">.</span><span class=\"n\">FS</span><span class=\"bp\">.</span><span class=\"n\">Stream</span><span class=\"bp\">.</span><span class=\"n\">ofHandle</span><span class=\"w\"> </span><span class=\"n\">handle</span><span class=\"o\">))</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">process</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">exitCode</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">UInt32</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">IO</span><span class=\"w\"> </span><span class=\"n\">UInt32</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">pure</span><span class=\"w\"> </span><span class=\"n\">exitCode</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"s2\">\"--help\"</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">stdout</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"s2\">\"You want help!\"</span>\n<span class=\"w\">    </span><span class=\"n\">dump</span><span class=\"w\"> </span><span class=\"n\">stdout</span>\n<span class=\"w\">    </span><span class=\"n\">process</span><span class=\"w\"> </span><span class=\"n\">exitCode</span><span class=\"w\"> </span><span class=\"n\">args</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"s2\">\"-\"</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">stdin</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">IO</span><span class=\"bp\">.</span><span class=\"n\">getStdin</span>\n<span class=\"w\">    </span><span class=\"n\">dump</span><span class=\"w\"> </span><span class=\"n\">stdin</span>\n<span class=\"w\">    </span><span class=\"n\">process</span><span class=\"w\"> </span><span class=\"n\">exitCode</span><span class=\"w\"> </span><span class=\"n\">args</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">filename</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">stream</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">fileStream</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">filename</span><span class=\"bp\">⟩</span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">stream</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">    </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">none</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">      </span><span class=\"n\">process</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">args</span>\n<span class=\"w\">    </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"n\">stream</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">      </span><span class=\"n\">dump</span><span class=\"w\"> </span><span class=\"n\">stream</span>\n<span class=\"w\">      </span><span class=\"n\">process</span><span class=\"w\"> </span><span class=\"n\">exitCode</span><span class=\"w\"> </span><span class=\"n\">args</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">IO</span><span class=\"w\"> </span><span class=\"n\">UInt32</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">process</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"s2\">\"-\"</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">process</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">args</span>\n<span class=\"bp\">```</span>\n\n<span class=\"bp\">```</span>\n<span class=\"bp\">`</span><span class=\"ss\">``quote</span>\n<span class=\"n\">error</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">././././</span><span class=\"n\">Main</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">25</span><span class=\"o\">:</span><span class=\"mi\">18</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">type</span><span class=\"w\"> </span><span class=\"n\">mismatch</span>\n<span class=\"w\">  </span><span class=\"n\">toString</span><span class=\"w\"> </span><span class=\"s2\">\"You want help!\"</span>\n<span class=\"n\">has</span><span class=\"w\"> </span><span class=\"n\">type</span>\n<span class=\"w\">  </span><span class=\"n\">String</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span>\n<span class=\"n\">but</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">type</span>\n<span class=\"w\">  </span><span class=\"n\">IO</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">1151</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span>\n<span class=\"n\">error</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"w\"> </span><span class=\"n\">exited</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"n\">Some</span><span class=\"w\"> </span><span class=\"n\">builds</span><span class=\"w\"> </span><span class=\"n\">logged</span><span class=\"w\"> </span><span class=\"n\">failures</span><span class=\"o\">:</span>\n<span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"n\">Main</span>\n<span class=\"n\">error</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">build</span><span class=\"w\"> </span><span class=\"n\">failed</span>\n<span class=\"bp\">```</span>\n</code></pre></div>",
        "id": 447348098,
        "sender_full_name": "Austin Anderson",
        "timestamp": 1719440869
    },
    {
        "content": "<p>I'm confused. There is no <code>toString \"You want help!\"</code> in your code. When I open your code in the sandbox I see:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">application</span><span class=\"w\"> </span><span class=\"n\">type</span><span class=\"w\"> </span><span class=\"n\">mismatch</span>\n<span class=\"w\">  </span><span class=\"n\">dump</span><span class=\"w\"> </span><span class=\"n\">stdout</span>\n<span class=\"n\">argument</span>\n<span class=\"w\">  </span><span class=\"n\">stdout</span>\n<span class=\"n\">has</span><span class=\"w\"> </span><span class=\"n\">type</span>\n<span class=\"w\">  </span><span class=\"n\">String</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span>\n<span class=\"n\">but</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">type</span>\n<span class=\"w\">  </span><span class=\"n\">IO</span><span class=\"bp\">.</span><span class=\"n\">FS</span><span class=\"bp\">.</span><span class=\"n\">Stream</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span>\n</code></pre></div>\n<p>instead.</p>",
        "id": 447379669,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719459526
    },
    {
        "content": "<p>Thanks for the reply.  I had a line that said</p>\n<div class=\"codehilite\" data-code-language=\"let\"><pre><span></span><code>\n</code></pre></div>\n<p>but per Henrik's comment I changed it to </p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">stdout</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"s2\">\"You want help!\"</span>\n</code></pre></div>\n<p>I have tried multiple things, but really just wonder what David Thrane Christiansen had in mind for <a href=\"https://lean-lang.org/functional_programming_in_lean/hello-world/cat.html\">the exercise he wrote</a>.  Perhaps something not fully covered in the book section is required.</p>",
        "id": 447578543,
        "sender_full_name": "Austin Anderson",
        "timestamp": 1719520533
    },
    {
        "content": "<p>sorry retry.  I had</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">stdout</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">s!</span><span class=\"s2\">\"You want help!\"</span>\n</code></pre></div>",
        "id": 447578806,
        "sender_full_name": "Austin Anderson",
        "timestamp": 1719520619
    },
    {
        "content": "<p>I think the idea of the exercise is to make it a slightly more realistic program by making it act the way many command line programs do. For example, if you type <code>code --help</code> on the command line, the effect is to print a bunch of information about how to use the <code>code</code> command. It's a simple way to document the intended usage and list of available command line options. </p>\n<p>So when you type <code>&lt;prog_name&gt; --help</code> this should have the effect of printing this documentation to <code>stdout</code> and returning a UInt32 to indicate success (usually 0).</p>",
        "id": 447581961,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1719521727
    }
]