[
    {
        "content": "<p>A mathlib PR is weirdly slow. I tried</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">set_option</span><span class=\"w\"> </span><span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">profiler</span><span class=\"w\"> </span><span class=\"n\">true</span><span class=\"w\"> </span><span class=\"k\">in</span>\n<span class=\"kn\">set_option</span><span class=\"w\"> </span><span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">Meta</span><span class=\"bp\">.</span><span class=\"n\">synthInstance</span><span class=\"w\"> </span><span class=\"n\">true</span><span class=\"w\"> </span><span class=\"k\">in</span>\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"n\">maths</span><span class=\"w\"> </span><span class=\"n\">here</span><span class=\"bp\">&gt;</span>\n</code></pre></div>\n<p>and the relevant part of the trace is</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"w\">  </span><span class=\"o\">[</span><span class=\"n\">Meta</span><span class=\"bp\">.</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">8.220413</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">Finite</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">⋯.</span><span class=\"n\">choose</span><span class=\"bp\">.</span><span class=\"n\">presentation</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">generators</span><span class=\"bp\">.</span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"bp\">∧</span>\n<span class=\"w\">      </span><span class=\"n\">Finite</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">⋯.</span><span class=\"n\">choose</span><span class=\"bp\">.</span><span class=\"n\">presentation</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">relations</span><span class=\"bp\">.</span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"bp\">=?=</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">35403</span><span class=\"w\"> </span><span class=\"bp\">∧</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">35404</span><span class=\"w\"> </span><span class=\"bp\">▼</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">0.047275</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">Finite</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">⋯.</span><span class=\"n\">choose</span><span class=\"bp\">.</span><span class=\"n\">presentation</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">generators</span><span class=\"bp\">.</span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"bp\">=?=</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">35403</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"w\">  </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">8.173041</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"n\">Finite</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">⋯.</span><span class=\"n\">choose</span><span class=\"bp\">.</span><span class=\"n\">presentation</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">relations</span><span class=\"bp\">.</span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"bp\">=?=</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">35404</span><span class=\"w\"> </span><span class=\"bp\">▼</span>\n<span class=\"w\">  </span><span class=\"o\">[</span><span class=\"n\">assign</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">8.173030</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">35404</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Finite</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">⋯.</span><span class=\"n\">choose</span><span class=\"bp\">.</span><span class=\"n\">presentation</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">relations</span><span class=\"bp\">.</span><span class=\"n\">I</span>\n</code></pre></div>\n<p>Can I get more information from Lean about why [assign] is taking 8 seconds?</p>",
        "id": 447294721,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1719425958
    },
    {
        "content": "<p><code>set_option diagnostics true</code> and look for terrifying behavior?</p>",
        "id": 447297112,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1719426435
    },
    {
        "content": "<p>No change in output :-(</p>",
        "id": 447334242,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1719435266
    },
    {
        "content": "<p>It’s not giving the diagnostic output?</p>",
        "id": 447334365,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1719435302
    },
    {
        "content": "<p>FWIW, it's <a href=\"https://github.com/leanprover-community/mathlib4/pull/13464\">#13464</a> , lines 100 to 107 of Mathlib/Algebra/Category/ModuleCat/Sheaf/Quasicoherent.lean ,</p>",
        "id": 447334412,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1719435321
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/mVUofWKUJyeqVbd4uGJ0AfWx/Screenshot-from-2024-06-26-21-56-17.png\">Screenshot-from-2024-06-26-21-56-17.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/mVUofWKUJyeqVbd4uGJ0AfWx/Screenshot-from-2024-06-26-21-56-17.png\" title=\"Screenshot-from-2024-06-26-21-56-17.png\"><img src=\"/user_uploads/3121/mVUofWKUJyeqVbd4uGJ0AfWx/Screenshot-from-2024-06-26-21-56-17.png\"></a></div><p>I have two blue underlines. Which one do I click on?</p>",
        "id": 447334746,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1719435398
    },
    {
        "content": "<p>Oh, maybe the extra information is this</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">reduction</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">unfolded</span><span class=\"w\"> </span><span class=\"n\">reducible</span><span class=\"w\"> </span><span class=\"n\">declarations</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">max</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">104</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">num</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"bp\">▼</span>\n<span class=\"w\">  </span><span class=\"n\">HasWeakSheafify</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"mi\">104</span>\n<span class=\"w\">  </span><span class=\"n\">QuasicoherentData</span><span class=\"bp\">.</span><span class=\"n\">presentation</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"mi\">48</span>\n<span class=\"w\">  </span><span class=\"n\">QuasicoherentData</span><span class=\"bp\">.</span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"mi\">36</span>\n<span class=\"w\">  </span><span class=\"n\">Exists</span><span class=\"bp\">.</span><span class=\"n\">choose</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"mi\">29</span>\n<span class=\"w\">  </span><span class=\"n\">RingCat</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"mi\">27</span>\n<span class=\"w\">  </span><span class=\"n\">Presentation</span><span class=\"bp\">.</span><span class=\"n\">generators</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"mi\">24</span>\n<span class=\"n\">use</span><span class=\"w\"> </span><span class=\"ss\">`set_option</span><span class=\"w\"> </span><span class=\"n\">diagnostics</span><span class=\"bp\">.</span><span class=\"n\">threshold</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"n\">num</span><span class=\"bp\">&gt;`</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">control</span><span class=\"w\"> </span><span class=\"n\">threshold</span><span class=\"w\"> </span><span class=\"n\">for</span><span class=\"w\"> </span><span class=\"n\">reporting</span><span class=\"w\"> </span><span class=\"n\">counters</span>\n</code></pre></div>\n<p>but I have no feeling about those numbers</p>",
        "id": 447335013,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1719435472
    },
    {
        "content": "<p>What about the unfolded ones that aren’t reducible? That should be before it.</p>",
        "id": 447335997,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1719435709
    },
    {
        "content": "<p>Those reducible numbers are pretty mild.</p>",
        "id": 447336216,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1719435755
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">h2</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∃</span><span class=\"w\"> </span><span class=\"n\">σ</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">exists_quasicoherentData</span><span class=\"w\"> </span><span class=\"c1\">-- fast up until here</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">h3</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Exists</span><span class=\"bp\">.</span><span class=\"n\">choose_spec</span><span class=\"w\"> </span><span class=\"n\">h2</span><span class=\"w\"> </span><span class=\"c1\">-- 23 seconds?!</span>\n</code></pre></div>",
        "id": 447338570,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1719436567
    },
    {
        "content": "<p>What happens if you specify the type of h3?</p>",
        "id": 447338890,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1719436716
    },
    {
        "content": "<p>I've not used <code>set_option diagnostics</code> before but the only thing I can get it to report on is that <code>[reduction]</code> thing. I now have this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"w\">  </span><span class=\"o\">[</span><span class=\"n\">assign</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mf\">55.644552</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">✅</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"m\">35401</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">h2</span><span class=\"bp\">.</span><span class=\"n\">choose</span><span class=\"bp\">.</span><span class=\"n\">I</span><span class=\"o\">),</span>\n<span class=\"w\">      </span><span class=\"n\">Finite</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"bp\">.</span><span class=\"n\">choose</span><span class=\"bp\">.</span><span class=\"n\">presentation</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">generators</span><span class=\"bp\">.</span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"bp\">∧</span><span class=\"w\"> </span><span class=\"n\">Finite</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"bp\">.</span><span class=\"n\">choose</span><span class=\"bp\">.</span><span class=\"n\">presentation</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">relations</span><span class=\"bp\">.</span><span class=\"n\">I</span>\n</code></pre></div>\n<p>with no understanding of how to figure out what's happening in those 55 seconds (no triangle to unfold). The PR is on the point of being merged and after that I'll have an example which uses only mathlib master.</p>",
        "id": 447338986,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1719436770
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, I pushed a fix.</p>",
        "id": 447381776,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719461005
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Kim Morrison</span> did you identify what computation you are blocking with fix?</p>",
        "id": 447412325,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1719475399
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Kim Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/tracing.20.5Bassign.5D/near/447381776\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span>, I pushed a fix.</p>\n</blockquote>\n<p>Wooah, what the heck is going on there? :-)</p>",
        "id": 447414074,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1719475900
    },
    {
        "content": "<p>My guess: it is the same issue as </p>\n<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/trace.2Eprofiler.2Eoutput/near/438031432\">said</a>:</p>\n<blockquote>\n<p>For the record, one way to turn the problematic line quoted by Matthew into instant happiness is to replace it with</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">PositiveCompacts</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Nat.rec</span><span class=\"w\"> </span><span class=\"n\">K₀</span><span class=\"w\"> </span><span class=\"n\">K_next</span>\n<span class=\"w\">    </span><span class=\"n\">refine</span><span class=\"w\"> </span><span class=\"o\">⟨</span><span class=\"n\">K</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hK_next</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">inter_subset_left</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">hK₀</span><span class=\"o\">⟩</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 447414699,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1719476131
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/270676-lean4/topic/tracing.20.5Bassign.5D/near/447412325\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110087\">Kim Morrison</span> did you identify what computation you are blocking with fix?</p>\n</blockquote>\n<p>Not sure still.</p>\n<p>What I observed was that if you try:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">set_option</span><span class=\"w\"> </span><span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">proofs</span><span class=\"w\"> </span><span class=\"n\">true</span><span class=\"w\"> </span><span class=\"k\">in</span>\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">quasicoherentDataOfIsFinitePresentation</span><span class=\"bp\">.</span><span class=\"n\">I</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"n\">Finite</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">quasicoherentDataOfIsFinitePresentation</span><span class=\"bp\">.</span><span class=\"n\">presentation</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">generators</span><span class=\"bp\">.</span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">unfold</span><span class=\"w\"> </span><span class=\"n\">quasicoherentDataOfIsFinitePresentation</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"bp\">*</span>\n<span class=\"w\">  </span><span class=\"k\">obtain</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"bp\">⟩</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">exists_quasicoherentData</span>\n</code></pre></div>\n<p>then you reach the goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">IsFinitePresentation</span>\n<span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">IsFinitePresentation</span><span class=\"bp\">.</span><span class=\"n\">exists_quasicoherentData</span><span class=\"bp\">.</span><span class=\"n\">choose</span><span class=\"bp\">.</span><span class=\"n\">I</span>\n<span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">QuasicoherentData</span>\n<span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">I</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">Finite</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">presentation</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">generators</span><span class=\"bp\">.</span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"bp\">∧</span><span class=\"w\"> </span><span class=\"n\">Finite</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">presentation</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">relations</span><span class=\"bp\">.</span><span class=\"n\">I</span>\n<span class=\"bp\">⊢</span><span class=\"w\"> </span><span class=\"n\">Finite</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"n\">Exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose</span><span class=\"bp\">.</span><span class=\"n\">presentation</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">generators</span><span class=\"bp\">.</span><span class=\"n\">I</span>\n</code></pre></div>\n<p>but by this point we have lost track of the fact that <code>x := IsFinitePresentation.exists_quasicoherentData.choose</code>, so we can't specialize <code>y</code> at <code>i</code>, and I couldn't work out anything to replace the <code>obtain</code> with that would simultaneously modify <code>i</code>.</p>\n<p>But I'm still not exactly sure why this observation led to what I pushed. :-) Wanting to avoid have <code>choose</code> in multiple places, I guess.</p>",
        "id": 447647153,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719547190
    }
]