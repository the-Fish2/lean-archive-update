[
    {
        "content": "<p>Executing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#print</span> <span class=\"n\">Nat.zero_add</span>\n</code></pre></div>\n<p>gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">theorem</span> <span class=\"n\">Nat.zero_add</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">Nat.brecOn</span> <span class=\"n\">x</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">Nat.below</span> <span class=\"n\">x</span> <span class=\"bp\">‚Üí</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n      <span class=\"bp\">|</span> <span class=\"n\">n.succ</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">congrArg</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">x.fst.fst</span><span class=\"o\">)</span>\n      <span class=\"n\">f</span>\n</code></pre></div>\n<p>Is the <code>match (motive := ...) x with</code> syntax sugar for something else? What does it do?</p>",
        "id": 439880997,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1716317435
    },
    {
        "content": "<p>Try <code>set_option pp.match false </code></p>",
        "id": 439883831,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1716318316
    },
    {
        "content": "<p>‚Äúmatch‚Äù is not a primitive in Lean, instead eliminators are, which is what match elaborates to. Every inductive type gets one eliminator, which you can find by appending ‚Äúrec‚Äù, for example List.rec</p>",
        "id": 440720387,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1716736912
    }
]