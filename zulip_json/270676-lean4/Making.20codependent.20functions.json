[
    {
        "content": "<p>Is there a way I can do this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">even</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">odd</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">odd</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">even</span> <span class=\"n\">n</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">Exemple_even_odd.lean:5:19</span>\n<span class=\"cm\">Messages (1)</span>\n<span class=\"cm\">Exemple_even_odd.lean:5:14</span>\n<span class=\"cm\">unknown identifier 'odd'</span>\n<span class=\"cm\">All Messages (1)-/</span>\n</code></pre></div>",
        "id": 436331083,
        "sender_full_name": "Hannah Santos",
        "timestamp": 1714501786
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n<span class=\"kd\">def</span> <span class=\"n\">even</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">odd</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">odd</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">even</span> <span class=\"n\">n</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 436331270,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714501851
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 436331322,
        "sender_full_name": "Hannah Santos",
        "timestamp": 1714501875
    },
    {
        "content": "<p>However my understanding is that those mutual definitions are not so easy to work with (I don’t know for sure because they never seem to show up in math), so you would probably be happier with a less fancy way.</p>",
        "id": 436331502,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714501933
    },
    {
        "content": "<p>Let me add one trick: you don’t really need that <code>open Nat</code>, you can replace <code>succ</code> by <code>.succ</code> is your patterns. I’m not saying that opening Nat is bad, I’m only telling you this in case you don’t know you can use this dot notation when Lean knows what type to expect.</p>",
        "id": 436332167,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714502224
    },
    {
        "content": "<p>I believe mutual defs are perfectly fine (though I'm not sure, I never worked with any). Mutual inductives don't have great support in Lean (yet?).</p>",
        "id": 436334527,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1714503167
    },
    {
        "content": "<p>I guess the question is whether the equations generated automatically will be nice to work with.</p>",
        "id": 436334790,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714503285
    },
    {
        "content": "<p>I just wanted to write a proof with them, so that's actually fine.</p>",
        "id": 436334895,
        "sender_full_name": "Hannah Santos",
        "timestamp": 1714503338
    },
    {
        "content": "<p>(About how there's only one function that could be the one I'm looking for)</p>",
        "id": 436335113,
        "sender_full_name": "Hannah Santos",
        "timestamp": 1714503427
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/270676-lean4/topic/Making.20codependent.20functions/near/436334527\">said</a>:</p>\n<blockquote>\n<p>I believe mutual defs are perfectly fine (though I'm not sure, I never worked with any). Mutual inductives don't have great support in Lean (yet?).</p>\n</blockquote>\n<p>The mutual recursion that you are seeing above is already using well founded recursion under the hood so it can (but does not necessarily have to) get quite annoying quite quickly</p>",
        "id": 436337636,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1714504471
    },
    {
        "content": "<p>What can get annoying? Proving termination?<br>\nOnce you have defined the mutual defs (including termination proof), then Lean generates equation lemmas exactly as you wrote them, so it should be fine to prove stuff about these functions, right?</p>",
        "id": 436339241,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1714505121
    },
    {
        "content": "<p>No (or rather unreliable) definitional equality, and sometimes slow elaboration/type checking if lean tries to start unfolding things are two annoyances that I know of.</p>",
        "id": 436340332,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1714505552
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/270676-lean4/topic/Making.20codependent.20functions/near/436339241\">said</a>:</p>\n<blockquote>\n<p>What can get annoying? Proving termination?<br>\nOnce you have defined the mutual defs (including termination proof), then Lean generates equation lemmas exactly as you wrote them, so it should be fine to prove stuff about these functions, right?</p>\n</blockquote>\n<p>(Lean only generates the equational theorems on demand, hence why i prove a theorem with them before printing them, but thats besides the point)</p>\n<p>consider:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n<span class=\"kd\">def</span> <span class=\"n\">even</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">odd</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">odd</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">even</span> <span class=\"n\">n</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">even</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">even</span><span class=\"o\">]</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">test</span>\n<span class=\"k\">#print</span> <span class=\"n\">even._eq_1</span>\n</code></pre></div>\n<p>that's not really a \"nicely\" proven theorem (though automation is good enough to work with it quite often). In<br>\ngeneral once well founded stuff shows up terms like this are present quite often which can make our automation struggle.</p>\n<p>If you compare to a direct definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">even'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">even'</span> <span class=\"n\">n</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">test'</span> <span class=\"o\">:</span> <span class=\"n\">even'</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">even'</span><span class=\"o\">]</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">test'</span>\n<span class=\"k\">#print</span> <span class=\"n\">even'._eq_1</span>\n</code></pre></div>\n<p>that one is much more harmless as you can see.</p>",
        "id": 436341412,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1714506002
    },
    {
        "content": "<p>(and the point that's besides the point won't be necessary in the next lean release, then <code>even.eq_1</code> will just exist)</p>",
        "id": 436345715,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1714507584
    }
]