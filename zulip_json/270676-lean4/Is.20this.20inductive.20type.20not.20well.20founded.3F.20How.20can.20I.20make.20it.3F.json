[
    {
        "content": "<p>I built a solver for circuits starting like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Init.Data.List</span>\n<span class=\"kn\">open</span> <span class=\"n\">Classical</span>\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"n\">Inductive</span> <span class=\"n\">normalizable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">a</span> <span class=\"n\">pred</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">And</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">a</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">normalizable</span> <span class=\"n\">a</span> <span class=\"n\">pred</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Or</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">a</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">normalizable</span> <span class=\"n\">a</span> <span class=\"n\">pred</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Not</span> <span class=\"o\">:</span> <span class=\"n\">normalizable</span> <span class=\"n\">a</span> <span class=\"n\">pred</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">normalizable</span> <span class=\"n\">a</span> <span class=\"n\">pred</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">normalizable</span>\n\n<span class=\"kd\">instance</span><span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">a</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">toProp</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">normalizable</span> <span class=\"n\">a</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>  <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pred</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">And</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">l.map</span> <span class=\"n\">toProp</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">foldr</span> <span class=\"bp\">\\</span><span class=\"n\">and</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Or</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">l.map</span> <span class=\"n\">toProp</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">foldr</span> <span class=\"bp\">\\</span><span class=\"n\">or</span> <span class=\"n\">false</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Not</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">\\</span><span class=\"n\">neg</span><span class=\"o\">(</span><span class=\"n\">toProp</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Apparently lean can’t tell toProp terminates.</p>",
        "id": 420808052,
        "sender_full_name": "Jared green",
        "timestamp": 1707578522
    },
    {
        "content": "<p>Reimplementing <code>List.map</code>+<code>List.foldr</code> works and it is not too much more code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Init.Data.List</span>\n<span class=\"kn\">open</span> <span class=\"n\">Classical</span>\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">normalizable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">a</span> <span class=\"n\">pred</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">And</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">a</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">normalizable</span> <span class=\"n\">a</span> <span class=\"n\">pred</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Or</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">a</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">normalizable</span> <span class=\"n\">a</span> <span class=\"n\">pred</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Not</span> <span class=\"o\">:</span> <span class=\"n\">normalizable</span> <span class=\"n\">a</span> <span class=\"n\">pred</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">normalizable</span> <span class=\"n\">a</span> <span class=\"n\">pred</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">normalizable</span>\n\n<span class=\"kd\">instance</span><span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">a</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">toProp</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">normalizable</span> <span class=\"n\">a</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>  <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pred</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">And</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n  <span class=\"bp\">|</span> <span class=\"n\">And</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">toProp</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">toProp</span> <span class=\"o\">(</span><span class=\"n\">And</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Or</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Or</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">toProp</span> <span class=\"n\">x</span> <span class=\"bp\">∨</span> <span class=\"n\">toProp</span> <span class=\"o\">(</span><span class=\"n\">Or</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Not</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">toProp</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Unfortunately I have very little experience with the termination checker so I don't know how to prove termination with <code>map</code> and <code>fold</code></p>",
        "id": 420809687,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1707579795
    },
    {
        "content": "<p>btw your code didn't compile. You can use the icon on the right top corner of the code block to open it in web editor to check if it compiles.</p>",
        "id": 420809846,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1707579910
    },
    {
        "content": "<p>Sorry, unfortunately I don’t know how to type in special symbols in zulip.</p>",
        "id": 420809991,
        "sender_full_name": "Jared green",
        "timestamp": 1707580040
    },
    {
        "content": "<p>Using <code>List.attach</code> helps Lean understand that your function is well-founded:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Init.Data.List</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Data.List</span>\n<span class=\"kn\">open</span> <span class=\"n\">Classical</span>\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">normalizable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">a</span> <span class=\"n\">pred</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">And</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">a</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">normalizable</span> <span class=\"n\">a</span> <span class=\"n\">pred</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Or</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">a</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">normalizable</span> <span class=\"n\">a</span> <span class=\"n\">pred</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Not</span> <span class=\"o\">:</span> <span class=\"n\">normalizable</span> <span class=\"n\">a</span> <span class=\"n\">pred</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">normalizable</span> <span class=\"n\">a</span> <span class=\"n\">pred</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">normalizable</span>\n\n<span class=\"kd\">instance</span><span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">a</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">toProp</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">normalizable</span> <span class=\"n\">a</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>  <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pred</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">And</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">l.attach.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">toProp</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">foldr</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">∧</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">True</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Or</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">l.attach.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">toProp</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">foldr</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">∨</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">False</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Not</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">¬</span> <span class=\"n\">toProp</span> <span class=\"n\">i</span>\n</code></pre></div>",
        "id": 420810242,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1707580214
    },
    {
        "content": "<p>the (x,_)  gets a type mismatch. go with </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.val</span>\n</code></pre></div>\n<p>and yet it still doesnt work, i still get the original problem.</p>",
        "id": 420811908,
        "sender_full_name": "Jared green",
        "timestamp": 1707581414
    },
    {
        "content": "<p>says</p>\n<blockquote>\n<p>structural recursion cannot be used</p>\n</blockquote>",
        "id": 420812002,
        "sender_full_name": "Jared green",
        "timestamp": 1707581512
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/xdtExixfDgFOZz9KoAJe0oES/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/xdtExixfDgFOZz9KoAJe0oES/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/xdtExixfDgFOZz9KoAJe0oES/image.png\"></a></div>",
        "id": 420812281,
        "sender_full_name": "Jared green",
        "timestamp": 1707581749
    },
    {
        "content": "<p>version: 4.6.0-rc1</p>",
        "id": 420812903,
        "sender_full_name": "Jared green",
        "timestamp": 1707582273
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.List</span>\n<span class=\"kn\">open</span> <span class=\"n\">Classical</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Normalizable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span>\n  <span class=\"bp\">|</span> <span class=\"n\">and</span>  <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span>\n  <span class=\"bp\">|</span> <span class=\"n\">or</span>   <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span>\n  <span class=\"bp\">|</span> <span class=\"n\">not</span>  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Normalizable</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"o\">(</span><span class=\"n\">Normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">toProp</span> <span class=\"o\">:</span> <span class=\"n\">Normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pred</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">and</span> <span class=\"n\">l</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">l.attach.map</span> <span class=\"o\">(</span><span class=\"n\">toProp</span> <span class=\"bp\">·.</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">foldr</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">∧</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">True</span>\n  <span class=\"bp\">|</span> <span class=\"n\">or</span> <span class=\"n\">l</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">l.attach.map</span> <span class=\"o\">(</span><span class=\"n\">toProp</span> <span class=\"bp\">·.</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">foldr</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">∨</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">False</span>\n  <span class=\"bp\">|</span> <span class=\"n\">not</span> <span class=\"n\">i</span>  <span class=\"bp\">=&gt;</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">toProp</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n<span class=\"n\">decreasing_by</span>\n  <span class=\"n\">all_goals</span>\n    <span class=\"n\">simp_wf</span>\n    <span class=\"n\">try</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Subtype.property</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›</span>\n    <span class=\"n\">decreasing_trivial</span>\n</code></pre></div>",
        "id": 420814721,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1707583785
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/Na9tsZ64aX0rvEp-Z-9UV8dW/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Na9tsZ64aX0rvEp-Z-9UV8dW/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/Na9tsZ64aX0rvEp-Z-9UV8dW/image.png\"></a></div>",
        "id": 420815085,
        "sender_full_name": "Jared green",
        "timestamp": 1707584026
    },
    {
        "content": "<p>Yes, in your case line 38 should be <code>termination_by n</code>.</p>",
        "id": 420815182,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1707584083
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/SzrJvErliXxRZS6hx7UpQam7/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/SzrJvErliXxRZS6hx7UpQam7/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/SzrJvErliXxRZS6hx7UpQam7/image.png\"></a></div>",
        "id": 420815226,
        "sender_full_name": "Jared green",
        "timestamp": 1707584130
    },
    {
        "content": "<p>Shouldn't it be <code>termination_by sizeOf n</code>?</p>",
        "id": 420815267,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1707584161
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 420815373,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707584217
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"500038\">Timo Carlin-Burns</span> <a href=\"#narrow/stream/270676-lean4/topic/Is.20this.20inductive.20type.20not.20well.20founded.3F.20How.20can.20I.20make.20it.3F/near/420815267\">said</a>:</p>\n<blockquote>\n<p>Shouldn't it be <code>termination_by sizeOf n</code>?</p>\n</blockquote>\n<p>With or without <code>sizeOf</code> works.</p>",
        "id": 420815405,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1707584237
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"394803\">@Jared green</span>  what does <code>#eval Lean.versionString</code> print out for you?</p>",
        "id": 420815509,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1707584288
    },
    {
        "content": "<blockquote>\n<p>\"4.6.0-rc1\"</p>\n</blockquote>",
        "id": 420815772,
        "sender_full_name": "Jared green",
        "timestamp": 1707584456
    },
    {
        "content": "<p>Then I'm very confused, as this exact code snippet works in the web editor:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Init.Data.List</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Data.List</span>\n<span class=\"kn\">open</span> <span class=\"n\">Classical</span>\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">normalizable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">a</span> <span class=\"n\">pred</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">And</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">a</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">normalizable</span> <span class=\"n\">a</span> <span class=\"n\">pred</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Or</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">a</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">normalizable</span> <span class=\"n\">a</span> <span class=\"n\">pred</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Not</span> <span class=\"o\">:</span> <span class=\"n\">normalizable</span> <span class=\"n\">a</span> <span class=\"n\">pred</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">normalizable</span> <span class=\"n\">a</span> <span class=\"n\">pred</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">normalizable</span>\n\n<span class=\"kd\">instance</span><span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">a</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">toProp</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">normalizable</span> <span class=\"n\">a</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>  <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pred</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">And</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">l.attach.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">toProp</span> <span class=\"n\">x.val</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">foldr</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">∧</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">True</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Or</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">l.attach.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">toProp</span> <span class=\"n\">x.val</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">foldr</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">∨</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">False</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Not</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">¬</span> <span class=\"n\">toProp</span> <span class=\"n\">i</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">n</span>\n<span class=\"n\">decreasing_by</span>\n  <span class=\"n\">all_goals</span>\n    <span class=\"n\">simp_wf</span>\n    <span class=\"n\">try</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Subtype.property</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›</span>\n    <span class=\"n\">decreasing_trivial</span>\n</code></pre></div>",
        "id": 420816041,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1707584632
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/SRSISj_y1sY1XqzmjIguADFJ/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/SRSISj_y1sY1XqzmjIguADFJ/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/SRSISj_y1sY1XqzmjIguADFJ/image.png\"></a></div>",
        "id": 420816521,
        "sender_full_name": "Jared green",
        "timestamp": 1707584974
    },
    {
        "content": "<p>for context, this function turns each logic gate into a variable width truth table, which can accommodate implications.</p>",
        "id": 420817436,
        "sender_full_name": "Jared green",
        "timestamp": 1707585685
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"394803\">Jared green</span> <a href=\"#narrow/stream/270676-lean4/topic/Is.20this.20inductive.20type.20not.20well.20founded.3F.20How.20can.20I.20make.20it.3F/near/420811908\">said</a>:</p>\n<blockquote>\n<p>the (x,_)  gets a type mismatch. go with </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.val</span>\n</code></pre></div>\n<p>and yet it still doesnt work, i still get the original problem.</p>\n</blockquote>\n<p>Your brackets are wrong. You need to write <code>⟨x,_⟩</code> (written as \\&lt; and \\&gt; respectively) instead of <code>(x,_)</code>. Feel free to simply copy/paste the code written.</p>",
        "id": 420817460,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1707585717
    },
    {
        "content": "<p>next time.</p>",
        "id": 420817532,
        "sender_full_name": "Jared green",
        "timestamp": 1707585755
    },
    {
        "content": "<p>One issue here <span class=\"user-mention\" data-user-id=\"394803\">@Jared green</span> is that you keep posting screenshots (which are hard to read and debug) rather than posting code (which others can cut and paste) and cutting/pasting the code which other users are posting.</p>",
        "id": 420817568,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707585800
    },
    {
        "content": "<p>its so the messages can be seen.</p>",
        "id": 420817664,
        "sender_full_name": "Jared green",
        "timestamp": 1707585879
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"394803\">Jared green</span> <a href=\"#narrow/stream/270676-lean4/topic/Is.20this.20inductive.20type.20not.20well.20founded.3F.20How.20can.20I.20make.20it.3F/near/420817664\">said</a>:</p>\n<blockquote>\n<p>its so the messages can be seen.</p>\n</blockquote>\n<p>I get the idea, but the messages aren't too helpful if we can't access the exact code that produced them. Please try constructing a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> in the future.</p>",
        "id": 420817831,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1707586033
    },
    {
        "content": "<p>got it</p>",
        "id": 420817851,
        "sender_full_name": "Jared green",
        "timestamp": 1707586060
    },
    {
        "content": "<p>the code so far:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Init.Data.List</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Data.List</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Dedup</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Pairwise</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Join</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Infix</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Lattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Lemmas</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Bool.AllAny</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Bool.Basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">Classical</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">normalizable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">And</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Or</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Not</span> <span class=\"o\">:</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">normalizable</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span>\n  <span class=\"n\">intro</span> <span class=\"n\">b</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">toProp</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pred</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">And</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">l.attach.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">toProp</span> <span class=\"n\">x.val</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">foldr</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">∧</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">True</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Or</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">l.attach.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">toProp</span> <span class=\"n\">x.val</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">foldr</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">∨</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">False</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Not</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">toProp</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">n</span>\n  <span class=\"n\">decreasing_by</span>\n  <span class=\"n\">all_goals</span>\n    <span class=\"n\">simp_wf</span>\n    <span class=\"n\">try</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Subtype.property</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›</span>\n  <span class=\"n\">decreasing_trivial</span>\n  <span class=\"n\">simp_wf</span>\n  <span class=\"n\">decreasing_trivial</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">subnormalizeN</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Or</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">((</span><span class=\"n\">Or</span> <span class=\"o\">(</span><span class=\"n\">And</span> <span class=\"o\">(</span><span class=\"n\">Not</span> <span class=\"n\">n</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">l.map</span> <span class=\"n\">Not</span><span class=\"o\">))</span>\n    <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">l.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">And</span> <span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"n\">x</span><span class=\"o\">])</span> <span class=\"o\">)))</span>\n    <span class=\"o\">::</span> <span class=\"o\">((</span><span class=\"n\">l.map</span> <span class=\"n\">subnormalizeN</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">foldr</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">x.append</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">dedup</span><span class=\"o\">)</span> <span class=\"o\">[]))</span>\n  <span class=\"bp\">|</span> <span class=\"n\">And</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">((</span><span class=\"n\">Or</span> <span class=\"o\">(</span><span class=\"n\">And</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n    <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">l.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">And</span> <span class=\"o\">[</span><span class=\"n\">Not</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">Not</span> <span class=\"n\">x</span><span class=\"o\">]))))</span>\n    <span class=\"o\">::</span> <span class=\"o\">((</span><span class=\"n\">l.map</span> <span class=\"n\">subnormalizeN</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">foldr</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">x.append</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">dedup</span><span class=\"o\">)</span> <span class=\"o\">[]))</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Not</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">Or</span> <span class=\"o\">[</span><span class=\"n\">And</span> <span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">Not</span> <span class=\"n\">i</span><span class=\"o\">],</span> <span class=\"n\">And</span> <span class=\"o\">[</span><span class=\"n\">Not</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">]])</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">subnormalizeN</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[</span><span class=\"n\">Or</span> <span class=\"o\">[</span><span class=\"n\">And</span> <span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">],</span> <span class=\"n\">And</span> <span class=\"o\">[</span><span class=\"n\">Not</span> <span class=\"n\">n</span><span class=\"o\">]]]</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">n</span>\n  <span class=\"n\">decreasing_by</span>\n  <span class=\"n\">all_goals</span>\n    <span class=\"n\">simp_wf</span>\n</code></pre></div>",
        "id": 420818460,
        "sender_full_name": "Jared green",
        "timestamp": 1707586530
    },
    {
        "content": "<p>Here's a code with no sorries left:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Init.Data.List</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Data.List</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Dedup</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Pairwise</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Join</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Infix</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Lattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Lemmas</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Bool.AllAny</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Bool.Basic</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">normalizable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">And</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Or</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Not</span> <span class=\"o\">:</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">normalizable</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kd\">mutual</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">decEqNormalizable</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span>\n  <span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">atom</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"k\">then</span>\n      <span class=\"bp\">.</span><span class=\"n\">isTrue</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span>\n      <span class=\"bp\">.</span><span class=\"n\">isFalse</span>  <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"bp\">;</span> <span class=\"n\">injection</span> <span class=\"n\">n</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">And</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">And</span> <span class=\"n\">b</span> <span class=\"bp\">|</span> <span class=\"n\">Or</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">Or</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">inst</span> <span class=\"o\">:=</span> <span class=\"n\">decEqListNormalizable</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n    <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"k\">then</span>\n      <span class=\"bp\">.</span><span class=\"n\">isTrue</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span>\n      <span class=\"bp\">.</span><span class=\"n\">isFalse</span>  <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"bp\">;</span> <span class=\"n\">injection</span> <span class=\"n\">n</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Not</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">Not</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">inst</span> <span class=\"o\">:=</span> <span class=\"n\">decEqNormalizable</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n    <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"k\">then</span>\n      <span class=\"bp\">.</span><span class=\"n\">isTrue</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span>\n      <span class=\"bp\">.</span><span class=\"n\">isFalse</span>  <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"bp\">;</span> <span class=\"n\">injection</span> <span class=\"n\">n</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Not</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">Or</span> <span class=\"n\">_</span>  <span class=\"bp\">|</span><span class=\"n\">Not</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">And</span> <span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"n\">Not</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">atom</span> <span class=\"n\">_</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Or</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">Not</span> <span class=\"n\">_</span>  <span class=\"bp\">|</span> <span class=\"n\">Or</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">And</span> <span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"n\">Or</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">atom</span> <span class=\"n\">_</span>\n  <span class=\"bp\">|</span> <span class=\"n\">And</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">Not</span> <span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"n\">And</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">Or</span> <span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"n\">And</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">atom</span> <span class=\"n\">_</span>\n  <span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">Not</span> <span class=\"n\">_</span><span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">And</span> <span class=\"n\">_</span><span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">Or</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">.</span><span class=\"n\">isFalse</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">injection</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">decEqListNormalizable</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],[]</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">isTrue</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">hd₁</span><span class=\"o\">::</span><span class=\"n\">tl₁</span><span class=\"o\">,</span> <span class=\"n\">hd₂</span><span class=\"o\">::</span><span class=\"n\">tl₂</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"n\">inst₁</span> <span class=\"o\">:=</span> <span class=\"n\">decEqNormalizable</span> <span class=\"n\">hd₁</span> <span class=\"n\">hd₂</span>\n      <span class=\"k\">let</span> <span class=\"n\">inst₂</span> <span class=\"o\">:=</span> <span class=\"n\">decEqListNormalizable</span> <span class=\"n\">tl₁</span> <span class=\"n\">tl₂</span>\n      <span class=\"k\">if</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">hd₁</span> <span class=\"bp\">=</span> <span class=\"n\">hd₂</span> <span class=\"k\">then</span>\n          <span class=\"k\">if</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">tl₁</span> <span class=\"bp\">=</span> <span class=\"n\">tl₂</span> <span class=\"k\">then</span> <span class=\"bp\">.</span><span class=\"n\">isTrue</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">subst</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n          <span class=\"k\">else</span> <span class=\"bp\">.</span><span class=\"n\">isFalse</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"bp\">;</span> <span class=\"n\">injection</span> <span class=\"n\">n</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">h₂</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span><span class=\"o\">)</span>\n      <span class=\"k\">else</span>\n        <span class=\"bp\">.</span><span class=\"n\">isFalse</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"bp\">;</span> <span class=\"n\">injection</span> <span class=\"n\">n</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">h₁</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span><span class=\"n\">_</span><span class=\"o\">::</span><span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">::</span><span class=\"n\">_</span><span class=\"o\">,[]</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">isFalse</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">injection</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">toProp</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pred</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">And</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">l.attach.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">toProp</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">foldr</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">∧</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">True</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Or</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">l.attach.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">toProp</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">foldr</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">∨</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">False</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Not</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">toProp</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">subnormalizeN</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Or</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">((</span><span class=\"n\">Or</span> <span class=\"o\">(</span><span class=\"n\">And</span> <span class=\"o\">(</span><span class=\"n\">Not</span> <span class=\"n\">n</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">l.attach.map</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Not</span> <span class=\"n\">x.val</span><span class=\"o\">))</span>\n    <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">l.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">And</span> <span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"n\">x</span><span class=\"o\">])</span> <span class=\"o\">)))</span>\n    <span class=\"o\">::</span> <span class=\"o\">((</span><span class=\"n\">l.attach.map</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">subnormalizeN</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">foldr</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">x.append</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">dedup</span><span class=\"o\">)</span> <span class=\"o\">[]))</span>\n  <span class=\"bp\">|</span> <span class=\"n\">And</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">((</span><span class=\"n\">Or</span> <span class=\"o\">(</span><span class=\"n\">And</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n    <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">l.attach.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">And</span> <span class=\"o\">[</span><span class=\"n\">Not</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">Not</span> <span class=\"n\">x</span><span class=\"o\">]))))</span>\n    <span class=\"o\">::</span> <span class=\"o\">((</span><span class=\"n\">l.attach.map</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">subnormalizeN</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">foldr</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">x.append</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">dedup</span><span class=\"o\">)</span> <span class=\"o\">[]))</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Not</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">Or</span> <span class=\"o\">[</span><span class=\"n\">And</span> <span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">Not</span> <span class=\"n\">i</span><span class=\"o\">],</span> <span class=\"n\">And</span> <span class=\"o\">[</span><span class=\"n\">Not</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">]])</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">subnormalizeN</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[</span><span class=\"n\">Or</span> <span class=\"o\">[</span><span class=\"n\">And</span> <span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">],</span> <span class=\"n\">And</span> <span class=\"o\">[</span><span class=\"n\">Not</span> <span class=\"n\">n</span><span class=\"o\">]]]</span>\n</code></pre></div>",
        "id": 420820685,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1707588371
    },
    {
        "content": "<p>i put the code on github.<br>\n<a href=\"https://github.com/jaredgreen2/polySat.git\">[](url)</a></p>",
        "id": 420826069,
        "sender_full_name": "Jared green",
        "timestamp": 1707592566
    }
]