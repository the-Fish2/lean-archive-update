[
    {
        "content": "<p>How does one correctly elaborate a term of the form <code>‹...›</code>. The following example doesn't work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"test\"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">ex</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">none</span>\n  <span class=\"k\">let</span> <span class=\"n\">ty</span> <span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">ex</span>\n  <span class=\"n\">IO.println</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">ppExpr</span> <span class=\"n\">ex</span><span class=\"o\">)</span>\n  <span class=\"n\">IO.println</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">ppExpr</span> <span class=\"n\">ty</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">test</span> <span class=\"o\">‹</span><span class=\"bp\">∀</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">›</span>\n  <span class=\"c1\">-- ?m.1242</span>\n  <span class=\"c1\">-- (x : ?m.1237) → ?m.1241 x</span>\n</code></pre></div>\n<p>Also, adding <code>instantiateMVars</code> didn't help.</p>",
        "id": 411015040,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1704288720
    },
    {
        "content": "<p>Does <code>‹∀ _ : ℕ, _›</code> work?</p>",
        "id": 411015259,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704288808
    },
    {
        "content": "<p>Nope</p>",
        "id": 411015294,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1704288826
    },
    {
        "content": "<p>and <code>‹∀ _ : ℕ, _ = _›</code>?</p>",
        "id": 411015449,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704288886
    },
    {
        "content": "<p>I think you're just hitting the limitations of higher order unification.</p>",
        "id": 411015486,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704288901
    },
    {
        "content": "<p>Also nope. Even going full <code>‹∀ x : Nat, x = x›</code> doesn't work.<br>\nBut writing something like <code>have g := ‹_›</code> figures out that <code>g</code> is <code>h</code>, so I don't think unification is the problem here.</p>",
        "id": 411015577,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1704288942
    },
    {
        "content": "<p>You code is using <code>Term.elabTerm</code>, if you use <code>Tactic.elabTerm</code> instead it works</p>",
        "id": 411017670,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1704289830
    },
    {
        "content": "<p>Thanks! What can <code>Tactic.elabTerm</code> do that <code>Term.elabTerm</code> can't? I.e. when should one use one over the other?</p>",
        "id": 411018220,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1704290081
    },
    {
        "content": "<p><code>Tactic.elabTerm</code> wraps <code>Term.elabTerm</code> in <code>withSynthesize</code>, which synthesizes delayed metavariables. <code>‹T›</code> is syntax for <code>(by assumption : T)</code> and <code>by</code> always creates a delayed metavariable, so you have to call <code>withSynthesize</code> or <code>synthesizeSyntheticMVarsNoPostponing</code> to actually get it to resolve</p>",
        "id": 411019031,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704290448
    }
]