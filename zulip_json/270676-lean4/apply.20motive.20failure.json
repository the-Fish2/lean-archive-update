[
    {
        "content": "<p>mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">natAbs_elim</span> <span class=\"o\">{</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hpos</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hneg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"bp\">-↑</span><span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"n\">Int.natAbs</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x.natAbs</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">natAbs_elim</span> <span class=\"n\">x</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Is there an easy way to get <code>apply</code> to find the correct motive here? I'm a bit disappointed that it doesn't just work, but ofc I have low expectations for an undecidable problem</p>",
        "id": 437407464,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1715071738
    },
    {
        "content": "<p>The way it's supposed to \"just work\" is to put <code>@[elab_as_elim]</code> on the theorem, but it doesn't work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unexpected</span> <span class=\"n\">eliminator</span> <span class=\"n\">resulting</span> <span class=\"n\">type</span>\n  <span class=\"n\">motive</span> <span class=\"n\">i.natAbs</span>\n</code></pre></div>",
        "id": 437408445,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1715072066
    },
    {
        "content": "<p>(I believe this is a regression relative to lean 3)</p>",
        "id": 437408540,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1715072106
    },
    {
        "content": "<p>do you know if there's a gh issue for it? otherwise i'll go digging</p>",
        "id": 437408803,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1715072186
    },
    {
        "content": "<p>I don't think so</p>",
        "id": 437408865,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1715072205
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/issues/4086\">https://github.com/leanprover/lean4/issues/4086</a></p>",
        "id": 437410609,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1715072769
    },
    {
        "content": "<p>Temporary workaround:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">elab_as_elim</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">natAbs_elim</span> <span class=\"o\">{</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">Int.natAbs</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hpos</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hneg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"bp\">-↑</span><span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">motive</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x.natAbs</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">x.natAbs</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n  <span class=\"n\">refine</span> <span class=\"n\">natAbs_elim</span> <span class=\"n\">n</span> <span class=\"n\">hn</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>which I can wrap into a tactic easily enough. Maybe this is not an unreasonable request for <code>elab_as_elim</code> to support!</p>",
        "id": 437411257,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1715073015
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"elim_int_natabs\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"o\">(</span>\n    <span class=\"n\">generalize</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Int.natAbs</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n    <span class=\"n\">refine</span> <span class=\"n\">Int.natAbs_elim</span> <span class=\"n\">n</span> <span class=\"n\">h</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">h</span>\n  <span class=\"o\">)</span> <span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x.natAbs</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">elim_int_natabs</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>daily love for lean macros</p>",
        "id": 437412222,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1715073412
    }
]