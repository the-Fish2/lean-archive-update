[
    {
        "content": "<p>I don't know how to prove the last example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"n\">matcha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"mi\">42</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False.elim</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">matcha</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">matcha</span><span class=\"o\">)</span>\n      <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n    <span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"n\">matcha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"mi\">42</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False.elim</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">matcha</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">matcha</span><span class=\"o\">)</span>\n      <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n    <span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">EReal</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"mi\">37</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"n\">mx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">⊥</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False.elim</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">mx</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">mx</span><span class=\"o\">)</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">⊤</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False.elim</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">mx</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">mx</span><span class=\"o\">)</span>\n      <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">r</span>\n    <span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">subst</span> <span class=\"n\">hx</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">EReal</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"mi\">37</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"n\">mx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"mi\">0</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">⊥</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False.elim</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">mx</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">mx</span><span class=\"o\">)</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">⊤</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False.elim</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">mx</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">mx</span><span class=\"o\">)</span>\n      <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">r</span>\n    <span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">--simp [hx] -- fails</span>\n  <span class=\"c1\">--subst hx  -- fails</span>\n  <span class=\"c1\">--aesop     -- fails</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 436028958,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1714393107
    },
    {
        "content": "<p><code>generalize x 0 = y</code> also seems to fail here</p>",
        "id": 436030590,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714393538
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">EReal</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"mi\">37</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"n\">mx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"mi\">0</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">⊥</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False.elim</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">mx</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">mx</span><span class=\"o\">)</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">⊤</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False.elim</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">mx</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">mx</span><span class=\"o\">)</span>\n      <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">r</span>\n    <span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">split</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"o\">(</span><span class=\"n\">rename_i</span> <span class=\"n\">w</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">w</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">)</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">injections</span>\n</code></pre></div>",
        "id": 436031123,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714393699
    },
    {
        "content": "<p>Note that <code>some (some 37)</code> is badly-typed / defeq abuse for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=EReal#doc\">docs#EReal</a>, it should be written <code>(37 : ℝ)</code>.</p>",
        "id": 436032309,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714394029
    },
    {
        "content": "<p>Actually, the <code>match</code> seems to be poorly-typed too; replacing it with <code>EReal.rec</code> leads to another goal state I can't solve:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">EReal</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">37</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">EReal.rec</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">mx</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False.elim</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">mx</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">mx</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"n\">hm</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">mx</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False.elim</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">mx</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">mx</span><span class=\"o\">)))</span> <span class=\"n\">_</span> <span class=\"n\">rfl</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n</code></pre></div>\n<p>(<code>induction x 0 using EReal.rec</code> fails with a complaint about <code>generalize</code> not working)</p>",
        "id": 436034015,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714394451
    },
    {
        "content": "<p>Is the following a good code?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">EReal</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">37</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"n\">mx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"mi\">0</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">⊥</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False.elim</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">mx</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">mx</span><span class=\"o\">)</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">⊤</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False.elim</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">mx</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">mx</span><span class=\"o\">)</span>\n      <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">r</span>\n    <span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">37</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">split</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rename_i</span> <span class=\"n\">hx0</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hx0</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">injections</span>\n</code></pre></div>",
        "id": 436038645,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1714395598
    },
    {
        "content": "<p>The <code>match</code> generates something bad, but usually putting a <code>match</code> in a statement is a bad idea anyway</p>",
        "id": 436041230,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714396245
    },
    {
        "content": "<p>Is there a way to make the <code>EReal.rec</code> version more readable? It will not be in the statement, only in the proof.</p>",
        "id": 436041444,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1714396305
    },
    {
        "content": "<p>defeq abuse only matters in statements</p>",
        "id": 436041617,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714396344
    },
    {
        "content": "<p>Here's a nicer version of that example, still using <code>match</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">EReal</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">37</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">hx</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">r</span>\n    <span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">37</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">split</span>\n  <span class=\"n\">injections</span>\n</code></pre></div>",
        "id": 436041752,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714396378
    },
    {
        "content": "<p>OK, so if it is an auxiliary definition inside a proof, I can proceed with (a full version of) what I posted?</p>",
        "id": 436041872,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1714396411
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> has marked this topic as resolved.</p>",
        "id": 436046771,
        "sender_full_name": "Notification Bot",
        "timestamp": 1714397628
    }
]