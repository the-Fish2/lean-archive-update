[
    {
        "content": "<p>I'm in a situation where I've defined a <code>notation</code>, I have done <code>set_options pp.notation true</code>, but I have goals that are still not being printed in their notations.</p>\n<p>Is there a kind of tracing I can turn on to debug the unexpander and see why this is failing, e.g. why it's not recognizing a certain term as matching the notation?</p>",
        "id": 435435194,
        "sender_full_name": "Joey Eremondi",
        "timestamp": 1714065887
    },
    {
        "content": "<p>Could you make a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ?</p>",
        "id": 435435676,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714066086
    },
    {
        "content": "<p>Or at least share your <code>notation</code>?</p>",
        "id": 435435695,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714066095
    },
    {
        "content": "<p>(The implicit answer here is \"no, there's no tracing you can enable to debug this\")</p>",
        "id": 435435757,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714066131
    },
    {
        "content": "<p>I'll try to make a MWE but might take some time, it's pretty deep in a complicated code base. Good to know about the tracing, thanks!</p>",
        "id": 435435817,
        "sender_full_name": "Joey Eremondi",
        "timestamp": 1714066158
    },
    {
        "content": "<p>If you share your <code>notation</code> command, even without a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, I might be able to tell you why it's not pretty printing.</p>",
        "id": 435435982,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714066217
    },
    {
        "content": "<p>This is what I'm working with right now:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">hygiene</span> <span class=\"n\">true</span>\n<span class=\"kd\">notation</span> <span class=\"bp\">Œì</span> <span class=\"s2\">\" ‚ä¢ \"</span> <span class=\"n\">t</span> <span class=\"s2\">\" ‚à∑‚àà \"</span> <span class=\"n\">T</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Derivation</span> <span class=\"bp\">Œì</span> <span class=\"n\">Mode.Synth</span> <span class=\"o\">(</span><span class=\"n\">ABT.singleton</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ABT.singleton</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n<span class=\"kd\">notation</span> <span class=\"bp\">Œì</span> <span class=\"s2\">\" ‚ä¢ \"</span> <span class=\"n\">T</span>  <span class=\"s2\">\" ‚àã‚à∑ \"</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Derivation</span> <span class=\"bp\">Œì</span> <span class=\"n\">Mode.Check</span> <span class=\"o\">(</span><span class=\"n\">ABT.pair</span> <span class=\"n\">t</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"n\">ABT.argsNil</span>\n<span class=\"kd\">notation</span> <span class=\"bp\">Œì</span> <span class=\"s2\">\" ‚ä¢ \"</span>  <span class=\"n\">t</span> <span class=\"s2\">\"‚à∑[\"</span> <span class=\"n\">h</span> <span class=\"s2\">\"]‚àà\"</span> <span class=\"n\">Ts</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Derivation</span> <span class=\"bp\">Œì</span> <span class=\"o\">(</span><span class=\"n\">Mode.CheckHead</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ABT.singleton</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">Ts</span>\n<span class=\"kd\">notation</span> <span class=\"bp\">Œì</span> <span class=\"s2\">\" ‚ä¢ \"</span> <span class=\"s2\">\"ùí∞‚àã\"</span> <span class=\"n\">T</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">Derivation</span> <span class=\"bp\">Œì</span> <span class=\"o\">(</span><span class=\"n\">Mode.CheckType</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ABT.singleton</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"n\">ABT.argsNil</span>\n<span class=\"kd\">notation</span> <span class=\"bp\">Œì</span> <span class=\"s2\">\" ‚ä¢ \"</span> <span class=\"n\">T</span> <span class=\"s2\">\"‚ààùí∞\"</span> <span class=\"n\">‚Ñì</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">Derivation</span> <span class=\"bp\">Œì</span> <span class=\"o\">(</span><span class=\"n\">Mode.SynthLevel</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ABT.singleton</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ABT.numLit</span> <span class=\"n\">‚Ñì</span><span class=\"o\">)</span>\n<span class=\"kd\">notation</span> <span class=\"bp\">Œì</span> <span class=\"s2\">\" ‚ä¢ \"</span> <span class=\"n\">Ts</span> <span class=\"s2\">\"‚àã‚à∑[\"</span> <span class=\"n\">n</span> <span class=\"s2\">\"] \"</span> <span class=\"n\">ts</span>\n  <span class=\"bp\">=&gt;</span> <span class=\"n\">Derivation</span> <span class=\"bp\">Œì</span> <span class=\"o\">(</span><span class=\"n\">Mode.CheckTele</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ABT.argsCons</span> <span class=\"n\">ts</span> <span class=\"o\">(</span><span class=\"n\">ABT.argsCons</span> <span class=\"n\">Ts</span> <span class=\"n\">ABT.argsNil</span><span class=\"o\">))</span> <span class=\"n\">ABT.argsNil</span>\n<span class=\"kd\">notation</span> <span class=\"bp\">Œì</span> <span class=\"s2\">\" ‚ä¢ \"</span> <span class=\"s2\">\"ùí∞‚àã[\"</span> <span class=\"n\">n</span> <span class=\"s2\">\"]\"</span> <span class=\"n\">T</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">Derivation</span> <span class=\"bp\">Œì</span> <span class=\"o\">(</span><span class=\"n\">Mode.IsTele</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ABT.argsCons</span> <span class=\"n\">T</span> <span class=\"n\">ABT.argsNil</span><span class=\"o\">)</span> <span class=\"n\">ABT.argsNil</span>\n</code></pre></div>\n<p>I've got something earlier that looks like this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span>\n  <span class=\"kd\">set_option</span> <span class=\"n\">hygiene</span> <span class=\"n\">false</span>\n  <span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">Œì</span> <span class=\"s2\">\" ‚ä¢ \"</span> <span class=\"n\">t</span> <span class=\"s2\">\" ‚à∑‚àà \"</span> <span class=\"n\">T</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Derivation</span> <span class=\"bp\">Œì</span> <span class=\"n\">Mode.Synth</span> <span class=\"o\">(</span><span class=\"n\">ABT.singleton</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ABT.singleton</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n  <span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">Œì</span> <span class=\"s2\">\" ‚ä¢ \"</span> <span class=\"n\">T</span>  <span class=\"s2\">\" ‚àã‚à∑ \"</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Derivation</span> <span class=\"bp\">Œì</span> <span class=\"n\">Mode.Check</span> <span class=\"o\">(</span><span class=\"n\">ABT.pair</span> <span class=\"n\">t</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"n\">ABT.argsNil</span>\n  <span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">Œì</span> <span class=\"s2\">\" ‚ä¢ \"</span>  <span class=\"n\">t</span> <span class=\"s2\">\"‚à∑[\"</span> <span class=\"n\">h</span> <span class=\"s2\">\"]‚àà\"</span> <span class=\"n\">Ts</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Derivation</span> <span class=\"bp\">Œì</span> <span class=\"o\">(</span><span class=\"n\">Mode.CheckHead</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ABT.singleton</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">Ts</span>\n  <span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">Œì</span> <span class=\"s2\">\" ‚ä¢ \"</span> <span class=\"s2\">\"ùí∞‚àã\"</span> <span class=\"n\">T</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">Derivation</span> <span class=\"bp\">Œì</span> <span class=\"o\">(</span><span class=\"n\">Mode.CheckType</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ABT.singleton</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"n\">ABT.argsNil</span>\n  <span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">Œì</span> <span class=\"s2\">\" ‚ä¢ \"</span> <span class=\"n\">T</span> <span class=\"s2\">\"‚ààùí∞\"</span> <span class=\"n\">‚Ñì</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">Derivation</span> <span class=\"bp\">Œì</span> <span class=\"o\">(</span><span class=\"n\">Mode.SynthLevel</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ABT.singleton</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ABT.fromNat</span> <span class=\"n\">‚Ñì</span><span class=\"o\">)</span>\n  <span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">Œì</span> <span class=\"s2\">\" ‚ä¢ \"</span> <span class=\"n\">Ts</span> <span class=\"s2\">\"‚àã‚à∑[\"</span> <span class=\"n\">n</span> <span class=\"s2\">\"] \"</span> <span class=\"n\">ts</span>\n    <span class=\"bp\">=&gt;</span> <span class=\"n\">Derivation</span> <span class=\"bp\">Œì</span> <span class=\"o\">(</span><span class=\"n\">Mode.CheckTele</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ABT.argsCons</span> <span class=\"n\">ts</span> <span class=\"o\">(</span><span class=\"n\">ABT.argsCons</span> <span class=\"n\">Ts</span> <span class=\"n\">ABT.argsNil</span><span class=\"o\">))</span> <span class=\"n\">ABT.argsNil</span>\n  <span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">Œì</span> <span class=\"s2\">\" ‚ä¢ \"</span> <span class=\"s2\">\"ùí∞‚àã[\"</span> <span class=\"n\">n</span> <span class=\"s2\">\"]\"</span> <span class=\"n\">T</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">Derivation</span> <span class=\"bp\">Œì</span> <span class=\"o\">(</span><span class=\"n\">Mode.IsTele</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ABT.argsCons</span> <span class=\"n\">T</span> <span class=\"n\">ABT.argsNil</span><span class=\"o\">)</span> <span class=\"n\">ABT.argsNil</span>\n  <span class=\"kd\">class</span> <span class=\"kd\">inductive</span> <span class=\"n\">Derivation</span> <span class=\"o\">:</span>\n    <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">}</span>\n    <span class=\"bp\">‚Üí</span> <span class=\"n\">PreCtx</span> <span class=\"n\">n</span>\n    <span class=\"bp\">‚Üí</span> <span class=\"o\">(</span><span class=\"n\">md</span> <span class=\"o\">:</span> <span class=\"n\">Mode</span><span class=\"o\">)</span>\n    <span class=\"bp\">‚Üí</span> <span class=\"o\">(</span><span class=\"n\">ins</span> <span class=\"o\">:</span> <span class=\"n\">Inputs</span> <span class=\"n\">n</span> <span class=\"n\">md</span><span class=\"o\">)</span>\n    <span class=\"bp\">‚Üí</span> <span class=\"o\">(</span><span class=\"n\">outs</span> <span class=\"o\">:</span> <span class=\"n\">Outputs</span> <span class=\"n\">n</span> <span class=\"n\">md</span><span class=\"o\">)</span>\n    <span class=\"bp\">‚Üí</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span> <span class=\"bp\">...</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>which allows me to use the notation for Derivation when defining the constructors of Derivation. So maybe it's causing a conflict between the two?</p>",
        "id": 435436393,
        "sender_full_name": "Joey Eremondi",
        "timestamp": 1714066372
    },
    {
        "content": "<p>One thing I'd check is whether in the context where the pretty printing isn't working, are all the names (like <code>Mode.Synth</code> and <code>ABT.singleton</code>) being pretty printed exactly how they appear in each <code>notation</code> definition? It could be that you have a different namespace open, and that can (unfortunately) stop unexpanders from working.</p>\n<p>Another thing I'd check is that each of the names are actually correct. (Maybe try <code>set_option hygiene false</code> while you're at it ‚Äî hopefully that doesn't change anything, but it's worth checking in the differential diagnosis.)</p>",
        "id": 435437810,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714066949
    },
    {
        "content": "<p>If you're using mathlib, you can switch from <code>notation</code> to <code>notation3</code>, which creates delaborators instead of unexpanders. It has some other features too, but it's otherwise a drop-in replacement. You don't need <code>set_option hygiene false</code> with it either if your <code>local notation3</code> is referring to <code>variable</code>s.</p>",
        "id": 435437867,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714066976
    },
    {
        "content": "<blockquote>\n<p>I've got something earlier that looks like this</p>\n</blockquote>\n<p>Are you defining the global <code>notation</code> outside the section where the <code>local notation</code> is defined? If so, then there shouldn't be a conflict.</p>",
        "id": 435438289,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714067138
    },
    {
        "content": "<blockquote>\n<p>Are you defining the global <code>notation</code> outside the section where the <code>local notation</code> is defined? If so, then there shouldn't be a conflict.</p>\n</blockquote>\n<p>Yes I am, so that shouldn't be the issue.<br>\nI am willing to bet it's something to do with namespaces like you say, I'll try switching some things around and seeing if that helps. Thanks!</p>",
        "id": 435438455,
        "sender_full_name": "Joey Eremondi",
        "timestamp": 1714067185
    },
    {
        "content": "<p>Some things like <code>ABT.pair</code> and <code>ABT.singleton</code> are abbrevs, so maybe if I expand those manually it will help</p>",
        "id": 435439042,
        "sender_full_name": "Joey Eremondi",
        "timestamp": 1714067378
    },
    {
        "content": "<p>Yep, looks like those <code>abbrev</code> defs were messing things up. Thanks!</p>",
        "id": 435439517,
        "sender_full_name": "Joey Eremondi",
        "timestamp": 1714067539
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> One more question, do you know if notations can be nested, and how that interacts with the unexpander? E.g. can I use macros in the RHS of defining a notation, but still have the unexpander work for the whole thing?</p>",
        "id": 435440441,
        "sender_full_name": "Joey Eremondi",
        "timestamp": 1714067840
    },
    {
        "content": "<p><code>notation</code> uses the RHS as a pattern for the unexpander in a fairly direct way.</p>\n<p>The <code>notation3</code> command in mathlib can handle notations and macros in the RHS.</p>",
        "id": 435441416,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714068164
    },
    {
        "content": "<p>Though <code>notation</code> does work if there's notation/macros in the RHS that appears in the arguments to a top-level function, and that notation/macro itself is pretty printable.</p>",
        "id": 435441693,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714068266
    },
    {
        "content": "<p>Looks like notation3 does exactly what I want, thanks for the pointer and all the help!</p>",
        "id": 435441734,
        "sender_full_name": "Joey Eremondi",
        "timestamp": 1714068289
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"384488\">Joey Eremondi</span> has marked this topic as resolved.</p>",
        "id": 435441743,
        "sender_full_name": "Notification Bot",
        "timestamp": 1714068292
    }
]