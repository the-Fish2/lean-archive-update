[
    {
        "content": "<p>at lines 214 and 228</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Init.Data.List</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Data.List</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Dedup</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Pairwise</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Join</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Infix</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Lattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Lemmas</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Bool.AllAny</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Bool.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Classical</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">And</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Or</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Not</span> <span class=\"o\">:</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span>\n<span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">normalizable</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">reducible</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">toProp</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pred</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">And</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span>  <span class=\"n\">toProp</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">toProp</span> <span class=\"n\">b</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Or</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">toProp</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">toProp</span> <span class=\"n\">b</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Not</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">toProp</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">toProp_not</span> <span class=\"o\">:</span> <span class=\"n\">toProp</span> <span class=\"o\">(</span><span class=\"n\">Not</span> <span class=\"n\">n₁</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"n\">toProp</span> <span class=\"n\">n₁</span> <span class=\"o\">:=</span> <span class=\"n\">Iff.rfl</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">toProp_and</span> <span class=\"o\">:</span> <span class=\"n\">toProp</span> <span class=\"o\">(</span><span class=\"n\">And</span> <span class=\"n\">n₁</span> <span class=\"n\">n₂</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">toProp</span> <span class=\"n\">n₁</span> <span class=\"bp\">∧</span> <span class=\"n\">toProp</span> <span class=\"n\">n₂</span> <span class=\"o\">:=</span> <span class=\"n\">Iff.rfl</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">toProp_or</span> <span class=\"o\">:</span> <span class=\"n\">toProp</span> <span class=\"o\">(</span><span class=\"n\">Or</span> <span class=\"n\">n₁</span> <span class=\"n\">n₂</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">toProp</span> <span class=\"n\">n₁</span> <span class=\"bp\">∨</span> <span class=\"n\">toProp</span> <span class=\"n\">n₂</span> <span class=\"o\">:=</span> <span class=\"n\">Iff.rfl</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">toProp_atom</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">toProp</span> <span class=\"o\">(</span><span class=\"n\">atom</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">pred</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">Iff.rfl</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">subnormalize</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Or</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[[</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">n</span><span class=\"o\">],[</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">n</span><span class=\"o\">],[</span><span class=\"n\">Not</span> <span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">Not</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">Not</span> <span class=\"n\">n</span><span class=\"o\">]]</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">List.append</span> <span class=\"o\">(</span><span class=\"n\">subnormalize</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">subnormalize</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"n\">And</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[[</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">n</span><span class=\"o\">],[</span><span class=\"n\">Not</span> <span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">Not</span> <span class=\"n\">n</span><span class=\"o\">],[</span><span class=\"n\">Not</span> <span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">Not</span> <span class=\"n\">n</span><span class=\"o\">]]</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">List.append</span> <span class=\"o\">(</span><span class=\"n\">subnormalize</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">subnormalize</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Not</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[[</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"n\">Not</span> <span class=\"n\">i</span><span class=\"o\">],[</span><span class=\"n\">Not</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">]]</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">subnormalize</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[[[</span><span class=\"n\">n</span><span class=\"o\">],[</span><span class=\"n\">Not</span> <span class=\"n\">n</span><span class=\"o\">]]]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">normalize</span> <span class=\"o\">:</span>  <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">o</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"o\">[[</span><span class=\"n\">o</span><span class=\"o\">]]</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">subnormalize</span> <span class=\"n\">o</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">nStrip</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Not</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">false</span><span class=\"o\">,</span><span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">true</span><span class=\"o\">,</span><span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">booleanize</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">))))</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n  <span class=\"n\">n.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">y.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">z</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nStrip</span> <span class=\"n\">z</span><span class=\"o\">)))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">normalizel</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n  <span class=\"n\">booleanize</span> <span class=\"o\">(</span><span class=\"n\">normalize</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">wToProp</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">w.fst</span> <span class=\"k\">then</span> <span class=\"n\">toProp</span> <span class=\"n\">w.snd</span> <span class=\"k\">else</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">toProp</span> <span class=\"n\">w.snd</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sToProp</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">s.all</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">wToProp</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">gToProp</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">g.any</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sToProp</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">nToProp</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">))))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">n.all</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">gToProp</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fToProp</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">))))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">n.all</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.any</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">y.all</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">z</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">toProp</span> <span class=\"n\">z</span><span class=\"o\">)))</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">nStrip_equiv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">,</span> <span class=\"n\">toProp</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;-&gt;</span> <span class=\"n\">wToProp</span> <span class=\"o\">(</span><span class=\"n\">nStrip</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">nStrip</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">wToProp</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">wToProp</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">wToProp</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">wToProp</span>\n  <span class=\"n\">simp</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">booleanize_eqiv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">))),</span> <span class=\"n\">fToProp</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;-&gt;</span> <span class=\"n\">nToProp</span> <span class=\"o\">(</span><span class=\"n\">booleanize</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">nToProp</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">fToProp</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">booleanize</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">gToProp</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">sToProp</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">nStrip_equiv</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">andGateTaut</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">Classical.em</span> <span class=\"n\">a</span>\n  <span class=\"n\">cases</span> <span class=\"n\">Classical.em</span> <span class=\"n\">b</span>\n  <span class=\"n\">right</span>\n  <span class=\"n\">right</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">right</span>\n  <span class=\"n\">left</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">push_neg</span>\n  <span class=\"n\">intro</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">left</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">and_comm</span><span class=\"o\">]</span>\n  <span class=\"n\">push_neg</span>\n  <span class=\"n\">intro</span>\n  <span class=\"n\">assumption</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">orGateTaut</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">∨</span> <span class=\"o\">((</span><span class=\"bp\">¬</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">cases</span> <span class=\"n\">Classical.em</span> <span class=\"n\">a</span>\n  <span class=\"n\">left</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">left</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">right</span>\n  <span class=\"n\">cases</span> <span class=\"n\">Classical.em</span> <span class=\"n\">b</span>\n  <span class=\"n\">left</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">right</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">right</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">push_neg</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">assumption</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">all_and</span> <span class=\"o\">:</span> <span class=\"n\">List.all</span> <span class=\"o\">(</span> <span class=\"n\">a</span> <span class=\"bp\">++</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;-&gt;</span> <span class=\"n\">List.all</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">List.all</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">intro</span> <span class=\"n\">ha</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">intro</span> <span class=\"n\">b</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hb</span>\n  <span class=\"n\">apply</span> <span class=\"n\">ha</span>\n  <span class=\"n\">left</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hb</span>\n  <span class=\"n\">intro</span> <span class=\"n\">c</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hc</span>\n  <span class=\"n\">apply</span> <span class=\"n\">ha</span>\n  <span class=\"n\">right</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hc</span>\n  <span class=\"n\">intro</span> <span class=\"n\">ha</span>\n  <span class=\"n\">intro</span> <span class=\"n\">b</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hb</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hb</span>\n  <span class=\"n\">apply</span> <span class=\"n\">ha.left</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">apply</span> <span class=\"n\">ha.right</span>\n  <span class=\"n\">assumption</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">subnormal</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">,</span> <span class=\"n\">fToProp</span> <span class=\"o\">(</span><span class=\"n\">subnormalize</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">k</span> <span class=\"n\">l</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">subnormalize</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">fToProp</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">toProp</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Classical.em</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">subnormalize</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">fToProp</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.all_cons</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">List.any_cons</span><span class=\"o\">,</span> <span class=\"n\">List.all_cons</span><span class=\"o\">,</span> <span class=\"n\">List.all_nil</span><span class=\"o\">,</span> <span class=\"n\">Bool.and_true</span><span class=\"o\">,</span> <span class=\"n\">List.any_nil</span><span class=\"o\">,</span>\n    <span class=\"n\">Bool.or_false</span><span class=\"o\">,</span> <span class=\"n\">Bool.and_eq_true</span><span class=\"o\">,</span> <span class=\"n\">Bool.or_eq_true</span><span class=\"o\">,</span> <span class=\"n\">decide_eq_true_eq</span><span class=\"o\">,</span>\n    <span class=\"n\">List.mem_append</span><span class=\"o\">,</span> <span class=\"n\">List.any_eq_true</span><span class=\"o\">]</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">toProp_not</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">toProp_and</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">andGateTaut</span> <span class=\"o\">(</span><span class=\"n\">toProp</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">toProp</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"c1\">--function expected...</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">all_and</span><span class=\"o\">]</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">fToProp</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">subnormalize</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.all_cons</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">List.any_cons</span><span class=\"o\">,</span> <span class=\"n\">List.all_cons</span><span class=\"o\">,</span> <span class=\"n\">toProp_or</span><span class=\"o\">,</span> <span class=\"n\">List.all_nil</span><span class=\"o\">,</span> <span class=\"n\">Bool.and_true</span><span class=\"o\">,</span> <span class=\"n\">toProp_not</span><span class=\"o\">,</span>\n    <span class=\"n\">List.any_nil</span><span class=\"o\">,</span> <span class=\"n\">Bool.or_false</span><span class=\"o\">,</span> <span class=\"n\">List.append_eq</span><span class=\"o\">,</span> <span class=\"n\">Bool.and_eq_true</span><span class=\"o\">,</span> <span class=\"n\">Bool.or_eq_true</span><span class=\"o\">,</span>\n    <span class=\"n\">decide_eq_true_eq</span><span class=\"o\">,</span> <span class=\"n\">List.mem_append</span><span class=\"o\">,</span> <span class=\"n\">List.any_eq_true</span><span class=\"o\">]</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">toProp_not</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">toProp_or</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">orGateTaut</span> <span class=\"o\">(</span><span class=\"n\">toProp</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">toProp</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"c1\">--function expected...</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">all_and</span><span class=\"o\">]</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">fToProp</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">subnormalize</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.all_cons</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">List.any_cons</span><span class=\"o\">,</span> <span class=\"n\">List.all_cons</span><span class=\"o\">,</span> <span class=\"n\">toProp_not</span><span class=\"o\">,</span> <span class=\"n\">List.all_nil</span><span class=\"o\">,</span> <span class=\"n\">Bool.and_true</span><span class=\"o\">,</span> <span class=\"n\">Bool.and_self</span><span class=\"o\">,</span>\n    <span class=\"n\">not_not</span><span class=\"o\">,</span> <span class=\"n\">List.any_nil</span><span class=\"o\">,</span> <span class=\"n\">Bool.or_false</span><span class=\"o\">,</span> <span class=\"n\">Bool.and_eq_true</span><span class=\"o\">,</span> <span class=\"n\">Bool.or_eq_true</span><span class=\"o\">,</span> <span class=\"n\">decide_eq_true_eq</span><span class=\"o\">,</span>\n     <span class=\"n\">List.any_eq_true</span><span class=\"o\">]</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">cases</span> <span class=\"n\">Classical.em</span> <span class=\"o\">(</span><span class=\"n\">toProp</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n  <span class=\"n\">right</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">left</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">fToProp</span> <span class=\"n\">at</span> <span class=\"n\">l</span>\n  <span class=\"n\">exact</span> <span class=\"n\">l</span>\n</code></pre></div>",
        "id": 423260957,
        "sender_full_name": "Jared green",
        "timestamp": 1708865093
    },
    {
        "content": "<p><code>normalizable.andGateTaut {a b : Prop} : ¬a ∧ ¬(a ∧ b) ∨ ¬b ∧ ¬(a ∧ b) ∨ a ∧ b ∧ a ∧ b</code>. Do you understand what the <code>{a b : Prop}</code> brackets mean? Take a look at the \"implicit arguments\" section in Chapter 2 of <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/\">#tpil</a></p>",
        "id": 423262033,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708866180
    },
    {
        "content": "<p>placing underscores gets the same message.</p>",
        "id": 423262332,
        "sender_full_name": "Jared green",
        "timestamp": 1708866471
    },
    {
        "content": "<p>it does close the goal, so i wonder if the messages can be ignored.</p>",
        "id": 423262466,
        "sender_full_name": "Jared green",
        "timestamp": 1708866595
    },
    {
        "content": "<p>Did you take a look at the section I mentioned above yet?</p>",
        "id": 423262521,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708866612
    },
    {
        "content": "<p>You can never ignore errors btw. Any message (such as \"no goals\") after an error is meaningless.</p>",
        "id": 423262551,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708866652
    },
    {
        "content": "<p>i read it.</p>",
        "id": 423262571,
        "sender_full_name": "Jared green",
        "timestamp": 1708866675
    },
    {
        "content": "<p>So you understand the error now?</p>",
        "id": 423262574,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708866685
    },
    {
        "content": "<p>no</p>",
        "id": 423262578,
        "sender_full_name": "Jared green",
        "timestamp": 1708866697
    },
    {
        "content": "<p>Your definition of <code>andGateTaut</code> makes the inputs implicit. You are attempting to give them explicitly.</p>",
        "id": 423262636,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708866725
    },
    {
        "content": "<p>what should the line look like?</p>",
        "id": 423262663,
        "sender_full_name": "Jared green",
        "timestamp": 1708866762
    },
    {
        "content": "<p>not giving them results in a type mismatch.</p>",
        "id": 423262706,
        "sender_full_name": "Jared green",
        "timestamp": 1708866812
    },
    {
        "content": "<p>Well you have two choices. Either you change the definition of <code>andGateTaut</code> to make the inputs explicit, or you don't give the inputs at all and hope that lean can infer them.</p>",
        "id": 423262715,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708866822
    },
    {
        "content": "<p>Oh there's a third choice: you use the <code>(a := toProp b)</code> syntax</p>",
        "id": 423262794,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708866881
    },
    {
        "content": "<p>To better understand what's going on, I recommend that you <code>set_option autoImplicit false</code> and also the other one whose name I don't remember -- something like <code>set_option weakAutoImplicit false</code>. These are options which default to true but I have a mountain of evidence that they're very confusing for beginners. Once you do this your code will break because all the times you've used a variable without declaring it you'll now get an error, forcing you to add lines like <code>variable (a : Prop)</code>. When you add these lines you'll be forced to think about brackets, and this will help you understand what's going on</p>",
        "id": 423263093,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708867110
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"394803\">Jared green</span> <a href=\"#narrow/stream/270676-lean4/topic/error.20for.20theorem.2C.20expects.20function/near/423262706\">said</a>:</p>\n<blockquote>\n<p>not giving them results in a type mismatch.</p>\n</blockquote>\n<p>This probably means that your proof is incorrect.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">exact</span> <span class=\"n\">andGateTaut</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">toProp</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">toProp</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(which is my understanding of what you're trying to say) gives the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">andGateTaut</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">¬</span><span class=\"n\">toProp</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">toProp</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">toProp</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">∨</span>\n    <span class=\"bp\">¬</span><span class=\"n\">toProp</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">toProp</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">toProp</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">toProp</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">toProp</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">toProp</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">toProp</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">toProp</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">toProp</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">toProp</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">toProp</span> <span class=\"n\">c</span> <span class=\"bp\">∨</span>\n    <span class=\"bp\">¬</span><span class=\"n\">toProp</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">toProp</span> <span class=\"o\">(</span><span class=\"n\">Not</span> <span class=\"o\">(</span><span class=\"n\">And</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"bp\">∨</span> <span class=\"n\">toProp</span> <span class=\"o\">(</span><span class=\"n\">Not</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">toProp</span> <span class=\"o\">(</span><span class=\"n\">Not</span> <span class=\"o\">(</span><span class=\"n\">And</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>so as well as your issue with implicit/explicit functions, you have this problem too (in fact my impression is that this is your main problem).</p>",
        "id": 423263922,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708868017
    },
    {
        "content": "<p>so it turns out clause order matters... problem solved.</p>",
        "id": 423265178,
        "sender_full_name": "Jared green",
        "timestamp": 1708868955
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"394803\">Jared green</span> <a href=\"#narrow/stream/270676-lean4/topic/error.20for.20theorem.2C.20expects.20function/near/423262466\">said</a>:</p>\n<blockquote>\n<p>it does close the goal, so i wonder if the messages can be ignored.</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/error.20for.20theorem.2C.20expects.20function/near/423262551\">said</a>:</p>\n<blockquote>\n<p>You can never ignore errors btw. Any message (such as \"no goals\") after an error is meaningless.</p>\n</blockquote>\n<p>When lean encounters an error, it liberally introduces <code>sorry</code> for the sake of \"let's try to keep parsing this\".  This does mean that you can sometimes catch more than one error.  However, any type checking claim (e.g. No goals) is meaningless.</p>",
        "id": 423289002,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708892386
    }
]