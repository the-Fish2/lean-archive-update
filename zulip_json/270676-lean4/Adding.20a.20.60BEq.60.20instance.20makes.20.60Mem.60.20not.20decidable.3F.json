[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"c1\">-- this works</span>\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"bp\">∈</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">decide</span>\n\n\n<span class=\"kn\">inductive</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Foo</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Foo</span>\n<span class=\"n\">deriving</span><span class=\"w\"> </span><span class=\"n\">DecidableEq</span>\n\n<span class=\"c1\">-- this also works</span>\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"bp\">∈</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Foo</span><span class=\"bp\">.</span><span class=\"n\">A</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">decide</span>\n\n\n<span class=\"kn\">inductive</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Bar</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Bar</span>\n<span class=\"n\">deriving</span><span class=\"w\"> </span><span class=\"n\">DecidableEq</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">BEq</span>\n\n<span class=\"c1\">-- this does not work!</span>\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"bp\">∈</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Bar</span><span class=\"bp\">.</span><span class=\"n\">C</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">decide</span>\n<span class=\"c1\">-- failed to synthesize Decidable (Bar.C ∈ [Bar.C])</span>\n</code></pre></div>",
        "id": 444116327,
        "sender_full_name": "David Renshaw",
        "timestamp": 1718147438
    },
    {
        "content": "<p>My hypothesis is that the <code>BEq</code> instance is sending typeclass synthesis down a dead end.</p>",
        "id": 444116409,
        "sender_full_name": "David Renshaw",
        "timestamp": 1718147498
    },
    {
        "content": "<p>But this seems surprising and bad.</p>",
        "id": 444116421,
        "sender_full_name": "David Renshaw",
        "timestamp": 1718147514
    },
    {
        "content": "<p>(<code>simp</code> works to close the proof in this particular case, but not in a larger example where I first encountered the problem)</p>",
        "id": 444116661,
        "sender_full_name": "David Renshaw",
        "timestamp": 1718147665
    },
    {
        "content": "<p>According to <code>set_option trace.Meta.synthInstance true</code>, the first one works because of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.instDecidableMemOfLawfulBEq#doc\">docs#List.instDecidableMemOfLawfulBEq</a></p>\n<p>That suggests that the reason the second one fails to work is that the additional <code>BEq</code> instance is overriding the one coming from <code>DecidableEq</code>, so it fails to derive a <code>LawfulBEq</code> instance. (There's a <code>LawfulBEq</code> instance coming from <code>DecidableEq</code>, but it's in terms of <code>DecidableEq</code>'s <code>BEq</code> and not the derived <code>BEq</code>.)</p>\n<p>Three ways to fix this: (1) make sure you don't have conflicting <code>Decidable</code> and <code>BEq</code> instances (2) create a version of <code>List.instDecidableMemOfLawfulBEq</code> for Decidable instances or (3) somehow get the derive handlers to work together so that the <code>BEq</code> from the <code>Decidable</code> instance is defeq to the <code>BEq</code> one.</p>\n<p>I guess there's also (4) get the <code>BEq</code> handler to try to derive <code>LawfulBEq</code> as well (or have a <code>LawfulBEq</code> derive handler)</p>",
        "id": 444117818,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718148096
    },
    {
        "content": "<p>I think I'm going to (5) remove the <code>deriving BEq</code> from my types.</p>",
        "id": 444118115,
        "sender_full_name": "David Renshaw",
        "timestamp": 1718148258
    },
    {
        "content": "<p>Ah, that's what I meant by (1), you can either remove <code>DerivableEq</code> and then add your own <code>LawfulBEq</code> instance, or remove the <code>BEq</code></p>",
        "id": 444118452,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718148503
    }
]