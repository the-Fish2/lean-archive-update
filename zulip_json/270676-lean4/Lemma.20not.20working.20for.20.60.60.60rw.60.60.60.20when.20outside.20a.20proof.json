[
    {
        "content": "<p>I'm asking this question here, because it looks like more of a Lean question than a math question per se.</p>\n<p>I'm trying to shorten a proof by extracting a lemma that is used twice in it, rather than copy-pasting code. Except that if I state and prove the lemma outside of my bigger proof, <code>rw</code> refuses to take it (so does <code>erw</code>), with a <code>did not find instance of the pattern</code> error. But it should be the same statement, shouldn't it ?<br>\nHere is a MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Multilinear.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M₁</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M₂</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">ι</span><span class=\"o\">]</span>\n<span class=\"o\">[(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">M₁</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- This is my rewriting lemma.</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">truc</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">M₁</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">M₁</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">j</span> <span class=\"bp\">↦</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"k\">then</span> <span class=\"n\">Function.update</span> <span class=\"n\">z</span> <span class=\"n\">i</span> <span class=\"n\">c</span> <span class=\"o\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"k\">else</span> <span class=\"n\">x</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"n\">Function.update</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"k\">then</span> <span class=\"n\">z</span> <span class=\"o\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"k\">else</span> <span class=\"n\">x</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"n\">j</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">i.1</span>\n  <span class=\"bp\">.</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">Function.update_same</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Subtype.coe_prop</span><span class=\"o\">,</span> <span class=\"n\">Function.update_same</span><span class=\"o\">,</span> <span class=\"n\">dite_eq_ite</span><span class=\"o\">,</span> <span class=\"n\">ite_true</span><span class=\"o\">]</span>\n  <span class=\"bp\">.</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Function.update_noteq</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span>\n    <span class=\"bp\">.</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"n\">dite_true</span><span class=\"o\">]</span>\n      <span class=\"k\">have</span> <span class=\"n\">h''</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">h'</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n        <span class=\"k\">fun</span> <span class=\"n\">he</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">apply_fun</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.1</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">he</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">he</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Function.update_noteq</span> <span class=\"n\">h''</span><span class=\"o\">]</span>\n    <span class=\"bp\">.</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"n\">dite_false</span><span class=\"o\">]</span>\n\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">AddCommMonoid</span> <span class=\"o\">(</span><span class=\"n\">M₁</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M₂</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">M₁</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M₂</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">toMultilinearMap_set</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">MultilinearMap</span> <span class=\"n\">R</span> <span class=\"n\">M₁</span> <span class=\"n\">M₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">M₁</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">[(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n    <span class=\"n\">MultilinearMap</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">M₁</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">M₂</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"k\">then</span> <span class=\"n\">z</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"k\">else</span> <span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"n\">map_add'</span> <span class=\"n\">z</span> <span class=\"n\">i</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span>\n<span class=\"c1\">-- This is apparently the exact same thing as the rewriting lemma, except it is now a `have` statement inside the proof.</span>\n    <span class=\"k\">have</span> <span class=\"n\">machin</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">M₁</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n        <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">j</span> <span class=\"bp\">↦</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"k\">then</span> <span class=\"n\">Function.update</span> <span class=\"n\">z</span> <span class=\"n\">i</span> <span class=\"n\">c</span> <span class=\"o\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"k\">else</span> <span class=\"n\">x</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n        <span class=\"n\">Function.update</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"k\">then</span> <span class=\"n\">z</span> <span class=\"o\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"k\">else</span> <span class=\"n\">x</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">intro</span> <span class=\"n\">c</span><span class=\"bp\">;</span> <span class=\"n\">ext</span> <span class=\"n\">j</span>\n      <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">i.1</span>\n      <span class=\"bp\">.</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">Function.update_same</span><span class=\"o\">]</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Subtype.coe_prop</span><span class=\"o\">,</span> <span class=\"n\">Function.update_same</span><span class=\"o\">,</span> <span class=\"n\">dite_eq_ite</span><span class=\"o\">,</span> <span class=\"n\">ite_true</span><span class=\"o\">]</span>\n      <span class=\"bp\">.</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Function.update_noteq</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n        <span class=\"n\">by_cases</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span>\n        <span class=\"bp\">.</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"n\">dite_true</span><span class=\"o\">]</span>\n          <span class=\"k\">have</span> <span class=\"n\">h''</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">h'</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n            <span class=\"k\">fun</span> <span class=\"n\">he</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">apply_fun</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.1</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">he</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">he</span>\n          <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Function.update_noteq</span> <span class=\"n\">h''</span><span class=\"o\">]</span>\n        <span class=\"bp\">.</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"n\">dite_false</span><span class=\"o\">]</span>\n <span class=\"c1\">-- End of rewriting lemma.</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">machin</span> <span class=\"n\">b</span><span class=\"o\">]</span>  <span class=\"c1\">-- This works !</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">truc</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:=</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M₁</span> <span class=\"o\">:=</span> <span class=\"n\">M₁</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"n\">i</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"c1\">-- This does not. :-(</span>\n    <span class=\"c1\">-- Error message : tactic 'rewrite' failed, did not find instance of the pattern in the target expression</span>\n    <span class=\"c1\">--                 fun j ↦ if h : j ∈ s then Function.update z i ?c { val := j, property := h } else x j</span>\n  <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 409191475,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1703080811
    },
    {
        "content": "<p><code>map_add'</code> puts a <code>DecidableEq ↑s</code> hypothesis in your context</p>",
        "id": 409192806,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1703081228
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/LinearAlgebra/Multilinear/Basic.html#Implementation-notes\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/LinearAlgebra/Multilinear/Basic.html#Implementation-notes</a> has some background</p>",
        "id": 409193156,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1703081333
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Multilinear.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M₁</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M₂</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">ι</span><span class=\"o\">]</span>\n<span class=\"o\">[(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">M₁</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- This is my rewriting lemma.</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">truc</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">M₁</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">M₁</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">j</span> <span class=\"bp\">↦</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"k\">then</span> <span class=\"n\">Function.update</span> <span class=\"n\">z</span> <span class=\"n\">i</span> <span class=\"n\">c</span> <span class=\"o\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"k\">else</span> <span class=\"n\">x</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"n\">Function.update</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"k\">then</span> <span class=\"n\">z</span> <span class=\"o\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"k\">else</span> <span class=\"n\">x</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"n\">j</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">i.1</span>\n  <span class=\"bp\">.</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">Function.update_same</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Subtype.coe_prop</span><span class=\"o\">,</span> <span class=\"n\">Function.update_same</span><span class=\"o\">,</span> <span class=\"n\">dite_eq_ite</span><span class=\"o\">,</span> <span class=\"n\">ite_true</span><span class=\"o\">]</span>\n  <span class=\"bp\">.</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Function.update_noteq</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span>\n    <span class=\"bp\">.</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"n\">dite_true</span><span class=\"o\">]</span>\n      <span class=\"k\">have</span> <span class=\"n\">h''</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">h'</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n        <span class=\"k\">fun</span> <span class=\"n\">he</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">apply_fun</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.1</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">he</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">he</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Function.update_noteq</span> <span class=\"n\">h''</span><span class=\"o\">]</span>\n    <span class=\"bp\">.</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"n\">dite_false</span><span class=\"o\">]</span>\n\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">AddCommMonoid</span> <span class=\"o\">(</span><span class=\"n\">M₁</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M₂</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">M₁</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M₂</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">toMultilinearMap_set</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">MultilinearMap</span> <span class=\"n\">R</span> <span class=\"n\">M₁</span> <span class=\"n\">M₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">M₁</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">[(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n    <span class=\"n\">MultilinearMap</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">M₁</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">M₂</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"k\">then</span> <span class=\"n\">z</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"k\">else</span> <span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"n\">map_add'</span> <span class=\"n\">z</span> <span class=\"n\">i</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span>\n    <span class=\"n\">rename_i</span> <span class=\"n\">inst</span>\n    <span class=\"n\">obtain</span> <span class=\"n\">rfl</span> <span class=\"o\">:=</span> <span class=\"n\">Subsingleton.elim</span> <span class=\"n\">inst</span> <span class=\"n\">Subtype.instDecidableEqSubtype</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">truc</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:=</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M₁</span> <span class=\"o\">:=</span> <span class=\"n\">M₁</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"n\">i</span> <span class=\"n\">a</span><span class=\"o\">]</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 409193529,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1703081447
    },
    {
        "content": "<p>Or:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Multilinear.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M₁</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M₂</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">ι</span><span class=\"o\">]</span>\n<span class=\"o\">[(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">M₁</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- This is my rewriting lemma.</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">truc</span>\n    <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"bp\">↑</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"c1\">-- Redundant hypothesis, but makes the lemma more general</span>\n    <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">M₁</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">M₁</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">j</span> <span class=\"bp\">↦</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"k\">then</span> <span class=\"n\">Function.update</span> <span class=\"n\">z</span> <span class=\"n\">i</span> <span class=\"n\">c</span> <span class=\"o\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"k\">else</span> <span class=\"n\">x</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"n\">Function.update</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"k\">then</span> <span class=\"n\">z</span> <span class=\"o\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"k\">else</span> <span class=\"n\">x</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"n\">j</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">i.1</span>\n  <span class=\"bp\">.</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">Function.update_same</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Subtype.coe_prop</span><span class=\"o\">,</span> <span class=\"n\">Function.update_same</span><span class=\"o\">,</span> <span class=\"n\">dite_eq_ite</span><span class=\"o\">,</span> <span class=\"n\">ite_true</span><span class=\"o\">]</span>\n  <span class=\"bp\">.</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Function.update_noteq</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span>\n    <span class=\"bp\">.</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"n\">dite_true</span><span class=\"o\">]</span>\n      <span class=\"k\">have</span> <span class=\"n\">h''</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">h'</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n        <span class=\"k\">fun</span> <span class=\"n\">he</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">apply_fun</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.1</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">he</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">he</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Function.update_noteq</span> <span class=\"n\">h''</span><span class=\"o\">]</span>\n    <span class=\"bp\">.</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"n\">dite_false</span><span class=\"o\">]</span>\n\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">AddCommMonoid</span> <span class=\"o\">(</span><span class=\"n\">M₁</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M₂</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">M₁</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M₂</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">toMultilinearMap_set</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">MultilinearMap</span> <span class=\"n\">R</span> <span class=\"n\">M₁</span> <span class=\"n\">M₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">M₁</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">[(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n    <span class=\"n\">MultilinearMap</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">M₁</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">M₂</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"k\">then</span> <span class=\"n\">z</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"k\">else</span> <span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"n\">map_add'</span> <span class=\"n\">z</span> <span class=\"n\">i</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">truc</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:=</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M₁</span> <span class=\"o\">:=</span> <span class=\"n\">M₁</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"n\">i</span> <span class=\"n\">a</span><span class=\"o\">]</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 409193707,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1703081507
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/270676-lean4/topic/Lemma.20not.20working.20for.20.60.60.60rw.60.60.60.20when.20outside.20a.20proof/near/409193156\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/LinearAlgebra/Multilinear/Basic.html#Implementation-notes\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/LinearAlgebra/Multilinear/Basic.html#Implementation-notes</a> has some background</p>\n</blockquote>\n<p>Ooooh, that's what they meant ! To be honest, I would not have known what to do even with that. Thank you very much !</p>",
        "id": 409194386,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1703081683
    }
]