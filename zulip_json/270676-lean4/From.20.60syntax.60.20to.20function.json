[
    {
        "content": "<p>In the following code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">foo</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">foo.stx₁</span><span class=\"o\">)</span> <span class=\"n\">term</span> <span class=\"s2\">\" foo \"</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">foo</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mkFooStx₁</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CoreM</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"bp\">|$</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"n\">foo</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Is there any way to automate the definition of <code>mkFooStx₁</code> (or even better of a non-monadic version of it)? The <code>syntax</code> command does not seem to generate such a function.</p>",
        "id": 421940923,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708118788
    },
    {
        "content": "<p>Regarding the non-monadic version; if you write it as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">mkFooStx₁</span> <span class=\"o\">{</span><span class=\"n\">m</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonadRef</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonadQuotation</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"bp\">|$</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"n\">foo</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>then the caller can always escape the monadicity with <code>Unhygienic.run</code></p>",
        "id": 421945507,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708120902
    },
    {
        "content": "<p>Do you mean </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">mkFooStx₁'</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">foo</span> <span class=\"o\">:=</span>\n<span class=\"n\">Unhygienic.run</span> <span class=\"o\">(</span><span class=\"n\">mkFooStx₁</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 421946022,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708121142
    },
    {
        "content": "<p>What is this new magic trick?</p>",
        "id": 421946115,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708121181
    },
    {
        "content": "<p>It seems that <code>Unhygienic</code> is just some readerT monad on top of a state monad, and the instances Eric mentioned let you run such things in this monad. The direct non-monadic version works as well:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">mkFooStx₁</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">foo</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Unhygienic.run</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"bp\">|$</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"n\">foo</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>this is a nice trick!</p>",
        "id": 421949742,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1708123088
    },
    {
        "content": "<p>(deleted, I can't read)</p>",
        "id": 421951217,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708123975
    },
    {
        "content": "<p>\"Unhygienic\" means that it's not going to do anything to prevent name capture. If your syntax that you're creating doesn't have any binders, this is probably ok.</p>",
        "id": 421951274,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708124022
    },
    {
        "content": "<p>See also its docstring <a href=\"https://leanprover-community.github.io/mathlib4_docs/Lean/Hygiene.html#Lean.Unhygienic\">https://leanprover-community.github.io/mathlib4_docs/Lean/Hygiene.html#Lean.Unhygienic</a></p>",
        "id": 421986202,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1708155336
    },
    {
        "content": "<p>Thanks Sebastian. Do you see an easy way to autogenerate my function?</p>",
        "id": 422017879,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708182089
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/From.20.60syntax.60.20to.20function/near/421940923\">said</a>:</p>\n<blockquote>\n<p>The <code>syntax</code> command does not seem to generate such a function.</p>\n</blockquote>\n<p>When you use <code>macro</code> or <code>elab</code>, it will actually generate the syntax for that quotation as part of the pattern. But these take slightly different input, viz. <code>elab a:term \" foo \" b:term : foo</code> instead of <code>syntax term \" foo \" term : foo</code>.</p>",
        "id": 422584726,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1708510635
    },
    {
        "content": "<p>I don’t understand your message. Do you claim that <code>elab</code> creates the function I want?</p>",
        "id": 422653376,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708531822
    },
    {
        "content": "<p>It does something similar, but not exactly what you want, no. And it is not an easy task unfortunately.</p>",
        "id": 422655650,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1708532326
    },
    {
        "content": "<p>Could you say a bit more about what advantages you see over using quotations directly? I can imagine some would like to hear more</p>",
        "id": 422657465,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1708532761
    },
    {
        "content": "<p>The advantage is being more robust to irrelevant syntax changes. It is all in the context of my controlled natural language tactics. There I have syntax with lots of strings that could change but the actual parameters are much more stable.</p>",
        "id": 422657822,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708532849
    },
    {
        "content": "<p>Things like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"By \"</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">maybeApplied</span> <span class=\"s2\">\" we get \"</span> <span class=\"n\">colGt</span> <span class=\"n\">news</span><span class=\"o\">:</span><span class=\"n\">newStuffEN</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n<span class=\"n\">obtainTac</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">maybeAppliedToTerm</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">newStuffENToArray</span> <span class=\"n\">news</span><span class=\"o\">)</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"By \"</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">maybeApplied</span> <span class=\"s2\">\" we choose \"</span> <span class=\"n\">colGt</span> <span class=\"n\">news</span><span class=\"o\">:</span><span class=\"n\">newStuffEN</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n<span class=\"n\">chooseTac</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">maybeAppliedToTerm</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">newStuffENToArray</span> <span class=\"n\">news</span><span class=\"o\">)</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"By \"</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">maybeApplied</span> <span class=\"s2\">\" it suffices to prove \"</span> <span class=\"s2\">\"that \"</span><span class=\"bp\">?</span> <span class=\"n\">colGt</span> <span class=\"n\">arg</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n<span class=\"n\">bySufficesTac</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">maybeAppliedToTerm</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">arg</span><span class=\"o\">]</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"By \"</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">maybeApplied</span> <span class=\"s2\">\" it suffices to prove \"</span> <span class=\"s2\">\"that \"</span><span class=\"bp\">?</span> <span class=\"n\">colGt</span> <span class=\"s2\">\"[\"</span><span class=\"n\">args</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n<span class=\"n\">bySufficesTac</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">maybeAppliedToTerm</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"n\">args.getElems</span>\n</code></pre></div>",
        "id": 422657897,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708532872
    },
    {
        "content": "<p>But this is not crucial. I can define those functions by hand, it simply feels a bit boiler plate-y.</p>",
        "id": 422658100,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708532922
    }
]