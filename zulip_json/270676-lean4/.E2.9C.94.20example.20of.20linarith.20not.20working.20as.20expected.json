[
    {
        "content": "<p>I am currently working through \"Mathematics in Lean\" and reached chapter 2.4, where you need to prove <code>min a b + c = min (a + c) (b + c)</code>. Here is my work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">min</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"bp\">≤</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_min</span>\n    <span class=\"bp\">·</span> <span class=\"k\">show</span> <span class=\"n\">min</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">z</span>\n      <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">min_le_left</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"k\">show</span> <span class=\"n\">min</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span>\n      <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">min_le_right</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span>\n  <span class=\"bp\">·</span> <span class=\"k\">show</span> <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n    <span class=\"n\">apply</span> <span class=\"n\">h</span>\n  <span class=\"bp\">·</span> <span class=\"k\">show</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span>\n    <span class=\"k\">calc</span>\n      <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n      <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">c</span><span class=\"o\">)]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"bp\">???</span>\n</code></pre></div>\n<p>I thought that I could simply enter <code>linarith</code> in the last line since <code>c + -c = 0</code>, but this does not work. I was wondering why this isn't possible here. What should I enter instead?</p>",
        "id": 409474102,
        "sender_full_name": "Devon Andrews",
        "timestamp": 1703197662
    },
    {
        "content": "<p><code>linarith</code> by itself won't zoom inside the <code>min</code> argument. You can use <code>congr</code> to do that.</p>",
        "id": 409475282,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1703198040
    },
    {
        "content": "<p>ok, I found out that <code>rw [add_neg_cancel_right a c, add_neg_cancel_right b c]</code> works, but can I get lean to figure this out for me? How could <code>congr</code> be used here?</p>",
        "id": 409475566,
        "sender_full_name": "Devon Andrews",
        "timestamp": 1703198191
    },
    {
        "content": "<p>Replace your <code>???</code> by <code>congr</code> and see that two simpler goals fall out</p>",
        "id": 409475655,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1703198226
    },
    {
        "content": "<p>Here the most efficient proof would be <code>congr &lt;;&gt; ring</code>.</p>",
        "id": 409476173,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1703198500
    },
    {
        "content": "<p>Could you explain why you used <code>congr &lt;;&gt; ring</code> instead of <code>congr &lt;;&gt; linarith</code>?</p>",
        "id": 409476288,
        "sender_full_name": "Devon Andrews",
        "timestamp": 1703198570
    },
    {
        "content": "<p>Those goals are really <code>ring</code> goals, they do not requires making any linear combination of assumptions. The fact that <code>linarith</code> closes them is somehow an accident.</p>",
        "id": 409476622,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1703198775
    },
    {
        "content": "<p>Presumably <code>congr &lt;;&gt; linarith only []</code> would also work, which shows that <code>linarith</code> isn't doing any linarith-specific work.</p>",
        "id": 409476747,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1703198853
    },
    {
        "content": "<p>Aren't these goals also <code>group</code> goals?</p>",
        "id": 409476929,
        "sender_full_name": "Devon Andrews",
        "timestamp": 1703198922
    },
    {
        "content": "<p>Actually <code>linarith</code> is very probably calling <code>ring</code> here.</p>",
        "id": 409476933,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1703198928
    },
    {
        "content": "<p>They could be, but the <code>group</code> tactic is only about multiplicative group. Because it is really targeting non-commutative groups. Here the goals indeed do no use commutativity, but it is a very special case. You could use <code>abel</code>.</p>",
        "id": 409477084,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1703199012
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"675773\">Devon Andrews</span> has marked this topic as resolved.</p>",
        "id": 409477457,
        "sender_full_name": "Notification Bot",
        "timestamp": 1703199239
    }
]