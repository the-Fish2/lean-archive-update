[
    {
        "content": "<p>If I have defined some class, is there anyway I can replace the default constructor <code>.mk</code> with a weaker lemma that's easier to verify? Or is it best to call the other lemma something different, like <code>.mk'</code>.</p>\n<p>This is my specific case, in case someone wants to recommend a different approach:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Definition of a Fibered category. -/</span>\n<span class=\"kd\">class</span> <span class=\"n\">IsFibered</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ùí≥</span> <span class=\"bp\">‚•§</span> <span class=\"bp\">ùíÆ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"o\">(</span><span class=\"n\">has_pullbacks</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ùí≥</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"bp\">ùíÆ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">p.obj</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">‚àÉ</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ùí≥</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">œÜ</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"n\">IsPullback</span> <span class=\"n\">p</span> <span class=\"n\">f</span> <span class=\"n\">œÜ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">lemma</span> <span class=\"n\">IsFibered.mk'</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ùí≥</span> <span class=\"bp\">‚•§</span> <span class=\"bp\">ùíÆ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ùí≥</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"bp\">ùíÆ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">p.obj</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n    <span class=\"bp\">‚àÉ</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ùí≥</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">œÜ</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"n\">IsPullback</span> <span class=\"n\">p</span> <span class=\"n\">f</span> <span class=\"n\">œÜ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IsFibered</span> <span class=\"n\">p</span> <span class=\"n\">where</span>\n  <span class=\"n\">has_pullbacks</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">ha</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">subst</span> <span class=\"n\">ha</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">h</span> <span class=\"n\">a</span> <span class=\"n\">R</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>The difference between the two is quite small. Basically, in <code>IsFibered.mk'</code> one always takes <code>S</code> to be <code>p.obj a</code>, whereas in the definition of <code>IsFibered</code> one is allowed to give a different <code>S</code> together with a proof that <code>S = p.obj a</code>. The first definition is more flexible with equalities, which is convenient when using the class, whereas the latter is slightly more convenient to show when defining an instance.</p>",
        "id": 437407444,
        "sender_full_name": "Calle S√∂nne",
        "timestamp": 1715071728
    },
    {
        "content": "<p>I think my rule of thumb would be to name your weaker constructor something else? You can rename the default constructor (see the first code block <a href=\"https://lean-lang.org/lean4/doc/struct.html\">here</a>) if you really want this lemma to be named <code>mk</code>, but I don't think doing this will change what constructor is used for &lt;&gt; notation and the <code>constructor</code> tactic and so on</p>",
        "id": 437408130,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1715071966
    },
    {
        "content": "<p>if you search for <code>mk' ::</code> in mathlib you will see this is a pretty common technique</p>",
        "id": 437408747,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1715072169
    },
    {
        "content": "<p>I think we often rename constructors in mathlib if the original constructor requires a lot of wrapping involving things like existentials or <code>Nonempty</code>. See for example <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Limits.HasLimit#doc\">docs#CategoryTheory.Limits.HasLimit</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Limits.HasLimit.mk#doc\">docs#CategoryTheory.Limits.HasLimit.mk</a></p>",
        "id": 437408913,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1715072220
    },
    {
        "content": "<p>does that change what is used by &lt;&gt; and <code>constructor</code>?</p>",
        "id": 437409348,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1715072343
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/Replace.20default.20.60.2Emk.60.20for.20a.20class/near/437408130\">said</a>:</p>\n<blockquote>\n<p>I think my rule of thumb would be to name your weaker constructor something else? You can rename the default constructor (see the first code block <a href=\"https://lean-lang.org/lean4/doc/struct.html\">here</a>) if you really want this lemma to be named <code>mk</code>, but I don't think doing this will change what constructor is used for &lt;&gt; notation and the <code>constructor</code> tactic and so on</p>\n</blockquote>\n<p>Okay thanks, I don't mind what constructor is used for the &lt;&gt; notation, so I will rename the \"default\" one to <code>mk'</code> then.</p>",
        "id": 437411153,
        "sender_full_name": "Calle S√∂nne",
        "timestamp": 1715072988
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/Replace.20default.20.60.2Emk.60.20for.20a.20class/near/437409348\">said</a>:</p>\n<blockquote>\n<p>does that change what is used by &lt;&gt; and <code>constructor</code>?</p>\n</blockquote>\n<p>no</p>",
        "id": 437411364,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1715073066
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Rat.mk#doc\">docs#Rat.mk</a> is another home-rolled mk</p>",
        "id": 437416864,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1715075200
    },
    {
        "content": "<p>Oh! It's not there any more? But the default constructor is still called <code>mk'</code>?</p>",
        "id": 437416988,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1715075255
    },
    {
        "content": "<p>Are you thinking of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=mkRat#doc\">docs#mkRat</a> ?</p>",
        "id": 437417371,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1715075393
    },
    {
        "content": "<p>Another approach is to use the version with seemingly weaker assumptions as the definition and make the original version a lemma.</p>",
        "id": 443067828,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1717682316
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/270676-lean4/topic/Replace.20default.20.60.2Emk.60.20for.20a.20class/near/443067828\">said</a>:</p>\n<blockquote>\n<p>Another approach is to use the version with seemingly weaker assumptions as the definition and make the original version a lemma.</p>\n</blockquote>\n<p>This is what I ended up doing eventually! :)</p>",
        "id": 443069606,
        "sender_full_name": "Calle S√∂nne",
        "timestamp": 1717682849
    }
]