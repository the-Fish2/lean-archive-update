[
    {
        "content": "<p>First off, sorry for the click-bait title (which I'd have preferred to end with \"what's wrong?\"). Rewriting mathlib's style linters (written in Python) in Lean, I encountered one part where my Lean code is about 100x slower than the equivalent Python code. I can't imagine it has to be like this: please help me understand what I'm \"doing wrong\". Or how I can <em>start</em> to find out...</p>\n<p>Here's a minimal Python programm doing what I want.</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"ch\">#!/usr/bin/env python3</span>\n<span class=\"c1\"># Minimal reduction from the \"semicolon\" style linter in Python.</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n\n<span class=\"n\">ERR_SEM</span> <span class=\"o\">=</span> <span class=\"mi\">13</span> <span class=\"c1\"># the substring \" ;\"</span>\n\n<span class=\"n\">argv</span> <span class=\"o\">=</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]</span>\n<span class=\"k\">for</span> <span class=\"n\">filename</span> <span class=\"ow\">in</span> <span class=\"n\">argv</span><span class=\"p\">:</span>\n    <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">)</span>\n    <span class=\"n\">errors</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">with</span> <span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s2\">\"utf-8\"</span><span class=\"p\">,</span> <span class=\"n\">newline</span><span class=\"o\">=</span><span class=\"s2\">\"\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n        <span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"s2\">\" ;\"</span> <span class=\"ow\">in</span> <span class=\"n\">line</span><span class=\"p\">:</span>\n                <span class=\"n\">errors</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">ERR_SEM</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">))</span>\n    <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">errors</span><span class=\"p\">)</span> <span class=\"c1\"># do something with errors</span>\n</code></pre></div>\n<p>Running this on all of mathlib takes about half a second on my machine.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"bp\">$</span><span class=\"w\"> </span><span class=\"n\">time</span><span class=\"w\"> </span><span class=\"n\">python3</span><span class=\"w\"> </span><span class=\"bp\">./</span><span class=\"n\">scripts</span><span class=\"bp\">/</span><span class=\"n\">lint</span><span class=\"bp\">-</span><span class=\"n\">minimal</span><span class=\"bp\">.</span><span class=\"n\">py</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">find</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"bp\">'*.</span><span class=\"n\">lean'</span><span class=\"o\">)</span>\n<span class=\"n\">real</span><span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"n\">m0</span><span class=\"o\">,</span><span class=\"mi\">640</span><span class=\"n\">s</span>\n<span class=\"n\">user</span><span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"n\">m0</span><span class=\"o\">,</span><span class=\"mi\">537</span><span class=\"n\">s</span>\n<span class=\"n\">sys</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">m0</span><span class=\"o\">,</span><span class=\"mi\">108</span><span class=\"n\">s</span>\n</code></pre></div>\n<p>Here's the Lean code I wrote: very much minimised. (In case you're wondering: all the set-up is necessary; this is already extremely simplified. But the set-up itself is very fast.) <strong>It takes about a minute</strong>, i.e. 100x slower than Python.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- This file is minimised from rewriting the style linters:</span>\n<span class=\"c1\">-- it illustrates that \"just looking for semicolons\" is *really* slow.</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Lean.Elab.Command</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Batteries.Data.String.Basic</span>\n\n<span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">lint_all_files</span><span class=\"w\">  </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">IO</span><span class=\"w\"> </span><span class=\"n\">Unit</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"c1\">-- Read all module names from `Mathlib.lean`.</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">allModules</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">IO.FS.lines</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">System.mkFilePath</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"s2\">\"Mathlib.lean\"</span><span class=\"o\">])</span>\n<span class=\"w\">  </span><span class=\"n\">for</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">allModules</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">module.stripPrefix</span><span class=\"w\"> </span><span class=\"s2\">\"import \"</span>\n<span class=\"w\">    </span><span class=\"c1\">-- Convert the module name to a file name, then lint that file.</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">System.mkFilePath</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">module.split</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"bp\">==</span><span class=\"w\"> </span><span class=\"sc\">'.'</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">addExtension</span><span class=\"w\"> </span><span class=\"s2\">\"lean\"</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">lines</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">IO.FS.lines</span><span class=\"w\"> </span><span class=\"n\">path</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">mut</span><span class=\"w\"> </span><span class=\"n\">number_semicolons</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"n\">for</span><span class=\"w\"> </span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">lines</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">      </span><span class=\"c1\">-- This check is *extremely* slow: why?</span>\n<span class=\"w\">      </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">line.containsSubstr</span><span class=\"w\"> </span><span class=\"s2\">\" ;\"</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">        </span><span class=\"n\">number_semicolons</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">number_semicolons</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">number_semicolons</span><span class=\"w\"> </span><span class=\"bp\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">      </span><span class=\"n\">IO.println</span><span class=\"w\"> </span><span class=\"s2\">\"Found a semicolon\"</span><span class=\"w\"> </span><span class=\"c1\">-- full programm: format all errors nicely...</span>\n<span class=\"c1\">--run_cmd lint_all_files &lt;-- this step takes about a minute on my computer</span>\n</code></pre></div>",
        "id": 440744333,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1716761223
    },
    {
        "content": "<p>Finally, for an idea what could be possible, here's the timing of calling <code>ripgrep</code>, from the mathlib root directory. (Ripgrep parses the .gitignore, hence this counts all mathlib files, but ignore the lake directory.)</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"bp\">$</span><span class=\"w\"> </span><span class=\"n\">time</span><span class=\"w\"> </span><span class=\"n\">rg</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"n\">F</span><span class=\"w\"> </span><span class=\"s2\">\" ;\"</span>\n<span class=\"n\">real</span><span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"n\">m0</span><span class=\"o\">,</span><span class=\"mi\">041</span><span class=\"n\">s</span>\n<span class=\"n\">user</span><span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"n\">m0</span><span class=\"o\">,</span><span class=\"mi\">056</span><span class=\"n\">s</span>\n<span class=\"n\">sys</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">m0</span><span class=\"o\">,</span><span class=\"mi\">056</span><span class=\"n\">s</span>\n</code></pre></div>\n<p>Here's an invocation searching just all *.lean files (and the full output).</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"bp\">$</span><span class=\"w\"> </span><span class=\"n\">time</span><span class=\"w\"> </span><span class=\"n\">rg</span><span class=\"w\"> </span><span class=\"c1\">--type-add 'lean:*.lean' -t lean \" ;\"</span>\n<span class=\"n\">test</span><span class=\"bp\">/</span><span class=\"n\">Monotonicity</span><span class=\"bp\">.</span><span class=\"n\">lean</span>\n<span class=\"mi\">139</span><span class=\"o\">:</span><span class=\"c1\">--  ; intros ys zs h h'</span>\n<span class=\"mi\">140</span><span class=\"o\">:</span><span class=\"c1\">--  ; cases ys with y ys</span>\n<span class=\"mi\">141</span><span class=\"o\">:</span><span class=\"c1\">--  ; cases zs with z zs</span>\n<span class=\"mi\">142</span><span class=\"o\">:</span><span class=\"c1\">--  ; try { cases h; cases h'; done },</span>\n<span class=\"n\">real</span><span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"n\">m0</span><span class=\"o\">,</span><span class=\"mi\">039</span><span class=\"n\">s</span>\n<span class=\"n\">user</span><span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"n\">m0</span><span class=\"o\">,</span><span class=\"mi\">054</span><span class=\"n\">s</span>\n<span class=\"n\">sys</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">m0</span><span class=\"o\">,</span><span class=\"mi\">054</span><span class=\"n\">s</span>\n</code></pre></div>\n<p>Standard <code>grep</code> takes a similar amount of time.</p>",
        "id": 440744352,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1716761253
    },
    {
        "content": "<p>First thing I would recommend before doing any optimization here is to  actually compile your program, that will easily speed it up a lot.</p>",
        "id": 440744439,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1716761329
    },
    {
        "content": "<p><span aria-label=\"exploding head\" class=\"emoji emoji-1f92f\" role=\"img\" title=\"exploding head\">:exploding_head:</span> I can compile a Lean program? How do I do this? Pointer to docs is fine.</p>",
        "id": 440744467,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1716761352
    },
    {
        "content": "<p>We usually create a lake project with a lean_exe target as provided by the default project that you get when you run <code>lake new</code>, run <code>lake build</code> and you'll have a binary in <code>.lake/bin</code></p>",
        "id": 440744500,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1716761400
    },
    {
        "content": "<p>Ah - so creating a new executable. I know how to do this.</p>",
        "id": 440744562,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1716761427
    },
    {
        "content": "<p>If you really want to you can also do this by hand but I don't recommend it</p>",
        "id": 440744574,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1716761440
    },
    {
        "content": "<p>... this would end up as another executable in mathlib - but I guess that's fine. I don't need by hand :-)</p>",
        "id": 440744605,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1716761468
    },
    {
        "content": "<p>Running something with run_cmd (without precompileModules) will use the bytecode interpreter which is not very well optimized at all. I can very much imagine python's bytecode interpreter to be much better than ours. After you've compiled the program we can start doing actual optimizations if it is still too slow for your taste</p>",
        "id": 440744643,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1716761503
    },
    {
        "content": "<p>Another difference is that the Python code reads one line at a time, while the Lean code above reads it all into memory at once</p>",
        "id": 440744885,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716761688
    },
    {
        "content": "<p>That should give Lean an advantage though. Reading one line at a time would mean having n syscalls as opposed to have 1 syscall per file.</p>",
        "id": 440744923,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1716761720
    },
    {
        "content": "<p>I think Python does some buffering to make that not 1:1</p>",
        "id": 440744946,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716761747
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"634338\">@Michael Rothgang</span> if it's still not fast enough I would suggest to profile the binary with <code>perf</code> and <code>hotspot</code> or whatever tool is the one that you prefer (personally I enjoy Intel VTune). And then based on the results you can do further things. If it's really the string stuff that you are spending most time in I guess the next best thing would be to write either a better <code>containsSubstr</code> or come up with a <code>Parsec</code> based parser to go through whole files and find the wrong semicolons.</p>",
        "id": 440745307,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1716762048
    },
    {
        "content": "<p>Okay, a few minutes later: after compiling, it's almost instant. Much better, wohoo!</p>",
        "id": 440745309,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1716762053
    },
    {
        "content": "<p>(More detailed: running <em>all</em> the linters on all of mathlib works within 2 seconds - the Python script took ~10.)</p>",
        "id": 440745457,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1716762211
    },
    {
        "content": "<p>An update: the minimal programme (i.e., just the semicolon) takes about 2s. With other linters, adding the semicolon check turns the runtime from ~1.5 to ~2.5s: i.e., that check hurts a bit, but by itself is still tolerable.</p>\n<p>In other words: using a profiler doesn't seem like a bad idea :-) I'm very busy until the end of the month, though.</p>",
        "id": 440746960,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1716763468
    },
    {
        "content": "<p>The following code may be more performant :</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">private</span><span class=\"w\"> </span><span class=\"n\">partial</span><span class=\"w\"> </span><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"bp\">.</span><span class=\"n\">hasSemicolon</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">source</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Bool</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">rec</span><span class=\"w\"> </span><span class=\"n\">loop</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"bp\">.</span><span class=\"n\">Iterator</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">atEnd</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">      </span><span class=\"n\">false</span>\n<span class=\"w\">    </span><span class=\"k\">else</span>\n<span class=\"w\">      </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">posOfSemi</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">find</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"w\"> </span><span class=\"bp\">==</span><span class=\"w\"> </span><span class=\"bp\">';'</span><span class=\"o\">)</span>\n<span class=\"w\">      </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">posOfSemi</span><span class=\"w\"> </span><span class=\"bp\">==</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">toEnd</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"n\">false</span><span class=\"w\"> </span><span class=\"k\">else</span>\n<span class=\"w\">      </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">posOfSemi</span><span class=\"bp\">.</span><span class=\"n\">prev</span><span class=\"bp\">.</span><span class=\"n\">curr</span><span class=\"w\"> </span><span class=\"bp\">==</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">        </span><span class=\"n\">true</span>\n<span class=\"w\">      </span><span class=\"k\">else</span>\n<span class=\"w\">        </span><span class=\"n\">loop</span><span class=\"w\"> </span><span class=\"n\">posOfSemi</span><span class=\"bp\">.</span><span class=\"n\">next</span>\n<span class=\"w\">  </span><span class=\"n\">loop</span><span class=\"w\"> </span><span class=\"n\">source</span><span class=\"bp\">.</span><span class=\"n\">iter</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Change accordingly. -/</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">pathPrefix</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"s2\">\"/home/data/programming-data/practice/lake-packages/mathlib/\"</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">pathString</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"s2\">\"/home/data/programming-data/practice/lake-packages/mathlib/Mathlib.lean\"</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">! Assumes that modules is a small list of files. -/</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">my_linter</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">IO</span><span class=\"w\"> </span><span class=\"n\">Unit</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">modules</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">IO</span><span class=\"bp\">.</span><span class=\"n\">FS</span><span class=\"bp\">.</span><span class=\"n\">lines</span><span class=\"w\"> </span><span class=\"n\">pathString</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span>\n<span class=\"w\">    </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">drop</span><span class=\"w\"> </span><span class=\"mi\">7</span>\n<span class=\"w\">    </span><span class=\"bp\">|&gt;.</span><span class=\"n\">replace</span><span class=\"w\"> </span><span class=\"s2\">\".\"</span><span class=\"w\"> </span><span class=\"s2\">\"/\"</span>\n<span class=\"w\">    </span><span class=\"bp\">|&gt;.</span><span class=\"n\">append</span><span class=\"w\"> </span><span class=\"s2\">\".lean\"</span>\n<span class=\"w\">  </span><span class=\"n\">for</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">modules</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">blob</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">IO</span><span class=\"bp\">.</span><span class=\"n\">FS</span><span class=\"bp\">.</span><span class=\"n\">readFile</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"n\">pathPrefix</span><span class=\"w\"> </span><span class=\"bp\">++</span><span class=\"w\"> </span><span class=\"n\">module</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">blob</span><span class=\"bp\">.</span><span class=\"n\">hasSemicolon</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">      </span><span class=\"n\">IO</span><span class=\"bp\">.</span><span class=\"n\">println</span><span class=\"w\"> </span><span class=\"s2\">\"Semicolons detected; here, split the blob and lint.\"</span>\n</code></pre></div>",
        "id": 441086544,
        "sender_full_name": "Number Eighteen",
        "timestamp": 1716918405
    }
]