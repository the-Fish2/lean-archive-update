[
    {
        "content": "<p>I was expecting that the function below would be \"automatically\" terminating: why is it not?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">easyRec</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Syntax</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">node</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">args</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">args.map</span> <span class=\"n\">easyRec</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">foldl</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 423669232,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709057663
    },
    {
        "content": "<p>This is a commonly encountered issue with the termination checker: mapping a function over a <code>List α</code>/<code>Array α</code>/another collection while doing recursion on <code>α</code> is not automatically found to be terminating. You can manually construct a well-founded recursion:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">easyRec</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Syntax</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">node</span> <span class=\"n\">i</span> <span class=\"n\">k</span> <span class=\"n\">args</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"o\">(</span><span class=\"n\">args.attach.map</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Array.sizeOf_lt_of_mem</span> <span class=\"n\">a.property</span>\n      <span class=\"c1\">-- Not sure why the termination tactic can't figure this line automatically</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">sizeOf</span> <span class=\"n\">a.val</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">sizeOf</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">sizeOf</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">sizeOf</span> <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.lt_add_left</span> <span class=\"n\">_</span> <span class=\"n\">this</span>\n      <span class=\"n\">easyRec</span> <span class=\"n\">a.val</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">foldl</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">atom</span> <span class=\"bp\">..</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 423673375,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1709059293
    },
    {
        "content": "<p>Thanks for the answer!</p>\n<p>I am happy to hear that I am not the only one who expects this to work and I appreciate that making it actually work automatically is not necessarily easy!</p>",
        "id": 423674152,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709059590
    },
    {
        "content": "<p>If you write <code>fun \\&lt;a, h\\&gt; =&gt; </code> to get the proposition into scope the termination checker should recognize that idiom. Plus the code is prettier (no <code>.val</code>)</p>",
        "id": 423685197,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1709063653
    },
    {
        "content": "<p>Very nice, Joachim!  This indeed works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.Array.Basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">easyRec</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Syntax</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">node</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">args</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">args.attach.map</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">easyRec</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">foldl</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 423686515,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709064144
    },
    {
        "content": "<p>I think that's the best we can do for now :-)</p>",
        "id": 423688407,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1709064915
    }
]