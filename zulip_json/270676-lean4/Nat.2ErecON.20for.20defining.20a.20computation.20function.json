[
    {
        "content": "<p>Hi everyone,  why does the function <code>succ_nat</code> below fail to compute? </p>\n<p>More context on why I am writing  the function like this: my partner is learning Lean and currently she is trying to understand induction on natural numbers. She has a good understanding of dependent function  so I tried to challenge her a bit by asking her to write a non-dependent function that takes a natural number n and return n + 1.  We were able to write the code but we could not compute with it (see the error).</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Nat</span>\n\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">succ_nat</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">recOn</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">motive</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">n</span>\n<span class=\"w\">  </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"n\">ih</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">ih</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n\n<span class=\"bp\">#</span><span class=\"n\">eval</span><span class=\"w\"> </span><span class=\"n\">succ_nat</span><span class=\"w\"> </span><span class=\"mi\">3</span>\n\n<span class=\"n\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"n\">definition</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">consider</span><span class=\"w\"> </span><span class=\"n\">marking</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"n\">as</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"kn\">noncomputable</span><span class=\"bp\">'</span><span class=\"w\"> </span><span class=\"n\">because</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"n\">depends</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"n\">succ_nat'</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"n\">does</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">executable</span><span class=\"w\"> </span><span class=\"n\">code</span>\n</code></pre></div>\n<p>I wrote the code in Coq and it computes fine.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">Section</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span>\n\n\n<span class=\"w\">  </span><span class=\"n\">Definition</span><span class=\"w\"> </span><span class=\"n\">succ_nat</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">    </span><span class=\"n\">nat_rect</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"n\">ih</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">ih</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"bp\">.</span>\n\n<span class=\"w\">  </span><span class=\"n\">Eval</span><span class=\"w\"> </span><span class=\"n\">compute</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">succ_nat</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"o\">)</span><span class=\"bp\">.</span>\n\n<span class=\"w\">  </span><span class=\"n\">Check</span><span class=\"w\"> </span><span class=\"n\">nat_rect</span><span class=\"bp\">.</span>\n<span class=\"w\">   </span><span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">signature</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">nat_rect</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">just</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">case</span><span class=\"o\">)</span>\n<span class=\"n\">nat_rect</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"k\">forall</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"w\"> </span><span class=\"bp\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"bp\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">forall</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"bp\">-&gt;</span><span class=\"w\"> </span><span class=\"k\">forall</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"n\">End</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span>\n</code></pre></div>",
        "id": 443602996,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1717945666
    },
    {
        "content": "<p>When I try with the current toolchain, your first example gives the error <code>type of theorem 'succ_nat' is not a proposition</code>, and the example below gives the error <code>code generator does not support recursor 'Nat.recOn' yet, consider using 'match ... with' and/or structural recursion</code>. Hopefully that clears things up? Seems like you're not doing anything wrong but you have encountered a limitation.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">succ_nat</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">recOn</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">motive</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">n</span>\n<span class=\"w\">  </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"n\">ih</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">ih</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 443603990,
        "sender_full_name": "Richard Copley",
        "timestamp": 1717945975
    },
    {
        "content": "<p>Recursors are not supported by the Lean compiler for a couple of reasons. You can still run <code>#reduce</code> which instead of performing efficient computation with compiled code will symbolically evaluate your expression by using reduction rules from lambda calculus. These rules do of course support the recursor.</p>",
        "id": 443605322,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1717946309
    },
    {
        "content": "<p>How do update Lean? Currently I am using </p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">mukesh</span><span class=\"bp\">.</span><span class=\"n\">tiwari</span><span class=\"bp\">@</span><span class=\"n\">Mukeshs</span><span class=\"bp\">-</span><span class=\"n\">MBP</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">~</span><span class=\"w\"> </span><span class=\"bp\">%</span><span class=\"w\"> </span><span class=\"n\">lean</span><span class=\"w\"> </span><span class=\"c1\">--version</span>\n<span class=\"n\">Lean</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">version</span><span class=\"w\"> </span><span class=\"mf\">4.7</span><span class=\"bp\">.</span><span class=\"m\">0</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"bp\">-</span><span class=\"n\">apple</span><span class=\"bp\">-</span><span class=\"n\">darwin</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">commit</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"n\">fce8f7d5cd1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Release</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>So how I can update it to the latest stable version?</p>",
        "id": 443605516,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1717946362
    },
    {
        "content": "<p>Usually your lean projects will contain a <code>lean-toolchain</code> file in which you can put your specific lean version, that way you can have multiple lean versions for different projects on the same machine</p>",
        "id": 443606350,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1717946597
    },
    {
        "content": "<p>Thanks you very much <span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span>  <span class=\"user-mention\" data-user-id=\"400544\">@Richard Copley</span> !</p>",
        "id": 443606525,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1717946701
    },
    {
        "content": "<p><del>I at least see one glaringly obvious error: <code>succ_nat</code> should not be a <code>theorem</code> but a <code>def</code></del> I failed to see this was already mentioned</p>",
        "id": 443607819,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717947413
    }
]