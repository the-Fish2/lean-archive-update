[
    {
        "content": "<p>I have trouble writing a macro that prepend a tactic sequence with some tactic. The goal is to hide a call to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ProofWidgets.withPanelWidgets#doc\">docs#ProofWidgets.withPanelWidgets</a>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ProofWidgets.Component.Panel.SelectionPanel</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">ProofWidgets</span>\n\n<span class=\"c1\">-- The following example, copied from the ProofWidget demo folder, works</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">with_panel_widgets</span> <span class=\"o\">[</span><span class=\"n\">SelectionPanel</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- See a widget here :-)</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Parser.Term</span> <span class=\"o\">(</span><span class=\"n\">bracketedBinder</span><span class=\"o\">)</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"exercise : \"</span> <span class=\"n\">concl</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\"Proof:\"</span> <span class=\"n\">prf</span><span class=\"o\">:</span><span class=\"n\">tacticSeq</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n<span class=\"n\">elabCommand</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">command</span><span class=\"bp\">|</span><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">concl</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">with_panel_widgets</span> <span class=\"o\">[</span><span class=\"n\">SelectionPanel</span><span class=\"o\">]</span>\n      <span class=\"bp\">$</span><span class=\"n\">prf</span><span class=\"o\">))</span>\n<span class=\"kd\">end</span>\n\n\n<span class=\"n\">exercise</span> <span class=\"o\">:</span> <span class=\"n\">True</span>\n<span class=\"n\">Proof</span><span class=\"o\">:</span>\n  <span class=\"c1\">-- No widget here :-(</span>\n  <span class=\"n\">trivial</span>\n\n\n<span class=\"n\">exercise</span> <span class=\"o\">:</span> <span class=\"n\">True</span>\n<span class=\"n\">Proof</span><span class=\"o\">:</span>\n  <span class=\"n\">with_panel_widgets</span> <span class=\"o\">[</span><span class=\"n\">SelectionPanel</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- See a widget here</span>\n  <span class=\"n\">trivial</span>\n</code></pre></div>",
        "id": 409079477,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1703043615
    },
    {
        "content": "<p>This could be because the <code>Syntax</code> of the command is not \"canonical\" (as explained in the docstring here: <a href=\"https://github.com/leanprover-community/ProofWidgets4/blob/main/ProofWidgets/Demos/Macro.lean\">https://github.com/leanprover-community/ProofWidgets4/blob/main/ProofWidgets/Demos/Macro.lean</a>). However, I found that writing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"exercise : \"</span> <span class=\"n\">concl</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\"Proof:\"</span> <span class=\"n\">prf</span><span class=\"o\">:</span><span class=\"n\">tacticSeq</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">Lean.TSyntax.mkInfoCanonical</span> <span class=\"bp\">&lt;$&gt;</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">command</span><span class=\"bp\">|</span><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">concl</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">with_panel_widgets</span> <span class=\"o\">[</span><span class=\"n\">SelectionPanel</span><span class=\"o\">]</span>\n      <span class=\"bp\">$</span><span class=\"n\">prf</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>does not work either, so the issue could be something deeper.</p>",
        "id": 409199356,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1703083114
    },
    {
        "content": "<p>Oh, I would have never suspected that. <span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> any idea?</p>",
        "id": 409200028,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1703083296
    },
    {
        "content": "<p>I cannot investigate at the moment but an issue with whether the info is canonical is likely. The adapted macro may be failing because it's the whole <code>example</code> syntax that is set to have canonical info, but one needs the syntax to which the widget span is associated to be canonical iirc.</p>",
        "id": 409201173,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1703083652
    },
    {
        "content": "<p>Indeed, it seems to work with that modification:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"exercise : \"</span> <span class=\"n\">concl</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\"Proof:\"</span> <span class=\"n\">prf</span><span class=\"o\">:</span><span class=\"n\">tacticSeq</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">tac</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">tactic</span> <span class=\"bp\">←</span>\n    <span class=\"n\">Lean.TSyntax.mkInfoCanonical</span> <span class=\"bp\">&lt;$&gt;</span>\n      <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">with_panel_widgets</span> <span class=\"o\">[</span><span class=\"n\">SelectionPanel</span><span class=\"o\">]</span>\n                  <span class=\"bp\">$</span><span class=\"n\">prf</span><span class=\"o\">)</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">command</span><span class=\"bp\">|</span><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">concl</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"bp\">$</span><span class=\"n\">tac</span> <span class=\"o\">})</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 409235495,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1703094893
    },
    {
        "content": "<p>Great! Thank you very much <span class=\"user-mention\" data-user-id=\"303675\">@Anand Rao Tadipatri</span>. The timing is also very good. I'm done with my grading work and was about to get some lunch and then resume trying to get this working.</p>",
        "id": 409237397,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1703095607
    }
]