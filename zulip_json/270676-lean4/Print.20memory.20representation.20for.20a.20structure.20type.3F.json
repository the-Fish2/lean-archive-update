[
    {
        "content": "<p>Is there an analogue of <code>trace.compiler.ir.result</code> for the memory representation of a structure?  E.g., if I do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">unbox</span><span class=\"kd\">]</span> <span class=\"kd\">structure</span> <span class=\"n\">Floating</span> <span class=\"n\">where</span>\n  <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span>\n  <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span>\n</code></pre></div>\n<p>is there a way to print out what actually happened, to see that the type is 16 bytes?</p>",
        "id": 420637053,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1707479548
    },
    {
        "content": "<p>No but <a href=\"https://lean-lang.org/lean4/doc/dev/ffi.html\">https://lean-lang.org/lean4/doc/dev/ffi.html</a> has a mostly complete description</p>",
        "id": 420638520,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1707480097
    },
    {
        "content": "<p><code>[unbox]</code> is not implemented yet</p>",
        "id": 420638735,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1707480161
    },
    {
        "content": "<p>Oh no!</p>",
        "id": 420638858,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1707480208
    },
    {
        "content": "<p>Is there a tracking issue?  <a href=\"https://github.com/leanprover/lean4/issues?q=is%3Aissue+is%3Aopen+unbox\">https://github.com/leanprover/lean4/issues?q=is%3Aissue+is%3Aopen+unbox</a> doesn’t show anything.</p>",
        "id": 420638994,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1707480249
    },
    {
        "content": "<p>I don't think so, it will be part of the compiler rewrite</p>",
        "id": 420639093,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1707480281
    },
    {
        "content": "<p>Does unboxing work for a single field structure?</p>",
        "id": 420653446,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1707485723
    },
    {
        "content": "<p><a href=\"https://github.com/girving/ray/blob/182ad3693a29ac55d0df12175d28b9a2b8d6b671/Ray/Approx/Int64.lean#L15\">https://github.com/girving/ray/blob/182ad3693a29ac55d0df12175d28b9a2b8d6b671/Ray/Approx/Int64.lean#L15</a></p>",
        "id": 420653530,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1707485753
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- 64-bit two's complement integers -/</span>\n<span class=\"kd\">@[</span><span class=\"n\">unbox</span><span class=\"kd\">]</span> <span class=\"kd\">structure</span> <span class=\"n\">Int64</span> <span class=\"n\">where</span>\n  <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span><span class=\"o\">,</span> <span class=\"n\">BEq</span>\n</code></pre></div>",
        "id": 420653727,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1707485806
    },
    {
        "content": "<p>It will unbox on its own without the attribute</p>",
        "id": 420662393,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1707488722
    }
]