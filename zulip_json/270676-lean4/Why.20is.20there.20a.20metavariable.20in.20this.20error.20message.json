[
    {
        "content": "<p>Hello again folks, I am here to continue to make my working errors more and more minimal</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">p</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">τ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">True</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">injectivizing_id</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">τ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">τ</span> <span class=\"o\">:=</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">injectivizing_id_comp</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">σ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">injectivizing_id</span> <span class=\"n\">hf</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">injectivizing_id</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">injectivizing_id_comp_diff</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">τ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">injectivizing_id</span> <span class=\"n\">hf</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">injectivizing_id_comp</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">hf</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>The problem here is that the first theorem is not general enough to prove the second, since the first assumes the input and output of <code>f</code> are the same. But I don't get why it produces the following error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">apply'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"n\">injectivizing_id</span> <span class=\"n\">hf</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">m.180</span> <span class=\"n\">x</span>\n<span class=\"k\">with</span>\n  <span class=\"n\">injectivizing_id</span> <span class=\"n\">hf</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>It seems to me that the provision of the <code>(f := f)</code> implicit argument should make it so that the metavariable on the RHS is known to be <code>f</code>. What I would like to see is an error message more like what <code>refine</code> or <code>exact</code> give in the same situation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"bp\">@</span><span class=\"n\">injectivizing_id_comp</span> <span class=\"n\">σ</span> <span class=\"n\">f</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">f</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>Frankly, I thought using <code>apply</code> with a type that wasn't a function was equivalent to <code>exact</code>. Is there a good reason why <code>apply</code> gives a different error message here?</p>",
        "id": 425327203,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1709823907
    },
    {
        "content": "<p>The reason has probably to do with the elaboration strategy: apply elaborates the term without knowing the expected type (because Lean cannot know yet what the expected type is), while exact and refine know that the term has to match the target, so elaborate using that information. This probably causes the elaboration to get stuck at a different point, and therefore give you a different error message.</p>\n<p>I do hope that the <code>apply</code> error message can be improved though, it is indeed not pinpointing the right problem.</p>",
        "id": 425337134,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1709826348
    }
]