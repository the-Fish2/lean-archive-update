[
    {
        "content": "<p>In the following example, I'm printing the names of the declarations contained in the local context at a given point.<br>\nApparently, the local context includes the definition currently being defined (<code>t</code> in the example below).<br>\nIs there a way to reliably exclude the definition currently being defined (e.g. is it always the first element in the list)? Also, why isn't <code>i</code> part of the local context in the definition of <code>i</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span>\n\n<span class=\"n\">elab</span> <span class=\"n\">tk</span><span class=\"o\">:</span><span class=\"s2\">\"print_lctx\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n    <span class=\"n\">logInfoAt</span> <span class=\"n\">tk</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getLCtx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">foldl</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">++</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{·.userName}</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"o\">)</span> <span class=\"s2\">\"\"</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">False</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">print_lctx</span> <span class=\"c1\">-- t, h, g</span>\n  <span class=\"k\">have</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">print_lctx</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- t, h, g</span>\n  <span class=\"n\">print_lctx</span> <span class=\"c1\">-- t, h, g, i</span>\n</code></pre></div>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p><a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a></p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>I'm trying to get all of the hypotheses above the <code>⊢</code> in a tactic. And this shouldn't include the theorem to be proven itself.</p>\n</div></div>",
        "id": 411197289,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1704378077
    },
    {
        "content": "<p>I think it's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.LocalDecl.isImplementationDetail#doc\">docs#Lean.LocalDecl.isImplementationDetail</a></p>",
        "id": 411210413,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1704382328
    },
    {
        "content": "<p>There's also <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.LocalDecl.isAuxDecl#doc\">docs#Lean.LocalDecl.isAuxDecl</a></p>",
        "id": 411211291,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1704382610
    },
    {
        "content": "<p>You can take a look one of the ppGoal routines, how it filters out local declarations: <a href=\"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/PPGoal.lean#L91\">https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/PPGoal.lean#L91</a></p>",
        "id": 411211340,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1704382627
    }
]