[
    {
        "content": "<p>It seems quite often that I find myself working with structures with quite a lot of internal data -- most particularly things like <code>LinearMap</code> or <code>RingHom</code> with half-a-dozen fields, each of which is likely to have their own complexity or in some cases contain their own copy of similarly dense fields. Whenever possible, I would very much like to give such structures a short, abbreviated name, and then have Lean (most particularly simp and aesop) use those names instead of the expanded structures, expanding only as necessary or directed.</p>",
        "id": 423216707,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1708821293
    },
    {
        "content": "<p>What's the best way to do this? Or am I fundamentally making a mistake in how I work with these structures in the first place?</p>",
        "id": 423216724,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1708821320
    },
    {
        "content": "<p>Can you give an example of the sort of thing you want to do? I'm not sure I understand what you mean by you want to give a structure a shorter name</p>",
        "id": 423237562,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1708842889
    },
    {
        "content": "<p>Well, for example, I'm currently trying to prove that <code>RingCat</code> has all finite coproducts. In the process, I'm working with the value</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">L</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">ℤ</span><span class=\"o\">]</span> <span class=\"bp\">↑</span><span class=\"n\">R</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">ℤ</span><span class=\"o\">]</span> <span class=\"bp\">↑</span><span class=\"n\">cocone.pt</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">toAddHom</span> <span class=\"o\">:=</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"o\">{</span>\n          <span class=\"n\">toAddHom</span> <span class=\"o\">:=</span>\n            <span class=\"o\">{</span> <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">fL</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">fR</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n              <span class=\"n\">map_add'</span> <span class=\"o\">:=</span>\n                <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">r₁</span> <span class=\"n\">r₂</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">R</span><span class=\"o\">),</span>\n                    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">fL</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">fR</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r₁</span> <span class=\"bp\">+</span> <span class=\"n\">r₂</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">fL</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">fR</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">r₁</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">fL</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">fR</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">r₂</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n          <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span>\n            <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n              <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">R</span><span class=\"o\">),</span>\n                <span class=\"o\">{</span> <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">fL</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">fR</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n                        <span class=\"n\">map_add'</span> <span class=\"o\">:=</span>\n                          <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                            <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">r₁</span> <span class=\"n\">r₂</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">R</span><span class=\"o\">),</span>\n                              <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">fL</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">fR</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r₁</span> <span class=\"bp\">+</span> <span class=\"n\">r₂</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n                                <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">fL</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">fR</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">r₁</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">fL</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">fR</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">r₂</span><span class=\"o\">)</span> <span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">toFun</span>\n                    <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n                  <span class=\"o\">(</span><span class=\"n\">RingHom.id</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">•</span>\n                    <span class=\"o\">{</span> <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">fL</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">fR</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n                          <span class=\"n\">map_add'</span> <span class=\"o\">:=</span>\n                            <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                              <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">r₁</span> <span class=\"n\">r₂</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">R</span><span class=\"o\">),</span>\n                                <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">fL</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">fR</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r₁</span> <span class=\"bp\">+</span> <span class=\"n\">r₂</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n                                  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">fL</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">fR</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">r₁</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">fL</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">fR</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">r₂</span><span class=\"o\">)</span> <span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">toFun</span>\n                      <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n      <span class=\"n\">map_add'</span> <span class=\"o\">:=</span><span class=\"bp\">...</span> <span class=\"o\">},</span>\n  <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span><span class=\"bp\">...</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>and on and on and on; the whole thing is 19k characters. When this value comes up in my goal, <code>simp</code> and <code>dsimp</code> will tend to replace occurrences of <code>f</code> with the entire absurdly long definition; I can sometimes fix this with <code>congr</code> and the like, but not always (when the structure occurs under binders, usually). <code>eta_reduce</code> doesn't seem to fix the problem. I would like to designate certain definitions, within a proof, as simp-norm, basically, so that unless I override the default it uses <code>f</code> instead of <code>{&lt;19k characters &gt;}</code>.</p>",
        "id": 423242834,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1708848580
    },
    {
        "content": "<p><code>set_option pp.proofs.withType false</code> will make that a lot shorter</p>",
        "id": 423247507,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708852593
    },
    {
        "content": "<p>Using <code>(LinearMap.mul _ _).compl₁₂ fL fR</code> as the entirw expression would make it ever shorter</p>",
        "id": 423247647,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708852688
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/make.20simp.20use.20variable.20names.20instead.20of.20expanding.20structures/near/423247507\">said</a>:</p>\n<blockquote>\n<p><code>set_option pp.proofs.withType false</code> will make that a lot shorter</p>\n</blockquote>\n<p>Ooh, very nice! Thanks!<br>\n<span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/make.20simp.20use.20variable.20names.20instead.20of.20expanding.20structures/near/423247647\">said</a>:</p>\n<blockquote>\n<p>Using <code>(LinearMap.mul _ _).compl₁₂ fL fR</code> as the entirw expression would make it ever shorter</p>\n</blockquote>\n<p>Also very nice, I should've looked through <code>LinearMap</code> more carefully first!<br>\n(It actually ended up being <code>(LinearMap.mul _ _).compl₁₂ ⟨fL, by simp⟩ ⟨fR, by simp⟩</code>, but close enough)</p>",
        "id": 423249691,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1708854774
    }
]