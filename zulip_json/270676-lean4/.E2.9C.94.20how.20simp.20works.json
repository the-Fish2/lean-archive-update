[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hpw</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">True</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- rw [true_implies] -- fails</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">true_implies</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- state is ⊢ ∃ x, p x</span>\n  <span class=\"n\">exists</span> <span class=\"n\">w</span>\n</code></pre></div>\n<p>In this example, when uncommented, the <code>rw</code> fails, but the <code>simp only</code> makes progress. I have a couple of questions:</p>\n<ul>\n<li>why doesn't the <code>rw</code> work?</li>\n<li>what additional jiggery pokery is <code>simp only</code> getting up to behind the scenes, over and above rewriting using the <code>only</code> theorem I provided it, that allows it to work?</li>\n</ul>",
        "id": 430028311,
        "sender_full_name": "James Sully",
        "timestamp": 1711618660
    },
    {
        "content": "<ul>\n<li>is there a way to see the full tactic script generated by <code>simp</code>? <code>simp?</code> Doesn't give me enough insight to understand what's going on.</li>\n</ul>",
        "id": 430028754,
        "sender_full_name": "James Sully",
        "timestamp": 1711618821
    },
    {
        "content": "<p>You can use the <code>show_term</code> tactic. Put it right in front of the <code>simp</code></p>",
        "id": 430028786,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711618834
    },
    {
        "content": "<p>For <code>rw</code>, I think this is the typical case of the binder getting in the way</p>",
        "id": 430029091,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1711618925
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/how.20simp.20works/near/430028786\">said</a>:</p>\n<blockquote>\n<p>You can use the <code>show_term</code> tactic. Put it right in front of the <code>simp</code></p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">refine</span> <span class=\"n\">Eq.mpr</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">congrArg</span> <span class=\"n\">Exists</span> <span class=\"o\">(</span><span class=\"n\">funext</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true_implies</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">))))</span> <span class=\"bp\">?</span><span class=\"n\">m.9042</span>\n</code></pre></div>",
        "id": 430029152,
        "sender_full_name": "James Sully",
        "timestamp": 1711618944
    },
    {
        "content": "<p>I'm not sure it's helpful, but <a href=\"#narrow/stream/287929-mathlib4/topic/simp.20vs.20rw.20again/near/391348828\">this</a> is something I wrote that briefly states what <code>rw</code> and <code>simp</code> do.</p>",
        "id": 430029346,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711619011
    },
    {
        "content": "<p>A short version:</p>\n<ul>\n<li><code>rw</code> uses <code>Eq.rec</code> to rewrite the entire goal all at once. If your lemma states <code>a = b</code>, then it figures out a function <code>f</code> such that <code>f a</code> is the goal, and then it uses <code>Eq.rec</code> to prove <code>f a = f b</code>, and finally it uses <code>f a = f b</code> to replace the goal with <code>f b</code>.</li>\n<li><code>simp</code> uses \"congruence lemmas\" to navigate into subexpressions (the <code>congrArg</code> you see is such an example of a congruence lemma) to replace them.</li>\n</ul>",
        "id": 430029604,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711619093
    },
    {
        "content": "<p>I'm not seeing <code>Eq.rec</code> in the docs?</p>",
        "id": 430030163,
        "sender_full_name": "James Sully",
        "timestamp": 1711619287
    },
    {
        "content": "<p>It's defined by the <code>inductive</code> command when <code>Eq</code> itself is defined.</p>\n<p>It's part of the definition of <code>Eq</code>, and it's its \"recursor\".</p>",
        "id": 430030224,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711619312
    },
    {
        "content": "<p>Shouldn't that be here?<br>\n<a href=\"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Prelude.lean#L276-L279\">https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Prelude.lean#L276-L279</a></p>",
        "id": 430030541,
        "sender_full_name": "James Sully",
        "timestamp": 1711619424
    },
    {
        "content": "<p>Every <code>inductive</code> comes with a <code>rec</code> function, it's part of the deal of type theory</p>",
        "id": 430030703,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711619490
    },
    {
        "content": "<p>Ahh, I get what you're saying now.</p>",
        "id": 430030860,
        "sender_full_name": "James Sully",
        "timestamp": 1711619525
    },
    {
        "content": "<p>It's the low-level function that lets you work with terms of that type, to do <code>match</code>, recursion, etc.</p>",
        "id": 430030889,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711619533
    },
    {
        "content": "<p>what's its type?</p>",
        "id": 430030931,
        "sender_full_name": "James Sully",
        "timestamp": 1711619546
    },
    {
        "content": "<p>You can do <code>#check Eq.rec</code> to find out</p>",
        "id": 430030976,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711619560
    },
    {
        "content": "<p>(I found recursors to be very mysterious when I started learning Lean, and the types hard to read)</p>",
        "id": 430031122,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711619612
    },
    {
        "content": "<p>Ah, yep</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Eq.rec.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a_1</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">a</span> <span class=\"bp\">⋯</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a_1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">a_1</span> <span class=\"n\">t</span>\n</code></pre></div>",
        "id": 430031234,
        "sender_full_name": "James Sully",
        "timestamp": 1711619648
    },
    {
        "content": "<p>You might want to do <code>set_option pp.proofs true</code> to see what's under the <code>...</code></p>",
        "id": 430031295,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711619672
    },
    {
        "content": "<p>oops</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Eq.rec.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a_1</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">Eq.refl</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a_1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">a_1</span> <span class=\"n\">t</span>\n</code></pre></div>",
        "id": 430031476,
        "sender_full_name": "James Sully",
        "timestamp": 1711619745
    },
    {
        "content": "<p>yeah I find this to be very mysterious</p>",
        "id": 430031695,
        "sender_full_name": "James Sully",
        "timestamp": 1711619822
    },
    {
        "content": "<blockquote>\n<p>simp uses \"congruence lemmas\" to navigate into subexpressions (the congrArg you see is such an example of a congruence lemma) to replace them.</p>\n</blockquote>\n<p>This was very helpful though, thanks</p>",
        "id": 430031745,
        "sender_full_name": "James Sully",
        "timestamp": 1711619843
    },
    {
        "content": "<p>Here's an example of using <code>Eq.rec</code> to prove the substitution principle of equality:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Eq.rec</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 430032045,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711619946
    },
    {
        "content": "<p>By the way, if you ever see \"motive is not type correct\" when using <code>rw</code>, now you know that it has to do with some failure to create this <code>motive</code> argument. In particular, it has to do with failing to synthesize this <code>f</code> function, more or less.</p>",
        "id": 430032545,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711620102
    },
    {
        "content": "<p>Incidentally, this <code>example</code> is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=congrArg#doc\">docs#congrArg</a></p>",
        "id": 430032674,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711620138
    },
    {
        "content": "<p>Looks interesting. Seem like this stuff is in chapter 7 of Theorem Proving.<br>\n<a href=\"https://lean-lang.org/theorem_proving_in_lean4/inductive_types.html\">https://lean-lang.org/theorem_proving_in_lean4/inductive_types.html</a></p>\n<p>I'm currently at chapter 5 (Tactics) so i might come back to this then</p>",
        "id": 430033122,
        "sender_full_name": "James Sully",
        "timestamp": 1711620291
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"621161\">James Sully</span> has marked this topic as resolved.</p>",
        "id": 430442475,
        "sender_full_name": "Notification Bot",
        "timestamp": 1711856609
    }
]