[
    {
        "content": "<p>From the lean4 manual, (<a href=\"https://lean-lang.org/lean4/doc/dev/ffi.html\">https://lean-lang.org/lean4/doc/dev/ffi.html</a>) I have understood how to construct Inductive types that have no parameters(enums) and how to construct inductive types with a single case. How would I construct an object with any number of fields in multiple cases? If the specific case I want has no fields , then I can use lean_box, but if the case has fields what can I do?</p>",
        "id": 418531761,
        "sender_full_name": "Akhil Reddimalla",
        "timestamp": 1706472512
    },
    {
        "content": "<p>The simplest way to find out the answers to these kind of questions is to write a function that writes into such an inductive type or creates it or what have you and then compile it and look at the generated <code>.c</code> file to find out what lean did</p>",
        "id": 418532569,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706473133
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Bla</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">Bla</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">Bla</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">two</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bla</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bla</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">.</span><span class=\"n\">two</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>produces:</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"n\">LEAN_EXPORT</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">l_foo___rarg</span><span class=\"p\">(</span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">x_1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"nl\">_start</span><span class=\"p\">:</span>\n<span class=\"p\">{</span>\n<span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">x_2</span><span class=\"p\">;</span>\n<span class=\"n\">x_2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_alloc_ctor</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"n\">lean_ctor_set</span><span class=\"p\">(</span><span class=\"n\">x_2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x_1</span><span class=\"p\">);</span>\n<span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">x_2</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 418533048,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706473497
    },
    {
        "content": "<p>Thanks for the info. I will try this method</p>",
        "id": 418534826,
        "sender_full_name": "Akhil Reddimalla",
        "timestamp": 1706475043
    }
]