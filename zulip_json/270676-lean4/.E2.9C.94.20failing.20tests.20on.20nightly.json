[
    {
        "content": "<p>Could someone check whether they also observe whether tests on nightly are failing? I don't know if it's somehow a function of my being on an Intel mac.</p>\n<p>For example, I am seeing that <a href=\"https://github.com/leanprover/lean4/blob/master/tests/lean/1616.lean\">https://github.com/leanprover/lean4/blob/master/tests/lean/1616.lean</a> fails on nightly, on master, and on the most recent rc for mathlib.</p>\n<p>The test I'm doing on mathlib, to account for its project options, is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">relaxedAutoImplicit</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Cover</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n  <span class=\"bp\">|</span> <span class=\"n\">done</span>  <span class=\"o\">:</span> <span class=\"n\">Cover</span> <span class=\"o\">[]</span> <span class=\"o\">[]</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">left</span>  <span class=\"o\">:</span> <span class=\"n\">Cover</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Cover</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">right</span> <span class=\"o\">:</span> <span class=\"n\">Cover</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Cover</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">both</span>  <span class=\"o\">:</span> <span class=\"n\">Cover</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Cover</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Linear</span> <span class=\"o\">:</span> <span class=\"n\">Cover</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">done</span> <span class=\"o\">:</span> <span class=\"n\">Linear</span> <span class=\"bp\">.</span><span class=\"n\">done</span>\n  <span class=\"bp\">|</span> <span class=\"n\">left</span> <span class=\"o\">:</span> <span class=\"n\">Linear</span> <span class=\"n\">c</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Linear</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">right</span> <span class=\"o\">:</span> <span class=\"n\">Linear</span> <span class=\"n\">c</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Linear</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">right</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This shows failures on <code>Linear</code> for both the <code>left</code> and <code>right</code> constructors.</p>",
        "id": 409634595,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1703274578
    },
    {
        "content": "<p>Building current master to run the test on an XPS 13 unless someone beats me to it</p>",
        "id": 409635304,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1703275005
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> succeeds on 7c38649527c85116345df831254985afa2680dd0</p>",
        "id": 409638191,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1703276623
    },
    {
        "content": "<p>Interesting... I don't know whether to be relieved that it works somewhere or worried that it's not everywhere!</p>",
        "id": 409638721,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1703276996
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/failing.20tests.20on.20nightly/near/409638721\">said</a>:</p>\n<blockquote>\n<p>Interesting... I don't know whether to be relieved that it works somewhere or worried that it's not everywhere!</p>\n</blockquote>\n<p>whats the failure on your side?</p>",
        "id": 409639807,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1703277749
    },
    {
        "content": "<p>The errors for 1616 look like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">implicit</span> <span class=\"n\">argument</span>\n  <span class=\"bp\">@</span><span class=\"n\">Linear</span> <span class=\"bp\">?</span><span class=\"n\">m.8058</span> <span class=\"bp\">?</span><span class=\"n\">m.8059</span> <span class=\"bp\">?</span><span class=\"n\">m.8060</span> <span class=\"bp\">?</span><span class=\"n\">m.8061</span> <span class=\"n\">c</span>\n<span class=\"n\">context</span><span class=\"o\">:</span>\n<span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">Cover</span> <span class=\"bp\">?</span><span class=\"n\">m.8059</span> <span class=\"bp\">?</span><span class=\"n\">m.8060</span> <span class=\"bp\">?</span><span class=\"n\">m.8061</span>\n<span class=\"bp\">⊢</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n</code></pre></div>",
        "id": 409639864,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1703277792
    },
    {
        "content": "<p>Clean checkout, with stage0 rebuilt? Try nuking <code>build/</code> if you are desperate (wild guess)</p>",
        "id": 409640776,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1703278392
    },
    {
        "content": "<p>Yeah, I tried deleted my build directory during my testing already. Haven't tried a clean checkout, that's worth a shot.</p>",
        "id": 409651586,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1703285318
    },
    {
        "content": "<p>I'm not sure exactly what happened earlier, but I'm guessing that either I accidentally did my testing unknowingly with local changes that break tests and with a mathlib that overrode <code>lean-toolchain</code> to use this development version, or I am unlucky and Lean has specific code to fail on my laptop specifically the afternoon of 22 Dec 2023. Whatever the case, it works now, and this seems like the perfect time to use the \"resolve\" feature <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 409670398,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1703296304
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> has marked this topic as resolved.</p>",
        "id": 409670403,
        "sender_full_name": "Notification Bot",
        "timestamp": 1703296307
    }
]