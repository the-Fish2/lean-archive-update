[
    {
        "content": "<p>Hello, I am new to Lean.  I was trying to prove a particular equivalence of types and I came across this error when trying to use rcases to obtain a variable from an existentially quantified proposition:</p>\n<blockquote>\n<p>tactic 'cases' failed, nested error:<br>\ntactic 'induction' failed, recursor 'Exists.casesOn' can only eliminate into Prop</p>\n</blockquote>\n<p>I realized it was because an equivalence such as ℕ ≃ ℕ has type Type, not Prop as I initially supposed.</p>\n<p>MWE: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">a</span>  <span class=\"o\">:</span>  <span class=\"mi\">2</span><span class=\"bp\">=</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"bp\">&gt;</span><span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"c1\">-- no problem</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">b</span>  <span class=\"o\">:</span>  <span class=\"n\">ℕ</span> <span class=\"bp\">≃</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"bp\">&gt;</span><span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"c1\">-- produces error</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>What is the right way to obtain the variable x in this case? Thank you.</p>",
        "id": 411110900,
        "sender_full_name": "Jair Taylor",
        "timestamp": 1704333188
    },
    {
        "content": "<p>You can use <code>h.choose</code> (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Exists.choose#doc\">docs#Exists.choose</a>)</p>",
        "id": 411111247,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704333481
    },
    {
        "content": "<p>Ah, great, thanks so much for the quick response! So I can do this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">b</span>  <span class=\"o\">:</span>  <span class=\"n\">ℕ</span> <span class=\"bp\">≃</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"bp\">&gt;</span><span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">Exists.choose</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">&gt;</span><span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">Exists.choose_spec</span> <span class=\"n\">h</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 411111831,
        "sender_full_name": "Jair Taylor",
        "timestamp": 1704333779
    },
    {
        "content": "<p>you will need to put <code>noncomputable</code> on the def</p>",
        "id": 411111880,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704333796
    },
    {
        "content": "<p>Understood, thank you!</p>",
        "id": 411112064,
        "sender_full_name": "Jair Taylor",
        "timestamp": 1704333866
    },
    {
        "content": "<p>you can also use the <code>choose</code> tactic for this</p>",
        "id": 411112146,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704333909
    },
    {
        "content": "<p>Oh nice! So I can also do </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">b</span>  <span class=\"o\">:</span>  <span class=\"n\">ℕ</span> <span class=\"bp\">≃</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"bp\">&gt;</span><span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">choose</span> <span class=\"n\">x</span> <span class=\"n\">h</span> <span class=\"n\">using</span> <span class=\"n\">h</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>Thanks!</p>",
        "id": 411112647,
        "sender_full_name": "Jair Taylor",
        "timestamp": 1704334169
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"674925\">Jair Taylor</span> has marked this topic as resolved.</p>",
        "id": 411130327,
        "sender_full_name": "Notification Bot",
        "timestamp": 1704345584
    }
]