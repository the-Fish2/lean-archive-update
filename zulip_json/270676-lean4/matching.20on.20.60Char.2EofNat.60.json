[
    {
        "content": "<p>I noticed that <code>Char.ofNat</code> is tagged as <code>@[match_pattern]</code>, but if I actually try to match on it, I get an error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"k\">match</span> <span class=\"sc\">' '</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ofNat</span> <span class=\"mi\">5</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n</code></pre></div>\n<p>gives the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">cases'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">nested</span> <span class=\"n\">error</span><span class=\"o\">:</span>\n<span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">induction'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">recursor</span> <span class=\"bp\">'</span><span class=\"n\">Or.casesOn'</span> <span class=\"n\">can</span> <span class=\"n\">only</span> <span class=\"n\">eliminate</span> <span class=\"n\">into</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">case</span> <span class=\"n\">mk.mk.mk.case_1</span>\n<span class=\"n\">motive</span><span class=\"o\">:</span> <span class=\"n\">Char</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"bp\">?</span><span class=\"n\">u.2602</span>\n<span class=\"n\">h_1</span><span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">→</span>\n  <span class=\"n\">motive</span>\n    <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"mi\">5</span> <span class=\"bp\">&lt;</span> <span class=\"n\">UInt32.size</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n      <span class=\"n\">valid</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"mi\">5</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">55296</span> <span class=\"bp\">∨</span> <span class=\"mi\">57343</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">5</span> <span class=\"bp\">∧</span> <span class=\"mi\">5</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1114112</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"n\">h_2</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">x</span>\n<span class=\"n\">isLt</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"mi\">5</span> <span class=\"bp\">&lt;</span> <span class=\"n\">UInt32.size</span>\n<span class=\"n\">valid</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">UInt32.isValidChar</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"n\">isLt</span><span class=\"bp\">✝</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">motive</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"n\">isLt</span><span class=\"bp\">✝</span> <span class=\"o\">}</span> <span class=\"o\">},</span> <span class=\"n\">valid</span> <span class=\"o\">:=</span> <span class=\"n\">valid</span><span class=\"bp\">✝</span> <span class=\"o\">}</span>\n <span class=\"n\">after</span> <span class=\"n\">processing</span>\n  <span class=\"o\">(</span><span class=\"n\">Char.mk</span> <span class=\"o\">(</span><span class=\"n\">UInt32.mk</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Fin.mk</span> <span class=\"mi\">5</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n<span class=\"n\">the</span> <span class=\"n\">dependent</span> <span class=\"n\">pattern</span> <span class=\"n\">matcher</span> <span class=\"n\">can</span> <span class=\"n\">solve</span> <span class=\"n\">the</span> <span class=\"n\">following</span> <span class=\"n\">kinds</span> <span class=\"n\">of</span> <span class=\"n\">equations</span>\n<span class=\"bp\">-</span> <span class=\"bp\">&lt;</span><span class=\"n\">var</span><span class=\"bp\">&gt;</span> <span class=\"bp\">=</span> <span class=\"bp\">&lt;</span><span class=\"n\">term</span><span class=\"bp\">&gt;</span> <span class=\"n\">and</span> <span class=\"bp\">&lt;</span><span class=\"n\">term</span><span class=\"bp\">&gt;</span> <span class=\"bp\">=</span> <span class=\"bp\">&lt;</span><span class=\"n\">var</span><span class=\"bp\">&gt;</span>\n<span class=\"bp\">-</span> <span class=\"bp\">&lt;</span><span class=\"n\">term</span><span class=\"bp\">&gt;</span> <span class=\"bp\">=</span> <span class=\"bp\">&lt;</span><span class=\"n\">term</span><span class=\"bp\">&gt;</span> <span class=\"n\">where</span> <span class=\"n\">the</span> <span class=\"n\">terms</span> <span class=\"n\">are</span> <span class=\"n\">definitionally</span> <span class=\"n\">equal</span>\n<span class=\"bp\">-</span> <span class=\"bp\">&lt;</span><span class=\"n\">constructor</span><span class=\"bp\">&gt;</span> <span class=\"bp\">=</span> <span class=\"bp\">&lt;</span><span class=\"n\">constructor</span><span class=\"bp\">&gt;</span><span class=\"o\">,</span> <span class=\"n\">examples</span><span class=\"o\">:</span> <span class=\"n\">List.cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"bp\">=</span> <span class=\"n\">List.cons</span> <span class=\"n\">y</span> <span class=\"n\">ys</span><span class=\"o\">,</span> <span class=\"n\">and</span> <span class=\"n\">List.cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"bp\">=</span> <span class=\"n\">List.nil</span>\n</code></pre></div>",
        "id": 416949741,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1705721791
    }
]