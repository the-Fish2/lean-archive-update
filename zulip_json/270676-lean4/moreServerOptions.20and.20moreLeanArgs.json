[
    {
        "content": "<p>I have a project in which I have included <code>moreServerOptions</code> in the package declaration and <code>moreLeanArgs</code> in the declaration of a lean_lib, which is the default target.  (I did it that way because I was copying another lakefile that did it that way.)  This works fine for files that are part of the library.  But if I have a Lean file in the project that is not part of the library, I can open it in VSCode and write proofs in that file, but the options I set in <code>moreServerOptions</code> and <code>moreLeanArgs</code> don't seem to apply.  (For example, I would like to set <code>pp.funBinderTypes</code> to true.)  Is there a way to set options that apply to all files in the project, whether they are part of a build target or not?</p>\n<p>I don't think I really understand the difference between server options and lean arguments.  Do I have to set both?  Does it depend on what option I'm setting?</p>",
        "id": 445424558,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1718733388
    },
    {
        "content": "<p>Someone please correct me but I believe that server options are for interactive use (eg within vscode through the extension) while Lean args are for building (eg <code>lake build</code>)</p>",
        "id": 445424886,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1718733476
    },
    {
        "content": "<p>It looks like <code>leanOptions</code> does both--options for both lean and the server.  But the options still don't seem to apply to a file that I open in VSCode but that isn't part of a build target.  That's what I'm really looking for--a way to set options in any file.</p>",
        "id": 445442826,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1718738584
    },
    {
        "content": "<p>I think the recommendation is that you should make the files you open in VSCode be part of a build target</p>",
        "id": 445458652,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718743811
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"453098\">@Dan Velleman</span> One way to do this is via setting <code>moreGlobalServerArgs</code> with e.g. <code>-Dpp.funBinderTypes=true</code>. Note that these settings wil apply to every Lean file, even those opened to other projects. This previously caused problems for some users, hence why this is no longer the default.</p>",
        "id": 445640864,
        "sender_full_name": "Mac Malone",
        "timestamp": 1718811355
    },
    {
        "content": "<p>Is there any way to set options only for files which do <em>not</em> belong to any project?</p>",
        "id": 445642511,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718811718
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Not presently, but that could be added relatively easily. Maybe it would be worthwhile to make an issue?</p>",
        "id": 445646666,
        "sender_full_name": "Mac Malone",
        "timestamp": 1718812678
    },
    {
        "content": "<p>I suspect that's the feature that Dan is asking for</p>",
        "id": 445646955,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718812766
    },
    {
        "content": "<p>(as setting <code>moreGlobalServerArgs</code> will break files in other projects when using goto definition; the <code>pp</code> options will break files which use <code>#guard_msgs</code>)</p>",
        "id": 445647018,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718812786
    },
    {
        "content": "<p>I am interested in lean files that are in the package's directory.  I was assuming that any such file would belong to the project, even if it wasn't associated with a build target.  When I open such a file, it uses the version of Lean specified in the lean-toolchain, and it uses the dependencies specified in the lakefile.  So I was expecting that other things specified in the configuration of the package, such as leanOptions, would also apply to such files.  But it sounds like that is not the case.  That's why I was confused.</p>\n<p>I have read the README file for lake, but I found it hard to understand.  For example, I didn't know at first what \"build\" means.  When I was first getting started with Lean, I didn't want to build anything, I just wanted to write proofs and have Lean check them, so I didn't know what building was for.  There are references to olean, ilean, c, and o files, but I don't think there is any explanation of what those files are.  I assumed at first that if I had 2 lean files in the package's directory, then one could import the other.  It took me a while to figure out that a file can only be imported if it is in a library.  I have gradually, by trial and error, figured out how to do most of what I want to do with lake.  Is there some other document that I should have been reading that explains these things?</p>",
        "id": 445729335,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1718843854
    },
    {
        "content": "<p>By the way, I am primarily interested in Lean for education rather than research.  For education, I sometimes want to write files that have errors in them, to illustrate mistakes and how Lean catches them and gives error messages.  I assume that such files cannot be part of a build target--the build would fail.</p>",
        "id": 445729797,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1718844107
    },
    {
        "content": "<p>When you say \"a package's directory\", do you mean <code>my_git_repository/Foo.lean</code> or <code>my_git_repository/MyLib/Foo.lean</code>? The latter should work out of the box</p>",
        "id": 445734555,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718846775
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"453098\">Dan Velleman</span> <a href=\"#narrow/stream/270676-lean4/topic/moreServerOptions.20and.20moreLeanArgs/near/445729797\">said</a>:</p>\n<blockquote>\n<p>I assume that such files cannot be part of a build target--the build would fail.</p>\n</blockquote>\n<p>Not every build target has to be built. When used with the globbing option, <code>lean_lib</code> creates a build target for every lean file inside the folder. You can then only build the ones that are known to work when testing; perhaps by having a <code>WorkingFiles.lean</code> that imports all the error-free files, but not the erroring ones, and then using <code>lake build WorkingFiles</code></p>",
        "id": 445734712,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718846871
    },
    {
        "content": "<p>I meant <code>my_git_repository/foo.lean</code>.</p>\n<p>I suppose another possibility is to have <code>MyLib1</code> and <code>MyLib2</code>.  If <code>MyLib1</code> is the default target, then I assume <code>lake build</code> will only build that one.  It still seems strange to me to put files into a build target that I have no intention of building, but perhaps that is the recommended setup.</p>",
        "id": 445943644,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1718914183
    }
]