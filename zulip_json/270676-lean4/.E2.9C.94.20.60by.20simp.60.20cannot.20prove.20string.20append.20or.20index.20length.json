[
    {
        "content": "<p>Newbie question: I am new to lean and try to follow the examples at <a href=\"https://lean-lang.org/functional_programming_in_lean/props-proofs-indexing.html\">https://lean-lang.org/functional_programming_in_lean/props-proofs-indexing.html</a>.</p>\n<p>I wrote the following in my VS-code editor</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">addAndAppend</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"s2\">\"Str\"</span><span class=\"bp\">.</span><span class=\"n\">append</span> <span class=\"s2\">\"ing\"</span> <span class=\"bp\">=</span> <span class=\"s2\">\"String\"</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>\n<p>which returned</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">3</span><span class=\"n\">_interlude_propositions_proofs_and_indexing.lean</span><span class=\"o\">:</span><span class=\"mi\">21</span><span class=\"o\">:</span><span class=\"mi\">72</span>\n<span class=\"n\">unsolved</span> <span class=\"n\">goals</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">String.append</span> <span class=\"s2\">\"Str\"</span> <span class=\"s2\">\"ing\"</span> <span class=\"bp\">=</span> <span class=\"s2\">\"String\"</span>\n</code></pre></div>\n<p>Did I do anything wrong here? Any thoughts or suggestions?</p>",
        "id": 436178285,
        "sender_full_name": "Ying Xiong",
        "timestamp": 1714444111
    },
    {
        "content": "<p>Similarly, the following code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">woodlandCritters</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>  <span class=\"o\">[</span><span class=\"s2\">\"hedgehog\"</span><span class=\"o\">,</span> <span class=\"s2\">\"deer\"</span><span class=\"o\">,</span> <span class=\"s2\">\"snail\"</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">third</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ok</span> <span class=\"o\">:</span> <span class=\"n\">xs.length</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]</span>\n<span class=\"k\">#eval</span> <span class=\"n\">third</span> <span class=\"n\">woodlandCritters</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>yields</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">test.lean</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n<span class=\"s2\">\"snail\"</span>\n<span class=\"n\">test.lean</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"mi\">30</span>\n<span class=\"n\">unsolved</span> <span class=\"n\">goals</span>\n<span class=\"bp\">⊢</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">List.length</span> <span class=\"n\">woodlandCritters</span>\n</code></pre></div>\n<p>So it seems <code>by simp</code> cannot resolve <code>List.length</code> either</p>",
        "id": 436178559,
        "sender_full_name": "Ying Xiong",
        "timestamp": 1714444257
    },
    {
        "content": "<p><code>simp</code> doesn't have rules for <code>String.append</code>. You can finish off that first goal by using <code>by simp; rfl</code>.</p>\n<p>There's also a new simp feature where it will solve goals that have no free or metavariables (so-called \"ground terms\") by fully reducing them. It seems to work here</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">addAndAppend</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"s2\">\"Str\"</span><span class=\"bp\">.</span><span class=\"n\">append</span> <span class=\"s2\">\"ing\"</span> <span class=\"bp\">=</span> <span class=\"s2\">\"String\"</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">ground</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">})</span>\n</code></pre></div>",
        "id": 436185976,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714448454
    },
    {
        "content": "<p>You can tell <code>simp</code> to unfold <code>woodlandCritters</code> like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">third</span> <span class=\"n\">woodlandCritters</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">woodlandCritters</span><span class=\"o\">])</span>\n</code></pre></div>",
        "id": 436186036,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714448499
    },
    {
        "content": "<p>It looks like <code>ground := true</code> also works here</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">third</span> <span class=\"n\">woodlandCritters</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">ground</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">}))</span>\n</code></pre></div>\n<p>(This is my first time using this feature, it's very new. You might not have it yet in FPIL.)</p>",
        "id": 436186169,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714448574
    },
    {
        "content": "<p>Thank you so much for your answer, Kyle! This is super helpful!</p>",
        "id": 436189969,
        "sender_full_name": "Ying Xiong",
        "timestamp": 1714451063
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"712239\">Ying Xiong</span> has marked this topic as resolved.</p>",
        "id": 436189972,
        "sender_full_name": "Notification Bot",
        "timestamp": 1714451066
    }
]