[
    {
        "content": "<p>I just made a PR <a href=\"https://github.com/leanprover-community/vscode-lean4/pull/422\">vscode-lean4#422</a> adding a bunch of abbreviations.</p>\n<p>There are also a few changes (I think pretty uncontroversial):</p>\n<ul>\n<li><code>\\setminus</code> from <code>∖</code> to <code>\\</code> (the latter is the ASCII symbol). The former is unused in Mathlib, except in docstrings using the symbol incorrectly to refer to the latter. The former is still available as <code>\\smallsetminus</code>.</li>\n<li><code>\\subset</code> from <code>⊂</code> to <code>⊆</code>. The former is almost unused compared to the latter in Mathlib (240 vs 6900 hits). The former symbol is still available as <code>\\ssub</code> or <code>\\ssubset</code>. This should also make <code>\\subs</code> autocomplete conveniently to <code>⊆</code> instead of <code>⊂</code>.</li>\n<li><code>\\supset</code> similarly from <code>⊃</code> to <code>⊇</code>, which are rarely used (former: 13 hits, but only in tests/delaborators, latter: 80 hits).</li>\n</ul>",
        "id": 429714053,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1711477158
    },
    {
        "content": "<p>Feel free to suggest more abbreviations that you are missing, and I can add them to this PR or a later PR.</p>",
        "id": 429714187,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1711477206
    },
    {
        "content": "<p>Can you add <code>\\ma</code> so that typing <code>\\ma</code> results in <code>↦</code> not <code>♂</code>?</p>",
        "id": 429714476,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711477312
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/270676-lean4/topic/a.20few.20abbreviation.20changes/near/429714053\">said</a>:</p>\n<blockquote>\n<ul>\n<li><code>\\subset</code> from <code>⊂</code> to <code>⊆</code>. The former is almost unused compared to the latter in Mathlib (240 vs 6900 hits). The former symbol is still available as <code>⊂ or </code>⊂ This should also make <code>⊂ autocomplete conveniently to </code>⊆` </li>\n</ul>\n</blockquote>\n<p><code>\\su</code> already autocompletes to <code>⊆</code></p>",
        "id": 429714676,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711477387
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/270676-lean4/topic/a.20few.20abbreviation.20changes/near/429714676\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/270676-lean4/topic/a.20few.20abbreviation.20changes/near/429714053\">said</a>:</p>\n<blockquote>\n<ul>\n<li><code>\\subset</code> from <code>⊂</code> to <code>⊆</code>. The former is almost unused compared to the latter in Mathlib (240 vs 6900 hits). The former symbol is still available as <code>⊂ or </code>⊂ This should also make <code>⊂ autocomplete conveniently to </code>⊆` </li>\n</ul>\n</blockquote>\n<p><code>\\su</code> already autocompletes to <code>⊆</code></p>\n</blockquote>\n<p>Yes, I know <code>\\subs</code> is not the shortest way to write that symbol (although I generally use <code>\\sub</code>), but still sometimes I (or a student) occasionally ends up writing.</p>",
        "id": 429730566,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1711483491
    },
    {
        "content": "<p>Could you also add <code>\\lf</code> for <code>⌊</code>? It currently gives <code>⧏</code></p>",
        "id": 429731196,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711483739
    },
    {
        "content": "<p>I think the first occurrence is chosen in case there are competing matches (and there is no exact match), so I moved the more desirable symbols up.</p>",
        "id": 429731847,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1711483996
    },
    {
        "content": "<p>I also added <code>\"floor\": \"⌊$CURSOR⌋\"</code> (i.e. you get both symbols and your cursor goes in between).</p>",
        "id": 429732012,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1711484068
    },
    {
        "content": "<p>I assume you also added <code>ceil</code>?</p>",
        "id": 429736144,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711485675
    },
    {
        "content": "<p>Of course, adding only one of them would be stupid (<em>quickly pushes a commit adding <code>ceil</code></em>).</p>",
        "id": 429748022,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1711490995
    },
    {
        "content": "<p>Should we switch to using <code>∖</code> (the unicode) for <code>sdiff</code>?</p>",
        "id": 429914763,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711561379
    },
    {
        "content": "<p>Right now it's the only boolean algebra operator that isn't unicode, so I don't think there's that much burden in making it so.</p>",
        "id": 429915017,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711561480
    },
    {
        "content": "<p>Don't see much point in doing so, but we could</p>",
        "id": 429916172,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711561879
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/270676-lean4/topic/a.20few.20abbreviation.20changes/near/429731196\">said</a>:</p>\n<blockquote>\n<p>Could you also add <code>\\lf</code> for <code>⌊</code>? It currently gives <code>⧏</code></p>\n</blockquote>\n<p><code>⧏</code> is currently used as a \"less-than-or-fuzzy\" relation in SetTheory.PGame. How do you type <code>⧏</code> after this change?</p>",
        "id": 430163013,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1711660336
    },
    {
        "content": "<p>I don't really mind. Can you come up with an abbreviation that's not <code>lf</code>?</p>",
        "id": 430163977,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711660860
    },
    {
        "content": "<p><code>\\lfuzzy</code> would be acceptable (although it is nice to have symmetry with <code>\\le</code> and <code>\\lf</code>)</p>",
        "id": 430164241,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1711660999
    },
    {
        "content": "<p>I'm afraid <code>⌊</code> is much more used than <code>⧏</code>, so it would be better to respect the <code>\\lf</code>/<code>\\rf</code> symmetry</p>",
        "id": 430164397,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711661071
    },
    {
        "content": "<p><code>SetTheory.PGame.LF</code> is probably misnamed as well. <code>SetTheory.PGame.LTF</code> or <code>SetTheory.PGame.LTFuzzy</code> seem like more appropriate names.</p>",
        "id": 430166986,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1711662452
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LE#doc\">docs#LE</a> would like to disagree <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 430167107,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1711662508
    },
    {
        "content": "<p>I renamed <code>\\lf</code> to <code>\\lfuzzy</code>. <code>\\&lt;|</code> is also available. I also added shortcuts for the symmetric symbol <code>⧐</code> (maybe also useful for games?)</p>",
        "id": 430167123,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1711662515
    },
    {
        "content": "<p>I renamed <code>\\lf</code> to <code>\\lfuzzy</code>. <code>\\&lt;|</code> is also available. I also added shortcuts for the symmetric symbol <code>⧐</code> (maybe also useful for games?)</p>",
        "id": 430167170,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1711662546
    }
]