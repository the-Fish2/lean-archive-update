[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"n\">matcha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"mi\">42</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False.elim</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">matcha</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">matcha</span><span class=\"o\">)</span>\n      <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n    <span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">aesop</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"n\">matcha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"mi\">42</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False.elim</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">matcha</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">matcha</span><span class=\"o\">)</span>\n      <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n    <span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">aesop</span>\n</code></pre></div>\n<p>The first example is fine.<br>\nThe second example gives me \"unknown constant\" and some <code>_private</code> garbage.<br>\nNote that the error happens only after the proof is finished.</p>",
        "id": 436004717,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1714385400
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> this sounds like one for you</p>",
        "id": 436013978,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1714388465
    },
    {
        "content": "<p>I see that <code>aesop?</code> produces</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Nat.succ.injEq</span><span class=\"o\">,</span>\n    <span class=\"n\">OfNat.one_ne_ofNat</span><span class=\"o\">,</span>\n    <span class=\"n\">IsEmpty.forall_iff</span><span class=\"o\">,</span>\n    <span class=\"n\">_example.match_1.eq_2</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>while it should be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Nat.succ.injEq</span><span class=\"o\">,</span>\n    <span class=\"n\">OfNat.one_ne_ofNat</span><span class=\"o\">,</span>\n    <span class=\"n\">IsEmpty.forall_iff</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>only.</p>",
        "id": 436026515,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1714392413
    },
    {
        "content": "<p>Very interesting bug, thanks. Without Mathlib:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Aesop</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"n\">matcha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"mi\">42</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False.elim</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">matcha</span><span class=\"bp\">;</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span>\n      <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n    <span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">aesop</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"n\">matcha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"mi\">42</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False.elim</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">matcha</span><span class=\"bp\">;</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span>\n      <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n    <span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">aesop</span>\n</code></pre></div>",
        "id": 436321030,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1714497834
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/aesop/pull/126\">aesop#126</a></p>",
        "id": 436321379,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1714497953
    }
]