[
    {
        "content": "<p><a href=\"https://github.com/dwrensha/tryAtEachStep\"><code>tryAtEachStep</code></a> is a little tool I made that runs a tactic (for example <code>exact?</code> or <code>rw_search</code>) on every proof step in a given Lean file.<br>\nI have found it to be surprisingly effective at finding ways to improve code. See the README for a list of some optimizations it has already found in the past two days.<br>\nFor a laugh, try running it on <code>Mathlib.Data.List.Basic</code> -- it'll tell you about a lot of cruft!</p>",
        "id": 424112870,
        "sender_full_name": "David Renshaw",
        "timestamp": 1709242646
    },
    {
        "content": "<p>(Please use careful judgement when opening pull requests based on the output of this tool. Not every success of <code>exact?</code> necessarily represents an improvement. For example, it often suggests <code>exact rfl</code> in situations where that would commonly be considered to be defeq abuse.)</p>",
        "id": 424113247,
        "sender_full_name": "David Renshaw",
        "timestamp": 1709242826
    },
    {
        "content": "<p>Witchcraft! <span aria-label=\"mage\" class=\"emoji emoji-1f9d9\" role=\"img\" title=\"mage\">:mage:</span></p>",
        "id": 424113563,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709242976
    },
    {
        "content": "<p><code>tryEachStep</code> might also be considered interesting as an up-to-date example of how to abuse infotrees.</p>",
        "id": 424113598,
        "sender_full_name": "David Renshaw",
        "timestamp": 1709242997
    },
    {
        "content": "<p>previous examples being <a href=\"https://github.com/semorrison/lean-training-data/blob/master/TrainingData/InfoTree/Basic.lean\">https://github.com/semorrison/lean-training-data/blob/master/TrainingData/InfoTree/Basic.lean</a> and <a href=\"https://github.com/lean-dojo/LeanDojo/blob/main/src/lean_dojo/data_extraction/ExtractData.lean\">https://github.com/lean-dojo/LeanDojo/blob/main/src/lean_dojo/data_extraction/ExtractData.lean</a></p>",
        "id": 424113687,
        "sender_full_name": "David Renshaw",
        "timestamp": 1709243040
    },
    {
        "content": "<p>Nice!</p>",
        "id": 424126789,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709248694
    },
    {
        "content": "<p>I want to see what it does with <code>omega</code>.</p>",
        "id": 424126821,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709248710
    },
    {
        "content": "<p><code>tryAtEachStep omega</code> on the first file I looked at: <a href=\"https://github.com/dwrensha/compfiles/commit/98bad7c9c20e6369cdaa15a5e790fcc92e664659\">https://github.com/dwrensha/compfiles/commit/98bad7c9c20e6369cdaa15a5e790fcc92e664659</a></p>",
        "id": 424130186,
        "sender_full_name": "David Renshaw",
        "timestamp": 1709250378
    },
    {
        "content": "<p>The old <code>linarith</code> needs the extra massaging before it works, and it's slower than <code>omega</code>.</p>",
        "id": 424130303,
        "sender_full_name": "David Renshaw",
        "timestamp": 1709250442
    },
    {
        "content": "<p>another nice one: <a href=\"https://github.com/dwrensha/compfiles/commit/48ecf3f73e85b4b5a45172de14db8c5ed8947e22\">https://github.com/dwrensha/compfiles/commit/48ecf3f73e85b4b5a45172de14db8c5ed8947e22</a></p>",
        "id": 424132333,
        "sender_full_name": "David Renshaw",
        "timestamp": 1709251316
    },
    {
        "content": "<p>Here's a feature request: compare the timings of the original proof and the replacement tactic, and allow reporting only faster replacements!</p>",
        "id": 424141874,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709256560
    },
    {
        "content": "<p>size of the generated proof term could be interesting too</p>",
        "id": 424145965,
        "sender_full_name": "David Renshaw",
        "timestamp": 1709257686
    },
    {
        "content": "<p>I guess for timings you would want to time both the elaboration and sending the declaration to the kernel. Maybe too complicated. :-(</p>",
        "id": 424146274,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709257906
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> you asked for it: <a href=\"https://github.com/leanprover-community/mathlib4/pull/11093\">mathlib4#11093</a></p>",
        "id": 424338889,
        "sender_full_name": "David Renshaw",
        "timestamp": 1709333906
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243791\">@David Renshaw</span> you should <code>!bench</code> to see what the speedcenter thinks.</p>",
        "id": 424339201,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709334072
    },
    {
        "content": "<p>Very nice! A possible suggestion for a feature would be an optional functionality to see if you can reduce an assumption, both with the old proof and the new attempt. This has been discussed previously and was apparently present in some form Lean3. I think this might be a nice place to incorporate such a feature!</p>",
        "id": 424341475,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1709335419
    },
    {
        "content": "<p>What do you mean by \"reduce an assumption\"?</p>",
        "id": 424343498,
        "sender_full_name": "David Renshaw",
        "timestamp": 1709336572
    },
    {
        "content": "<p>benchmark results are in and looking good :-)</p>",
        "id": 424343554,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709336616
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"459699\">@Joël Riou</span> this is one is a gift for you:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gi\">+ ~Mathlib.AlgebraicTopology.DoldKan.Faces                     instructions   -46.9%</span>\n</code></pre></div>",
        "id": 424344364,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709337071
    },
    {
        "content": "<p>ha ha I just DMed him saying the same thing. It's not just that file, there is a ton of stuff he wrote before <code>omega</code> which can now be speeded up.</p>",
        "id": 424344956,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709337482
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243791\">David Renshaw</span> <a href=\"#narrow/stream/270676-lean4/topic/tryAtEachStep.3A.20run.20a.20tactic.20on.20every.20step.20in.20your.20proofs/near/424343498\">said</a>:</p>\n<blockquote>\n<p>What do you mean by \"reduce an assumption\"?</p>\n</blockquote>\n<p>suppose we have a hypothesis [Property A], but Property extends BaseProperty. By reducing an assumption I meant seeing if the initial hypothesis can be replaced by the weaker assumption [BaseProperty A]? I see how my phrasing was unclear, it was late here <span aria-label=\"sleeping\" class=\"emoji emoji-1f634\" role=\"img\" title=\"sleeping\">:sleeping:</span> …</p>",
        "id": 424370425,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1709360930
    },
    {
        "content": "<p>Oof, unfortunately merging <a href=\"https://github.com/leanprover-community/mathlib4/pull/11093\">mathlib4#11093</a> was a bit premature: in v4.7.0-rc1 we are <em>weakening</em> <code>omega</code> slightly, because we decided that doing identification of atoms up to defeq was too expensive.</p>",
        "id": 424371872,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709362580
    },
    {
        "content": "<p>This means for example that it will no longer solve <code>id x &lt;= x</code>.</p>",
        "id": 424371876,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709362591
    },
    {
        "content": "<p>So of the the <code>omega</code> calls introduced in <a href=\"https://github.com/leanprover-community/mathlib4/pull/11093\">mathlib4#11093</a> now need to be reverted on nightly-testing.</p>",
        "id": 424371896,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709362616
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243791\">@David Renshaw</span>, possibilities:</p>",
        "id": 424371913,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709362642
    },
    {
        "content": "<ul>\n<li>just revert the PR, and redo it after we move to v4.7.0-rc1</li>\n<li>we go through nightly-testing reverting proofs that now break</li>\n</ul>",
        "id": 424371926,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709362667
    },
    {
        "content": "<ul>\n<li>We make <code>omega!</code> work</li>\n</ul>",
        "id": 424371997,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709362736
    },
    {
        "content": "<p>Yes, sure, but I'm not doing that before v4.7.0-rc1.</p>",
        "id": 424372017,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709362766
    },
    {
        "content": "<p>I'm just going the revert the uses of omega in NormNum/Basic, in the hope that they are the only \"weird\" ones.</p>",
        "id": 424372033,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709362797
    },
    {
        "content": "<p>(we need a better way to compile which allows building to continue after a failed proof)</p>",
        "id": 424372118,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709362873
    },
    {
        "content": "<blockquote>\n<p>I'm just going the revert the uses of omega in NormNum/Basic, in the hope that they are the only \"weird\" ones.</p>\n</blockquote>\n<p>Looks like <code>Mathlib/AlgebraicTopology/DoldKan/Faces.lean:210</code> is at least one other instance that no longer works.</p>",
        "id": 424395571,
        "sender_full_name": "David Renshaw",
        "timestamp": 1709371767
    },
    {
        "content": "<p>I suppose I should push fixes to the <code>nightly-testing</code> branch?</p>",
        "id": 424395581,
        "sender_full_name": "David Renshaw",
        "timestamp": 1709371791
    },
    {
        "content": "<p>I got it working locally, with the following changes:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/Mathlib/Algebra/Homology/HomotopyCategory/DegreewiseSplit.lean b/Mathlib/Algebra/Homology/HomotopyCategory/DegreewiseSplit.lean</span>\n<span class=\"gh\">index c5056f751e..73cdfbcd25 100644</span>\n<span class=\"gd\">--- a/Mathlib/Algebra/Homology/HomotopyCategory/DegreewiseSplit.lean</span>\n<span class=\"gi\">+++ b/Mathlib/Algebra/Homology/HomotopyCategory/DegreewiseSplit.lean</span>\n<span class=\"gu\">@@ -115,7 +115,7 @@ noncomputable def mappingConeHomOfDegreewiseSplitIso :</span>\n<span class=\"w\"> </span>    dsimp at r_f s_g\n<span class=\"w\"> </span>    set_option tactic.skipAssignedInstances false in\n<span class=\"w\"> </span>    simp [mappingConeHomOfDegreewiseSplitXIso, mappingCone.ext_from_iff _ _ _ rfl,\n<span class=\"gd\">-      mappingCone.inl_v_d_assoc _ (p + 1) _ (p + 1 + 1) (by omega) (by omega),</span>\n<span class=\"gi\">+      mappingCone.inl_v_d_assoc _ (p + 1) _ (p + 1 + 1) (by linarith) (by omega),</span>\n<span class=\"w\"> </span>      cocycleOfDegreewiseSplit, r_f]\n<span class=\"w\"> </span>    rw [← S.g.comm_assoc, reassoc_of% s_g]\n<span class=\"w\"> </span>    abel)\n<span class=\"gh\">diff --git a/Mathlib/AlgebraicTopology/DoldKan/Faces.lean b/Mathlib/AlgebraicTopology/DoldKan/Faces.lean</span>\n<span class=\"gh\">index b98ec9e8b6..cf8483e0f1 100644</span>\n<span class=\"gd\">--- a/Mathlib/AlgebraicTopology/DoldKan/Faces.lean</span>\n<span class=\"gi\">+++ b/Mathlib/AlgebraicTopology/DoldKan/Faces.lean</span>\n<span class=\"gu\">@@ -193,6 +193,7 @@ theorem induction {Y : C} {n q : ℕ} {φ : Y ⟶ X _[n + 1]} (v : HigherFacesVa</span>\n<span class=\"w\"> </span>    rfl\n<span class=\"w\"> </span>  -- now, we assume j ≠ a (i.e. a &lt; j)\n<span class=\"w\"> </span>  have haj : a &lt; j := (Ne.le_iff_lt hj₂).mp (by omega)\n<span class=\"gi\">+  have hj₃ := j.is_lt</span>\n<span class=\"w\"> </span>  have ham : a ≤ m := by\n<span class=\"w\"> </span>    by_contra h\n<span class=\"w\"> </span>    rw [not_le, ← Nat.succ_le_iff] at h\n<span class=\"gu\">@@ -207,14 +208,14 @@ theorem induction {Y : C} {n q : ℕ} {φ : Y ⟶ X _[n + 1]} (v : HigherFacesVa</span>\n<span class=\"w\"> </span>    swap\n<span class=\"w\"> </span>    · rw [Fin.le_iff_val_le_val]\n<span class=\"w\"> </span>      dsimp\n<span class=\"gd\">-      omega</span>\n<span class=\"gi\">+      linarith</span>\n<span class=\"w\"> </span>    simp only [← assoc, v j (by omega), zero_comp]\n<span class=\"w\"> </span>  · -- in the last case, a=m, q=1 and j=a+1\n<span class=\"w\"> </span>    rw [X.δ_comp_δ_self'_assoc]\n<span class=\"w\"> </span>    swap\n<span class=\"w\"> </span>    · ext\n<span class=\"w\"> </span>      dsimp\n<span class=\"gd\">-      omega</span>\n<span class=\"gi\">+      linarith</span>\n<span class=\"w\"> </span>    simp only [← assoc, v j (by omega), zero_comp]\n<span class=\"w\"> </span>#align algebraic_topology.dold_kan.higher_faces_vanish.induction AlgebraicTopology.DoldKan.HigherFacesVanish.induction\n\n<span class=\"gh\">diff --git a/Mathlib/AlgebraicTopology/DoldKan/NCompGamma.lean b/Mathlib/AlgebraicTopology/DoldKan/NCompGamma.lean</span>\n<span class=\"gh\">index beb5d09cfb..42183d673f 100644</span>\n<span class=\"gd\">--- a/Mathlib/AlgebraicTopology/DoldKan/NCompGamma.lean</span>\n<span class=\"gi\">+++ b/Mathlib/AlgebraicTopology/DoldKan/NCompGamma.lean</span>\n<span class=\"gu\">@@ -75,7 +75,7 @@ theorem PInfty_comp_map_mono_eq_zero (X : SimplicialObject C) {n : ℕ} {Δ' : S</span>\n<span class=\"w\"> </span>    · simp only [op_comp, X.map_comp, assoc, PInfty_f]\n<span class=\"w\"> </span>      erw [(HigherFacesVanish.of_P _ _).comp_δ_eq_zero_assoc _ hj₁, zero_comp]\n<span class=\"w\"> </span>      by_contra\n<span class=\"gd\">-      exact hj₁ (by simp only [Fin.ext_iff, Fin.val_zero]; omega)</span>\n<span class=\"gi\">+      exact hj₁ (by simp only [Fin.ext_iff, Fin.val_zero]; linarith)</span>\n<span class=\"w\"> </span>set_option linter.uppercaseLean3 false in\n<span class=\"w\"> </span>#align algebraic_topology.dold_kan.P_infty_comp_map_mono_eq_zero AlgebraicTopology.DoldKan.PInfty_comp_map_mono_eq_zero\n\n<span class=\"gh\">diff --git a/Mathlib/Analysis/InnerProductSpace/TwoDim.lean b/Mathlib/Analysis/InnerProductSpace/TwoDim.lean</span>\n<span class=\"gh\">index 06a5858509..20a33366fa 100644</span>\n<span class=\"gd\">--- a/Mathlib/Analysis/InnerProductSpace/TwoDim.lean</span>\n<span class=\"gi\">+++ b/Mathlib/Analysis/InnerProductSpace/TwoDim.lean</span>\n<span class=\"gu\">@@ -227,7 +227,7 @@ def rightAngleRotationAux₂ : E →ₗᵢ[ℝ] E :=</span>\n<span class=\"w\"> </span>          have : Finset.card {x} = 1 := Finset.card_singleton x\n<span class=\"w\"> </span>          have : finrank ℝ K + finrank ℝ Kᗮ = finrank ℝ E := K.finrank_add_finrank_orthogonal\n<span class=\"w\"> </span>          have : finrank ℝ E = 2 := Fact.out\n<span class=\"gd\">-          omega</span>\n<span class=\"gi\">+          linarith</span>\n<span class=\"w\"> </span>        obtain ⟨w, hw₀⟩ : ∃ w : Kᗮ, w ≠ 0 := exists_ne 0\n<span class=\"w\"> </span>        have hw' : ⟪x, (w : E)⟫ = 0 := Submodule.mem_orthogonal_singleton_iff_inner_right.mp w.2\n<span class=\"w\"> </span>        have hw : (w : E) ≠ 0 := fun h =&gt; hw₀ (Submodule.coe_eq_zero.mp h)\n<span class=\"gh\">diff --git a/Mathlib/NumberTheory/Modular.lean b/Mathlib/NumberTheory/Modular.lean</span>\n<span class=\"gh\">index 9c59ed152a..97db8be398 100644</span>\n<span class=\"gd\">--- a/Mathlib/NumberTheory/Modular.lean</span>\n<span class=\"gi\">+++ b/Mathlib/NumberTheory/Modular.lean</span>\n<span class=\"gu\">@@ -346,7 +346,7 @@ variable {z}</span>\n<span class=\"w\"> </span>theorem exists_eq_T_zpow_of_c_eq_zero (hc : (↑ₘg) 1 0 = 0) :\n<span class=\"w\"> </span>    ∃ n : ℤ, ∀ z : ℍ, g • z = T ^ n • z := by\n<span class=\"w\"> </span>  have had := g.det_coe\n<span class=\"gd\">-  replace had : (↑ₘg) 0 0 * (↑ₘg) 1 1 = 1 := by rw [det_fin_two, hc] at had; omega</span>\n<span class=\"gi\">+  replace had : (↑ₘg) 0 0 * (↑ₘg) 1 1 = 1 := by rw [det_fin_two, hc] at had; linarith</span>\n<span class=\"w\"> </span>  rcases Int.eq_one_or_neg_one_of_mul_eq_one' had with (⟨ha, hd⟩ | ⟨ha, hd⟩)\n<span class=\"w\"> </span>  · use (↑ₘg) 0 1\n<span class=\"w\"> </span>    suffices g = T ^ (↑ₘg) 0 1 by intro z; conv_lhs =&gt; rw [this]\n<span class=\"gu\">@@ -361,7 +361,7 @@ theorem exists_eq_T_zpow_of_c_eq_zero (hc : (↑ₘg) 1 0 = 0) :</span>\n<span class=\"w\"> </span>-- If `c = 1`, then `g` factorises into a product terms involving only `T` and `S`.\n<span class=\"w\"> </span>theorem g_eq_of_c_eq_one (hc : (↑ₘg) 1 0 = 1) : g = T ^ (↑ₘg) 0 0 * S * T ^ (↑ₘg) 1 1 := by\n<span class=\"w\"> </span>  have hg := g.det_coe.symm\n<span class=\"gd\">-  replace hg : (↑ₘg) 0 1 = (↑ₘg) 0 0 * (↑ₘg) 1 1 - 1 := by rw [det_fin_two, hc] at hg; omega</span>\n<span class=\"gi\">+  replace hg : (↑ₘg) 0 1 = (↑ₘg) 0 0 * (↑ₘg) 1 1 - 1 := by rw [det_fin_two, hc] at hg; linarith</span>\n<span class=\"w\"> </span>  refine' Subtype.ext _\n<span class=\"w\"> </span>  conv_lhs =&gt; rw [Matrix.eta_fin_two (↑ₘg)]\n<span class=\"w\"> </span>  rw [hc, hg]\n<span class=\"gh\">diff --git a/Mathlib/SetTheory/Surreal/Dyadic.lean b/Mathlib/SetTheory/Surreal/Dyadic.lean</span>\n<span class=\"gh\">index b4a3cd5e30..d12740d9b8 100644</span>\n<span class=\"gd\">--- a/Mathlib/SetTheory/Surreal/Dyadic.lean</span>\n<span class=\"gi\">+++ b/Mathlib/SetTheory/Surreal/Dyadic.lean</span>\n<span class=\"gu\">@@ -239,7 +239,7 @@ def dyadicMap : Localization.Away (2 : ℤ) →+ Surreal where</span>\n<span class=\"w\"> </span>        apply dyadic_aux\n<span class=\"w\"> </span>        rwa [ha₁, ha₂, mul_comm, mul_comm m₂]\n<span class=\"w\"> </span>      · have : (1 : ℤ) ≤ 2 ^ y₃ := mod_cast Nat.one_le_pow y₃ 2 Nat.succ_pos'\n<span class=\"gd\">-        omega</span>\n<span class=\"gi\">+        linarith</span>\n<span class=\"w\"> </span>  map_zero' := Localization.liftOn_zero _ _\n<span class=\"w\"> </span>  map_add' x y :=\n<span class=\"w\"> </span>    Localization.induction_on₂ x y &lt;| by\n</code></pre></div>",
        "id": 424400220,
        "sender_full_name": "David Renshaw",
        "timestamp": 1709375648
    },
    {
        "content": "<p>I pushed these to <code>nightly-testing</code>. In the meantime, a new nightly got released and new (probably unrelated) breakage appeared elsewhere.</p>",
        "id": 424400255,
        "sender_full_name": "David Renshaw",
        "timestamp": 1709375700
    }
]