[
    {
        "content": "<p>In the proof below, the occurrence of <code>simp</code> just before the <code>sorry</code> loops forever. I would like to debug what's going on: how can I proceed? For instance I thought of using <code>set_option trace.Meta.Tactic.simp true</code>, but it prints information only <em>after</em> <code>simp</code>succeeds...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Lean</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Std</span>\n\n<span class=\"n\">abbrev</span><span class=\"w\"> </span><span class=\"n\">Vector</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">//</span><span class=\"w\"> </span><span class=\"n\">l.length</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">Vector.map</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">β</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Vector</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Vector</span><span class=\"w\"> </span><span class=\"n\">β</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"o\">⟨</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">prop</span><span class=\"w\"> </span><span class=\"o\">⟩</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">v</span>\n<span class=\"w\">  </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">⟨</span><span class=\"w\"> </span><span class=\"o\">[],</span><span class=\"w\"> </span><span class=\"kd\">by</span><span class=\"w\"> </span><span class=\"n\">simp_all</span><span class=\"w\"> </span><span class=\"o\">⟩</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">tl</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">tl</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Vector</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">⟨</span><span class=\"w\"> </span><span class=\"n\">tl</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"kd\">by</span><span class=\"w\"> </span><span class=\"n\">simp_all</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">omega</span><span class=\"w\"> </span><span class=\"o\">⟩</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">tl'</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">tl</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">v'</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">tl'</span>\n<span class=\"w\">    </span><span class=\"o\">⟨</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">tl'</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"kd\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[]</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"gr\">sorry</span><span class=\"w\"> </span><span class=\"o\">⟩</span><span class=\"w\"> </span><span class=\"c1\">-- simp loops</span>\n</code></pre></div>",
        "id": 445886063,
        "sender_full_name": "Son Ho",
        "timestamp": 1718898820
    },
    {
        "content": "<p>What toolchain are you on (<code>cat lean-toolchain</code>)?</p>",
        "id": 445886815,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1718899053
    },
    {
        "content": "<p>It looks like you're on an old version of Lean. On a recent version of Lean, I just get an error <code>simp made no progress</code></p>",
        "id": 445887527,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1718899227
    },
    {
        "content": "<p>Yes, I'm indeed on an old version of Lean (<code>leanprover/lean4:v4.6.1</code>) and I don't experience this issue in a more recent version. But the question still holds I think: what can I do to debug a looping <code>simp</code>? (maybe the answer depends on the toolchain, in which case it's fine)</p>",
        "id": 445887952,
        "sender_full_name": "Son Ho",
        "timestamp": 1718899339
    },
    {
        "content": "<p>Does <code>set_option trace.Debug.Meta.Tactic.simp true</code> give any output?</p>",
        "id": 445888382,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1718899459
    },
    {
        "content": "<p>Only on the calls to <code>simp</code> which terminate</p>",
        "id": 445888434,
        "sender_full_name": "Son Ho",
        "timestamp": 1718899485
    },
    {
        "content": "<p>(note that I wrote a different option than you did)</p>",
        "id": 445888466,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1718899498
    },
    {
        "content": "<p>Oh indeed, let me check</p>",
        "id": 445888531,
        "sender_full_name": "Son Ho",
        "timestamp": 1718899518
    },
    {
        "content": "<p>No it doesn't...</p>",
        "id": 445888779,
        "sender_full_name": "Son Ho",
        "timestamp": 1718899600
    },
    {
        "content": "<p>Debugging loops is always hell for this reason. The loops should be caught by the recursion depth limit, but the necessary checks must be inserted manually, so they're sometimes missing. I've resorted to <code>gdb</code> in the past, with moderate success. Raw <code>dbg_trace</code> and <code>IO.print</code> also work for printf debugging.</p>",
        "id": 445889141,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1718899714
    },
    {
        "content": "<p>I don't think there is a good solution for this yet. Some type of <code>interruptAndReport</code> flag would be nice.</p>",
        "id": 445889149,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1718899718
    },
    {
        "content": "<p><code>set_option diagnostics true</code>?</p>",
        "id": 445969302,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718924850
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Kim Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/.60simp.60.20loops/near/445969302\">said</a>:</p>\n<blockquote>\n<p><code>set_option diagnostics true</code>?</p>\n</blockquote>\n<p>It doesn't display anything unfortunately... :/</p>",
        "id": 446262873,
        "sender_full_name": "Son Ho",
        "timestamp": 1719054911
    },
    {
        "content": "<p>Are you using an old version of Lean (yes, because you are importing Std rather than Batteries!) In the sandbox:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Lean</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Batteries</span>\n\n<span class=\"kn\">abbrev</span><span class=\"w\"> </span><span class=\"n\">Vector</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">//</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">}</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">Vector</span><span class=\"bp\">.</span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">β</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Vector</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Vector</span><span class=\"w\"> </span><span class=\"n\">β</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">prop</span><span class=\"w\"> </span><span class=\"bp\">⟩</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">v</span>\n<span class=\"w\">  </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"w\"> </span><span class=\"o\">[],</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_all</span><span class=\"w\"> </span><span class=\"bp\">⟩</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">tl</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">tl</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Vector</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"w\"> </span><span class=\"n\">tl</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_all</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">omega</span><span class=\"w\"> </span><span class=\"bp\">⟩</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">tl'</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">tl</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">v'</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">tl'</span>\n<span class=\"w\">    </span><span class=\"bp\">⟨</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">tl'</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[]</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"gr\">sorry</span><span class=\"w\"> </span><span class=\"bp\">⟩</span><span class=\"w\"> </span><span class=\"c1\">-- simp made no progress</span>\n</code></pre></div>",
        "id": 446367897,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719117707
    },
    {
        "content": "<p>Yes, I mentioned in a comment above that I'm using 4.6.1 on this example. My question was more about \"what can I do to debug what is going on in this kind of situation\" rather than \"how can I solve this issue\" (because recent versions of Lean indeed don't have it). My understanding now is that there isn't much I can do, unfortunately.</p>",
        "id": 446556204,
        "sender_full_name": "Son Ho",
        "timestamp": 1719219883
    },
    {
        "content": "<p>Hope that in later versions <code>set_option diagnostics true</code> is more helpful. :-) (And indeed, it is much improved since v4.6.1.)</p>",
        "id": 446562221,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1719221370
    },
    {
        "content": "<p>Oh ok, thanks for the information :)</p>",
        "id": 446562325,
        "sender_full_name": "Son Ho",
        "timestamp": 1719221398
    },
    {
        "content": "<p>If there is no maxHeartbeats value that makes it terminate early (but still inside <code>simp</code>) that could be considered a bug in <code>simp</code></p>",
        "id": 446562486,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1719221423
    },
    {
        "content": "<p>Ok, if I encounter a similar issue in a recent version of Lean, I'll open a bug issue for it, then.</p>",
        "id": 446562866,
        "sender_full_name": "Son Ho",
        "timestamp": 1719221503
    }
]