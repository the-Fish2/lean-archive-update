[
    {
        "content": "<p>I'm looking to prune my theorem tree. There's only a few \"target\" theorems that my project is aiming for - is there a way to see which theorems are never used in proving my targets?</p>",
        "id": 429751947,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1711493417
    },
    {
        "content": "<p>I seem to remember something about trimming imports to make MWEs - perhaps the same kind infrastructure could be used for this?</p>",
        "id": 429752119,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1711493525
    },
    {
        "content": "<p>Depending on what you want to prune exactly, the command <code>#tips</code> defined below will scan the declarations above it and report that ones that are not used by declarations in the current file.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Elab.Print</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Lean.Expr.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"sd\">/-- extracts the names of the declarations in `env` on which `decl` depends. -/</span>\n<span class=\"c1\">-- source:</span>\n<span class=\"c1\">-- https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/Counting.20prerequisites.20of.20a.20theorem/near/425370265</span>\n<span class=\"kd\">def</span> <span class=\"n\">getVisited</span> <span class=\"o\">(</span><span class=\"n\">env</span> <span class=\"o\">:</span> <span class=\"n\">Environment</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">decl</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">visited</span><span class=\"o\">,</span> <span class=\"bp\">..</span> <span class=\"o\">})</span> <span class=\"o\">:=</span> <span class=\"n\">Elab.Command.CollectAxioms.collect</span> <span class=\"n\">decl</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">run</span> <span class=\"n\">env</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">run</span> <span class=\"o\">{}</span>\n  <span class=\"n\">visited</span>\n\n<span class=\"sd\">/-- `#tips` prints a list of the declarations of the current file that are</span>\n<span class=\"sd\">defined but not used in the current file. -/</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"#tips \"</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">getEnv</span>\n  <span class=\"k\">let</span> <span class=\"n\">md</span> <span class=\"bp\">←</span> <span class=\"n\">mkModuleData</span> <span class=\"n\">env</span>\n  <span class=\"k\">let</span> <span class=\"n\">decls</span> <span class=\"bp\">←</span> <span class=\"n\">md.constNames.filterM</span> <span class=\"k\">fun</span> <span class=\"n\">d</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"bp\">!</span><span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">d.isBlackListed</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">unseen</span> <span class=\"o\">:=</span> <span class=\"n\">decls</span>\n  <span class=\"n\">for</span> <span class=\"n\">t</span> <span class=\"k\">in</span> <span class=\"n\">decls</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">seen</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n    <span class=\"k\">let</span> <span class=\"n\">tvisited</span> <span class=\"o\">:=</span> <span class=\"n\">getVisited</span> <span class=\"n\">env</span> <span class=\"n\">t</span>\n    <span class=\"n\">for</span> <span class=\"n\">u</span> <span class=\"k\">in</span> <span class=\"n\">decls</span> <span class=\"k\">do</span>\n      <span class=\"n\">unless</span> <span class=\"n\">u</span> <span class=\"bp\">==</span> <span class=\"n\">t</span> <span class=\"k\">do</span>\n        <span class=\"n\">seen</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"n\">tvisited.contains</span> <span class=\"n\">u</span>\n        <span class=\"k\">if</span> <span class=\"n\">seen</span><span class=\"bp\">?</span> <span class=\"k\">then</span> <span class=\"n\">unseen</span> <span class=\"o\">:=</span> <span class=\"n\">unseen.erase</span> <span class=\"n\">u</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"unseen: {unseen}\"</span>\n</code></pre></div>",
        "id": 429843986,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1711541131
    },
    {
        "content": "<p>I limited the scope to a single file, since it is expensive to run this command.</p>",
        "id": 429844137,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1711541173
    },
    {
        "content": "<p>Thank you! I want to use it in a multi-file setting, but I can just modify this code to my precise use case.</p>",
        "id": 429859965,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1711546393
    }
]