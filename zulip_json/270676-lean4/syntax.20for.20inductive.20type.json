[
    {
        "content": "<p>Is it somehow possible for an inductive type <code>Foo</code> to easily derive a simple printing and a partial parsing function to and from <code>Syntax</code> that roundtrips when starting with an instance of <code>Foo</code>?</p>",
        "id": 422242018,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1708352156
    },
    {
        "content": "<p>Mathlib has <code>deriving ToExpr</code>; does that help?</p>",
        "id": 422264376,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708358707
    },
    {
        "content": "<p>For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">two</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Lean.ToExpr</span><span class=\"o\">,</span> <span class=\"n\">Repr</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">PrettyPrinter</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span> <span class=\"n\">Meta</span>\n<span class=\"k\">#eval</span> <span class=\"k\">do</span>\n  <span class=\"n\">delab</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Lean.toExpr</span> <span class=\"o\">(</span><span class=\"n\">Foo.two</span> <span class=\"n\">Foo.one</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Qq</span>\n<span class=\"k\">#eval</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">evalExpr</span> <span class=\"n\">Foo</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Foo.two</span> <span class=\"n\">Foo.one</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Foo</span><span class=\"o\">))</span>\n  <span class=\"n\">Lean.logInfo</span> <span class=\"n\">f</span><span class=\"bp\">!</span><span class=\"s2\">\"{repr x}\"</span>\n</code></pre></div>",
        "id": 422266569,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708359107
    },
    {
        "content": "<p>Oh, thanks I think <code>evalExpr</code> was the piece I was missing actually!</p>",
        "id": 422287763,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1708367013
    },
    {
        "content": "<p>I thought there might be some functions to do it without going via <code>Expr</code></p>",
        "id": 422287783,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1708367031
    }
]