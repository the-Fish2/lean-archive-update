[
    {
        "content": "<p>Hey! I am defining my own rewrite tactic <code>srw</code>, the simplified version of which would be just a regular <code>rw</code> where lemmas are listed not in square brackets, but just one by one. <br>\nThe idea how I am going to implement that is:<br>\nhaving:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">srw</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">at</span> <span class=\"n\">l</span>\n</code></pre></div>\n<p>I want it to be equivalent to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">l</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">l</span>\n</code></pre></div>\n<p>In other words, my elaboration function for <code>srw</code> (show below) takes a sequence of lemmas <code>rs</code>, and a location <code>l</code>, and </p>\n<ol>\n<li>first pairs each lemma with a location <code>l</code>, yielding a syntax of category <code>srwRuleLoc</code></li>\n<li>then for each  <code>srwRuleLoc</code> it elaborates it by calling an original <code>rw</code> (implemented in <code>elab_rules</code>)</li>\n</ol>\n<p>The implementation is shown below:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">declare_syntax_cat</span> <span class=\"n\">srwRule</span>\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">srwRules</span>\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">srwRuleLoc</span>\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">srwRulesLoc</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">:=</span> <span class=\"n\">srwRule</span><span class=\"o\">)</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"o\">:</span> <span class=\"n\">srwRule</span>\n<span class=\"n\">syntax</span> <span class=\"n\">srwRule</span>  <span class=\"o\">(</span><span class=\"n\">location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">srwRuleLoc</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">ppSpace</span> <span class=\"n\">colGt</span> <span class=\"o\">(</span><span class=\"n\">srwRule</span><span class=\"o\">))</span><span class=\"bp\">*</span> <span class=\"o\">:</span> <span class=\"n\">srwRules</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">:=</span> <span class=\"n\">srwRulesLoc</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ppSpace</span> <span class=\"n\">colGt</span> <span class=\"o\">(</span><span class=\"n\">srwRuleLoc</span><span class=\"o\">))</span><span class=\"bp\">*</span> <span class=\"o\">:</span> <span class=\"n\">srwRulesLoc</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">srw</span><span class=\"o\">)</span> <span class=\"s2\">\"srw\"</span> <span class=\"n\">srwRules</span> <span class=\"o\">(</span><span class=\"n\">location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"c1\">-- rewriting a term with location</span>\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">srwRuleLoc</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">$</span><span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">location</span> <span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">try</span> <span class=\"k\">do</span>\n        <span class=\"n\">evalTactic</span> <span class=\"bp\">$</span> <span class=\"bp\">&lt;-</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"o\">)</span>\n      <span class=\"n\">catch</span> <span class=\"bp\">|</span> <span class=\"n\">ex</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwErrorAt</span> <span class=\"n\">t</span> <span class=\"n\">ex.toMessageData</span>\n\n<span class=\"c1\">-- having an object of category `srwRule and a location, return `srwRuleLoc</span>\n<span class=\"kd\">def</span> <span class=\"n\">insertLocation</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">Lean.Parser.Tactic.location</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">srwRule</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MacroM</span> <span class=\"n\">Syntax</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"n\">x.raw.isOfKind</span> <span class=\"bp\">`</span><span class=\"n\">srwRule</span> <span class=\"k\">then</span>\n        <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;-</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">srwRuleLoc</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"o\">(⟨</span><span class=\"n\">x.raw.setKind</span> <span class=\"bp\">`</span><span class=\"n\">srwRule</span><span class=\"o\">⟩):</span><span class=\"n\">srwRule</span> <span class=\"bp\">$</span><span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">location</span> <span class=\"bp\">?</span><span class=\"o\">)</span>\n        <span class=\"n\">return</span> <span class=\"n\">y.raw</span>\n  <span class=\"k\">else</span> <span class=\"n\">return</span> <span class=\"n\">x.raw</span>\n\n<span class=\"c1\">-- elaborate each rewrite term one by one</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"srw\"</span> <span class=\"n\">rs</span><span class=\"o\">:</span><span class=\"n\">srwRules</span> <span class=\"n\">l</span><span class=\"o\">:(</span><span class=\"n\">location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">match</span> <span class=\"n\">rs</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">srwRules</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">rs</span><span class=\"o\">]</span> <span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">rs</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">rs.mapM</span> <span class=\"o\">(</span><span class=\"n\">liftMacroM</span> <span class=\"bp\">$</span> <span class=\"n\">insertLocation</span> <span class=\"n\">l</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n   <span class=\"n\">for</span> <span class=\"n\">r</span> <span class=\"k\">in</span> <span class=\"n\">rs</span> <span class=\"k\">do</span> <span class=\"n\">evalTactic</span> <span class=\"n\">rs</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"\"</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">True</span> <span class=\"bp\">/\\</span> <span class=\"n\">False</span><span class=\"o\">)</span> <span class=\"bp\">/\\</span> <span class=\"o\">(</span><span class=\"n\">True</span> <span class=\"bp\">/\\</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">srw</span> <span class=\"n\">true_and</span> <span class=\"n\">true_and</span> <span class=\"c1\">-- the goal doesn't update withinh each rewrite separately</span>\n</code></pre></div>\n<p>The problem with this code is that goal doesn't update within each rewrite rule. I guess this is because <code>evalTactic</code> will <code>srwRuleLoc</code> syntax with the context info, but not <code>srwRule</code>.  </p>\n<p>What would be the better way to fix it without changing <code>elab_rules</code>? <br>\nThere is a reason why I want to treat each rule as a separate rewrite (In future, I want to specify a location for each rewrite separately). And the there is a reason why I don't want to add <code>withTacticInfoContext t do</code> to <code>elab_rules</code> (I want it to be extensible, such that if someone else wants to extend it they would not have to think about annotations)</p>",
        "id": 423325711,
        "sender_full_name": "Vladimir Gladstein",
        "timestamp": 1708925190
    }
]