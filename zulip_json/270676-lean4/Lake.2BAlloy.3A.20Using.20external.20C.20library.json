[
    {
        "content": "<p>I am trying to create lean bindings for wgpu as a little weekend project (ignore that it's Wednesday please :P ).</p>\n<p>I want to make lake download the wgpu binary release from github (or build it from source? But that requires a rust compiler). But to which directory should it be downloaded? Probably somewhere hidden inside <code>.lake</code>, but I have no idea how to specify that path and what the most idiomatic way is. The binary release of wgpu has both a static lib, dynamic lib, and C header files. I have tried downloading wgpu manually and adding alloy <code>#include &lt;?P/wgpu.h&gt;</code> directives myself, but  I wasn't able to figure out the path <code>?P</code> by trial and error.</p>\n<p>I want to then be able to call wgpu functions from alloy functions. Since <code>precompileModules</code> will be on, I assume that'll require wgpu to be (dynamically) linked into every Lean module's dynlib.</p>",
        "id": 442743388,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1717581772
    },
    {
        "content": "<p>Is there documentation for lake beyond just the readme and the examples? The only relevant example is the FFI one, but it tells you how to link a library you build yourself, not an existing library. I peeked into the lake source code but it‚Äôs a lot more than I bargained for‚Ä¶</p>",
        "id": 443073733,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1717684005
    },
    {
        "content": "<p>Or other projects which link in external libraries.</p>",
        "id": 443074262,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1717684149
    },
    {
        "content": "<p>Maybe need need to ping <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span>  here. :-)</p>",
        "id": 443188484,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1717722604
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"416280\">@Max Nowak üêâ</span>Unfortuatenly, I do not know of any good examples of using Lake to link to external library. However, I can give some tips. </p>\n<p>For downloading, I would suggest putting the wgpu files in a fixed top-level directory. While hiding it within <code>.lake</code> is possible, there is not currently good information sharing between Lake and Lean so getting the paths to its location within Lean for alloy would be difficult.</p>\n<p>Since you mentioned the library comes with a static version, I think the simplest way to link to it is via an <code>extern_lib</code> lake target. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">extern_lib</span><span class=\"w\"> </span><span class=\"n\">wgpu</span><span class=\"w\"> </span><span class=\"n\">pkg</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">   </span><span class=\"n\">inputFile</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"n\">pkg.dir</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"s2\">\"wgpu\"</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"s2\">\"lib\"</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"n\">nameToStaticLib</span><span class=\"w\"> </span><span class=\"s2\">\"wgpu\"</span>\n</code></pre></div>\n<p>To use the header files interatcively with Alloy, you can add them to the server's include path like so: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">run_cmd</span><span class=\"w\"> </span><span class=\"n\">Lean.Elab.Command.liftCoreM</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span>\n<span class=\"w\">  </span><span class=\"n\">Alloy.C.modifyLocalServerConfig</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">¬∑.</span><span class=\"n\">addIncludePath</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"s2\">\"wgpu\"</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"s2\">\"include\"</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Similarly, you can add to Lake's include path when compiling the module like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lean_lib</span><span class=\"w\"> </span><span class=\"n\">WGpu</span><span class=\"w\"> </span><span class=\"n\">where</span>\n<span class=\"w\">  </span><span class=\"n\">weakLeancArgs</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">{</span><span class=\"s2\">\"-I\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">__dir__</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"s2\">\"wgpu\"</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"s2\">\"include\"</span><span class=\"w\"> </span><span class=\"bp\">|&gt;.</span><span class=\"n\">toString</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Beware, though, I have not tested this approach myself so there could be also kinds of bugs I did not forsee. However, I would be happy to lend a hand fixing as many of them as possible time allowing.</p>",
        "id": 443190988,
        "sender_full_name": "Mac Malone",
        "timestamp": 1717724548
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"416280\">@Max Nowak üêâ</span>  <a href=\"https://github.com/lean-dojo/LeanCopilot/blob/main/lakefile.lean\">The lakefile.lean of LeanCopilot</a> has been the source of inspiration of doing FFI in Lean for me. It needed to download and build C/C++ libraries (OpenBLAS and CTranslate2) from source, then link against them via FFI. If you go back in time (e.g. in <a href=\"https://github.com/lean-dojo/LeanCopilot/blob/6dbb2a3387c357984a0a4c88475d64db9bb31baf/lakefile.lean\">this commit</a>, after this commit onnx is removed), you'll also see how it links with a header+binary library <code>onnxruntime</code>.</p>\n<p>Another inspiration would be <a href=\"https://github.com/lecopivo/SciLean/blob/master/lakefile.lean\">the lakefile.lean of SciLean</a>, it handles a header-only but C++-metaprogramming-heavy library Eigen. The pro is that it sort of established how to interface with C++ classes, particularly <a href=\"https://github.com/lecopivo/EigenLean/blob/master/cpp/CppClass.h\">here</a>. The same author also has reverse FFI work <a href=\"https://github.com/lecopivo/HouLean\">HouLean</a>.</p>\n<p>Personally I had worked out <a href=\"https://github.com/utensil/ginac-lean/blob/main/lakefile.lean\">https://github.com/utensil/ginac-lean/blob/main/lakefile.lean</a> that was inspired by them but it's a bit dated as I haven't worked on FFI in the last few months. Another dated little survy on this subject is here: <a href=\"https://github.com/utensil/ginac-lean/blob/main/doc/ffi.md\">https://github.com/utensil/ginac-lean/blob/main/doc/ffi.md</a> . But I don't think the situation of FFI has changed significantly in the last few months, except for maybe earlier discussions <a href=\"#narrow/stream/270676-lean4/topic/reverse.20FFI.3A.20building.20a.20.22fat.22.20static.20library.3F\">1</a>, <a href=\"#narrow/stream/287929-mathlib4/topic/error.20building.20windows.20exe.20.20proj\">2</a>.</p>",
        "id": 443194856,
        "sender_full_name": "Utensil Song",
        "timestamp": 1717727439
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"296911\">@Utensil Song</span> Your examples look great! They are also a good resource for me on what I should be stirivng to make easier in regards to FFI in Lake in the future. :)</p>",
        "id": 443206912,
        "sender_full_name": "Mac Malone",
        "timestamp": 1717733986
    },
    {
        "content": "<p>I have the following code so far: <a href=\"https://github.com/Kiiyya/lean-wgpu/tree/f77e4815cb38381924c193dadea010b3d7f0710b\">https://github.com/Kiiyya/lean-wgpu/tree/f77e4815cb38381924c193dadea010b3d7f0710b</a> but have the <code>lakefile.lean</code> file for convenience here anyway:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Lake</span>\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Lake</span><span class=\"w\"> </span><span class=\"n\">DSL</span>\n\n<span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">Wgpu</span>\n\n<span class=\"n\">require</span><span class=\"w\"> </span><span class=\"n\">alloy</span><span class=\"w\"> </span><span class=\"k\">from</span><span class=\"w\"> </span><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"s2\">\"https://github.com/tydeu/lean4-alloy/\"</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"w\"> </span><span class=\"s2\">\"master\"</span>\n\n<span class=\"c1\">-- Need to download this yourself: https://github.com/gfx-rs/wgpu-native/releases</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">wgpu_native_dir</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"s2\">\"wgpu-macos-aarch64-debug\"</span><span class=\"w\"> </span><span class=\"c1\">-- adjust this to your machine</span>\n\n<span class=\"n\">extern_lib</span><span class=\"w\"> </span><span class=\"n\">wgpu_native</span><span class=\"w\"> </span><span class=\"n\">pkg</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">   </span><span class=\"n\">inputFile</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"n\">pkg</span><span class=\"bp\">.</span><span class=\"n\">dir</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"n\">wgpu_native_dir</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"n\">nameToStaticLib</span><span class=\"w\"> </span><span class=\"s2\">\"wgpu_native\"</span>\n<span class=\"w\">  </span><span class=\"c1\">--  inputFile &lt;| pkg.dir / wgpu_native_dir / nameToSharedLib \"wgpu_native\"</span>\n\n<span class=\"n\">module_data</span><span class=\"w\"> </span><span class=\"n\">alloy</span><span class=\"bp\">.</span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">o</span><span class=\"bp\">.</span><span class=\"kn\">export</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">BuildJob</span><span class=\"w\"> </span><span class=\"n\">FilePath</span>\n<span class=\"n\">module_data</span><span class=\"w\"> </span><span class=\"n\">alloy</span><span class=\"bp\">.</span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">o</span><span class=\"bp\">.</span><span class=\"n\">noexport</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">BuildJob</span><span class=\"w\"> </span><span class=\"n\">FilePath</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">default_target</span><span class=\"kd\">]</span>\n<span class=\"n\">lean_lib</span><span class=\"w\"> </span><span class=\"n\">Wgpu</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">weakLeancArgs</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[</span>\n<span class=\"w\">    </span><span class=\"s2\">\"-I\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">__</span><span class=\"n\">dir__</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"n\">wgpu_native_dir</span><span class=\"w\"> </span><span class=\"bp\">|&gt;.</span><span class=\"n\">toString</span>\n<span class=\"w\">  </span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"n\">precompileModules</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">true</span>\n<span class=\"w\">  </span><span class=\"n\">nativeFacets</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">shouldExport</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">shouldExport</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Module</span><span class=\"bp\">.</span><span class=\"n\">oExportFacet</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"ss\">`alloy.c.o.export</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Module</span><span class=\"bp\">.</span><span class=\"n\">oNoExportFacet</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"ss\">`alloy.c.o.noexport</span><span class=\"o\">]</span>\n\n<span class=\"n\">lean_exe</span><span class=\"w\"> </span><span class=\"n\">helloworld</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">root</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"ss\">`Main</span>\n</code></pre></div>\n<p>The following fails:<br>\nThe output of <code>lake build helloworld --verbose</code> is <a href=\"https://gist.github.com/Kiiyya/8b1932202ef4f93c42478cf8e73b8457#file-gistfile1-txt-L226-L238\">here</a>. Oddly enough, in the LSP with <code>#eval main</code>, creating a WGPU instance seems to work just fine, it is only <code>lake build helloworld</code> that fails.</p>\n<p>If the dynamic lib is necessary anyway, maybe deleting the static lib and doing it all with dynamic libraries would be better?</p>\n<p>I see that even if the <code>extern_lib</code> declaration points to the static library file, lake generates commands with <code>--load-dynlib=.../libwgpu_native.dylib</code> in them. Lake was never told the name of the library, so how can it know that? (this is the output of <code>lake build --verbose</code>).</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">‚Ñπ</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">36</span><span class=\"bp\">/</span><span class=\"mi\">37</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Built</span><span class=\"w\"> </span><span class=\"n\">Wgpu</span>\n<span class=\"n\">trace</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">.&gt;</span><span class=\"w\"> </span><span class=\"n\">LEAN_PATH</span><span class=\"bp\">=././.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">alloy</span><span class=\"bp\">/.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">././.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"w\"> </span><span class=\"n\">DYLD_LIBRARY_PATH</span><span class=\"bp\">=././.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">././</span><span class=\"n\">wgpu</span><span class=\"bp\">-</span><span class=\"n\">macos</span><span class=\"bp\">-</span><span class=\"n\">aarch64</span><span class=\"bp\">-</span><span class=\"n\">debug</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">kiiya</span><span class=\"bp\">/</span><span class=\"n\">hax</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"w\"> </span><span class=\"bp\">././././</span><span class=\"n\">Wgpu</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"bp\">./././.</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"bp\">././.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">Wgpu</span><span class=\"bp\">.</span><span class=\"n\">olean</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"bp\">././.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">Wgpu</span><span class=\"bp\">.</span><span class=\"n\">ilean</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"bp\">././.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">ir</span><span class=\"bp\">/</span><span class=\"n\">Wgpu</span><span class=\"bp\">.</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"c1\">--load-dynlib=././wgpu-macos-aarch64-debug/libwgpu_native.dylib --json</span>\n<span class=\"n\">Build</span><span class=\"w\"> </span><span class=\"n\">completed</span><span class=\"w\"> </span><span class=\"n\">successfully</span><span class=\"bp\">.</span>\n</code></pre></div>",
        "id": 443302964,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1717768357
    },
    {
        "content": "<p>I will take a deeper look into the examples that Utensil Song provided, but I posted here anyway because maybe I stumbled on an easy pitfall.</p>",
        "id": 443303876,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1717768648
    },
    {
        "content": "<p>To avoid causing confusion for you, I'm bumping my lakefile.lean to the latest stable toolchain. Locally passed, waiting for CI.</p>\n<p>(UPDATE: CI is green now, for both Ubuntu and Mac.)</p>",
        "id": 443306670,
        "sender_full_name": "Utensil Song",
        "timestamp": 1717769491
    },
    {
        "content": "<p>I was missing the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">lean_exe</span><span class=\"w\"> </span><span class=\"n\">helloworld</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">moreLinkArgs</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[</span>\n<span class=\"w\">    </span><span class=\"s2\">\"-framework\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"s2\">\"Metal\"</span><span class=\"o\">,</span>\n<span class=\"w\">    </span><span class=\"s2\">\"-framework\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"s2\">\"QuartzCore\"</span><span class=\"o\">,</span>\n<span class=\"w\">    </span><span class=\"s2\">\"-framework\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"s2\">\"CoreFoundation\"</span>\n<span class=\"w\">  </span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"n\">root</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"ss\">`Main</span>\n</code></pre></div>\n<p>Finally got it to build! Awesome.</p>",
        "id": 443320370,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1717774113
    },
    {
        "content": "<p>Is it possible to only use the dynlib (or alternatively, only use the static lib)?</p>",
        "id": 443320457,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1717774150
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416280\">Max Nowak üêâ</span> <a href=\"#narrow/stream/270676-lean4/topic/Lake.2BAlloy.3A.20Using.20external.20C.20library/near/443320457\">said</a>:</p>\n<blockquote>\n<p>Is it possible to only use the dynlib (or alternatively, only use the static lib)?</p>\n</blockquote>\n<p>No, the static library is needed to statically link executables which depend on the library and the dynamic library is needed to load the library at compile time in Lean.</p>\n<p>Support for libraries which just support dynamic linking is a future Lake todo.</p>",
        "id": 443612396,
        "sender_full_name": "Mac Malone",
        "timestamp": 1717950138
    },
    {
        "content": "<p>As for the lakefile, I should note that you could download the relevant wgpu library as part of the extern_lib job and stick it in some ignored directory of the package (i.e., <code>pkg.dir / wgpu_native_dir</code>).</p>",
        "id": 443612542,
        "sender_full_name": "Mac Malone",
        "timestamp": 1717950289
    },
    {
        "content": "<p>Only slightly relevant, but I don't want to open a dozen threads: Can I have some common C functions that I include in many alloy files? For example <code>Foo.lean</code> which contains a alloy section with C functions (i.e. not shims), which I then call from shims inside <code>A.lean</code> and <code>B.lean</code> ?</p>",
        "id": 443720297,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1718010749
    },
    {
        "content": "<p>Since alloy produces no C header files for <code>Foo</code>, doing <code>import Foo</code> inside A or B leads to the C compiler not finding the decls.</p>",
        "id": 443720527,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1718010826
    },
    {
        "content": "<p>And if I add the <code>.lake/build/ir</code> directory to the include path and do <code>#include &lt;Foo.alloy.c&gt;</code>, the C linker complains about duplicate symbols because now stuff is in there twice.</p>",
        "id": 443720725,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1718010885
    },
    {
        "content": "<p>Maybe you could just write these functions in plain .h/.c pairs, and let alloy include the headers just like a third party library? C in alloy only meant to be some glue code, or at most, just a .c generator, so you'll still need .h .</p>\n<p>But if you wish alloy to generate .h alongside the .c, I guess that's also feasible.</p>",
        "id": 443722140,
        "sender_full_name": "Utensil Song",
        "timestamp": 1718011349
    },
    {
        "content": "<p>It looks like I asked too soon, and using <code>of_lean&lt;T&gt;(..)</code> where <code>T</code> is defined in a different lean module breaks as well, because the c compiler can't find the conversion function. So I'll have to do all of the glue code in one file it seems.</p>",
        "id": 443725922,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1718012395
    },
    {
        "content": "<p>So splitting the glue code up into <code>A.lean</code>, <code>B.lean</code>, ... won't help anyway.</p>",
        "id": 443726085,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1718012429
    },
    {
        "content": "<p>If I have a very simple library (<a href=\"https://eliemichel.github.io/LearnWebGPU/getting-started/opening-a-window.html#glfw3-webgpu-extension\">the zip here</a>) which is just one <code>.h</code> and one <code>.c</code> file, how do I tell lake to compile it and link it with my other target(s)?</p>",
        "id": 443825387,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1718041152
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416280\">Max Nowak üêâ</span> <a href=\"#narrow/stream/270676-lean4/topic/Lake.2BAlloy.3A.20Using.20external.20C.20library/near/443825387\">said</a>:</p>\n<blockquote>\n<p>If I have a very simple library (<a href=\"https://eliemichel.github.io/LearnWebGPU/getting-started/opening-a-window.html#glfw3-webgpu-extension\">the zip here</a>) which is just one <code>.h</code> and one <code>.c</code> file, how do I tell lake to compile it and link it with my other target(s)?</p>\n</blockquote>\n<p>You can do that by adapting <code>target libginac_ffi</code> and <code>def buildCpp</code> in my <a href=\"https://github.com/utensil/ginac-lean/blob/main/lakefile.lean\">lakefile</a>.</p>",
        "id": 443827007,
        "sender_full_name": "Utensil Song",
        "timestamp": 1718041450
    },
    {
        "content": "<p>I have to admit I am not having a good time with Lake. I looked at your repo, and it has a long lakefile with a lot more complexity than I had anticipated. At that point I decided to just <code>#include &lt;foo.c&gt;</code> directly instead. A new problem sprung up now, since I am on macOS and the library is actually in objective-C, I need to pass <code>-x objective-c</code> to the c compiler <em>before</em> the C file I am compiling. And <code>moreLeancArgs</code> get appended at the end.</p>",
        "id": 443840357,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1718045136
    },
    {
        "content": "<p>For anyone curious, <a href=\"https://github.com/Kiiyya/lean-wgpu/blob/201f9ee5c1bd8305857a4d0aa9635c3a88d91d34/lakefile.lean\">this</a> is my current (broken) lakefile.</p>",
        "id": 443840931,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1718045333
    },
    {
        "content": "<p>II fully agree that FFI i s not well supported by Lake at the moment. and doing almost anything FFI-related iis quite painful. This is a well-known issue, but I have unfortunately not had the opportunity to spend time improving it. Other things have sadly taken higher priority.</p>",
        "id": 443868216,
        "sender_full_name": "Mac Malone",
        "timestamp": 1718055290
    },
    {
        "content": "<p>Actually the situation is better than Mac said, it seems that I can do everything I want with the current lake FFI support, just being a little complicated which could be more convenient with future native lake support.</p>",
        "id": 443889987,
        "sender_full_name": "Utensil Song",
        "timestamp": 1718066392
    },
    {
        "content": "<p>I've spent last 3 days struggling with Windows FFI of my project and finally punched through. My solution is alloy-free (at the cost of complicated lakefile for now) but it should be easily adapted to alloy ones. I'll also gradually try to tidy things up in the lakefile.</p>\n<p>I'm also on Mac so I'll investigate wgpu issues in the coming days. I'm somehow optimistic that there is a way to pass -x.</p>",
        "id": 443890896,
        "sender_full_name": "Utensil Song",
        "timestamp": 1718066793
    },
    {
        "content": "<p>My optimistism particularly comes from my previous experiment to make alloy emit IR in cpp and compile it.</p>",
        "id": 443891169,
        "sender_full_name": "Utensil Song",
        "timestamp": 1718066928
    },
    {
        "content": "<p>Particularly it's this lakefile <a href=\"https://github.com/utensil/lean4-alloy/blob/f09452d198a4870df147b0fbc40169358e5ab18c/lakefile.lean\">https://github.com/utensil/lean4-alloy/blob/f09452d198a4870df147b0fbc40169358e5ab18c/lakefile.lean</a> if you are interested to investigate yourself.</p>",
        "id": 443891907,
        "sender_full_name": "Utensil Song",
        "timestamp": 1718067270
    },
    {
        "content": "<p>I've modified alloy itself and made use of module_facet.</p>",
        "id": 443892012,
        "sender_full_name": "Utensil Song",
        "timestamp": 1718067329
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/270676-lean4/topic/Lake.2BAlloy.3A.20Using.20external.20C.20library/near/443889987\">said</a>:</p>\n<blockquote>\n<p>Actually the situation is better than Mac said, it seems that I can do everything I want with the current lake FFI support, just being a little complicated which could be more convenient with future native lake support.</p>\n</blockquote>\n<p>Thanks for the vote of confidence! <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> However, I do think \"just being a little complicated which could be more convenient with future native lake support\" is the key to the pain in question. <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 443933693,
        "sender_full_name": "Mac Malone",
        "timestamp": 1718090951
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416280\">Max Nowak üêâ</span> <a href=\"#narrow/stream/270676-lean4/topic/Lake.2BAlloy.3A.20Using.20external.20C.20library/near/443720527\">said</a>:</p>\n<blockquote>\n<p>Since alloy produces no C header files for <code>Foo</code>, doing <code>import Foo</code> inside A or B leads to the C compiler not finding the decls.</p>\n</blockquote>\n<p>FYI, this would be a good thing to report as an issue on the alloy repo.</p>",
        "id": 444061861,
        "sender_full_name": "Mac Malone",
        "timestamp": 1718127330
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"416280\">@Max Nowak üêâ</span> I followed the instructions of your repo then run <code>lake build</code>, I got this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">wgpu</span><span class=\"w\"> </span><span class=\"bp\">%</span><span class=\"w\"> </span><span class=\"n\">lake</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">build</span>\n<span class=\"bp\">‚úñ</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">104</span><span class=\"bp\">/</span><span class=\"mi\">127</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Building</span><span class=\"w\"> </span><span class=\"n\">Wgpu</span><span class=\"bp\">.</span><span class=\"n\">Async</span>\n<span class=\"n\">trace</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">.&gt;</span><span class=\"w\"> </span><span class=\"n\">LEAN_PATH</span><span class=\"bp\">=././.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">alloy</span><span class=\"bp\">/.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">././.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"w\"> </span><span class=\"n\">DYLD_LIBRARY_PATH</span><span class=\"bp\">=././.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">././</span><span class=\"n\">libs</span><span class=\"bp\">/</span><span class=\"n\">wgpu</span><span class=\"bp\">-</span><span class=\"n\">macos</span><span class=\"bp\">-</span><span class=\"n\">aarch64</span><span class=\"bp\">-</span><span class=\"n\">debug</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">utensil</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---v4.8.0/bin/lean ././././Wgpu/Async.lean -R ./././. -o ././.lake/build/lib/Wgpu/Async.olean -i ././.lake/build/lib/Wgpu/Async.ilean -c ././.lake/build/ir/Wgpu/Async.c --load-dynlib=././libs/wgpu-macos-aarch64-debug/libwgpu_native.dylib --json</span>\n<span class=\"n\">info</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">stderr</span><span class=\"o\">:</span>\n<span class=\"n\">libc</span><span class=\"bp\">++</span><span class=\"n\">abi</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">terminating</span><span class=\"w\"> </span><span class=\"n\">due</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">uncaught</span><span class=\"w\"> </span><span class=\"n\">exception</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">type</span><span class=\"w\"> </span><span class=\"n\">lean</span><span class=\"bp\">::</span><span class=\"n\">exception</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"n\">loading</span><span class=\"w\"> </span><span class=\"n\">library</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">dlopen</span><span class=\"o\">(</span><span class=\"bp\">././</span><span class=\"n\">libs</span><span class=\"bp\">/</span><span class=\"n\">wgpu</span><span class=\"bp\">-</span><span class=\"n\">macos</span><span class=\"bp\">-</span><span class=\"n\">aarch64</span><span class=\"bp\">-</span><span class=\"n\">debug</span><span class=\"bp\">/</span><span class=\"n\">libwgpu_native</span><span class=\"bp\">.</span><span class=\"n\">dylib</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x0009</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"n\">symbol</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">flat</span><span class=\"w\"> </span><span class=\"kn\">namespace</span><span class=\"w\"> </span><span class=\"bp\">'_</span><span class=\"n\">kCAGravityTopLeft'</span>\n<span class=\"n\">error</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"w\"> </span><span class=\"n\">exited</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"mi\">134</span>\n<span class=\"n\">Some</span><span class=\"w\"> </span><span class=\"n\">builds</span><span class=\"w\"> </span><span class=\"n\">logged</span><span class=\"w\"> </span><span class=\"n\">failures</span><span class=\"o\">:</span>\n<span class=\"bp\">-</span><span class=\"w\"> </span><span class=\"n\">Wgpu</span><span class=\"bp\">.</span><span class=\"n\">Async</span>\n<span class=\"n\">error</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">build</span><span class=\"w\"> </span><span class=\"n\">failed</span>\n</code></pre></div>\n<p>Is this expected?</p>",
        "id": 444246737,
        "sender_full_name": "Utensil Song",
        "timestamp": 1718201496
    },
    {
        "content": "<p>Simple googling indicates that this is caused by mixing objects that compiled with¬†<em><code>libc++</code></em>¬†and object that compiled with¬†<em><code>libstdc++</code></em> which is a recurring theme that most third-party libraries are not compiled with libc++ but Lean seems to need it.</p>\n<p>But can you run <code>lake build</code> successfully locally? I'm on Mac M1.</p>",
        "id": 444247587,
        "sender_full_name": "Utensil Song",
        "timestamp": 1718201702
    },
    {
        "content": "<p>The latest <code>main</code> branch should build just fine, I'm on an M1 mac as well. I remember <code>_kCAGravityTopLeft</code> not being found, and that it was fixed by specifying the right framework. Those frameworks are in the lakefile, so I'm not sure why it fails...</p>",
        "id": 444247958,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1718201774
    },
    {
        "content": "<p>The framework needed is <code>QuartzCore</code>.</p>",
        "id": 444248123,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1718201814
    },
    {
        "content": "<p>But I am confused why it can't find that while running <code>lean</code>. I thought it was about <code>leanc</code> (i.e. just clang).</p>",
        "id": 444248609,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1718201947
    },
    {
        "content": "<p>I see, then it might be just that my XCode didn't install the frameworks properly, will try to install them.</p>",
        "id": 444248635,
        "sender_full_name": "Utensil Song",
        "timestamp": 1718201954
    },
    {
        "content": "<p>XCode sometimes is weird though yeah, but specifying <code>-framework QuartzCore</code> should be sufficient. I think it would throw an error if it can't find the framework. And... the lakefile should specify those already when linking. Hence I'm confused.</p>",
        "id": 444248940,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1718202032
    },
    {
        "content": "<p>Then the more likely cause is that my <code>QuartzCore</code> is not up-to-date, so somehow it survived linking for other symbols, but failed at runtime.</p>",
        "id": 444249176,
        "sender_full_name": "Utensil Song",
        "timestamp": 1718202102
    },
    {
        "content": "<p>Let me know if you manage to fix it!</p>",
        "id": 444254420,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1718203623
    },
    {
        "content": "<p>I've updated XCode, accepted license, accepted the extension, and restarted Mac per instruction. Unfortunately, Lean is still trying to <code>--load-dynlib=././libs/wgpu-macos-aarch64-debug/libwgpu_native.dylib</code> when compiling Async.lean which has nothing to do with WGPU, then fails at the symbol issue. Will need to investigate later.</p>",
        "id": 444257688,
        "sender_full_name": "Utensil Song",
        "timestamp": 1718204485
    },
    {
        "content": "<p>You are on 4.8.0 right?</p>",
        "id": 444257833,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1718204520
    },
    {
        "content": "<p>I have my <code>libs/wgpu1/libwgpu_native.dylib</code> and <code>libs/wgpu1/libwgpu_native.a</code> files, which I have downloaded from github releases. In this case, lake does not overwrite anything, and merely adds a <code>libs/wgpu1/libwgpu_native.dylib.hash</code> file. It links against it.</p>\n<p>...if I instead compile wgpu myself and create the same files except in the <code>libs/wgpu2</code> directory, lake... <strong>overwrites</strong> (!) <code>libs/wgpu2/libwgpu_native.dylib</code>, which then leads to build errors. I do not know why lake doesn't overwrite it for <code>wgpu1</code>, but does for <code>wgpu2</code>.</p>",
        "id": 446268780,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1719059799
    },
    {
        "content": "<p>...yes me and a friend have been trying to get a single triangle to show for over two weeks now and still can't quite figure it out.</p>",
        "id": 446268948,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1719059986
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"416280\">@Max Nowak üêâ</span> Oops, this is side-effect of using <code>inputFile</code> for the <code>extern_lib</code> rather than building/downloading a static library to the package's build directory. Lake currently creates a shared library from the <code>extern_lib</code> static library automatically and links that. The name it uses is simply the static libraries name with a shared library extension instead of a static one.  This happens to clash with the name of the shared library in the folder, hence the overwrite.</p>\n<p>I think you got luckily with the <code>libs/wgpu1</code> case in that Lake believed the shared library you had already provided to be up-to-date output of this process. This is probably because the modification time of the shared library is greater than that of the static library, whereas this was not true for the self-compiled one.</p>",
        "id": 446372970,
        "sender_full_name": "Mac Malone",
        "timestamp": 1719121250
    },
    {
        "content": "<p>Ah, damn. Well, I've removed the <code>extern_lib</code> and went back to directly linking against the dylib via <code>-lwgpu_native</code>, that works now.</p>",
        "id": 446397822,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1719136160
    }
]