[
    {
        "content": "<p>How does Lean handle terms of type 1 in the context of a proof that type 1 = type 2? Here is an MWE providing a specific instance of my question (a bit contrived):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">MWE</span> <span class=\"o\">:</span> <span class=\"n\">Bool.true</span> <span class=\"bp\">=</span> <span class=\"n\">Bool.false</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"k\">let</span> <span class=\"n\">dummy</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Bool.true</span>\n  <span class=\"c1\">-- this is a dummy type equality, but one can expect genuine ones</span>\n  <span class=\"k\">let</span> <span class=\"n\">test_equality</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">=</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n  <span class=\"k\">let</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">dummy</span> <span class=\"n\">Nat.zero</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">‚Üê</span> <span class=\"n\">test_equality</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">dummy</span>\n  <span class=\"c1\">-- why does the infoviewer shadow dummy?</span>\n  <span class=\"c1\">-- why is c : Nat not displayed?</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>This seems to be a fundamental misunderstanding on my end, so a clarification would really help! Thanks!</p>",
        "id": 427827723,
        "sender_full_name": "Arnav Sabharwal",
        "timestamp": 1710890780
    },
    {
        "content": "<p>When you rewrite a hypothesis, the way it works is it creates a new local hypothosis and (tries to) delete the old one. Since <code>dummy</code> is used in <code>c</code>, it can't delete <code>dummy</code>, so you get two copies, the new one shadowing the old one.</p>",
        "id": 427852227,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710908832
    }
]