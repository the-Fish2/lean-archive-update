[
    {
        "content": "<p>I am trying to write a program that builds some syntax, formats it, and outputs the formatted Lean to a file. But it seems the environment I am constructing does not include the prelude. MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">syn</span> <span class=\"o\">:</span> <span class=\"n\">Except</span> <span class=\"n\">_</span> <span class=\"n\">Lean.Format</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.withImportModules</span>\n    <span class=\"o\">(</span><span class=\"n\">imports</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">Init</span><span class=\"o\">])</span>\n    <span class=\"o\">(</span><span class=\"n\">opts</span> <span class=\"o\">:=</span> <span class=\"n\">default</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">trustLevel</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n    <span class=\"bp\">&lt;|</span> <span class=\"k\">fun</span> <span class=\"n\">env</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">EIO.toIO'</span> <span class=\"bp\">&lt;|</span>\n    <span class=\"n\">Lean.Core.CoreM.run'</span>\n      <span class=\"o\">(</span><span class=\"n\">ctx</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n        <span class=\"n\">fileName</span> <span class=\"o\">:=</span> <span class=\"s2\">\"Example.lean\"</span>\n        <span class=\"n\">fileMap</span> <span class=\"o\">:=</span> <span class=\"n\">default</span>\n      <span class=\"o\">})</span>\n      <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n        <span class=\"n\">env</span>\n      <span class=\"o\">})</span>\n      <span class=\"o\">(</span><span class=\"k\">do</span>\n        <span class=\"k\">let</span> <span class=\"n\">opt</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.liftCommandElabM</span> <span class=\"o\">(</span><span class=\"k\">do</span>\n          <span class=\"k\">let</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.mkIdent</span> <span class=\"bp\">`</span><span class=\"n\">Nat</span>\n          <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">theorem</span> <span class=\"n\">hi</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">))</span>\n        <span class=\"n\">Lean.PrettyPrinter.formatCommand</span> <span class=\"n\">opt</span>\n      <span class=\"o\">)</span>\n  <span class=\"k\">match</span> <span class=\"n\">syn</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"n\">exc</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">IO.println</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">exc.toMessageData.toString</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">syn</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">IO.println</span> <span class=\"o\">(</span><span class=\"n\">syn.pretty</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Without the <code>Init</code> import, it complains about the <code>&lt;</code> syntax (which is declared in the prelude). With the <code>Init</code> import, it successfully <code>#eval</code>s, but fails when I execute it via <code>lake exe</code>, with error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">uncaught</span> <span class=\"n\">exception</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">package</span> <span class=\"bp\">'</span><span class=\"n\">Init'</span>\n</code></pre></div>\n<p>So I assume I need to configure the search path or something??</p>\n<p>( <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> this is what I was asking about earlier )</p>",
        "id": 436593198,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1714608381
    },
    {
        "content": "<p>yes you need to configure the search path</p>",
        "id": 436612819,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714622595
    }
]