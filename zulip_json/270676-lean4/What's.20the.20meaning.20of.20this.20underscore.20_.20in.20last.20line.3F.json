[
    {
        "content": "<p>example (h : s ⊆ t) : s ∩ u ⊆ t ∩ u := by<br>\n  simp only [subset_def, mem_inter_iff] at *<br>\n  -- h: ∀ x ∈ s, x ∈ t<br>\n  -- ∀ (x : α), x ∈ s ∧ x ∈ u → x ∈ t ∧ x ∈ u<br>\n  rintro x ⟨xs, xu⟩<br>\n  exact ⟨h _ xs, xu⟩</p>",
        "id": 417390469,
        "sender_full_name": "Hallon",
        "timestamp": 1705997250
    },
    {
        "content": "<p>Similar to this hypothesis h, I need <code>x \\in t</code> by <code>x \\in s</code>. Sometimes directly write <code>h xs</code>, sometimes need to underline <code>h _ xs</code>, how to distinguish between adding underline or not?</p>",
        "id": 417390898,
        "sender_full_name": "Hallon",
        "timestamp": 1705997430
    },
    {
        "content": "<p>Is anybody here? Help!!! <span aria-label=\"pleading face\" class=\"emoji emoji-1f97a\" role=\"img\" title=\"pleading face\">:pleading_face:</span></p>",
        "id": 417391803,
        "sender_full_name": "Hallon",
        "timestamp": 1705997809
    },
    {
        "content": "<p>This is the example which dont need underscore:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">u</span> <span class=\"bp\">⊆</span> <span class=\"n\">t</span> <span class=\"bp\">∩</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">⟨</span><span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">xu</span><span class=\"o\">⟩</span> <span class=\"bp\">↦</span> <span class=\"o\">⟨</span><span class=\"n\">h</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">xu</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 417391937,
        "sender_full_name": "Hallon",
        "timestamp": 1705997870
    },
    {
        "content": "<p>It means \"Hey, Lean, could you please fill this out for me by putting the only thing that makes sense here\". In this case, it is <code>x</code>, and Lean can guess it because it's mentioned in <code>xs</code>.</p>",
        "id": 417391970,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1705997882
    },
    {
        "content": "<p>Whether you need it or not depends on whether it is declared as an implicit or explicit argument in the theorem you're applying. If you go to the definition of subset, you will see that the point is implicit, as it is written in curly braces <code>{x : α}</code>.</p>",
        "id": 417392247,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1705997974
    },
    {
        "content": "<p>When you declare a theorem </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>arguments between parentheses (called explicit arguments) will need to be provided when applying the theorem, while you expect that arguments between curly braces (called implicit arguments) should be guessed by Lean.</p>",
        "id": 417392528,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1705998079
    },
    {
        "content": "<p>Uh-huh</p>",
        "id": 417392715,
        "sender_full_name": "Hallon",
        "timestamp": 1705998160
    }
]