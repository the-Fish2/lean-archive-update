[
    {
        "content": "<p>Here is an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">deprecated</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">Implies</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">MyNS.Implies</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"n\">x</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">MyNS</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">MyNS2</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Implies</span> <span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">False</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span>\n  <span class=\"n\">h</span> <span class=\"mi\">0</span> <span class=\"n\">trivial</span>\n</code></pre></div>\n<p>In this example, Lean says that <code>Implies</code> is deprecated but in fact this is the non-deprecated <code>MyNS.Implies</code>.</p>",
        "id": 412489048,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705043633
    },
    {
        "content": "<p>Slight minimization:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">deprecated</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">Implies</span> <span class=\"o\">(</span><span class=\"n\">_p</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">True</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">MyNS.Implies</span> <span class=\"o\">:=</span> <span class=\"n\">True</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">MyNS</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Implies</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 412491185,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1705044903
    },
    {
        "content": "<p>Note: if the definition is in <code>namespace MyNS</code>, then everything works fine. It fails only with <code>open MyNS</code>; probably, because it tried to unify <code>_root_.Implies</code> too (and failed) but this is just a guess.</p>",
        "id": 412494185,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705046468
    },
    {
        "content": "<p>this is a known issue, I recall there being a comment about it in the code</p>",
        "id": 412494245,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705046502
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/blob/ad068824d05878da799567f0ae56b4048eef9022/src/Lean/Elab/Term.lean#L1602\">https://github.com/leanprover/lean4/blob/ad068824d05878da799567f0ae56b4048eef9022/src/Lean/Elab/Term.lean#L1602</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">Linter.checkDeprecated</span> <span class=\"n\">declName</span> <span class=\"c1\">-- TODO: check is occurring too early if there are multiple alternatives. Fix if it is not ok in practice</span>\n</code></pre></div>",
        "id": 412494418,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705046578
    },
    {
        "content": "<p>in short, whenever lean has to use typing to differentiate between ambiguous name resolutions, it can potentially mark things as deprecated before it has committed to one of the possibilities, so you see phantom warnings from parses that didn't make the cut</p>",
        "id": 412494874,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705046788
    },
    {
        "content": "<p>Thank you.</p>",
        "id": 412494914,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705046811
    },
    {
        "content": "<p>I'll just use full name.</p>",
        "id": 412494944,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1705046824
    }
]