[
    {
        "content": "<p>I'm quite new to Lean and I'm trying to write a recursive function that returns an enumerated type. Something about the enumerated return type is causing a problem, e.g. it goes away if I change the return type to Bool. Is this the expected Lean behavior? If so, why?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">TerminationStatus</span>\n <span class=\"bp\">|</span> <span class=\"n\">NormalTermination</span>\n <span class=\"bp\">|</span> <span class=\"n\">FuelExhausted</span>\n\n<span class=\"c1\">-- Errors: failed to compile partial definition 'x', failed to show that type is inhabited and non empty</span>\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">fuel</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TerminationStatus</span> <span class=\"o\">:=</span>\n <span class=\"k\">match</span> <span class=\"n\">fuel</span> <span class=\"k\">with</span>\n <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">TerminationStatus.FuelExhausted</span>\n <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">fuel'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"n\">fuel'</span>\n\n<span class=\"c1\">-- Does not error</span>\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">fuel</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n <span class=\"k\">match</span> <span class=\"n\">fuel</span> <span class=\"k\">with</span>\n <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">fuel'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">y</span> <span class=\"n\">fuel'</span>\n</code></pre></div>",
        "id": 409396916,
        "sender_full_name": "Daniel Windham",
        "timestamp": 1703167874
    },
    {
        "content": "<p>So first things first you are using the partial modifier for no reason here, your functions will also work if you do not use it because they are structurally recursive.</p>\n<p>I assume that you have a more complicated example where this is not the case and dont wish to prove termination by well foundedness, in that case: The partial modifier allows you to introduce non terminating functions into lean, however since non termination does by default allow you to prove anything you have to demonstrate that your return type is not empty. If your return type was empty you could derive False and from that whatever you want. Thus Lean requires you to implement the <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Inhabited#doc\">docs#Inhabited</a> typeclass for your type.</p>\n<p>Luckily this can usually be derived automatically as is case here, you can do that by adding <code>deriving Inhabited</code> to the line after your inductive type declaration.</p>",
        "id": 409399463,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1703168650
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span>, that solves my problem. Helpful explanation too.</p>",
        "id": 409400218,
        "sender_full_name": "Daniel Windham",
        "timestamp": 1703168901
    }
]