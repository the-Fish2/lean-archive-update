[
    {
        "content": "<p>Looked at the Lean source code.  How is it that the information about installing Lean refers one to a website link.  Rather there should be all the necessary instructions in the release itself one can look up to.</p>",
        "id": 436230928,
        "sender_full_name": "Heime",
        "timestamp": 1714469471
    },
    {
        "content": "<p>Can Lean be made to build with gcc rather than clang ?</p>",
        "id": 436231679,
        "sender_full_name": "Heime",
        "timestamp": 1714469735
    },
    {
        "content": "<p>The docs are in the repo, in the <code>doc</code> folder. I'm guessing you're talking about <a href=\"https://github.com/leanprover/lean4/blob/master/doc/setup.md\">https://github.com/leanprover/lean4/blob/master/doc/setup.md</a>, which is the source for <a href=\"https://lean-lang.org/lean4/doc/setup.html\">https://lean-lang.org/lean4/doc/setup.html</a> ?</p>",
        "id": 436231863,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714469789
    },
    {
        "content": "<p>There's also doc/make for <a href=\"https://lean-lang.org/lean4/doc/make/index.html\">https://lean-lang.org/lean4/doc/make/index.html</a></p>\n<p>I'm pretty sure you select your choice of compiler by passing the appropriate option to cmake. I'm guessing <code>cmake -D CMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ ...</code> ? I just use the default myself.</p>",
        "id": 436232179,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714469896
    },
    {
        "content": "<p>Such instructions should be put in the top lean directory.  There is no information on which files to read from the docs.</p>",
        "id": 436232896,
        "sender_full_name": "Heime",
        "timestamp": 1714470154
    },
    {
        "content": "<p>I am in the lean4 directory tree.  How does one find the necessary information to build it.  The information seems to be all split up in various files.</p>",
        "id": 436233500,
        "sender_full_name": "Heime",
        "timestamp": 1714470357
    },
    {
        "content": "<p>Building Lean from source is usually only done for the development of Lean itself, at least at the moment</p>",
        "id": 436233594,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714470378
    },
    {
        "content": "<p>Terribly frustrating</p>",
        "id": 436233600,
        "sender_full_name": "Heime",
        "timestamp": 1714470380
    },
    {
        "content": "<p>Standard ability to build from source should have been done from project start !!!</p>",
        "id": 436233763,
        "sender_full_name": "Heime",
        "timestamp": 1714470436
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"714044\">@Heime</span> Please stop telling others what to do!</p>\n<p>Also, see <a href=\"#narrow/stream/270676-lean4/topic/Community.20Guidelines/near/235207529\">#butterfly</a></p>",
        "id": 436233874,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1714470482
    },
    {
        "content": "<p>I saw in another thread you want to use Lean to prove theorems. Are you interested in using mathlib? If so, keep in mind that very very few mathlib users compile Lean (or mathlib for that matter!) from source themselves.</p>",
        "id": 436234038,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714470530
    },
    {
        "content": "<p>This is an ongoing collaborative project.</p>\n<ol>\n<li>(Almost) nobody is paid to work on it.</li>\n<li>There are plenty of high priority issues that people are working on.  <del>Building from source</del> Putting the source build instructions in plain sight is not currently one of them.</li>\n</ol>",
        "id": 436234117,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1714470558
    },
    {
        "content": "<p>(But also, lots of us build from source every day, and the instructions are right there where Kyle has linked to them...)</p>",
        "id": 436234288,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714470614
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> They're linked to <a href=\"https://github.com/leanprover/lean4?tab=readme-ov-file#building-from-source\">right at the end of the readme</a>, but the problem Heime seems to have is that this is a link to a web page with the rendered markdown rather than the markdown source file itself.</p>",
        "id": 436234636,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714470737
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"714044\">@Heime</span> Just so you know, if you want to get started using Lean right away without trusting binaries, there's <a href=\"https://live.lean-lang.org/\">https://live.lean-lang.org/</a> . It's got all of mathlib available too.</p>",
        "id": 436235404,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714471008
    },
    {
        "content": "<p>For mathlib, a lot of the user experience is designed around getting a working VS Code, Lean VS Code extension, Lean binary, and mathlib cache ASAP. Mathematical users are almost never interested in building this from source, and the mathlib community here would rather that people not build from source because it's hard to help people debug their custom setups.</p>\n<p>(I don't know your opinion of VS Code. I held out using emacs for awhile, but eventually VS Code was just too convenient... I still use magit frequently to prepare PRs however.)</p>",
        "id": 436236391,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714471378
    },
    {
        "content": "<p>Johan, That's for me to decide.</p>",
        "id": 436236638,
        "sender_full_name": "Heime",
        "timestamp": 1714471474
    },
    {
        "content": "<p>Not putting the source build instructions in plain sight just proves how terrible the development has been progressing.</p>",
        "id": 436236978,
        "sender_full_name": "Heime",
        "timestamp": 1714471591
    },
    {
        "content": "<p>Since 2013, the Gnu Project runs the computational needs of the International Space Station.  WE know about building software more than anyone.</p>",
        "id": 436237487,
        "sender_full_name": "Heime",
        "timestamp": 1714471806
    },
    {
        "content": "<p>Good Day Kyle,  Correct the problem is that one only finds a link to an online repository instead.</p>",
        "id": 436237680,
        "sender_full_name": "Heime",
        "timestamp": 1714471887
    },
    {
        "content": "<p>Kim.  Assuming as you say that lots of you build from source every day, it should be easy to add that information.  There are people who always build from source as its developers do.  There should be clear instructions for that included.  And the process being made easy to accomplish.  If you cannot even build it, how can one expect the rest to be any good.</p>",
        "id": 436238228,
        "sender_full_name": "Heime",
        "timestamp": 1714472110
    },
    {
        "content": "<p>Heime, I suggest you take a step back and consider whether this community and its goals align with yours</p>",
        "id": 436238449,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1714472195
    },
    {
        "content": "<p>You keep saying that you can't build it, after having been pointed to the instructions. Are you stuck at some particular step? Please tell us where you are up to, and if you want concrete help.</p>",
        "id": 436238450,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714472195
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"714044\">Heime</span> <a href=\"#narrow/stream/270676-lean4/topic/Build.20instructions.20refer.20to.20website/near/436237487\">said</a>:</p>\n<blockquote>\n<p>WE know about building software more than anyone</p>\n</blockquote>\n<p>Who is included in \"we\"? As Kim says, it really helps us to help you if we know where you are stuck at when following these instructions : <a href=\"https://lean-lang.org/lean4/doc/make/index.html\">https://lean-lang.org/lean4/doc/make/index.html</a></p>",
        "id": 436239875,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1714472784
    },
    {
        "content": "<p>Heime, I don't know if you're understanding how your participation here comes across. If this is how you portray yourself in every open-source community, I kinda feel bad for you. You would be able to achieve much more with just the minimal level of friendliness, politeness and respect towards the work of others.</p>\n<p>We have repeatedly tried to help you achieve what you want, even with warnings for the extra work you're signing up for. And still, you keep on bashing this project.</p>\n<p>While we're interested in enabling you to do what you need, your standards for how software should be built and maintained are not absolute.</p>\n<p>This community has its guidelines (which have already been presented to you: <a href=\"#narrow/stream/270676-lean4/topic/Community.20Guidelines/near/235207529\">#butterfly</a> is a clickable link!). Lean 4 is currently maintained by the Lean FRO, which has its vision and goals. If those don't sparkle your interest, again, I am sorry</p>",
        "id": 436241286,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1714473429
    },
    {
        "content": "<p>Ruben.  It is not about alignment. It is mainly people getting upset because of some criticism.  Since when is building from source not important.  Tell that to the actual developers and they will tell you.</p>",
        "id": 436243007,
        "sender_full_name": "Heime",
        "timestamp": 1714474117
    },
    {
        "content": "<p>Arthur. this is not about what I can achieve but what the lean project can achieve if it rejects the nonsense and starts looking at things the way they are.</p>",
        "id": 436243282,
        "sender_full_name": "Heime",
        "timestamp": 1714474230
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"714044\">@Heime</span> Are you able to build Lean 4 from source? If not, please tell us where you are stuck.</p>",
        "id": 436243339,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1714474260
    },
    {
        "content": "<p>Heime, lean can be built from source, that is how it gets built after every PR merge. There are docs on how to build it and yes they are on a webpage. If you encounter errors there is this forum. There are exactly 0 things wrong with this.</p>",
        "id": 436243345,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1714474262
    },
    {
        "content": "<p>I'm not sure what your yardstick is for \"actual developers\", but by all reasonable definitions the some of the \"actual developers of lean\" are amongst the people you are talking to in this thread.</p>",
        "id": 436243424,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714474308
    },
    {
        "content": "<p>Also, if what you want are raw markdown files you can find them in the docs folder: <a href=\"https://github.com/leanprover/lean4/blob/master/doc%2Fsetup.md\">https://github.com/leanprover/lean4/blob/master/doc%2Fsetup.md</a></p>\n<p>They are not a major improvement over the webpage (quite the opposite)</p>",
        "id": 436243850,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1714474499
    },
    {
        "content": "<p>Then I shall discuss with the Lean  FRO then.  It is disconcerting to say the least when the group pressures other to say only good things.  I wonder what has been the experience of people wanting to build from source using the lean4 release .  Was the experience fantastic ???</p>",
        "id": 436243952,
        "sender_full_name": "Heime",
        "timestamp": 1714474537
    },
    {
        "content": "<p>You are talking with Lean FRO employees in this thread.</p>",
        "id": 436244140,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1714474608
    },
    {
        "content": "<p>You are talking to the FRO already as Eric says. Yes I was able to build from source if that's your question. Many times.</p>",
        "id": 436244152,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1714474615
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"714044\">@Heime</span> Are you able to build Lean 4 from source? If not, please tell us where you are stuck.</p>",
        "id": 436244189,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1714474631
    },
    {
        "content": "<p>Criticism is fine, and \"build directions should be more obvious\" is noted.</p>\n<p>Statements about \"how terrible the development has been progressing\" isn't criticism though, that's just an opinion, and (in my opinion) one that is not too useful to share. This Zulip community values a more collaborative spirit than that.</p>",
        "id": 436244956,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714474931
    },
    {
        "content": "<p>Eric, the yardstick is to find the information that guides one on how to complete a lean build.  Currently, the information does not naturally provide links that can be used effectively.</p>",
        "id": 436245684,
        "sender_full_name": "Heime",
        "timestamp": 1714475191
    },
    {
        "content": "<p>We're happy to help, but help us help you. What have you tried? Where are you in the process?</p>\n<p>This is what I do when I build Lean from scratch, these six commands: <a href=\"https://lean-lang.org/lean4/doc/make/index.html#generic-build-instructions\">https://lean-lang.org/lean4/doc/make/index.html#generic-build-instructions</a></p>",
        "id": 436245966,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714475286
    },
    {
        "content": "<p>There are also some details elsewhere for setting up <code>elan</code>, the toolchain manager, if you want to build mathlib too. But again, I strongly suggest that you don't go in this direction. You mentioned in another thread that you like moving fast, and this is one of the slowest ways to get started.</p>",
        "id": 436246311,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714475415
    },
    {
        "content": "<p>The statement mentioned was in response to the idea that instructions for users to build from source is not a priority.  It is not good doing so much work but then not have clear enough guide to build from source.  Any developer worth his salt knows that building from source is paramount.</p>",
        "id": 436246391,
        "sender_full_name": "Heime",
        "timestamp": 1714475452
    },
    {
        "content": "<p>I can work on it if the work ends up in the lean4 release.  Such a guide to build from source should be in the release.  I cannot see what is controversial about it.</p>",
        "id": 436247120,
        "sender_full_name": "Heime",
        "timestamp": 1714475696
    },
    {
        "content": "<p>But it is in the release</p>",
        "id": 436247312,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1714475755
    },
    {
        "content": "<p>There's only so much energy I'll put into trying to get you a working Lean setup: should I take it that you did figure it out and you have a working Lean setup? You haven't answered any of our questions about it yet.</p>",
        "id": 436247381,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714475768
    },
    {
        "content": "<p>If you clone the source, open docs/setup.md you have the setup instructions right there</p>",
        "id": 436247466,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1714475803
    },
    {
        "content": "<p>If you want to build there are instructions for that as well</p>",
        "id": 436248251,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1714476075
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/blob/master/doc%2Fmake%2Findex.md\">https://github.com/leanprover/lean4/blob/master/doc%2Fmake%2Findex.md</a></p>",
        "id": 436248261,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1714476079
    },
    {
        "content": "<p>Let me go through the process of building it.  Then I can send details of how to organise the documentation better for anyone to be able to do it without need of outside help..</p>",
        "id": 436250266,
        "sender_full_name": "Heime",
        "timestamp": 1714476782
    },
    {
        "content": "<p>Have not managed to get a working version yet.</p>",
        "id": 436253546,
        "sender_full_name": "Heime",
        "timestamp": 1714477865
    },
    {
        "content": "<p>hot take, but it might be desirable if non-computer-affine beginners don't see the manual building instructions in plain side but instead are guided towards the intended installation.</p>\n<p>And the experts (who even know that compilers exist) can probably also figure out which document a link points at if they try to work offline ;)</p>\n<p>But yes, documentation is always a work-in-progress thing and generally PRs improving documentation are quite well-received!</p>",
        "id": 436253629,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1714477898
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"385895\">Jon Eugster</span> <a href=\"#narrow/stream/270676-lean4/topic/Build.20instructions.20refer.20to.20website/near/436253629\">said</a>:</p>\n<blockquote>\n<p>But yes, documentation is always a work-in-progress thing and generally PRs improving documentation are quite well-received!</p>\n</blockquote>\n<p>How about this change?</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"w\"> </span>- [FAQ](https://lean-lang.org/lean4/doc/faq.html)\n\n<span class=\"gi\">+There are various Markdown documents in the `doc` subdirectory. If you prefer</span>\n<span class=\"gi\">+them to the formatted web pages, please see [`doc/SUMMARY.md`](doc/SUMMARY.md)</span>\n<span class=\"gi\">+first.</span>\n\n<span class=\"w\"> </span># Installation\n</code></pre></div>\n<p>See <a href=\"https://github.com/chabulhwi/lean4/commit/de0569ad2acfe9262a6c4b1e2426b5b19f48dbaa\">https://github.com/chabulhwi/lean4/commit/de0569ad2acfe9262a6c4b1e2426b5b19f48dbaa</a>. I haven't opened a pull request yet.</p>",
        "id": 436384166,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1714531701
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"714044\">Heime</span> <a href=\"#narrow/stream/270676-lean4/topic/Build.20instructions.20refer.20to.20website/near/436238228\">said</a>:</p>\n<blockquote>\n<p>Kim. Assuming as you say that lots of you build from source every day, it should be easy to add that information.</p>\n</blockquote>\n<p>Well, at least this is true. The information about building Lean is already in the <code>doc</code> subdirectory. We just need to let users know.</p>",
        "id": 436385532,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1714532965
    },
    {
        "content": "<p>Shall I open a PR?</p>",
        "id": 436386653,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1714534131
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"411020\">Bulhwi Cha</span> I personally think that you should not open a PR. For 99.99% of the world, the rendered md is preferable, and the existing link sufficient.<br>\nSo this extra sentence will just add clutter.<br>\nAgain, personal opinion. Ultimately up to the FRO.</p>",
        "id": 436433873,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1714536936
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/270676-lean4/topic/Build.20instructions.20refer.20to.20website/near/436433873\">said</a>:</p>\n<blockquote>\n<p>For 99.99% of the world,</p>\n</blockquote>\n<p>Um, there's no need to exaggerate. Otherwise, I get your point.</p>",
        "id": 436439119,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1714537099
    },
    {
        "content": "<p>From <a href=\"https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/README?h=v6.9-rc6\">https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/README?h=v6.9-rc6</a>:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>README</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<blockquote>\n<p>Linux kernel<br>\n============</p>\n<p>There are several guides for kernel developers and users. These guides can<br>\nbe rendered in a number of formats, like HTML and PDF. Please read<br>\nDocumentation/admin-guide/README.rst first.</p>\n<p>In order to build the documentation, use <code>make htmldocs</code> or<br>\n<code>make pdfdocs</code>.  The formatted documentation can also be read online at:</p>\n<div class=\"codehilite\"><pre><span></span><code>https://www.kernel.org/doc/html/latest/\n</code></pre></div>\n\n<p>There are various text files in the Documentation/ subdirectory,<br>\nseveral of them using the reStructuredText markup notation.</p>\n<p>Please read the Documentation/process/changes.rst file, as it contains the<br>\nrequirements for building and running the kernel, and information about<br>\nthe problems which may result by upgrading your kernel.</p>\n</blockquote>\n</div></div>\n<p>In my opinion, it's a good idea to add information about the files in the <code>doc</code> subdirectory. The Linux kernel project did inform kernel developers and users about it.</p>\n<p>You can navigate the documentation conveniently in VS Code if you open and preview the <code>doc/SUMMARY.md</code> file. I haven't noticed this until now.</p>\n<p><a href=\"/user_uploads/3121/ywTE1jb78iHIJQcu2yfqBc5p/20240501_14h48m20s_grim.png\">20240501_14h48m20s_grim.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/ywTE1jb78iHIJQcu2yfqBc5p/20240501_14h48m20s_grim.png\" title=\"20240501_14h48m20s_grim.png\"><img src=\"/user_uploads/3121/ywTE1jb78iHIJQcu2yfqBc5p/20240501_14h48m20s_grim.png\"></a></div>",
        "id": 436444493,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1714537277
    },
    {
        "content": "<p>I agree that this paragraph is not an improvement, sorry.</p>",
        "id": 436447011,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714537546
    },
    {
        "content": "<p>Fair enough. Although I'm having more disagreements with the Lean FRO and the Mathlib maintainers day by day, I agree that you have the final say.</p>",
        "id": 436447639,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1714538078
    },
    {
        "content": "<p>One should  really provide outputs in various formats far the taste of various users.</p>",
        "id": 436530095,
        "sender_full_name": "Heime",
        "timestamp": 1714580119
    },
    {
        "content": "<p>It's fairly trivial to convert markdown into whatever else one likes, or to ignore it and make believe it's a text file which is likely what someone who wants \"I have the source code now what\" is going to do. As a user and <em>not</em> an FRO member I have to respectfully say out of all the things underdocumented in Lean (and in general all the work to do) that to me this seems incredibly low on the list personally. I have been in this situation of \"how do I compile this again\" and I really can't say it took me longer than a few minutes to find the relevant file -- Lean is definitely (conservatively) in the upper quartile for me of software I've had to compile in terms of \"how easy is this to figure out\". You'll again note above though that others have mentioned that concrete suggested improvements are likely welcome, though you seem not to be taking the hint there.</p>",
        "id": 436539797,
        "sender_full_name": "Julian Berman",
        "timestamp": 1714583646
    },
    {
        "content": "<p>The standard procedure is to have the information explained in the readme.  But somehow people do not want to follow that.  Actually, I feel silly telling you all this.  I'm sure tho FRO would have investigated the matter.  I will do it only because if I do not do this, it will never get done.</p>",
        "id": 436546089,
        "sender_full_name": "Heime",
        "timestamp": 1714586066
    },
    {
        "content": "<p>There are many standard procedures in open source for this. You come from only one of them, though one indeed common where your intended audience is likely to compile your software by hand.</p>",
        "id": 436550966,
        "sender_full_name": "Julian Berman",
        "timestamp": 1714587900
    },
    {
        "content": "<p>That's right, for those who compile directly and only from source.</p>",
        "id": 436555696,
        "sender_full_name": "Heime",
        "timestamp": 1714589930
    },
    {
        "content": "<p>If your goal is to only use software that can be built entirely from source (defined as “preferred form of modification”) then I fear you'll have to stay away from lean, as it is a bootstrapping compiler, and you cannot build lean without a pre-built form of the lean compiler. The repository contains a pre-built copy of the lean compiler (compiled to C) to get started, but it won't ever satisfy a strict requirement “must be built directly and only from source”. Sorry for having to break that to you, if that means that lean cannot be of interest to you.</p>",
        "id": 436559286,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1714591586
    },
    {
        "content": "<p>If that is how the bright people in the FRO build the software, we at the GNU Project are not impressed.  Quite dishonest to then make the users believe the software abides by the Gnu General Public License.</p>",
        "id": 436561233,
        "sender_full_name": "Heime",
        "timestamp": 1714592442
    },
    {
        "content": "<p>I fully agree that it would be very dishonest to make anyone believe that the software abides by the GPL! <br>\nIt would be a bit less dishonest to make the software believe that the user abide by the GPL…<br>\n(I rarely saw software abiding or not abiding a license. Although, who knows, these days with LLMS…)<br>\nBut even that would be a bit off the truth, given that we expect our users to abide the Apache 2.0 licence.</p>",
        "id": 436561787,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1714592702
    },
    {
        "content": "<p>This discussion is fascinating: what does it mean to \"build from source\"?</p>",
        "id": 436562166,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1714592864
    },
    {
        "content": "<p><a href=\"https://bootstrappable.org/\">https://bootstrappable.org/</a> gives an answer which sets a high bar that we will have trouble to reach, unfortunately. My stage0-audit project (<a href=\"https://lean-stage0.nomeata.de/\">https://lean-stage0.nomeata.de/</a>) tries to help a bit in that direction, with little hope to closing the loop.</p>",
        "id": 436562316,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1714592930
    },
    {
        "content": "<p>Heime, with all due respect, I don't think impressing \"you at the GNU Project\" is a top priority item in the Lean FRO list. Maybe 3rd or 4th is you're lucky though</p>",
        "id": 436562781,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1714593158
    },
    {
        "content": "<p>Felicitations Damiano.  Building from source means building from Source Code - the preferred form for modifying it by ids developers; the compacted code is not source code.</p>",
        "id": 436566350,
        "sender_full_name": "Heime",
        "timestamp": 1714594746
    },
    {
        "content": "<p>How exactly do you assemble your source code into a binary though using only more source code? Sounds quite hard if you don't allow yourself to use \"compacted code\" of any kind.</p>",
        "id": 436567069,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714595072
    },
    {
        "content": "<p>The guix project can bootstrap from a very small (357 bytes) binary. It’s fascinating! (much more than this thread in a way)<br>\n<a href=\"https://guix.gnu.org/en/blog/2023/the-full-source-bootstrap-building-from-source-all-the-way-down/\">https://guix.gnu.org/en/blog/2023/the-full-source-bootstrap-building-from-source-all-the-way-down/</a> is a possible entrypoint if you want to learn more about this.</p>",
        "id": 436567286,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1714595176
    },
    {
        "content": "<p>So, without wanting to appear sarcastic, \"building from source code\" still means bootstrapping, but with a \"small\" initial compiler?</p>",
        "id": 436567926,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1714595501
    },
    {
        "content": "<p>Depends on who you ask, I think. The lean developers, or the bootstrappable builds project?<br>\nFor lean building from source uses a non-small pre-existing compiler that's (partially) compiled.<br>\nFor the bootstrappable builds project it starts with a very small initial assembler of sorts.</p>",
        "id": 436568681,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1714595849
    },
    {
        "content": "<p>Building from source means that you're God, The Source Itself, and can manifest a big bang to compile the entire existence everytime you need to run a program.</p>\n<p>I'm signing off. Good luck Heime <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 436568736,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1714595880
    },
    {
        "content": "<p>Thank you for the explanations!  To be honest, I am not actually sure that I know what \"compiled\" even means, so I have quite a bit of reading to do to fully appreciate this discussion, but it has been very interesting!  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 436568981,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1714595976
    },
    {
        "content": "<p>My 2c to Damiano: building from source usually means using machine code to generate more machine code from human readable code</p>",
        "id": 436569402,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1714596142
    },
    {
        "content": "<p>(Damiano if you want an overly-opinionated suggestion what you've asked is a software philosophy rabbithole, and I'd opine further one very much not worth your time to chase too far)</p>",
        "id": 436569786,
        "sender_full_name": "Julian Berman",
        "timestamp": 1714596258
    },
    {
        "content": "<p>The Gnu Project demonstrated its respected position in the world as the choice for the International Space Station.  As Joachim indicated, we function at a very high bar.  One can use compacted code provided you have control over the source code that produces it.  Fundamentally, the work should rest upon the Lean Developers.</p>",
        "id": 436570129,
        "sender_full_name": "Heime",
        "timestamp": 1714596395
    },
    {
        "content": "<p>Ah, sorry for probably assuming too much background knowledge. Maybe the answer you are looking for here is this:<br>\nTo get a a piece of software (like lean) you can either download a _binary_. This is a file that that you can run, but you cannot read it e.g. to see what it is doing, or change what it is doing.</p>\n<p>It is also not how software is created. Software is typically written in some programming language (here, confusingly, also Lean, but also a piece of C++), which is then translated into the binary, machine-intelligble from by a program called the compiler. </p>\n<p>So instead of downloading the binary you can download the source (if it is Open Source – hence the name), and compile it yourself. This way you can (at least in theory) read what the program is doing, maybe even change what it is doing.</p>\n<p>Developers build the program from source all the time, of course. And some users do, too, out of curiosity, or because they firmly believe in the benefits of Free Software.</p>",
        "id": 436570438,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1714596574
    },
    {
        "content": "<p>The ISS is indeed a very high bar!</p>",
        "id": 436570538,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1714596605
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/270676-lean4/topic/Build.20instructions.20refer.20to.20website/near/436568981\">said</a>:</p>\n<blockquote>\n<p>Thank you for the explanations!  To be honest, I am not actually sure that I know what \"compiled\" even means, so I have quite a bit of reading to do to fully appreciate this discussion, but it has been very interesting!  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n</blockquote>\n<p>Compilation in the most general sense means that you translate from a source into a (usually different) target language. We often say that Lean is compiled into C and from there further compiled into a binary. If you take a bigger picture you might just say that Lean is compiled into a binary. If you take a closer look you might say that Lean is compiled into some IR that is then compiled to C and so on. You could also say that the Lean elaborator is a compiler from the Lean source language to the <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Expr#doc\">docs#Lean.Expr</a> kernel language.</p>\n<p>So as you can see compilation is usually in the eye of the beholder and the context.</p>\n<p>The current way to compile Lean from source is as follows:</p>\n<ul>\n<li>The lean4 repo contains a <code>stage0</code> directory that is the C output of some previous binary Lean compiler on the Lean compiler itself (back when Lean didn't compile itself yet this contained whatever version of the Lean 3 C++ impleemtnation was first used to compile a Lean 4)</li>\n<li>This <code>stage0</code> is then compiled using a C compiler into a binary</li>\n<li>This <code>stage0</code> compiler is then run on the actual source code in <code>src/</code> to again produce C and then ultimately a <code>stage1</code> binary.</li>\n</ul>\n<p>You can repeat this process ad infinitum with <code>stage2</code> <code>stage3</code> etc. Sometimes this is interesting to do for a developer but that is getting out of scope.</p>\n<p>Now why are some people scared of bootstrapping: You basically put trust in the fact that <code>stage0</code> (or whatever other contraption people use, we will get into that) is an implementation that does not backdoor you the binaries it produces. If you are interested in this kind of attack look up \"Reflection on Trusting Trust\" by Ken Thompson.</p>\n<p>I personally think our bootstrapping process is pretty acceptable. If you bootstrap rust (<a href=\"https://github.com/rust-lang/rust/blob/master/INSTALL.md\">https://github.com/rust-lang/rust/blob/master/INSTALL.md</a>) you are made to download a binary Rust compiler that will fulfill essentially the role of <code>stage0</code>. For compiling <code>LLVM</code>/<code>clang</code> you are expected to have a fully functioning C compiler on board and even the glorious GNU gcc performs a multi stage bootstrap that expects the existence of some C compiler binary on your system to begin the procedure (<a href=\"https://gcc.gnu.org/install/build.html\">https://gcc.gnu.org/install/build.html</a>).</p>",
        "id": 436570789,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1714596723
    },
    {
        "content": "<p>Ok, thank you all for the information!  I had no idea of all these subtleties and further and further amazed at how the first computer started to work in the first place!</p>",
        "id": 436571639,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1714597064
    },
    {
        "content": "<p>One can disable bootstrapping for GCC.</p>",
        "id": 436572454,
        "sender_full_name": "Heime",
        "timestamp": 1714597424
    },
    {
        "content": "<p>The first computers were women.  Everything starts with a woman.</p>",
        "id": 436573654,
        "sender_full_name": "Heime",
        "timestamp": 1714597896
    },
    {
        "content": "<p>Speaking here for the code of conduct team. <span class=\"user-mention\" data-user-id=\"714044\">@Heime</span>, this is a warning. We have had several reports about your behaviour in this chatroom. We want to make clear that the <a href=\"https://www.contributor-covenant.org/version/2/0/code_of_conduct/\">code of conduct</a> forbids \"Trolling, insulting or derogatory comments, and personal or political attacks\". You are making a lot of demands of Lean and the community, stating from a claimed position of authority that your preferences are the only acceptable way. Your current behaviour makes useful discussion impossible. Please ensure that your contributions are constructive. Continuing in the current way will lead to a ban.</p>",
        "id": 436581323,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1714601766
    },
    {
        "content": "<p>Commenting that the build instructions are not sufficiently usable or that the build system is defective are not attacks.  Furthermore, it is the Lean Project who has claimed that one can actually build from source.  I was even going to help out with the process.  If you want to ban me, go right ahead.  I will then certainly not recommend others to use it and will make an official statement about it.</p>",
        "id": 436583250,
        "sender_full_name": "Heime",
        "timestamp": 1714602789
    },
    {
        "content": "<p>Your phrasing wasn't appropriate.</p>",
        "id": 436597064,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1714611175
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417769\">Bulhwi Cha</span> <a href=\"#narrow/stream/270676-lean4/topic/Build.20instructions.20refer.20to.20website/near/436444493\">said</a>:</p>\n<blockquote>\n<p>You can navigate the documentation conveniently in VS Code if you open and preview the <code>doc/SUMMARY.md</code> file. I haven't noticed this until now.</p>\n</blockquote>\n<p>When you're sharing or capturing a window, not a screen, it can be more convenient to navigate the documentation in a text editor. Otherwise, you'll have to change the window. Of course, you can just load a web page in the text editor.</p>\n<p>Sometimes, it's better to let users choose what they want to use. But as I've said before, the maintainers have the final say.</p>",
        "id": 436602057,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1714615198
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"714044\">Heime</span> <a href=\"#narrow/stream/270676-lean4/topic/Build.20instructions.20refer.20to.20website/near/436566350\">said</a>:</p>\n<blockquote>\n<p>Building from source means building from Source Code - the preferred form for modifying it by ids developers; the compacted code is not source code.</p>\n</blockquote>\n<p>Lean is a bootstrapping compiler, and it does not have a boostrappable path which is of reasonable length. (My understanding is that there are approximately 1000 lean compilers on the full bootstrap chain.) This is recognized as an issue, but it is very low priority, and there is no particular reason for the lean developers to be working on this to the detriment of much more important issues, as long as users are able to use lean effectively to solve their problems. I think it is important to recognize that it's possible to work on a bootstrap chain for lean <em>independently</em> of the lean4 repo, and I advise you to do so if you consider this issue of sufficient importance to devote your time to it. If you don't have the time for it, please understand that most other people also don't and do not have unrealistic expectations (or demands) for anything to happen here.</p>",
        "id": 436616267,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714625484
    },
    {
        "content": "<p>(Speaking for myself, I think the draw of a from-source bootstrap chain is much reduced if you aren't actually reading all the sources. It's much easier to hide a bug in the actual code than some complex trusting-trust attack, and the lean compiler is huge enough that it's easy to hide a bug or two in the plain text itself. And if you can't even read one lean compiler, you can forget about reading the 1000 lean compilers that the from-source bootstrap chain gives you. You'd be better off just reading the stage0 C code directly at that point.)</p>",
        "id": 436616681,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714625784
    },
    {
        "content": "<p>I didn't know that <a href=\"https://github.com/leanprover/lean4/pull/4045\">lean4#4045</a> by <span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> was already merged.</p>",
        "id": 436663870,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1714646365
    }
]