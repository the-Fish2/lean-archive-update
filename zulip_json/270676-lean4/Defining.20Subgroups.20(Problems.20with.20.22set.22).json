[
    {
        "content": "<p>I've been trying to write and prove some things about Groups and whatnot, but I'm on a standstill with a little problem that showed up on the Subgroup definition. I'm studying through a Report I found that shows some definitions and how to write them on Lean4, so I'm confused why it's not working.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">------------------------------------------------</span>\n<span class=\"c1\">-- Group Definition :</span>\n<span class=\"c1\">------------------------------------------------</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">has_Op</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"mi\">65</span> <span class=\"n\">a</span><span class=\"o\">:</span><span class=\"mi\">65</span> <span class=\"s2\">\" ⋆ \"</span> <span class=\"n\">b</span><span class=\"o\">:</span><span class=\"mi\">66</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">has_Op.op</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩</span>\n<span class=\"kn\">open</span> <span class=\"n\">has_Op</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Semigroup</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">has_Op</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">Op_Ass</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">⋆</span> <span class=\"n\">b</span> <span class=\"bp\">⋆</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">⋆</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⋆</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">Semigroup</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">has_Id</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"kn\">open</span> <span class=\"n\">has_Id</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Monoid</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Semigroup</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">has_Id</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">Id_Op</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">e</span> <span class=\"bp\">⋆</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n  <span class=\"n\">Op_Id</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">⋆</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n<span class=\"kn\">open</span> <span class=\"n\">Monoid</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">has_Inv</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"kd\">postfix</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"s2\">\"⁻¹\"</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">has_Inv.inv</span>\n<span class=\"kn\">open</span> <span class=\"n\">has_Inv</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Group</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Monoid</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">has_Inv</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">Op_Inv_L</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">⋆</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">e</span>\n  <span class=\"n\">Op_Inv_R</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">⋆</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">e</span>\n<span class=\"kn\">open</span> <span class=\"n\">Group</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">invG</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">):</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">x</span> <span class=\"bp\">⋆</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">⋆</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">e</span>\n<span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"mi\">65</span> <span class=\"n\">a</span><span class=\"o\">:</span><span class=\"mi\">65</span> <span class=\"s2\">\" é o inverso de \"</span> <span class=\"n\">b</span><span class=\"o\">:</span><span class=\"mi\">66</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">invG</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">idG</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">a</span> <span class=\"bp\">⋆</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">⋆</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n<span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"mi\">65</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"mi\">65</span> <span class=\"s2\">\" é a identidade no \"</span> <span class=\"n\">a</span><span class=\"o\">:</span><span class=\"mi\">66</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">idG</span> <span class=\"n\">x</span> <span class=\"n\">a</span>\n\n<span class=\"c1\">------------------------------------------------</span>\n<span class=\"c1\">-- Subgroups :</span>\n<span class=\"c1\">------------------------------------------------</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Subgroup</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Op_in</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⋆</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span>\n  <span class=\"n\">Id_in</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span>\n  <span class=\"n\">Inv_in</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span>\n\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">Group.lean:284:35</span>\n<span class=\"cm\">Expected type</span>\n<span class=\"cm\">G : Type ?u.89434</span>\n<span class=\"cm\">inst✝ : Group G</span>\n<span class=\"cm\">⊢ Type ?u.89434</span>\n<span class=\"cm\">Messages (1)</span>\n<span class=\"cm\">Group.lean:284:30</span>\n<span class=\"cm\">type expected, got</span>\n<span class=\"cm\">  (set G : ?m.89440 PUnit)</span>\n<span class=\"cm\">All Messages (1)</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 438553848,
        "sender_full_name": "Hannah Santos",
        "timestamp": 1715685478
    },
    {
        "content": "<p>Just to be on the same page, you want to define everything independently of Mathlib?</p>",
        "id": 438554077,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1715685548
    },
    {
        "content": "<p>Yep.</p>",
        "id": 438554365,
        "sender_full_name": "Hannah Santos",
        "timestamp": 1715685652
    },
    {
        "content": "<p>Do you also want to define <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set#doc\">docs#Set</a> yourself? Note that the Mathlib one is spelled with capital 'S'.</p>",
        "id": 438554441,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1715685692
    },
    {
        "content": "<p>I also thought it was with a capital S, but it looks like set is also a thing?</p>",
        "id": 438554564,
        "sender_full_name": "Hannah Santos",
        "timestamp": 1715685733
    },
    {
        "content": "<p>Not sure myself.</p>",
        "id": 438554574,
        "sender_full_name": "Hannah Santos",
        "timestamp": 1715685738
    },
    {
        "content": "<p>I'm pretty sure that <code>set</code> (all lowercase) is a verb.</p>",
        "id": 438554691,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1715685778
    },
    {
        "content": "<p>So.... this is a problem? <br>\n<a href=\"/user_uploads/3121/pHBcBTRYBIuxKrvKcS59iPy3/image.png\">Report I read</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/pHBcBTRYBIuxKrvKcS59iPy3/image.png\" title=\"Report I read\"><img src=\"/user_uploads/3121/pHBcBTRYBIuxKrvKcS59iPy3/image.png\"></a></div>",
        "id": 438554916,
        "sender_full_name": "Hannah Santos",
        "timestamp": 1715685856
    },
    {
        "content": "<p>This looks like Lean 3.</p>",
        "id": 438554949,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1715685871
    },
    {
        "content": "<p>Just add <code>import Mathlib.Init.Set</code> on your first line and change <code>set</code> to <code>Set</code> in your code.</p>",
        "id": 438555003,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1715685892
    },
    {
        "content": "<p>Oh!</p>",
        "id": 438555005,
        "sender_full_name": "Hannah Santos",
        "timestamp": 1715685893
    },
    {
        "content": "<p>It was working so well that I thought it was Lean4.</p>",
        "id": 438555071,
        "sender_full_name": "Hannah Santos",
        "timestamp": 1715685919
    },
    {
        "content": "<p>Thank you.</p>",
        "id": 438555080,
        "sender_full_name": "Hannah Santos",
        "timestamp": 1715685924
    },
    {
        "content": "<p>I would recommend that you <code>set_option autoImplicit false</code> because if you have this set to <code>true</code> and you start using stuff like <code>set</code> believing that it's a thing in Lean 4, then Lean 4 will happily make it a thing, which is probably not what you want.</p>",
        "id": 438620899,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1715707156
    }
]