[
    {
        "content": "<p>Aesop can now collect statistics about the performance of multiple Aesop runs. The collection is enabled by <code>set_option aesop.collectStats true</code> (possibly just for certain Aesop calls). Then, after the relevant modules have been rebuilt, a report can be generated with <code>#aesop_stats</code>. This command displays stats about all Aesop calls in the current module and (transitively) imported modules. E.g. to display stats about Mathlib:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"bp\">#</span><span class=\"n\">aesop_stats</span>\n</code></pre></div>\n<p>Unfortunately, it's currently not easily possible to set <code>aesop.collectStats</code> for the entirety of Mathlib since <code>aesop.collectStats</code> is not a builtin option and so <code>lean -D</code> refuses it. But it would be easy to look at specific Aesop wrappers, such as <code>aesop_cat</code>, by setting the option in the macro.</p>\n<p><a href=\"https://gist.github.com/JLimperg/f595a1a1c7b2d0edc7a7ee3f5600adf9#file-stats-txt\">Here</a> are stats for current-ish Mathlib. (Zulip won't let me inline them due to the limit on message length.)</p>\n<p>Main takeaways:</p>\n<ul>\n<li>The average Aesop call is ~240ms, which is not terrible but also not great.</li>\n<li><code>simp</code> dominates everything else by at least an order of magnitude.</li>\n<li>Some rules are currently unused but still take up a fair amount of time, e.g. <code>Continuous.star</code> succeeds never but fails 25 times and each failure takes 174ms on average.</li>\n</ul>",
        "id": 422005132,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1708170198
    },
    {
        "content": "<p>(I'm aware that the subcategories add up to slightly more than the total time. <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> I've spent a lot of time trying to understand why that is, and I still have no idea.)</p>",
        "id": 422005449,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1708170575
    },
    {
        "content": "<p>If Aesop is using simp_all, does it effectively cache everything so that only new terms are simplified?  Or is that impossible because each new term might simplify some other term?</p>",
        "id": 422025117,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1708187231
    },
    {
        "content": "<p>It's surprisingly hard:</p>\n<ul>\n<li><code>simp_all</code> results depend on all hypotheses, so are hard to cache across goals.</li>\n<li>Anyway <code>FVarId</code>s can change, so expressions involving hypotheses are hard to cache across goals.</li>\n</ul>\n<p>I have some ideas for improvements:</p>\n<ul>\n<li>The <code>simp_all</code> pass can be split into a <code>simp at *</code> pass and a <code>simp_all</code> pass. The first is goal-independent and the second would hopefully have little to do in most cases.</li>\n<li>For the <code>simp at *</code> pass, we should then be able to cache expressions which can't be simplified further. This should be goal-independent and should, in the context of Aesop, avoid a lot of work.</li>\n<li><code>simp</code> could also cache results for fvar-free expressions in a separate cache, which could then be shared across goals. Not sure how much impact this would have.</li>\n<li>At some point I'd like to experiment with a more radical programme where Aesop eagerly normalises everything up to reducible transparency. This has an obvious up-front cost, but I suspect it might unlock various optimisations. For example, we can't currently use state-of-the-art indexing techniques from automated theorem proving because they are incompatible with computation. More prosaically, equality checks on pre-normalised expressions should be much cheaper than <code>isDefEq</code>. E.g. <code>assumption</code> spends an average of 1.5ms looking through the context (and usually finding nothing); that seems like a lot to me.</li>\n</ul>\n<p>I can't really work on these things atm, but if anyone wants to help, I'd be very excited.</p>",
        "id": 422027880,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1708189681
    }
]