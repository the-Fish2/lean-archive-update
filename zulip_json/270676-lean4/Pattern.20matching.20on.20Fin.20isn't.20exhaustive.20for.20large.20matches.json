[
    {
        "content": "<p>For a quick example of what I mean, here's a small code snippet:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo2</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo4</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">4</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">3</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo8</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">8</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">3</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">4</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">5</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">6</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">7</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo16</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">16</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">3</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">4</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">5</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">6</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">7</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">8</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">9</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">10</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">11</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">12</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">13</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">14</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">15</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n</code></pre></div>\n<p>Intuitively, all of these should compile-- in reality, all of them except for <code>foo16</code> do.</p>\n<p>When I brought this up to some others who were more familiar with the internals of the compiler they pointed out that this is likely due to this <code>Contradiction.Config.searchFuel</code> value being locked to 16: <a href=\"https://github.com/leanprover/lean4/blob/4391bc2977d3bf16f6780bb830c5fcd51f426d7d/src/Lean/Meta/Tactic/Contradiction.lean#L19\">https://github.com/leanprover/lean4/blob/4391bc2977d3bf16f6780bb830c5fcd51f426d7d/src/Lean/Meta/Tactic/Contradiction.lean#L19</a></p>\n<p>The solution they proposed would be to maybe allow some way to configure this setting, however I also wonder if for this specific sort of case you couldn't also just have it look at the number of match arms and have it set the fuel to <code>max(Contradiction.Config.searchFuel, numberOfMatchArms)</code>automatically-- maybe this is asking too much for what must be a niche use case if this bug hasn't been discussed before, though.</p>\n<p>They also suggested that I might post an RFC for this, but I see that the RFC proposal template on the GitHub suggests that I should ask here first just to be sure the issue has been talked about by the community.</p>\n<p>Are the two potential proposed solutions enough for a proposal, or are there maybe some other options (or maybe even workarounds) that I've missed? Thank you for reading ^^</p>",
        "id": 428048252,
        "sender_full_name": "David Garland",
        "timestamp": 1710988786
    },
    {
        "content": "<p>If you want to construct large Fin functions, you should use <code>Fin.cons</code> or the mathlib <code>![...]</code> notation. This does not entail expensive match analysis</p>",
        "id": 428048389,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710988895
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Pattern.20matching.20on.20Fin.20isn't.20exhaustive.20for.20large.20matches/near/428048389\">said</a>:</p>\n<blockquote>\n<p>If you want to construct large Fin functions, you should use <code>Fin.cons</code> or the mathlib <code>![...]</code> notation. This does not entail expensive match analysis</p>\n</blockquote>\n<p>I see, thank you-- though I don't know how exactly to find documentation for the latter as it doesn't exactly seem google-able, and I'm also not entirely sure how I might use the former to rewrite my example, if it is intended to be able to do that<br>\nIn the actual code I was writing, I wanted actually varying outputs for each case-- I used <code>Bool</code> only for simplicity, so that the issue at hand was the focus</p>",
        "id": 428049128,
        "sender_full_name": "David Garland",
        "timestamp": 1710989516
    },
    {
        "content": "<p>re: not google-able, one trick you can do for weird notation is to grep for it in mathlib and ctrl-click to go to definition</p>",
        "id": 428049344,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710989694
    },
    {
        "content": "<p>in this case, the relevant function is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Matrix.vecCons#doc\">docs#Matrix.vecCons</a></p>",
        "id": 428049384,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710989732
    },
    {
        "content": "<p>Grep for it as in cloning it and using that command locally? Or is this a feature of GitHub nowadays that I need to get to learning?<br>\nIn any case thank you for the link! ^^</p>",
        "id": 428049486,
        "sender_full_name": "David Garland",
        "timestamp": 1710989805
    },
    {
        "content": "<p>\"grep for it in mathlib\" really means \"open mathlib in VSCode and use VSCode search with the regular expression button clicked\"</p>",
        "id": 428049518,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710989844
    },
    {
        "content": "<p>Gotcha, thank you</p>",
        "id": 428049555,
        "sender_full_name": "David Garland",
        "timestamp": 1710989878
    },
    {
        "content": "<p>Also, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fin.cases#doc\">docs#Fin.cases</a> exists as a dependent version of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fin.cons#doc\">docs#Fin.cons</a> if you are defining a dependent Fin function</p>",
        "id": 428049672,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710989931
    },
    {
        "content": "<p>Here's another version of the proof which uses a 'manual' proof of exhaustiveness:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo16</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">16</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">3</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">4</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">5</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">6</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">7</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">8</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">9</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">10</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">11</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">12</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">13</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">14</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">15</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"bp\">+</span><span class=\"mi\">16</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">omega</span>\n</code></pre></div>",
        "id": 428050018,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710990180
    },
    {
        "content": "<p>Interesting! I appreciate you being thorough in your explanation, I'm learning some things now-- first time I had seen this style of using <code>Fin n -&gt; a</code> to represent <code>Vec n a</code>, I see now how that vecCons thing makes sense to use here, and actually makes the thing I was trying to do shorter to write as well</p>",
        "id": 428050189,
        "sender_full_name": "David Garland",
        "timestamp": 1710990306
    }
]