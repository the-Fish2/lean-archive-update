[
    {
        "content": "<p>If we have a macro that is expanded in tactic, how can we be sure of the result of that expansion?</p>",
        "id": 446289064,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1719072113
    },
    {
        "content": "<p>For example, how to make sure that the <code>exists</code> tactic is expanded to <code>refine; try trivial</code>?</p>",
        "id": 446289410,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1719072278
    },
    {
        "content": "<p>I find this works, but how to filter trace messages? I want only one trace message.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span><span class=\"w\"> </span><span class=\"n\">trace.Elab.step</span><span class=\"w\"> </span><span class=\"n\">true</span>\n\n<span class=\"kd\">example</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∃</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"kd\">by</span>\n<span class=\"w\">  </span><span class=\"c\">/-</span>\n<span class=\"cm\">  [Elab.step] exists 1 ▼</span>\n<span class=\"cm\">    [] exists 1 ▼</span>\n<span class=\"cm\">    [] exists 1 ▼</span>\n<span class=\"cm\">    [] (refine ⟨1, ?_⟩; try trivial) ▼</span>\n<span class=\"cm\">    [] refine ⟨1, ?_⟩; try trivial ▼</span>\n<span class=\"cm\">    [] refine ⟨1, ?_⟩; try trivial ▶</span>\n<span class=\"cm\">  -/</span>\n<span class=\"w\">  </span><span class=\"n\">exists</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 446305511,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1719080725
    },
    {
        "content": "<p>You can use the <code>set_option</code> command within a tactic block like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∃</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"kn\">set_option</span><span class=\"w\"> </span><span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">Elab</span><span class=\"bp\">.</span><span class=\"n\">step</span><span class=\"w\"> </span><span class=\"n\">true</span><span class=\"w\"> </span><span class=\"k\">in</span>\n<span class=\"w\">  </span><span class=\"n\">exists</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 446305920,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1719080964
    },
    {
        "content": "<p>But there isn't really a way to get rid of the additional trace messages, the elaborator is taking multiple steps internally while performing the elaboration of that tactic so it prints multiple traces.</p>",
        "id": 446306036,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1719081014
    },
    {
        "content": "<p>I just want to filter the output messages, so as long as I can process the messages, I guess.</p>",
        "id": 446306123,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1719081075
    },
    {
        "content": "<p>Filter for what</p>",
        "id": 446306198,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1719081119
    },
    {
        "content": "<p>filter of trace message.</p>",
        "id": 446306276,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1719081147
    },
    {
        "content": "<p>I thought that as long as I could get the trace message as a String, it wouldn't be hard to filter it.</p>",
        "id": 446306321,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1719081178
    },
    {
        "content": "<p>Well you do get them as strings? What's the problem?</p>",
        "id": 446306564,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1719081350
    },
    {
        "content": "<p>The problem is that I cannot get trace messages for <code>trace.Elab.step</code> only for the places of interest. I apologise for my poor  English.</p>",
        "id": 446306703,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1719081424
    },
    {
        "content": "<p>This is still too long...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/--</span>\n<span class=\"sd\">info: [Elab.step] exists 1</span>\n<span class=\"sd\">  [Elab.step] exists 1</span>\n<span class=\"sd\">    [Elab.step] exists 1</span>\n<span class=\"sd\">      [Elab.step] (refine ⟨1, ?_⟩; try trivial)</span>\n<span class=\"sd\">        [Elab.step] refine ⟨1, ?_⟩; try trivial</span>\n<span class=\"sd\">          [Elab.step] refine ⟨1, ?_⟩; try trivial</span>\n<span class=\"sd\">            [Elab.step] refine ⟨1, ?_⟩</span>\n<span class=\"sd\">              [Elab.step] expected type: ∃ x, x = 1, term</span>\n<span class=\"sd\">                  ⟨1, ?_⟩</span>\n<span class=\"sd\">                [Elab.step] expected type: ∃ x, x = 1, term</span>\n<span class=\"sd\">                    Exists.intro✝ 1 ?_</span>\n<span class=\"sd\">                  [Elab.step] expected type: Nat, term</span>\n<span class=\"sd\">                      1</span>\n<span class=\"sd\">                    [Elab.step.result] 1</span>\n<span class=\"sd\">                  [Elab.step] expected type: 1 = 1, term</span>\n<span class=\"sd\">                      ?_</span>\n<span class=\"sd\">                    [Elab.step.result] ?m.704</span>\n<span class=\"sd\">                  [Elab.step.result] Exists.intro 1 ?m.704</span>\n<span class=\"sd\">                [Elab.step.result] Exists.intro 1 ?m.704</span>\n<span class=\"sd\">            [Elab.step] try trivial</span>\n<span class=\"sd\">              [Elab.step] first</span>\n<span class=\"sd\">                  | trivial</span>\n<span class=\"sd\">                  | skip</span>\n<span class=\"sd\">                [Elab.step] trivial</span>\n<span class=\"sd\">                  [Elab.step] trivial</span>\n<span class=\"sd\">                    [Elab.step] trivial</span>\n<span class=\"sd\">                      [Elab.step] (apply And.intro✝) &lt;;&gt; trivial</span>\n<span class=\"sd\">                        [Elab.step] focus</span>\n<span class=\"sd\">                              apply And.intro✝</span>\n<span class=\"sd\">                              with_annotate_state\"&lt;;&gt;\" skip</span>\n<span class=\"sd\">                              all_goals trivial</span>\n<span class=\"sd\">                          [Elab.step] ⏎</span>\n<span class=\"sd\">                                apply And.intro✝</span>\n<span class=\"sd\">                                with_annotate_state\"&lt;;&gt;\" skip</span>\n<span class=\"sd\">                                all_goals trivial</span>\n<span class=\"sd\">                            [Elab.step] ⏎</span>\n<span class=\"sd\">                                  apply And.intro✝</span>\n<span class=\"sd\">                                  with_annotate_state\"&lt;;&gt;\" skip</span>\n<span class=\"sd\">                                  all_goals trivial</span>\n<span class=\"sd\">                              [Elab.step] apply And.intro✝</span>\n<span class=\"sd\">                      [Elab.step] apply True.intro✝</span>\n<span class=\"sd\">                      [Elab.step] decide</span>\n<span class=\"sd\">-/</span>\n<span class=\"bp\">#</span><span class=\"n\">guard_msgs</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"kd\">example</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∃</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"kd\">by</span>\n<span class=\"w\">  </span><span class=\"kd\">set_option</span><span class=\"w\"> </span><span class=\"n\">trace.Elab.step</span><span class=\"w\"> </span><span class=\"n\">true</span><span class=\"w\"> </span><span class=\"k\">in</span>\n<span class=\"w\">  </span><span class=\"n\">exists</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 446306775,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1719081480
    },
    {
        "content": "<p>What is it too long for? Do you have a goal?</p>",
        "id": 446306872,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1719081522
    },
    {
        "content": "<p>I want to test the output messages from Elab.step.</p>\n<p>I only want up to line 4 and no further. If <code>#guard_msgs</code> could have an option to 'ignore after line n', that's what I want.</p>",
        "id": 446306959,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1719081598
    },
    {
        "content": "<blockquote>\n<p>how can we be sure of the result of that expansion?</p>\n</blockquote>\n<p>Is this for your own curiosity? If not, is there a greater purpose?</p>",
        "id": 446307032,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1719081620
    },
    {
        "content": "<p>I am writing a document about Lean and would like to include code examples in it. If you just write in natural language, \"XXX is a macro for ▼\", you won't notice if it changes at any time.</p>",
        "id": 446307316,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1719081704
    },
    {
        "content": "<p><code>#guard_msgs</code> is a great tool. Maybe I should fork <code>#guard_msgs</code> and write my own tool, but I'm not that familiar with Lean.</p>",
        "id": 446308243,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1719081951
    },
    {
        "content": "<p>Also, being able to write unit tests for macros may be useful outside of documentation.</p>",
        "id": 446308860,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1719082135
    },
    {
        "content": "<blockquote>\n<p>Well you do get them as strings?</p>\n</blockquote>\n<p>No. All I have in my hand is the output trace message ...</p>",
        "id": 446310415,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1719082442
    },
    {
        "content": "<p>That's helpful context.</p>\n<p>This is not perfect, but you can expand macros yourself:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Lean</span>\n\n<span class=\"kn\">elab</span><span class=\"w\"> </span><span class=\"s2\">\"#tactic_expand1 \"</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">tactic</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">Elab</span><span class=\"bp\">.</span><span class=\"n\">liftMacroM</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Macro</span><span class=\"bp\">.</span><span class=\"n\">expandMacro?</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">logInfo</span><span class=\"w\"> </span><span class=\"n\">m!</span><span class=\"s2\">\"Not a macro\"</span>\n<span class=\"w\">  </span><span class=\"n\">logInfo</span><span class=\"w\"> </span><span class=\"n\">m!</span><span class=\"s2\">\"{t}\"</span>\n\n<span class=\"bp\">#</span><span class=\"n\">tactic_expand1</span><span class=\"w\"> </span><span class=\"n\">exists</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"c1\">-- (refine ⟨1, ?_⟩; try trivial)</span>\n</code></pre></div>",
        "id": 446310888,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1719082746
    },
    {
        "content": "<p>It's not perfect because tactics can have multiple macro expansions, and each one will be tried one at a time until one succeeds. My code only gives the first expansion.</p>",
        "id": 446310979,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1719082787
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> Thank you!!! Now I might be able to validate macros that only have a single output result. Amazing!!</p>",
        "id": 446311390,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1719082984
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"626349\">Asei Inoue</span> has marked this topic as resolved.</p>",
        "id": 446311677,
        "sender_full_name": "Notification Bot",
        "timestamp": 1719083145
    }
]