[
    {
        "content": "<p>Consider the following two examples. In the first, we construct a witness by providing a proof of <code>True</code>, and so Lean \"learns\" that <code>C = fun _ _ =&gt; True</code>. I want to do something similar in the second case.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">infant</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"bp\">//</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">},</span> <span class=\"n\">C</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">intros</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n  <span class=\"n\">refine'</span> <span class=\"n\">True.intro</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">baby</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span> <span class=\"bp\">//</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">Prod.fst</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">intros</span> <span class=\"n\">m</span> <span class=\"n\">n</span>\n  <span class=\"n\">refine'</span> <span class=\"n\">True.intro</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Instead, I get this error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">▶</span> <span class=\"mi\">2</span> <span class=\"n\">goals</span>\n<span class=\"n\">case</span> <span class=\"n\">property</span>\n<span class=\"n\">s₀</span> <span class=\"n\">s₁</span> <span class=\"o\">:</span> <span class=\"n\">State</span>\n<span class=\"n\">fuel</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">?</span><span class=\"n\">val.1</span> <span class=\"n\">m</span> <span class=\"n\">n</span>\n\n<span class=\"n\">case</span> <span class=\"n\">val</span>\n<span class=\"n\">s₀</span> <span class=\"n\">s₁</span> <span class=\"o\">:</span> <span class=\"n\">State</span>\n<span class=\"n\">fuel</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span>\n\n<span class=\"bp\">▶</span> <span class=\"n\">expected</span> <span class=\"n\">type</span> <span class=\"o\">(</span><span class=\"mi\">482</span><span class=\"o\">:</span><span class=\"mi\">11</span><span class=\"bp\">-</span><span class=\"mi\">482</span><span class=\"o\">:</span><span class=\"mi\">21</span><span class=\"o\">)</span>\n<span class=\"n\">s₀</span> <span class=\"n\">s₁</span> <span class=\"o\">:</span> <span class=\"n\">State</span>\n<span class=\"n\">fuel</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">?</span><span class=\"n\">val.1</span> <span class=\"n\">m</span> <span class=\"n\">n</span>\n\n<span class=\"bp\">▶</span> <span class=\"mi\">482</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"bp\">-</span><span class=\"mi\">482</span><span class=\"o\">:</span><span class=\"mi\">21</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span>\n<span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">True.intro</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">True</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">val.1</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>The motivation for this is during a long subtype proof that begins with <code>constructor</code>, I would like to reference intermediate values constructed in the proof within the witness for <code>C</code>, but I don't want to prove that they can be expressed in terms of only constants and the arguments to <code>C</code>, and so instead I would like to assert the existence of these intermediate values and construct them, but I do not know how to do this.</p>",
        "id": 427786315,
        "sender_full_name": "Malcolm Langfield",
        "timestamp": 1710872521
    }
]