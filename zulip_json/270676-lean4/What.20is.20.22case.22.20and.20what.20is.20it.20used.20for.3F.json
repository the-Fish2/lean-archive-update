[
    {
        "content": "<p>There's something in the infoview which I always ignore, but I'm writing documentation for undergraduates so am suddenly paying attention to everything. In this code (my first example explaining the mathlib <code>convert</code> tactic)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">convert</span> <span class=\"n\">h</span>\n  <span class=\"c1\">-- ⊢ e = d</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>when the goal is <code>e = d</code> it also says at the top of the infoview <code>case h.e'_2.h.e'_6.h.e'_1.h.e'_6</code>, which looks like total gobble-de-gook to me (and hence will look like gobble-de-gook to the students, which is not ideal). I also occasionally notice \"case\" in the middle of long proofs when it seems to have become very long.</p>\n<p>Given that I've got this far without having a clue what this thing is, and the output in the above example is nothing but confusing, is it possible to switch it off? Alternatively is someone going to tell me that this is somehow an important thing and my Lean skillz would be upgraded if I started paying attention to it? I wonder whether this confusion on my part is due to the fact that I am resolutely a <code>cases'</code> person, I think the whole Lean 4 ascii art involved in <code>cases</code> is confusing to mathematicians (and to me) so I typically avoid it; I neither know nor care what the names of the constructors of <code>Or</code> are and I don't think I should be expected to know. Or is this unrelated to \"case\"?</p>",
        "id": 411052366,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704303352
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/What.20is.20.22case.22.20and.20what.20is.20it.20used.20for.3F/near/411052366\">said</a>:</p>\n<blockquote>\n<p>Given that I've got this far without having a clue what this thing is, and the output in the above example is nothing but confusing, is it possible to switch it off?</p>\n</blockquote>\n<p>Yes. You can go to the extension settings to kill it. And remember your repo can include a file with VSCode settings.</p>",
        "id": 411053054,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1704303634
    },
    {
        "content": "<p>your hunch is right, btw, and when it works it can be nice-ish:</p>\n<p><a href=\"/user_uploads/3121/pIAG9BrOPrWRAygEuTq3XVMN/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/pIAG9BrOPrWRAygEuTq3XVMN/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/pIAG9BrOPrWRAygEuTq3XVMN/image.png\"></a></div><p>sadly I think <code>convert</code> and <code>refine</code> always make some completely nonsensical case names, so therefore I agree with you that all I ever see is complete nonsense</p>",
        "id": 411053220,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1704303720
    },
    {
        "content": "<p>Aren't names of hypotheses an implementation detail??</p>\n<p>Patrick is dead right, these are apparently \"names\" and there's an option \"Show Goal Names\" which I've now turned off :-)</p>",
        "id": 411053483,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704303837
    },
    {
        "content": "<p>I guess the idea is that you can pretty them up for inductions :)</p>",
        "id": 411054012,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1704304072
    },
    {
        "content": "<p>But I agree in principle</p>",
        "id": 411054076,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1704304085
    },
    {
        "content": "<p>I consider names of hypotheses a little less of an implementation detail now that you can \"call out\" implicit arguments via <code>apply thm (a := 0)</code>.</p>",
        "id": 411054078,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1704304087
    },
    {
        "content": "<p>Goal names are more than an implementation detail, they show up in <code>?a</code> and <code>case a =&gt;</code></p>",
        "id": 411054122,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704304116
    },
    {
        "content": "<p>i don't think I've ever seen <code>refine</code> named cases be useful for much; as far as I know they just let you call them up earlier with <code>case</code>? It'd be nice if I could reuse it to mean \"I want to use the same metavariable I defined before\"</p>",
        "id": 411054243,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1704304177
    },
    {
        "content": "<p>That \"it would be nice\" is already the case, but IMO it's a misfeature</p>",
        "id": 411054348,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704304213
    },
    {
        "content": "<p>because unlike regular names, goal names are not hygienic</p>",
        "id": 411054377,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704304232
    },
    {
        "content": "<p>I've never seen it work properly, and I've tried it a couple times. Why do you think it's a misfeature?</p>",
        "id": 411054383,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1704304235
    },
    {
        "content": "<p>Oh, so there can be duplication?</p>",
        "id": 411054405,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1704304248
    },
    {
        "content": "<p>I considered using those names as an \"internal\" working of tactics, where you make your own lemmas with their meaningful names for hypotheses and then you seek out the goals with the right name.  It felt a little hacky, but it worked.  Personally, I find it similar to using <code>mdata</code>, but more ad hoc...</p>",
        "id": 411054587,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1704304327
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">refine</span> <span class=\"n\">f</span> <span class=\"bp\">?</span><span class=\"n\">a</span> <span class=\"bp\">?</span><span class=\"n\">b</span>\n    <span class=\"n\">exact</span> <span class=\"mi\">3</span>\n    <span class=\"n\">exact</span> <span class=\"mi\">4</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">refine</span> <span class=\"n\">f</span> <span class=\"bp\">?</span><span class=\"n\">a</span> <span class=\"bp\">?</span><span class=\"n\">b</span>\n    <span class=\"c1\">-- done already</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">f</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"mi\">1</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"mi\">2</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">refine</span> <span class=\"n\">f</span> <span class=\"bp\">?</span><span class=\"n\">x</span> <span class=\"bp\">?</span><span class=\"n\">y</span>\n    <span class=\"c1\">-- done already</span>\n  <span class=\"k\">let</span> <span class=\"n\">_z</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">x</span> <span class=\"c1\">-- z = 1</span>\n  <span class=\"n\">trivial</span>\n</code></pre></div>",
        "id": 411055171,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704304576
    },
    {
        "content": "<p>can you spot where <code>?x</code> was assigned?</p>",
        "id": 411055226,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704304602
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/What.20is.20.22case.22.20and.20what.20is.20it.20used.20for.3F/near/411052366\">said</a>:</p>\n<blockquote>\n<p>I wonder whether this confusion on my part is due to the fact that I am resolutely a <code>cases'</code> person, I think the whole Lean 4 ascii art involved in <code>cases</code> is confusing to mathematicians (and to me) so I typically avoid it; I neither know nor care what the names of the constructors of <code>Or</code> are and I don't think I should be expected to know. Or is this unrelated to \"case\"?</p>\n</blockquote>\n<p>Note that this is actually about the <code>case</code> tactic, which has nothing to do with the <code>cases</code> tactic (or <code>cases'</code> which is similar), except that if you use <code>cases'</code> you are more likely to need <code>case</code> if you want to refer to the subcases rather than just proving them in the order they were given</p>",
        "id": 411055976,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704304887
    },
    {
        "content": "<p>This feels unhygienic to me!</p>\n<p>Btw, the online lean server does not appear to show the <code>case</code> names.</p>",
        "id": 411056011,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1704304902
    },
    {
        "content": "<p>I know that mathematics rarely involves inductive types with more than two constructors (and one two-constructor inductive in particular), but if you ever have to deal with them you will want to be able to name them for clarity rather than just doing proofs in a randomish order. In fact, the same issue can arise when proving things with <code>rw</code> or applying a theorem with many hypotheses, you can end up with a ton of parallel subgoals, and it is good to refer to them by name if you want to make the proof script clearer</p>",
        "id": 411056714,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704305106
    },
    {
        "content": "<p>If I <code>apply Finset.induction_on</code> or something like that, and suddenly end up with 4 goals, I just put four dots and prove the four goals. Who cares what these goals are \"called\"? Oh -- you're saying that for readability you like \"this is the 0 case\" etc?</p>",
        "id": 411057162,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704305238
    },
    {
        "content": "<p>yes</p>",
        "id": 411057193,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704305246
    },
    {
        "content": "<p><code>case</code> also has the secondary benefit that you can name the inaccessible variables that were created in each case, which allows you to write just bare <code>cases x</code> and then name the variables in the case instead of in a long list after</p>",
        "id": 411057306,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704305279
    },
    {
        "content": "<p>Yeah I don't think like that, I just think \"this is one of the goals which needs proving at this point\"</p>",
        "id": 411057350,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704305284
    },
    {
        "content": "<p>I mean that makes sense when you are playing the lean game</p>",
        "id": 411057413,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704305311
    },
    {
        "content": "<p>but if you want to maintain proofs over time it can be helpful</p>",
        "id": 411057514,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704305349
    },
    {
        "content": "<p>there is also <code>next =&gt;</code>, which also lets you name variables via <code>next a b c =&gt;</code> but doesn't name the case, so it's equivalent to <code>. rename_i a b c; ...</code></p>",
        "id": 411057615,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704305397
    },
    {
        "content": "<p>I'm looking forward to starting FLT. For the first time I'll have to worry about things like bumping mathlib (Patrick and Johan did all the bumps with perfectoid) and I'm sure it'll teach me a lot.</p>",
        "id": 411057688,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704305413
    },
    {
        "content": "<p>oh yes, maintaining a body of lean code will be a new experience for you</p>",
        "id": 411057827,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704305461
    },
    {
        "content": "<p>Kevin, note this infoview option was part of <a href=\"https://github.com/leanprover/vscode-lean4/pull/302/files\">https://github.com/leanprover/vscode-lean4/pull/302/files</a> which brought other options for teaching purposes.</p>",
        "id": 411057868,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1704305481
    },
    {
        "content": "<p>Hmm, when I was younger doing induction on paper, I'd usually mark the subgoals as \"base case\" and \"inductive case\" explicitly - this seems similar</p>",
        "id": 411058074,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1704305540
    },
    {
        "content": "<p>speaking of proof goal options, I really want an option to not show variables which are in common between all goals. When I have 4 goals with 30 hypotheses and the first 28 are the same this is so difficult to work with</p>",
        "id": 411058108,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704305557
    },
    {
        "content": "<p>I feel extremely lucky in this community that whenever I run into things, someone who knows how to solve them has often run into them earlier.</p>",
        "id": 411058154,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704305577
    },
    {
        "content": "<p>But variables getting out of hand is currently not one of those things ;-)</p>",
        "id": 411058198,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704305595
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/What.20is.20.22case.22.20and.20what.20is.20it.20used.20for.3F/near/411057868\">said</a>:</p>\n<blockquote>\n<p>Kevin, note this infoview option was part of <a href=\"https://github.com/leanprover/vscode-lean4/pull/302/files\">https://github.com/leanprover/vscode-lean4/pull/302/files</a> which brought other options for teaching purposes.</p>\n</blockquote>\n<p>these options are incredible and I'm sad I just noticed them now!</p>",
        "id": 411061282,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1704307009
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/What.20is.20.22case.22.20and.20what.20is.20it.20used.20for.3F/near/411058108\">said</a>:</p>\n<blockquote>\n<p>I really want an option to not show variables which are in common between all goals</p>\n</blockquote>\n<p>this would be lifechanging, not gonna lie. i would react all of the github emojis on an RFC for this</p>",
        "id": 411082978,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1704316364
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/What.20is.20.22case.22.20and.20what.20is.20it.20used.20for.3F/near/411053054\">said</a>:</p>\n<blockquote>\n<p>And remember your repo can include a file with VSCode settings.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, here is the VS Code settings file for my teaching repo, which includes the \"turn off case names\" setting as well as several others:<br>\n<a href=\"https://github.com/hrmacbeth/math2001/blob/main/.vscode/settings.json\">https://github.com/hrmacbeth/math2001/blob/main/.vscode/settings.json</a></p>\n<p>Highly recommend doing something like this in your teaching repo!</p>",
        "id": 411095974,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1704323336
    },
    {
        "content": "<p>You can improve it a bit with</p>\n<div class=\"codehilite\" data-code-language=\"JSON\"><pre><span></span><code><span class=\"w\">    </span><span class=\"nt\">\"editor.semanticTokenColorCustomizations\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nt\">\"rules\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"nt\">\"leanSorryLike\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"#FF0000\"</span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"nt\">\"[Default Light+]\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"nt\">\"rules\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"nt\">\"variable\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"#1a31da\"</span><span class=\"p\">}}</span>\n<span class=\"w\">    </span><span class=\"p\">},</span>\n</code></pre></div>",
        "id": 411096523,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1704323720
    },
    {
        "content": "<p>See <a href=\"#narrow/stream/270676-lean4/topic/Minimally.20commenting.20out.20a.20branch.20of.20a.20proof/near/410869661\">here</a></p>",
        "id": 411096576,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1704323762
    }
]