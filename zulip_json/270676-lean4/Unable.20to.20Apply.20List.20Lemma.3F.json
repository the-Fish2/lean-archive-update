[
    {
        "content": "<p>I am confused why the fails (Lean <code>4.7.0</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"c1\">-- A set of zero or more bytes upto a given size.</span>\n<span class=\"kn\">structure</span><span class=\"w\"> </span><span class=\"n\">FinVec</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">T</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"n\">T</span>\n<span class=\"w\">  </span><span class=\"n\">isLt</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"bp\">&lt;=</span><span class=\"w\"> </span><span class=\"n\">n</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">slice32</span><span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">FinVec</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:=</span><span class=\"mi\">32</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\"> </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">take</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"c1\">-- Prove bytes has at most 32 elements.</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">List</span><span class=\"bp\">.</span><span class=\"n\">length_take</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"c1\">-- Construct FinVec</span>\n<span class=\"w\">  </span><span class=\"o\">{</span><span class=\"n\">data</span><span class=\"o\">:=</span><span class=\"n\">bytes</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">isLt</span><span class=\"o\">:=</span><span class=\"n\">q</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>Specifically, the error is that it <code>List.length_take_le</code> is an <code>unknown constant</code>.  But, this is a <a href=\"https://leanprover-community.github.io/mathlib4_docs/Batteries/Data/List/Lemmas.html#List.length_take\">real lemma</a> I'm trying apply.  I figure an import is required, but could not get the right incantation.</p>\n<p>I should add, that I thought I understood that the standard library (now batteries) was included by default.  So, I expected something like this to do it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Std</span><span class=\"bp\">.</span><span class=\"n\">Data</span><span class=\"bp\">.</span><span class=\"n\">List</span><span class=\"bp\">.</span><span class=\"n\">Lemmas</span>\n</code></pre></div>\n<p>Thoughts?</p>",
        "id": 440196308,
        "sender_full_name": "David Pearce",
        "timestamp": 1716417307
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 440196916,
        "sender_full_name": "David Pearce",
        "timestamp": 1716417573
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 440197191,
        "sender_full_name": "David Pearce",
        "timestamp": 1716417692
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 440198217,
        "sender_full_name": "David Pearce",
        "timestamp": 1716418109
    },
    {
        "content": "<p>Seems to <a href=\"https://live.lean-lang.org/#code=import%20Batteries.Data.List.Lemmas%0A%0A--%20A%20set%20of%20zero%20or%20more%20bytes%20upto%20a%20given%20size.%0Astructure%20FinVec%20%7Bn%3ANat%7D%20(T)%20where%0A%20%20data%20%3A%20List%20T%0A%20%20isLt%20%3A%20data.length%20%3C%3D%20n%0A%0Adef%20slice32(l%3AList%20Nat)%20%3A%20(FinVec%20(n%3A%3D32)%20Nat)%20%3A%3D%0A%20let%20bytes%20%3A%3D%20(l.take%2032)%0A%20%20--%20Prove%20bytes%20has%20at%20most%2032%20elements.%0A%20%20have%20q%20%3A%20bytes.length%20%E2%89%A4%2032%20%3A%3D%20by%20rw%20%5BList.length_take%5D%3B%20apply%20Nat.min_le_left%0A%20%20--%20Construct%20FinVec%0A%20%20%7Bdata%3A%3Dbytes%2C%20isLt%3A%3Dq%7D%0A\">work fine</a> with <code>import Batteries.Data.List.Lemmas</code>.</p>",
        "id": 440203208,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716420157
    },
    {
        "content": "<p>You may need to upgrade from v4.7.0 to v4.8.0-rc2, but I suspect it should work fine in v4.7.0</p>",
        "id": 440203303,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716420197
    },
    {
        "content": "<p>Batteries is not included by default, so you need to have a</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"o\">[[</span><span class=\"n\">require</span><span class=\"o\">]]</span>\n<span class=\"n\">name</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"s2\">\"batteries\"</span>\n<span class=\"n\">git</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"s2\">\"https://github.com/leanprover-community/batteries\"</span>\n<span class=\"n\">rev</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"s2\">\"main\"</span>\n</code></pre></div>\n<p>in your lakefile.toml (or equivalent in lakefile.lean).</p>",
        "id": 440203469,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716420253
    },
    {
        "content": "<p>I managed to get this to work with <code>4.8.0-rc2</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Batteries</span>\n\n<span class=\"c1\">-- A set of zero or more bytes upto a given size.</span>\n<span class=\"kn\">structure</span><span class=\"w\"> </span><span class=\"n\">FinVec</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">T</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"n\">T</span>\n<span class=\"w\">  </span><span class=\"n\">isLt</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"bp\">&lt;=</span><span class=\"w\"> </span><span class=\"n\">n</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">slice32</span><span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">FinVec</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:=</span><span class=\"mi\">32</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\"> </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">take</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"c1\">-- Prove bytes has at most 32 elements.</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"bp\">.</span><span class=\"n\">length_take_le</span>\n<span class=\"w\">  </span><span class=\"c1\">-- Construct FinVec</span>\n<span class=\"w\">  </span><span class=\"o\">{</span><span class=\"n\">data</span><span class=\"o\">:=</span><span class=\"n\">bytes</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">isLt</span><span class=\"o\">:=</span><span class=\"n\">q</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 440204311,
        "sender_full_name": "David Pearce",
        "timestamp": 1716420623
    },
    {
        "content": "<p>I thought <code>import Std</code> was a thing?  It definitely worked for me at some point.</p>",
        "id": 440204342,
        "sender_full_name": "David Pearce",
        "timestamp": 1716420640
    },
    {
        "content": "<p><code>Std</code> was renamed to <code>Batteries</code>. Sorry for the confusion!</p>",
        "id": 440204473,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716420705
    },
    {
        "content": "<p>So did you still need to <code>require</code> it when it was <code>Std</code> ?</p>",
        "id": 440205584,
        "sender_full_name": "David Pearce",
        "timestamp": 1716421279
    },
    {
        "content": "<p>Yeah, so the release notes for <code>4.7.0</code> say this:</p>\n<blockquote>\n<p>Lean 4.7.0 has been released! While this release includes the usual collection of quality-of-life improvements and bug fixes, the most noticable change is that a large part of <a href=\"https://github.com/leanprover/std4\"><code>Std</code>, the external standard library,</a> is included with Lean.</p>\n</blockquote>",
        "id": 440205900,
        "sender_full_name": "David Pearce",
        "timestamp": 1716421458
    },
    {
        "content": "<p>Yes, it's true that many lemmas don't require any imports any more, but this was not a wholesale ingestion of Std. (\"large part\", not \"all\")</p>",
        "id": 440211367,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716424640
    },
    {
        "content": "<p>So how are you supposed to import stuff that is now included automatically with Lean?  Or is it just automatically available?</p>",
        "id": 440211753,
        "sender_full_name": "David Pearce",
        "timestamp": 1716424906
    },
    {
        "content": "<p>It is just automatic.</p>",
        "id": 440211768,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716424917
    }
]