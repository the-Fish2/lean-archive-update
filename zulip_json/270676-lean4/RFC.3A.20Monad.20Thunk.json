[
    {
        "content": "<p>As discussed in <a href=\"#narrow/stream/270676-lean4/topic/Why.20isn't.20Thunk.20a.20Monad.3F\">the original thread</a>, writing a <code>Monad Thunk</code> (and <code>LawfulMonad Thunk</code>) instance is trivial.</p>",
        "id": 431763727,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1712491202
    },
    {
        "content": "<p>My understanding is that there is a monad-related simplification for <code>Thunk</code>s that we want in there, and that would require having the <code>Monad Thunk</code> instance in core. According to <span class=\"user-mention\" data-user-id=\"119741\">@François G. Dorais</span>:</p>\n<blockquote>\n<p>The issue is that <code>Thunk</code> already has special compiler support to ensure that thunks are evaluated at most once. That support does not currently include the simplification of <code>pure x &gt;&gt;= f</code> to <code>f x</code>.</p>\n</blockquote>",
        "id": 431763753,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1712491206
    },
    {
        "content": "<p>I'd be interested in comments and updates on what can be done to add it in core, and I can probably take care of it if it doesn't require super deep technical hacking</p>",
        "id": 431764029,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1712491299
    },
    {
        "content": "<p>If it is about:</p>\n<blockquote>\n<p>I'm not clear on what you mean by \"compiler support\". I can open a similar PR to yours on core easily, but if I have to fiddle with internals for \"compiler support\" that's another story, would probably need some mentoring at least</p>\n</blockquote>\n<p>Then I can sadly only give you our standard answer when it comes to things that touch the compiler right now: The FRO is not putting in ressources into the compiler right now, we are planning on changing that in FRO year 2 but until then matters concerning the compiler are on hold. (unless there is a critical issue of course).</p>\n<p>If we provide the <code>Monad</code> and <code>LawfulMonad</code> instances the code that is generated will most likely not be optimal due to the missign compiler support so using the <code>Monad</code> instance would be somewhat of a foot gun.</p>",
        "id": 431765182,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1712491998
    },
    {
        "content": "<p>I think these instances would be fine in mathlib, perhaps with a warning in a docstring</p>",
        "id": 431767768,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712493352
    },
    {
        "content": "<p>How easily will people notice that kind of docstring? Would those affected by the issue ever actually see the warning pop up?</p>\n<p>Docstrings are great, but perhaps not for this particular case.</p>",
        "id": 431775979,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1712499605
    },
    {
        "content": "<p>Perhaps then they should be <code>abbrev</code>s, with a comment saying \"you can make this an <code>instance</code>, but watch out for X\"</p>",
        "id": 431824710,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712531821
    },
    {
        "content": "<p>Regardless of what we do regarding the <code>Monad Thunk</code> instance, maybe we should document this bit in the <code>Thunk</code> doc itself. People (like me) may write the instance themselves and use it without knowing about the <code>pure</code>/<code>bind</code> issue. Maybe we could even link this thread?</p>",
        "id": 431887772,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1712563883
    }
]