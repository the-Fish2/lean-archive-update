[
    {
        "content": "<p>I recently needed to iterate over an array, saving the indices of elements that satisfy some property. I didn't find a convenient syntax for this, however! There's <code>Array.mapIdxM</code>, but that doesn't play nicely with <code>do</code>-notation. I can use a range, but that's fairly verbose:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">findFives'</span> <span class=\"o\">(</span><span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">arr.size</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">fives</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"n\">for</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">arr.size</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n    <span class=\"k\">have</span> <span class=\"n\">ok</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">arr.size</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h2</span>\n      <span class=\"n\">assumption</span>\n    <span class=\"k\">if</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"k\">then</span> <span class=\"n\">fives</span> <span class=\"o\">:=</span> <span class=\"n\">fives.push</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">ok</span><span class=\"o\">⟩</span>\n  <span class=\"n\">fives</span>\n</code></pre></div>\n<p>I think I found a nice solution, but I'd like to hear if anyone has a better one. I created something to iterate over all elements of some <code>Fin</code> type:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">FinsFrom</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">start</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">ok</span> <span class=\"o\">:</span> <span class=\"n\">start</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fins</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">FinsFrom</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">FinsFrom.forM</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">ff</span> <span class=\"o\">:</span> <span class=\"n\">FinsFrom</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">action</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ff.start</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">action</span> <span class=\"o\">⟨</span><span class=\"n\">ff.start</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">omega</span><span class=\"o\">⟩</span>\n    <span class=\"n\">forM</span> <span class=\"o\">⟨</span><span class=\"n\">ff.start</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">omega</span><span class=\"o\">⟩</span> <span class=\"n\">action</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"n\">ff</span> <span class=\"n\">action</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">ff.start</span>\n<span class=\"n\">decreasing_by</span> <span class=\"n\">simp_wf</span><span class=\"bp\">;</span> <span class=\"n\">omega</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ForM</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">FinsFrom</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">forM</span> <span class=\"o\">:=</span> <span class=\"n\">FinsFrom.forM</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ForIn</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">FinsFrom</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">forIn</span> <span class=\"o\">:=</span> <span class=\"n\">ForM.forIn</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">findFives</span> <span class=\"o\">(</span><span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">arr.size</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">fives</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">fins</span> <span class=\"n\">arr.size</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"k\">then</span> <span class=\"n\">fives</span> <span class=\"o\">:=</span> <span class=\"n\">fives.push</span> <span class=\"n\">i</span>\n  <span class=\"n\">fives</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">findFives</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"bp\">#</span><span class=\"o\">[⟨</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">⟩]</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>It can be thought of as a specialization of <code>Range</code>, basically,  that's more convenient with array APIs.</p>\n<p>What do you think?</p>",
        "id": 421224993,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1707823861
    },
    {
        "content": "<p>a simpler version of your first code block is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">findFives'</span> <span class=\"o\">(</span><span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">arr.size</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">fives</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"n\">for</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">arr.size</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"n\">h.2</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"k\">then</span> <span class=\"n\">fives</span> <span class=\"o\">:=</span> <span class=\"n\">fives.push</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h.2</span><span class=\"o\">⟩</span>\n  <span class=\"n\">fives</span>\n</code></pre></div>",
        "id": 421232038,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707826718
    },
    {
        "content": "<p>That's right - though actually writing that code is also a fair bit more difficult than the second one, which Just Worked^{tm}</p>",
        "id": 421233200,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1707827155
    },
    {
        "content": "<p>Here's another nice addition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Array.indices</span> <span class=\"o\">(</span><span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">FinsFrom</span> <span class=\"n\">arr.size</span> <span class=\"o\">:=</span> <span class=\"n\">fins</span> <span class=\"n\">arr.size</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">findFives</span> <span class=\"o\">(</span><span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">arr.size</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">fives</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">arr.indices</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"k\">then</span> <span class=\"n\">fives</span> <span class=\"o\">:=</span> <span class=\"n\">fives.push</span> <span class=\"n\">i</span>\n  <span class=\"n\">fives</span>\n</code></pre></div>",
        "id": 421233619,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1707827304
    },
    {
        "content": "<p>I think the name <code>FinsFrom</code> is fairly bad, though</p>",
        "id": 421233641,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1707827316
    },
    {
        "content": "<p>IndicesOf?</p>",
        "id": 421234181,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1707827507
    },
    {
        "content": "<p>In the latest version of lean (since <a href=\"https://github.com/leanprover/lean4/pull/3132\">https://github.com/leanprover/lean4/pull/3132</a>), writing <code>arr[i]</code> instead of <code>arr[i]'h.2</code> should work.</p>\n<p>I have been using the <code>for h : i in [:arr.size] do</code> … <code>arr[i]</code> idiom quite a bit.</p>",
        "id": 421237660,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1707828725
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"354934\">David Thrane Christiansen</span> <a href=\"#narrow/stream/270676-lean4/topic/Iterating.20over.20array.20indices/near/421224993\">said</a>:</p>\n<blockquote>\n<p>I'd like to hear if anyone has a better one. </p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> has a better one indeed!</p>",
        "id": 421240865,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1707829892
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"354934\">David Thrane Christiansen</span> has marked this topic as resolved.</p>",
        "id": 421240893,
        "sender_full_name": "Notification Bot",
        "timestamp": 1707829902
    }
]