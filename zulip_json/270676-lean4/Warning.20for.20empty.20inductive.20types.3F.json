[
    {
        "content": "<p>Should there be a warning (but not an error!) when a user defines an empty inductive type?</p>\n<p>Empty inductive types happen when all constructors have the inductively defined type as an argument. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">NotMuch</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">ctor</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">NotMuch</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">NotMuch</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>While <code>False</code> and <code>Empty</code> are deliberately empty and useful, types like <code>NotMuch</code> are generally useless and probably not what the user intended.</p>\n<p>My motivation for this is indirect. I have a project that transforms inductive types into related inductive types and proves some stuff about this transform. I would like to dismiss empty inductive types like <code>NotMuch</code> with an error since they don't work for the construction. This sounds a bit wrong since there are no prior warnings that this is just a \"bad\" inductive type.</p>\n<p>Anyway, I'm okay with just sending an error in my use case, but I think an early warning about empty inductive types could be useful for users to avoid some paper cuts.</p>",
        "id": 433484330,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1713261352
    },
    {
        "content": "<p>I think you're going to have a hard time checking whether an inductive type is empty in general:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">AmIEmpty</span><span class=\"bp\">?</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">RiemannHypothesisIsTrue</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Or are you only interested in an incomplete procedure which checks certain known scenarios?</p>",
        "id": 433488840,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1713262884
    },
    {
        "content": "<p>In Mathlib3 there was a <code>has_nonempty_instance</code> linter: every inductive either had a <code>Nonempty</code> instance recorded or a <code>nolint</code> on the inductive.</p>",
        "id": 433489452,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1713263131
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/65a1391a0106c9204fe45bc73a039f056558cb83/src/tactic/lint/default.lean#L38\">https://github.com/leanprover-community/mathlib/blob/65a1391a0106c9204fe45bc73a039f056558cb83/src/tactic/lint/default.lean#L38</a></p>",
        "id": 433489544,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1713263161
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"372804\">@Marcus Rossel</span> You got the wrong idea, it's not about the parameters, only the constructors!</p>\n<p>This is totally fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">MaybeMore</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">MaybeMore</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">ctor</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">MaybeMore</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">MaybeMore</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>The issue is when <em>all</em> constructors depend on the inductive type being defined.</p>",
        "id": 433490982,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1713263618
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119741\">François G. Dorais</span> <a href=\"#narrow/stream/270676-lean4/topic/Warning.20for.20empty.20inductive.20types.3F/near/433490982\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"372804\">Marcus Rossel</span> You got the wrong idea, it's not about the parameters, only the constructors!</p>\n<p>This is totally fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">MaybeMore</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">MaybeMore</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">ctor</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">MaybeMore</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">MaybeMore</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>The issue is when <em>all</em> constructors depend on the inductive type being defined.</p>\n</blockquote>\n<p>But aren't the parameters part of the constructors? What I was trying to say is that you can have <em>structurally innocent looking</em> constructors which will never be applicable because they have parameters whose types may or may not be empty.<br>\nThus, \"when <em>all</em> constructors depend on the inductive type being defined\" you have a sufficient condition for emptiness of the inductive type, but not a necessary one.</p>\n<p>That's why I was wondering if you're only interested in an incomplete decision procedure (warning procedure) for the emptiness of an inductive type, because a complete one won't be possible.</p>",
        "id": 433492295,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1713264117
    },
    {
        "content": "<p>This is a syntactic check not a semantic one. I think you're taking the title of the thread a bit too literally.</p>",
        "id": 433496013,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1713265502
    }
]