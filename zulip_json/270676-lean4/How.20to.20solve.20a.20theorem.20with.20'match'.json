[
    {
        "content": "<p>I'm trying to prove that this relation is a congruence relation, but I got stuck on this part with the match. How can I proceed?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">iso</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α'</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β'</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Sum</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Sum</span> <span class=\"n\">α'</span> <span class=\"n\">β'</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">respects_sum</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span><span class=\"n\">α</span> <span class=\"n\">α'</span> <span class=\"n\">β</span> <span class=\"n\">β'</span><span class=\"o\">,</span> <span class=\"n\">iso</span> <span class=\"n\">α</span> <span class=\"n\">α'</span> <span class=\"bp\">∧</span> <span class=\"n\">iso</span> <span class=\"n\">β</span> <span class=\"n\">β'</span> <span class=\"bp\">→</span> <span class=\"n\">iso</span> <span class=\"o\">(</span><span class=\"n\">Sum</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Sum</span> <span class=\"n\">α'</span> <span class=\"n\">β'</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">sum</span><span class=\"o\">:</span>\n  <span class=\"n\">respects_sum</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">α</span> <span class=\"n\">α'</span> <span class=\"n\">β</span> <span class=\"n\">β'</span> <span class=\"n\">h</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">h.1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n  <span class=\"n\">intro</span> <span class=\"n\">fa</span> <span class=\"n\">h'</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h'.elim</span>\n  <span class=\"n\">intro</span> <span class=\"n\">ga</span> <span class=\"n\">hfga</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">h.2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n  <span class=\"n\">intro</span> <span class=\"n\">fb</span> <span class=\"n\">h''</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h''.elim</span>\n  <span class=\"n\">intro</span> <span class=\"n\">gb</span> <span class=\"n\">hfgb</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Exists.intro</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">fa</span> <span class=\"n\">fb</span><span class=\"o\">)</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Exists.intro</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">ga</span> <span class=\"n\">gb</span><span class=\"o\">)</span>\n  <span class=\"n\">apply</span> <span class=\"n\">And.intro</span>\n  <span class=\"n\">intro</span> <span class=\"n\">ab'</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Function.comp</span><span class=\"o\">,</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n  <span class=\"n\">cases</span> <span class=\"n\">ab'</span>\n  <span class=\"bp\">·</span> <span class=\"n\">case</span> <span class=\"n\">Sum.inl</span> <span class=\"n\">a'</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">·</span> <span class=\"n\">case</span> <span class=\"n\">Sum.inr</span> <span class=\"n\">b'</span> <span class=\"bp\">=&gt;</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">Tactic state</span>\n<span class=\"cm\">3 goals</span>\n<span class=\"cm\">case left.inl</span>\n<span class=\"cm\">α α' β β' : Type</span>\n<span class=\"cm\">h : iso α α' ∧ iso β β'</span>\n<span class=\"cm\">fa : α → α'</span>\n<span class=\"cm\">h' : ∃ g, (∀ (b : α'), (fa ∘ g) b = b) ∧ ∀ (a : α), (g ∘ fa) a = a</span>\n<span class=\"cm\">ga : α' → α</span>\n<span class=\"cm\">hfga : (∀ (b : α'), (fa ∘ ga) b = b) ∧ ∀ (a : α), (ga ∘ fa) a = a</span>\n<span class=\"cm\">fb : β → β'</span>\n<span class=\"cm\">h'' : ∃ g, (∀ (b : β'), (fb ∘ g) b = b) ∧ ∀ (a : β), (g ∘ fb) a = a</span>\n<span class=\"cm\">gb : β' → β</span>\n<span class=\"cm\">hfgb : (∀ (b : β'), (fb ∘ gb) b = b) ∧ ∀ (a : β), (gb ∘ fb) a = a</span>\n<span class=\"cm\">val✝ : α'</span>\n<span class=\"cm\">⊢ (match fa, fb,</span>\n<span class=\"cm\">    match ga, gb, Sum.inl val✝ with</span>\n<span class=\"cm\">    | f, x, Sum.inl a =&gt; Sum.inl (f a)</span>\n<span class=\"cm\">    | x, g, Sum.inr b =&gt; Sum.inr (g b) with</span>\n<span class=\"cm\">  | f, x, Sum.inl a =&gt; Sum.inl (f a)</span>\n<span class=\"cm\">  | x, g, Sum.inr b =&gt; Sum.inr (g b)) =</span>\n<span class=\"cm\">  Sum.inl val✝</span>\n<span class=\"cm\">case left.inr</span>\n<span class=\"cm\">α α' β β' : Type</span>\n<span class=\"cm\">h : iso α α' ∧ iso β β'</span>\n<span class=\"cm\">fa : α → α'</span>\n<span class=\"cm\">h' : ∃ g, (∀ (b : α'), (fa ∘ g) b = b) ∧ ∀ (a : α), (g ∘ fa) a = a</span>\n<span class=\"cm\">ga : α' → α</span>\n<span class=\"cm\">hfga : (∀ (b : α'), (fa ∘ ga) b = b) ∧ ∀ (a : α), (ga ∘ fa) a = a</span>\n<span class=\"cm\">fb : β → β'</span>\n<span class=\"cm\">h'' : ∃ g, (∀ (b : β'), (fb ∘ g) b = b) ∧ ∀ (a : β), (g ∘ fb) a = a</span>\n<span class=\"cm\">gb : β' → β</span>\n<span class=\"cm\">hfgb : (∀ (b : β'), (fb ∘ gb) b = b) ∧ ∀ (a : β), (gb ∘ fb) a = a</span>\n<span class=\"cm\">val✝ : β'</span>\n<span class=\"cm\">⊢ (match fa, fb,</span>\n<span class=\"cm\">    match ga, gb, Sum.inr val✝ with</span>\n<span class=\"cm\">    | f, x, Sum.inl a =&gt; Sum.inl (f a)</span>\n<span class=\"cm\">    | x, g, Sum.inr b =&gt; Sum.inr (g b) with</span>\n<span class=\"cm\">  | f, x, Sum.inl a =&gt; Sum.inl (f a)</span>\n<span class=\"cm\">  | x, g, Sum.inr b =&gt; Sum.inr (g b)) =</span>\n<span class=\"cm\">  Sum.inr val✝</span>\n<span class=\"cm\">case right</span>\n<span class=\"cm\">α α' β β' : Type</span>\n<span class=\"cm\">h : iso α α' ∧ iso β β'</span>\n<span class=\"cm\">fa : α → α'</span>\n<span class=\"cm\">h' : ∃ g, (∀ (b : α'), (fa ∘ g) b = b) ∧ ∀ (a : α), (g ∘ fa) a = a</span>\n<span class=\"cm\">ga : α' → α</span>\n<span class=\"cm\">hfga : (∀ (b : α'), (fa ∘ ga) b = b) ∧ ∀ (a : α), (ga ∘ fa) a = a</span>\n<span class=\"cm\">fb : β → β'</span>\n<span class=\"cm\">h'' : ∃ g, (∀ (b : β'), (fb ∘ g) b = b) ∧ ∀ (a : β), (g ∘ fb) a = a</span>\n<span class=\"cm\">gb : β' → β</span>\n<span class=\"cm\">hfgb : (∀ (b : β'), (fb ∘ gb) b = b) ∧ ∀ (a : β), (gb ∘ fb) a = a</span>\n<span class=\"cm\">⊢ ∀ (a : α ⊕ β), (F ga gb ∘ F fa fb) a = a</span>\n<span class=\"cm\">Expected type</span>\n<span class=\"cm\">α α' β β' : Type</span>\n<span class=\"cm\">h : iso α α' ∧ iso β β'</span>\n<span class=\"cm\">fa : α → α'</span>\n<span class=\"cm\">h' : ∃ g, (∀ (b : α'), (fa ∘ g) b = b) ∧ ∀ (a : α), (g ∘ fa) a = a</span>\n<span class=\"cm\">ga : α' → α</span>\n<span class=\"cm\">hfga : (∀ (b : α'), (fa ∘ ga) b = b) ∧ ∀ (a : α), (ga ∘ fa) a = a</span>\n<span class=\"cm\">fb : β → β'</span>\n<span class=\"cm\">h'' : ∃ g, (∀ (b : β'), (fb ∘ g) b = b) ∧ ∀ (a : β), (g ∘ fb) a = a</span>\n<span class=\"cm\">gb : β' → β</span>\n<span class=\"cm\">hfgb : (∀ (b : β'), (fb ∘ gb) b = b) ∧ ∀ (a : β), (gb ∘ fb) a = a</span>\n<span class=\"cm\">ab' : α' ⊕ β'</span>\n<span class=\"cm\">⊢ α' ⊕ β'</span>\n<span class=\"cm\">Messages (1)</span>\n<span class=\"cm\">Help.lean:13:0</span>\n<span class=\"cm\">unsolved goals</span>\n<span class=\"cm\">case left.inr</span>\n<span class=\"cm\">α α' β β' : Type</span>\n<span class=\"cm\">h : iso α α' ∧ iso β β'</span>\n<span class=\"cm\">fa : α → α'</span>\n<span class=\"cm\">h' : ∃ g, (∀ (b : α'), (fa ∘ g) b = b) ∧ ∀ (a : α), (g ∘ fa) a = a</span>\n<span class=\"cm\">ga : α' → α</span>\n<span class=\"cm\">hfga : (∀ (b : α'), (fa ∘ ga) b = b) ∧ ∀ (a : α), (ga ∘ fa) a = a</span>\n<span class=\"cm\">fb : β → β'</span>\n<span class=\"cm\">h'' : ∃ g, (∀ (b : β'), (fb ∘ g) b = b) ∧ ∀ (a : β), (g ∘ fb) a = a</span>\n<span class=\"cm\">gb : β' → β</span>\n<span class=\"cm\">hfgb : (∀ (b : β'), (fb ∘ gb) b = b) ∧ ∀ (a : β), (gb ∘ fb) a = a</span>\n<span class=\"cm\">val✝ : β'</span>\n<span class=\"cm\">⊢ (match fa, fb,</span>\n<span class=\"cm\">    match ga, gb, Sum.inr val✝ with</span>\n<span class=\"cm\">    | f, x, Sum.inl a =&gt; Sum.inl (f a)</span>\n<span class=\"cm\">    | x, g, Sum.inr b =&gt; Sum.inr (g b) with</span>\n<span class=\"cm\">  | f, x, Sum.inl a =&gt; Sum.inl (f a)</span>\n<span class=\"cm\">  | x, g, Sum.inr b =&gt; Sum.inr (g b)) =</span>\n<span class=\"cm\">  Sum.inr val✝</span>\n\n\n<span class=\"cm\">case right</span>\n<span class=\"cm\">α α' β β' : Type</span>\n<span class=\"cm\">h : iso α α' ∧ iso β β'</span>\n<span class=\"cm\">fa : α → α'</span>\n<span class=\"cm\">h' : ∃ g, (∀ (b : α'), (fa ∘ g) b = b) ∧ ∀ (a : α), (g ∘ fa) a = a</span>\n<span class=\"cm\">ga : α' → α</span>\n<span class=\"cm\">hfga : (∀ (b : α'), (fa ∘ ga) b = b) ∧ ∀ (a : α), (ga ∘ fa) a = a</span>\n<span class=\"cm\">fb : β → β'</span>\n<span class=\"cm\">h'' : ∃ g, (∀ (b : β'), (fb ∘ g) b = b) ∧ ∀ (a : β), (g ∘ fb) a = a</span>\n<span class=\"cm\">gb : β' → β</span>\n<span class=\"cm\">hfgb : (∀ (b : β'), (fb ∘ gb) b = b) ∧ ∀ (a : β), (gb ∘ fb) a = a</span>\n<span class=\"cm\">⊢ ∀ (a : α ⊕ β), (F ga gb ∘ F fa fb) a = a</span>\n<span class=\"cm\">All Messages (2)</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 431325947,
        "sender_full_name": "Hannah Santos",
        "timestamp": 1712240799
    },
    {
        "content": "<p><code>dsimp</code> might get rid of the match, if you case split enough ahead of time (at least for the goal with the match in the comments you mentioned, it looks like it has already been split up enough)<br>\n... here's a much shorter solution (behind a spoiler, in case you're doing this as an exercise).</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">iso</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α'</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β'</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Sum</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Sum</span> <span class=\"n\">α'</span> <span class=\"n\">β'</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">respects_sum</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span><span class=\"n\">α</span> <span class=\"n\">α'</span> <span class=\"n\">β</span> <span class=\"n\">β'</span><span class=\"o\">,</span> <span class=\"n\">iso</span> <span class=\"n\">α</span> <span class=\"n\">α'</span> <span class=\"bp\">∧</span> <span class=\"n\">iso</span> <span class=\"n\">β</span> <span class=\"n\">β'</span> <span class=\"bp\">→</span> <span class=\"n\">iso</span> <span class=\"o\">(</span><span class=\"n\">Sum</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Sum</span> <span class=\"n\">α'</span> <span class=\"n\">β'</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">sum</span> <span class=\"o\">:</span> <span class=\"n\">respects_sum</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">α</span> <span class=\"n\">α'</span> <span class=\"n\">β</span> <span class=\"n\">β'</span> <span class=\"o\">⟨⟨</span><span class=\"n\">f</span><span class=\"o\">,</span><span class=\"n\">g</span><span class=\"o\">,</span><span class=\"n\">hf1</span><span class=\"o\">,</span><span class=\"n\">hf2</span><span class=\"o\">⟩,⟨</span><span class=\"n\">f'</span><span class=\"o\">,</span><span class=\"n\">g'</span><span class=\"o\">,</span><span class=\"n\">hg1</span><span class=\"o\">,</span><span class=\"n\">hg2</span><span class=\"o\">⟩⟩</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">F</span> <span class=\"n\">f</span> <span class=\"n\">f'</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">g</span> <span class=\"n\">g'</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">|</span><span class=\"n\">a</span><span class=\"o\">)</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">hf1</span> <span class=\"n\">a</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">hg1</span> <span class=\"n\">a</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">|</span><span class=\"n\">a</span><span class=\"o\">)</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">hf2</span> <span class=\"n\">a</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">hg2</span> <span class=\"n\">a</span>\n</code></pre></div>\n</div></div>",
        "id": 431334983,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1712243048
    },
    {
        "content": "<p>Wow, so many things I hadn't seen before. <span aria-label=\"open mouth\" class=\"emoji emoji-1f62e\" role=\"img\" title=\"open mouth\">:open_mouth:</span></p>",
        "id": 431344303,
        "sender_full_name": "Hannah Santos",
        "timestamp": 1712245511
    },
    {
        "content": "<p>It's kind of an exercise, but I can write the proof on paper, I'm just trying to translate it to lean, so it's a bit of a syntax problem.</p>",
        "id": 431344568,
        "sender_full_name": "Hannah Santos",
        "timestamp": 1712245572
    },
    {
        "content": "<p>Anyway, thank you, that helps, I'll study these tactics a bit to understand them.</p>",
        "id": 431344812,
        "sender_full_name": "Hannah Santos",
        "timestamp": 1712245642
    },
    {
        "content": "<p>No problem. By the way, it may be easier to phrase <code>iso</code> rather as </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">iso</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 431345020,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1712245691
    },
    {
        "content": "<p>Adam's proof can be shortened using <code>&lt;;&gt;</code> (though it's not <em>clearer</em> using it!)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">sum</span> <span class=\"o\">:</span> <span class=\"n\">respects_sum</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">α</span> <span class=\"n\">α'</span> <span class=\"n\">β</span> <span class=\"n\">β'</span> <span class=\"o\">⟨⟨</span><span class=\"n\">f</span><span class=\"o\">,</span><span class=\"n\">g</span><span class=\"o\">,</span><span class=\"n\">hf1</span><span class=\"o\">,</span><span class=\"n\">hf2</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">f'</span><span class=\"o\">,</span><span class=\"n\">g'</span><span class=\"o\">,</span><span class=\"n\">hg1</span><span class=\"o\">,</span><span class=\"n\">hg2</span><span class=\"o\">⟩⟩</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Function.comp</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">F</span> <span class=\"n\">f</span> <span class=\"n\">f'</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">g</span> <span class=\"n\">g'</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n    <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">|</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span><span class=\"n\">F</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 431345109,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1712245717
    },
    {
        "content": "<p>Here's handling the point you got to in your original code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">respects_sum</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span><span class=\"n\">α</span> <span class=\"n\">α'</span> <span class=\"n\">β</span> <span class=\"n\">β'</span><span class=\"o\">,</span> <span class=\"n\">iso</span> <span class=\"n\">α</span> <span class=\"n\">α'</span> <span class=\"bp\">∧</span> <span class=\"n\">iso</span> <span class=\"n\">β</span> <span class=\"n\">β'</span> <span class=\"bp\">→</span> <span class=\"n\">iso</span> <span class=\"o\">(</span><span class=\"n\">Sum</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Sum</span> <span class=\"n\">α'</span> <span class=\"n\">β'</span><span class=\"o\">)</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">sum</span><span class=\"o\">:</span>\n  <span class=\"n\">respects_sum</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">α</span> <span class=\"n\">α'</span> <span class=\"n\">β</span> <span class=\"n\">β'</span> <span class=\"n\">h</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">h.1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n  <span class=\"n\">intro</span> <span class=\"n\">fa</span> <span class=\"n\">h'</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h'.elim</span>\n  <span class=\"n\">intro</span> <span class=\"n\">ga</span> <span class=\"n\">hfga</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">h.2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n  <span class=\"n\">intro</span> <span class=\"n\">fb</span> <span class=\"n\">h''</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h''.elim</span>\n  <span class=\"n\">intro</span> <span class=\"n\">gb</span> <span class=\"n\">hfgb</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Exists.intro</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">fa</span> <span class=\"n\">fb</span><span class=\"o\">)</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Exists.intro</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">ga</span> <span class=\"n\">gb</span><span class=\"o\">)</span>\n  <span class=\"n\">apply</span> <span class=\"n\">And.intro</span>\n  <span class=\"n\">intro</span> <span class=\"n\">ab'</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Function.comp</span><span class=\"o\">]</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">F</span> <span class=\"c1\">-- had to switch to this in a newer version of Lean</span>\n  <span class=\"n\">cases</span> <span class=\"n\">ab'</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"n\">a'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">hfga.1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"n\">b'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">hfgb.1</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 431346032,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1712245972
    },
    {
        "content": "<p>There was something a bit wrong with the <code>cases</code> syntax, with putting each <code>case</code> in a focus dot, but I switched it over to using the <code>cases ... with | ...</code> syntax.</p>",
        "id": 431346158,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1712246015
    },
    {
        "content": "<p>I put the dot from something else I read, I'll switch it up right away, thank you.</p>",
        "id": 431348910,
        "sender_full_name": "Hannah Santos",
        "timestamp": 1712246556
    },
    {
        "content": "<p>Thank you for your pointers, guys. I've mixed and matched, basically, what you said and I wrote something that I understood.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">iso</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α'</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β'</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Sum</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Sum</span> <span class=\"n\">α'</span> <span class=\"n\">β'</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">respects_sum</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span><span class=\"n\">α</span> <span class=\"n\">α'</span> <span class=\"n\">β</span> <span class=\"n\">β'</span><span class=\"o\">,</span> <span class=\"n\">iso</span> <span class=\"n\">α</span> <span class=\"n\">α'</span> <span class=\"bp\">∧</span> <span class=\"n\">iso</span> <span class=\"n\">β</span> <span class=\"n\">β'</span> <span class=\"bp\">→</span> <span class=\"n\">iso</span> <span class=\"o\">(</span><span class=\"n\">Sum</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Sum</span> <span class=\"n\">α'</span> <span class=\"n\">β'</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">comp_def</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">a</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Function.comp</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">sum</span> <span class=\"o\">:</span>\n  <span class=\"n\">respects_sum</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">α</span> <span class=\"n\">α'</span> <span class=\"n\">β</span> <span class=\"n\">β'</span> <span class=\"o\">⟨⟨</span><span class=\"n\">fa</span><span class=\"o\">,</span> <span class=\"n\">fa'</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩,⟨</span><span class=\"n\">gb</span><span class=\"o\">,</span> <span class=\"n\">gb'</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">⟩⟩</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">F</span> <span class=\"n\">fa</span> <span class=\"n\">gb</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">fa'</span> <span class=\"n\">gb'</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"n\">intro</span> <span class=\"n\">ab'</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">F</span>\n  <span class=\"n\">cases</span> <span class=\"n\">ab'</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"n\">a'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">comp_def</span> <span class=\"n\">fa'</span> <span class=\"n\">fa</span><span class=\"o\">,</span> <span class=\"n\">ha.1</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"n\">b'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">comp_def</span> <span class=\"n\">gb'</span> <span class=\"n\">gb</span><span class=\"o\">,</span> <span class=\"n\">hb.1</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">ab</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">F</span>\n  <span class=\"n\">cases</span> <span class=\"n\">ab</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">comp_def</span> <span class=\"n\">fa</span> <span class=\"n\">fa'</span><span class=\"o\">,</span> <span class=\"n\">ha.2</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">comp_def</span> <span class=\"n\">gb</span> <span class=\"n\">gb'</span><span class=\"o\">,</span> <span class=\"n\">hb.2</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 431361673,
        "sender_full_name": "Hannah Santos",
        "timestamp": 1712249932
    }
]