[
    {
        "content": "<p>How can I tell the native function signature of a function that has generic/type arguments? e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">export</span> <span class=\"n\">generic_function</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">execCore</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">context</span><span class=\"o\">:</span> <span class=\"n\">Lean.Core.Context</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">state</span><span class=\"o\">:</span> <span class=\"n\">Lean.Core.State</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">coreM</span><span class=\"o\">:</span> <span class=\"n\">Lean.CoreM</span> <span class=\"n\">α</span><span class=\"o\">):</span>\n    <span class=\"n\">IO</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">Lean.Core.State</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">coreM.toIO</span> <span class=\"n\">context</span> <span class=\"n\">state</span>\n</code></pre></div>\n<p>In the <a href=\"https://lean-lang.org/lean4/doc/dev/ffi.html\">FFI documentation</a>, it says that a type like the <code>α</code> above is either erased or represented as a dummy. How can I determine which case happened for this symbol?</p>",
        "id": 425782251,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1710084750
    },
    {
        "content": "<p>An even simplier example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">ExceptT</span> <span class=\"n\">String</span> <span class=\"n\">IO</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">export</span> <span class=\"n\">exec_monad</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">exec_monad</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">):</span> <span class=\"n\">IO</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">m</span>\n  <span class=\"n\">IO.println</span> <span class=\"s2\">\"exec_monad\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"bp\">←</span> <span class=\"n\">m</span>\n  <span class=\"k\">match</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">v</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">IO.userError</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">e</span>\n<span class=\"kd\">@[</span><span class=\"n\">export</span> <span class=\"n\">example_monad</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">example_monad</span><span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">IO.println</span> <span class=\"s2\">\"example_monad\"</span>\n  <span class=\"n\">return</span> <span class=\"mi\">5</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">export</span> <span class=\"n\">another_example_monad</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">another_example_monad</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">):</span> <span class=\"n\">M</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span>\n  <span class=\"n\">return</span> <span class=\"n\">s.length</span>\n</code></pre></div>\n<p>and calling it with</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"n\">lean_obj_res</span><span class=\"w\"> </span><span class=\"nf\">exec_monad</span><span class=\"p\">(</span><span class=\"n\">lean_obj_arg</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lean_obj_arg</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"p\">);</span>\n<span class=\"n\">lean_obj_res</span><span class=\"w\"> </span><span class=\"n\">example_monad</span><span class=\"p\">;</span>\n\n<span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"p\">...</span>\n<span class=\"w\">  </span><span class=\"n\">lean_obj_res</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">exec_monad</span><span class=\"p\">(</span><span class=\"n\">example_monad</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lean_io_mk_world</span><span class=\"p\">());</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>leads to segmentation fault</p>",
        "id": 425783891,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1710086208
    },
    {
        "content": "<p>If you put your file in <code>ffi.lean</code> and call <code>lean ffi.lean -c ffi.c</code> the output C file will contain</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">LEAN_EXPORT</span> <span class=\"n\">lean_object</span><span class=\"bp\">*</span> <span class=\"n\">exec_monad</span><span class=\"o\">(</span><span class=\"n\">lean_object</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">lean_object</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">lean_object</span><span class=\"bp\">*</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n<span class=\"bp\">...</span>\n<span class=\"n\">LEAN_EXPORT</span> <span class=\"n\">lean_object</span><span class=\"bp\">*</span> <span class=\"n\">exec_monad</span><span class=\"o\">(</span><span class=\"n\">lean_object</span><span class=\"bp\">*</span> <span class=\"n\">x_1</span><span class=\"o\">,</span> <span class=\"n\">lean_object</span><span class=\"bp\">*</span> <span class=\"n\">x_2</span><span class=\"o\">,</span> <span class=\"n\">lean_object</span><span class=\"bp\">*</span> <span class=\"n\">x_3</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n<span class=\"n\">_start</span><span class=\"o\">:</span>\n<span class=\"o\">{</span>\n<span class=\"bp\">...</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>You can see that <code>exec_monad</code> has three instead of two arguments and they correspond to <code>{α}</code>, <code>(m: M α)</code> and <code>IO.RealWorld</code>. I think you should call your function as <code>exec_monad(nullptr, example_monad, lean_io_mk_world())</code>. Type arguments are still present in the function signature but are ignored(as far I'm aware) so you can just pass <code>nullptr</code>.</p>",
        "id": 425788751,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1710090795
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"346070\">Tomas Skrivan</span> <a href=\"#narrow/stream/270676-lean4/topic/Generic.20argument.20in.20FFI/near/425788751\">said</a>:</p>\n<blockquote>\n<p>If you put your file in <code>ffi.lean</code> and call <code>lean ffi.lean -c ffi.c</code> the output C file will contain</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">LEAN_EXPORT</span> <span class=\"n\">lean_object</span><span class=\"bp\">*</span> <span class=\"n\">exec_monad</span><span class=\"o\">(</span><span class=\"n\">lean_object</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">lean_object</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">lean_object</span><span class=\"bp\">*</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n<span class=\"bp\">...</span>\n<span class=\"n\">LEAN_EXPORT</span> <span class=\"n\">lean_object</span><span class=\"bp\">*</span> <span class=\"n\">exec_monad</span><span class=\"o\">(</span><span class=\"n\">lean_object</span><span class=\"bp\">*</span> <span class=\"n\">x_1</span><span class=\"o\">,</span> <span class=\"n\">lean_object</span><span class=\"bp\">*</span> <span class=\"n\">x_2</span><span class=\"o\">,</span> <span class=\"n\">lean_object</span><span class=\"bp\">*</span> <span class=\"n\">x_3</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n<span class=\"n\">_start</span><span class=\"o\">:</span>\n<span class=\"o\">{</span>\n<span class=\"bp\">...</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>You can see that <code>exec_monad</code> has three instead of two arguments and they correspond to <code>{α}</code>, <code>(m: M α)</code> and <code>IO.RealWorld</code>. I think you should call your function as <code>exec_monad(nullptr, example_monad, lean_io_mk_world())</code>. Type arguments are still present in the function signature but are ignored(as far I'm aware) so you can just pass <code>nullptr</code>.</p>\n</blockquote>\n<p>If I write it as</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"n\">lean_obj_res</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">exec_monad</span><span class=\"p\">(</span><span class=\"nb\">NULL</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">example_monad</span><span class=\"p\">(</span><span class=\"n\">lean_io_mk_world</span><span class=\"p\">()),</span><span class=\"w\"> </span><span class=\"n\">lean_io_mk_world</span><span class=\"p\">());</span>\n</code></pre></div>\n<p>it segfaults in <code>lean_apply_1</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"mi\">0</span>  <span class=\"mi\">0x00007fffea23d378</span> <span class=\"k\">in</span> <span class=\"bp\">??</span> <span class=\"o\">()</span>\n<span class=\"bp\">#</span><span class=\"mi\">1</span>  <span class=\"mi\">0x00007ffff79084a6</span> <span class=\"k\">in</span> <span class=\"n\">lean_apply_1</span> <span class=\"o\">()</span> <span class=\"k\">from</span> <span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/</span><span class=\"n\">store</span><span class=\"bp\">/</span><span class=\"mi\">092</span><span class=\"n\">a3afjqb2kg62iqy7wzs8mi6g10bv9</span><span class=\"bp\">-</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">libleanshared.so</span>\n<span class=\"bp\">#</span><span class=\"mi\">2</span>  <span class=\"mi\">0x00007ffff7fbe444</span> <span class=\"k\">in</span> <span class=\"n\">exec_monad</span> <span class=\"o\">()</span> <span class=\"k\">from</span> <span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/</span><span class=\"n\">store</span><span class=\"bp\">/</span><span class=\"mi\">62</span><span class=\"n\">bnbaf22qykwa5vxnjj4zvyhhl72kir</span><span class=\"bp\">-</span><span class=\"n\">libCallee</span><span class=\"bp\">-</span><span class=\"n\">dynlib</span><span class=\"bp\">/</span><span class=\"n\">libCallee.so</span>\n</code></pre></div>\n<p>I suspect this has something to do with the extra argument generated on <code>example_monad</code></p>",
        "id": 425799639,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1710099723
    },
    {
        "content": "<p>my hypothesis is that the <code>execCore</code> function is not needed at all, and if there is a function of type <code>Lean.CoreM _</code>, its signature will be</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"n\">lean_obj_res</span><span class=\"w\"> </span><span class=\"nf\">some_moand</span><span class=\"p\">(...,</span><span class=\"w\"> </span><span class=\"n\">lean_obj_arg</span><span class=\"w\"> </span><span class=\"n\">context</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lean_obj_arg</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lean_obj_arg</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"p\">);</span>\n</code></pre></div>",
        "id": 425801425,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1710101071
    },
    {
        "content": "<p>However, if I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">export</span> <span class=\"n\">init_search</span><span class=\"kd\">]</span>\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">initSearch</span><span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">Lean.enableInitializersExecution</span>\n  <span class=\"n\">Lean.initSearchPath</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Lean.findSysroot</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">export</span> <span class=\"n\">create_core_context</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">createCoreContext</span><span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Lean.Core.Context</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">return</span> <span class=\"o\">{</span>\n    <span class=\"n\">currNamespace</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.Name.str</span> <span class=\"bp\">.</span><span class=\"n\">anonymous</span> <span class=\"s2\">\"Test\"</span>\n    <span class=\"n\">openDecls</span> <span class=\"o\">:=</span> <span class=\"o\">[],</span>     <span class=\"c1\">-- No 'open' directives needed</span>\n    <span class=\"n\">fileName</span> <span class=\"o\">:=</span> <span class=\"s2\">\"&lt;Filename&gt;\"</span><span class=\"o\">,</span>\n    <span class=\"n\">fileMap</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">source</span> <span class=\"o\">:=</span> <span class=\"s2\">\"\"</span><span class=\"o\">,</span> <span class=\"n\">positions</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">],</span> <span class=\"n\">lines</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"n\">options</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.Options.empty</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">export</span> <span class=\"n\">create_core_state</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">createCoreState</span><span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Lean.Core.State</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.importModules</span>\n    <span class=\"o\">(</span><span class=\"n\">imports</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"Init\"</span><span class=\"bp\">.</span><span class=\"n\">toName</span><span class=\"o\">])</span>\n    <span class=\"o\">(</span><span class=\"n\">opts</span> <span class=\"o\">:=</span> <span class=\"o\">{})</span>\n    <span class=\"o\">(</span><span class=\"n\">trustLevel</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"n\">return</span> <span class=\"o\">{</span> <span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"n\">env</span> <span class=\"o\">}</span>\n<span class=\"kd\">@[</span><span class=\"n\">export</span> <span class=\"n\">exec_core</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">execCore</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">context</span><span class=\"o\">:</span> <span class=\"n\">Lean.Core.Context</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">state</span><span class=\"o\">:</span> <span class=\"n\">Lean.Core.State</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">coreM</span><span class=\"o\">:</span> <span class=\"n\">Lean.CoreM</span> <span class=\"n\">α</span><span class=\"o\">):</span>\n    <span class=\"n\">IO</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">Lean.Core.State</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">coreM.toIO</span> <span class=\"n\">context</span> <span class=\"n\">state</span>\n\n\n<span class=\"kd\">@[</span><span class=\"n\">export</span> <span class=\"n\">core_catalog</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">core_catalog</span><span class=\"o\">:</span> <span class=\"n\">Lean.CoreM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.MonadEnv.getEnv</span>\n  <span class=\"k\">let</span> <span class=\"n\">names</span> <span class=\"o\">:=</span> <span class=\"n\">env.constants.fold</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:=</span> <span class=\"s2\">\"\"</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">acc</span> <span class=\"n\">name</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">acc</span> <span class=\"bp\">++</span> <span class=\"n\">name.toString</span><span class=\"o\">)</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">names</span>\n</code></pre></div>\n<p>and I call the functions</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"n\">lean_obj_res</span><span class=\"w\"> </span><span class=\"nf\">unbox_io</span><span class=\"p\">(</span><span class=\"n\">lean_obj_arg</span><span class=\"w\"> </span><span class=\"n\">obj</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">b_lean_obj_res</span><span class=\"w\"> </span><span class=\"n\">ok</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_inc</span><span class=\"p\">(</span><span class=\"n\">lean_io_result_get_value</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">));</span>\n<span class=\"w\">  </span><span class=\"n\">lean_dec</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">ok</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"p\">...</span>\n<span class=\"w\">    </span><span class=\"n\">lean_obj_res</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">unbox_io</span><span class=\"p\">(</span><span class=\"n\">init_search</span><span class=\"p\">(</span><span class=\"n\">lean_io_mk_world</span><span class=\"p\">()));</span>\n<span class=\"w\">    </span><span class=\"n\">lean_dec</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">lean_obj_res</span><span class=\"w\"> </span><span class=\"n\">context</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">unbox_io</span><span class=\"p\">(</span><span class=\"n\">create_core_context</span><span class=\"p\">(</span><span class=\"n\">lean_io_mk_world</span><span class=\"p\">());</span>\n<span class=\"w\">    </span><span class=\"n\">lean_obj_res</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">unbox_io</span><span class=\"p\">(</span><span class=\"n\">create_core_state</span><span class=\"p\">(</span><span class=\"n\">lean_io_mk_world</span><span class=\"p\">());</span>\n<span class=\"w\">    </span><span class=\"n\">lean_obj_res</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">core_catalog</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lean_io_mk_world</span><span class=\"p\">());</span>\n<span class=\"w\">    </span><span class=\"n\">lean_dec</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">);</span>\n</code></pre></div>",
        "id": 425802493,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1710101909
    },
    {
        "content": "<p>this again results in a segfault in the fold function inside <code>core_catalog</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Program</span> <span class=\"n\">received</span> <span class=\"n\">signal</span> <span class=\"n\">SIGSEGV</span><span class=\"o\">,</span> <span class=\"n\">Segmentation</span> <span class=\"n\">fault.</span>\n<span class=\"mi\">0x00007ffff7fbd8b1</span> <span class=\"k\">in</span> <span class=\"n\">l_Lean_SMap_fold___at_core__catalog___spec__1___rarg</span> <span class=\"o\">()</span> <span class=\"k\">from</span> <span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/</span><span class=\"n\">store</span><span class=\"bp\">/</span><span class=\"n\">ngnmajqx2pnshf8dx8rvqv65xx5ry4wd</span><span class=\"bp\">-</span><span class=\"n\">libCallee</span><span class=\"bp\">-</span><span class=\"n\">dynlib</span><span class=\"bp\">/</span><span class=\"n\">libCallee.so</span>\n<span class=\"o\">(</span><span class=\"n\">gdb</span><span class=\"o\">)</span> <span class=\"n\">bt</span>\n<span class=\"bp\">#</span><span class=\"mi\">0</span>  <span class=\"mi\">0x00007ffff7fbd8b1</span> <span class=\"k\">in</span> <span class=\"n\">l_Lean_SMap_fold___at_core__catalog___spec__1___rarg</span> <span class=\"o\">()</span> <span class=\"k\">from</span> <span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/</span><span class=\"n\">store</span><span class=\"bp\">/</span><span class=\"n\">ngnmajqx2pnshf8dx8rvqv65xx5ry4wd</span><span class=\"bp\">-</span><span class=\"n\">libCallee</span><span class=\"bp\">-</span><span class=\"n\">dynlib</span><span class=\"bp\">/</span><span class=\"n\">libCallee.so</span>\n<span class=\"bp\">#</span><span class=\"mi\">1</span>  <span class=\"mi\">0x00007ffff7fbdcb4</span> <span class=\"k\">in</span> <span class=\"n\">core_catalog</span> <span class=\"o\">()</span> <span class=\"k\">from</span> <span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/</span><span class=\"n\">store</span><span class=\"bp\">/</span><span class=\"n\">ngnmajqx2pnshf8dx8rvqv65xx5ry4wd</span><span class=\"bp\">-</span><span class=\"n\">libCallee</span><span class=\"bp\">-</span><span class=\"n\">dynlib</span><span class=\"bp\">/</span><span class=\"n\">libCallee.so</span>\n</code></pre></div>",
        "id": 425802651,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1710102034
    },
    {
        "content": "<p>You really should avoid using complex types like elaboration monads in FFI because it is way too easy to get wrong. There's a reason Lean itself avoids it.</p>",
        "id": 425805365,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1710104426
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Monads.20in.20FFI/near/425805365\">said</a>:</p>\n<blockquote>\n<p>You really should avoid using complex types like elaboration monads in FFI because it is way too easy to get wrong. There's a reason Lean itself avoids it.</p>\n</blockquote>\n<p>is it ok to just use <code>CoreM</code>? I want to invoke tactics via the FFI</p>",
        "id": 425805796,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1710104799
    },
    {
        "content": "<p>I found that the solution is to turn the <code>state</code> argument into a reference via <code>lean_st_mk_ref</code>.</p>",
        "id": 425810344,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1710108876
    }
]