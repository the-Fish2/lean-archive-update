[
    {
        "content": "<p>Seems to be another case of <a href=\"https://github.com/leanprover/lean4/issues/2104\">https://github.com/leanprover/lean4/issues/2104</a>; I've already added my MWE to the thread.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Common</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Iso</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">inv_fun</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">left_inv</span> <span class=\"o\">:</span> <span class=\"n\">inv_fun</span> <span class=\"bp\">∘</span> <span class=\"n\">to_fun</span> <span class=\"bp\">=</span> <span class=\"n\">id</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">right_inv</span> <span class=\"o\">:</span> <span class=\"n\">to_fun</span> <span class=\"bp\">∘</span> <span class=\"n\">inv_fun</span> <span class=\"bp\">=</span> <span class=\"n\">id</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">HasInverse</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">id</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Invertible</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">//</span> <span class=\"n\">HasInverse</span> <span class=\"n\">f</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Invertible.ofIso</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">iso</span><span class=\"o\">:</span> <span class=\"n\">Iso</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">):</span> <span class=\"n\">Invertible</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">iso.to_fun</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">iso.inv_fun</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">iso.left_inv</span><span class=\"o\">,</span> <span class=\"n\">iso.right_inv</span><span class=\"o\">⟩⟩⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"o\">(</span><span class=\"n\">Iso</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Invertible</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Invertible.ofIso</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>gives a weird <code>... 'noncomputable' because it depends on 'Invertible.ofIso'</code> error. Replacing the reference with its definition </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"o\">(</span><span class=\"n\">Iso</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Invertible</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"o\">⟨</span><span class=\"n\">i.to_fun</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">i.inv_fun</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">i.left_inv</span><span class=\"o\">,</span> <span class=\"n\">i.right_inv</span><span class=\"o\">⟩⟩⟩⟩</span>\n</code></pre></div>\n<p>works as a workaround.</p>",
        "id": 421794017,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1708062068
    },
    {
        "content": "<p><code>Invertible.ofIso</code> should be a def, not a theorem.</p>",
        "id": 421795831,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1708063019
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/Surprise.20noncomputable.20building.20an.20.E2.88.83.20from.20a.20Subtype/near/421795831\">said</a>:</p>\n<blockquote>\n<p><code>Invertible.ofIso</code> should be a def, not a theorem.</p>\n</blockquote>\n<p>... ah. I see. In retrospect it should have been obvious that, since theorems don't require a <code>noncomputable</code> modifier, they would probably be assumed <code>noncomputable</code>. Oops.</p>",
        "id": 421797338,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1708063972
    }
]