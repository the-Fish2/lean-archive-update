[
    {
        "content": "<p>I am experimenting with cancellation in a context where I have a task <code>t' := t.map f</code>, and do not have access to <code>t</code>. I would like to cancel <code>t</code> somehow, but there doesn't seem to be a way to do that. For instance</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- ok: false</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">IO.asTask</span> <span class=\"k\">do</span>\n    <span class=\"n\">IO.sleep</span> <span class=\"mi\">500</span>\n    <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">IO.checkCanceled</span>\n    <span class=\"n\">return</span> <span class=\"n\">a</span>\n  <span class=\"k\">let</span> <span class=\"n\">t'</span> <span class=\"o\">:=</span> <span class=\"n\">t.map</span> <span class=\"n\">id</span>\n  <span class=\"n\">IO.cancel</span> <span class=\"n\">t'</span>\n  <span class=\"n\">IO.print</span> <span class=\"n\">t'.get</span>\n\n  <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>whereas with <code>IO.cancel t</code> I get <code>ok: true</code>. But again, the assumption is that I don't have access to <code>t</code>. Is there any other way to achieve this?</p>",
        "id": 422926849,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1708647085
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span>, I've previously had to work around this, by explicitly passing cancellation hooks. See <a href=\"https://github.com/leanprover-community/mathlib4/pull/8435\">#8435</a>.</p>",
        "id": 422944613,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1708659202
    },
    {
        "content": "<p>I would think that adding and then cancelling a dependent task should basically be a no-op, it sounds very strange to me that it should affect the original task. There could be many more dependent tasks, already added or to be added.</p>",
        "id": 422967436,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1708675730
    },
    {
        "content": "<p>In your actual application, do you really keep around a reference to <code>t'</code>? One could argue that if both <code>t</code> and <code>t'</code> are dropped, then the task should be auto-cancelled.</p>",
        "id": 422967698,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1708675866
    },
    {
        "content": "<blockquote>\n<p>One could argue that if both <code>t</code> and <code>t'</code> are dropped, then the task should be auto-cancelled.</p>\n</blockquote>\n<p>Yes, that would work too :) I don't think this is the behaviour atm?</p>\n<blockquote>\n<p>In your actual application, do you really keep around a reference to <code>t'</code>?</p>\n</blockquote>\n<p>Here is the real application: I get an arbitrary RPC request handler <a href=\"https://github.com/leanprover-community/ProofWidgets4/pull/46/files#diff-990cd7b9f6482600dd5fe0d3c4d314317126f38eee1188d22f9586d50aebd616R32\">here</a>. The request handler uses a computation that may call <code>IO.checkCanceled</code> (so I want to be able to cancel it), and turns it into a <code>RequestTask</code> <em>somehow</em>, most likely using <code>RequestM.asTask</code>. Oh but look, <code>asTask</code> <a href=\"https://github.com/leanprover/lean4/pull/3470/files#diff-29cf5ceda266a296c1597d128b324ee984044d32781acd0b5f4a7d9eb3f0e62cL\">calls <code>map</code></a> so it can't be cancelled. Fin.</p>",
        "id": 423067055,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1708710962
    },
    {
        "content": "<blockquote>\n<p>There could be many more dependent tasks, already added or to be added.</p>\n</blockquote>\n<p>Yeah, I think this would only make sense if one is sure that there is one reference to <code>t</code>, that coming from <code>t'</code>.</p>",
        "id": 423067845,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1708711204
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"128280\">Wojciech Nawrocki</span> <a href=\"#narrow/stream/270676-lean4/topic/Should.20cancelling.20a.20purely.20mapped.20task.20cancel.20the.20original.3F/near/423067055\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>One could argue that if both <code>t</code> and <code>t'</code> are dropped, then the task should be auto-cancelled.</p>\n</blockquote>\n<p>Yes, that would work too :) I don't think this is the behaviour atm?</p>\n</blockquote>\n<p>It isn't, but I wished for it at <a href=\"https://github.com/leanprover/lean4/blob/88306673bb8da7bf7deee4796a125df0c74ecb78/src/Lean/Language/Lean.lean#L136-L138\">https://github.com/leanprover/lean4/blob/88306673bb8da7bf7deee4796a125df0c74ecb78/src/Lean/Language/Lean.lean#L136-L138</a></p>",
        "id": 423175802,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1708785667
    }
]