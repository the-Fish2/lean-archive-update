[
    {
        "content": "<p>Ran into <code>(kernel) function expected</code> trying to do some affine lambda calculus normalization. The logic of the substitution is clearly incorrect (doesn't recurse in the non-beta-reduction case), but I don't think that's relevant.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Affine</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">vs</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Affine</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Affine</span> <span class=\"n\">vs</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Affine</span> <span class=\"o\">(</span><span class=\"n\">vs</span> <span class=\"bp\">\\</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">})</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">e₁</span> <span class=\"o\">:</span> <span class=\"n\">Affine</span> <span class=\"n\">vs₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e₂</span> <span class=\"o\">:</span> <span class=\"n\">Affine</span> <span class=\"n\">vs₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">vs₁</span> <span class=\"bp\">∩</span> <span class=\"n\">vs₂</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Affine</span> <span class=\"o\">(</span><span class=\"n\">vs₁</span> <span class=\"bp\">∪</span> <span class=\"n\">vs₂</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Affine</span>\n\n<span class=\"sd\">/-- The free variables in an affine term. -/</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">free</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Affine</span> <span class=\"n\">vs</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">vs</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">subst</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Affine</span> <span class=\"n\">vs₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">vs₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e'</span> <span class=\"o\">:</span> <span class=\"n\">Affine</span> <span class=\"n\">vs₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Affine</span> <span class=\"o\">((</span><span class=\"n\">vs₁</span> <span class=\"bp\">\\</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">})</span> <span class=\"bp\">∪</span> <span class=\"n\">vs₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Affine</span>\n\n<span class=\"sd\">/-- error: (kernel) function expected _x_48 (_ : HEq e₁✝ e₁✝) -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">small_step</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Affine</span> <span class=\"n\">vs</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">vs'</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">vs'</span> <span class=\"bp\">⊆</span> <span class=\"n\">vs</span><span class=\"o\">)</span> <span class=\"bp\">×'</span> <span class=\"n\">Affine</span> <span class=\"n\">vs'</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">x</span> <span class=\"n\">e₁</span><span class=\"o\">)</span> <span class=\"n\">e₂</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">hx₁</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">e₁.free</span> <span class=\"k\">then</span>\n      <span class=\"o\">⟨</span><span class=\"n\">e₁.free</span> <span class=\"bp\">\\</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">∪</span> <span class=\"n\">e₂.free</span><span class=\"o\">,</span> <span class=\"n\">Finset.Subset.refl</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">e₁.subst</span> <span class=\"n\">x</span> <span class=\"n\">hx₁</span> <span class=\"n\">e₂</span><span class=\"o\">⟩</span>\n    <span class=\"k\">else</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">e₁.free</span> <span class=\"bp\">⊆</span> <span class=\"n\">e₁.free</span> <span class=\"bp\">\\</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">∪</span> <span class=\"n\">e₂.free</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">intro</span> <span class=\"n\">v</span> <span class=\"n\">hv</span>\n        <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">∉</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">Finset.not_mem_singleton.mpr</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">heq</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hx₁</span> <span class=\"o\">(</span><span class=\"n\">heq</span> <span class=\"bp\">▸</span> <span class=\"n\">hv</span><span class=\"o\">))</span>\n        <span class=\"n\">exact</span> <span class=\"n\">Finset.mem_union_left</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Finset.mem_sdiff.mpr</span> <span class=\"o\">⟨</span><span class=\"n\">hv</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">⟩)</span>\n\n      <span class=\"o\">⟨</span><span class=\"n\">e₁.free</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">e₁</span><span class=\"o\">⟩</span>\n\n  <span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">vs</span><span class=\"o\">,</span> <span class=\"n\">Finset.Subset.refl</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Affine</span>\n</code></pre></div>\n<p>It's not clear to me how to minimize this further. However, replacing that <code>.app (.abs x e₁) e₂ h</code> match arm with a <code>sorry</code> removes this error.</p>\n<p>I saw that there were other posts about this, and that it's likely a compiler bug, but I wanted to confirm here before opening any issues.</p>",
        "id": 421894649,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1708100814
    },
    {
        "content": "<p>Here's a bit smaller:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Affine</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">vs</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Affine</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Affine</span> <span class=\"n\">vs</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Affine</span> <span class=\"o\">(</span><span class=\"n\">vs</span> <span class=\"bp\">\\</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">})</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">e₁</span> <span class=\"o\">:</span> <span class=\"n\">Affine</span> <span class=\"n\">vs₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e₂</span> <span class=\"o\">:</span> <span class=\"n\">Affine</span> <span class=\"n\">vs₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">vs₁</span> <span class=\"bp\">∩</span> <span class=\"n\">vs₂</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Affine</span> <span class=\"o\">(</span><span class=\"n\">vs₁</span> <span class=\"bp\">∪</span> <span class=\"n\">vs₂</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Affine</span>\n\n<span class=\"sd\">/-- The free variables in an affine term. -/</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">free</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Affine</span> <span class=\"n\">vs</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">vs</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">subst</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Affine</span> <span class=\"n\">vs₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">vs₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e'</span> <span class=\"o\">:</span> <span class=\"n\">Affine</span> <span class=\"n\">vs₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Affine</span> <span class=\"o\">((</span><span class=\"n\">vs₁</span> <span class=\"bp\">\\</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">})</span> <span class=\"bp\">∪</span> <span class=\"n\">vs₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"sd\">/-- error: (kernel) function expected _x_42 (_ : HEq e₁✝ e₁✝) -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">small_step</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Affine</span> <span class=\"n\">vs</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">vs'</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">Affine</span> <span class=\"n\">vs'</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">x</span> <span class=\"n\">e₁</span><span class=\"o\">)</span> <span class=\"n\">e₂</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">hx₁</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">e₁.free</span> <span class=\"k\">then</span>\n      <span class=\"o\">⟨</span><span class=\"n\">e₁.free</span> <span class=\"bp\">\\</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">∪</span> <span class=\"n\">e₂.free</span><span class=\"o\">,</span> <span class=\"n\">e₁.subst</span> <span class=\"n\">x</span> <span class=\"n\">hx₁</span> <span class=\"n\">e₂</span><span class=\"o\">⟩</span>\n    <span class=\"k\">else</span>\n      <span class=\"o\">⟨</span><span class=\"n\">e₁.free</span><span class=\"o\">,</span> <span class=\"n\">e₁</span><span class=\"o\">⟩</span>\n\n  <span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">vs</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Affine</span>\n</code></pre></div>",
        "id": 421895354,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1708101030
    },
    {
        "content": "<p>This does not occur if I use a list instead of a Finset:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Affine</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">vs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Affine</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Affine</span> <span class=\"n\">vs</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Affine</span> <span class=\"o\">(</span><span class=\"n\">vs</span> <span class=\"bp\">\\</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">})</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">e₁</span> <span class=\"o\">:</span> <span class=\"n\">Affine</span> <span class=\"n\">vs₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e₂</span> <span class=\"o\">:</span> <span class=\"n\">Affine</span> <span class=\"n\">vs₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">vs₁</span> <span class=\"bp\">∩</span> <span class=\"n\">vs₂</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Affine</span> <span class=\"o\">(</span><span class=\"n\">vs₁</span> <span class=\"bp\">∪</span> <span class=\"n\">vs₂</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Affine</span>\n\n<span class=\"sd\">/-- The free variables in an affine term. -/</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">free</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Affine</span> <span class=\"n\">vs</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">vs</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">subst</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Affine</span> <span class=\"n\">vs₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">vs₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e'</span> <span class=\"o\">:</span> <span class=\"n\">Affine</span> <span class=\"n\">vs₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Affine</span> <span class=\"o\">((</span><span class=\"n\">vs₁</span> <span class=\"bp\">\\</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">})</span> <span class=\"bp\">∪</span> <span class=\"n\">vs₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> no error! -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">small_step</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Affine</span> <span class=\"n\">vs</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">vs'</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">Affine</span> <span class=\"n\">vs'</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">x</span> <span class=\"n\">e₁</span><span class=\"o\">)</span> <span class=\"n\">e₂</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">hx₁</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">e₁.free</span> <span class=\"k\">then</span>\n      <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">e₁.subst</span> <span class=\"n\">x</span> <span class=\"n\">hx₁</span> <span class=\"n\">e₂</span><span class=\"o\">⟩</span>\n    <span class=\"k\">else</span>\n      <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">e₁</span><span class=\"o\">⟩</span>\n\n  <span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Affine</span>\n</code></pre></div>",
        "id": 421898094,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1708101871
    },
    {
        "content": "<p>What are the proper steps to opening a bug, should I just file an issue in the <code>lean4</code> repo?</p>",
        "id": 422522387,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1708474009
    },
    {
        "content": "<p>yes</p>",
        "id": 422570917,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1708505753
    }
]