[
    {
        "content": "<p>The doc-string of <code>rwa</code> says</p>\n<p><code> `rwa` calls `rw`, then closes any remaining goals using `assumption`. </code></p>\n<p>To me, this suggests that <code>rwa</code> runs <code>assumption</code> on</p>\n<ul>\n<li>all goals after the <code>rw</code> is done (e.g. `rw; all_goals assumption);</li>\n<li>or on all the new goals created by <code>rw</code> (e.g. <code>rw &lt;;&gt; assumption</code>).</li>\n</ul>\n<p>However, what it really does is it uses <code>rw</code> and then calls <code>assumption</code>.</p>\n<p>Here are some somewhat strange consequences:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- closes too much</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- set-up two goals</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"c1\">-- the `rfl` in `rw` closes the first and the `a` closes the second</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[]</span>\n\n<span class=\"c1\">-- closes too little</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"c1\">-- the doc-string for `rwa` promises to close all remaining goals</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[]</span>\n  <span class=\"c1\">-- but `rwa` doesn't</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">unneeded_assumptions</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"c1\">-- closes too little</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- the doc-string for `rwa` promises to close all remaining goals</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">unneeded_assumptions</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- but `rwa` doesn't</span>\n  <span class=\"n\">assumption</span>\n</code></pre></div>\n<p>I suspect that there are some <code>focus</code>, <code>&lt;;&gt;</code>, possibly some mechanisms for ensuring that <code>assumption</code> is used at least once, and a rewording of the doc-string that should take place.</p>",
        "id": 434946131,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1713865719
    },
    {
        "content": "<p>Does anyone else agree?</p>",
        "id": 434946157,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1713865726
    },
    {
        "content": "<p>What did lean 3 do with multiple goals? I think the intention is that the <code>assumption</code> closes only the main goal</p>",
        "id": 434947097,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1713866055
    },
    {
        "content": "<p>Or that's my intuition, at least (though I also noticed the implementation is odd)</p>",
        "id": 434947149,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1713866076
    },
    {
        "content": "<p>Yes, I think that maybe the most likely implementation is <code>focus rw; assumption</code>.</p>",
        "id": 434947312,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1713866136
    },
    {
        "content": "<p>Though maybe also <code>focus rw; assumption; all_goals assumption</code> is a possibility (and closer to the doc-string).</p>",
        "id": 434947434,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1713866174
    },
    {
        "content": "<p>Sometimes I wish <code>rw</code> had a <code>(discharge:= _)</code> option to, e.g., feed all side goals to <code>positivity</code> or <code>omega</code>.</p>",
        "id": 435886503,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1714319784
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> there was a similar discussion <a href=\"#narrow/stream/287929-mathlib4/topic/.60on_sides.60.20tactic\">here</a>.</p>",
        "id": 435901549,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1714330810
    }
]