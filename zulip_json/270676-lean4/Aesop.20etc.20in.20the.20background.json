[
    {
        "content": "<p>Thanks to the <code>TryThis</code> code and some code from the <code>say</code> tactic, using the Task framework here is a tool for running a tactic automatically in the background. By default this is <code>aesop?</code> but anything else can be used. The idea is to prove with a slightly different syntax: using <code>by#</code> in place of <code>by</code> with processes running in the background trying to complete the proof.</p>\n<p>I am posting here for initial feedback but will PR to mathlib for detailed feedback soon.  <span class=\"user-mention\" data-user-id=\"303675\">@Anand Rao Tadipatri</span> is working on something related.</p>\n<h2>Easy proofs</h2>\n<p><a href=\"/user_uploads/3121/RASwyrhy2_BylwjJ5DUCopDF/async-1.gif\">async-1.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/RASwyrhy2_BylwjJ5DUCopDF/async-1.gif\" title=\"async-1.gif\"><img src=\"/user_uploads/3121/RASwyrhy2_BylwjJ5DUCopDF/async-1.gif\"></a></div><p>If a proof is reasonably simple <code>aesop</code> will complete it. The <code>by#</code> notation is a macro for the more flexible notation:<br>\n<a href=\"/user_uploads/3121/C7bkrYTdz5qN7vssA5qxxMnG/async-2.gif\">async-2.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/C7bkrYTdz5qN7vssA5qxxMnG/async-2.gif\" title=\"async-2.gif\"><img src=\"/user_uploads/3121/C7bkrYTdz5qN7vssA5qxxMnG/async-2.gif\"></a></div><h2>Proofs needing help</h2>\n<p>The following is introduced to make sure Aesop cannot solve automatically:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">opaque</span> <span class=\"n\">sillyN</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">silly</span> <span class=\"o\">:</span> <span class=\"n\">sillyN</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span>\n</code></pre></div>\n<p>In the next two illustrations once we have given enough hints, the proof is completed. Note that for even a complete proof we need a code-action to make <code>by#</code> into <code>by</code> to be valid Lean syntax.</p>\n<p><a href=\"/user_uploads/3121/ljmEC4oINP5a2urV2IaZtexE/async-3.gif\">async-3.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/ljmEC4oINP5a2urV2IaZtexE/async-3.gif\" title=\"async-3.gif\"><img src=\"/user_uploads/3121/ljmEC4oINP5a2urV2IaZtexE/async-3.gif\"></a></div><p><a href=\"/user_uploads/3121/T8k6GgGLXyM86IeMD7x0eCrP/async-4.gif\">async-4.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/T8k6GgGLXyM86IeMD7x0eCrP/async-4.gif\" title=\"async-4.gif\"><img src=\"/user_uploads/3121/T8k6GgGLXyM86IeMD7x0eCrP/async-4.gif\"></a></div><h2>Using other automation</h2>\n<p>In the next example we use <code>apply?</code> instead of <code>aesop?</code>. This is a little slower so does not finish within the builtin delay (50ms by default) but kicks in as we continue proving.</p>\n<p><a href=\"/user_uploads/3121/fh7oQ2aW3ZZji_OkxdKsCG3D/async-5.gif\">async-5.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/fh7oQ2aW3ZZji_OkxdKsCG3D/async-5.gif\" title=\"async-5.gif\"><img src=\"/user_uploads/3121/fh7oQ2aW3ZZji_OkxdKsCG3D/async-5.gif\"></a></div><h2>Using tactics without \"try this\"</h2>\n<p>Both <code>aesop?</code> and <code>apply?</code> have a \"Try this:\" message which is intercepted and used. If a tactic is not such a search, then it is tried and the proof is completed when it is enough to finish. This is illustrated by using <code>linarith</code>.</p>\n<p><a href=\"/user_uploads/3121/2JHPqldoSCfg6_oQ9xpPsIlB/async-6.gif\">async-6.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/2JHPqldoSCfg6_oQ9xpPsIlB/async-6.gif\" title=\"async-6.gif\"><img src=\"/user_uploads/3121/2JHPqldoSCfg6_oQ9xpPsIlB/async-6.gif\"></a></div><p>This also illustrates a limitation: we do not look through induction, cases, match etc. An easy workaround is to have a macro and manually enter this mode.</p>\n<h2>The source</h2>\n<p>The source is at <a href=\"https://github.com/siddhartha-gadgil/LeanAide/blob/main/LeanAide/Async.lean\">https://github.com/siddhartha-gadgil/LeanAide/blob/main/LeanAide/Async.lean</a></p>",
        "id": 378792005,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1690376427
    },
    {
        "content": "<p>The demos would be a lot easier to follow if you could switch off whatever is producing the grey text (assuming this is indeed completely unrelated to what you want to show us).</p>",
        "id": 378800599,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1690377907
    },
    {
        "content": "<p>Sure. That is Github copilot in the background (and is unrelated). I will redo with it off.</p>",
        "id": 378802020,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1690378158
    },
    {
        "content": "<p>I wondered what that was :)</p>",
        "id": 378803614,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690378412
    },
    {
        "content": "<p>This is what I guessed. Thanks!</p>",
        "id": 378805071,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1690378679
    },
    {
        "content": "<p>Here are the demos with copilot off to avoid the distracting grey stuff:</p>\n<ol>\n<li>\n<p>Easy proofs: short and full syntax<br>\n<a href=\"/user_uploads/3121/tDMA3WeNkr3TEh6Oaa4unIgW/async-1a.gif\">async-1a.gif</a><br>\n<a href=\"/user_uploads/3121/sB6RRRYirnB7WH1ftHJ5FgDI/async-2a.gif\">async-2a.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/tDMA3WeNkr3TEh6Oaa4unIgW/async-1a.gif\" title=\"async-1a.gif\"><img src=\"/user_uploads/3121/tDMA3WeNkr3TEh6Oaa4unIgW/async-1a.gif\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/sB6RRRYirnB7WH1ftHJ5FgDI/async-2a.gif\" title=\"async-2a.gif\"><img src=\"/user_uploads/3121/sB6RRRYirnB7WH1ftHJ5FgDI/async-2a.gif\"></a></div></li>\n<li>\n<p>Proofs that cannot be fully automatic: with rewriting to standard notation even when the user gives the full proof.<br>\n<a href=\"/user_uploads/3121/oHyI-Jh49PEfYMr9lHmArvlC/async-3a.gif\">async-3a.gif</a><br>\n<a href=\"/user_uploads/3121/TVkCq8uNOp1w3xnZP438R0JQ/async-4a.gif\">async-4a.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/oHyI-Jh49PEfYMr9lHmArvlC/async-3a.gif\" title=\"async-3a.gif\"><img src=\"/user_uploads/3121/oHyI-Jh49PEfYMr9lHmArvlC/async-3a.gif\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/TVkCq8uNOp1w3xnZP438R0JQ/async-4a.gif\" title=\"async-4a.gif\"><img src=\"/user_uploads/3121/TVkCq8uNOp1w3xnZP438R0JQ/async-4a.gif\"></a></div></li>\n<li>\n<p>Using apply: also illustrating continuing running in the background even after the waiting period.<br>\n<a href=\"/user_uploads/3121/C3m7Edzc04RhW_OyFs3na6Tb/async-5a.gif\">async-5a.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/C3m7Edzc04RhW_OyFs3na6Tb/async-5a.gif\" title=\"async-5a.gif\"><img src=\"/user_uploads/3121/C3m7Edzc04RhW_OyFs3na6Tb/async-5a.gif\"></a></div></li>\n<li>\n<p>Using <code>linarith</code> instead of a search tactic: still tried after each step.<br>\n<a href=\"/user_uploads/3121/grEc_9tdgUoUrHXDDTDgjqBp/async-6a.gif\">async-6a.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/grEc_9tdgUoUrHXDDTDgjqBp/async-6a.gif\" title=\"async-6a.gif\"><img src=\"/user_uploads/3121/grEc_9tdgUoUrHXDDTDgjqBp/async-6a.gif\"></a></div></li>\n</ol>",
        "id": 378824560,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1690381746
    },
    {
        "content": "<p>PRed as <a href=\"https://github.com/leanprover-community/mathlib4/pull/6176\">#6176</a></p>\n<p>One small piece of this is a \"sorry tactic detector\". Is there something builtin for this? I try to use a tactic to prove <code>False</code> and it is <code>sorry</code> if it succeeds.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">isSorry</span> <span class=\"o\">(</span><span class=\"n\">tacticCode</span><span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">tactic</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TermElabM</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">goal</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">False</span><span class=\"o\">)</span>\n  <span class=\"n\">try</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">goals</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">Elab.runTactic</span>  <span class=\"n\">goal.mvarId</span><span class=\"bp\">!</span> <span class=\"n\">tacticCode</span>\n    <span class=\"n\">return</span> <span class=\"n\">goals.isEmpty</span>\n  <span class=\"n\">catch</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">return</span> <span class=\"n\">false</span>\n</code></pre></div>",
        "id": 379341705,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1690509581
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> <br>\nI forgot that none of my examples illustrated the point that the main mode is tactics continuing to run in the background. If they finish successfully, the result is saved. A fresh elaboration with the same goal state and some stage triggers this.</p>\n<p>The following gif illustrates this (by making delay 0).<br>\n<a href=\"/user_uploads/3121/scUlvAeRNk-Mv2nYCT_86SPe/async-7.gif\">async-7.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/scUlvAeRNk-Mv2nYCT_86SPe/async-7.gif\" title=\"async-7.gif\"><img src=\"/user_uploads/3121/scUlvAeRNk-Mv2nYCT_86SPe/async-7.gif\"></a></div><ul>\n<li>When one runs <code>by#</code>, though the search is started there is no delay so it does not finish.</li>\n<li>When skip is run, the elaborator goes through the tactics again, and this time sees the completed proof and offers a code action (again there is no delay, but the proof was ready).</li>\n</ul>",
        "id": 385435155,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1692182710
    },
    {
        "content": "<p>The idea is that the user keeps trying to prove. If aesop (or chosen automation) could finish at some earlier stage, or essentially instantly after the current stage, a code action is offered to finish the proof.</p>",
        "id": 385435375,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1692182788
    },
    {
        "content": "<p>Thanks to <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> for directing me here from the <a href=\"#narrow/stream/113488-general/topic/.22Missing.20Tactics.22.20list/near/425424297\">other thread</a>.</p>\n<p>This tactic mode is very cool! I think my only complaint so far is that even when <code>by#</code> finds a \"Try This\", it still highlights the <code>by#</code> in red squiggly underline rather than blue squiggly underline:<br>\n<a href=\"/user_uploads/3121/ejXhGknWbq_LeaRJnHW2QqBX/Screenshot-2024-03-08-at-7.27.47AM.png\">Screenshot-2024-03-08-at-7.27.47AM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/ejXhGknWbq_LeaRJnHW2QqBX/Screenshot-2024-03-08-at-7.27.47AM.png\" title=\"Screenshot-2024-03-08-at-7.27.47AM.png\"><img src=\"/user_uploads/3121/ejXhGknWbq_LeaRJnHW2QqBX/Screenshot-2024-03-08-at-7.27.47AM.png\"></a></div>",
        "id": 425519007,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1709904617
    },
    {
        "content": "<p>Thanks a lot for the feedback <span class=\"user-mention\" data-user-id=\"282271\">@Bolton Bailey</span> and <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span>. I have now made a standalone repository <a href=\"https://github.com/siddhartha-gadgil/LeanAideTools\">LeanAideTools</a> with minimized dependencies (only Aesop) that can hopefully be used:</p>\n<ul>\n<li>In a user repository which may or may not depend on Mathlib.</li>\n<li>While working in a branch on Mathlib.</li>\n</ul>\n<p>I have incorporated the feedback that it seemed wrong to show an error when a proof was complete. So now a <code>sorry</code> is returned giving better behaviour I hope. </p>\n<p>Here are the details of the modified setup:</p>\n<h2>Running tactics automatically</h2>\n<p>While proving results in tactic mode in Lean, proofs can often be completed by tactics like <code>simp</code>, <code>exact?</code>, <code>aesop</code> etc., but it is a nuisance to try this at each step. We provide a tactic mode where a list of tactics is run automatically <strong>in the background</strong> after each step. </p>\n<p>If a proof can be completed, then:</p>\n<ul>\n<li>A hyperlink in the infoview and a code action is offered to replace the code by a valid proof.</li>\n<li>The <code>sorry</code> tactic is run to complete the proof, so the user sees a warning (this is to avoid showing an error, following a suggestion by Bolton Bailey).</li>\n</ul>\n<p>To work with this mode, follow the below installation instructions, including adding <code>import LeanAideTools</code> to your file. You can enter the auto-tactic mode by:</p>\n<ul>\n<li>Beginning a tactic block with <code>byy</code> instead of <code>by</code>.</li>\n<li>At any stage, starting a sequence of tactics with <code>doo</code>.</li>\n</ul>\n<p>The <code>doo</code> syntax is provided as, at present, the mode does not see within <code>case</code>, <code>match</code>, bullet points etc., so one has to use it to re-enter the auto-tactic mode in these cases.</p>\n<p>The tactics that run by default are <code>rfl</code>, <code>simp?</code>, <code>omega</code>, <code>aesop?</code>, <code>exact?</code>. More tactics can be added as long as they are in scope. For example, in a Mathlib dependent project (or a branch of Mathlib) one may<br>\nwant to add <code>linarith</code> and <code>ring</code>. One can add either a single tactic or multiple tactics as in the following.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">auto</span> <span class=\"n\">ring</span>\n<span class=\"bp\">#</span><span class=\"n\">autos</span> <span class=\"o\">[</span><span class=\"n\">ring</span><span class=\"o\">,</span> <span class=\"n\">linarith</span><span class=\"o\">]</span>\n</code></pre></div>\n<h2>Examples in action</h2>\n<p>Here are some examples illustrating the tactic mode.</p>\n<h3>Simple Example</h3>\n<p>In the following simple example, the result can be proved straight away. The syntax <code>byy</code> by itself is valid and tries to prove the goal.</p>\n<p><a href=\"/user_uploads/3121/0gGDDZHdodehCICDSF9CMi89/lat1.gif\">lat1.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/0gGDDZHdodehCICDSF9CMi89/lat1.gif\" title=\"lat1.gif\"><img src=\"/user_uploads/3121/0gGDDZHdodehCICDSF9CMi89/lat1.gif\"></a></div><h3>Checks after each tactic</h3>\n<p>In the following (rather contrived) example, the result cannot be proved automatically. However, once the tactic <code>rw [silly]</code> is entered the proof is completed and results are suggested.</p>\n<p><a href=\"/user_uploads/3121/eib7VGnDZpGMHwKQHGm2eo5X/lat2.gif\">lat2.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/eib7VGnDZpGMHwKQHGm2eo5X/lat2.gif\" title=\"lat2.gif\"><img src=\"/user_uploads/3121/eib7VGnDZpGMHwKQHGm2eo5X/lat2.gif\"></a></div><h3>Background Running</h3>\n<p>The following shows that the tactics are running in the background. After the tactics to run are spawned, there is a configurable delay, 50 milliseconds by default, before control is returned to the user. The tactics continue running in the background till they finish after this delay.</p>\n<p>Here the delay is set to <code>0</code>. Hence after <code>rw [silly]</code> the proof is not automatically completed. Every time the interpreter is triggered we check whether the proof was found by the background processes. In this case, hitting enter triggered the interpreter which found that the proof was found in the background.</p>\n<p><a href=\"/user_uploads/3121/zYPBsxwhGB-MJwVxplMvj7sG/lat3.gif\">lat3.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/zYPBsxwhGB-MJwVxplMvj7sG/lat3.gif\" title=\"lat3.gif\"><img src=\"/user_uploads/3121/zYPBsxwhGB-MJwVxplMvj7sG/lat3.gif\"></a></div><h3>Configuration: Adding tactics</h3>\n<p>The following illustrates adding tactics. Here <code>simp [silly]</code> is added. In the presence of this tactic the example can be proved straight away.</p>\n<p><a href=\"/user_uploads/3121/Yj6wmgSAoBJKmRYKuKfGIRsC/lat4.gif\">lat4.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Yj6wmgSAoBJKmRYKuKfGIRsC/lat4.gif\" title=\"lat4.gif\"><img src=\"/user_uploads/3121/Yj6wmgSAoBJKmRYKuKfGIRsC/lat4.gif\"></a></div><h2>Installation</h2>\n<p>Add the following or equivalent to your <code>lakefile.lean</code> to use the auto-tactic mode. The branch/tag <code>v4.7.0</code> works with the corresponding version of Lean's toolchain. Replace it with the toolchain you use in your project. I will try to have a branch/tag for each toolchain starting with <code>v4.7.0-rc2</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">require</span> <span class=\"n\">LeanAideTools</span> <span class=\"k\">from</span> <span class=\"n\">git</span>\n  <span class=\"s2\">\"https://github.com/siddhartha-gadgil/LeanAideTools.git\"</span> <span class=\"bp\">@</span> <span class=\"s2\">\"v4.7.0\"</span>\n</code></pre></div>\n<p>For use with a <code>Mathlib</code> branch, add the dependency in the lakefile while working on the branch and remove it before the PR is merged.</p>\n<p>To use the mode in a file, add <code>import LeanAideTools</code> along with your other imports.</p>\n<h2>Missing features?</h2>\n<p>There are two features that I hope to work on eventually:</p>\n<ul>\n<li>When a tactic like <code>exact?</code> finds a proof, the user gets a hyperlink and code-action to complete the proof with this tactic. But this tactic in turn gives a suggested proof with which it can be replaced. The two steps should ideally be replaced by just one.</li>\n<li>The tactic mode does not see within <code>case</code>, <code>match</code>, bullet points etc. This is a limitation of the current implementation. The <code>doo</code> syntax is provided to re-enter the auto-tactic mode in these cases, but ideally one should not have to do this.</li>\n</ul>\n<p>Any comments, suggestions, or bug reports are welcome. Also contributions are welcome.</p>",
        "id": 431454340,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1712298253
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"282271\">@Bolton Bailey</span> Sorry I did not notice the review for the Mathlib PR. In any case I have now implemented a different approach as I mentioned above. </p>\n<p>Do folks think it is worth porting this to the Mathlib PR, or would it make more sense to simply close the PR? If the mode turns out to be useful, a fresh PR can be made.</p>",
        "id": 431681779,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1712416853
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"266304\">Siddhartha Gadgil</span> <a href=\"#narrow/stream/270676-lean4/topic/Aesop.20etc.20in.20the.20background/near/431454340\">said</a>:</p>\n<blockquote>\n<ul>\n<li>While working in a branch on Mathlib.</li>\n</ul>\n</blockquote>\n<p>If this is a totally independent repo from mathlib, how can it be used from a branch of mathlib?</p>",
        "id": 431821318,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1712528480
    },
    {
        "content": "<p>you can change the mathlib commit hash in the lakefile</p>",
        "id": 431823028,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1712530183
    },
    {
        "content": "<p>I assumed one could just edit the lakefile of mathlib in a branch. After all mathlib has Aesop as a dependency.</p>",
        "id": 431828500,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1712535690
    },
    {
        "content": "<p>Before the merger, the dependency should be removed</p>",
        "id": 431828588,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1712535751
    },
    {
        "content": "<p>Right, ok, that makes sense. Sorry to pour cold water, but I will probably not be using for mathlib it if it's going to require editing and reverting the lakefile on any branch I want to use it for. In my mind the key upside of this approach is that it takes a single keystroke to activate. I still think it's very cool and I'll try to use it for independent projects to test it out.</p>",
        "id": 431828895,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1712536042
    },
    {
        "content": "<p>Thanks.<br>\nI assumed the single keystroke only applies if it is merged in mathlib and was pessimistic about this happening. Let me also experiment for some weeks and then make a fresh PR</p>",
        "id": 431829150,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1712536268
    },
    {
        "content": "<p>Yes, very sorry your PR hasn't gotten more traction, if it were up to me your PR would have been merged months ago, I don't actually think something as trivial as code review should block cool things like this from getting used faster but my understanding is that community reviews are supposed to help the process along.</p>",
        "id": 431829289,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1712536422
    }
]