[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span>, how would you feel about setting <code>simp_config := {zetaDelta := true}</code> by default in aesop?</p>\n<p>I've done so in <code>aesop_cat</code> on <code>nightly-testing</code> in Mathlib, but there are plain <code>aesop</code> calls that fail now because it won't unfold <code>let</code>.</p>",
        "id": 423324092,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1708923863
    },
    {
        "content": "<p>I'm not enthusiastic about diverging from the default config, for two reasons:</p>\n<ol>\n<li>It's surprising if the <code>simp</code> in Aesop is a slightly different <code>simp</code> than the usual one.</li>\n<li><code>aesop?</code> has to output <code>simp_all { zetaDelta := true }</code> instead of <code>simp_all</code>.</li>\n</ol>\n<p>I see three ways to address these issues:</p>\n<ol>\n<li>Enable <code>zetaDelta</code> for <code>simp_all</code> in core. I feel like this might make sense since <code>simp_all</code> is supposed to use all hypotheses. <code>simp_all</code> already enables <code>contextual</code>, so there's precedent.</li>\n<li>Optimise <code>aesop?</code> output to replace <code>simp_all { zetaDelta := true }</code> with <code>simp_all</code> where possible. I'm working on this capability anyway (slowly and intermittently).</li>\n<li>Include expanded <code>let</code>s in the theorem list generated by <code>simp?</code>. Maybe this already happens; if so, issue 2 is already solved.</li>\n</ol>",
        "id": 423357812,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1708940430
    },
    {
        "content": "<p>Solution 1 sounds the most sensible to me</p>",
        "id": 423358515,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1708940680
    },
    {
        "content": "<p>Okay, 1. seems pretty difficult to squeeze in between now and the release. Today is feels rather unlikely an on time release is possible, because Mathlib is still quite broken, and I would prefer to avoid solutions that require further round-trips with Lean updates.</p>",
        "id": 423373345,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1708945784
    },
    {
        "content": "<p>I will get the ball rolling, but if I think in the meantime we are going to have to replace <code>aesop</code> in Mathlib with <code>aesop_foo</code>, that changes the <code>simp_config</code>.</p>",
        "id": 423373433,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1708945813
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/Aesop.20dev.20updates/near/423373433\">said</a>:</p>\n<blockquote>\n<p>I will get the ball rolling, but if I think in the meantime we are going to have to replace <code>aesop</code> in Mathlib with <code>aesop_foo</code>, that changes the <code>simp_config</code>.</p>\n</blockquote>\n<p>If that's the alternative, then I'd rather enable <code>zetaDelta</code> in Aesop as a stopgap measure, without adjusting the output of <code>aesop?</code>. This means <code>aesop?</code> will be borked whenever a proof relies on <code>zetaDelta</code>, but that seems like the lesser evil.</p>",
        "id": 423481374,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1708980729
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> how about the following. It will require more engineering but seems to give a nice result.</p>\n<p>When <code>aesop</code> calls <code>simp</code>, it collects <code>let</code> bindings and passes them to <code>simp</code> (i.e. \"explicitly\" without <code>zetaDelta</code>). It then uses the simp.trace information in proof reconstruction, to only include any let bindings that were actually simplified.</p>",
        "id": 423523907,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709003009
    },
    {
        "content": "<p>In the meantime, however, I'd be happy with having <code>aesop</code> with <code>zetaDelta</code> enabled, but without adjusting <code>aesop?</code>.</p>",
        "id": 423523952,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1709003043
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/Aesop.20dev.20updates/near/423523907\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span> how about the following. It will require more engineering but seems to give a nice result.</p>\n<p>When <code>aesop</code> calls <code>simp</code>, it collects <code>let</code> bindings and passes them to <code>simp</code> (i.e. \"explicitly\" without <code>zetaDelta</code>). It then uses the simp.trace information in proof reconstruction, to only include any let bindings that were actually simplified.</p>\n</blockquote>\n<p>Okay, I'll take a shot at implementing this.</p>",
        "id": 423589754,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1709034672
    },
    {
        "content": "<p>Implemented <a href=\"https://github.com/leanprover-community/aesop/tree/zetaDelta\">here</a>. <code>aesop?</code> is still borked due to <a href=\"https://github.com/leanprover/lean4/pull/3519\">lean4#3519</a>. I also opened an RFC for enabling <code>zetaDelta</code> by default in <code>simp_all</code> and <code>simp [*]</code>: <a href=\"https://github.com/leanprover/lean4/pull/3520\">lean4#3520</a>.</p>",
        "id": 423669226,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1709057661
    },
    {
        "content": "<p>10 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/Aesop.20dev.20updates\">#lean4 &gt; Aesop dev updates</a> by <span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span>.</p>",
        "id": 423669428,
        "sender_full_name": "Notification Bot",
        "timestamp": 1709057740
    }
]