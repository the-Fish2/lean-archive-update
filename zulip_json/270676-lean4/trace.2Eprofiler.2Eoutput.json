[
    {
        "content": "<p>I am also trying the new profiling stuff. I’m testing on <a href=\"https://github.com/leanprover-community/mathlib4/blob/incr-tactic-fixes-toolchain/Mathlib/Topology/Baire/LocallyCompactRegular.lean\">https://github.com/leanprover-community/mathlib4/blob/incr-tactic-fixes-toolchain/Mathlib/Topology/Baire/LocallyCompactRegular.lean</a> because this file has only one declaration and it is a bit slow (but not awful). So I got <br>\n<a href=\"/user_uploads/3121/9MBZ-ti-fXfzc0-I7eRXzBO4/out.json\">out.json</a> and I can open it in Firefox. Could you help me interpret it? What is this trying to tell me?</p>",
        "id": 438027363,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715365267
    },
    {
        "content": "<p>First thing, you can upload it on the top right to share it with others :)</p>",
        "id": 438027430,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1715365308
    },
    {
        "content": "<p>2 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/Incrementality.20Call.20for.20Testing\">#lean4 &gt; Incrementality Call for Testing</a> by <span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span>.</p>",
        "id": 438027529,
        "sender_full_name": "Notification Bot",
        "timestamp": 1715365345
    },
    {
        "content": "<p><a href=\"https://share.firefox.dev/3WU73P5\">https://share.firefox.dev/3WU73P5</a></p>",
        "id": 438027563,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715365360
    },
    {
        "content": "<p>I think this is what you mean, right?</p>",
        "id": 438027592,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715365376
    },
    {
        "content": "<p>Well, you definitely have some hairy unification problems in there! Just from hovering over the timeline you can see that almost all non-import time is spent in isDefEq. The one that is auto-selected is already 732ms long.</p>",
        "id": 438027977,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1715365553
    },
    {
        "content": "<p>I also tried the new diagnostic trace and got:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">reduction</span><span class=\"o\">]</span> <span class=\"n\">unfolded</span> <span class=\"n\">declarations</span> <span class=\"o\">(</span><span class=\"n\">max</span><span class=\"o\">:</span> <span class=\"mi\">101424</span><span class=\"o\">,</span> <span class=\"n\">num</span><span class=\"o\">:</span> <span class=\"mi\">17</span><span class=\"o\">):</span> <span class=\"bp\">▼</span>\n  <span class=\"n\">Nat.rec</span> <span class=\"bp\">↦</span> <span class=\"mi\">101424</span>\n  <span class=\"n\">Add.add</span> <span class=\"bp\">↦</span> <span class=\"mi\">46937</span>\n  <span class=\"n\">HAdd.hAdd</span> <span class=\"bp\">↦</span> <span class=\"mi\">46937</span>\n  <span class=\"n\">Nat.add</span> <span class=\"bp\">↦</span> <span class=\"mi\">32191</span>\n  <span class=\"n\">OfNat.ofNat</span> <span class=\"bp\">↦</span> <span class=\"mi\">11060</span>\n  <span class=\"n\">SetLike.coe</span> <span class=\"bp\">↦</span> <span class=\"mi\">8158</span>\n  <span class=\"n\">Set</span> <span class=\"bp\">↦</span> <span class=\"mi\">7470</span>\n  <span class=\"n\">Membership.mem</span> <span class=\"bp\">↦</span> <span class=\"mi\">1560</span>\n  <span class=\"n\">Set.Mem</span> <span class=\"bp\">↦</span> <span class=\"mi\">1546</span>\n  <span class=\"n\">LE.le</span> <span class=\"bp\">↦</span> <span class=\"mi\">1437</span>\n  <span class=\"n\">Subset</span> <span class=\"bp\">↦</span> <span class=\"mi\">1423</span>\n  <span class=\"n\">Set.Subset</span> <span class=\"bp\">↦</span> <span class=\"mi\">1396</span>\n  <span class=\"n\">setOf</span> <span class=\"bp\">↦</span> <span class=\"mi\">762</span>\n  <span class=\"n\">closure</span> <span class=\"bp\">↦</span> <span class=\"mi\">90</span>\n  <span class=\"n\">sInf</span> <span class=\"bp\">↦</span> <span class=\"mi\">90</span>\n  <span class=\"n\">sInter</span> <span class=\"bp\">↦</span> <span class=\"mi\">90</span>\n  <span class=\"n\">Set.Nonempty</span> <span class=\"bp\">↦</span> <span class=\"mi\">22</span>\n<span class=\"o\">[</span><span class=\"n\">reduction</span><span class=\"o\">]</span> <span class=\"n\">unfolded</span> <span class=\"n\">instances</span> <span class=\"o\">(</span><span class=\"n\">max</span><span class=\"o\">:</span> <span class=\"mi\">8158</span><span class=\"o\">,</span> <span class=\"n\">num</span><span class=\"o\">:</span> <span class=\"mi\">8</span><span class=\"o\">):</span> <span class=\"bp\">▼</span>\n  <span class=\"n\">PositiveCompacts.instSetLike</span> <span class=\"bp\">↦</span> <span class=\"mi\">8158</span>\n  <span class=\"n\">instAddNat</span> <span class=\"bp\">↦</span> <span class=\"mi\">7374</span>\n  <span class=\"n\">instHAdd</span> <span class=\"bp\">↦</span> <span class=\"mi\">7374</span>\n  <span class=\"n\">instOfNatNat</span> <span class=\"bp\">↦</span> <span class=\"mi\">5531</span>\n  <span class=\"n\">instMembership</span> <span class=\"bp\">↦</span> <span class=\"mi\">1546</span>\n  <span class=\"n\">instLE</span> <span class=\"bp\">↦</span> <span class=\"mi\">1417</span>\n  <span class=\"n\">instHasSubset</span> <span class=\"bp\">↦</span> <span class=\"mi\">1407</span>\n  <span class=\"n\">instInfSet</span> <span class=\"bp\">↦</span> <span class=\"mi\">90</span>\n<span class=\"o\">[</span><span class=\"n\">reduction</span><span class=\"o\">]</span> <span class=\"n\">unfolded</span> <span class=\"n\">reducible</span> <span class=\"n\">declarations</span> <span class=\"o\">(</span><span class=\"n\">max</span><span class=\"o\">:</span> <span class=\"mi\">46136</span><span class=\"o\">,</span> <span class=\"n\">num</span><span class=\"o\">:</span> <span class=\"mi\">4</span><span class=\"o\">):</span> <span class=\"bp\">▼</span>\n  <span class=\"n\">PositiveCompacts.toCompacts</span> <span class=\"bp\">↦</span> <span class=\"mi\">46136</span>\n  <span class=\"n\">Nat.casesOn</span> <span class=\"bp\">↦</span> <span class=\"mi\">32191</span>\n  <span class=\"n\">Compacts.carrier</span> <span class=\"bp\">↦</span> <span class=\"mi\">8158</span>\n  <span class=\"n\">outParam</span> <span class=\"bp\">↦</span> <span class=\"mi\">96</span>\n<span class=\"o\">[</span><span class=\"n\">def_eq</span><span class=\"o\">]</span> <span class=\"n\">heuristic</span> <span class=\"n\">for</span> <span class=\"n\">solving</span> <span class=\"bp\">`</span><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=?=</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"bp\">`</span> <span class=\"o\">(</span><span class=\"n\">max</span><span class=\"o\">:</span> <span class=\"mi\">8148</span><span class=\"o\">,</span> <span class=\"n\">num</span><span class=\"o\">:</span> <span class=\"mi\">13</span><span class=\"o\">):</span> <span class=\"bp\">▼</span>\n  <span class=\"n\">PositiveCompacts.toCompacts</span> <span class=\"bp\">↦</span> <span class=\"mi\">8148</span>\n  <span class=\"n\">SetLike.coe</span> <span class=\"bp\">↦</span> <span class=\"mi\">4077</span>\n  <span class=\"n\">Compacts.carrier</span> <span class=\"bp\">↦</span> <span class=\"mi\">4074</span>\n  <span class=\"n\">Membership.mem</span> <span class=\"bp\">↦</span> <span class=\"mi\">766</span>\n  <span class=\"n\">Set.Mem</span> <span class=\"bp\">↦</span> <span class=\"mi\">763</span>\n  <span class=\"n\">Subset</span> <span class=\"bp\">↦</span> <span class=\"mi\">692</span>\n  <span class=\"n\">Set.Subset</span> <span class=\"bp\">↦</span> <span class=\"mi\">684</span>\n  <span class=\"n\">LE.le</span> <span class=\"bp\">↦</span> <span class=\"mi\">680</span>\n  <span class=\"n\">setOf</span> <span class=\"bp\">↦</span> <span class=\"mi\">378</span>\n  <span class=\"n\">Set</span> <span class=\"bp\">↦</span> <span class=\"mi\">66</span>\n  <span class=\"n\">closure</span> <span class=\"bp\">↦</span> <span class=\"mi\">51</span>\n  <span class=\"n\">sInf</span> <span class=\"bp\">↦</span> <span class=\"mi\">42</span>\n  <span class=\"n\">sInter</span> <span class=\"bp\">↦</span> <span class=\"mi\">42</span>\n</code></pre></div>\n<p>but I’m not sure what is meant to be alarming (because I don’t have anything to compare to).</p>",
        "id": 438028087,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715365592
    },
    {
        "content": "<p>I the firefox thing knowing what defEq took that long?</p>",
        "id": 438028166,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715365634
    },
    {
        "content": "<p>Those unfolded declarations are in almost every diagnostic trace I've seen so far</p>",
        "id": 438028177,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715365641
    },
    {
        "content": "<p>Actually not the <code>Nat.rec</code></p>",
        "id": 438028213,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715365659
    },
    {
        "content": "<p>The <code>Set</code> stuff</p>",
        "id": 438028231,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715365671
    },
    {
        "content": "<p>101424 incidents is also a new record from what I've seen</p>",
        "id": 438028377,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715365730
    },
    {
        "content": "<p>The thing that seem specific to this proof is all the <code>PositiveCompacts</code> stuff.</p>",
        "id": 438028381,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715365730
    },
    {
        "content": "<p>There is a <code>trace.profiler.output.pp</code> option that didn't fit on the slide; if you set it to true, the profile will include not only when isDefEq is used but also on what problem. Which may or may not be more helpful, I haven't experimented with it very much yet.</p>",
        "id": 438028411,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1715365744
    },
    {
        "content": "<p>The add stuff is data and therefore concerning</p>",
        "id": 438028469,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715365784
    },
    {
        "content": "<p>Sebastian, for later readers, could you edit your message to <code>trace.profiler.output.pp</code>? You swapped two words.</p>",
        "id": 438028701,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715365902
    },
    {
        "content": "<p>New link: <a href=\"https://share.firefox.dev/4dydQnk\">https://share.firefox.dev/4dydQnk</a></p>",
        "id": 438028880,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715365955
    },
    {
        "content": "<p>Optimization trick: including more to the profile cuts the defEq time in half <span aria-label=\"man shrugging\" class=\"emoji emoji-1f937-200d-2642\" role=\"img\" title=\"man shrugging\">:man_shrugging:</span></p>",
        "id": 438029142,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715366057
    },
    {
        "content": "<p>Oh, the fact that they're all failing (presumably with all succeeding ones being below trace.profiler.threshold) already seems like new valuable information</p>",
        "id": 438029218,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1715366094
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/trace.2Eprofiler.2Eoutput/near/438029142\">said</a>:</p>\n<blockquote>\n<p>Optimization trick: including more to the profile cuts the defEq time in half <span aria-label=\"man shrugging\" class=\"emoji emoji-1f937-200d-2642\" role=\"img\" title=\"man shrugging\">:man_shrugging:</span></p>\n</blockquote>\n<p>The previous profile merged the two defEq times as they had the same label and tree position</p>",
        "id": 438029445,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1715366179
    },
    {
        "content": "<p>I would be nice to include line numbers in those profiles.</p>",
        "id": 438029934,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715366381
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">Nat.rec</span> <span class=\"n\">K₀</span> <span class=\"n\">K_next</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">hK_next</span> <span class=\"n\">n</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">inter_subset_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"n\">hK₀</span><span class=\"o\">⟩</span>\n    <span class=\"n\">exact</span> <span class=\"n\">subset_closure.trans</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"n\">hK_next</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"bp\">&lt;|</span>\n      <span class=\"o\">(</span><span class=\"n\">inter_subset_right</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">interior_subset</span>\n</code></pre></div>\n<p>3 seconds of the total is here</p>",
        "id": 438030163,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715366474
    },
    {
        "content": "<p>Yes, I know</p>",
        "id": 438030576,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715366677
    },
    {
        "content": "<p>But it would have been nice to have direct access to this information.</p>",
        "id": 438030602,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715366691
    },
    {
        "content": "<p>Right, is that clear from the output here?</p>",
        "id": 438030653,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715366711
    },
    {
        "content": "<p>You can see the refine node in the unfolded path. But I don't think I intended to print the raw syntax like that, not very readable <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 438030822,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1715366792
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/270676-lean4/topic/trace.2Eprofiler.2Eoutput/near/438030653\">said</a>:</p>\n<blockquote>\n<p>Right, is that clear from the output here?</p>\n</blockquote>\n<p>No, that’s why I asked for line numbers in the profiler output.</p>",
        "id": 438031418,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715367076
    },
    {
        "content": "<p>For the record, one way to turn the problematic line quoted by Matthew into instant happiness is to replace it with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">let</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">PositiveCompacts</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.rec</span> <span class=\"n\">K₀</span> <span class=\"n\">K_next</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">hK_next</span> <span class=\"n\">n</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">inter_subset_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"n\">hK₀</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 438031432,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715367084
    },
    {
        "content": "<p>So I’m replacing the existential witness from <code>Nat.rec K₀ K_next</code> to <code>K</code> where <code>K</code> is a let.</p>",
        "id": 438031577,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715367148
    },
    {
        "content": "<p>And in this <code>let</code> lean needs to be provided the type.</p>",
        "id": 438031617,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715367164
    },
    {
        "content": "<p>Despite the fact that the local context has</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">K₀</span> <span class=\"o\">:</span> <span class=\"n\">PositiveCompacts</span> <span class=\"n\">X</span>\n<span class=\"n\">K_next</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">PositiveCompacts</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">PositiveCompacts</span> <span class=\"n\">X</span>\n</code></pre></div>",
        "id": 438031687,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715367200
    },
    {
        "content": "<p>Note that using <code>let</code> seems necessary, putting a type ascription is not enough.</p>",
        "id": 438031898,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715367300
    },
    {
        "content": "<p>Is that blocking the unfolding somehow?</p>",
        "id": 438032201,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715367441
    },
    {
        "content": "<p>I guess so.</p>",
        "id": 438032390,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715367544
    },
    {
        "content": "<p>It works even if I replace <code>K</code> with <code>__K</code></p>",
        "id": 438032652,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715367650
    },
    {
        "content": "<p>What does it mean?</p>",
        "id": 438033131,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715367880
    },
    {
        "content": "<p>What are those underscore meant to mean?</p>",
        "id": 438033150,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715367891
    },
    {
        "content": "<p>Implementation detail and gets unfolded more eagerly</p>",
        "id": 438033329,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715367967
    },
    {
        "content": "<p>This seems like <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/exposed.20data\">#mathlib4 &gt; exposed data</a> where if you inline a data field too much, Lean will happily try to unfold it</p>",
        "id": 438033424,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715368023
    },
    {
        "content": "<p>Should we work on a minimization or is this already tracked?</p>",
        "id": 438033873,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715368302
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> do you want us to open issues about suggestions from this discussion?</p>",
        "id": 438033941,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715368330
    },
    {
        "content": "<p>I don't think its tracked</p>",
        "id": 438033988,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715368372
    },
    {
        "content": "<p>Of course the most naive minimization fails (I mean it works without any delay).</p>",
        "id": 438034196,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715368505
    },
    {
        "content": "<p>I give up. It is really delicate. I was able to minimize it with mocking down to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">BaireSpace.extracted_1</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n   <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">K₀</span> <span class=\"o\">:</span> <span class=\"n\">PositiveCompacts</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">K_next</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">PositiveCompacts</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">PositiveCompacts</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hK_next</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">PositiveCompacts</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"n\">K_next</span> <span class=\"n\">n</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">PositiveCompacts</span> <span class=\"n\">X</span><span class=\"o\">,</span>  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">closure</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">⊆</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">Nat.rec</span> <span class=\"n\">K₀</span> <span class=\"n\">K_next</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">↦</span> <span class=\"n\">hK_next</span> <span class=\"n\">n</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>but simplifying further dissolves the bug. For instance removing both occurrences of <code>closure</code> (and adding an up arrow to help Lean understand the assumption) fixes the bug.</p>",
        "id": 438037915,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715370684
    },
    {
        "content": "<p>Then I tried to build a mathlib-free mockup but failed. My attempt is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Topo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">PC</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Topo</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">def</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">instance</span><span class=\"kd\">]</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">PCcoe</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Topo</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">CoeTC</span> <span class=\"o\">(</span><span class=\"n\">PC</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">Closure</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Topo</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">instance</span><span class=\"kd\">]</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">fooh</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">HasSubset</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">BaireSpace.extracted_2</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Topo</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n   <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">K₀</span> <span class=\"o\">:</span> <span class=\"n\">PC</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">K_next</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">PC</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">PC</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hK_next</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">PC</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">Closure</span> <span class=\"o\">(</span><span class=\"n\">K_next</span> <span class=\"n\">n</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">PC</span> <span class=\"n\">X</span><span class=\"o\">,</span>  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">Closure</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">⊆</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">Nat.rec</span> <span class=\"n\">K₀</span> <span class=\"n\">K_next</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">↦</span> <span class=\"n\">hK_next</span> <span class=\"n\">n</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>but it does not have the bug.</p>",
        "id": 438038023,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715370735
    },
    {
        "content": "<p>I understand that having axiom does not encourage Lean to unfold stuff, but I don’t know how to minimize without them.</p>",
        "id": 438038078,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715370781
    }
]