[
    {
        "content": "<p>Could simp tell me upfront what lemmas it is looping with when it loops? There's usually only two or three lemmas involved, so it should be easy to figure out which ones they are just by counting the number of times each lemma is used, or maybe by figuring out the pattern in the rewrites.</p>",
        "id": 442794265,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717595507
    },
    {
        "content": "<p>Eg in</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span><span class=\"w\"> </span><span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">foo_eq_bar</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">rfl</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span><span class=\"w\"> </span><span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">bar_eq_foo</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">rfl</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n</code></pre></div>\n<p>I get the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">tactic</span><span class=\"w\"> </span><span class=\"bp\">'</span><span class=\"n\">simp'</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">nested</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"o\">:</span>\n<span class=\"n\">maximum</span><span class=\"w\"> </span><span class=\"n\">recursion</span><span class=\"w\"> </span><span class=\"n\">depth</span><span class=\"w\"> </span><span class=\"n\">has</span><span class=\"w\"> </span><span class=\"n\">been</span><span class=\"w\"> </span><span class=\"n\">reached</span>\n<span class=\"n\">use</span><span class=\"w\"> </span><span class=\"ss\">`set_option</span><span class=\"w\"> </span><span class=\"n\">maxRecDepth</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"n\">num</span><span class=\"bp\">&gt;`</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">increase</span><span class=\"w\"> </span><span class=\"n\">limit</span>\n<span class=\"n\">use</span><span class=\"w\"> </span><span class=\"ss\">`set_option</span><span class=\"w\"> </span><span class=\"n\">diagnostics</span><span class=\"w\"> </span><span class=\"n\">true</span><span class=\"bp\">`</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"n\">diagnostic</span><span class=\"w\"> </span><span class=\"n\">information</span>\n</code></pre></div>",
        "id": 442794400,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717595537
    },
    {
        "content": "<p>If I add <code>set_option diagnostics true</code> (where is <code>trace.simplifier.rewrite</code> gone btw? I don't seem to be able to know what the rewrites actually were), then it tells me (after some clicking around)</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">used</span><span class=\"w\"> </span><span class=\"n\">theorems</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">max</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">252</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">num</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">tried</span><span class=\"w\"> </span><span class=\"n\">theorems</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">max</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">252</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">num</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"bp\">▼</span>\n<span class=\"w\">  </span><span class=\"n\">foo_eq_bar</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"mi\">252</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">succeeded</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">252</span>\n<span class=\"w\">  </span><span class=\"n\">bar_eq_foo</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"mi\">251</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">succeeded</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">251</span>\n<span class=\"n\">use</span><span class=\"w\"> </span><span class=\"ss\">`set_option</span><span class=\"w\"> </span><span class=\"n\">diagnostics</span><span class=\"bp\">.</span><span class=\"n\">threshold</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"n\">num</span><span class=\"bp\">&gt;`</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">control</span><span class=\"w\"> </span><span class=\"n\">threshold</span><span class=\"w\"> </span><span class=\"n\">for</span><span class=\"w\"> </span><span class=\"n\">reporting</span><span class=\"w\"> </span><span class=\"n\">counters</span>\n</code></pre></div>",
        "id": 442794667,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717595607
    },
    {
        "content": "<p>Great! Could the simp error tell me upfront that <code>foo_eq_bar</code> and <code>bar_eq_foo</code> were the problematic lemmas?</p>",
        "id": 442794795,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717595635
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/270676-lean4/topic/Detecting.20which.20lemmas.20make.20simp.20loop/near/442794667\">said</a>:</p>\n<blockquote>\n<p>(where is <code>trace.simplifier.rewrite</code> gone btw? I don't seem to be able to know what the rewrites actually were)</p>\n</blockquote>\n<p><code>trace.Meta.Tactic.simp.rewrite</code></p>",
        "id": 442795036,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1717595685
    },
    {
        "content": "<p>In real life, there's not just one simp call which I can isolate for a <code>set_option diagnostics true</code>/<code>set_option trace.Meta.Tactic.simp.rewrite true</code> analysis, but rather many simp calls with many handspecified lemmas, and if the root cause can be automatically figured out why should I have to quit my workflow and get into debugging mode?</p>",
        "id": 442795492,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717595776
    },
    {
        "content": "<p>I think the simplest solution here would be to auto-attach the <code>diagnostics</code> output when running into the depth limit</p>",
        "id": 442796981,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1717596084
    },
    {
        "content": "<p>Sure, but the diagnostics still require some clicking around and don't actually explain what happened. Like sure <em>I</em> can understand what they mean, but a beginner probably won't (and I don't think we should expect them to?). Can't we slightly post-process the output?</p>",
        "id": 442987718,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717658886
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/270676-lean4/topic/Detecting.20which.20lemmas.20make.20simp.20loop/near/442987718\">said</a>:</p>\n<blockquote>\n<p>the diagnostics still require some clicking around</p>\n</blockquote>\n<p>Btw why is it so slow to click around diagnostics? It takes 5-10 seconds for the collapsed list to expand when I click it</p>",
        "id": 442987843,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717658923
    },
    {
        "content": "<p>Is it huge? I've seen uncollapsing lists crash VS Code when typeclass inference goes haywire, because they can be revealing literally hundreds of thousands of lines.</p>",
        "id": 442988339,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1717659071
    },
    {
        "content": "<p>No, it's literally this:<br>\n<span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/270676-lean4/topic/Detecting.20which.20lemmas.20make.20simp.20loop/near/442794667\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">used</span><span class=\"w\"> </span><span class=\"n\">theorems</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">max</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">252</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">num</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"bp\">▶</span>\n<span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">tried</span><span class=\"w\"> </span><span class=\"n\">theorems</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">max</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">252</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">num</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"bp\">▼</span>\n<span class=\"w\">  </span><span class=\"n\">foo_eq_bar</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"mi\">252</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">succeeded</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">252</span>\n<span class=\"w\">  </span><span class=\"n\">bar_eq_foo</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"mi\">251</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">succeeded</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">251</span>\n<span class=\"n\">use</span><span class=\"w\"> </span><span class=\"ss\">`set_option</span><span class=\"w\"> </span><span class=\"n\">diagnostics</span><span class=\"bp\">.</span><span class=\"n\">threshold</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"n\">num</span><span class=\"bp\">&gt;`</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">control</span><span class=\"w\"> </span><span class=\"n\">threshold</span><span class=\"w\"> </span><span class=\"n\">for</span><span class=\"w\"> </span><span class=\"n\">reporting</span><span class=\"w\"> </span><span class=\"n\">counters</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 442989036,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717659316
    },
    {
        "content": "<p>Cannot reproduce on Lean master, it's instantaneous</p>",
        "id": 443003591,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1717663091
    },
    {
        "content": "<p>Interesting... will have to try again</p>",
        "id": 443003948,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1717663189
    }
]