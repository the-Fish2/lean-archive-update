[
    {
        "content": "<p>I am using induction to prove the property that updating all the values of an array will not change the size of the array. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.Array</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">set_elements</span> <span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">index</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"n\">arr</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">index</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">index</span>\n  <span class=\"k\">if</span> <span class=\"n\">index</span> <span class=\"bp\">&gt;=</span> <span class=\"n\">arr.size</span> <span class=\"k\">then</span>\n    <span class=\"n\">return</span> <span class=\"n\">arr</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">arr</span> <span class=\"o\">:=</span> <span class=\"n\">arr.set</span><span class=\"bp\">!</span> <span class=\"n\">index</span> <span class=\"mi\">1</span>\n    <span class=\"n\">index</span> <span class=\"o\">:=</span> <span class=\"n\">index</span><span class=\"bp\">+</span><span class=\"mi\">1</span>\n    <span class=\"n\">return</span> <span class=\"n\">set_elements</span> <span class=\"n\">arr</span> <span class=\"n\">index</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">arr.size</span> <span class=\"bp\">-</span> <span class=\"n\">index</span>\n<span class=\"n\">decreasing_by</span> <span class=\"n\">simp_wf</span><span class=\"bp\">;</span> <span class=\"gr\">sorry</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">set_one</span> <span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"n\">return</span> <span class=\"n\">set_elements</span> <span class=\"n\">arr</span> <span class=\"mi\">0</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">set_elements_size</span> <span class=\"o\">(</span><span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">index</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">set_elements</span> <span class=\"n\">arr</span> <span class=\"n\">index</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">size</span> <span class=\"bp\">=</span> <span class=\"n\">arr.size</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">set_elements</span> <span class=\"n\">Id.run</span>\n  <span class=\"n\">simp_all</span>\n  <span class=\"n\">induction</span> <span class=\"n\">arr.size</span> <span class=\"bp\">-</span> <span class=\"n\">index</span>\n  <span class=\"n\">case</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₁</span><span class=\"o\">:</span> <span class=\"n\">arr.size</span> <span class=\"bp\">=</span> <span class=\"n\">index</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- assuming case zero =&gt; arr.size - index = 0</span>\n    <span class=\"n\">simp_all</span>\n  <span class=\"n\">case</span> <span class=\"n\">succ</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₂</span><span class=\"o\">:</span> <span class=\"n\">arr.size</span> <span class=\"bp\">&gt;</span> <span class=\"n\">index</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- assuming case zero =&gt; arr.size - index &gt; 0</span>\n    <span class=\"n\">simp_all</span>\n\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">size_same_set_1</span> <span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">set_one</span> <span class=\"n\">arr</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">size</span> <span class=\"bp\">=</span> <span class=\"n\">arr.size</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">set_one</span> <span class=\"n\">Id.run</span>\n  <span class=\"n\">simp_all</span>\n  <span class=\"n\">apply</span> <span class=\"n\">set_elements_size</span>\n</code></pre></div>\n<p>Applying induction on <code>arr.size - index</code> splits it into two goals given below but no constraints on the induction variables.  </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">zero</span>\n<span class=\"n\">arr</span><span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Int</span>\n<span class=\"n\">index</span><span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">Array.size</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">index</span> <span class=\"bp\">≥</span> <span class=\"n\">Array.size</span> <span class=\"n\">arr</span> <span class=\"k\">then</span> <span class=\"n\">arr</span> <span class=\"k\">else</span> <span class=\"n\">set_elements</span> <span class=\"o\">(</span><span class=\"n\">Array.set</span><span class=\"bp\">!</span> <span class=\"n\">arr</span> <span class=\"n\">index</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">index</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">Array.size</span> <span class=\"n\">arr</span>\n</code></pre></div>\n<p>and </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">succ</span>\n<span class=\"n\">arr</span><span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Int</span>\n<span class=\"n\">indexn</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"n\">n_ih</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">Array.size</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">index</span> <span class=\"bp\">≥</span> <span class=\"n\">Array.size</span> <span class=\"n\">arr</span> <span class=\"k\">then</span> <span class=\"n\">arr</span> <span class=\"k\">else</span> <span class=\"n\">set_elements</span> <span class=\"o\">(</span><span class=\"n\">Array.set</span><span class=\"bp\">!</span> <span class=\"n\">arr</span> <span class=\"n\">index</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">index</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">Array.size</span> <span class=\"n\">arr</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">Array.size</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">index</span> <span class=\"bp\">≥</span> <span class=\"n\">Array.size</span> <span class=\"n\">arr</span> <span class=\"k\">then</span> <span class=\"n\">arr</span> <span class=\"k\">else</span> <span class=\"n\">set_elements</span> <span class=\"o\">(</span><span class=\"n\">Array.set</span><span class=\"bp\">!</span> <span class=\"n\">arr</span> <span class=\"n\">index</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">index</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">Array.size</span> <span class=\"n\">arr</span>\n</code></pre></div>\n<p>Therefore I added h1 and h2 in these two cases respectively.  <br>\nHow do I get rid of <code>sorry</code> for h1 and h2?<br>\nI am using Lean version <code>4.5.0-rc1</code></p>",
        "id": 420927201,
        "sender_full_name": "Muqsit Azeem",
        "timestamp": 1707690646
    }
]