[
    {
        "content": "<p>I feel confused why <code>simp</code> fails to make progress here.  Did I miss something?</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">00</span><span class=\"o\">][</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 440745537,
        "sender_full_name": "David Pearce",
        "timestamp": 1716762270
    },
    {
        "content": "<p>This particular case you can solve with <code>by decide</code>. Simp probably doesn't have lemmas that allow this type of reduction.</p>",
        "id": 440745583,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1716762336
    },
    {
        "content": "<p>I figured out you can do it with <code>rfl</code>.  What is <code>decide</code> ?</p>",
        "id": 440745646,
        "sender_full_name": "David Pearce",
        "timestamp": 1716762366
    },
    {
        "content": "<p><code>rfl</code> and <code>decide</code> are similar but <code>decide</code> is more powerful in some situations. <code>rfl</code> can prove goals that hold by definitional equality while <code>decide</code> can solve all goals for which a <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Decidable#doc\">docs#Decidable</a> instance can be synthesized. It will synthesize this instance, reduce it and use the proof it produces to close the goal.</p>",
        "id": 440745733,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1716762436
    },
    {
        "content": "<p>Ok, ta</p>",
        "id": 440745762,
        "sender_full_name": "David Pearce",
        "timestamp": 1716762464
    },
    {
        "content": "<p>There are also cases where <code>rfl</code> is stronger than <code>decide</code> though. For example if you don't have a Decidable instance for something but it still holds definitionally. This might in particular be the case when there are variables floating around within your goal. In the end it depends on the situation when to use which</p>",
        "id": 440745848,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1716762520
    },
    {
        "content": "<p>Hmmm, well I can just try it and see whether it helps in any given instance.</p>",
        "id": 440745903,
        "sender_full_name": "David Pearce",
        "timestamp": 1716762580
    },
    {
        "content": "<p>It makes using arrays really unpleasant, because I can't simplify a large expression involving e.g. a <code>match #[0][0]</code>.</p>",
        "id": 440746441,
        "sender_full_name": "David Pearce",
        "timestamp": 1716763049
    },
    {
        "content": "<p>You can enable ground term reduction in simp (hover over <code>ground</code> to see what it does):</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"w\">  </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">ground</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">true</span><span class=\"w\"> </span><span class=\"o\">})</span>\n</code></pre></div>\n<p>Note that depending on your goal this can do a lot of computation so this is the reason it is not generally enabled. If this happens you can in theory still zoom in on the relevant terms with <code>conv</code> mode</p>",
        "id": 440746840,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1716763371
    },
    {
        "content": "<p>It feels like doing even seemingly simple things in Lean lead to complexity.  I'm constantly getting tripped by a myriad of details like this ... ?</p>",
        "id": 440746893,
        "sender_full_name": "David Pearce",
        "timestamp": 1716763431
    },
    {
        "content": "<p>What's <code>conv</code> mode?</p>",
        "id": 440746959,
        "sender_full_name": "David Pearce",
        "timestamp": 1716763468
    },
    {
        "content": "<p>I think we can teach simp about this with a simproc that is enabled by default. If you are working with a theory fragment that not many people have worked with before (I don't think many people work with indices on constant arrays) it is possible that proof automation in this region has not been brought to the level of other regions yet. If you find such things please do report them here, we are looking to fix as many of these papercuts as possible!</p>",
        "id": 440747059,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1716763560
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"704008\">David Pearce</span> <a href=\"#narrow/stream/270676-lean4/topic/Simplifying.20Access.20to.20Array.20Literal/near/440746959\">said</a>:</p>\n<blockquote>\n<p>What's <code>conv</code> mode?</p>\n</blockquote>\n<p><a href=\"https://lean-lang.org/theorem_proving_in_lean4/conv.html\">https://lean-lang.org/theorem_proving_in_lean4/conv.html</a>. Note that you do not <em>need</em> to use conv mode if just the <code>simp</code> with the config option works fine. I just explained the reason why it is not on by default and how, if this bites you, you can get around it if you want.</p>",
        "id": 440747129,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1716763601
    },
    {
        "content": "<p>All I'm actually doing is writing an <code>example</code> which serves as a test to ensure a piece of code behaves as expected.  I'm using lean more in the style of a programming language than for e.g. proving mathmetics.</p>",
        "id": 440747173,
        "sender_full_name": "David Pearce",
        "timestamp": 1716763642
    },
    {
        "content": "<p>Right. Are you just evaluating a program without any free variables? In that case you can use <code>eval</code> + <code>guard_msgs</code> to write quick unit tests, check e.g. <a href=\"https://github.com/leanprover/leansat/blob/main/Test/AIG/Shared.lean#L10-L12\">https://github.com/leanprover/leansat/blob/main/Test/AIG/Shared.lean#L10-L12</a>. The idea is that you write the <code>eval</code>, then you put <code>guard_msgs in</code> above it and use the code action that guard_msgs provides to auto generate the doc string that determines the desired output.</p>",
        "id": 440747301,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1716763758
    },
    {
        "content": "<blockquote>\n<p>Are you just evaluating a program without any free variables?</p>\n</blockquote>\n<p>Yes, that is what I'm doing in this case</p>",
        "id": 440747321,
        "sender_full_name": "David Pearce",
        "timestamp": 1716763795
    },
    {
        "content": "<p>So, conversion mode allows you to apply rewrites to very specific subterms of an expression?  Interesting.</p>",
        "id": 440747400,
        "sender_full_name": "David Pearce",
        "timestamp": 1716763849
    },
    {
        "content": "<p>That is correct yes.</p>",
        "id": 440747425,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1716763870
    },
    {
        "content": "<p>But, no, <code>#eval</code> is not what I want.  I want to write a proof that something reduces to something.</p>",
        "id": 440747441,
        "sender_full_name": "David Pearce",
        "timestamp": 1716763888
    },
    {
        "content": "<p>In that case why doesn't <code>rfl</code> suffice?</p>",
        "id": 440747465,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1716763915
    },
    {
        "content": "<p>If a proof can be done by reduction <code>rfl</code> will find it</p>",
        "id": 440747518,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1716763933
    },
    {
        "content": "<p>Well it does and it doesn't.  I got stuck as <code>rfl</code>couldn't solve my <code>example</code>.  There was actually a bug so the example should fail.  But, the expression I was left with was very large and incomprehensible.  I was expecting <code>simp</code> to reduce it down to something more manageable.  But it did not.</p>",
        "id": 440747579,
        "sender_full_name": "David Pearce",
        "timestamp": 1716764022
    },
    {
        "content": "<p>Can you show me?</p>",
        "id": 440747634,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1716764047
    },
    {
        "content": "<p>In fact, using <code>List</code> directly instead of <code>Array</code>and I get the desired behaviour.  To be honest, I think using arrays is just a bad idea.</p>",
        "id": 440747645,
        "sender_full_name": "David Pearce",
        "timestamp": 1716764061
    },
    {
        "content": "<blockquote>\n<p>Can you show me?</p>\n</blockquote>\n<p>Uhh, I mean ... I could ... but its part of a large example.</p>",
        "id": 440747668,
        "sender_full_name": "David Pearce",
        "timestamp": 1716764085
    },
    {
        "content": "<p>Let me try</p>",
        "id": 440747696,
        "sender_full_name": "David Pearce",
        "timestamp": 1716764110
    },
    {
        "content": "<p>It depends on the context. Writing proof automation about <code>List</code> is quite simple and a lot of it has been done already, <code>Array</code> is certainly lacking behind in a few cases like this but it will eventually be fixed. The main motivation to use <code>Array</code> should be performance.</p>",
        "id": 440747725,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1716764138
    },
    {
        "content": "<p>Well, performance is not a concern for me write now.  But, an array is the natural decription for what I'm doing.</p>",
        "id": 440747792,
        "sender_full_name": "David Pearce",
        "timestamp": 1716764188
    },
    {
        "content": "<p>What is it that you are doing then?</p>",
        "id": 440747931,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1716764338
    },
    {
        "content": "<p>Leaning Lean <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 440747962,
        "sender_full_name": "David Pearce",
        "timestamp": 1716764383
    },
    {
        "content": "<p>Right^^ I was talking about the thing that has a natural description as arrays</p>",
        "id": 440748021,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1716764404
    },
    {
        "content": "<p>Using a toy example which is based on an EVM: <a href=\"https://github.com/DavePearce/LeanEVM\">https://github.com/DavePearce/LeanEVM</a></p>",
        "id": 440748036,
        "sender_full_name": "David Pearce",
        "timestamp": 1716764414
    },
    {
        "content": "<p>Right, where is the piece of code that you are struggling with?</p>",
        "id": 440748125,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1716764458
    },
    {
        "content": "<p>Hang on</p>",
        "id": 440748140,
        "sender_full_name": "David Pearce",
        "timestamp": 1716764466
    },
    {
        "content": "<p>I'm just simplifying it</p>",
        "id": 440748148,
        "sender_full_name": "David Pearce",
        "timestamp": 1716764472
    },
    {
        "content": "<p>Hmmm, I don't think this is going to help:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Batteries</span><span class=\"bp\">.</span><span class=\"n\">Data</span><span class=\"bp\">.</span><span class=\"n\">List</span><span class=\"bp\">.</span><span class=\"n\">Lemmas</span>\n\n<span class=\"c1\">-- A set of zero or more bytes upto a given size.</span>\n<span class=\"kn\">structure</span><span class=\"w\"> </span><span class=\"n\">FinVec</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">T</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"n\">T</span>\n<span class=\"w\">  </span><span class=\"n\">isLt</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"bp\">&lt;=</span><span class=\"w\"> </span><span class=\"n\">n</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">Bytes32</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">FinVec</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:=</span><span class=\"mi\">32</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">UInt8</span>\n\n\n<span class=\"kn\">abbrev</span><span class=\"w\"> </span><span class=\"n\">UInt4</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"mi\">16</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kn\">abbrev</span><span class=\"w\"> </span><span class=\"n\">U4_MAX</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">UInt4</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">val</span><span class=\"o\">:=</span><span class=\"mi\">15</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">isLt</span><span class=\"o\">:=(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_arith</span><span class=\"o\">)}</span>\n\n<span class=\"kn\">inductive</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"c1\">-- 0s: Stop and Arithmetic Operations</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Stop</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Add</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Sub</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Mul</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Div</span>\n<span class=\"c1\">-- 10s: Comparison &amp; Bitwise Logic Operations</span>\n<span class=\"c1\">-- 20s: SHA3</span>\n<span class=\"c1\">-- 30s: Environment Information</span>\n<span class=\"c1\">-- 40s: Block Information</span>\n<span class=\"c1\">-- 50s: Stack, Memory Storage and Flow Operations</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Pop</span>\n<span class=\"c1\">-- 60s &amp; 70s: Push Operations</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Push</span><span class=\"o\">(</span><span class=\"n\">bs</span><span class=\"o\">:</span><span class=\"n\">Bytes32</span><span class=\"o\">)</span>\n<span class=\"c1\">-- 80s: Duplication Operations</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Dup</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">UInt4</span><span class=\"o\">)</span>\n<span class=\"c1\">-- 90s: Exchange Operations</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Swap</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">UInt4</span><span class=\"o\">)</span>\n<span class=\"c1\">-- a0s: Logging Operations</span>\n<span class=\"c1\">-- f0s: System operations</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Invalid</span>\n\n\n<span class=\"c\">/-</span><span class=\"cm\"> =============================================================== -/</span>\n<span class=\"c\">/-</span><span class=\"cm\"> Code ROM -/</span>\n<span class=\"c\">/-</span><span class=\"cm\"> =============================================================== -/</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">MAX_CODE_SIZE</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"mi\">24576</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">EvmCode</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Array</span><span class=\"w\"> </span><span class=\"n\">UInt8</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">EvmCode</span><span class=\"bp\">.</span><span class=\"n\">read</span><span class=\"o\">(</span><span class=\"n\">st</span><span class=\"o\">:</span><span class=\"n\">EvmCode</span><span class=\"o\">)(</span><span class=\"n\">pc</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">UInt8</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">pc</span><span class=\"w\"> </span><span class=\"bp\">&gt;=</span><span class=\"w\"> </span><span class=\"n\">st</span><span class=\"bp\">.</span><span class=\"n\">size</span>\n<span class=\"w\">  </span><span class=\"k\">then</span>\n<span class=\"w\">    </span><span class=\"mi\">0</span>\n<span class=\"w\">  </span><span class=\"k\">else</span>\n<span class=\"w\">    </span><span class=\"n\">st</span><span class=\"bp\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">val</span><span class=\"o\">:=</span><span class=\"n\">pc</span><span class=\"o\">,</span><span class=\"n\">isLt</span><span class=\"o\">:=(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">omega</span><span class=\"o\">)}</span>\n\n<span class=\"c1\">-- Read `n` bytes from the code sequence starting a given `pc` position.</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">EvmCode</span><span class=\"bp\">.</span><span class=\"n\">slice</span><span class=\"o\">(</span><span class=\"n\">st</span><span class=\"o\">:</span><span class=\"n\">EvmCode</span><span class=\"o\">)(</span><span class=\"n\">pc</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)(</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">n</span><span class=\"bp\">≤</span><span class=\"mi\">32</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Bytes32</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">head</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">st</span><span class=\"bp\">.</span><span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">splitAt</span><span class=\"w\"> </span><span class=\"n\">pc</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">snd</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">head</span><span class=\"bp\">.</span><span class=\"n\">takeD</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">  </span><span class=\"c1\">-- Prove bytes has at most 32 elements.</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"w\">  </span><span class=\"c1\">-- Construct FinVec</span>\n<span class=\"w\">  </span><span class=\"o\">{</span><span class=\"n\">data</span><span class=\"o\">:=</span><span class=\"n\">bytes</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">isLt</span><span class=\"o\">:=</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">le_of_eq_of_le</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"o\">}</span>\n\n<span class=\"c1\">-- Decode the instruction at a given `pc` position within the code sequence.</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">EvmCode</span><span class=\"bp\">.</span><span class=\"n\">decode</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">st</span><span class=\"o\">:</span><span class=\"n\">EvmCode</span><span class=\"o\">)(</span><span class=\"n\">pc</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"c1\">-- Read opcode</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">opcode</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">st</span><span class=\"bp\">.</span><span class=\"n\">read</span><span class=\"w\"> </span><span class=\"n\">pc</span><span class=\"bp\">;</span>\n<span class=\"w\">  </span><span class=\"c1\">-- Decode opcode</span>\n<span class=\"w\">  </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">opcode</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">  </span><span class=\"c1\">-- 0s: Stop and Arithmetic Operations</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x00</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Stop</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x01</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Add</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x02</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Mul</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x03</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Sub</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x04</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Div</span>\n<span class=\"w\">  </span><span class=\"c1\">-- 10s: Comparison &amp; Bitwise Logic Operations</span>\n<span class=\"w\">  </span><span class=\"c1\">-- 20s: SHA3</span>\n<span class=\"w\">  </span><span class=\"c1\">-- 30s: Environment Information</span>\n<span class=\"w\">  </span><span class=\"c1\">-- 40s: Block Information</span>\n<span class=\"w\">  </span><span class=\"c1\">-- 50s: Stack, Memory Storage and Flow Operations</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x50</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Pop</span>\n<span class=\"w\">  </span><span class=\"c1\">-- 60s &amp; 70s: Push Operations</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x60</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Push</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">st</span><span class=\"bp\">.</span><span class=\"n\">slice</span><span class=\"w\"> </span><span class=\"n\">pc</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_arith</span><span class=\"o\">))</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x61</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Push</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">st</span><span class=\"bp\">.</span><span class=\"n\">slice</span><span class=\"w\"> </span><span class=\"n\">pc</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_arith</span><span class=\"o\">))</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x62</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Push</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">st</span><span class=\"bp\">.</span><span class=\"n\">slice</span><span class=\"w\"> </span><span class=\"n\">pc</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_arith</span><span class=\"o\">))</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x63</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Push</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">st</span><span class=\"bp\">.</span><span class=\"n\">slice</span><span class=\"w\"> </span><span class=\"n\">pc</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_arith</span><span class=\"o\">))</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x64</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Push</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">st</span><span class=\"bp\">.</span><span class=\"n\">slice</span><span class=\"w\"> </span><span class=\"n\">pc</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_arith</span><span class=\"o\">))</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x65</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Push</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">st</span><span class=\"bp\">.</span><span class=\"n\">slice</span><span class=\"w\"> </span><span class=\"n\">pc</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_arith</span><span class=\"o\">))</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x66</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Push</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">st</span><span class=\"bp\">.</span><span class=\"n\">slice</span><span class=\"w\"> </span><span class=\"n\">pc</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_arith</span><span class=\"o\">))</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x67</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Push</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">st</span><span class=\"bp\">.</span><span class=\"n\">slice</span><span class=\"w\"> </span><span class=\"n\">pc</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_arith</span><span class=\"o\">))</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x68</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Push</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">st</span><span class=\"bp\">.</span><span class=\"n\">slice</span><span class=\"w\"> </span><span class=\"n\">pc</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_arith</span><span class=\"o\">))</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x69</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Push</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">st</span><span class=\"bp\">.</span><span class=\"n\">slice</span><span class=\"w\"> </span><span class=\"n\">pc</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_arith</span><span class=\"o\">))</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x6a</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Push</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">st</span><span class=\"bp\">.</span><span class=\"n\">slice</span><span class=\"w\"> </span><span class=\"n\">pc</span><span class=\"w\"> </span><span class=\"mi\">11</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_arith</span><span class=\"o\">))</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x6b</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Push</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">st</span><span class=\"bp\">.</span><span class=\"n\">slice</span><span class=\"w\"> </span><span class=\"n\">pc</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_arith</span><span class=\"o\">))</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x6c</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Push</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">st</span><span class=\"bp\">.</span><span class=\"n\">slice</span><span class=\"w\"> </span><span class=\"n\">pc</span><span class=\"w\"> </span><span class=\"mi\">13</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_arith</span><span class=\"o\">))</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x6d</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Push</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">st</span><span class=\"bp\">.</span><span class=\"n\">slice</span><span class=\"w\"> </span><span class=\"n\">pc</span><span class=\"w\"> </span><span class=\"mi\">14</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_arith</span><span class=\"o\">))</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x6e</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Push</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">st</span><span class=\"bp\">.</span><span class=\"n\">slice</span><span class=\"w\"> </span><span class=\"n\">pc</span><span class=\"w\"> </span><span class=\"mi\">15</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_arith</span><span class=\"o\">))</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x6f</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Push</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">st</span><span class=\"bp\">.</span><span class=\"n\">slice</span><span class=\"w\"> </span><span class=\"n\">pc</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_arith</span><span class=\"o\">))</span>\n<span class=\"w\">  </span><span class=\"c1\">-- 80s: Duplication Operations</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x80</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Dup</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">val</span><span class=\"o\">:=</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">isLt</span><span class=\"o\">:=(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_arith</span><span class=\"o\">)}</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x81</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Dup</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">val</span><span class=\"o\">:=</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">isLt</span><span class=\"o\">:=(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_arith</span><span class=\"o\">)}</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x82</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Dup</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">val</span><span class=\"o\">:=</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">isLt</span><span class=\"o\">:=(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_arith</span><span class=\"o\">)}</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x83</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Dup</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">val</span><span class=\"o\">:=</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">isLt</span><span class=\"o\">:=(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_arith</span><span class=\"o\">)}</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x84</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Dup</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">val</span><span class=\"o\">:=</span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">isLt</span><span class=\"o\">:=(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_arith</span><span class=\"o\">)}</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x85</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Dup</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">val</span><span class=\"o\">:=</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">isLt</span><span class=\"o\">:=(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_arith</span><span class=\"o\">)}</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x86</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Dup</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">val</span><span class=\"o\">:=</span><span class=\"mi\">6</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">isLt</span><span class=\"o\">:=(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_arith</span><span class=\"o\">)}</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x87</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Dup</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">val</span><span class=\"o\">:=</span><span class=\"mi\">7</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">isLt</span><span class=\"o\">:=(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_arith</span><span class=\"o\">)}</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x88</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Dup</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">val</span><span class=\"o\">:=</span><span class=\"mi\">8</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">isLt</span><span class=\"o\">:=(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_arith</span><span class=\"o\">)}</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x89</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Dup</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">val</span><span class=\"o\">:=</span><span class=\"mi\">9</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">isLt</span><span class=\"o\">:=(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_arith</span><span class=\"o\">)}</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x8a</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Dup</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">val</span><span class=\"o\">:=</span><span class=\"mi\">10</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">isLt</span><span class=\"o\">:=(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_arith</span><span class=\"o\">)}</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x8b</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Dup</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">val</span><span class=\"o\">:=</span><span class=\"mi\">11</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">isLt</span><span class=\"o\">:=(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_arith</span><span class=\"o\">)}</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x8c</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Dup</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">val</span><span class=\"o\">:=</span><span class=\"mi\">12</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">isLt</span><span class=\"o\">:=(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_arith</span><span class=\"o\">)}</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x8d</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Dup</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">val</span><span class=\"o\">:=</span><span class=\"mi\">13</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">isLt</span><span class=\"o\">:=(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_arith</span><span class=\"o\">)}</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x8e</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Dup</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">val</span><span class=\"o\">:=</span><span class=\"mi\">14</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">isLt</span><span class=\"o\">:=(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_arith</span><span class=\"o\">)}</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x8f</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Dup</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">val</span><span class=\"o\">:=</span><span class=\"mi\">15</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">isLt</span><span class=\"o\">:=(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_arith</span><span class=\"o\">)}</span>\n<span class=\"w\">  </span><span class=\"c1\">-- 90s: Exchange Operations</span>\n<span class=\"w\">  </span><span class=\"c1\">-- a0s: Logging Operations</span>\n<span class=\"w\">  </span><span class=\"c1\">-- f0s: System operations</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Invalid</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">EvmCode</span><span class=\"bp\">.</span><span class=\"n\">decode</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"n\">x60</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"n\">xf5</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Push</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">data</span><span class=\"o\">:=[</span><span class=\"mi\">0</span><span class=\"n\">x60</span><span class=\"o\">],</span><span class=\"n\">isLt</span><span class=\"o\">:=</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 440748723,
        "sender_full_name": "David Pearce",
        "timestamp": 1716765053
    },
    {
        "content": "<p>I wasn't able to simplify it down more.  In the end, note that I know how to prove the <code>example</code>.  That's not the problem.</p>",
        "id": 440748743,
        "sender_full_name": "David Pearce",
        "timestamp": 1716765082
    },
    {
        "content": "<p>A slightly shorter version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Batteries</span><span class=\"bp\">.</span><span class=\"n\">Data</span><span class=\"bp\">.</span><span class=\"n\">List</span><span class=\"bp\">.</span><span class=\"n\">Lemmas</span>\n\n<span class=\"kn\">inductive</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"c1\">-- 0s: Stop and Arithmetic Operations</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Stop</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Add</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Sub</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Mul</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Div</span>\n<span class=\"c1\">-- 10s: Comparison &amp; Bitwise Logic Operations</span>\n<span class=\"c1\">-- 20s: SHA3</span>\n<span class=\"c1\">-- 30s: Environment Information</span>\n<span class=\"c1\">-- 40s: Block Information</span>\n<span class=\"c1\">-- 50s: Stack, Memory Storage and Flow Operations</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Pop</span>\n<span class=\"c1\">-- 60s &amp; 70s: Push Operations</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Push</span><span class=\"o\">(</span><span class=\"n\">bs</span><span class=\"o\">:</span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"n\">UInt8</span><span class=\"o\">)</span>\n<span class=\"c1\">-- 80s: Duplication Operations</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Dup</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"o\">)</span>\n<span class=\"c1\">-- 90s: Exchange Operations</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Swap</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"o\">)</span>\n<span class=\"c1\">-- a0s: Logging Operations</span>\n<span class=\"c1\">-- f0s: System operations</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Invalid</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> =============================================================== -/</span>\n<span class=\"c\">/-</span><span class=\"cm\"> Code ROM -/</span>\n<span class=\"c\">/-</span><span class=\"cm\"> =============================================================== -/</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">MAX_CODE_SIZE</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"mi\">24576</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">EvmCode</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Array</span><span class=\"w\"> </span><span class=\"n\">UInt8</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">EvmCode</span><span class=\"bp\">.</span><span class=\"n\">read</span><span class=\"o\">(</span><span class=\"n\">st</span><span class=\"o\">:</span><span class=\"n\">EvmCode</span><span class=\"o\">)(</span><span class=\"n\">pc</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">UInt8</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">pc</span><span class=\"w\"> </span><span class=\"bp\">&gt;=</span><span class=\"w\"> </span><span class=\"n\">st</span><span class=\"bp\">.</span><span class=\"n\">size</span>\n<span class=\"w\">  </span><span class=\"k\">then</span>\n<span class=\"w\">    </span><span class=\"mi\">0</span>\n<span class=\"w\">  </span><span class=\"k\">else</span>\n<span class=\"w\">    </span><span class=\"n\">st</span><span class=\"bp\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">val</span><span class=\"o\">:=</span><span class=\"n\">pc</span><span class=\"o\">,</span><span class=\"n\">isLt</span><span class=\"o\">:=(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">omega</span><span class=\"o\">)}</span>\n\n<span class=\"c1\">-- Read `n` bytes from the code sequence starting a given `pc` position.</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">EvmCode</span><span class=\"bp\">.</span><span class=\"n\">slice</span><span class=\"o\">(</span><span class=\"n\">st</span><span class=\"o\">:</span><span class=\"n\">EvmCode</span><span class=\"o\">)(</span><span class=\"n\">pc</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)(</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">n</span><span class=\"bp\">≤</span><span class=\"mi\">32</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"n\">UInt8</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">head</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">st</span><span class=\"bp\">.</span><span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">splitAt</span><span class=\"w\"> </span><span class=\"n\">pc</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">snd</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">head</span><span class=\"bp\">.</span><span class=\"n\">takeD</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">  </span><span class=\"c1\">-- Prove bytes has at most 32 elements.</span>\n<span class=\"w\">  </span><span class=\"c1\">--have q : bytes.length = n := by sorry</span>\n<span class=\"w\">  </span><span class=\"c1\">-- Construct FinVec</span>\n<span class=\"w\">  </span><span class=\"n\">bytes</span>\n\n<span class=\"c1\">-- Decode the instruction at a given `pc` position within the code sequence.</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">EvmCode</span><span class=\"bp\">.</span><span class=\"n\">decode</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">st</span><span class=\"o\">:</span><span class=\"n\">EvmCode</span><span class=\"o\">)(</span><span class=\"n\">pc</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"c1\">-- Read opcode</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">opcode</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">st</span><span class=\"bp\">.</span><span class=\"n\">read</span><span class=\"w\"> </span><span class=\"n\">pc</span><span class=\"bp\">;</span>\n<span class=\"w\">  </span><span class=\"c1\">-- Decode opcode</span>\n<span class=\"w\">  </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">opcode</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">  </span><span class=\"c1\">-- 0s: Stop and Arithmetic Operations</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x00</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Stop</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x01</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Add</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x02</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Mul</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x03</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Sub</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x04</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Div</span>\n<span class=\"w\">  </span><span class=\"c1\">-- 10s: Comparison &amp; Bitwise Logic Operations</span>\n<span class=\"w\">  </span><span class=\"c1\">-- 20s: SHA3</span>\n<span class=\"w\">  </span><span class=\"c1\">-- 30s: Environment Information</span>\n<span class=\"w\">  </span><span class=\"c1\">-- 40s: Block Information</span>\n<span class=\"w\">  </span><span class=\"c1\">-- 50s: Stack, Memory Storage and Flow Operations</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x50</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Pop</span>\n<span class=\"w\">  </span><span class=\"c1\">-- 60s &amp; 70s: Push Operations</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x60</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Push</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">st</span><span class=\"bp\">.</span><span class=\"n\">slice</span><span class=\"w\"> </span><span class=\"n\">pc</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_arith</span><span class=\"o\">))</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x61</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Push</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">st</span><span class=\"bp\">.</span><span class=\"n\">slice</span><span class=\"w\"> </span><span class=\"n\">pc</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_arith</span><span class=\"o\">))</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x62</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Push</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">st</span><span class=\"bp\">.</span><span class=\"n\">slice</span><span class=\"w\"> </span><span class=\"n\">pc</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_arith</span><span class=\"o\">))</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x63</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Push</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">st</span><span class=\"bp\">.</span><span class=\"n\">slice</span><span class=\"w\"> </span><span class=\"n\">pc</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_arith</span><span class=\"o\">))</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x64</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Push</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">st</span><span class=\"bp\">.</span><span class=\"n\">slice</span><span class=\"w\"> </span><span class=\"n\">pc</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_arith</span><span class=\"o\">))</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x65</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Push</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">st</span><span class=\"bp\">.</span><span class=\"n\">slice</span><span class=\"w\"> </span><span class=\"n\">pc</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_arith</span><span class=\"o\">))</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x66</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Push</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">st</span><span class=\"bp\">.</span><span class=\"n\">slice</span><span class=\"w\"> </span><span class=\"n\">pc</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_arith</span><span class=\"o\">))</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x67</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Push</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">st</span><span class=\"bp\">.</span><span class=\"n\">slice</span><span class=\"w\"> </span><span class=\"n\">pc</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_arith</span><span class=\"o\">))</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x68</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Push</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">st</span><span class=\"bp\">.</span><span class=\"n\">slice</span><span class=\"w\"> </span><span class=\"n\">pc</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_arith</span><span class=\"o\">))</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x69</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Push</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">st</span><span class=\"bp\">.</span><span class=\"n\">slice</span><span class=\"w\"> </span><span class=\"n\">pc</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_arith</span><span class=\"o\">))</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x6a</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Push</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">st</span><span class=\"bp\">.</span><span class=\"n\">slice</span><span class=\"w\"> </span><span class=\"n\">pc</span><span class=\"w\"> </span><span class=\"mi\">11</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_arith</span><span class=\"o\">))</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x6b</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Push</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">st</span><span class=\"bp\">.</span><span class=\"n\">slice</span><span class=\"w\"> </span><span class=\"n\">pc</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_arith</span><span class=\"o\">))</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x6c</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Push</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">st</span><span class=\"bp\">.</span><span class=\"n\">slice</span><span class=\"w\"> </span><span class=\"n\">pc</span><span class=\"w\"> </span><span class=\"mi\">13</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_arith</span><span class=\"o\">))</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x6d</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Push</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">st</span><span class=\"bp\">.</span><span class=\"n\">slice</span><span class=\"w\"> </span><span class=\"n\">pc</span><span class=\"w\"> </span><span class=\"mi\">14</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_arith</span><span class=\"o\">))</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x6e</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Push</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">st</span><span class=\"bp\">.</span><span class=\"n\">slice</span><span class=\"w\"> </span><span class=\"n\">pc</span><span class=\"w\"> </span><span class=\"mi\">15</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_arith</span><span class=\"o\">))</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x6f</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Push</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">st</span><span class=\"bp\">.</span><span class=\"n\">slice</span><span class=\"w\"> </span><span class=\"n\">pc</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_arith</span><span class=\"o\">))</span>\n<span class=\"w\">  </span><span class=\"c1\">-- 80s: Duplication Operations</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x80</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Dup</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">val</span><span class=\"o\">:=</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">isLt</span><span class=\"o\">:=(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_arith</span><span class=\"o\">)}</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x81</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Dup</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">val</span><span class=\"o\">:=</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">isLt</span><span class=\"o\">:=(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_arith</span><span class=\"o\">)}</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x82</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Dup</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">val</span><span class=\"o\">:=</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">isLt</span><span class=\"o\">:=(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_arith</span><span class=\"o\">)}</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x83</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Dup</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">val</span><span class=\"o\">:=</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">isLt</span><span class=\"o\">:=(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_arith</span><span class=\"o\">)}</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x84</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Dup</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">val</span><span class=\"o\">:=</span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">isLt</span><span class=\"o\">:=(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_arith</span><span class=\"o\">)}</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x85</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Dup</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">val</span><span class=\"o\">:=</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">isLt</span><span class=\"o\">:=(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_arith</span><span class=\"o\">)}</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x86</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Dup</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">val</span><span class=\"o\">:=</span><span class=\"mi\">6</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">isLt</span><span class=\"o\">:=(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_arith</span><span class=\"o\">)}</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x87</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Dup</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">val</span><span class=\"o\">:=</span><span class=\"mi\">7</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">isLt</span><span class=\"o\">:=(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_arith</span><span class=\"o\">)}</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x88</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Dup</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">val</span><span class=\"o\">:=</span><span class=\"mi\">8</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">isLt</span><span class=\"o\">:=(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_arith</span><span class=\"o\">)}</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x89</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Dup</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">val</span><span class=\"o\">:=</span><span class=\"mi\">9</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">isLt</span><span class=\"o\">:=(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_arith</span><span class=\"o\">)}</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x8a</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Dup</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">val</span><span class=\"o\">:=</span><span class=\"mi\">10</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">isLt</span><span class=\"o\">:=(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_arith</span><span class=\"o\">)}</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x8b</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Dup</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">val</span><span class=\"o\">:=</span><span class=\"mi\">11</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">isLt</span><span class=\"o\">:=(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_arith</span><span class=\"o\">)}</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x8c</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Dup</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">val</span><span class=\"o\">:=</span><span class=\"mi\">12</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">isLt</span><span class=\"o\">:=(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_arith</span><span class=\"o\">)}</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x8d</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Dup</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">val</span><span class=\"o\">:=</span><span class=\"mi\">13</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">isLt</span><span class=\"o\">:=(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_arith</span><span class=\"o\">)}</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x8e</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Dup</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">val</span><span class=\"o\">:=</span><span class=\"mi\">14</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">isLt</span><span class=\"o\">:=(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_arith</span><span class=\"o\">)}</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">x8f</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Dup</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">val</span><span class=\"o\">:=</span><span class=\"mi\">15</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">isLt</span><span class=\"o\">:=(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_arith</span><span class=\"o\">)}</span>\n<span class=\"w\">  </span><span class=\"c1\">-- 90s: Exchange Operations</span>\n<span class=\"w\">  </span><span class=\"c1\">-- a0s: Logging Operations</span>\n<span class=\"w\">  </span><span class=\"c1\">-- f0s: System operations</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Invalid</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">EvmCode</span><span class=\"bp\">.</span><span class=\"n\">decode</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"n\">x60</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"n\">xf5</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Push</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"n\">x60</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 440748885,
        "sender_full_name": "David Pearce",
        "timestamp": 1716765217
    },
    {
        "content": "<p>Removed <code>UInt4</code>, <code>FinVec</code> and <code>Bytes32</code></p>",
        "id": 440748904,
        "sender_full_name": "David Pearce",
        "timestamp": 1716765242
    },
    {
        "content": "<p>Error message is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"o\">(</span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">96</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"mi\">245</span><span class=\"o\">][</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Stop</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Add</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Mul</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Sub</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Div</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">80</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Pop</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">96</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Push</span><span class=\"w\"> </span><span class=\"o\">[(</span><span class=\"n\">List</span><span class=\"bp\">.</span><span class=\"n\">splitAt</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">96</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"mi\">245</span><span class=\"o\">])</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"bp\">.</span><span class=\"n\">head?</span><span class=\"bp\">.</span><span class=\"n\">getD</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">97</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Bytecode</span><span class=\"bp\">.</span><span class=\"n\">Push</span><span class=\"w\"> </span><span class=\"o\">[(</span><span class=\"n\">List</span><span class=\"bp\">.</span><span class=\"n\">splitAt</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">96</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"mi\">245</span><span class=\"o\">])</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"bp\">.</span><span class=\"n\">head?</span><span class=\"bp\">.</span><span class=\"n\">getD</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">List</span><span class=\"bp\">.</span><span class=\"n\">splitAt</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">96</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"mi\">245</span><span class=\"o\">])</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"bp\">.</span><span class=\"n\">tail</span><span class=\"bp\">.</span><span class=\"n\">head?</span><span class=\"bp\">.</span><span class=\"n\">getD</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">98</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>Which makes sense, except that of course I'm expecting it to simplify away all the dead cases.</p>",
        "id": 440748998,
        "sender_full_name": "David Pearce",
        "timestamp": 1716765333
    },
    {
        "content": "<p>Right. This does make sense and I think we can get that kind of issue fixed.</p>\n<p>As a general remark on your code, you are using the <code>data</code> function on <code>Array</code> to obtain a <code>List</code>. That is generally a bad idea. You want to express your algorithm in terms of <code>Array</code> operations only and use the <code>Array.data</code> function only in proofs if at all. This will make your code both more performant and should also make it easier to reason about (though it will not fix this particular issue) as the proof automation on <code>Array</code> is geared towards working with <code>Array</code> and not the conversion function to linked lists as much.</p>",
        "id": 440749246,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1716765589
    },
    {
        "content": "<blockquote>\n<p>As a general remark on your code, you are using the data function</p>\n</blockquote>\n<p>hmmmm, there is only one case in that example above: <code>st.data.splitAt</code></p>",
        "id": 440749373,
        "sender_full_name": "David Pearce",
        "timestamp": 1716765711
    },
    {
        "content": "<p>Yes, this is already not a good idea. Calling <code>Array.data</code> on your array will take the array and convert it into a linked list in O(n), that's not something you want to do</p>",
        "id": 440749427,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1716765748
    },
    {
        "content": "<p>Array does not have many functions defined on it, at least in Batteries: <a href=\"https://leanprover-community.github.io/mathlib4_docs/Batteries/Data/Array/Basic.html\">https://leanprover-community.github.io/mathlib4_docs/Batteries/Data/Array/Basic.html</a></p>",
        "id": 440749431,
        "sender_full_name": "David Pearce",
        "timestamp": 1716765755
    },
    {
        "content": "<blockquote>\n<p>Yes, this is already not a good idea. Calling <a href=\"http://Array.data\">Array.data</a> on your array will take the array and convert it into a linked list in O(n), that's not something you want to do</p>\n</blockquote>\n<p>Well, I understand that.  But, I did not easily find a better way of doing it.   All I really want is a slice of the array from an index <code>n</code> to a later index <code>m</code>.  I was surprised I couldn't find that in Batteries.</p>",
        "id": 440749480,
        "sender_full_name": "David Pearce",
        "timestamp": 1716765823
    },
    {
        "content": "<p>There does exist a type called <code>Subarray</code> for this but it has quite little theory built around it as nobody so far has been interested in using it.</p>",
        "id": 440749540,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1716765858
    },
    {
        "content": "<p>There's also <code>ByteArray</code> I just noticed ... which might be helpfuil in this case.</p>",
        "id": 440749566,
        "sender_full_name": "David Pearce",
        "timestamp": 1716765901
    },
    {
        "content": "<blockquote>\n<p>There does exist a type called Subarray for this but it has quite little theory built around it as nobody so far has been interested in using it.</p>\n</blockquote>\n<p>Yeah, I just don't think my use case is well supported by Lean at this time.</p>",
        "id": 440749598,
        "sender_full_name": "David Pearce",
        "timestamp": 1716765930
    },
    {
        "content": "<p><code>ByteArray</code> is an optimized version of <code>Array UInt8</code> with the <code>UInt8</code> being completely unboxed, note that this one has even less theory built around it. This is again mostly because nobody has used it yet.</p>",
        "id": 440749609,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1716765941
    },
    {
        "content": "<p>writing simulators for low level architectures is very much something that's possible right now, for example <a href=\"https://github.com/leanprover/LNSym\">https://github.com/leanprover/LNSym</a> does this for Armv8</p>",
        "id": 440749697,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1716765997
    },
    {
        "content": "<p>All that being said, if you do not care about performance because you do not actually want to execute thus program, running this whole thing with List instead of array is perfectly fine and it will give you a much smoother time.</p>",
        "id": 440750033,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1716766321
    },
    {
        "content": "<blockquote>\n<p>running this whole thing with List instead of array is perfectly fine and it will give you a much smoother time.</p>\n</blockquote>\n<p>Well, its a learning exercise :)  And, yes, this is definitely the path of least resistance!</p>",
        "id": 440750243,
        "sender_full_name": "David Pearce",
        "timestamp": 1716766469
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"704008\">David Pearce</span> <a href=\"#narrow/stream/270676-lean4/topic/Simplifying.20Access.20to.20Array.20Literal/near/440749431\">said</a>:</p>\n<blockquote>\n<p>Array does not have many functions defined on it, at least in Batteries: <a href=\"https://leanprover-community.github.io/mathlib4_docs/Batteries/Data/Array/Basic.html\">https://leanprover-community.github.io/mathlib4_docs/Batteries/Data/Array/Basic.html</a></p>\n</blockquote>\n<p>Note that Batteries only contains supplemental definitions, on top of the pre-existing set of Array functions in core. These functions are distributed about somewhat, but most are in <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Prelude.html#Array\">Init.Prelude</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Data/Array/Basic.html\">Init.Data.Array.Basic</a></p>",
        "id": 440754310,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716770496
    },
    {
        "content": "<p>So, <code>Array.extract</code> is what I was originally looking for then I think</p>",
        "id": 440754394,
        "sender_full_name": "David Pearce",
        "timestamp": 1716770592
    },
    {
        "content": "<p>Its hard to find things if you don't know exactly where to look.  I used the search function in the mathlib4 docs, but didn't find it <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span></p>",
        "id": 440754500,
        "sender_full_name": "David Pearce",
        "timestamp": 1716770712
    },
    {
        "content": "<p>Have you tried <a href=\"https://loogle.lean-lang.org/\">loogle</a>?</p>",
        "id": 440754512,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716770733
    },
    {
        "content": "<p>?</p>",
        "id": 440754521,
        "sender_full_name": "David Pearce",
        "timestamp": 1716770755
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> Array</p>",
        "id": 440754568,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716770778
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Prelude.html#Array\">Array</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Prelude.html#Array.empty\">Array.empty</a>, and <a href=\"https://loogle.lean-lang.org/?q=Array\">4005 more</a></p>",
        "id": 440754569,
        "sender_full_name": "loogle",
        "timestamp": 1716770779
    },
    {
        "content": "<p>No, I haven't come across that before.  Will bookmark it :)</p>",
        "id": 440754580,
        "sender_full_name": "David Pearce",
        "timestamp": 1716770796
    },
    {
        "content": "<p><code>Array.extract</code> is there ... buried under a bunch of other stuff.</p>",
        "id": 440754619,
        "sender_full_name": "David Pearce",
        "timestamp": 1716770865
    },
    {
        "content": "<p>well, I made a very broad search there.</p>\n<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> Array ?a -&gt; Nat -&gt; Nat -&gt; Array ?a</p>",
        "id": 440754725,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716770974
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Prelude.html#Array.extract\">Array.extract</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Prelude.html#Array.appendCore.loop\">Array.appendCore.loop</a>, and <a href=\"https://loogle.lean-lang.org/?q=Array%20%3Fa%20-%3E%20Nat%20-%3E%20Nat%20-%3E%20Array%20%3Fa\">11 more</a></p>",
        "id": 440754728,
        "sender_full_name": "loogle",
        "timestamp": 1716770975
    },
    {
        "content": "<p>Yeah, but what else can you do if you don't know what you're looking for.  \"Array slice\" did not provide any useful answers for me.</p>",
        "id": 440754781,
        "sender_full_name": "David Pearce",
        "timestamp": 1716771005
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">Error</span>\n\n<span class=\"n\">application</span><span class=\"w\"> </span><span class=\"n\">type</span><span class=\"w\"> </span><span class=\"n\">mismatch</span>\n<span class=\"w\">  </span><span class=\"n\">Array</span><span class=\"w\"> </span><span class=\"n\">slice</span>\n<span class=\"n\">argument</span>\n<span class=\"w\">  </span><span class=\"n\">slice</span>\n<span class=\"n\">has</span><span class=\"w\"> </span><span class=\"n\">type</span>\n<span class=\"w\">  </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">ParserDescr</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span>\n<span class=\"n\">but</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">type</span>\n<span class=\"w\">  </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">u</span><span class=\"bp\">.</span><span class=\"m\">144514</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u</span><span class=\"bp\">.</span><span class=\"m\">144514</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 440754791,
        "sender_full_name": "David Pearce",
        "timestamp": 1716771026
    },
    {
        "content": "<p>loogle lets you search by type signature, as well as by label segment</p>",
        "id": 440754796,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716771034
    },
    {
        "content": "<p>Yeah, i see</p>",
        "id": 440754819,
        "sender_full_name": "David Pearce",
        "timestamp": 1716771062
    },
    {
        "content": "<p>note that it has structured input, see the loogle docs</p>",
        "id": 440754838,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716771087
    },
    {
        "content": "<p>Yeah, and if I do that then <code>Array.extract</code> is the top hit.  Ok, so that works :)</p>",
        "id": 440754851,
        "sender_full_name": "David Pearce",
        "timestamp": 1716771110
    },
    {
        "content": "<p>if you want unstructured (natural language) input, there is also <a href=\"http://moogle.ai\">moogle.ai</a></p>",
        "id": 440754858,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716771118
    },
    {
        "content": "<p>and searching for \"Array slice\" on moogle actually yields Array.extract, near the bottom of the first page</p>",
        "id": 440754952,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716771185
    }
]