[
    {
        "content": "<p>I'm noticing something weird here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Batteries</span><span class=\"bp\">.</span><span class=\"n\">Data</span><span class=\"bp\">.</span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">Gcd</span>\n\n<span class=\"kn\">set_option</span><span class=\"w\"> </span><span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">compiler</span><span class=\"w\"> </span><span class=\"n\">true</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">gcd</span><span class=\"w\"> </span><span class=\"n\">b</span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">hg</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">    </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">  </span><span class=\"k\">else</span>\n<span class=\"w\">    </span><span class=\"n\">g</span>\n</code></pre></div>\n<p>this emits a trace of</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">compiler</span><span class=\"bp\">.</span><span class=\"n\">input</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">test</span>\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">gcd</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"bp\">;</span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">hg</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"n\">g</span>\n<span class=\"o\">[</span><span class=\"n\">compiler</span><span class=\"bp\">.</span><span class=\"n\">eta_expand</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">test</span>\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">gcd</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"bp\">;</span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">hg</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"n\">g</span>\n<span class=\"o\">[</span><span class=\"n\">compiler</span><span class=\"bp\">.</span><span class=\"n\">lcnf</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">test</span>\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"n\">x_1</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">gcd</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"bp\">;</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"n\">x_2</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">instDecidableCoprime</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"bp\">;</span>\n<span class=\"w\">  </span><span class=\"n\">Decidable</span><span class=\"bp\">.</span><span class=\"n\">casesOn</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"n\">x_2</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">hg</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"n\">x_1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">hg</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"n\">x_3</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">instHAdd</span><span class=\"bp\">;</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"n\">x_4</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"n\">x_3</span><span class=\"bp\">.</span><span class=\"m\">1</span><span class=\"bp\">;</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"n\">x_5</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">instOfNatNat</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"bp\">;</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"n\">x_6</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"n\">x_5</span><span class=\"bp\">.</span><span class=\"m\">1</span><span class=\"bp\">;</span>\n<span class=\"w\">    </span><span class=\"bp\">_</span><span class=\"n\">x_4</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"n\">x_1</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"n\">x_6</span>\n</code></pre></div>\n<p>This seems pretty strange, because <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=instDecidableCoprime#doc\">docs#instDecidableCoprime</a>  works by computing the gcd, and so here it gets computed twice.</p>",
        "id": 444708244,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718373958
    },
    {
        "content": "<p>I'm assuming that the tc synthesis comes up with that decidable procedure for the hg condition because it peeks into the definition of g. Not much the compiler itself can do about this.</p>",
        "id": 444708991,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1718374181
    },
    {
        "content": "<p>Nice catch, this is not the compiler's fault after all</p>",
        "id": 444709417,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718374301
    },
    {
        "content": "<p>I guess the fix is perhaps to mark <code>instDecidableCoprime</code> <code>@[inline}</code>?</p>",
        "id": 444709593,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718374349
    },
    {
        "content": "<p>Yep, that fixes it</p>",
        "id": 444710089,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718374506
    },
    {
        "content": "<p>How does the output of the compiler look in the end from the old example?</p>",
        "id": 444712305,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1718375183
    },
    {
        "content": "<p>I would have assumed it might inline the decision procedure on it's own and notice this but maybe the old compiler isn't smart enough for that</p>",
        "id": 444712371,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1718375209
    },
    {
        "content": "<p>The final output is</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x_1</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">@&amp;</span><span class=\"w\"> </span><span class=\"n\">obj</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x_2</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">@&amp;</span><span class=\"w\"> </span><span class=\"n\">obj</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">obj</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">x_3</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">obj</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">gcd</span><span class=\"w\"> </span><span class=\"n\">x_1</span><span class=\"w\"> </span><span class=\"n\">x_2</span><span class=\"bp\">;</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">x_4</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">u8</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">instDecidableCoprime</span><span class=\"w\"> </span><span class=\"n\">x_1</span><span class=\"w\"> </span><span class=\"n\">x_2</span><span class=\"bp\">;</span>\n<span class=\"w\">  </span><span class=\"n\">case</span><span class=\"w\"> </span><span class=\"n\">x_4</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">u8</span><span class=\"w\"> </span><span class=\"n\">of</span>\n<span class=\"w\">  </span><span class=\"n\">Bool</span><span class=\"bp\">.</span><span class=\"n\">false</span><span class=\"w\"> </span><span class=\"bp\">â</span>\n<span class=\"w\">    </span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"n\">x_3</span>\n<span class=\"w\">  </span><span class=\"n\">Bool</span><span class=\"bp\">.</span><span class=\"n\">true</span><span class=\"w\"> </span><span class=\"bp\">â</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">x_5</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">obj</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"bp\">;</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">x_6</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">obj</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"n\">x_3</span><span class=\"w\"> </span><span class=\"n\">x_5</span><span class=\"bp\">;</span>\n<span class=\"w\">    </span><span class=\"n\">dec</span><span class=\"w\"> </span><span class=\"n\">x_3</span><span class=\"bp\">;</span>\n<span class=\"w\">    </span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"n\">x_6</span>\n</code></pre></div>\n<p>before, and</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x_1</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">@&amp;</span><span class=\"w\"> </span><span class=\"n\">obj</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x_2</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">@&amp;</span><span class=\"w\"> </span><span class=\"n\">obj</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">obj</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">x_3</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">obj</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">gcd</span><span class=\"w\"> </span><span class=\"n\">x_1</span><span class=\"w\"> </span><span class=\"n\">x_2</span><span class=\"bp\">;</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">x_4</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">obj</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"bp\">;</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">x_5</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">u8</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">decEq</span><span class=\"w\"> </span><span class=\"n\">x_3</span><span class=\"w\"> </span><span class=\"n\">x_4</span><span class=\"bp\">;</span>\n<span class=\"w\">  </span><span class=\"n\">case</span><span class=\"w\"> </span><span class=\"n\">x_5</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">u8</span><span class=\"w\"> </span><span class=\"n\">of</span>\n<span class=\"w\">  </span><span class=\"n\">Bool</span><span class=\"bp\">.</span><span class=\"n\">false</span><span class=\"w\"> </span><span class=\"bp\">â</span>\n<span class=\"w\">    </span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"n\">x_3</span>\n<span class=\"w\">  </span><span class=\"n\">Bool</span><span class=\"bp\">.</span><span class=\"n\">true</span><span class=\"w\"> </span><span class=\"bp\">â</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">x_6</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">obj</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"n\">x_3</span><span class=\"w\"> </span><span class=\"n\">x_4</span><span class=\"bp\">;</span>\n<span class=\"w\">    </span><span class=\"n\">dec</span><span class=\"w\"> </span><span class=\"n\">x_3</span><span class=\"bp\">;</span>\n<span class=\"w\">    </span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"n\">x_6</span>\n</code></pre></div>\n<p>after</p>",
        "id": 444712838,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718375354
    },
    {
        "content": "<p>Right, I'm not quite sure if this is the right fix, maybe working the instance such that this ends up resolving to just dec eq on Nat works</p>",
        "id": 444713512,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1718375608
    },
    {
        "content": "<p>I think inlining the instance is still a good move; because it means</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">gcd</span><span class=\"w\"> </span><span class=\"n\">b</span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">Coprime</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">    </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">  </span><span class=\"k\">else</span>\n<span class=\"w\">    </span><span class=\"n\">g</span>\n</code></pre></div>\n<p>compiles to the optimal version</p>",
        "id": 444713809,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718375713
    },
    {
        "content": "<p>I think I'd go as far as saying that <em>every</em> decidable instance of the form <code>instance : Decidable Foo := inferInstanceAs &lt;| Decidable Bar</code> should be <code>@[inline]</code></p>",
        "id": 444713943,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718375759
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/Compiler.20inserts.20.60instDecidableCoprime.60.3F/near/444709593\">said</a>:</p>\n<blockquote>\n<p>I guess the fix is perhaps to mark <code>instDecidableCoprime</code> <code>@[inline}</code>?</p>\n</blockquote>\n<p>I think the fix is instead to delete <code>Nat.instDecidableCoprime</code> because <code>Nat.Coprime</code> is <code>@[reducible]</code>, so the instance is actually <code>Decidable (m.gcd n = 1)</code>, which is completely unnecessary.</p>",
        "id": 444751568,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718385738
    },
    {
        "content": "<p>Another workaround here is, but then <code>hg</code> needs a little work to put into a better form.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">gcd</span><span class=\"w\"> </span><span class=\"n\">b</span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">hg</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"bp\">==</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">    </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">  </span><span class=\"k\">else</span>\n<span class=\"w\">    </span><span class=\"n\">g</span>\n</code></pre></div>",
        "id": 444752041,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718385916
    },
    {
        "content": "<p>Ah, I missed that coprime was reducible. That explains why this is happening.</p>",
        "id": 444755396,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718386958
    },
    {
        "content": "<p>Inserting an <code>id</code> in the <code>let</code> is another workaround</p>",
        "id": 444755397,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718386958
    },
    {
        "content": "<p>Alternatively, perhaps Coprime should not be reducible</p>",
        "id": 444757259,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718387541
    },
    {
        "content": "<p>I'm not sure whether or not to report this as a Lean issue. Just in case, here's a Lean-only mwe.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">expensive</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"bp\">â</span><span class=\"w\"> </span><span class=\"n\">Nat</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">expensive</span><span class=\"w\"> </span><span class=\"n\">n</span>\n\n<span class=\"kn\">abbrev</span><span class=\"w\"> </span><span class=\"n\">IsExpensiveZero</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Prop</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">expensive</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">DecidablePred</span><span class=\"w\"> </span><span class=\"n\">IsExpensiveZero</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">inferInstance</span>\n\n<span class=\"kn\">set_option</span><span class=\"w\"> </span><span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">compiler</span><span class=\"w\"> </span><span class=\"n\">true</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">expensive</span><span class=\"w\"> </span><span class=\"n\">n</span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">    </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">  </span><span class=\"k\">else</span>\n<span class=\"w\">    </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">[compiler.lambda_pure] &gt;&gt; f := fun _x_1 =&gt;</span>\n<span class=\"cm\">  let _x_2 := expensive _x_1;</span>\n<span class=\"cm\">  let _x_3 := instDecidablePredNatIsExpensiveZero _x_1;</span>\n<span class=\"cm\">  Bool.casesOn _x_3</span>\n<span class=\"cm\">    (let _x_4 := 2;</span>\n<span class=\"cm\">    let _x_5 := Nat.add _x_2 _x_4;</span>\n<span class=\"cm\">    _x_5)</span>\n<span class=\"cm\">    (let _x_6 := 1;</span>\n<span class=\"cm\">    let _x_7 := Nat.add _x_2 _x_6;</span>\n<span class=\"cm\">    _x_7)</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 444760973,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718388675
    },
    {
        "content": "<p>I think probably Lean itself is not to blame here, and rather it's the user's fault for creating a non-inlinable instance about an inlineable def</p>",
        "id": 444763735,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718389657
    },
    {
        "content": "<p>The odd part here is why does one need to mark these<code>instance</code>s <code>@[inline]</code> in the first place? Instances are supposed to be inlined by default and <code>inferInstance</code> / <code>inferInstanceAs</code> are <code>abbrev</code> and thus marked <code>@[inline]</code>. What is making the commpiler think it does not need to inline it?</p>",
        "id": 444953485,
        "sender_full_name": "Mac Malone",
        "timestamp": 1718524815
    },
    {
        "content": "<p>Is there a reference for the \"inlined by default\" claim?</p>",
        "id": 444953690,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718524959
    },
    {
        "content": "<p>(the reducibility of <code>inferInstanceAs</code> is a distraction here, it's the decl generated by <code>instance</code> which doesn't reduce)</p>",
        "id": 444953784,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1718525050
    }
]