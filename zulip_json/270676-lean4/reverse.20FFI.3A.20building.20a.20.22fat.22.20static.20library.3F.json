[
    {
        "content": "<p>What I want to do is to build a single fat library that ships with <code>Batteries + Mathlib + &lt;my stuff&gt;</code>.  </p>\n<p>I am currently doing the following in my <code>lakefile.lean</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">default_target</span><span class=\"kd\">]</span>\n<span class=\"n\">lean_lib</span><span class=\"w\"> </span><span class=\"bp\">«</span><span class=\"n\">Monodrone</span><span class=\"bp\">»</span><span class=\"w\"> </span><span class=\"n\">where</span>\n<span class=\"w\">  </span><span class=\"n\">defaultFacets</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">LeanLib.staticExportFacet</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>This builds a<code>.lake/build/lib/libMonodrone.a</code>. However, the lean implementation of <code>libMonodrone</code> uses <code> Batteries.Data.RBMap</code> and <code>Mathlib.Order.Interval.Basic</code>. These dependencies on <code>mathlib</code> and <code>batteries</code> lead to link errors down the line when linking against <code>libMonodrone.a</code>, since the linker is unable to find:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"s2\">\"_initialize_Batteries_Data_RBMap\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">referenced</span><span class=\"w\"> </span><span class=\"k\">from</span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"bp\">_</span><span class=\"n\">initialize_Monodrone</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">libMonodrone</span><span class=\"bp\">.</span><span class=\"n\">a</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">](</span><span class=\"n\">Monodrone</span><span class=\"bp\">.</span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">o</span><span class=\"bp\">.</span><span class=\"kn\">export</span><span class=\"o\">)</span>\n<span class=\"s2\">\"_initialize_Mathlib_Order_Disjoint\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">referenced</span><span class=\"w\"> </span><span class=\"k\">from</span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"bp\">_</span><span class=\"n\">initialize_Monodrone</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">libMonodrone</span><span class=\"bp\">.</span><span class=\"n\">a</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">](</span><span class=\"n\">Monodrone</span><span class=\"bp\">.</span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">o</span><span class=\"bp\">.</span><span class=\"kn\">export</span><span class=\"o\">)</span>\n<span class=\"s2\">\"_initialize_Mathlib_Order_Interval_Basic\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">referenced</span><span class=\"w\"> </span><span class=\"k\">from</span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"bp\">_</span><span class=\"n\">initialize_Monodrone</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">libMonodrone</span><span class=\"bp\">.</span><span class=\"n\">a</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">](</span><span class=\"n\">Monodrone</span><span class=\"bp\">.</span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">o</span><span class=\"bp\">.</span><span class=\"kn\">export</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I was hoping to build a \"fat static library\" that includes everything transitively imported from <code>mathlib</code> and <code>batteries</code> as well. In my naive imagination, since <code>lake</code> already knows enough to build the associated object files, it ought to know enough to build the static library as well? </p>\n<p>CC <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span></p>",
        "id": 440460506,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1716537866
    },
    {
        "content": "<p>OK, here's a solution, I'd need <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> 's review on it to know if it's sane or not. I modified <code>`Lake.LeanLib.recCollectLocalModules</code> to collect all (not necessarily local) modules and smash it into a single object file:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Lake</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Lake.Build.Library</span>\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Lake</span><span class=\"w\"> </span><span class=\"n\">DSL</span>\n\n<span class=\"n\">partial</span><span class=\"w\"> </span><span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">Lake.LeanLib.collectAllModulesForFatlib</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">self</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">LeanLib</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">FetchM</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Array</span><span class=\"w\"> </span><span class=\"n\">Module</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">mut</span><span class=\"w\"> </span><span class=\"n\">mods</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[]</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">mut</span><span class=\"w\"> </span><span class=\"n\">modSet</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">ModuleSet.empty</span>\n<span class=\"w\">  </span><span class=\"n\">for</span><span class=\"w\"> </span><span class=\"n\">mod</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">self.getModuleArray</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">mods</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">modSet</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">go</span><span class=\"w\"> </span><span class=\"n\">mod</span><span class=\"w\"> </span><span class=\"n\">mods</span><span class=\"w\"> </span><span class=\"n\">modSet</span>\n<span class=\"w\">  </span><span class=\"n\">return</span><span class=\"w\"> </span><span class=\"n\">mods</span>\n<span class=\"n\">where</span>\n<span class=\"w\">  </span><span class=\"n\">go</span><span class=\"w\"> </span><span class=\"n\">root</span><span class=\"w\"> </span><span class=\"n\">mods</span><span class=\"w\"> </span><span class=\"n\">modSet</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">mut</span><span class=\"w\"> </span><span class=\"n\">mods</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">mods</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">mut</span><span class=\"w\"> </span><span class=\"n\">modSet</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">modSet</span>\n<span class=\"w\">    </span><span class=\"n\">unless</span><span class=\"w\"> </span><span class=\"n\">modSet.contains</span><span class=\"w\"> </span><span class=\"n\">root</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">      </span><span class=\"n\">modSet</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">modSet.insert</span><span class=\"w\"> </span><span class=\"n\">root</span>\n<span class=\"w\">      </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">imps</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">root.imports.fetch</span>\n<span class=\"w\">      </span><span class=\"n\">for</span><span class=\"w\"> </span><span class=\"n\">mod</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">imps</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">          </span><span class=\"o\">(</span><span class=\"n\">mods</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">modSet</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">go</span><span class=\"w\"> </span><span class=\"n\">mod</span><span class=\"w\"> </span><span class=\"n\">mods</span><span class=\"w\"> </span><span class=\"n\">modSet</span>\n<span class=\"w\">      </span><span class=\"n\">mods</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">mods.push</span><span class=\"w\"> </span><span class=\"n\">root</span>\n<span class=\"w\">    </span><span class=\"n\">return</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">mods</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">modSet</span><span class=\"o\">)</span>\n\n\n<span class=\"sd\">/-- The path to the static fat library in the package's `libDir`. -/</span>\n<span class=\"kd\">@[</span><span class=\"n\">inline</span><span class=\"kd\">]</span><span class=\"w\"> </span><span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">fatStaticFile</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">self</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">LeanLib</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">FilePath</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"n\">self.pkg.nativeLibDir</span><span class=\"w\"> </span><span class=\"bp\">/</span><span class=\"w\"> </span><span class=\"n\">nameToStaticLib</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{self.config.libName}Fat\"</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">specialize</span><span class=\"kd\">]</span><span class=\"w\"> </span><span class=\"kn\">protected</span><span class=\"w\"> </span><span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">LeanLib.buildFatStatic</span>\n<span class=\"o\">(</span><span class=\"n\">self</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">LeanLib</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">FetchM</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">BuildJob</span><span class=\"w\"> </span><span class=\"n\">FilePath</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"n\">withRegisterJob</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{self.name}:fatStatic\"</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">mods</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">self.collectAllModulesForFatlib</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">++</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">self.modules.fetch</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"c1\">-- trace s!\"{self.name}:static{suffix} modules: {mods.map (·.name)}\"</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">oJobs</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">mods.concatMapM</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">mod</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">mod.nativeFacets</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">shouldExport</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">true</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">|&gt;.</span><span class=\"n\">mapM</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">facet</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">fetch</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"n\">mod.facet</span><span class=\"w\"> </span><span class=\"n\">facet.name</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">libFile</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">fatStaticFile</span><span class=\"w\"> </span><span class=\"n\">self</span>\n<span class=\"w\">  </span><span class=\"n\">IO.println</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"successfully built: {libFile}\"</span>\n<span class=\"w\">  </span><span class=\"n\">buildStaticLib</span><span class=\"w\"> </span><span class=\"n\">libFile</span><span class=\"w\"> </span><span class=\"n\">oJobs</span>\n\n\n<span class=\"n\">library_facet</span><span class=\"w\"> </span><span class=\"n\">fatStatic</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">lib</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">LeanLib</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">FilePath</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"n\">LeanLib.buildFatStatic</span><span class=\"w\"> </span><span class=\"n\">lib</span>\n\n<span class=\"n\">package</span><span class=\"w\"> </span><span class=\"bp\">«</span><span class=\"n\">Monodrone</span><span class=\"bp\">»</span><span class=\"w\"> </span><span class=\"n\">where</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">default_target</span><span class=\"kd\">]</span>\n<span class=\"n\">lean_lib</span><span class=\"w\"> </span><span class=\"bp\">«</span><span class=\"n\">Monodrone</span><span class=\"bp\">»</span><span class=\"w\"> </span><span class=\"n\">where</span>\n<span class=\"w\">  </span><span class=\"n\">defaultFacets</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"ss\">`fatStatic</span><span class=\"o\">]</span>\n\n<span class=\"n\">require</span><span class=\"w\"> </span><span class=\"n\">mathlib</span><span class=\"w\"> </span><span class=\"k\">from</span><span class=\"w\"> </span><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"s2\">\"https://github.com/leanprover-community/mathlib4\"</span><span class=\"w\"> </span><span class=\"bp\">@</span><span class=\"w\"> </span><span class=\"s2\">\"86653eb\"</span>\n</code></pre></div>\n<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> could you let me know if this is a sane solution?</p>",
        "id": 440498963,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1716553575
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span> Looks good to me! One minor comment is that you should not need to import <code>Lake.Build.Library</code>; that is already part of <code>import Lake</code>.Also, this made me realize the <code>recCollectLocalModules</code> code should really be using <code>OrdModuleSet</code> (I think the only reason it isn't is because <code>OrdModuleSet</code> was added later).</p>",
        "id": 440538237,
        "sender_full_name": "Mac Malone",
        "timestamp": 1716567163
    },
    {
        "content": "<p>Also, since you are simply trying to fetch the transitive imports, one could forgo the recursion in <code>go</code> entirely and just collect the <code>root.transImports.fetch</code>on the elements of libraries module array.</p>",
        "id": 440539093,
        "sender_full_name": "Mac Malone",
        "timestamp": 1716567501
    },
    {
        "content": "<p>Okay, will PR this later tonight, thanks!</p>",
        "id": 440542637,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1716568816
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> PR'd at <a href=\"https://github.com/leanprover/lean4/pull/4271\">https://github.com/leanprover/lean4/pull/4271</a>. It's a draft since I want to check that CI passes on Windows.</p>",
        "id": 440585115,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1716589334
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span> Oh, I didn't realize you were suggesting this as a PR.</p>",
        "id": 440585181,
        "sender_full_name": "Mac Malone",
        "timestamp": 1716589392
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> aha, I didn't realise I didn't make that clear! Sorry about that. Yes, I believe it deserves to live upstream, since I would imagine that I (and other users) who use Lean for \"reverse\" FFI scenarios would benefit from by linking against lean dependencies this way, especially in complex cross-language scenarios.</p>",
        "id": 440585379,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1716589513
    },
    {
        "content": "<p>What do you feel?</p>",
        "id": 440585409,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1716589533
    },
    {
        "content": "<p>It seems reasonable to me. </p>\n<p>The PR is a bit big, so it will take some time to review. I am also on vacation next week, so I probably won't get around to it until June.</p>",
        "id": 440586186,
        "sender_full_name": "Mac Malone",
        "timestamp": 1716590038
    },
    {
        "content": "<p>Thanks! I too find it compelling to be in lean proper.</p>\n<p>Note that the changes to <code>lake</code> are small, and you already reviewed it in the chat. I added your sugggestion of using <code>mod.transImports.fetch </code>. The larger part of the change is another example that showcases how to use it in a new example in a library with a dependency, which has been adapted from the already existing example of <code>reverse-ffi</code></p>\n<p>Also, enjoy your vacations! <span aria-label=\"beach\" class=\"emoji emoji-1f3d6\" role=\"img\" title=\"beach\">:beach:</span></p>",
        "id": 440586602,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1716590288
    }
]