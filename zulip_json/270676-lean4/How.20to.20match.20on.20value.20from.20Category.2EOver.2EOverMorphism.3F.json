[
    {
        "content": "<p>I'm wondering, what is the \"right\" way to deconstruct an over-category morphism? Say we've got <code>X Y : Over Z</code> and  <code>f : X ⟶ Y</code>, how can we decompose it into some <code>Category.Over.homMk (f' : X.left ⟶ Y.left) (pf : f' ≫ Y.hom = X.hom )</code>? </p>\n<p>I know I can get those fields with the accessors, but what about when <code>f</code> occurs in my goal and I want the goal and hypotheses rewritten?</p>\n<p>Directly matching on it gives a <code>CommaMorphism</code>, which means that all of the lemmas about over categories require a ton of rewriting.</p>",
        "id": 439262159,
        "sender_full_name": "Joey Eremondi",
        "timestamp": 1715965824
    },
    {
        "content": "<p>(Can someone move this to <a class=\"stream\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4\">#mathlib4</a> ?)</p>",
        "id": 439269328,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715968842
    },
    {
        "content": "<p>For <code>CostructuredArrow</code>, there are <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.CostructuredArrow.eq_mk#doc\">docs#CategoryTheory.CostructuredArrow.eq_mk</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.CostructuredArrow.eta#doc\">docs#CategoryTheory.CostructuredArrow.eta</a> but it appears that no one has specialized them to <code>Over</code> yet. Note though that in my experience  trying to destruct morphisms in comma categories can easily lead you into DTT hell, so there might be a better way to achieve your goal (see <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a>)</p>",
        "id": 439279643,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1715973562
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260921\">@Markus Himmel</span> Yes I am absolutely currently in DTT hell, I'm about to start another thread asking about how to resolve that. Thanks.</p>",
        "id": 439279702,
        "sender_full_name": "Joey Eremondi",
        "timestamp": 1715973602
    },
    {
        "content": "<p>See <a href=\"#narrow/stream/270676-lean4/topic/DTT.20hell.3A.20How.20to.20debug.20when.20equal.20things.20aren't.20equal.3F\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/DTT.20hell.3A.20How.20to.20debug.20when.20equal.20things.20aren't.20equal.3F</a></p>",
        "id": 439281801,
        "sender_full_name": "Joey Eremondi",
        "timestamp": 1715974667
    }
]