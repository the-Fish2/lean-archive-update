[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">combination_of_the_generators</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">EuclideanSpace</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)}</span>\n  <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lambda</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hlambda</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">lambda</span> <span class=\"bp\">∧</span> <span class=\"n\">lambda</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">NNReal</span> <span class=\"o\">(</span><span class=\"n\">lambda</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">lambda</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">sumK</span> <span class=\"n\">s</span> <span class=\"n\">vmatrix</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">s</span> <span class=\"n\">i</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hx</span> <span class=\"bp\">→</span> <span class=\"o\">⟨</span><span class=\"n\">sx</span><span class=\"o\">,</span> <span class=\"n\">hx_def</span><span class=\"o\">,</span> <span class=\"n\">hsx</span><span class=\"o\">⟩</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hy</span> <span class=\"bp\">→</span> <span class=\"o\">⟨</span><span class=\"n\">sy</span><span class=\"o\">,</span> <span class=\"n\">hy_def</span><span class=\"o\">,</span> <span class=\"n\">hsy</span><span class=\"o\">⟩,</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">NNReal</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">⟨</span><span class=\"n\">lambda</span> <span class=\"bp\">*</span> <span class=\"n\">sx</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">lambda</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">sy</span> <span class=\"n\">i</span><span class=\"o\">⟩</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">apply</span> <span class=\"n\">add_nonneg</span>\n      <span class=\"n\">apply</span> <span class=\"n\">mul_nonneg</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">hlambda.left</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hsx</span> <span class=\"n\">i</span> <span class=\"o\">}</span>  <span class=\"c1\">-- lambda * sx i is non-negative</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">sub_nonneg_of_le</span> <span class=\"n\">hlambda.right</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hsy</span> <span class=\"n\">i</span> <span class=\"o\">}</span>  <span class=\"c1\">-- (1 - lambda) * sy i is non-negative</span>\n\n  <span class=\"n\">use</span> <span class=\"n\">s</span>\n  <span class=\"n\">split</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hx_def</span><span class=\"o\">,</span> <span class=\"n\">hy_def</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">sumK</span><span class=\"o\">,</span> <span class=\"n\">finset.sum_add_distrib</span><span class=\"o\">,</span> <span class=\"n\">finset.smul_sum</span><span class=\"o\">,</span> <span class=\"n\">add_smul</span><span class=\"o\">,</span> <span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">pi.add_apply</span><span class=\"o\">],</span>\n    <span class=\"n\">congr</span><span class=\"o\">,</span>\n    <span class=\"n\">ext</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">subtype.coe_mk</span><span class=\"o\">]</span>\n  <span class=\"o\">}</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prop</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 436574402,
        "sender_full_name": "Katherine Wei",
        "timestamp": 1714598241
    },
    {
        "content": "<p>Can you make your code a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> by adding any relevant imports? And what is your question? Your code seems to be sorry-free. Can you ask your question as a <code>sorry</code> in Lean rather than in informal language?</p>",
        "id": 436576448,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714599174
    },
    {
        "content": "<p>And this code relies on mathlib so should be in the mathlib4 stream (but I can't move it). And it looks like Lean 3 code so you are far less likely to get help with it. Why not switch to Lean 4? Lean 3 is now end-of-life.</p>",
        "id": 436576643,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714599270
    }
]