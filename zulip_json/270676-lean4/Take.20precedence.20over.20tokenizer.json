[
    {
        "content": "<p>I want to have nice notation for the homotopy groups using unicode subscript characters, that is, to parse strings like “πₙ₊₂(A, a)”; but (unfortunately) tokenizer is too eager so that “πₙ” is parsed as an separate identifier. Issue can be easily resolved by replacing “π” with non-identifier (something like 𝛑 or π + Zero Width Space), however, this seems to be too hacky. Is there any way to take precedence over tokenizer?</p>",
        "id": 409824305,
        "sender_full_name": "Siegmentation Fault",
        "timestamp": 1703432764
    },
    {
        "content": "<p>Can you provide a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> of what you tried that <em>didn't</em> work?</p>",
        "id": 409826835,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703435246
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/Take.20precedence.20over.20tokenizer/near/409826835\">said</a>:</p>\n<blockquote>\n<p>Can you provide a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> of what you tried that <em>didn't</em> work?</p>\n</blockquote>\n<p>Of course:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Lean.Parser</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">subscript</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"ᵢ\"</span> <span class=\"o\">:</span> <span class=\"n\">subscript</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"ⱼ\"</span> <span class=\"o\">:</span> <span class=\"n\">subscript</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"ₙ\"</span> <span class=\"o\">:</span> <span class=\"n\">subscript</span>\n\n<span class=\"n\">macro</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"s2\">\"π\"</span> <span class=\"n\">noWs</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">subscript</span> <span class=\"n\">noWs</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">τ</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\",\"</span> <span class=\"n\">ε</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"gr\">sorry</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">π</span><span class=\"bp\">ᵢ</span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"c1\">-- unknown identifier 'πᵢ'</span>\n</code></pre></div>",
        "id": 409827752,
        "sender_full_name": "Siegmentation Fault",
        "timestamp": 1703436267
    },
    {
        "content": "<p>It doesn't answer your question, but you might find <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Util/Superscript.html#Mathlib.Tactic.subscript\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Util/Superscript.html#Mathlib.Tactic.subscript</a> useful</p>",
        "id": 409842767,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703452437
    }
]