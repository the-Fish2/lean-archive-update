[
    {
        "content": "<p>Is there a way to instantiate all delayed mvars in the context which delayed mvars can be deduced?</p>\n<p>For example, the type of this expression</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">Nat.le_trans</span> <span class=\"mi\">2</span> <span class=\"mi\">2</span> <span class=\"mi\">5</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">of_eq_true</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">LE.le</span> <span class=\"n\">Nat</span> <span class=\"n\">instLENat</span> <span class=\"mi\">2</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">eq_true</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">LE.le</span> <span class=\"n\">Nat</span> <span class=\"n\">instLENat</span> <span class=\"mi\">2</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Nat.le_refl</span> <span class=\"mi\">2</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">of_eq_true</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">LE.le</span> <span class=\"n\">Nat</span> <span class=\"n\">instLENat</span> <span class=\"mi\">2</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">eq_true_of_decide</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">LE.le</span> <span class=\"n\">Nat</span> <span class=\"n\">instLENat</span> <span class=\"mi\">2</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Nat.decLe</span> <span class=\"mi\">2</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Eq.refl</span> <span class=\"n\">Bool</span> <span class=\"n\">Bool.true</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>is <code>2 &lt;= 5</code>, but the raw expression tree of this <code>2 &lt;= 5</code> contains delayed mvars of the form</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">OfNat.ofNat</span> <span class=\"n\">_</span> <span class=\"mi\">2</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 430327802,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1711752734
    },
    {
        "content": "<p><code>instantiateMVars</code> handles delayed assignment metavariables that can be instantiated</p>",
        "id": 430333947,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711756410
    }
]