[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.TensorProduct</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Finsupp</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Quotient</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">TensorProduct</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">α</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">k</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→₀</span> <span class=\"n\">k</span><span class=\"o\">)))</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→₀</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">⧸</span> <span class=\"n\">S</span> <span class=\"c1\">-- fails to synthesise HasQuotient instance</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→₀</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span> <span class=\"c1\">-- shortcut</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→₀</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">⧸</span> <span class=\"n\">S</span> <span class=\"c1\">-- now works fine</span>\n</code></pre></div>\n<p>The relevant instance trace is</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>[Meta.synthInstance] ❌ HasQuotient (A ⊗[k] (α →₀ k)) (Submodule k (A ⊗[k] (α →₀ k))) ▼\n  [] new goal HasQuotient _tc.0 (Submodule k (A ⊗[k] (α →₀ k))) ▶\n  [] ❌ apply @Submodule.hasQuotient to HasQuotient ?m.2747 (Submodule k (A ⊗[k] (α →₀ k))) ▼\n    [tryResolve] ❌ HasQuotient ?m.2747 (Submodule k (A ⊗[k] (α →₀ k))) ≟ HasQuotient ?m.2752 (Submodule ?m.2751 ?m.2752) ▼\n      [] ✅ Ring k ▶\n      [] ❌ AddCommGroup (A ⊗[k] (α →₀ k)) ▼\n        [] new goal AddCommGroup (A ⊗[k] (α →₀ k)) ▶\n        [] ❌ apply inst✝¹ to AddCommGroup (A ⊗[k] (α →₀ k)) ▶\n        [] ❌ apply @TensorProduct.addCommGroup to AddCommGroup (A ⊗[k] (α →₀ k)) ▼\n          [tryResolve] ❌ AddCommGroup (A ⊗[k] (α →₀ k)) ≟ AddCommGroup (?m.2830 ⊗[?m.2828] ?m.2831) ▼\n            [] ❌ AddCommGroup (α →₀ k) ▼\n              [] new goal AddCommGroup (α →₀ k) ▶\n              [] ❌ apply inst✝¹ to AddCommGroup (α →₀ k) ▶\n              [] ❌ apply @Finsupp.addCommGroup to AddCommGroup (α →₀ k) ▼\n                [tryResolve] ❌ AddCommGroup (α →₀ k) ≟ AddCommGroup (?m.2851 →₀ ?m.2852)\n</code></pre></div>\n<p>and the last line is the inexplicable failure. Is it something to do with computability?</p>",
        "id": 419350197,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706829185
    },
    {
        "content": "<p>It isn’t computability because the <code>#check</code> still works if you remove the <code>noncomputable</code> attribute. You only get an error about not generating IR</p>",
        "id": 419358823,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1706833186
    },
    {
        "content": "<p>Something isn’t being unfolded</p>",
        "id": 419358894,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1706833208
    },
    {
        "content": "<p>At some point it reaches </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">AddMonoid.toAddSemigroup</span> <span class=\"bp\">=?=</span> <span class=\"n\">TensorProduct.addSemigroup</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→₀</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>What is supposed to happen: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">AddMonoid.toAddSemigroup</span> <span class=\"bp\">=?=</span> <span class=\"n\">TensorProduct.addSemigroup</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→₀</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">TensorProduct.addSemigroup</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→₀</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"n\">TensorProduct.addSemigroup</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→₀</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">A</span> <span class=\"bp\">=?=</span> <span class=\"n\">A</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">α</span> <span class=\"bp\">→₀</span> <span class=\"n\">k</span> <span class=\"bp\">=?=</span> <span class=\"n\">α</span> <span class=\"bp\">→₀</span> <span class=\"n\">k</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">k</span> <span class=\"bp\">=?=</span> <span class=\"n\">k</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">CommRing.toCommSemiring</span> <span class=\"bp\">=?=</span> <span class=\"n\">CommRing.toCommSemiring</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">AddCommGroup.toAddCommMonoid</span> <span class=\"bp\">=?=</span> <span class=\"n\">AddCommGroup.toAddCommMonoid</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">AddCommGroup.toAddCommMonlean</span><span class=\"bp\">=?=</span> <span class=\"n\">Finsupp.addCommMonoid</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">inst</span><span class=\"bp\">✝</span> <span class=\"bp\">=?=</span> <span class=\"n\">inst</span><span class=\"bp\">✝</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">Finsupp.module</span> <span class=\"n\">α</span> <span class=\"n\">k</span> <span class=\"bp\">=?=</span> <span class=\"n\">Finsupp.module</span> <span class=\"n\">α</span> <span class=\"n\">k</span>\n</code></pre></div>\n<p>What actually does </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddMonoid.toAddSemigroup</span> <span class=\"bp\">=?=</span> <span class=\"n\">TensorProduct.addSemigroup</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→₀</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n                          <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddMonoid.toAddSemigroup</span> <span class=\"bp\">=?=</span> <span class=\"k\">let</span> <span class=\"n\">src</span> <span class=\"o\">:=</span> <span class=\"n\">AddCon.addMonoid</span> <span class=\"o\">(</span><span class=\"n\">addConGen</span> <span class=\"o\">(</span><span class=\"n\">TensorProduct.Eqv</span> <span class=\"n\">k</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→₀</span> <span class=\"n\">k</span><span class=\"o\">)))</span><span class=\"bp\">;</span>\n                              <span class=\"n\">AddSemigroup.mk</span>\n                                <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                                  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">AddCon.Quotient</span> <span class=\"o\">(</span><span class=\"n\">addConGen</span> <span class=\"o\">(</span><span class=\"n\">TensorProduct.Eqv</span> <span class=\"n\">k</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→₀</span> <span class=\"n\">k</span><span class=\"o\">)))),</span>\n                                    <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"bp\">▶</span>\n</code></pre></div>\n<p>It looks like it’s having trouble filling a metavariable for <code>R</code> in the tensor product with <code>k</code></p>",
        "id": 419701711,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1707056134
    },
    {
        "content": "<p>A trace class for the branching logic of unification would be nice</p>",
        "id": 419702080,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1707056502
    },
    {
        "content": "<p>I came back to this today. I've stripped the example down to importing <code>Algebra.Ring.Basic</code>. It's a delicate minimisation problem -- you make one false move and suddenly it all magically works again. An empirical observation is that when it works, the trace looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>[Meta.synthInstance] ✅ HasQuotient (TensorProduct k A (Finsupp α k)) (Submodule k (TensorProduct k A (Finsupp α k))) ▼\n  [] new goal HasQuotient _tc.0 (Submodule k (TensorProduct k A (Finsupp α k))) ▶\n  [] ✅ apply @Submodule.hasQuotient to HasQuotient (TensorProduct k A (Finsupp α k))\n        (Submodule k (TensorProduct k A (Finsupp α k))) ▼\n    [tryResolve] ✅ HasQuotient (TensorProduct k A (Finsupp α k))\n          (Submodule k\n            (TensorProduct k A\n              (Finsupp α\n                k))) ≟ HasQuotient (TensorProduct k A (Finsupp α k)) (Submodule k (TensorProduct k A (Finsupp α k)))\n</code></pre></div>\n<p>and the <code>[tryResolve]</code> for <code>HasQuotient</code> has no metavariables in. But when it's failing (like the example I post below), the trace looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>[Meta.synthInstance] ❌ HasQuotient (TensorProduct k A (Finsupp α k)) (Submodule k (TensorProduct k A (Finsupp α k))) ▼\n  [] new goal HasQuotient _tc.0 (Submodule k (TensorProduct k A (Finsupp α k))) ▶\n  [] ❌ apply @Submodule.hasQuotient to HasQuotient ?m.6925 (Submodule k (TensorProduct k A (Finsupp α k))) ▼\n    [tryResolve] ❌ HasQuotient ?m.6925 (Submodule k (TensorProduct k A (Finsupp α k))) ≟ HasQuotient ?m.6928 (Submodule ?m.6927 ?m.6928) ▶\n</code></pre></div>\n<p>i.e. there's a bunch of metavariables in <code>[tryResolve]</code>. </p>\n<p>I have no understanding of what encourages the metavariables to appear/disappear; I just try simplifying the problem a bit and sometimes it's metavariables, sometimes it isn't.</p>",
        "id": 420823402,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707590670
    },
    {
        "content": "<p>Mathlib-free! It's totally weird: one way to fix it is to change the definition of <code>Ring</code> so it extends the two things in the other order.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Zero</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n\n<span class=\"c1\">-- Note: no need to extend Zero mathematically, as it's in `AddCommGroup`, but if we</span>\n<span class=\"c1\">-- don't extend `Zero` then the problem goes away, and if we</span>\n<span class=\"c1\">-- extend `AddCommGroup` first and then `Zero` the problem also goes waway.</span>\n<span class=\"c1\">-- note: in mathlib this is what is happening (we extend two things both of which have a zero</span>\n<span class=\"c1\">-- in the definition of `Ring`)</span>\n<span class=\"kd\">class</span> <span class=\"n\">Ring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Zero</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">AddCommGroup</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Module</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Submodule</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">HasQuotient</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"bp\">&lt;|</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">quotient'</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Submodule.hasQuotient</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]:</span> <span class=\"n\">HasQuotient</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">M</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">TensorProduct</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">Unit</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">TensorProduct.zero</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n    <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"n\">TensorProduct</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">({</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">unit</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Zero</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"c1\">-- or `sorry`</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">TensorProduct.addCommGroup</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">TensorProduct</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">TensorProduct.zero</span> <span class=\"k\">with</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">TensorProduct.module</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n    <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">TensorProduct</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"o\">}</span>\n\n <span class=\"c1\">-- if you remove `[Zero M]` then the problem goes away</span>\n<span class=\"kd\">def</span> <span class=\"n\">Finsupp</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">Unit</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Finsupp.zero</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"n\">Finsupp</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span> <span class=\"c1\">-- replacing with `{ zero := sorry}` makes the problem go away?!</span>\n      <span class=\"c1\">-- in the original example from mathlib there is no sorry at all</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Finsupp.addCommGroup</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">Finsupp</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">Finsupp.zero</span> <span class=\"k\">with</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Finsupp.module</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">Finsupp</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">k</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- set_option trace.Meta.synthInstance true in</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">HasQuotient</span> <span class=\"o\">(</span><span class=\"n\">TensorProduct</span> <span class=\"n\">k</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">Finsupp</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Submodule</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">TensorProduct</span> <span class=\"n\">k</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">Finsupp</span> <span class=\"n\">k</span><span class=\"o\">)))</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"c1\">-- the trace indicates that this is the instance which typeclass inference gives up on,</span>\n<span class=\"c1\">-- but it's easily found</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">Finsupp</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n\n<span class=\"c1\">-- and now the original `#synth` works fine</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">HasQuotient</span> <span class=\"o\">(</span><span class=\"n\">TensorProduct</span> <span class=\"n\">k</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">Finsupp</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Submodule</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">TensorProduct</span> <span class=\"n\">k</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">Finsupp</span> <span class=\"n\">k</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>The trace looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>[Meta.synthInstance] ❌ HasQuotient (TensorProduct k A (Finsupp k)) (Submodule k (TensorProduct k A (Finsupp k))) ▼\n  [] new goal HasQuotient _tc.0 (Submodule k (TensorProduct k A (Finsupp k))) ▶\n  [] ✅ apply @Submodule.hasQuotient to HasQuotient (TensorProduct k A (Finsupp k))\n        (Submodule k (TensorProduct k A (Finsupp k))) ▶\n  [] ❌ apply inst✝¹ to AddCommGroup (TensorProduct k A (Finsupp k)) ▶\n  [] ❌ apply @TensorProduct.addCommGroup to AddCommGroup (TensorProduct k A (Finsupp k)) ▼\n    [tryResolve] ❌ AddCommGroup (TensorProduct k A (Finsupp k)) ≟ AddCommGroup (TensorProduct ?m.1245 ?m.1247 ?m.1248) ▼\n      [] ✅ AddCommGroup A ▶\n      [] ❌ AddCommGroup (Finsupp k) ▼\n        [] result &lt;not-available&gt; (cached)\n</code></pre></div>\n<p>With <code>pp.all</code> both the <code>&lt;not-available&gt;</code> instance and the instance found by typeclass inference in the shortcut are <code>AddCommGroup (@Finsupp k (@Ring.toZero k inst✝²))</code> (so syntactically equal).</p>\n<p>Vague conjecture: changing the definition of <code>Ring</code> in mathlib from</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Ring</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">AddCommGroup</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">AddGroupWithOne</span> <span class=\"n\">R</span>\n</code></pre></div>\n<p>to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Ring</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">AddCommGroup</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">AddGroupWithOne</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>might fix this. But I have no idea what's going on. Hopefully the minimisation can make it easier for others to find out. The wall I hit is that I cannot see any more details about what <code>tryResolve</code> is doing and in particular why it's failing.</p>",
        "id": 420833068,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707599463
    },
    {
        "content": "<p>Indeed I have just confirmed that changing the definition of <code>Ring</code> in mathlib from</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Ring</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">AddCommGroup</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">AddGroupWithOne</span> <span class=\"n\">R</span>\n</code></pre></div>\n<p>to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Ring</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">AddCommGroup</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">AddGroupWithOne</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">Semiring</span> <span class=\"n\">R</span>\n</code></pre></div>\n<p>makes the original error at the top of this thread disappear.</p>\n<p>This is ridiculously brittle. What are we supposed to be doing here? Are there guidelines for how we are supposed to build the algebra heirarchy? And are we not following them? <span class=\"user-mention\" data-user-id=\"110050\">@Sébastien Gouëzel</span> you understood this at some point. Does my suggestion fit into your understanding of things or is this a new phenomenon?</p>",
        "id": 420833623,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707600111
    },
    {
        "content": "<p>Amelia (who found the original issue) points out that I can remove the tensor product from the mix:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Zero</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n\n<span class=\"c1\">-- switching the order makes the issue go away</span>\n<span class=\"kd\">class</span> <span class=\"n\">Ring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Zero</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">AddCommGroup</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Module</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Submodule</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">HasQuotient</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"bp\">&lt;|</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">quotient'</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Submodule.hasQuotient</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]:</span> <span class=\"n\">HasQuotient</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">M</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Finsupp</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">Unit</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Finsupp.zero</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"n\">Finsupp</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span> <span class=\"c1\">-- replacing with `{ zero := sorry}` makes the problem go away?!</span>\n      <span class=\"c1\">-- in the original example from mathlib there is no sorry at all</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Finsupp.addCommGroup</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">Finsupp</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">Finsupp.zero</span> <span class=\"k\">with</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Finsupp.module</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">Finsupp</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">k</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- set_option trace.Meta.synthInstance true in</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">HasQuotient</span> <span class=\"o\">(</span><span class=\"n\">Finsupp</span> <span class=\"o\">(</span><span class=\"n\">Finsupp</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Submodule</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">Finsupp</span> <span class=\"o\">(</span><span class=\"n\">Finsupp</span> <span class=\"n\">k</span><span class=\"o\">)))</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"c1\">-- the trace indicates that this is the instance which typeclass inference gives up on,</span>\n<span class=\"c1\">-- but it's easily found</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">Finsupp</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n\n<span class=\"c1\">-- and now the original `#synth` works fine</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">HasQuotient</span> <span class=\"o\">(</span><span class=\"n\">Finsupp</span> <span class=\"o\">(</span><span class=\"n\">Finsupp</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Submodule</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">Finsupp</span> <span class=\"o\">(</span><span class=\"n\">Finsupp</span> <span class=\"n\">k</span><span class=\"o\">)))</span> <span class=\"c1\">-- works</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">Failing trace:</span>\n\n<span class=\"cm\">[Meta.synthInstance] ❌ HasQuotient (Finsupp (Finsupp k)) (Submodule k (Finsupp (Finsupp k))) ▼</span>\n<span class=\"cm\">  [] new goal HasQuotient _tc.0 (Submodule k (Finsupp (Finsupp k))) ▶</span>\n<span class=\"cm\">  [] ❌ apply @Submodule.hasQuotient to HasQuotient ?m.639 (Submodule k (Finsupp (Finsupp k))) ▼</span>\n<span class=\"cm\">    [tryResolve] ❌ HasQuotient ?m.639 (Submodule k (Finsupp (Finsupp k))) ≟ HasQuotient ?m.642 (Submodule ?m.641 ?m.642) ▼</span>\n<span class=\"cm\">      [] ✅ Ring k ▶</span>\n<span class=\"cm\">      [] ❌ AddCommGroup (Finsupp (Finsupp k)) ▼</span>\n<span class=\"cm\">        [] new goal AddCommGroup (Finsupp (Finsupp k)) ▶</span>\n<span class=\"cm\">        [] ❌ apply @Finsupp.addCommGroup to AddCommGroup (Finsupp (Finsupp k)) ▼</span>\n<span class=\"cm\">          [tryResolve] ❌ AddCommGroup (Finsupp (Finsupp k)) ≟ AddCommGroup (Finsupp ?m.655) ▼</span>\n<span class=\"cm\">            [] ❌ AddCommGroup (Finsupp k) ▼</span>\n<span class=\"cm\">              [] new goal AddCommGroup (Finsupp k) ▶</span>\n<span class=\"cm\">              [] ❌ apply @Finsupp.addCommGroup to AddCommGroup (Finsupp k) ▼</span>\n<span class=\"cm\">                [tryResolve] ❌ AddCommGroup (Finsupp k) ≟ AddCommGroup (Finsupp ?m.659)</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>Shall I open an issue?</p>",
        "id": 420974814,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707726838
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">stuckMVar</span><span class=\"o\">]</span> <span class=\"n\">found</span> <span class=\"n\">stuck</span> <span class=\"n\">MVar</span> <span class=\"bp\">?</span><span class=\"n\">m.644</span> <span class=\"o\">:</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">Finsupp</span> <span class=\"o\">(</span><span class=\"n\">Finsupp</span> <span class=\"n\">k</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 421114490,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1707767026
    },
    {
        "content": "<p>I don't know how you're doing that but I now have a sorry-free example -- is the error still the same?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Zero</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Ring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Zero</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">AddCommGroup</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Module</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Submodule</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">HasQuotient</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"bp\">&lt;|</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">quotient'</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Submodule.hasQuotient</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]:</span> <span class=\"n\">HasQuotient</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">M</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Synonym</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">M</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Synonym.zero</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"n\">Synonym</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨(</span><span class=\"n\">Zero.zero</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Synonym.addCommGroup</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">Synonym</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">Synonym.zero</span> <span class=\"k\">with</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Synonym.module</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">Synonym</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">HasQuotient</span> <span class=\"o\">(</span><span class=\"n\">Synonym</span> <span class=\"o\">(</span><span class=\"n\">Synonym</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">Synonym</span> <span class=\"o\">(</span><span class=\"n\">Synonym</span> <span class=\"n\">R</span><span class=\"o\">)))</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"c1\">-- the trace indicates that this is the instance which typeclass inference gives up on,</span>\n<span class=\"c1\">-- but it's easily found</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">Synonym</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n\n<span class=\"c1\">-- and now the original `#synth` works fine</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">HasQuotient</span> <span class=\"o\">(</span><span class=\"n\">Synonym</span> <span class=\"o\">(</span><span class=\"n\">Synonym</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">Synonym</span> <span class=\"o\">(</span><span class=\"n\">Synonym</span> <span class=\"n\">R</span><span class=\"o\">)))</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 421117028,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707767955
    },
    {
        "content": "<p>I opened <a href=\"https://github.com/leanprover/lean4/pull/3313\">lean4#3313</a> now I got rid of the sorry. I changed <code>Finsupp</code> to <code>Synonym</code> and made it a type synonym.</p>",
        "id": 421118532,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707768443
    },
    {
        "content": "<p>With <code>set_option trace.Meta.isDefEq.stuckMVar true</code> I also see some stuck metavariables, the one nearest to the problem being</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">...</span>\n                <span class=\"o\">[</span><span class=\"n\">tryResolve</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">Synonym</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">≟</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">Synonym</span> <span class=\"bp\">?</span><span class=\"n\">m.667</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n                  <span class=\"o\">[</span><span class=\"n\">isDefEq.stuckMVar</span><span class=\"o\">]</span> <span class=\"n\">found</span> <span class=\"n\">stuck</span> <span class=\"n\">MVar</span> <span class=\"bp\">?</span><span class=\"n\">m.668</span> <span class=\"o\">:</span> <span class=\"n\">AddCommGroup</span> <span class=\"n\">R</span>\n</code></pre></div>\n<p>Here we have <code>[Ring R]</code> and <code>class Ring (α : Type) extends Zero α, AddCommGroup α</code></p>",
        "id": 421119161,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707768654
    },
    {
        "content": "<p>I am confused as to how we reach a branch of code. (Be warned: off the top of my head)</p>\n<p>We have the following <code>ToMessageData</code> instance </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ToMessageData</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"&lt;not-available&gt;\"</span> <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">toMessageData</span> <span class=\"n\">e</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>Now in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.synthInstance%3F#doc\">docs#Lean.Meta.synthInstance?</a> there is the following branch of code </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">match</span> <span class=\"n\">s.cache.synthInstance.find</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">localInsts</span><span class=\"o\">,</span> <span class=\"n\">type</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">result</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">trace</span><span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"s2\">\"result {result} (cached)\"</span>\n</code></pre></div>\n<p>Here <code>(result: Option Expr)</code> so how do I reach the message?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[]</span> <span class=\"n\">result</span> <span class=\"bp\">&lt;</span><span class=\"n\">not</span><span class=\"bp\">-</span><span class=\"n\">available</span><span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"n\">cached</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>What dumb thing am I doing here?<br>\nAs far as I can tell, this is the only place <code>(cached)</code> occurs in a message and above is the only place that <code>not-available</code> occurs.</p>",
        "id": 421123593,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1707770140
    },
    {
        "content": "<p>Nevermind - the answer is in front of my face. The <code>result</code> is still an <code>Option</code></p>",
        "id": 421124186,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1707770333
    },
    {
        "content": "<p>You can also \"fix\" this by making <code>Synonym</code> <code>reducible</code>.  At some point, Lean wants to unify </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">Synonym</span> <span class=\"o\">(</span><span class=\"n\">Synonym</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"n\">Synonym</span> <span class=\"n\">R</span> <span class=\"bp\">▶</span>\n</code></pre></div>",
        "id": 421125503,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1707770805
    },
    {
        "content": "<p>Aha you have abused defeq </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">Synonym.zero</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"n\">Synonym</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨(</span><span class=\"n\">Zero.zero</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)⟩</span>\n</code></pre></div>\n<p>forces Lean to unwrap <code>Synonym</code> to unify</p>",
        "id": 421127139,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1707771387
    },
    {
        "content": "<p>If you place <code>AddCommGroup</code> first then Lean doesn't have to take the path through <code>Zero</code></p>",
        "id": 421127804,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1707771626
    },
    {
        "content": "<p>Yeah I can fix this by making <code>Synonym</code>reducible, but I can't make <code>Finsupp</code> reducible (which is the application -- I was just minimising here), and yeah I can fix this by reordering the definition of <code>Ring</code>, but I am not sure I'm allowed to reorder the definition of <code>Ring</code> in mathlib either, because my impression was that we already thought hard about the definition of <code>Ring</code> (again this is an artifact of minimising) :-( . </p>\n<p>How do I make that instance without abusing defeq? And does the failure still occur? It wouldn't surprise me if it did.</p>",
        "id": 421131583,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707772937
    },
    {
        "content": "<p><code>def Synonym.mk {M : Type} [Zero M] (m : M) : Synonym M := m</code> is the fragile way to avoid the abuse</p>",
        "id": 421132898,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707773424
    },
    {
        "content": "<p>But it doesn't help here</p>",
        "id": 421132907,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707773427
    },
    {
        "content": "<p>Here's the repro with no defeq abuse at all (no <code>def</code>)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Zero</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Ring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Zero</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">AddCommGroup</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Module</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Submodule</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">HasQuotient</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"bp\">&lt;|</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Submodule.hasQuotient</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]:</span> <span class=\"n\">HasQuotient</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Synonym</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"n\">where</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Synonym.zero</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"n\">Synonym</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">Zero.zero</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Synonym.addCommGroup</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">Synonym</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">Synonym.zero</span> <span class=\"k\">with</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Synonym.module</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">Synonym</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">HasQuotient</span> <span class=\"o\">(</span><span class=\"n\">Synonym</span> <span class=\"o\">(</span><span class=\"n\">Synonym</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">Synonym</span> <span class=\"o\">(</span><span class=\"n\">Synonym</span> <span class=\"n\">R</span><span class=\"o\">)))</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"c1\">-- the trace indicates that this is the instance which typeclass inference gives up on,</span>\n<span class=\"c1\">-- but it's easily found</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">Synonym</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n\n<span class=\"c1\">-- and now the original `#synth` works fine</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">HasQuotient</span> <span class=\"o\">(</span><span class=\"n\">Synonym</span> <span class=\"o\">(</span><span class=\"n\">Synonym</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">Synonym</span> <span class=\"o\">(</span><span class=\"n\">Synonym</span> <span class=\"n\">R</span><span class=\"o\">)))</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 421133048,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707773481
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 421133319,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707773583
    },
    {
        "content": "<p>Edited to simplify further</p>",
        "id": 421134182,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707773894
    },
    {
        "content": "<p>Even removing the <code>outParam</code> makes no difference</p>",
        "id": 421134543,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707774044
    },
    {
        "content": "<p>In fact, the first argument of <code>HasQuotient</code> is a distraction here</p>",
        "id": 421136935,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707775025
    },
    {
        "content": "<p>Here's a slightly simpler example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Zero</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Ring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Zero</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">AddCommGroup</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Module</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Submodule</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">HasQuotient</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"bp\">&lt;|</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Submodule.hasQuotient</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]:</span> <span class=\"n\">HasQuotient</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Synonym</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"n\">where</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Synonym.zero</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"n\">Synonym</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">Zero.zero</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Synonym.addCommGroup</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">Synonym</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">Synonym.zero</span> <span class=\"k\">with</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Synonym.module</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">Synonym</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">OhNo</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">ohno</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">OhNo</span> <span class=\"o\">(</span><span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n\n<span class=\"c1\">-- `abbrev` makes no difference, but makes the trace shorter</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">S2</span> <span class=\"o\">:=</span> <span class=\"n\">Synonym</span> <span class=\"o\">(</span><span class=\"n\">Synonym</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">oh1</span> <span class=\"o\">:</span> <span class=\"n\">OhNo</span> <span class=\"o\">(</span><span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">S2</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">ohno</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>  <span class=\"c1\">-- fails</span>\n<span class=\"kd\">def</span> <span class=\"n\">oh2</span> <span class=\"o\">:</span> <span class=\"n\">OhNo</span> <span class=\"o\">(</span><span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">S2</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">ohno</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">S2</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"c1\">-- ok</span>\n\n<span class=\"c1\">-- the trace indicates that this is the instance which typeclass inference gives up on,</span>\n<span class=\"c1\">-- but it's easily found</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">Synonym</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">oh3</span> <span class=\"o\">:</span> <span class=\"n\">type_of</span><span class=\"bp\">%</span> <span class=\"o\">(</span><span class=\"n\">oh2</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">ohno</span>  <span class=\"c1\">-- ok</span>\n</code></pre></div>\n<p>Now it's a unification problem rather than a TC problem</p>",
        "id": 421137782,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707775368
    },
    {
        "content": "<p>My hunch is that this is a caching bug with the DiscrTree, and that somehow<code>@Synonym R Ring.toZero</code> and <code>@Synonym R AddCommGroup.toZero</code> end up at the same key despite being different types</p>",
        "id": 421138179,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707775536
    },
    {
        "content": "<p>This seems like a strange decision</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"k\">fun</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">Zero.zero</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"bp\">=?=</span> <span class=\"k\">fun</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">AddCommGroup.toZero</span> <span class=\"bp\">▼</span>\n          <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">Zero</span> <span class=\"n\">G</span> <span class=\"bp\">=?=</span> <span class=\"n\">AddCommGroup</span> <span class=\"n\">G</span> <span class=\"bp\">▼</span>\n            <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">Zero</span> <span class=\"bp\">=?=</span> <span class=\"n\">AddCommGroup</span>\n</code></pre></div>",
        "id": 421145274,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1707778622
    },
    {
        "content": "<p>Which message is that trace from?</p>",
        "id": 421146836,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707779259
    },
    {
        "content": "<p><code>oh1</code> with <code>isDefEq</code> trace.</p>",
        "id": 421146872,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1707779278
    },
    {
        "content": "<p>What's the full path?</p>",
        "id": 421147069,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707779393
    },
    {
        "content": "<p>(There are 7 traces in the sidebar for me, and I don't know which one to expand, or how to fully expand them)</p>",
        "id": 421147160,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707779426
    },
    {
        "content": "<p>The cache in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.synthInstance%3F#doc\">docs#Lean.Meta.synthInstance?</a> seems to have a <code>none</code> for <code>AddCommGroup (S2 R)</code> before the <code>inferInstance</code> and then <code>addCommGroup</code> after</p>",
        "id": 421147181,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1707779436
    },
    {
        "content": "<p>Here is another (full) trace </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">Submodule</span> <span class=\"bp\">?</span><span class=\"n\">m.1034</span> <span class=\"bp\">?</span><span class=\"n\">m.1035</span> <span class=\"bp\">=?=</span> <span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">S2</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">m.1034</span> <span class=\"bp\">=?=</span> <span class=\"n\">R</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">m.1035</span> <span class=\"bp\">=?=</span> <span class=\"n\">S2</span> <span class=\"n\">R</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"bp\">?</span><span class=\"n\">m.1038</span> <span class=\"bp\">=?=</span> <span class=\"n\">Synonym.module</span> <span class=\"o\">(</span><span class=\"n\">Synonym</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">?</span><span class=\"n\">m.1038</span> <span class=\"o\">[</span><span class=\"n\">assignable</span><span class=\"o\">]</span> <span class=\"bp\">=?=</span> <span class=\"n\">Synonym.module</span> <span class=\"o\">(</span><span class=\"n\">Synonym</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">nonassignable</span><span class=\"o\">]</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">S2</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">Synonym</span> <span class=\"o\">(</span><span class=\"n\">Synonym</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"bp\">▼</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">R</span> <span class=\"bp\">=?=</span> <span class=\"n\">R</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">S2</span> <span class=\"n\">R</span> <span class=\"bp\">=?=</span> <span class=\"n\">Synonym</span> <span class=\"o\">(</span><span class=\"n\">Synonym</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">Ring</span> <span class=\"n\">R</span> <span class=\"bp\">=?=</span> <span class=\"n\">Ring</span> <span class=\"n\">R</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">Ring.toZero</span> <span class=\"bp\">=?=</span> <span class=\"n\">Ring.toZero</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup.toZero</span> <span class=\"bp\">=?=</span> <span class=\"n\">Synonym.zero</span> <span class=\"bp\">▼</span>\n        <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup.toZero</span> <span class=\"bp\">=?=</span> <span class=\"o\">{</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">Zero.zero</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"bp\">▼</span>\n          <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"bp\">?</span><span class=\"n\">m.1037.1</span> <span class=\"bp\">=?=</span> <span class=\"o\">{</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">Zero.zero</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"bp\">▼</span>\n            <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"n\">S2</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"n\">Synonym</span> <span class=\"o\">(</span><span class=\"n\">Synonym</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"bp\">▶</span>\n            <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">Zero.zero</span> <span class=\"bp\">=?=</span> <span class=\"o\">{</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">Zero.zero</span> <span class=\"o\">}</span> <span class=\"bp\">▼</span>\n              <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"bp\">?</span><span class=\"n\">m.1037.1.1</span> <span class=\"bp\">=?=</span> <span class=\"o\">{</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">Zero.zero</span> <span class=\"o\">}</span> <span class=\"bp\">▼</span>\n                <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">S2</span> <span class=\"n\">R</span> <span class=\"bp\">=?=</span> <span class=\"n\">Synonym</span> <span class=\"o\">(</span><span class=\"n\">Synonym</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n                <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"bp\">?</span><span class=\"n\">m.1037.1.1.m</span> <span class=\"bp\">=?=</span> <span class=\"n\">Zero.zero</span> <span class=\"bp\">▼</span>\n                  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"bp\">?</span><span class=\"n\">m.1037.1.1.1</span> <span class=\"bp\">=?=</span> <span class=\"n\">Zero.zero</span> <span class=\"bp\">▼</span>\n                    <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"bp\">?</span><span class=\"n\">m.1037.1.1.1</span> <span class=\"bp\">=?=</span> <span class=\"n\">Synonym.zero.1</span> <span class=\"bp\">▼</span>\n                      <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"bp\">?</span><span class=\"n\">m.1037.1.1.1</span> <span class=\"bp\">=?=</span> <span class=\"o\">{</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">Zero.zero</span> <span class=\"o\">}</span> <span class=\"bp\">▼</span>\n                        <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">Synonym</span> <span class=\"n\">R</span> <span class=\"bp\">=?=</span> <span class=\"n\">Synonym</span> <span class=\"n\">R</span>\n                        <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"bp\">?</span><span class=\"n\">m.1037.1.1.1.m</span> <span class=\"bp\">=?=</span> <span class=\"n\">Zero.zero</span> <span class=\"bp\">▼</span>\n                          <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"bp\">?</span><span class=\"n\">m.1037.1.1.1.1</span> <span class=\"bp\">=?=</span> <span class=\"n\">Zero.zero</span> <span class=\"bp\">▼</span>\n                            <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"bp\">?</span><span class=\"n\">m.1037.1.1.1.1</span> <span class=\"bp\">=?=</span> <span class=\"n\">Ring.toZero.1</span> <span class=\"bp\">▼</span>\n                              <span class=\"o\">[</span><span class=\"n\">onFailure</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"bp\">?</span><span class=\"n\">m.1037.1.1.1.1</span> <span class=\"bp\">=?=</span> <span class=\"n\">Ring.toZero.1</span> <span class=\"bp\">▼</span>\n                                <span class=\"o\">[</span><span class=\"n\">stuckMVar</span><span class=\"o\">]</span> <span class=\"n\">found</span> <span class=\"n\">stuck</span> <span class=\"n\">MVar</span> <span class=\"bp\">?</span><span class=\"n\">m.1037</span> <span class=\"o\">:</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">S2</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 421147720,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1707779721
    },
    {
        "content": "<p>And </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"bp\">@</span><span class=\"n\">AddCommGroup.toZero</span> <span class=\"bp\">=?=</span> <span class=\"bp\">@</span><span class=\"n\">Synonym.zero</span> <span class=\"bp\">▼</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"bp\">@</span><span class=\"n\">AddCommGroup.toZero</span> <span class=\"bp\">=?=</span> <span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">Zero.zero</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">Zero.zero</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"bp\">=?=</span> <span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">@</span><span class=\"n\">AddCommGroup.toZero</span> <span class=\"n\">α</span> <span class=\"bp\">▼</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"kt\">Type</span> <span class=\"bp\">=?=</span> <span class=\"kt\">Type</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"k\">fun</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">Zero.zero</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"bp\">=?=</span> <span class=\"bp\">@</span><span class=\"n\">AddCommGroup.toZero</span> <span class=\"n\">G</span> <span class=\"bp\">▼</span>\n        <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"k\">fun</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">Zero.zero</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"bp\">=?=</span> <span class=\"k\">fun</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">AddCommGroup.toZero</span> <span class=\"bp\">▼</span>\n          <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">Zero</span> <span class=\"n\">G</span> <span class=\"bp\">=?=</span> <span class=\"n\">AddCommGroup</span> <span class=\"n\">G</span> <span class=\"bp\">▼</span>\n            <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">Zero</span> <span class=\"bp\">=?=</span> <span class=\"n\">AddCommGroup</span>\n            <span class=\"o\">[</span><span class=\"n\">onFailure</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">Zero</span> <span class=\"n\">G</span> <span class=\"bp\">=?=</span> <span class=\"n\">AddCommGroup</span> <span class=\"n\">G</span>\n            <span class=\"o\">[</span><span class=\"n\">onFailure</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">Zero</span> <span class=\"n\">G</span> <span class=\"bp\">=?=</span> <span class=\"n\">AddCommGroup</span> <span class=\"n\">G</span>\n</code></pre></div>",
        "id": 421147731,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1707779733
    },
    {
        "content": "<p>Note that the instance added for <code>AddCommGroup (Synonym R)</code> is not <code>Synonym.addCommGroup</code> which is now found in <code>oh3</code> but is <code>instAddCommGroupSynonymToZero</code></p>",
        "id": 421148685,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1707780220
    },
    {
        "content": "<p>Why did we go from <code>none</code> to <code>Synonym.addCommGroup</code> in the cache?</p>",
        "id": 421148848,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1707780298
    }
]