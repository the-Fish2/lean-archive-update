[
    {
        "content": "<p>In <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Exterior.20powers/near/422301104\">this example</a> (uses mathlib) and more generally in the discussion in that thread, a typeclass search for <code>Zero</code> succeeds with some mathlib imports, but starts failing  if more mathlib imports are added. With the bad imports and default heartbeats settings, the search times out, and this is hard for me to debug because if Lean times out then it seems reluctant to output a typeclass trace (even though it must have been doing <em>something</em>!). </p>\n<p>In desperation, I switched <code>maxHeartbeats</code> and <code>synthInstance.maxHeartbeats</code> to <code>0</code> and left it on while I went for dinner, and to my surprise the <code>Zero</code> was found after 608 seconds (on a fast machine!). I then triumphantly put some profiler and instance trace options on, compiled, and piped the output to a file, but to my disappointment I got <a href=\"https://gist.github.com/kbuzzard/abee7d588f756e8ad877581f336b48f2\">this</a> (tl;dr: <code>Stack overflow detected. Aborting.</code>), which gives me no useful information. Note that there is no indication of a stack overflow in the actual Lean code, the only indication that something is wrong is that <code>#synth</code> is taking 10 minutes, a time which is an order of magnitude larger than any other instance synthesis I've ever seen in all my years of using mathlib.</p>\n<p>Obviously I can chew my pencil here and try and figure out why the two instances I've isolated are sending typeclass inference off on some wild goose chase, but I would rather the machine just told me the answer. Is there any way to see what typeclass inference is doing in the failing case?</p>",
        "id": 422449863,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708445019
    }
]