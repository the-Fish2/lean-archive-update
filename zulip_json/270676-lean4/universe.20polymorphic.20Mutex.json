[
    {
        "content": "<p>Note: I am aware of recent discussions about <a href=\"#narrow/stream/270676-lean4/topic/universe.20polymorphic.20IO\">universe polymorphic IO</a> and the fact that this is not simple and on the radar.</p>\n<p>Considering that IO.Mutex is not universe polymorphic, how to mutually exclude a universe polymorphic structure? Are there work arounds to make something like this to work?</p>\n<p>The specific example is this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">structure</span><span class=\"w\"> </span><span class=\"n\">AsyncTask</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">future</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Future</span><span class=\"w\"> </span><span class=\"n\">α</span>\n\n<span class=\"kn\">abbrev</span><span class=\"w\"> </span><span class=\"n\">AnyTask</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"bp\">&lt;|</span><span class=\"w\"> </span><span class=\"bp\">Σ</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">AsyncTask</span><span class=\"w\"> </span><span class=\"n\">α</span>\n\n<span class=\"kn\">structure</span><span class=\"w\"> </span><span class=\"n\">TaskManager</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">tasks</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">IO</span><span class=\"bp\">.</span><span class=\"n\">Mutex</span><span class=\"w\"> </span><span class=\"n\">AnyTask</span>\n</code></pre></div>\n<p>Error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">application</span><span class=\"w\"> </span><span class=\"n\">type</span><span class=\"w\"> </span><span class=\"n\">mismatch</span>\n<span class=\"w\">  </span><span class=\"n\">IO</span><span class=\"bp\">.</span><span class=\"n\">Mutex</span><span class=\"w\"> </span><span class=\"n\">AnyTask</span>\n<span class=\"n\">argument</span>\n<span class=\"w\">  </span><span class=\"n\">AnyTask</span>\n<span class=\"n\">has</span><span class=\"w\"> </span><span class=\"n\">type</span>\n<span class=\"w\">  </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n<span class=\"n\">but</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">type</span>\n<span class=\"w\">  </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n</code></pre></div>\n<p>At the end of the day, I would like to create data structures similar to <code>Vec&lt;Box&lt;dyn ATrait + 'a&gt;&gt;</code> in Rust.</p>",
        "id": 440160349,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1716403847
    }
]