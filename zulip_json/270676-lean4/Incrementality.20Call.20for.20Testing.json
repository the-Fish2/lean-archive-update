[
    {
        "content": "<p>As announced in the community meeting today, <a href=\"https://github.com/leanprover/lean4/pull/3940\">lean4#3940</a> \"incremental elaboration of definition headers, bodies, and tactics\" is nearing merge and inclusion in Lean 4.9.0. As this is a major change to the elaboration infrastructure, preliminary testing to smooth out landing this feature would be greatly appreciated!</p>\n<p><strong>Instructions:</strong> Please first read the PR description of <a href=\"https://github.com/leanprover/lean4/pull/3940\">lean4#3940</a> to understand what should and should not yet work at this point. The testing toolchain <code>Kha/lean4:incr-tactic-v2</code> is compatible with Lean 4.8.0-rc1, so you should be able to use it as your <code>lean-toolchain</code> in any project on that version without further changes to your code (unless you depend on very specific elaboration API details). For <strong>Mathlib</strong> in particular, there is a branch <code>incr-tactic-fixes-toolchain</code> based on Tuesday's master that builds and comes with a cache. So you could e.g. transfer or start some work there and then cherry-pick it back onto master before pushing.</p>\n<p><strong>What to test</strong>: Obviously any regression in behavior is noteworthy. Other than that, the goal is that writing tactic proofs should be more efficient. If you feel Lean jumps back up after a change more than you think it should, that is also valuable information. More combinators such as tactic <code>have</code> will likely be added to the supported list in <a href=\"https://github.com/leanprover/lean4/pull/3940\">lean4#3940</a> later but the immediate goal is to support the combinators that people spend ~90% of the time in. A more general solution that supports all combinators out of the box may appear at some later date.</p>\n<p>On an operational note, I am on vacation next week but hopefully nothing is so fundamentally broken that testing cannot commence without me :) .</p>",
        "id": 437990137,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1715350772
    },
    {
        "content": "<p>Thanks a lot Sebastian!</p>",
        "id": 438023715,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715363738
    },
    {
        "content": "<p>Is it expected that different fields of a structure do not appear to be incremental?</p>",
        "id": 438023817,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715363772
    },
    {
        "content": "<p>Using <code>where</code>?</p>",
        "id": 438023950,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1715363830
    },
    {
        "content": "<p>Specifically I’m looking at  <a href=\"https://github.com/leanprover-community/mathlib4/blob/incr-tactic-fixes-toolchain/Mathlib/Geometry/Manifold/VectorBundle/FiberwiseLinear.lean#L238\">https://github.com/leanprover-community/mathlib4/blob/incr-tactic-fixes-toolchain/Mathlib/Geometry/Manifold/VectorBundle/FiberwiseLinear.lean#L238</a> which is an awfully slow declaration. Modifying the last line of the last field clearly still takes forever.</p>",
        "id": 438024013,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715363866
    },
    {
        "content": "<p>Yes, using where.</p>",
        "id": 438024024,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715363871
    },
    {
        "content": "<p>By the way, if you want to experiment with  profiling tools, this declaration is a great exemple of things going wrong.</p>",
        "id": 438024416,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715364002
    },
    {
        "content": "<p>I see how incrementality would be useful here. At the same time, structure instance notation is already a very complex elaborator that I'm wary of further touching. I'll have to think about that.</p>",
        "id": 438025214,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1715364269
    },
    {
        "content": "<p>For example, unlike <code>induction</code> cases, structure instance fields are not/cannot necessarily be elaborated in order, so changing a field may affect fields above it. Which doesn't make it impossible to implement, just hard.</p>",
        "id": 438025887,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1715364575
    },
    {
        "content": "<p>I had no idea changing a field can influence a previous field. When does that happen?</p>",
        "id": 438026006,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715364620
    },
    {
        "content": "<p>With dependent types. Which usually are not the ones you would fill with tactics, no</p>",
        "id": 438026078,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1715364656
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/Incrementality.20Call.20for.20Testing/near/438026006\">said</a>:</p>\n<blockquote>\n<p>I had no idea changing a field can influence a previous field. When does that happen?</p>\n</blockquote>\n<p>say:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">xs.size</span>\n  <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">&lt;</span><span class=\"n\">some</span> <span class=\"n\">statement</span> <span class=\"n\">involving</span> <span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"n\">h</span><span class=\"bp\">&gt;</span>\n</code></pre></div>\n<p>if <code>h</code> is changed you have to take a look at <code>foo</code> again</p>",
        "id": 438026193,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1715364715
    },
    {
        "content": "<p>Henrik, this is not affecting a <em>previous</em> field, right?</p>",
        "id": 438026309,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715364760
    },
    {
        "content": "<p>You may specify these fields in any order when you construct a Foo. I think.</p>",
        "id": 438026365,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1715364784
    },
    {
        "content": "<p>I never realized that!</p>",
        "id": 438026422,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715364816
    },
    {
        "content": "<p>I would totally be in favor of disallowing this if it makes anything easier to implement. I think very few users would notice any difference, because I guess very few people rely on this feature.</p>",
        "id": 438026571,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715364872
    },
    {
        "content": "<p>but that means that if i use the <code>{ x := , y :=, ...}</code> notation I have to think about the order of fields, that sounds rather annoying</p>",
        "id": 438026692,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1715364945
    },
    {
        "content": "<p>To give a bit more context, according to the all-Mathlib profile I posted some time ago, about 8% + 2% of total time is spent in tactics in <code>def/instance</code>, so making them work in more than <code>:= by ...</code> wasn't a top priority</p>",
        "id": 438026958,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1715365081
    },
    {
        "content": "<p>I don’t say it should a top priority, I’m simply testing stuff as was asked, and reported the first thing that I saw that didn’t seem to work.</p>",
        "id": 438027101,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715365141
    },
    {
        "content": "<p>Henrik I don’t have this ordering issue because I use code actions to build the skeleton.</p>",
        "id": 438027142,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715365168
    },
    {
        "content": "<p>We have a code action for that? Or is that some batteries/mathlib thing</p>",
        "id": 438027177,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1715365189
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Incrementality.20Call.20for.20Testing/near/438026078\">said</a>:</p>\n<blockquote>\n<p>With dependent types. Which usually are not the ones you would fill with tactics, no</p>\n</blockquote>\n<p>Asking a naive question: Lean cannot tell quickly if these are involved, right? (If one could, this seems like a natural potential fast path to add. Obviously, you will know much better if this is worthwhile architecturally.)</p>",
        "id": 438043268,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1715373685
    },
    {
        "content": "<p>I think the field elaboration order becomes even more complicated when you consider default values, which can be derived from later fields</p>",
        "id": 438053461,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1715379188
    },
    {
        "content": "<p>e.g. if incremental elab is brought into a structure with default fields, it might affect fixes like <a href=\"https://github.com/leanprover/lean4/pull/3152\">lean4#3152</a> .</p>",
        "id": 438069187,
        "sender_full_name": "Utensil Song",
        "timestamp": 1715391486
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/Incrementality.20Call.20for.20Testing/near/438024013\">said</a>:</p>\n<blockquote>\n<p>Specifically I’m looking at  <a href=\"https://github.com/leanprover-community/mathlib4/blob/incr-tactic-fixes-toolchain/Mathlib/Geometry/Manifold/VectorBundle/FiberwiseLinear.lean#L238\">https://github.com/leanprover-community/mathlib4/blob/incr-tactic-fixes-toolchain/Mathlib/Geometry/Manifold/VectorBundle/FiberwiseLinear.lean#L238</a> which is an awfully slow declaration. Modifying the last line of the last field clearly still takes forever.</p>\n</blockquote>\n<p>One issue with FiberwiseLinear (at least on that branch) is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Geometry.Manifold.VectorBundle.FiberwiseLinear</span>\n\n<span class=\"c1\">-- set_option trace.Meta.Tactic.simp true</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Set</span> <span class=\"n\">TopologicalSpace</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Manifold</span> <span class=\"n\">Topology</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"n\">B</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">NontriviallyNormedField</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"bp\">𝕜</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">FiberwiseLinear</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">φ</span> <span class=\"n\">φ'</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"bp\">≃</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"n\">U'</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">B</span><span class=\"o\">}</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.profiler</span> <span class=\"n\">true</span>\n<span class=\"kd\">def</span> <span class=\"n\">smoothFiberwiseLinear'</span> <span class=\"o\">:</span> <span class=\"n\">StructureGroupoid</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">×</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">members</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">⋃</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"bp\">≃</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hU</span> <span class=\"o\">:</span> <span class=\"n\">IsOpen</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">hφ</span> <span class=\"o\">:</span> <span class=\"n\">SmoothOn</span> <span class=\"n\">IB</span> <span class=\"bp\">𝓘</span><span class=\"o\">(</span><span class=\"bp\">𝕜</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">φ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">h2φ</span> <span class=\"o\">:</span> <span class=\"n\">SmoothOn</span> <span class=\"n\">IB</span> <span class=\"bp\">𝓘</span><span class=\"o\">(</span><span class=\"bp\">𝕜</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"n\">U</span><span class=\"o\">),</span>\n        <span class=\"o\">{</span><span class=\"n\">e</span> <span class=\"bp\">|</span> <span class=\"n\">e.EqOnSource</span> <span class=\"o\">(</span><span class=\"n\">FiberwiseLinear.partialHomeomorph</span> <span class=\"n\">φ</span> <span class=\"n\">hU</span> <span class=\"n\">hφ.continuousOn</span> <span class=\"n\">h2φ.continuousOn</span><span class=\"o\">)}</span>\n  <span class=\"n\">trans'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_iUnion</span><span class=\"o\">]</span> <span class=\"c1\">-- this line is 22 seconds on my machine!</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I'm very surprised to see a <code>simp only</code> take so long, but I don't really understand the traces.</p>",
        "id": 438109087,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1715433547
    },
    {
        "content": "<p>The trace says \"I am solving about 500 defeq problems that are all fast on their own but 500 is just a bit much\" I think</p>",
        "id": 438109355,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1715433788
    },
    {
        "content": "<p><code>IB</code> is not defined here, are you missing a <code>variable</code> line?</p>",
        "id": 438109528,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1715433954
    },
    {
        "content": "<p>The code works for me on that branch. Let me try and get it working on master.</p>",
        "id": 438109777,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1715434151
    },
    {
        "content": "<p>On master, I need to add the line</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">EB</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">EB</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"bp\">𝕜</span> <span class=\"n\">EB</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">HB</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">HB</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ChartedSpace</span> <span class=\"n\">HB</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">IB</span> <span class=\"o\">:</span> <span class=\"n\">ModelWithCorners</span> <span class=\"bp\">𝕜</span> <span class=\"n\">EB</span> <span class=\"n\">HB</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>Otherwise, <code>IB</code> is not defined so it doesn't really make sense.</p>",
        "id": 438109861,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1715434213
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Geometry.Manifold.VectorBundle.FiberwiseLinear</span>\n\n<span class=\"c1\">-- set_option trace.Meta.Tactic.simp true</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Set</span> <span class=\"n\">TopologicalSpace</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Manifold</span> <span class=\"n\">Topology</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"n\">B</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">NontriviallyNormedField</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"bp\">𝕜</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">FiberwiseLinear</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">φ</span> <span class=\"n\">φ'</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"bp\">≃</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"n\">U'</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">B</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">EB</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">EB</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"bp\">𝕜</span> <span class=\"n\">EB</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">HB</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">HB</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ChartedSpace</span> <span class=\"n\">HB</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">IB</span> <span class=\"o\">:</span> <span class=\"n\">ModelWithCorners</span> <span class=\"bp\">𝕜</span> <span class=\"n\">EB</span> <span class=\"n\">HB</span><span class=\"o\">}</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.profiler</span> <span class=\"n\">true</span>\n<span class=\"kd\">def</span> <span class=\"n\">smoothFiberwiseLinear'</span> <span class=\"o\">:</span> <span class=\"n\">StructureGroupoid</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">×</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">members</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">⋃</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"bp\">≃</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hU</span> <span class=\"o\">:</span> <span class=\"n\">IsOpen</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">hφ</span> <span class=\"o\">:</span> <span class=\"n\">SmoothOn</span> <span class=\"n\">IB</span> <span class=\"bp\">𝓘</span><span class=\"o\">(</span><span class=\"bp\">𝕜</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">φ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">h2φ</span> <span class=\"o\">:</span> <span class=\"n\">SmoothOn</span> <span class=\"n\">IB</span> <span class=\"bp\">𝓘</span><span class=\"o\">(</span><span class=\"bp\">𝕜</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"n\">U</span><span class=\"o\">),</span>\n        <span class=\"o\">{</span><span class=\"n\">e</span> <span class=\"bp\">|</span> <span class=\"n\">e.EqOnSource</span> <span class=\"o\">(</span><span class=\"n\">FiberwiseLinear.partialHomeomorph</span> <span class=\"n\">φ</span> <span class=\"n\">hU</span> <span class=\"n\">hφ.continuousOn</span> <span class=\"n\">h2φ.continuousOn</span><span class=\"o\">)}</span>\n  <span class=\"n\">trans'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_iUnion</span><span class=\"o\">]</span> <span class=\"c1\">-- this line is only 3 seconds on master</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"n\">symm'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">id_mem'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">locality'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">mem_of_eqOnSource'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 438109911,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1715434274
    },
    {
        "content": "<p>Yeah there's something weird going on here but it's about the variables, I think my example is bad.</p>",
        "id": 438110108,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1715434447
    },
    {
        "content": "<p>With the right <code>variable</code> line, I get roughly the same time on master and on the branch for your snippet.</p>",
        "id": 438110253,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1715434583
    },
    {
        "content": "<p>(and it's more like 3 seconds than 20 seconds! But still 3 seconds is a long time...)</p>",
        "id": 438110303,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1715434679
    },
    {
        "content": "<p>Something seems to go wrong with LSP error highlighting with the <code>leanprover/lean4-pr-releases:pr-release-3940</code> toolchain in a few cases.<br>\nIn this example, \"this is not real lean\" in the last line does not get a red wavy underline. (It does with <code>leanprover/lean4:v4.8.0-rc1</code>.)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Init</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">xxx</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">×'</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"bp\">∧</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">hzero</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">Nat.not_succ_le_zero</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">hzero</span> <span class=\"bp\">▸</span> <span class=\"n\">h</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n  <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"k\">then</span>\n    <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">Nat.zero_le</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩⟩</span>\n  <span class=\"k\">else</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">this</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">real</span> <span class=\"n\">lean</span><span class=\"o\">⟩</span>\n\n<span class=\"k\">#print</span> <span class=\"kd\">axioms</span> <span class=\"n\">xxx</span> <span class=\"c1\">-- 'xxx' depends on axioms: [sorryAx]</span>\n</code></pre></div>",
        "id": 438113418,
        "sender_full_name": "Richard Copley",
        "timestamp": 1715438161
    },
    {
        "content": "<p>Thanks, this looks similar to the issue Kevin found. I can reproduce.</p>",
        "id": 438113744,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1715438518
    },
    {
        "content": "<p>There is a new toolchain <code>Kha/lean4:incr-tactic-v2</code> that should fix these missing errors. Pull the new commit on the Mathlib branch to get it.</p>",
        "id": 438162139,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1715495454
    },
    {
        "content": "<p>I got the new <code>Kha/lean4:incr-tactic-v2</code> toolchain working for my project with the very long theorem compile times. You can see me using it <a href=\"https://www.youtube.com/live/pYvcgNoTvrg?si=-3pYayz8rNmJK4j1&amp;t=1125\">here</a>. The orange bar steps down through the tactics one at a time, but that seems to be the only part that works - is it supposed to be the case that even a single call to something like <code>suffices</code> makes it impossible for the orange bar to restart halfway through a proof?</p>",
        "id": 438177745,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1715512525
    },
    {
        "content": "<p>After massaging this, I don' t think that was the problem. Here is a zip file of a shorter video I recorded - it seems like the orange bar steps up too far for <code>lemma</code> but not for <code>example</code> (not sure what would cause that).<br>\n<a href=\"/user_uploads/3121/LA-Vs7Hf-wB47CsOI4kz-_7P/2024-05-12-06-29-23.mkv.zip\">2024-05-12-06-29-23.mkv.zip</a></p>",
        "id": 438178739,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1715513711
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Incrementality.20Call.20for.20Testing/near/438162139\">said</a>:</p>\n<blockquote>\n<p>There is a new toolchain <code>Kha/lean4:incr-tactic-v2</code> that should fix these missing errors. Pull the new commit on the Mathlib branch to get it.</p>\n</blockquote>\n<p>Looks good, thanks.</p>",
        "id": 438179561,
        "sender_full_name": "Richard Copley",
        "timestamp": 1715514617
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>, I just played with this incremental tactics and it works great in most cases. Thank you for merging this!</p>",
        "id": 440774284,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1716786572
    },
    {
        "content": "<p>I also run into some strange behavior. It seems to me that while changing the name of a tactic that I wrote or replacing this tactic with another tactic preserves the saved state. However, commenting a call to a tactic with <code>--</code> and dropping this comment leads to a full recomputation.</p>",
        "id": 440774417,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1716786651
    },
    {
        "content": "<p>I found <code>trace.Elab.reuse</code> to trace this behavior and get the following output:</p>",
        "id": 440774439,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1716786667
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">reuse</span><span class=\"w\"> </span><span class=\"n\">stopped</span><span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">Command</span><span class=\"bp\">.</span><span class=\"n\">declValSimple</span>\n<span class=\"w\"> </span><span class=\"s2\">\"\"</span><span class=\"o\">:</span><span class=\"mi\">8493</span><span class=\"o\">:</span><span class=\"s2\">\":=\"</span><span class=\"o\">:</span><span class=\"mi\">8495</span><span class=\"o\">:</span><span class=\"s2\">\" \"</span>\n<span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Term</span><span class=\"bp\">.</span><span class=\"n\">byTactic</span>\n<span class=\"w\">  </span><span class=\"s2\">\"\"</span><span class=\"o\">:</span><span class=\"mi\">8496</span><span class=\"o\">:</span><span class=\"s2\">\"by\"</span><span class=\"o\">:</span><span class=\"mi\">8498</span><span class=\"o\">:</span><span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">  \"</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">Tactic</span><span class=\"bp\">.</span><span class=\"n\">tacticSeq</span>\n<span class=\"w\">   </span><span class=\"o\">(</span><span class=\"n\">Tactic</span><span class=\"bp\">.</span><span class=\"n\">tacticSeq1Indented</span>\n<span class=\"w\">    </span><span class=\"o\">[(</span><span class=\"n\">Tactic</span><span class=\"bp\">.</span><span class=\"n\">unfold</span>\n<span class=\"w\">      </span><span class=\"s2\">\"\"</span><span class=\"o\">:</span><span class=\"mi\">8501</span><span class=\"o\">:</span><span class=\"s2\">\"unfold\"</span><span class=\"o\">:</span><span class=\"mi\">8507</span><span class=\"o\">:</span><span class=\"s2\">\" \"</span>\n<span class=\"w\">      </span><span class=\"o\">[</span><span class=\"s2\">\"\"</span><span class=\"o\">:</span><span class=\"mi\">8508</span><span class=\"o\">:</span><span class=\"ss\">`and_sequence_40_lhs</span><span class=\"o\">:</span><span class=\"mi\">8527</span><span class=\"o\">:</span><span class=\"s2\">\" \"</span><span class=\"w\"> </span><span class=\"s2\">\"\"</span><span class=\"o\">:</span><span class=\"mi\">8528</span><span class=\"o\">:</span><span class=\"ss\">`and_sequence_40_rhs</span><span class=\"o\">:</span><span class=\"mi\">8547</span><span class=\"o\">:</span><span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">  \"</span><span class=\"o\">]</span>\n<span class=\"w\">      </span><span class=\"o\">[])</span>\n<span class=\"w\">     </span><span class=\"o\">[]</span>\n<span class=\"w\">     </span><span class=\"o\">(</span><span class=\"n\">tacticSimp_alive_peephole</span><span class=\"w\"> </span><span class=\"s2\">\"\"</span><span class=\"o\">:</span><span class=\"mi\">8550</span><span class=\"o\">:</span><span class=\"s2\">\"simp_alive_peephole\"</span><span class=\"o\">:</span><span class=\"mi\">8569</span><span class=\"o\">:</span><span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">  \"</span><span class=\"o\">)</span>\n<span class=\"w\">     </span><span class=\"o\">[]</span>\n<span class=\"w\">     </span><span class=\"o\">(</span><span class=\"n\">tacticSimp_alive_undef</span><span class=\"w\"> </span><span class=\"s2\">\"\"</span><span class=\"o\">:</span><span class=\"mi\">8572</span><span class=\"o\">:</span><span class=\"s2\">\"simp_alive_undef\"</span><span class=\"o\">:</span><span class=\"mi\">8588</span><span class=\"o\">:</span><span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">  \"</span><span class=\"o\">)</span>\n<span class=\"w\">     </span><span class=\"o\">[]</span>\n<span class=\"w\">     </span><span class=\"o\">(</span><span class=\"n\">tacticSimp_alive_ops</span><span class=\"w\"> </span><span class=\"s2\">\"\"</span><span class=\"o\">:</span><span class=\"mi\">8591</span><span class=\"o\">:</span><span class=\"s2\">\"simp_alive_ops\"</span><span class=\"o\">:</span><span class=\"mi\">8605</span><span class=\"o\">:</span><span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">  --simp_alive_case_bash</span><span class=\"se\">\\n</span><span class=\"s2\">  \"</span><span class=\"o\">)</span>\n<span class=\"w\">     </span><span class=\"o\">[]</span>\n<span class=\"w\">     </span><span class=\"o\">(</span><span class=\"n\">tacticSimp_alive_case_bash</span><span class=\"w\"> </span><span class=\"s2\">\"\"</span><span class=\"o\">:</span><span class=\"mi\">8633</span><span class=\"o\">:</span><span class=\"s2\">\"simp_alive_case_bash\"</span><span class=\"o\">:</span><span class=\"mi\">8653</span><span class=\"o\">:</span><span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">  \"</span><span class=\"o\">)</span>\n<span class=\"w\">     </span><span class=\"o\">[]</span>\n<span class=\"w\">     </span><span class=\"o\">(</span><span class=\"n\">tacticAlive_auto</span><span class=\"w\"> </span><span class=\"s2\">\"\"</span><span class=\"o\">:</span><span class=\"mi\">8656</span><span class=\"o\">:</span><span class=\"s2\">\"alive_auto\"</span><span class=\"o\">:</span><span class=\"mi\">8666</span><span class=\"o\">:</span><span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"o\">)])))</span>\n<span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Termination</span><span class=\"bp\">.</span><span class=\"n\">suffix</span><span class=\"w\"> </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">[])</span>\n<span class=\"w\"> </span><span class=\"o\">[])</span><span class=\"w\"> </span><span class=\"bp\">!=</span>\n<span class=\"o\">(</span><span class=\"n\">Command</span><span class=\"bp\">.</span><span class=\"n\">declValSimple</span>\n<span class=\"w\"> </span><span class=\"s2\">\"\"</span><span class=\"o\">:</span><span class=\"mi\">8493</span><span class=\"o\">:</span><span class=\"s2\">\":=\"</span><span class=\"o\">:</span><span class=\"mi\">8495</span><span class=\"o\">:</span><span class=\"s2\">\" \"</span>\n<span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">«</span><span class=\"n\">term_</span><span class=\"bp\">-_»</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">Term</span><span class=\"bp\">.</span><span class=\"n\">byTactic</span>\n<span class=\"w\">   </span><span class=\"s2\">\"\"</span><span class=\"o\">:</span><span class=\"mi\">8496</span><span class=\"o\">:</span><span class=\"s2\">\"by\"</span><span class=\"o\">:</span><span class=\"mi\">8498</span><span class=\"o\">:</span><span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">  \"</span>\n<span class=\"w\">   </span><span class=\"o\">(</span><span class=\"n\">Tactic</span><span class=\"bp\">.</span><span class=\"n\">tacticSeq</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">Tactic</span><span class=\"bp\">.</span><span class=\"n\">tacticSeq1Indented</span>\n<span class=\"w\">     </span><span class=\"o\">[(</span><span class=\"n\">Tactic</span><span class=\"bp\">.</span><span class=\"n\">unfold</span>\n<span class=\"w\">       </span><span class=\"s2\">\"\"</span><span class=\"o\">:</span><span class=\"mi\">8501</span><span class=\"o\">:</span><span class=\"s2\">\"unfold\"</span><span class=\"o\">:</span><span class=\"mi\">8507</span><span class=\"o\">:</span><span class=\"s2\">\" \"</span>\n<span class=\"w\">       </span><span class=\"o\">[</span><span class=\"s2\">\"\"</span><span class=\"o\">:</span><span class=\"mi\">8508</span><span class=\"o\">:</span><span class=\"ss\">`and_sequence_40_lhs</span><span class=\"o\">:</span><span class=\"mi\">8527</span><span class=\"o\">:</span><span class=\"s2\">\" \"</span><span class=\"w\"> </span><span class=\"s2\">\"\"</span><span class=\"o\">:</span><span class=\"mi\">8528</span><span class=\"o\">:</span><span class=\"ss\">`and_sequence_40_rhs</span><span class=\"o\">:</span><span class=\"mi\">8547</span><span class=\"o\">:</span><span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">  \"</span><span class=\"o\">]</span>\n<span class=\"w\">       </span><span class=\"o\">[])</span>\n<span class=\"w\">      </span><span class=\"o\">[]</span>\n<span class=\"w\">      </span><span class=\"o\">(</span><span class=\"n\">tacticSimp_alive_peephole</span><span class=\"w\"> </span><span class=\"s2\">\"\"</span><span class=\"o\">:</span><span class=\"mi\">8550</span><span class=\"o\">:</span><span class=\"s2\">\"simp_alive_peephole\"</span><span class=\"o\">:</span><span class=\"mi\">8569</span><span class=\"o\">:</span><span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">  \"</span><span class=\"o\">)</span>\n<span class=\"w\">      </span><span class=\"o\">[]</span>\n<span class=\"w\">      </span><span class=\"o\">(</span><span class=\"n\">tacticSimp_alive_undef</span><span class=\"w\"> </span><span class=\"s2\">\"\"</span><span class=\"o\">:</span><span class=\"mi\">8572</span><span class=\"o\">:</span><span class=\"s2\">\"simp_alive_undef\"</span><span class=\"o\">:</span><span class=\"mi\">8588</span><span class=\"o\">:</span><span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">  \"</span><span class=\"o\">)</span>\n<span class=\"w\">      </span><span class=\"o\">[]</span>\n<span class=\"w\">      </span><span class=\"o\">(</span><span class=\"n\">tacticSimp_alive_ops</span><span class=\"w\"> </span><span class=\"s2\">\"\"</span><span class=\"o\">:</span><span class=\"mi\">8591</span><span class=\"o\">:</span><span class=\"s2\">\"simp_alive_ops\"</span><span class=\"o\">:</span><span class=\"mi\">8605</span><span class=\"o\">:</span><span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">  \"</span><span class=\"o\">)</span>\n<span class=\"w\">      </span><span class=\"o\">[]])))</span>\n<span class=\"w\">  </span><span class=\"s2\">\"\"</span><span class=\"o\">:</span><span class=\"mi\">8608</span><span class=\"o\">:</span><span class=\"s2\">\"-\"</span><span class=\"o\">:</span><span class=\"mi\">8609</span><span class=\"o\">:</span><span class=\"s2\">\"\"</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">Term</span><span class=\"bp\">.</span><span class=\"n\">app</span>\n<span class=\"w\">   </span><span class=\"s2\">\"\"</span><span class=\"o\">:</span><span class=\"mi\">8609</span><span class=\"o\">:</span><span class=\"ss\">`simp_alive_case_bash</span><span class=\"o\">:</span><span class=\"mi\">8629</span><span class=\"o\">:</span><span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">  \"</span>\n<span class=\"w\">   </span><span class=\"o\">[</span><span class=\"s2\">\"\"</span><span class=\"o\">:</span><span class=\"mi\">8632</span><span class=\"o\">:</span><span class=\"ss\">`simp_alive_case_bash</span><span class=\"o\">:</span><span class=\"mi\">8652</span><span class=\"o\">:</span><span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">  \"</span><span class=\"w\"> </span><span class=\"s2\">\"\"</span><span class=\"o\">:</span><span class=\"mi\">8655</span><span class=\"o\">:</span><span class=\"ss\">`alive_auto</span><span class=\"o\">:</span><span class=\"mi\">8665</span><span class=\"o\">:</span><span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"o\">]))</span>\n<span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Termination</span><span class=\"bp\">.</span><span class=\"n\">suffix</span><span class=\"w\"> </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">[])</span>\n<span class=\"w\"> </span><span class=\"o\">[])</span>\n</code></pre></div>",
        "id": 440774611,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1716786776
    },
    {
        "content": "<p>On the file: SSA/Projects/InstCombine/ScalingTest.lean in <a href=\"https://github.com/opencompl/ssa/pull/314\">https://github.com/opencompl/ssa/pull/314</a>.</p>",
        "id": 440774705,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1716786841
    },
    {
        "content": "<p>For what its worth, I am not sure the trace output explains to me clearly why the reuse stopped.</p>",
        "id": 440774826,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1716786902
    },
    {
        "content": "<p>Thanks for testing! This should be fixed with <a href=\"https://github.com/leanprover/lean4/pull/4268\">lean#4268</a></p>",
        "id": 440797940,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1716796910
    },
    {
        "content": "<p>Wow, what a turnaround.</p>",
        "id": 440810080,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1716800938
    },
    {
        "content": "<p>I will wait 2-3 days until this pops up in mathlib, but the fix seems generic enough that I am confident it will work. Thank you again for making this happen.</p>",
        "id": 440810182,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1716800977
    },
    {
        "content": "<p>We will be testing this from then on!</p>",
        "id": 440810233,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1716800993
    },
    {
        "content": "<p>Also, out of interest, is there a significant cost involved in restoring state or is the 'cost' one pays just the tactics that need to be rerun?</p>",
        "id": 440810365,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1716801024
    },
    {
        "content": "<p>Restoring the state should be effectively free, checking when to restore should be insignificant</p>",
        "id": 440815020,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1716802410
    }
]