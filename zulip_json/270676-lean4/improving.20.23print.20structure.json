[
    {
        "content": "<p>If I want to know the definition of a structure from the editor, my default is to try <code>#print</code>.<br>\nUnfortunately, this gives me nothing useful:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#print</span> <span class=\"n\">Lean.Meta.Simp.Config</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Lean.Meta.Simp.Config</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"kd\">parameters</span><span class=\"o\">:</span> <span class=\"mi\">0</span>\n<span class=\"n\">constructors</span><span class=\"o\">:</span>\n<span class=\"n\">Lean.Meta.Simp.Config.mk</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span>\n  <span class=\"n\">ℕ</span> <span class=\"bp\">→</span>\n    <span class=\"n\">Bool</span> <span class=\"bp\">→</span>\n      <span class=\"n\">Bool</span> <span class=\"bp\">→</span>\n        <span class=\"n\">Bool</span> <span class=\"bp\">→</span>\n          <span class=\"n\">Bool</span> <span class=\"bp\">→</span>\n            <span class=\"n\">Bool</span> <span class=\"bp\">→</span>\n              <span class=\"n\">Bool</span> <span class=\"bp\">→</span>\n                <span class=\"n\">Meta.EtaStructMode</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">Meta.Simp.Config</span>\n</code></pre></div>\n<p>Could this be changed to at least show the parameter names?</p>",
        "id": 422209781,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708340634
    },
    {
        "content": "<p>And while we are at it, maybe don’t indent after <code>→</code> (it doesn’t indent the various parameters when printing them using ∀)?</p>",
        "id": 422209965,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1708340693
    },
    {
        "content": "<p>By contrast, in Lean 3, <code>#print prod</code> gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">derive</span> <span class=\"n\">list.cons.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pexpr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">has_reflect</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">list.nil.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pexpr</span><span class=\"o\">)</span><span class=\"kd\">]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">prod</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"n\">fields</span><span class=\"o\">:</span>\n<span class=\"n\">prod.fst</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">},</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"n\">prod.snd</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">},</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n</code></pre></div>\n<p>which is much more useful</p>",
        "id": 422210207,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708340786
    },
    {
        "content": "<p>Sorry to revive an old thread. There is now an RFC to fix this issue at <a href=\"https://github.com/leanprover/lean4/pull/3644\">lean4#3644</a> as well as a WIP PR to implement it at <a href=\"https://github.com/leanprover/lean4/pull/3768\">lean4#3768</a>. Please thumbs up the issue if you think this is useful!</p>",
        "id": 429756119,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1711495857
    }
]