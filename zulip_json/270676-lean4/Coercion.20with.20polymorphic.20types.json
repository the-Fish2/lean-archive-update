[
    {
        "content": "<p>From Functional programming in lean:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">NonEmptyList</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"n\">head</span> <span class=\"o\">:</span> <span class=\"n\">T</span>\n  <span class=\"n\">tail</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">T</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"o\">(</span><span class=\"n\">NonEmptyList</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span>\n    <span class=\"bp\">|</span> <span class=\"o\">{</span> <span class=\"n\">head</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">tail</span> <span class=\"o\">:=</span> <span class=\"n\">xs</span> <span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">idahoSpiders</span> <span class=\"o\">:</span> <span class=\"n\">NonEmptyList</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">head</span> <span class=\"o\">:=</span> <span class=\"s2\">\"Banded Garden Spider\"</span><span class=\"o\">,</span>\n  <span class=\"n\">tail</span> <span class=\"o\">:=</span> <span class=\"o\">[</span>\n    <span class=\"s2\">\"Long-legged Sac Spider\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"Wolf Spider\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"Hobo Spider\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"Cat-faced Spider\"</span>\n  <span class=\"o\">]</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">List.reverse</span> <span class=\"n\">idahoSpiders</span>\n<span class=\"k\">#eval</span> <span class=\"n\">List.reverse</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"n\">idahoSpiders</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CoeDep</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">NonEmptyList</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">head</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">tail</span> <span class=\"o\">:=</span> <span class=\"n\">xs</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">nel1</span> <span class=\"o\">:</span> <span class=\"n\">NonEmptyList</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">l1</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">nel2</span> <span class=\"o\">:</span> <span class=\"n\">NonEmptyList</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">l1</span>\n</code></pre></div>\n<p>I get error for <code>#eval List.reverse idahoSpiders</code> where I did not apply α to be String to Polymorphic List.reverse.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">List.reverse</span> <span class=\"n\">idahoSpiders</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">idahoSpiders</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">NonEmptyList</span> <span class=\"n\">String</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">List</span> <span class=\"bp\">?</span><span class=\"n\">m.10443</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>Error goes away when I let lean know that <code>(α := String)</code>. I am guessing coercion and unification happen in different phases? Or coersion happens only on fully qualified types? Can someone more familiar with the steps lean takes in type inference/coercion search throw more light on this?</p>\n<p>This also makes statement <code>This allows non-empty lists to be used with the entire List API.</code> not as nice to work with as now i need to keep instantiating polymorphic APIs before coercion helps. Something I am missing which makes usage simpler?</p>\n<p>Also in dependent coercion, <code>def nel1 : NonEmptyList Nat := [1, 2, 3]</code> works, but not <code>def nel2 : NonEmptyList Nat := l1</code>. I am guessing somehow the list value <code>[1, 2, 3]</code> is helping identify that dependent coercion can be used, but cant really figure out how and why?</p>",
        "id": 424459127,
        "sender_full_name": "Param Reddy",
        "timestamp": 1709426699
    },
    {
        "content": "<p>Hey!  I just ran into the same dependent coercion that you found with nel1, l1 and nel2.  I'm sure hoping someone can explain what is going on.  That List.reverse example you found is bothersome too, and I'm curious about that one now as well.</p>",
        "id": 429588443,
        "sender_full_name": "Matthew Fisher",
        "timestamp": 1711432715
    }
]