[
    {
        "content": "<p>I'm trying to better understand scopes and namespaces, and I've got a bunch of questions about them:</p>\n<ol>\n<li>Is there a way to re-export names from a structure into a namespace? For example, if I've got</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Foo</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Bar</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"n\">baz</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"kn\">open</span> <span class=\"n\">Bar</span>\n</code></pre></div>\n<p>I want <code>baz</code> to be in the namespace Foo, so whenever someone does <code>open Foo</code>  they can write <code>baz</code> instead of <code>Bar.baz</code>.</p>\n<ol start=\"2\">\n<li>\n<p>More generally, is there a way to import one module and re-export its values? I.e. can I define a module that just imports a bunch of other modules and re-exports them into a single module, so they can all be imported at once? </p>\n</li>\n<li>\n<p>How do attributes interact with namespaces, specifically simp and aesop? If I've declared a rule as having the simp attribute, and that definition was in namespace <code>Foo</code> and module <code>M</code>, do you have to have both <code>import M</code> and <code>open Foo</code> for the simp rule to be used?</p>\n</li>\n</ol>",
        "id": 426592854,
        "sender_full_name": "Joey Eremondi",
        "timestamp": 1710437368
    },
    {
        "content": "<p>1) I've seen the pattern </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Foo</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Bar</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"n\">baz</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">baz</span> <span class=\"o\">:=</span> <span class=\"n\">Bar.baz</span>\n</code></pre></div>\n<p>before. Not sure if there's a better method.</p>\n<p>2) would that not just be a lean file with only imports, like for example <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Tactic/Common.lean\"><code>Mathlib.Tactics.Common</code></a>?</p>\n<p>3) no, you don't need to open a namespace for a <code>simp</code>-lemma to be found.</p>",
        "id": 426598503,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1710439281
    },
    {
        "content": "<p>I think you can use <code>export Bar (baz)</code> which avoids having a second declaration</p>",
        "id": 426599451,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710439579
    },
    {
        "content": "<p>Ooh, did not know there was an export keyword, will have to look at the docs for this</p>",
        "id": 426600795,
        "sender_full_name": "Joey Eremondi",
        "timestamp": 1710439992
    },
    {
        "content": "<p>also, lean files are called modules by lake, but have very little to do with modules from ML. namespaces are global and are not first-class (in the sense that you cannot operate on them like ML modules).</p>\n<p>I think the FRO has long-term thoughts about adding modules akin to those in ML and Roq, but last I heard it is a ways off!</p>",
        "id": 426601427,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1710440188
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"384488\">Joey Eremondi</span> <a href=\"#narrow/stream/270676-lean4/topic/Namespace.20Questions.3A.20re-exporting.2C.20attrubutes.2C.20etc.2E/near/426592854\">said</a>:</p>\n<blockquote>\n<ol start=\"3\">\n<li>How do attributes interact with namespaces</li>\n</ol>\n</blockquote>\n<p>Each attribute is free to have its own implementation for how it works, but I believe this is the expectation:</p>\n<ul>\n<li>If a global attribute is added in module A, then when you import module A you import that global attribute.</li>\n<li>If a scoped attribute is added in namespace NS in module A, then when you import module A you have to do <code>open scoped NS</code> (or the full <code>open NS</code>) to activate the scoped attribute.</li>\n</ul>\n<p>For importing, only scoped attributes have any interaction with namespaces.</p>",
        "id": 426768625,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710516819
    },
    {
        "content": "<p>There's risk of confusion here between the attribute itself and an attribute applied to a declaration. I'm not sure if we have terminology to distinguish them... In any case, some attributes support scoping, others don't, and when I say \"scoped attribute\" I mean specifically that an attribute-supporting-scoping was applied to a declaration by using the <code>scoped</code> modifier. (And if you don't use <code>scoped</code> or <code>local</code>, the attribute applied as <code>global</code>.)</p>",
        "id": 426769447,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710517068
    }
]