[
    {
        "content": "<p>Below, you can see the two ways in which I typically match on syntax.  Is there a way of mixing the two matchings in a single pattern?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span>\n\n<span class=\"c1\">-- works and can be extended by more `(...)</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"bp\">→</span>  <span class=\"n\">Syntax</span>\n  <span class=\"bp\">|</span> <span class=\"n\">s</span><span class=\"bp\">@`</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span>\n  <span class=\"bp\">|</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span>\n\n<span class=\"c1\">-- works and can be extended by more .atom, .node, ...</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"bp\">→</span>  <span class=\"n\">Syntax</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ident</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">v</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">mkIdent</span> <span class=\"n\">v</span>\n  <span class=\"bp\">|</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span>\n\n<span class=\"c1\">-- does not work</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"bp\">→</span>  <span class=\"n\">Syntax</span>\n  <span class=\"bp\">|</span> <span class=\"n\">s</span><span class=\"bp\">@`</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ident</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">v</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">mkIdent</span> <span class=\"n\">v</span>\n  <span class=\"bp\">|</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">match (syntax) : unexpected pattern kind .ident _ _ v _</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 437024522,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1714831347
    },
    {
        "content": "<p>(and similarly for <code>TSyntax</code> with <code>⟨.ident _ _ _ _⟩</code>)</p>",
        "id": 437024869,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714831700
    },
    {
        "content": "<p>I am comforted that one of the native Lean-speakers does not know of this feature!  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 437024948,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1714831801
    },
    {
        "content": "<p>I'm pretty sure it's just missing, for the same reason that I think you can't match on syntax and other arguments at the same time?</p>",
        "id": 437025045,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714831890
    },
    {
        "content": "<p>Ah, that I never tried!</p>",
        "id": 437025052,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1714831907
    },
    {
        "content": "<p>I bet you can trick it by adding a <code>~q</code> match to the same match</p>",
        "id": 437025112,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714831943
    },
    {
        "content": "<p>I am not sure that I understand what you have in mind, but both of these work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"bp\">→</span> <span class=\"n\">Unit</span> <span class=\"bp\">→</span>  <span class=\"n\">Unit</span>\n  <span class=\"bp\">|</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">t</span>\n\n<span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">node</span> <span class=\"bp\">..</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">t</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">t</span>\n</code></pre></div>",
        "id": 437025182,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1714832042
    },
    {
        "content": "<p>Does the one with a syntax antiquotation match work?</p>",
        "id": 437025232,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714832075
    },
    {
        "content": "<p>I think so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">t</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">t</span>\n</code></pre></div>\n<p>seems to work.</p>",
        "id": 437025247,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1714832106
    },
    {
        "content": "<p>I wonder what happens if you match on two syntaxes, one with anti-quotations on one with constructors...</p>",
        "id": 437025288,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1714832153
    },
    {
        "content": "<p>Ok, for completeness, this is what happens:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"c1\">-- does not work</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"bp\">→</span> <span class=\"n\">Syntax</span> <span class=\"bp\">→</span> <span class=\"n\">Unit</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"bp\">.</span><span class=\"n\">node</span> <span class=\"bp\">..</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">()</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">()</span>\n\n<span class=\"c1\">-- does not work</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"bp\">→</span> <span class=\"n\">Syntax</span> <span class=\"bp\">→</span> <span class=\"n\">Unit</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">node</span> <span class=\"bp\">..</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">()</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">()</span>\n\n<span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"bp\">→</span> <span class=\"n\">Syntax</span> <span class=\"bp\">→</span> <span class=\"n\">Unit</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">node</span> <span class=\"bp\">..</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">node</span> <span class=\"bp\">..</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">()</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">()</span>\n\n<span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"bp\">→</span> <span class=\"n\">Syntax</span> <span class=\"bp\">→</span> <span class=\"n\">Unit</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">()</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">()</span>\n</code></pre></div>",
        "id": 437055009,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1714859957
    },
    {
        "content": "<p>This will require rearchitecting the way match works to fix</p>",
        "id": 437055193,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714860101
    },
    {
        "content": "<p>Ok, it is not that important: the constructor matching works, it is just more verbose at times.</p>",
        "id": 437055267,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1714860156
    },
    {
        "content": "<p>you can usually refactor it into separate matches to get the desired mix and match</p>",
        "id": 437055297,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714860184
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/mix.20and.20match.20matching.20on.20Syntax/near/437025112\">said</a>:</p>\n<blockquote>\n<p>I bet you can trick it by adding a <code>~q</code> match to the same match</p>\n</blockquote>\n<p>Yep:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Qq</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Qq</span>\n\n<span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s1</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s2</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">s1</span><span class=\"o\">,</span> <span class=\"n\">s2</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">trivial</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"bp\">.</span><span class=\"n\">node</span> <span class=\"bp\">..</span><span class=\"o\">,</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">trivial</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"o\">()</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"o\">()</span>\n\n<span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s1</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s2</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">s1</span><span class=\"o\">,</span> <span class=\"n\">s2</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">trivial</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">node</span> <span class=\"bp\">..</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">trivial</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"o\">()</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"o\">()</span>\n</code></pre></div>",
        "id": 437058801,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714864048
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/270676-lean4/topic/mix.20and.20match.20matching.20on.20Syntax/near/437025247\">said</a>:</p>\n<blockquote>\n<p>I think so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">t</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">t</span>\n</code></pre></div>\n<p>seems to work.</p>\n</blockquote>\n<p>This fails if you replace <code>t =&gt;</code> with <code>() =&gt; ()</code>(or any other pattern that actually does work); so I think my original claim is basically correct</p>",
        "id": 437058914,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714864170
    }
]