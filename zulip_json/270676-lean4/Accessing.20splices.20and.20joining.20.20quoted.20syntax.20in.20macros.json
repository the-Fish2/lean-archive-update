[
    {
        "content": "<p>Hello, <br>\nI would like to bundle multiple commands together as a new command. </p>\n<p>However, I have problems to compute the splices as identifiers in the attached example. (I get Error : unexpected token '*'; expected ':=', 'where' or '|') </p>\n<p>Additionally, I would like to join x and y, so that both are executed when you call the command. Is this even possible?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"create\"</span> <span class=\"n\">ident</span> <span class=\"s2\">\"{\"</span>\n  <span class=\"o\">(</span><span class=\"n\">ident</span> <span class=\"s2\">\":\"</span> <span class=\"n\">ident</span><span class=\"o\">),</span><span class=\"bp\">*</span>\n<span class=\"s2\">\"}\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">hygiene</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">create</span> <span class=\"bp\">$</span><span class=\"n\">name</span> <span class=\"o\">{})</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">create</span> <span class=\"bp\">$</span><span class=\"n\">name</span> <span class=\"o\">{</span>\n      <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">relation</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">name2</span><span class=\"o\">],</span><span class=\"bp\">*</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">)</span>\n  <span class=\"bp\">=&gt;</span> <span class=\"k\">show</span> <span class=\"n\">MacroM</span> <span class=\"n\">Command</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">MacroM</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">command</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span>\n      <span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n      <span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">name2</span><span class=\"bp\">*</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n      <span class=\"c1\">-- rel def ?</span>\n      <span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">relation</span><span class=\"bp\">*</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">true</span> <span class=\"c1\">-- how to access relation as identifier</span>\n    <span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">MacroM</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">command</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">xx</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">))</span>\n    <span class=\"n\">x</span> <span class=\"c1\">-- join x and y</span>\n\n<span class=\"n\">create</span> <span class=\"n\">A</span> <span class=\"o\">{</span>\n  <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">C</span>\n<span class=\"o\">}</span>\n<span class=\"k\">#check</span> <span class=\"n\">A</span>\n<span class=\"k\">#check</span> <span class=\"n\">B</span>\n<span class=\"k\">#check</span> <span class=\"n\">C</span>\n</code></pre></div>",
        "id": 433298549,
        "sender_full_name": "Codegoblin",
        "timestamp": 1713189516
    },
    {
        "content": "<p>What is <code>create A { B : C }</code> supposed to do?</p>",
        "id": 433442008,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1713243421
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"372804\">@Marcus Rossel</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">create</span> <span class=\"n\">A</span> <span class=\"o\">{</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>It is supposed to execute the commands in the Macro. <br>\nMeaning to create the Variables A and C. This and the matching work already.</p>\n<p>Then I would also like it to create the definition (or theorem) with name B. However, here I can't (or don't know how to) access the ident \"relation\". </p>\n<p>Since I want the possibility to add more than one in the {}-brackets, I used the *-Operator. </p>\n<p>Another possibility would be to use a for loop over relation and name2, but then I would have to join multiple of the Expressions in the `()-Quotation together (which I also do not know how to do).</p>\n<p>Maybe there is also an easier way to accomplish my goal?</p>",
        "id": 433470283,
        "sender_full_name": "Codegoblin",
        "timestamp": 1713256643
    },
    {
        "content": "<p><del>Is it that you just need to give your definition a name? adding <code>def xy $relation* : Prop := True</code> seems to compile at first glance.</del> I think I actually don't understand what you try to do, sorry. If <code>B</code> is a list of names then I think you should create one definition per name. If <code>B</code> includes hypotheses, then I think you need separate name &amp; declSign as in the link below.</p>",
        "id": 433479619,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1713259701
    },
    {
        "content": "<p>(note that I have no clue, but for reference <a href=\"https://github.com/leanprover-community/lean4game/blob/d034148bec3a433eac40cf3be2573bc1c2c0299e/server/GameServer/Commands.lean#L427C4-L427C5\">here</a> I create some theorems on the fly, maybe that helps for comparison?)</p>",
        "id": 433480287,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1713259930
    },
    {
        "content": "<p>You can't access <code>relation</code> as an identifier, because <code>relation</code> is an <code>Array</code>. Did you want to loop over that array?</p>",
        "id": 433484594,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1713261445
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Indeed, that's what I want. I want that the def is created as many times as there is something in the array.<br>\n<span class=\"user-mention\" data-user-id=\"385895\">@Jon Eugster</span>  I think my description was unclear. I want to create the possibility to add *-many entrys in the {}. For example </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">create</span> <span class=\"n\">A</span><span class=\"o\">{</span>\n<span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">C</span>\n<span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">E</span>\n<span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">G</span>\n<span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">J</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>should also be possible. (And can already be parsed). I would like to access relation in a manner that the def is done *-times like in the variable creation (<br>\n<code>  variable ($name2* : R)</code></p>\n<p>E: So the output of the Example above would be.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">C</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">E</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">J</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"kd\">def</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"kd\">def</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"kd\">def</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n</code></pre></div>",
        "id": 433486264,
        "sender_full_name": "Codegoblin",
        "timestamp": 1713261962
    },
    {
        "content": "<p>Here is a minimalistic example of what I'm trying to archive. </p>\n<p>While cmd1 works, in cmd2 I get an Error.</p>\n<p>If there is another way to achieve this goal (maybe without macro?), I will also gladly hear it.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"cmd1\"</span> <span class=\"n\">ident</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">cmd1</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">],</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"bp\">*</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">))</span>  <span class=\"c1\">-- Error in this line</span>\n\n<span class=\"n\">cmd1</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">C</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">A</span>\n<span class=\"k\">#check</span> <span class=\"n\">B</span>\n<span class=\"k\">#check</span> <span class=\"n\">C</span>\n\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"cmd2\"</span> <span class=\"n\">ident</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">hygiene</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">cmd2</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">],</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"bp\">*</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">True</span><span class=\"o\">)</span>\n\n<span class=\"n\">cmd2</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">C</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">A</span>\n<span class=\"k\">#check</span> <span class=\"n\">B</span>\n<span class=\"k\">#check</span> <span class=\"n\">C</span>\n</code></pre></div>",
        "id": 434031115,
        "sender_full_name": "Codegoblin",
        "timestamp": 1713441917
    },
    {
        "content": "<p>I'm not sure where <code>R</code> comes from, but this implements the example you gave:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">entry</span>\n<span class=\"n\">syntax</span> <span class=\"n\">ident</span> <span class=\"s2\">\" : \"</span> <span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">entry</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">splitEntries</span> <span class=\"o\">(</span><span class=\"n\">entries</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">entry</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">Ident</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">Ident</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">entries.foldl</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"o\">[],</span> <span class=\"bp\">#</span><span class=\"o\">[]))</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">ls</span><span class=\"o\">,</span> <span class=\"n\">rs</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">entry</span><span class=\"bp\">|$</span><span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">ls.push</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">rs.push</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span>                      <span class=\"bp\">=&gt;</span> <span class=\"n\">unreachable</span><span class=\"bp\">!</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"create\"</span> <span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"s2\">\"{\"</span> <span class=\"n\">entries</span><span class=\"o\">:</span><span class=\"n\">entry</span><span class=\"bp\">*</span> <span class=\"s2\">\"}\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">ls</span><span class=\"o\">,</span> <span class=\"n\">rs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">splitEntries</span> <span class=\"n\">entries</span>\n  <span class=\"k\">let</span> <span class=\"n\">rIdent</span> <span class=\"o\">:=</span> <span class=\"n\">mkIdent</span> <span class=\"bp\">`</span><span class=\"n\">R</span>\n  <span class=\"k\">let</span> <span class=\"n\">vars</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"n\">rs</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mapM</span> <span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">rIdent</span><span class=\"o\">))</span>\n  <span class=\"k\">let</span> <span class=\"n\">defs</span> <span class=\"bp\">←</span> <span class=\"n\">ls.mapM</span> <span class=\"k\">fun</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">cmds</span> <span class=\"o\">:=</span> <span class=\"n\">vars</span> <span class=\"bp\">++</span> <span class=\"n\">defs</span>\n  <span class=\"n\">return</span> <span class=\"o\">⟨</span><span class=\"n\">mkNullNode</span> <span class=\"n\">cmds</span><span class=\"o\">⟩</span>\n\n<span class=\"n\">create</span> <span class=\"n\">A</span> <span class=\"o\">{</span>\n  <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">C</span>\n  <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">E</span>\n  <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">G</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">A</span> <span class=\"c1\">-- A : R</span>\n<span class=\"k\">#check</span> <span class=\"n\">B</span> <span class=\"c1\">-- B : Prop</span>\n</code></pre></div>\n<p>(For an explanation of the <code>mkNullNode</code>, see <a href=\"#narrow/stream/270676-lean4/topic/Antiquot.20Splice/near/297760730\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Antiquot.20Splice/near/297760730</a>)</p>",
        "id": 434034549,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1713443109
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"372804\">@Marcus Rossel</span>  Thank you VERY much. Not only did you show me the entry \"trick\", you also showed how to join multiple Command outputs. I could apply it perfectly to my Problem. <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 434042658,
        "sender_full_name": "Codegoblin",
        "timestamp": 1713445689
    }
]