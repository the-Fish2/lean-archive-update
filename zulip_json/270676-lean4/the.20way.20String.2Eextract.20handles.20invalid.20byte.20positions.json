[
    {
        "content": "<p>Consider the following evaluations:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span><span class=\"w\"> </span><span class=\"s2\">\"ㄱㄴㄷ\"</span><span class=\"bp\">.</span><span class=\"n\">extract</span><span class=\"w\"> </span><span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">⟩</span><span class=\"w\"> </span><span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">⟩</span><span class=\"w\"> </span><span class=\"c1\">-- output: \"ㄱㄴㄷ\"</span>\n<span class=\"k\">#eval</span><span class=\"w\"> </span><span class=\"s2\">\"ㄱㄴㄷ\"</span><span class=\"bp\">.</span><span class=\"n\">extract</span><span class=\"w\"> </span><span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">⟩</span><span class=\"w\"> </span><span class=\"o\">⟨</span><span class=\"mi\">2</span><span class=\"o\">⟩</span><span class=\"w\"> </span><span class=\"c1\">-- \"ㄱㄴㄷ\"</span>\n<span class=\"k\">#eval</span><span class=\"w\"> </span><span class=\"s2\">\"ㄱㄴㄷ\"</span><span class=\"bp\">.</span><span class=\"n\">extract</span><span class=\"w\"> </span><span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">⟩</span><span class=\"w\"> </span><span class=\"o\">⟨</span><span class=\"mi\">3</span><span class=\"o\">⟩</span><span class=\"w\"> </span><span class=\"c1\">-- \"ㄱ\"</span>\n</code></pre></div>\n<p>I think it'd be better if the first two outputs were <code>\"ㄱ\"</code> instead of <code>\"ㄱㄴㄷ\"</code>. But I'm not sure it's necessary. What do you think?</p>",
        "id": 442803813,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1717597742
    },
    {
        "content": "<p>This seems similar to my troubles in <a href=\"#narrow/stream/270676-lean4/topic/converting.20between.20.60Lean.2EPosition.60.20and.2E.2E.2E.20something.20else!\">this thread</a>.</p>",
        "id": 442805310,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1717598136
    },
    {
        "content": "<p>Absent further motivation, the rule is garbage in, garbage out</p>",
        "id": 442805573,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1717598194
    },
    {
        "content": "<p>Where the garbage here is using <code>⟨i⟩</code> to construct invalid string positions</p>",
        "id": 442806062,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717598330
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"https://github.com/leanprover-community/batteries/pull/140#issue-1708874475\">said</a>:</p>\n<blockquote>\n<p>The difficult part about string manipulation is that everything uses the <code>Pos</code> type, which is not necessarily a valid UTF8 char boundary in the string, and the string functions have a variety of (mostly garbage and not at all consistent) ways to handle these invalid locations. We could painstakingly prove how each of them handles this case, but it is basically a misuse of the library so I think it is safe to just restrict to the case where the position is valid for the string.</p>\n<p>To that end, we introduce the <code>Pos.Valid</code> type, which asserts that the position is the UTF8 length of some initial substring. We can prove some strong theorems about the behavior of all the main functions, but with awkward input values. The <code>ValidFor</code> type makes this a bit easier; it works especially well for the <code>String.Iterator</code> type but we also have a version for <code>Substring</code>.</p>\n</blockquote>",
        "id": 442808013,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1717598807
    },
    {
        "content": "<p>Thanks to <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, we already have some tools in Batteries that make it less painful to prove theorems about string manipulations.</p>",
        "id": 442809118,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1717599100
    },
    {
        "content": "<p><del>Still, some theorems I'm trying to prove can't use <code>Pos.Valid</code> or <code>ValidFor</code>.</del> I think a few string functions are currently defined in a way that it's hard to prove theorems about them. But I'm not asking for refactoring. I just wanted to talk about this matter.</p>",
        "id": 442814676,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1717600385
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417769\">Bulhwi Cha</span> <a href=\"#narrow/stream/270676-lean4/topic/the.20way.20String.2Eextract.20handles.20invalid.20byte.20positions/near/442814676\">said</a>:</p>\n<blockquote>\n<p><del>Still, some theorems I'm trying to prove can't use <code>Pos.Valid</code> or <code>ValidFor</code>.</del> I think a few string functions are currently defined in a way that it's hard to prove theorems about them.</p>\n</blockquote>\n<p>Consider the following theorem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span><span class=\"w\"> </span><span class=\"n\">extract_eq_extract_append_extract</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Pos</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hle₁</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hle₂</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"n\">s.extract</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">s.extract</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"bp\">++</span><span class=\"w\"> </span><span class=\"n\">s.extract</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"kd\">by</span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n\n<span class=\"k\">#eval</span><span class=\"w\"> </span><span class=\"s2\">\"ㄱㄴㄷ\"</span><span class=\"bp\">.</span><span class=\"n\">extract</span><span class=\"w\"> </span><span class=\"o\">⟨</span><span class=\"mi\">3</span><span class=\"o\">⟩</span><span class=\"w\"> </span><span class=\"o\">⟨</span><span class=\"mi\">6</span><span class=\"o\">⟩</span><span class=\"w\"> </span><span class=\"c1\">-- output: \"ㄴ\"</span>\n<span class=\"k\">#eval</span><span class=\"w\"> </span><span class=\"s2\">\"ㄱㄴㄷ\"</span><span class=\"bp\">.</span><span class=\"n\">extract</span><span class=\"w\"> </span><span class=\"o\">⟨</span><span class=\"mi\">3</span><span class=\"o\">⟩</span><span class=\"w\"> </span><span class=\"o\">⟨</span><span class=\"mi\">4</span><span class=\"o\">⟩</span><span class=\"w\"> </span><span class=\"c1\">-- \"ㄴㄷ\"</span>\n<span class=\"k\">#eval</span><span class=\"w\"> </span><span class=\"s2\">\"ㄱㄴㄷ\"</span><span class=\"bp\">.</span><span class=\"n\">extract</span><span class=\"w\"> </span><span class=\"o\">⟨</span><span class=\"mi\">4</span><span class=\"o\">⟩</span><span class=\"w\"> </span><span class=\"o\">⟨</span><span class=\"mi\">6</span><span class=\"o\">⟩</span><span class=\"w\"> </span><span class=\"c1\">-- \"\"</span>\n</code></pre></div>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>A mistake I made in the statement (fixed)</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gd\">-    s.extract i j = s.extract i j ++ s.extract j k := by</span>\n<span class=\"gi\">+    s.extract i k = s.extract i j ++ s.extract j k := by</span>\n</code></pre></div>\n</div></div>\n<p>What hypotheses do I need to add to this theorem?</p>",
        "id": 444978752,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1718546577
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/the.20way.20String.2Eextract.20handles.20invalid.20byte.20positions/near/442805573\">said</a>:</p>\n<blockquote>\n<p>the rule is garbage in, garbage out</p>\n</blockquote>\n<p>Why do we let garbage in?</p>",
        "id": 444979189,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1718547002
    },
    {
        "content": "<p>because it's easier not to have additional hypotheses on the inputs for practical reasons</p>",
        "id": 444981025,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1718548623
    },
    {
        "content": "<p>but these functions should be treated as not having useful values when the inputs are not valid</p>",
        "id": 444981052,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1718548650
    },
    {
        "content": "<p>The theorem <code>extract_eq_extract_append_extract</code> you wrote above should hold if i,j,k are all <code>Pos.Valid</code> (if you fix the statement to use <code>s.extract i k</code> on the left)</p>",
        "id": 444981154,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1718548735
    },
    {
        "content": "<p>It is also possible to characterize what <code>extract</code> does in general, it basically sanitizes both positions by setting them to <code>String.endPos</code> if not valid</p>",
        "id": 444981226,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1718548800
    },
    {
        "content": "<p>and you could take advantage of this observation to prove that <code>extract_eq_extract_append_extract</code> still holds if <code>k</code> is not valid, although it's not really necessary</p>",
        "id": 444981453,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1718548967
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417769\">Bulhwi Cha</span> <a href=\"#narrow/stream/270676-lean4/topic/the.20way.20String.2Eextract.20handles.20invalid.20byte.20positions/near/442814676\">said</a>:</p>\n<blockquote>\n<p>Still, some theorems I'm trying to prove can't use <code>Pos.Valid</code> or <code>ValidFor</code>.</p>\n</blockquote>\n<p>I was mistaken about <code>Pos.Valid</code>. I can use it for the theorems I'm trying to prove.</p>",
        "id": 444981726,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1718549213
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/the.20way.20String.2Eextract.20handles.20invalid.20byte.20positions/near/444981154\">said</a>:</p>\n<blockquote>\n<p>The theorem <code>extract_eq_extract_append_extract</code> you wrote above should hold if i,j,k are all <code>Pos.Valid</code> (if you fix the statement to use <code>s.extract i k</code> on the left)</p>\n</blockquote>\n<p>Oh, I haven't noticed. I fixed it.</p>",
        "id": 444981959,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1718549405
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span><span class=\"w\"> </span><span class=\"n\">extract_eq_extract_append_extract</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Pos</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">hval₁</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">i.Valid</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hval₂</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">j.Valid</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hval₃</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">k.Valid</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hle₁</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hle₂</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"n\">s.extract</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">s.extract</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"bp\">++</span><span class=\"w\"> </span><span class=\"n\">s.extract</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"kd\">by</span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Thank you very much for your explanation, Mario. You're amazing.</p>",
        "id": 444982866,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1718550125
    }
]