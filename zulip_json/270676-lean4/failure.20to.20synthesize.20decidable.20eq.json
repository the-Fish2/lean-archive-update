[
    {
        "content": "<p>I was wondering if anyone might know why these errors are occurring at <code>symbol_arrow_fun := symbol_arrow_list_to_fun [⟨0, c, 1⟩]</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">synthesize</span><span class=\"w\"> </span><span class=\"kn\">instance</span>\n<span class=\"w\">  </span><span class=\"n\">OfNat</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">State</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">char</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n\n<span class=\"n\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">synthesize</span><span class=\"w\"> </span><span class=\"kn\">instance</span>\n<span class=\"w\">  </span><span class=\"n\">OfNat</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">State</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">char</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n\n<span class=\"n\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">synthesize</span><span class=\"w\"> </span><span class=\"kn\">instance</span>\n<span class=\"w\">  </span><span class=\"n\">DecidableEq</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">State</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">char</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">))</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">RegExp</span><span class=\"bp\">.</span><span class=\"n\">State</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"o\">[</span><span class=\"n\">DecidableEq</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"n\">RegExp</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"kt\">Type</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">char</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">epsilon</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">zero</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">union</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"bp\">.</span><span class=\"n\">State</span><span class=\"w\"> </span><span class=\"bp\">⊕</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"bp\">.</span><span class=\"n\">State</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">concat</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"bp\">.</span><span class=\"n\">State</span><span class=\"w\"> </span><span class=\"bp\">⊕</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"bp\">.</span><span class=\"n\">State</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">closure</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Option</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"bp\">.</span><span class=\"n\">State</span>\n\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">RegExp</span><span class=\"bp\">.</span><span class=\"n\">toEpsilonNFA</span>\n<span class=\"w\">  </span><span class=\"o\">{</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"w\">  </span><span class=\"o\">[</span><span class=\"n\">DecidableEq</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">RegExp</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"n\">EpsilonNFA</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"bp\">.</span><span class=\"n\">State</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">char</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">    </span><span class=\"o\">{</span>\n<span class=\"w\">      </span><span class=\"n\">symbol_arrow_fun</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">symbol_arrow_list_to_fun</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"bp\">⟩</span><span class=\"o\">]</span>\n<span class=\"w\">      </span><span class=\"n\">epsilon_arrow_list</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">[]</span>\n<span class=\"w\">      </span><span class=\"n\">starting_state_list</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span>\n<span class=\"w\">      </span><span class=\"n\">accepting_state_list</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 441837315,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1717204353
    },
    {
        "content": "<p>What is <code>symbol_arrow_list_to_fun</code>?</p>",
        "id": 441839859,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1717206396
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">structure</span><span class=\"w\"> </span><span class=\"n\">SymbolArrow</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">σ</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">start_state</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">σ</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">symbol</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">stop_state</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">σ</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"n\">deriving</span><span class=\"w\"> </span><span class=\"n\">Repr</span>\n\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">  The accumulated stop states of all of the arrows in the list that have a start state and symbol matching the given state and symbol.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">symbol_arrow_list_to_fun</span>\n<span class=\"w\">  </span><span class=\"o\">{</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"w\">  </span><span class=\"o\">[</span><span class=\"n\">DecidableEq</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"o\">{</span><span class=\"n\">σ</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"w\">  </span><span class=\"o\">[</span><span class=\"n\">DecidableEq</span><span class=\"w\"> </span><span class=\"n\">σ</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">symbol_arrow_list</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">SymbolArrow</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">σ</span><span class=\"o\">))</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">start_state</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">σ</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">symbol</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"n\">σ</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">symbol_arrow_list</span><span class=\"bp\">.</span><span class=\"n\">filterMap</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">arrow</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">SymbolArrow</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">σ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">arrow</span><span class=\"bp\">.</span><span class=\"n\">start_state</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">start_state</span><span class=\"w\"> </span><span class=\"bp\">∧</span><span class=\"w\"> </span><span class=\"n\">arrow</span><span class=\"bp\">.</span><span class=\"n\">symbol</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">symbol</span>\n<span class=\"w\">    </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"n\">Option</span><span class=\"bp\">.</span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"n\">arrow</span><span class=\"bp\">.</span><span class=\"n\">stop_state</span>\n<span class=\"w\">    </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"n\">Option</span><span class=\"bp\">.</span><span class=\"n\">none</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">dedup</span>\n</code></pre></div>",
        "id": 441839919,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1717206446
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">structure</span><span class=\"w\"> </span><span class=\"n\">EpsilonNFA</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">σ</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">symbol_arrow_fun</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">σ</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"n\">σ</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">epsilon_arrow_list</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">σ</span><span class=\"w\"> </span><span class=\"bp\">×</span><span class=\"w\"> </span><span class=\"n\">σ</span><span class=\"o\">))</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">starting_state_list</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"n\">σ</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">accepting_state_list</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"n\">σ</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 441840253,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1717206632
    },
    {
        "content": "<p><a href=\"https://live.lean-lang.org/#code=import%20Mathlib.Data.List.Defs%0A%0Astructure%20SymbolArrow%0A%20%20(%CE%B1%20%3A%20Type)%0A%20%20(%CF%83%20%3A%20Type)%20%3A%0A%20%20Type%20%3A%3D%0A%20%20(start_state%20%3A%20%CF%83)%0A%20%20(symbol%20%3A%20%CE%B1)%0A%20%20(stop_state%20%3A%20%CF%83)%0A%20%20deriving%20Repr%0A%0A%20%20%40%5Bsimp%5D%0Adef%20symbol_arrow_list_to_fun%0A%20%20%7B%CE%B1%20%3A%20Type%7D%0A%20%20%5BDecidableEq%20%CE%B1%5D%0A%20%20%7B%CF%83%20%3A%20Type%7D%0A%20%20%5BDecidableEq%20%CF%83%5D%0A%20%20(symbol_arrow_list%20%3A%20List%20(SymbolArrow%20%CE%B1%20%CF%83))%0A%20%20(start_state%20%3A%20%CF%83)%0A%20%20(symbol%20%3A%20%CE%B1)%20%3A%0A%20%20List%20%CF%83%20%3A%3D%0A%20%20(symbol_arrow_list.filterMap%20(fun%20(arrow%20%3A%20SymbolArrow%20%CE%B1%20%CF%83)%20%3D%3E%0A%20%20%20%20if%20arrow.start_state%20%3D%20start_state%20%E2%88%A7%20arrow.symbol%20%3D%20symbol%0A%20%20%20%20then%20Option.some%20arrow.stop_state%0A%20%20%20%20else%20Option.none)).dedup%0A%0Astructure%20EpsilonNFA%0A%20%20(%CE%B1%20%3A%20Type)%0A%20%20(%CF%83%20%3A%20Type)%20%3A%0A%20%20Type%20%3A%3D%0A%20%20(symbol_arrow_fun%20%3A%20%CF%83%20%E2%86%92%20%CE%B1%20%E2%86%92%20List%20%CF%83)%0A%20%20(epsilon_arrow_list%20%3A%20List%20(%CF%83%20%C3%97%20%CF%83))%0A%20%20(starting_state_list%20%3A%20List%20%CF%83)%0A%20%20(accepting_state_list%20%3A%20List%20%CF%83)%0A%0A%20%20inductive%20RegExp%0A%20%20(%CE%B1%20%3A%20Type)%20%3A%0A%20%20Type%0A%20%20%7C%20char%20%3A%20%CE%B1%20%E2%86%92%20RegExp%20%CE%B1%0A%20%20%7C%20epsilon%20%3A%20RegExp%20%CE%B1%0A%20%20%7C%20zero%20%3A%20RegExp%20%CE%B1%0A%20%20%7C%20union%20%3A%20RegExp%20%CE%B1%20%E2%86%92%20RegExp%20%CE%B1%20%E2%86%92%20RegExp%20%CE%B1%0A%20%20%7C%20concat%20%3A%20RegExp%20%CE%B1%20%E2%86%92%20RegExp%20%CE%B1%20%E2%86%92%20RegExp%20%CE%B1%0A%20%20%7C%20closure%20%3A%20RegExp%20%CE%B1%20%E2%86%92%20RegExp%20%CE%B1%0A%20%20deriving%20Repr%0A%0A%20%20def%20RegExp.State%0A%20%20(%CE%B1%20%3A%20Type)%0A%20%20%5BDecidableEq%20%CE%B1%5D%20%3A%0A%20%20RegExp%20%CE%B1%20%E2%86%92%20Type%0A%7C%20char%20_%20%3D%3E%20%E2%84%95%0A%7C%20epsilon%20%3D%3E%20%E2%84%95%0A%7C%20zero%20%3D%3E%20%E2%84%95%0A%7C%20union%20R%20S%20%3D%3E%20R.State%20%E2%8A%95%20S.State%0A%7C%20concat%20R%20S%20%3D%3E%20R.State%20%E2%8A%95%20S.State%0A%7C%20closure%20R%20%3D%3E%20Option%20R.State%0A%0A%0Adef%20RegExp.toEpsilonNFA%0A%20%20%7B%CE%B1%20%3A%20Type%7D%0A%20%20%5BDecidableEq%20%CE%B1%5D%0A%20%20(R%20%3A%20RegExp%20%CE%B1)%20%3A%0A%20%20EpsilonNFA%20%CE%B1%20R.State%20%3A%3D%0A%20%20match%20R%20with%0A%20%20%7C%20char%20c%20%3D%3E%0A%20%20%20%20%7B%0A%20%20%20%20%20%20symbol_arrow_fun%20%3A%3D%20symbol_arrow_list_to_fun%20%5B%E2%9F%A80%2C%20c%2C%201%E2%9F%A9%5D%0A%20%20%20%20%20%20epsilon_arrow_list%20%3A%3D%20%5B%5D%0A%20%20%20%20%20%20starting_state_list%20%3A%3D%20%5B0%5D%0A%20%20%20%20%20%20accepting_state_list%20%3A%3D%20%5B1%5D%0A%20%20%20%20%7D%0A\">Lean 4 Web instance</a></p>",
        "id": 441841043,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1717207130
    },
    {
        "content": "<p>I didn't look at this super deeply since it's complicated, but it appears that you need to make <code>RegExp.State</code> reducible or an abbrev like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">reducible</span><span class=\"kd\">]</span>\n<span class=\"w\">  </span><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">RegExp</span><span class=\"bp\">.</span><span class=\"n\">State</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"o\">[</span><span class=\"n\">DecidableEq</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"n\">RegExp</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"kt\">Type</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">char</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">epsilon</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">zero</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">union</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"bp\">.</span><span class=\"n\">State</span><span class=\"w\"> </span><span class=\"bp\">⊕</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"bp\">.</span><span class=\"n\">State</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">concat</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"bp\">.</span><span class=\"n\">State</span><span class=\"w\"> </span><span class=\"bp\">⊕</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"bp\">.</span><span class=\"n\">State</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">closure</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Option</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"bp\">.</span><span class=\"n\">State</span>\n</code></pre></div>\n<p>You're trying to get Lean to recognize that <code>State α (char c))</code> is <code>Nat</code>, but it's not unfolding <code>State</code> to look at the definition since it's not reducible.</p>",
        "id": 441845585,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1717210166
    },
    {
        "content": "<p>I see. Thank you!</p>",
        "id": 441845730,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1717210261
    }
]