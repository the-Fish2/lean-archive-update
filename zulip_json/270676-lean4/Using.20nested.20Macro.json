[
    {
        "content": "<p>Hello,<br>\nis it possible, to nest Macros in the way, that the outer Macro \"just\" calls the macro rules of the underlying macro?</p>\n<p>As Example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">declare_syntax_cat</span> <span class=\"n\">under</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"start \"</span> <span class=\"n\">under</span><span class=\"bp\">*</span> <span class=\"s2\">\" end\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">start</span> <span class=\"bp\">$</span><span class=\"n\">stx</span><span class=\"bp\">*</span> <span class=\"kd\">end</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">stx</span><span class=\"o\">)</span>  <span class=\"c1\">-- How to call the lower Macro Definition?</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"eval \"</span> <span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">under</span>\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">under</span><span class=\"bp\">|</span> <span class=\"n\">eval</span> <span class=\"bp\">$</span><span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">#eval</span> <span class=\"bp\">$</span><span class=\"n\">id</span><span class=\"o\">)</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"check\"</span> <span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">under</span>\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">under</span><span class=\"bp\">|</span> <span class=\"n\">check</span> <span class=\"bp\">$</span><span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">#check</span> <span class=\"bp\">$</span><span class=\"n\">id</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)</span>\n\n<span class=\"n\">start</span>\n<span class=\"n\">eval</span> <span class=\"n\">x</span>\n<span class=\"n\">check</span> <span class=\"n\">x</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I would like to encapsulate my Macros in a scope beginning with \"start\" and ending with \"end\", inside I want to be able to call *-many checks or evals (nothing else should be permitted).  They should just evaluate to the macro rules already defined for them (e.g. check x becomes #check x)</p>\n<p>Maybe there is also an easier or better way to archive this?</p>",
        "id": 435020249,
        "sender_full_name": "Codegoblin",
        "timestamp": 1713888978
    },
    {
        "content": "<p>I tried to solve my problem with another approach: Instead of using the underlying macro rules, I tried to recapture them in functions. However here I get either <strong>typeclass instance problem is stuck, it is often due to metavariables</strong></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">evalMacroSyntax1</span>\n  <span class=\"o\">(</span><span class=\"n\">entries</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">under</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">cmds</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n    <span class=\"n\">for</span> <span class=\"n\">entry</span> <span class=\"k\">in</span> <span class=\"n\">entries</span> <span class=\"k\">do</span> <span class=\"c1\">-- error in this line</span>\n      <span class=\"k\">let</span> <span class=\"n\">cmd</span> <span class=\"bp\">‚Üê</span> <span class=\"k\">match</span> <span class=\"n\">entry</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">under</span><span class=\"bp\">|</span> <span class=\"n\">check</span> <span class=\"bp\">$</span><span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">#check</span> <span class=\"bp\">$</span><span class=\"n\">id</span><span class=\"o\">)</span>\n        <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">under</span><span class=\"bp\">|</span> <span class=\"n\">eval</span> <span class=\"bp\">$</span><span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">#eval</span> <span class=\"bp\">$</span><span class=\"n\">id</span><span class=\"o\">)</span>\n        <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">unreachable</span><span class=\"bp\">!</span>\n      <span class=\"n\">cmds</span> <span class=\"o\">:=</span> <span class=\"n\">cmds.push</span> <span class=\"n\">cmd</span>\n    <span class=\"n\">return</span> <span class=\"n\">cmds</span>\n</code></pre></div>\n<p>or I get multiple <strong>failed to synthesize instance</strong></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">evalMacroSyntax2</span>\n  <span class=\"o\">(</span><span class=\"n\">entries</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">under</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n    <span class=\"n\">return</span> <span class=\"n\">entries.foldl</span>\n      <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"o\">[]))</span>\n        <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">entry</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span>\n          <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">under</span><span class=\"bp\">|</span> <span class=\"n\">check</span> <span class=\"bp\">$</span><span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">#check</span> <span class=\"bp\">$</span><span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"c1\">-- error here</span>\n          <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">under</span><span class=\"bp\">|</span> <span class=\"n\">eval</span> <span class=\"bp\">$</span><span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">#eval</span> <span class=\"bp\">$</span><span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"c1\">-- error here</span>\n          <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">unreachable</span><span class=\"bp\">!</span>\n</code></pre></div>\n<p>These examples are written into the original example.</p>\n<p>How can I resolve these errors? How can I avoid crossing such errors in the future?</p>",
        "id": 435532326,
        "sender_full_name": "Codegoblin",
        "timestamp": 1714117331
    },
    {
        "content": "<p>You should annotate the return types of your functions</p>",
        "id": 435533500,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1714117783
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> If I give the return type of <strong>Array (TSyntax `command)</strong> I apparently need to add <a href=\"http://Id.run\">Id.run</a>, however then I get the error <strong>failed to synthesize instance</strong> now related to Id.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">evalMacroSyntax</span>\n  <span class=\"o\">(</span><span class=\"n\">entries</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">under</span><span class=\"o\">))</span>\n    <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">command</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">cmds</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">command</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n      <span class=\"n\">for</span> <span class=\"n\">entry</span> <span class=\"k\">in</span> <span class=\"n\">entries</span> <span class=\"k\">do</span>\n        <span class=\"k\">let</span> <span class=\"n\">cmd</span> <span class=\"bp\">‚Üê</span> <span class=\"k\">match</span> <span class=\"n\">entry</span> <span class=\"k\">with</span>\n          <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">under</span><span class=\"bp\">|</span> <span class=\"n\">check</span> <span class=\"bp\">$</span><span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">#check</span> <span class=\"bp\">$</span><span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"c1\">-- errors here</span>\n          <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">under</span><span class=\"bp\">|</span> <span class=\"n\">eval</span> <span class=\"bp\">$</span><span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">#eval</span> <span class=\"bp\">$</span><span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"c1\">--errors here</span>\n          <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">unreachable</span><span class=\"bp\">!</span>\n        <span class=\"n\">cmds</span> <span class=\"o\">:=</span> <span class=\"n\">cmds.push</span> <span class=\"n\">cmd</span>\n      <span class=\"n\">return</span> <span class=\"n\">cmds</span>\n</code></pre></div>\n<p>If this is not possible to solve, it's OK, since I can use <strong>MacroM Syntax as return value</strong>. However, then I cannot join the result with others (of type MacroM Syntax). Or if it is possible, I don't know how to do it.</p>\n<p>With the following version I get another error in the last step saying <strong>(kernel) declaration has free variables '_eval'</strong>. Is this an Error in my variable declaration?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">under</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"eval \"</span> <span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">under</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"check\"</span> <span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">under</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">evalMacroSyntax</span>\n  <span class=\"o\">(</span><span class=\"n\">entries</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">under</span><span class=\"o\">))</span>\n    <span class=\"o\">:</span> <span class=\"n\">MacroM</span> <span class=\"n\">Syntax</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">cmds</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">command</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n      <span class=\"n\">for</span> <span class=\"n\">entry</span> <span class=\"k\">in</span> <span class=\"n\">entries</span> <span class=\"k\">do</span>\n        <span class=\"k\">let</span> <span class=\"n\">cmd</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">command</span> <span class=\"bp\">‚Üê</span>\n          <span class=\"k\">match</span> <span class=\"n\">entry</span> <span class=\"k\">with</span>\n            <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">under</span><span class=\"bp\">|</span> <span class=\"n\">check</span> <span class=\"bp\">$</span><span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">#check</span> <span class=\"bp\">$</span><span class=\"n\">id</span><span class=\"o\">)</span>\n            <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">under</span><span class=\"bp\">|</span> <span class=\"n\">eval</span> <span class=\"bp\">$</span><span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">#eval</span> <span class=\"bp\">$</span><span class=\"n\">id</span><span class=\"o\">)</span>\n            <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">unreachable</span><span class=\"bp\">!</span> <span class=\"c1\">-- there are only two permitted options</span>\n        <span class=\"n\">cmds</span> <span class=\"o\">:=</span> <span class=\"n\">cmds.push</span> <span class=\"n\">cmd</span>\n      <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">mkNullNode</span> <span class=\"n\">cmds</span><span class=\"o\">)</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"start \"</span> <span class=\"n\">under</span><span class=\"bp\">+</span> <span class=\"s2\">\" end\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">start</span> <span class=\"bp\">$</span><span class=\"n\">stx</span><span class=\"bp\">*</span> <span class=\"kd\">end</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">evalMacroSyntax</span> <span class=\"n\">stx</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)</span>\n\n<span class=\"n\">start</span> <span class=\"c1\">-- here i get the error =&gt; (kernel) declaration has free variables '_eval'</span>\n  <span class=\"n\">eval</span> <span class=\"n\">x</span>\n  <span class=\"n\">check</span> <span class=\"n\">x</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 435551712,
        "sender_full_name": "Codegoblin",
        "timestamp": 1714124516
    },
    {
        "content": "<p>What do you expect evaluating a free variable to do? You get the same error using <code>#eval x</code> independently of your macro</p>",
        "id": 435552461,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1714124782
    },
    {
        "content": "<p>Oh, indeed. This was a problem in front of the pc. <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> </p>\n<p>Thanks so far. However, I have one last question: Is it possible to \"concatenate\" multiple Structures of MacroM Syntax together? Or is the only way here to collect all in an Array and use mkNullNode?</p>",
        "id": 435553848,
        "sender_full_name": "Codegoblin",
        "timestamp": 1714125309
    }
]