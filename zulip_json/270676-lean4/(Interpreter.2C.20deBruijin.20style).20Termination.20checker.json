[
    {
        "content": "<p>Hi all! New to the community. I've been playing around with Lean 4 for a bit. I'm trying to write an applicative order evaluation interpreter for a lambda calculus with natural numbers, and binary primitives (addition, etc).</p>\n<p>I wrote a deBrujin style <code>eval</code> for this, but I'm hitting the termination checker. I dumped my interpreter into a file: <a href=\"https://github.com/femtomc/logical_relations.lean/blob/main/IntroLogicalRelations.lean\">https://github.com/femtomc/logical_relations.lean/blob/main/IntroLogicalRelations.lean</a></p>\n<p>Lean tells me that the issue is here: <a href=\"https://github.com/femtomc/logical_relations.lean/blob/c99b4604b9e1acde704db896efae0171ee25666f/IntroLogicalRelations.lean#L38\">https://github.com/femtomc/logical_relations.lean/blob/c99b4604b9e1acde704db896efae0171ee25666f/IntroLogicalRelations.lean#L38</a> -- in <code>LAbs</code>, I shift the environment and extend it before evaluating the shadowed term <code>t</code>.</p>\n<p>I think this extension upsets proving termination, but I'm not exactly sure how to remedy it.</p>",
        "id": 410195322,
        "sender_full_name": "McCoy",
        "timestamp": 1703706700
    },
    {
        "content": "<p>Hi and welcome!</p>\n<p>Unrelated note: your github repository contains the <code>.lake</code> file; it is usually not added to the repository.</p>\n<p>I had to add <code>import Mathlib</code> to the file to <a href=\"https://live.lean-lang.org/#code=import%20Mathlib%0A%0A%2F-!%0AThis%20is%20a%20tutorial%20file%20showing%20the%20usage%20of%20logical%20relations%20to%20prove%20properties%20about%20languages%2C%20including%20things%20like%20soundness%20of%20operational%20semantics%2C%20soundness%20of%20a%20type%20system%2C%20and%20even%20soundness%20of%20a%20denotational%20semantics.%0A%0AFirst%2C%20we'll%20start%20by%20considering%20a%20simple%20language%20with%20arithmetic%2C%20and%20function%20definitions.%0A-%2F%0A%0A%0A%0Ainductive%20Term%0A%7C%20Nat%20%3A%20%E2%84%95%20%E2%86%92%20Term%0A%7C%20Var%20%3A%20%E2%84%95%20%E2%86%92%20Term%0A%7C%20Abs%20%3A%20Term%20%E2%86%92%20Term%0A%7C%20App%20%3A%20Term%20%E2%86%92%20Term%20%E2%86%92%20Term%0A%7C%20Prim%20%3A%20(%E2%84%95%20%E2%86%92%20%E2%84%95%20%E2%86%92%20%E2%84%95)%20%E2%86%92%20Term%0A%0Adef%20Env%20%3A%3D%20List%20Term%0A%0Adef%20lookupEnv%20%3A%20Env%20-%3E%20%E2%84%95%20-%3E%20Option%20Term%0A%7C%20%5B%5D%2C%20_%20%3D%3E%20none%0A%7C%20(v%20%3A%3A%20_)%2C%200%20%3D%3E%20some%20v%0A%7C%20(_%20%3A%3A%20vs)%2C%20(n%20%2B%201)%20%3D%3E%20lookupEnv%20vs%20n%0A%0Adef%20shift%20%3A%20%E2%84%95%20-%3E%20Term%20-%3E%20Term%0A%7C%20d%2C%20Term.Nat%20n%20%3D%3E%20Term.Nat%20n%0A%7C%20d%2C%20Term.Var%20k%20%3D%3E%20Term.Var%20(k%20%2B%20d)%0A%7C%20d%2C%20Term.Abs%20t%20%3D%3E%20Term.Abs%20(shift%20(d%20%2B%201)%20t)%0A%7C%20d%2C%20Term.App%20t1%20t2%20%3D%3E%20Term.App%20(shift%20d%20t1)%20(shift%20d%20t2)%0A%7C%20d%2C%20Term.Prim%20f%20%3D%3E%20Term.Prim%20f%0A%0Adef%20subst%20%3A%20%E2%84%95%20-%3E%20Term%20-%3E%20Term%20-%3E%20Term%0A%7C%20k%2C%20s%2C%20Term.Nat%20n%20%3D%3E%20Term.Nat%20n%0A%7C%20k%2C%20s%2C%20Term.Var%20k'%20%3D%3E%20if%20k%20%3D%20k'%20then%20s%20else%20Term.Var%20k'%0A%7C%20k%2C%20s%2C%20Term.Abs%20t%20%3D%3E%20Term.Abs%20(subst%20(k%20%2B%201)%20(shift%201%20s)%20t)%0A%7C%20k%2C%20s%2C%20Term.App%20t1%20t2%20%3D%3E%20Term.App%20(subst%20k%20s%20t1)%20(subst%20k%20s%20t2)%0A%7C%20k%2C%20s%2C%20Term.Prim%20f%20%3D%3E%20Term.Prim%20f%0A%0Adef%20eval%20%3A%20Env%20%E2%86%92%20Term%20%E2%86%92%20Term%0A%7C%20env%2C%20Term.Nat%20n%20%3D%3E%20Term.Nat%20n%0A%7C%20env%2C%20Term.Var%20n%20%3D%3E%20(lookupEnv%20env%20n).getD%20(Term.Var%20n)%0A%7C%20env%2C%20Term.Abs%20t%20%3D%3E%20Term.Abs%20(eval%20(Term.Var%200%20%3A%3A%20env.map%20(shift%201))%20t)%0A%7C%20env%2C%20Term.Prim%20f%20%3D%3E%20Term.Prim%20f%0A%7C%20env%2C%20(Term.App%20(Term.Abs%20t)%20v)%20%3D%3E%0A%20%20let%20v_eval%20%3A%3D%20eval%20env%20v%3B%20%0A%20%20eval%20env%20(subst%200%20v_eval%20t)%20%0A%7C%20env%2C%20(Term.App%20t1%20t2)%20%3D%3E%0A%20%20let%20t1_eval%20%3A%3D%20eval%20env%20t1%3B%0A%20%20let%20t2_eval%20%3A%3D%20eval%20env%20t2%3B%0A%20%20eval%20env%20(Term.App%20t1_eval%20t2_eval\">be able to load it</a>.</p>",
        "id": 410198142,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1703708582
    },
    {
        "content": "<p>thanks for these tips! Will adapt my code to this</p>",
        "id": 410198200,
        "sender_full_name": "McCoy",
        "timestamp": 1703708632
    },
    {
        "content": "<p>The error message mentions <code>termination_by</code>, and if you think your function is recursing on the size of the term, you can add</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">termination_by</span> <span class=\"n\">eval</span> <span class=\"n\">env</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">t</span>\n</code></pre></div>\n<p>after the function. But then the recursive call <code>eval env (subst 0 v_eval t)</code> complains.</p>\n<p>At this point, maybe step back and ponder if <code>eval</code> really _is_ terminating, or not. It’s an evaluator for lambda terms, so probably not… in which case, <code>def eval</code> won’t work like this.</p>\n<p>Maybe others have good domain-specific advise for what to do instead :-)</p>",
        "id": 410198575,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1703708885
    },
    {
        "content": "<p>Well the obvious solution is to use <code>partial def eval</code> instead</p>",
        "id": 410199418,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703709552
    },
    {
        "content": "<p>Interesting, thanks for the suggestion -- I'll explore it.</p>\n<p>I'm trying to understand if (a) I've messed up the interpreter, or (b) it is written correctly, but I need to use well-founded recursion or (c) if <code>partial def</code> will work for my needs.</p>",
        "id": 410199720,
        "sender_full_name": "McCoy",
        "timestamp": 1703709776
    },
    {
        "content": "<p>An interpreter for lambda calculus <em>is not</em> terminating</p>",
        "id": 410199766,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703709819
    },
    {
        "content": "<p>so yes this is written correctly and you should not expect to be able to prove termination</p>",
        "id": 410199774,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703709838
    },
    {
        "content": "<p>As for whether <code>partial def</code> will work for your needs, that depends on what you want to do with this definition. If you just want to run it using <code>#eval</code> or compile it then yes this will work fine. If you want to prove properties about this function then no it won't work, because <code>partial def</code>s are opaque, you can't prove anything about them beyond their type. If you want to have both runnable code and something you can prove properties about it will be somewhat more complicated, you will need some predicate asserting that the input terminates, or alternatively you can use a fuel variable to make the definition \"time out\" after running for a while (and therefore make it terminating by fiat)</p>",
        "id": 410200198,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703710137
    },
    {
        "content": "<p><code>partial def eval</code> means you can <em>run</em> the interpreter, but not <em>prove</em> anything about it – depends on what… whatever Mario says :-)</p>",
        "id": 410200212,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1703710149
    },
    {
        "content": "<p>I'm interesting in proving things. Fuel makes sense here.</p>",
        "id": 410200498,
        "sender_full_name": "McCoy",
        "timestamp": 1703710361
    },
    {
        "content": "<p>Thanks for the ideas!</p>",
        "id": 410200633,
        "sender_full_name": "McCoy",
        "timestamp": 1703710492
    },
    {
        "content": "<p>This _seems_ better, but still doesn't pass:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">eval</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Env</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">t</span>\n<span class=\"bp\">|</span> <span class=\"n\">fuel</span><span class=\"o\">,</span> <span class=\"n\">env</span><span class=\"o\">,</span> <span class=\"n\">Term.Nat</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Term.Nat</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">fuel</span><span class=\"o\">,</span> <span class=\"n\">env</span><span class=\"o\">,</span> <span class=\"n\">Term.Var</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">lookupEnv</span> <span class=\"n\">env</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getD</span> <span class=\"o\">(</span><span class=\"n\">Term.Var</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">fuel</span><span class=\"o\">,</span> <span class=\"n\">env</span><span class=\"o\">,</span> <span class=\"n\">Term.Abs</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Term.Abs</span> <span class=\"o\">(</span><span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">fuel</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Term.Var</span> <span class=\"mi\">0</span> <span class=\"o\">::</span> <span class=\"n\">env.map</span> <span class=\"o\">(</span><span class=\"n\">shift</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">fuel</span><span class=\"o\">,</span> <span class=\"n\">env</span><span class=\"o\">,</span> <span class=\"n\">Term.Prim</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Term.Prim</span> <span class=\"n\">f</span>\n<span class=\"bp\">|</span> <span class=\"n\">fuel</span><span class=\"o\">,</span> <span class=\"n\">env</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Term.App</span> <span class=\"o\">(</span><span class=\"n\">Term.Abs</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">let</span> <span class=\"n\">v_eval</span> <span class=\"o\">:=</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">fuel</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">env</span> <span class=\"n\">v</span><span class=\"bp\">;</span>\n  <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">fuel</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">env</span> <span class=\"o\">(</span><span class=\"n\">subst</span> <span class=\"mi\">0</span> <span class=\"n\">v_eval</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">fuel</span><span class=\"o\">,</span> <span class=\"n\">env</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Term.App</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">let</span> <span class=\"n\">t1_eval</span> <span class=\"o\">:=</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">fuel</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">env</span> <span class=\"n\">t1</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">t2_eval</span> <span class=\"o\">:=</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">fuel</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">env</span> <span class=\"n\">t2</span><span class=\"bp\">;</span>\n  <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">fuel</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">env</span> <span class=\"o\">(</span><span class=\"n\">Term.App</span> <span class=\"n\">t1_eval</span> <span class=\"n\">t2_eval</span><span class=\"o\">)</span>\n\n<span class=\"n\">termination_by</span> <span class=\"n\">eval</span> <span class=\"n\">fuel</span> <span class=\"n\">env</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">fuel</span>\n</code></pre></div>\n<p>Perhaps I'm not using the match guard / check correctly?</p>",
        "id": 410208155,
        "sender_full_name": "McCoy",
        "timestamp": 1703715759
    },
    {
        "content": "<p>use <code>fuel+1</code> on the left rather than <code>fuel-1</code> on the right</p>",
        "id": 410208306,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703715879
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">eval</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Env</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">t</span>\n<span class=\"bp\">|</span> <span class=\"n\">fuel</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">env</span><span class=\"o\">,</span> <span class=\"n\">Term.Nat</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Term.Nat</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">fuel</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">env</span><span class=\"o\">,</span> <span class=\"n\">Term.Var</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">lookupEnv</span> <span class=\"n\">env</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getD</span> <span class=\"o\">(</span><span class=\"n\">Term.Var</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">fuel</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">env</span><span class=\"o\">,</span> <span class=\"n\">Term.Abs</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Term.Abs</span> <span class=\"o\">(</span><span class=\"n\">eval</span> <span class=\"n\">fuel</span> <span class=\"o\">(</span><span class=\"n\">Term.Var</span> <span class=\"mi\">0</span> <span class=\"o\">::</span> <span class=\"n\">env.map</span> <span class=\"o\">(</span><span class=\"n\">shift</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">fuel</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">env</span><span class=\"o\">,</span> <span class=\"n\">Term.Prim</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Term.Prim</span> <span class=\"n\">f</span>\n<span class=\"bp\">|</span> <span class=\"n\">fuel</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">env</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Term.App</span> <span class=\"o\">(</span><span class=\"n\">Term.Abs</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">let</span> <span class=\"n\">v_eval</span> <span class=\"o\">:=</span> <span class=\"n\">eval</span> <span class=\"n\">fuel</span> <span class=\"n\">env</span> <span class=\"n\">v</span><span class=\"bp\">;</span>\n  <span class=\"n\">eval</span> <span class=\"n\">fuel</span> <span class=\"n\">env</span> <span class=\"o\">(</span><span class=\"n\">subst</span> <span class=\"mi\">0</span> <span class=\"n\">v_eval</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">fuel</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">env</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Term.App</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">let</span> <span class=\"n\">t1_eval</span> <span class=\"o\">:=</span> <span class=\"n\">eval</span> <span class=\"n\">fuel</span> <span class=\"n\">env</span> <span class=\"n\">t1</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">t2_eval</span> <span class=\"o\">:=</span> <span class=\"n\">eval</span> <span class=\"n\">fuel</span> <span class=\"n\">env</span> <span class=\"n\">t2</span><span class=\"bp\">;</span>\n  <span class=\"n\">eval</span> <span class=\"n\">fuel</span> <span class=\"n\">env</span> <span class=\"o\">(</span><span class=\"n\">Term.App</span> <span class=\"n\">t1_eval</span> <span class=\"n\">t2_eval</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 410208322,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703715901
    },
    {
        "content": "<p>no need for <code>termination_by</code> either</p>",
        "id": 410208348,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703715921
    },
    {
        "content": "<p>huh, that's interesting -- any intuition?</p>",
        "id": 410208349,
        "sender_full_name": "McCoy",
        "timestamp": 1703715923
    },
    {
        "content": "<p>This is a definition by structural recursion on <code>Nat</code>, so you want to use the constructors of <code>Nat</code> which are <code>0</code> and <code>n+1</code></p>",
        "id": 410208380,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703715961
    },
    {
        "content": "<p>besides this, <code>fuel - 1</code> is not necessarily smaller than <code>fuel</code> because <code>0 - 1 = 0</code></p>",
        "id": 410208431,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703715982
    },
    {
        "content": "<p>Ah, great explanation, thank you</p>",
        "id": 410208452,
        "sender_full_name": "McCoy",
        "timestamp": 1703716003
    },
    {
        "content": "<p>You have a <code>0</code> case, but the typechecker doesn't know that</p>",
        "id": 410208463,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703716008
    }
]