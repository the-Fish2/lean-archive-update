[
    {
        "content": "<p>Is it possible to specify an implicit argument in a notation without preventing the notation from being displayed? In the following snippet, the notations <code>fin2</code> and <code>fin3</code> parse correctly but doesn't display as intended.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"s2\">\"fin1\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Fin</span> <span class=\"mi\">1</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"fin2\"</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">@</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"fin3\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">fin1</span> <span class=\"bp\">=</span> <span class=\"n\">fin2</span> <span class=\"bp\">∧</span> <span class=\"n\">fin2</span> <span class=\"bp\">=</span> <span class=\"n\">fin3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> unsolved goals</span>\n<span class=\"cm\">⊢ fin1 = Fin 2 ∧ Fin 2 = Fin 3 -/</span>\n</code></pre></div>\n<p>In this case <code>n</code> is actually explicit in <code>Fin n</code> so we can just use <code>fin1</code>, but when we have a def with an implicit argument to start with, for example <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Polynomial.X#doc\">docs#Polynomial.X</a>, I have to make an abbrev <code>Polynomial.X' (R) [Semiring R] := Polynomial.X (R := R)</code> and do <code>notation \"Y\" =&gt; Polynomial.X' (Polynomial _)</code> etc. (to distinguish the two variables in R[X][X]).</p>\n<p>When diagnosing this problem I discovered this example that may offer some hints:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"s2\">\"idN\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">id</span> <span class=\"n\">Nat</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">idN</span> <span class=\"c1\">-- idN : Type</span>\n\n<span class=\"kd\">notation</span> <span class=\"s2\">\"ℕ\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">idN</span> <span class=\"c1\">-- id ℕ : Type</span>\n\n<span class=\"kd\">notation</span> <span class=\"s2\">\"idN1\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">id</span> <span class=\"n\">ℕ</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">idN1</span>   <span class=\"c1\">-- idN1 : Type</span>\n<span class=\"k\">#check</span> <span class=\"n\">idN</span>    <span class=\"c1\">-- idN1 : Type</span>\n<span class=\"k\">#check</span> <span class=\"n\">id</span> <span class=\"n\">Nat</span> <span class=\"c1\">-- idN1 : Type</span>\n<span class=\"k\">#check</span> <span class=\"n\">id</span> <span class=\"n\">ℕ</span>   <span class=\"c1\">-- idN1 : Type</span>\n</code></pre></div>\n<p>In short, if <code>Nat</code> is given a notation, then a notation involving something applied to <code>Nat</code> will not display, and you have to use <code>Nat</code>'s notation to define subsequent notations involving <code>Nat</code>. In the second <code>#check idN</code>, it seems that the pretty printer does one step (replace Nat by ℕ) and then stops. I wonder whether what's happening with the notations with implicit argument is also that the pretty printer sees <code>@Fin 2</code> or <code>Fin (n := 3)</code>, replaces it with <code>Fin 2</code> or <code>Fin 3</code> and then stops, without going further to replace them by <code>fin2</code> or <code>fin3</code>.</p>\n<p>It has to be something applied to <code>Nat</code> instead of <code>Nat</code> alone though: if you just give <code>Nat</code> a new notation it will just work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"s2\">\"N\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat</span>\n<span class=\"k\">#check</span> <span class=\"n\">N</span> <span class=\"c1\">-- N : Type</span>\n\n<span class=\"kd\">notation</span> <span class=\"s2\">\"N1\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat</span>\n<span class=\"k\">#check</span> <span class=\"n\">N1</span> <span class=\"c1\">-- N1 : Type</span>\n<span class=\"k\">#check</span> <span class=\"n\">N</span>  <span class=\"c1\">-- N1 : Type</span>\n</code></pre></div>\n<p>I appreciate your input and diagnosis on this issue.</p>",
        "id": 439738430,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1716271709
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 439854026,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1716308464
    },
    {
        "content": "<p>The pretty printer generator for <code>notation</code> is fairly simple. Your first example is completely explained by the following observation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"s2\">\"fin1\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Fin</span> <span class=\"mi\">1</span> <span class=\"c1\">-- generates a pretty printer</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"fin2\"</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">@</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span> <span class=\"c1\">-- does not generate a pretty printer</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"fin3\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"c1\">-- does not generate a pretty printer</span>\n</code></pre></div>\n<p>I have been planning on adding a warning message to <code>notation</code> when it does not succeed in generating a pretty printer, along with an option to acknowledge the warning. For example, it might look like <code>notation (prettyPrinter := false) \"fin2\" =&gt; @Fin 2</code> to turn off the warning.</p>",
        "id": 439866408,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1716312527
    },
    {
        "content": "<p>For the Nat examples, the sorts of pretty printers that <code>notation</code> generates (app unexpanders) are evaluated \"inside-out\". That is, leaves-first root-last. Also, the last app unexpander to be defined is the one that takes precedence. This explains why <code>idN1</code> applies in each case, if you add in the fact that app unexpanders operate by matching syntax, hence why it works only because <code>ℕ</code> is in the RHS pattern.</p>",
        "id": 439867095,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1716312753
    },
    {
        "content": "<p>If you are using mathlib, you can use <code>notation3</code>, which creates delaborators instead of app unexpanders. The delaborators it generates additionally operate \"outside-in\".</p>",
        "id": 439867220,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1716312796
    },
    {
        "content": "<p>There are some thoughts about making <code>notation</code> generate delaborators as well</p>",
        "id": 439867481,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1716312878
    },
    {
        "content": "<p>Thanks! <code>notation3</code> seems to work with my intended application to Polynomial. I recall the notation <code>Y</code> also had issues back in mathlib3, but maybe <code>notation3</code> fixed those :)</p>",
        "id": 439868650,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1716313267
    },
    {
        "content": "<p>Let me know what you find!</p>",
        "id": 439870482,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1716313875
    },
    {
        "content": "<p>The only place I find the notation3 doesn't work perfectly is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Polynomial.Basic</span>\n<span class=\"n\">notation3</span> <span class=\"s2\">\"Y\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Polynomial.X</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">Polynomial</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">Polynomial</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">][</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"bp\">-</span><span class=\"n\">Y</span> <span class=\"c1\">-- failed to synthesize instance Neg ?m.2233[X][X]</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">][</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">Y</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">][</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">Y</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"n\">X</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">][</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">][</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">][</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"bp\">-</span><span class=\"n\">X</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 439902939,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1716324759
    }
]