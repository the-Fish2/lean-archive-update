[
    {
        "content": "<p>Hi Folks,</p>\n<p>I'm trying to write a function in Lean that produces an<br>\narithmetic sequence, much like <code>[a, a+dx .. b]</code> in Haskell.  Here <code>a</code><br>\nis the initial element, <code>dx</code> is the step, and <code>b</code> is the maximum<br>\nelement, or something close to it.</p>\n<p>As the code below shows, I can do this with rational numbers and<br>\nwith Floats.  The code is essentially identical.  I use a gas<br>\ntank to satisfy the termination checker.  I believe I should be<br>\nable to do this with any number system that admits decidable<br>\nordering.</p>\n<p>But, as the final code segment shows, I do not know how to tell<br>\nLean that \"greater than\" is decidable.</p>\n<p>I'd appreciate any help.</p>\n<p>Thanks,<br>\nScott</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Data.Rat</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">arithSeqRatHelper</span> <span class=\"o\">(</span><span class=\"n\">gastank</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">dx</span> <span class=\"o\">:</span> <span class=\"n\">Rat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Rat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Rat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Rat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">gastank</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span>          <span class=\"bp\">=&gt;</span> <span class=\"n\">xs</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">xs</span> <span class=\"k\">with</span>\n                  <span class=\"bp\">|</span> <span class=\"o\">[]</span>        <span class=\"bp\">=&gt;</span> <span class=\"n\">arithSeqRatHelper</span> <span class=\"n\">l</span> <span class=\"n\">dx</span> <span class=\"n\">b</span> <span class=\"o\">[</span><span class=\"n\">dx</span><span class=\"o\">]</span>\n                  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">dx</span> <span class=\"bp\">&gt;</span> <span class=\"n\">b</span>\n                                 <span class=\"k\">then</span> <span class=\"n\">xs</span>\n                                 <span class=\"k\">else</span> <span class=\"n\">arithSeqRatHelper</span> <span class=\"n\">l</span> <span class=\"n\">dx</span> <span class=\"n\">b</span> <span class=\"o\">((</span><span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"n\">dx</span><span class=\"o\">)::</span><span class=\"n\">y</span><span class=\"o\">::</span><span class=\"n\">ys</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">arithSeqRat</span> <span class=\"o\">(</span><span class=\"n\">gastank</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Rat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">dx</span> <span class=\"o\">:</span> <span class=\"n\">Rat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Rat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Rat</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">arithSeqRatHelper</span> <span class=\"n\">gastank</span> <span class=\"n\">dx</span> <span class=\"n\">b</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">])</span><span class=\"bp\">.</span><span class=\"n\">reverse</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">arithSeqFloatHelper</span> <span class=\"o\">(</span><span class=\"n\">gastank</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">dx</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Float</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">gastank</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span>          <span class=\"bp\">=&gt;</span> <span class=\"n\">xs</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">xs</span> <span class=\"k\">with</span>\n                  <span class=\"bp\">|</span> <span class=\"o\">[]</span>        <span class=\"bp\">=&gt;</span> <span class=\"n\">arithSeqFloatHelper</span> <span class=\"n\">l</span> <span class=\"n\">dx</span> <span class=\"n\">b</span> <span class=\"o\">[</span><span class=\"n\">dx</span><span class=\"o\">]</span>\n                  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">dx</span> <span class=\"bp\">&gt;</span> <span class=\"n\">b</span>\n                                 <span class=\"k\">then</span> <span class=\"n\">xs</span>\n                                 <span class=\"k\">else</span> <span class=\"n\">arithSeqFloatHelper</span> <span class=\"n\">l</span> <span class=\"n\">dx</span> <span class=\"n\">b</span> <span class=\"o\">((</span><span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"n\">dx</span><span class=\"o\">)::</span><span class=\"n\">y</span><span class=\"o\">::</span><span class=\"n\">ys</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">arithSeqFloat</span> <span class=\"o\">(</span><span class=\"n\">gastank</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">dx</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Float</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">arithSeqFloatHelper</span> <span class=\"n\">gastank</span> <span class=\"n\">dx</span> <span class=\"n\">b</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">])</span><span class=\"bp\">.</span><span class=\"n\">reverse</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">arithSeqRat</span> <span class=\"mi\">10</span> <span class=\"o\">(</span><span class=\"n\">mkRat</span> <span class=\"mi\">3</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mkRat</span> <span class=\"mi\">1</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mkRat</span> <span class=\"mi\">32</span> <span class=\"mi\">10</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">arithSeqFloat</span> <span class=\"mi\">10</span> <span class=\"mi\">3</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n\n\n\n<span class=\"kd\">def</span> <span class=\"n\">arithSeqHelper</span> <span class=\"o\">{</span><span class=\"n\">w1</span> <span class=\"n\">w2</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">OfNat</span> <span class=\"n\">n</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LT</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">w1</span> <span class=\"bp\">&gt;</span> <span class=\"n\">w2</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">gastank</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">dx</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">gastank</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span>          <span class=\"bp\">=&gt;</span> <span class=\"n\">xs</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">xs</span> <span class=\"k\">with</span>\n                  <span class=\"bp\">|</span> <span class=\"o\">[]</span>        <span class=\"bp\">=&gt;</span> <span class=\"n\">arithSeqHelper</span> <span class=\"n\">l</span> <span class=\"n\">dx</span> <span class=\"n\">b</span> <span class=\"o\">[</span><span class=\"n\">dx</span><span class=\"o\">]</span>\n                  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">dx</span> <span class=\"bp\">&gt;</span> <span class=\"n\">b</span>\n                                 <span class=\"k\">then</span> <span class=\"n\">xs</span>\n                                 <span class=\"k\">else</span> <span class=\"n\">arithSeqHelper</span> <span class=\"n\">l</span> <span class=\"n\">dx</span> <span class=\"n\">b</span> <span class=\"o\">((</span><span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"n\">dx</span><span class=\"o\">)::</span><span class=\"n\">y</span><span class=\"o\">::</span><span class=\"n\">ys</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 427796257,
        "sender_full_name": "Scott N. Walck",
        "timestamp": 1710876146
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"627968\">@Scott N. Walck</span>, please use <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> when posting code examples; much easier to read!</p>",
        "id": 427817603,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710885063
    },
    {
        "content": "<p>Do you really want to use the <code>Lean.Rat</code> rationals? <a href=\"https://leanprover-community.github.io/mathlib4_docs/Lean/Data/Rat.html\">https://leanprover-community.github.io/mathlib4_docs/Lean/Data/Rat.html</a> they don't have many instances on them.<br>\n<code>[DecidableRel ((· &gt; ·) : n → n → Prop)]</code> is the standard way to assume &gt; is decidable</p>",
        "id": 427820464,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1710886669
    }
]