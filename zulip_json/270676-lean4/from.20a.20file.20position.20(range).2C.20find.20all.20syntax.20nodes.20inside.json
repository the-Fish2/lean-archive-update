[
    {
        "content": "<p>I am curious about, for a given file, give a file position (ln, col) or range (from_ln, from_col) ~ (end_ln, end_col), how can I find all syntax nodes inside it? If Lean server already can do the task, I am curious about where it is implemented.</p>",
        "id": 427635696,
        "sender_full_name": "Alissa Tung",
        "timestamp": 1710834474
    },
    {
        "content": "<p>How it works right now, roughly:</p>\n<ul>\n<li><a href=\"https://github.com/leanprover/lean4/blob/3ab1c23500658a1997b342fad15f499d7c482365/src/Lean/Language/Basic.lean#L216\">Lean.Language.mkIncrementalProcessor</a> with <a href=\"https://github.com/leanprover/lean4/blob/3ab1c23500658a1997b342fad15f499d7c482365/src/Lean/Language/Lean.lean#L236\">Lean.Language.Lean.process</a> and <a href=\"https://github.com/leanprover/lean4/blob/3ab1c23500658a1997b342fad15f499d7c482365/src/Lean/Server/FileWorker.lean#L262\">Lean.Server.FileWorker.setupImports</a> gives us a language processor</li>\n<li>We run the language processor using a <a href=\"https://github.com/leanprover/lean4/blob/3ab1c23500658a1997b342fad15f499d7c482365/src/Lean/Parser/Types.lean#L45\">Lean.Parser.InputContext</a> to obtain a <a href=\"https://github.com/leanprover/lean4/blob/3ab1c23500658a1997b342fad15f499d7c482365/src/Lean/Language/Lean.lean#L189\">Lean.Language.Lean.InitialSnapshot</a>, representing a tree of asynchronous snapshots for the document</li>\n<li>The InitialSnapshot is converted to an IO.AsyncList using <a href=\"https://github.com/leanprover/lean4/blob/3ab1c23500658a1997b342fad15f499d7c482365/src/Lean/Server/FileWorker/Utils.lean#L35\">Lean.Server.FileWorker.mkCmdSnaps</a> to obtain a list representation of the (still asynchronous) command snapshots</li>\n<li>When computing the response for a language server request, we run <a href=\"https://github.com/leanprover/lean4/blob/3ab1c23500658a1997b342fad15f499d7c482365/src/Lean/Server/AsyncList.lean#L90\">IO.AsyncList.waitFind?</a> with a predicate like <code>·.endPos &gt;= positionToFindCommandSnapshotAt</code> to find the right snapshot</li>\n<li>Afterwards, we compute the response using the data in the snapshot (e.g. the Syntax of the command or its InfoTree) and functions like <a href=\"https://github.com/leanprover/lean4/blob/3ab1c23500658a1997b342fad15f499d7c482365/src/Lean/Syntax.lean#L519\">Lean.Syntax.findStack?</a>; see <code>Lean/Server/FileWorker/RequestHandling.lean</code> for some examples</li>\n</ul>",
        "id": 427640440,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1710836656
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"638718\">@Alissa Tung</span>, in what sort of context are you hoping to run such a query?</p>",
        "id": 427652226,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1710841103
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"221921\">Marc Huisinga</span> <a href=\"#narrow/stream/270676-lean4/topic/from.20a.20file.20position.20.28range.29.2C.20find.20all.20syntax.20nodes.20inside/near/427640440\">发言道</a>：</p>\n<blockquote>\n<p>How it works right now, roughly:</p>\n<ul>\n<li><a href=\"https://github.com/leanprover/lean4/blob/3ab1c23500658a1997b342fad15f499d7c482365/src/Lean/Language/Basic.lean#L216\">Lean.Language.mkIncrementalProcessor</a> with <a href=\"https://github.com/leanprover/lean4/blob/3ab1c23500658a1997b342fad15f499d7c482365/src/Lean/Language/Lean.lean#L236\">Lean.Language.Lean.process</a> and <a href=\"https://github.com/leanprover/lean4/blob/3ab1c23500658a1997b342fad15f499d7c482365/src/Lean/Server/FileWorker.lean#L262\">Lean.Server.FileWorker.setupImports</a> gives us a language processor</li>\n<li>We run the language processor using a <a href=\"https://github.com/leanprover/lean4/blob/3ab1c23500658a1997b342fad15f499d7c482365/src/Lean/Parser/Types.lean#L45\">Lean.Parser.InputContext</a> to obtain a <a href=\"https://github.com/leanprover/lean4/blob/3ab1c23500658a1997b342fad15f499d7c482365/src/Lean/Language/Lean.lean#L189\">Lean.Language.Lean.InitialSnapshot</a>, representing a tree of asynchronous snapshots for the document</li>\n<li>The InitialSnapshot is converted to an IO.AsyncList using <a href=\"https://github.com/leanprover/lean4/blob/3ab1c23500658a1997b342fad15f499d7c482365/src/Lean/Server/FileWorker/Utils.lean#L35\">Lean.Server.FileWorker.mkCmdSnaps</a> to obtain a list representation of the (still asynchronous) command snapshots</li>\n<li>When computing the response for a language server request, we run <a href=\"https://github.com/leanprover/lean4/blob/3ab1c23500658a1997b342fad15f499d7c482365/src/Lean/Server/AsyncList.lean#L90\">IO.AsyncList.waitFind?</a> with a predicate like <code>·.endPos &gt;= positionToFindCommandSnapshotAt</code> to find the right snapshot</li>\n<li>Afterwards, we compute the response using the data in the snapshot (e.g. the Syntax of the command or its InfoTree) and functions like <a href=\"https://github.com/leanprover/lean4/blob/3ab1c23500658a1997b342fad15f499d7c482365/src/Lean/Syntax.lean#L519\">Lean.Syntax.findStack?</a>; see <code>Lean/Server/FileWorker/RequestHandling.lean</code> for some examples</li>\n</ul>\n</blockquote>\n<p>Thank you, the explanation on this pipeline is very useful!</p>",
        "id": 428037497,
        "sender_full_name": "Alissa Tung",
        "timestamp": 1710980465
    }
]