[
    {
        "content": "<p>I expect I'm making a basic error, but currently when I add a second target the Std and Mathlib caches fail to hit.  The cache was working well until I extended my <code>lakefile.lean</code> to look like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lake</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lake</span> <span class=\"n\">DSL</span>\n\n<span class=\"n\">package</span> <span class=\"n\">ray</span> <span class=\"n\">where</span>\n  <span class=\"n\">leanOptions</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span>\n    <span class=\"o\">⟨</span><span class=\"bp\">`</span><span class=\"n\">pp.unicode.fun</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">⟩,</span> <span class=\"c1\">-- pretty-prints `fun a ↦ b`</span>\n    <span class=\"o\">⟨</span><span class=\"bp\">`</span><span class=\"n\">pp.proofs.withType</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">⟩,</span>\n    <span class=\"o\">⟨</span><span class=\"bp\">`</span><span class=\"n\">autoImplicit</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">⟩,</span>\n    <span class=\"o\">⟨</span><span class=\"bp\">`</span><span class=\"n\">relaxedAutoImplicit</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">⟩</span>\n  <span class=\"o\">]</span>\n\n<span class=\"n\">require</span> <span class=\"n\">mathlib</span> <span class=\"k\">from</span> <span class=\"n\">git</span> <span class=\"s2\">\"https://github.com/leanprover-community/mathlib4\"</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">default_target</span><span class=\"kd\">]</span>\n<span class=\"n\">lean_lib</span> <span class=\"n\">Ray</span>\n\n<span class=\"c1\">-- NEW STUFF FOLLOWS</span>\n\n<span class=\"n\">lean_exe</span> <span class=\"n\">gradient_test</span> <span class=\"o\">{</span>\n  <span class=\"n\">root</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">Ray.Render.GradientTest</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">target</span> <span class=\"n\">png.o</span> <span class=\"n\">pkg</span> <span class=\"o\">:</span> <span class=\"n\">FilePath</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">o</span> <span class=\"o\">:=</span> <span class=\"n\">pkg.buildDir</span> <span class=\"bp\">/</span> <span class=\"s2\">\"Ray/Render/png.o\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">src</span> <span class=\"bp\">←</span> <span class=\"n\">inputFile</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">pkg.dir</span> <span class=\"bp\">/</span> <span class=\"s2\">\"Ray/Render/png.cc\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"-I\"</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"n\">getLeanIncludeDir</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toString</span><span class=\"o\">,</span> <span class=\"s2\">\"-I/opt/homebrew/include\"</span><span class=\"o\">]</span>\n  <span class=\"n\">buildO</span> <span class=\"s2\">\"png.cc\"</span> <span class=\"n\">o</span> <span class=\"n\">src</span> <span class=\"n\">args</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"-fPIC\"</span><span class=\"o\">]</span> <span class=\"s2\">\"c++\"</span> <span class=\"n\">getLeanTrace</span>\n\n<span class=\"n\">extern_lib</span> <span class=\"n\">libray</span> <span class=\"n\">pkg</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">nameToStaticLib</span> <span class=\"s2\">\"ray\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">png</span> <span class=\"bp\">←</span> <span class=\"n\">fetch</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">pkg.target</span> <span class=\"bp\">``</span><span class=\"n\">png.o</span>\n  <span class=\"n\">buildStaticLib</span> <span class=\"o\">(</span><span class=\"n\">pkg.nativeLibDir</span> <span class=\"bp\">/</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">png</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>I can still build the default target <code>ray</code> via <code>lake build</code> as normal, but if I do <code>lake build gradient_test</code> it starts building Std on me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">%</span> <span class=\"n\">lake</span> <span class=\"n\">build</span> <span class=\"n\">gradient_test</span>\n<span class=\"o\">[</span><span class=\"mi\">992</span><span class=\"bp\">/</span><span class=\"mi\">1561</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Tactic.RCases</span>\n<span class=\"o\">[</span><span class=\"mi\">1027</span><span class=\"bp\">/</span><span class=\"mi\">1752</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Data.List.Basic</span>\n<span class=\"o\">[</span><span class=\"mi\">1077</span><span class=\"bp\">/</span><span class=\"mi\">1899</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Tactic.LeftRight</span>\n<span class=\"o\">[</span><span class=\"mi\">1079</span><span class=\"bp\">/</span><span class=\"mi\">1905</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Tactic.Replace</span>\n<span class=\"o\">[</span><span class=\"mi\">1084</span><span class=\"bp\">/</span><span class=\"mi\">1910</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Tactic.Omega.Config</span>\n<span class=\"o\">[</span><span class=\"mi\">1083</span><span class=\"bp\">/</span><span class=\"mi\">1910</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Lean.Expr</span>\n<span class=\"o\">[</span><span class=\"mi\">1084</span><span class=\"bp\">/</span><span class=\"mi\">1913</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Lean.HashSet</span>\n<span class=\"o\">[</span><span class=\"mi\">1085</span><span class=\"bp\">/</span><span class=\"mi\">1946</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Tactic.Omega.LinearCombo</span>\n<span class=\"o\">[</span><span class=\"mi\">1086</span><span class=\"bp\">/</span><span class=\"mi\">3043</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Lean.Meta.Simp</span>\n<span class=\"o\">[</span><span class=\"mi\">1087</span><span class=\"bp\">/</span><span class=\"mi\">3043</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Tactic.Omega.OmegaM</span>\n<span class=\"o\">[</span><span class=\"mi\">1088</span><span class=\"bp\">/</span><span class=\"mi\">3043</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Tactic.NormCast</span>\n<span class=\"o\">[</span><span class=\"mi\">1089</span><span class=\"bp\">/</span><span class=\"mi\">3043</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Tactic.Omega.Constraint</span>\n<span class=\"o\">[</span><span class=\"mi\">1090</span><span class=\"bp\">/</span><span class=\"mi\">3043</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Data.HashMap.Basic</span>\n<span class=\"o\">[</span><span class=\"mi\">1091</span><span class=\"bp\">/</span><span class=\"mi\">3043</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Tactic.Omega.Core</span>\n<span class=\"o\">[</span><span class=\"mi\">1092</span><span class=\"bp\">/</span><span class=\"mi\">3043</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Tactic.Omega.Logic</span>\n<span class=\"o\">[</span><span class=\"mi\">1093</span><span class=\"bp\">/</span><span class=\"mi\">3043</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Tactic.FalseOrByContra</span>\n<span class=\"o\">[</span><span class=\"mi\">1095</span><span class=\"bp\">/</span><span class=\"mi\">3043</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Tactic.Omega.MinNatAbs</span>\n<span class=\"o\">[</span><span class=\"mi\">1096</span><span class=\"bp\">/</span><span class=\"mi\">3043</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Std.Tactic.Omega</span>\n<span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 420293502,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1707323597
    },
    {
        "content": "<p>that's expected behavior</p>",
        "id": 420293678,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707323633
    },
    {
        "content": "<p>it's not <code>Building</code> std, it's <code>Compiling</code> it</p>",
        "id": 420293782,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707323644
    },
    {
        "content": "<p>Aha!</p>",
        "id": 420293823,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1707323653
    },
    {
        "content": "<p>Is there a compilation cache as well?</p>",
        "id": 420293871,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1707323662
    },
    {
        "content": "<p>no, because it's OS dependent</p>",
        "id": 420293913,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707323673
    },
    {
        "content": "<p>but it's a lot faster than building</p>",
        "id": 420293955,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707323682
    },
    {
        "content": "<p>I'm going to have computational targets that depend on a huge portion of mathlib.</p>",
        "id": 420293976,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1707323688
    },
    {
        "content": "<p>Ah, I'll just wait then.  Thanks!</p>",
        "id": 420294001,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1707323696
    },
    {
        "content": "<p>it takes something like <a href=\"https://github.com/leanprover-community/mathport/actions/runs/7810422111/job/21303779710#step:6:1\">2 minutes</a> to <code>Compile</code> all of mathlib</p>",
        "id": 420294065,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707323710
    },
    {
        "content": "<p>And...it's done. :)</p>\n<p>Apologies for impatience: I was assuming it was going to take ages.</p>",
        "id": 420294331,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1707323780
    },
    {
        "content": "<p>Or at least it hit an error message that's my fault.</p>",
        "id": 420294370,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1707323792
    },
    {
        "content": "<p>Thank you!  And now I have a .png image generated from Lean. :)</p>\n<p><a href=\"https://github.com/girving/ray/blob/main/Ray/Render/GradientTest.lean\">https://github.com/girving/ray/blob/main/Ray/Render/GradientTest.lean</a></p>\n<p><a href=\"/user_uploads/3121/BYafcLpUsgWcbBbCDOSq3s56/gradient.png\">gradient.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/BYafcLpUsgWcbBbCDOSq3s56/gradient.png\" title=\"gradient.png\"><img src=\"/user_uploads/3121/BYafcLpUsgWcbBbCDOSq3s56/gradient.png\"></a></div>",
        "id": 420296991,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1707324472
    },
    {
        "content": "<p>Didnt <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> write a ray tracer in lean4?</p>",
        "id": 420318756,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1707331407
    },
    {
        "content": "<p>Yes: <a href=\"https://github.com/kmill/lean4-raytracer\">https://github.com/kmill/lean4-raytracer</a></p>",
        "id": 420319941,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1707331753
    },
    {
        "content": "<p>(I think without a correctness proof, though.)</p>",
        "id": 420320244,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1707331849
    },
    {
        "content": "<p>(Though correctness proofs are mostly out of reach for ray tracers.)</p>",
        "id": 420320588,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1707331948
    },
    {
        "content": "<p>For a correctness proof, you could say that the monte carlo simulation converges to the true \"rendering equation\", i.e., show that (in the limit) this is the image you would see form given the light field for the scene.</p>",
        "id": 420322124,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1707332420
    },
    {
        "content": "<p>You would take as a given how different kinds of materials scatter and absorb light.</p>",
        "id": 420322244,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1707332458
    },
    {
        "content": "<p>Yes, but I think you can’t actually make that proof work.</p>",
        "id": 420322260,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1707332464
    },
    {
        "content": "<p>It requires knowing numerical errors aren’t systematic.</p>",
        "id": 420322300,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1707332479
    },
    {
        "content": "<p>I was going to add that you'd prove this for the algorithm with real numbers in place of floats, and then hope that there are no numerics issues <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 420322697,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1707332612
    },
    {
        "content": "<p>It doesn't seem impossible to figure out a way to deal with the numerics, but I have no idea how you'd do it.</p>",
        "id": 420322823,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1707332644
    },
    {
        "content": "<p>and also with true random number generators I guess</p>",
        "id": 420322828,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707332646
    },
    {
        "content": "<p>Actually I think it does work even with numerical issues, in the same way my Mandelbrot renders will work.  In each case you can use intervals to show that point estimates are conservative, and then use theory to say something about the integrals.  For Mandelbrot renders I can use the Koebe quarter theorem to exactly turn point estimates into intervals, but the integral trick will do the same for ray tracing: it would show that the expectation of the intervals (which is an interval) would contain the rendering equation result.</p>",
        "id": 420324189,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1707333090
    },
    {
        "content": "<p>And then one does an empirical mean and guesses that the interval smallness reflects the expectation being accurate.</p>",
        "id": 420324341,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1707333137
    },
    {
        "content": "<p>Though you might need a maximum radiance bound to make the theoretical result sensibly tight, and this is hard to get in general (maybe you have to add a bit of diffusion to get one of those).</p>",
        "id": 420325170,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1707333392
    },
    {
        "content": "<p>(Without the radiance bound I think the rendering equation isn’t necessarily integrable.)</p>",
        "id": 420325787,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1707333605
    },
    {
        "content": "<p>I guess you can just add integrability to the hypotheses, which seems fine to do.</p>",
        "id": 420325865,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1707333641
    }
]