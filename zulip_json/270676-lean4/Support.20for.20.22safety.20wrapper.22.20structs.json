[
    {
        "content": "<p>While programming in Lean, I have found it helpful to make \"safety wrapper\" types around other types, that give an (informal) \"guarantee\" that an object satisfies some property. For example, I can make such a wrapper around natural numbers to indicate that the number is even:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">inductive</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">N</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">N</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">A \"safety\" wrapper around `N`, for function types that expect even number args</span>\n<span class=\"sd\">and/or output even numbers. The constructor `N2.mk n` should only be used if we</span>\n<span class=\"sd\">are absolutely sure that `n` is even.</span>\n<span class=\"sd\">-/</span>\n<span class=\"c1\">-- @[safety N] -- some annotation that indicates that `N2` is a safety wrapper for `N`</span>\n<span class=\"kn\">structure</span><span class=\"w\"> </span><span class=\"n\">N2</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"n\">toN</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">N</span>\n\n<span class=\"c1\">-- it is okay to coerce ONLY in this direction</span>\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Coe</span><span class=\"w\"> </span><span class=\"n\">N2</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"n\">N2</span><span class=\"bp\">.</span><span class=\"n\">toN</span><span class=\"o\">)</span><span class=\"bp\">⟩</span>\n</code></pre></div>\n<p>However, say I already have some function <code>f</code> defined on <code>N</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"bp\">.</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>Even though it is okay to use this function with <code>N2</code>, in order to do so (and preserve typing) I would have to do a double cast along the lines of <code>N2.mk (N.f (N2.toN n))</code> (with <code>n : N2</code>). To avoid having to do so everywhere, I would probably want to define a function <code>N2.f</code>, but still this is not so convenient because I would also have to do this for every other function defined for <code>N</code> that produces an even number from even numbers.</p>\n<p>I think that what I would like is some command that will abstract <code>N.f</code> as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"c1\">--some command to say that it is okay to use `N.f` with `N2`</span>\n<span class=\"n\">safety_ok</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"bp\">.</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">N2</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"bp\">.</span><span class=\"n\">f'</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">fTN</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">fNT</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">fNT</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">fTN</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>and subsequently elaborate usages of <code>N.f n</code> with <code>n : N2</code> to <code>@N.f' N2 N2.toN N2.mk n</code>. Does anything like this exist?</p>",
        "id": 441069195,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1716911666
    },
    {
        "content": "<p>No, that said it might be possible to write a meta program that does this somewhat easily. The thing that gets closest to this is probably the coercion mechanism I guess.</p>",
        "id": 441073789,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1716913234
    },
    {
        "content": "<p>Oh, ok. Unfortunately coercion was a bit too \"strong\" for my purposes, while it's okay to coerce from <code>N2</code> to <code>N</code> you obviously don't want to coerce in the other direction. I guess what I'm getting at is a kind of partial coercion that only applies in certain cases (that you have to specify).</p>\n<p>Anyways, we'll see if I eventually get around to metaprogramming this (if it's as easy as you suggest <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>)</p>",
        "id": 441076371,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1716914145
    },
    {
        "content": "<p>To flesh out the idea a bit more, I think we could have a class <code>PCoe</code> for partial coercions for which you can register certain cases where Lean is allowed to insert these coercions:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"sd\">/--</span>\n<span class=\"sd\">`PCoe α β` is the typeclass for partial coercions from `α` to `β`. It can be</span>\n<span class=\"sd\">transitively chained with other `PCoe` instances (all instances of `Coe` are</span>\n<span class=\"sd\">also instances of `PCoe`). Partial coercion may be used when `x` has type `α`</span>\n<span class=\"sd\">but it is used in a context where `β` is expected. Whether or not partial</span>\n<span class=\"sd\">coercion is used depends on a set of user-defined conditions based on the</span>\n<span class=\"sd\">specific function/constructor constants and argument types being applied.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kn\">class</span><span class=\"w\"> </span><span class=\"n\">PCoe</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">semiOutParam</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kt\">Sort</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">β</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Sort</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">pcoe</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">β</span>\n\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Coe</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">β</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">PCoe</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">β</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">coe</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">syntax</span><span class=\"o\">:</span><span class=\"mi\">1024</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">pcoeNotation</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"s2\">\"⇡\"</span><span class=\"w\"> </span><span class=\"n\">term</span><span class=\"o\">:</span><span class=\"mi\">1024</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">term</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">builtin_term_elab</span><span class=\"w\"> </span><span class=\"n\">pcoeNotation</span><span class=\"kd\">]</span><span class=\"w\"> </span><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Elab</span><span class=\"bp\">.</span><span class=\"n\">Term</span><span class=\"bp\">.</span><span class=\"n\">elabPCoe</span>\n<span class=\"w\">  </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Elab</span><span class=\"bp\">.</span><span class=\"n\">Term</span><span class=\"bp\">.</span><span class=\"n\">TermElab</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">Elab</span><span class=\"bp\">.</span><span class=\"n\">Term</span><span class=\"bp\">.</span><span class=\"n\">elabCoe</span>\n</code></pre></div>\n<p>Using this, my example above could be rewritten as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">inductive</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">N</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">N</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">A \"safety\" wrapper around `N`, for function types that expect even number args</span>\n<span class=\"sd\">and/or output even numbers. The constructor `N2.mk n` should only be used if we</span>\n<span class=\"sd\">are absolutely sure that `n` is even.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kn\">structure</span><span class=\"w\"> </span><span class=\"n\">N2</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"n\">toN</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">N</span>\n\n<span class=\"n\">pcoe_ok</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"bp\">.</span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">N2</span>\n<span class=\"c1\">-- `N.z` can be coerced as `⇡N.z : N2`.</span>\n\n<span class=\"c1\">-- we can coerce unconditionally in this direction</span>\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Coe</span><span class=\"w\"> </span><span class=\"n\">N2</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">N2</span><span class=\"bp\">.</span><span class=\"n\">toN</span><span class=\"bp\">⟩</span>\n<span class=\"c1\">-- partial coercion only in this direction</span>\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">PCoe</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"n\">N2</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">⟨</span><span class=\"n\">N2</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"bp\">.</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"n\">pcoe_ok</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"bp\">.</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">N2</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">N2</span>\n<span class=\"c1\">-- `N.f ↑n` can be coerced as `⇡(N.f ↑n) : N2` for `n : N2`.</span>\n<span class=\"c1\">-- Consequently, `N.f (N.f ↑n)` can be coerced as `⇡(N.f ↑⇡(N.f ↑n))` for `n : N2`</span>\n<span class=\"c1\">-- (which simplifies to `⇡(N.f (N.f ↑n))`).</span>\n</code></pre></div>\n<p>Also, some more examples:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">N</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\">      </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">n</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">n'</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">N</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">n'</span><span class=\"o\">)</span>\n<span class=\"n\">pcoe_ok</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">N2</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">N2</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">N2</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"bp\">.</span><span class=\"n\">mul</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">N</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\">   </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">z</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">N</span><span class=\"bp\">.</span><span class=\"n\">mul</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">a</span>\n<span class=\"n\">pcoe_ok</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"bp\">.</span><span class=\"n\">mul</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">N2</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">N2</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">N2</span>\n<span class=\"n\">pcoe_ok</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"bp\">.</span><span class=\"n\">mul</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">N2</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">N2</span>\n<span class=\"n\">pcoe_ok</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"bp\">.</span><span class=\"n\">mul</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">N2</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">N2</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">Safety wrapper around `N` for natural numbers greater than some `n`.</span>\n<span class=\"sd\">-/</span>\n<span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">safety</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"c1\">-- adds the `Coe`/`PCoe` instances</span>\n<span class=\"kn\">structure</span><span class=\"w\"> </span><span class=\"n\">NGT</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"n\">toN</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">N</span>\n\n<span class=\"n\">pcoe_ok</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"bp\">.</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">NGT</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">NGT</span>\n<span class=\"c1\">-- `N.s ↑n` can be coerced as `⇡(N.s ↑n) : NGT m` for `n : NGT m`.</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">Safety wrapper around `N` for natural numbers less than some `n`.</span>\n<span class=\"sd\">-/</span>\n<span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">safety</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">]</span>\n<span class=\"kn\">structure</span><span class=\"w\"> </span><span class=\"n\">NLT</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"n\">toN</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">N</span>\n\n<span class=\"n\">pcoe_ok</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"bp\">.</span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">NLT</span>\n<span class=\"n\">pcoe_ok_ctor</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"bp\">.</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">NLT</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">NLT</span>\n<span class=\"c1\">-- within the `N.s` minor premise of `N.rec`, the reflexive instance of `N` can be cast:</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">dec</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">NLT</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">NLT</span><span class=\"w\"> </span><span class=\"n\">m</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"c1\">-- elabs to (⇡z : NLT m)</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"c1\">-- elabs to (⇡n : NLT m)</span>\n</code></pre></div>",
        "id": 441198601,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1716973910
    }
]