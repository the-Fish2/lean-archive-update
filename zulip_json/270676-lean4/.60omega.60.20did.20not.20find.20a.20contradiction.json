[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/348111-std4/topic/.60omega.60.20did.20not.20find.20a.20contradiction/near/411091372\">said</a>:</p>\n<blockquote>\n<p>I will also make the \"explanations\" given when <code>omega</code> does not find a contradiction clearer. The main change will just be to not provide any explanation, but then to have multiple levels of tracing for users who want to understand what it tried.</p>\n</blockquote>\n<p>In order to debug a user’s problem, <a href=\"https://github.com/leanprover/lean4/pull/3847\">I prototyped</a> a prettier (proper linear combination) and more helpful (includes the recognized atoms) error format, with that it prints:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">omega</span><span class=\"bp\">-</span><span class=\"n\">failure.lean</span><span class=\"o\">:</span><span class=\"mi\">17</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"bp\">-</span><span class=\"mi\">17</span><span class=\"o\">:</span><span class=\"mi\">7</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">omega</span> <span class=\"n\">could</span> <span class=\"n\">not</span> <span class=\"n\">prove</span> <span class=\"n\">the</span> <span class=\"n\">goal</span><span class=\"o\">:</span>\n<span class=\"n\">a</span> <span class=\"n\">possible</span> <span class=\"n\">counterexample</span> <span class=\"n\">may</span> <span class=\"n\">satisfy</span> <span class=\"n\">the</span> <span class=\"n\">constraints</span>\n<span class=\"n\">x₅</span> <span class=\"bp\">-</span> <span class=\"n\">x₆</span> <span class=\"bp\">∈</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">∞</span><span class=\"o\">)</span>\n<span class=\"n\">x₆</span> <span class=\"bp\">∈</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∞</span><span class=\"o\">)</span>\n<span class=\"n\">x₅</span> <span class=\"bp\">∈</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∞</span><span class=\"o\">)</span>\n<span class=\"n\">x₁</span> <span class=\"bp\">-</span> <span class=\"n\">x₂</span> <span class=\"bp\">∈</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">∞</span><span class=\"o\">)</span>\n<span class=\"n\">x₄</span> <span class=\"bp\">∈</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∞</span><span class=\"o\">)</span>\n<span class=\"n\">x₂</span> <span class=\"bp\">∈</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∞</span><span class=\"o\">)</span>\n<span class=\"n\">x₁</span> <span class=\"bp\">∈</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∞</span><span class=\"o\">)</span>\n<span class=\"n\">x₄</span> <span class=\"bp\">+</span> <span class=\"n\">x₅</span> <span class=\"bp\">∈</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">∞</span><span class=\"o\">)</span>\n<span class=\"n\">where</span>\n<span class=\"n\">x₁</span> <span class=\"o\">:=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">sizeOf</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n<span class=\"n\">x₂</span> <span class=\"o\">:=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">sizeOf</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"n\">x₄</span> <span class=\"o\">:=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">sizeOf</span> <span class=\"n\">x.fst</span><span class=\"o\">)</span>\n<span class=\"n\">x₅</span> <span class=\"o\">:=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">sizeOf</span> <span class=\"n\">x.snd</span><span class=\"o\">)</span>\n<span class=\"n\">x₆</span> <span class=\"o\">:=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">sizeOf</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The implementation isn't polished yet, and maybe <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> will re-do it, but maybe I can assist to some extent.</p>",
        "id": 432079846,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1712616573
    },
    {
        "content": "<p>Wow, this looks very nice.</p>\n<p>Is the next step to have it print an actual counterexample, as a tuple <code>(x₁, x₂, x₄, x₅, x₆)</code> of integers?</p>",
        "id": 432107993,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1712631992
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> this is great! This dropped off my radar. I think you should just add this as is.</p>",
        "id": 432112058,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712634496
    },
    {
        "content": "<p>It would be lovely to be able to typeset the linear combinations so the variables are in columns, but that sounds tedious to implement.</p>",
        "id": 432112126,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712634524
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"695266\">@Mitchell Lee</span>, unfortunately, the current <code>omega</code> doesn't produce witnesses.</p>",
        "id": 432112181,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1712634540
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/.60omega.60.20did.20not.20find.20a.20contradiction/near/432112126\">said</a>:</p>\n<blockquote>\n<p>It would be lovely to be able to typeset the linear combinations so the variables are in columns, but that sounds tedious to implement.</p>\n</blockquote>\n<p>I already have table producing code for GuessLex, should not be hard to adopt that. Will blow up once you have dozens of variables, of course</p>",
        "id": 432127526,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1712641287
    },
    {
        "content": "<p>Unicode subscript indices are pretty, but is this actually a good idea, or should I use normal ones for better readability?</p>",
        "id": 432130497,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1712642278
    },
    {
        "content": "<p>I think you should just inline all the expressions instead of using <code>where</code></p>",
        "id": 432165888,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712651353
    },
    {
        "content": "<p>the variables themselves do not have mnemonic names so this is a human-obfuscated way of printing it</p>",
        "id": 432166102,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712651407
    },
    {
        "content": "<p>also the <code>∈ [0, ∞)</code> could just be <code>&gt;= 0</code></p>",
        "id": 432166200,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712651439
    },
    {
        "content": "<p>Are you sure? Then you have no real chance to spot that omega considered the two <code>↑(sizeOf xs)</code> to be different. Also, I expect that in real cases the expressions can be rather large, so duplicating them might be very verbose</p>",
        "id": 432166211,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1712651442
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/.60omega.60.20did.20not.20find.20a.20contradiction/near/432166200\">said</a>:</p>\n<blockquote>\n<p>also the <code>∈ [0, ∞)</code> could just be <code>&gt;= 0</code></p>\n</blockquote>\n<p>That’s already the case on <a href=\"https://github.com/leanprover/lean4/pull/3847\">https://github.com/leanprover/lean4/pull/3847</a></p>",
        "id": 432166249,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1712651451
    },
    {
        "content": "<p>The variables were introduced from things the user wrote in the first place, so the expressions should not be much larger than the original goal state</p>",
        "id": 432166470,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712651510
    },
    {
        "content": "<p>I’m worried that the omega error message might duplicate them, so one large expression might appear multiple times here.</p>",
        "id": 432166756,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1712651583
    },
    {
        "content": "<p>but it's a good point that the pretty printing is lossy here. Is this something we can use the pp-diff tool (or whatever it was called) for?</p>",
        "id": 432166798,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712651597
    },
    {
        "content": "<p>It could also be a set_option</p>",
        "id": 432166889,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712651624
    },
    {
        "content": "<p>Maybe; I’d say the current presentation is good enough™, and as a side effect conveys some intuition about how <code>omega</code> sees the problem – because it is crucial knowledge that omega only sees the things above the <code>where</code>, and the rest is opaque.</p>",
        "id": 432167078,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1712651667
    },
    {
        "content": "<p>and even if you can't fix the pp issue, you can at least detect it and either switch to the deduplicated mode or give a warning that relevant information is hidden</p>",
        "id": 432167155,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712651693
    }
]