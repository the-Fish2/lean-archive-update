[
    {
        "content": "<p>Is it possible to access <code>argv[0]</code> in lean? As I read it, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.IR.EmitC.emitMainFn#src\">src#Lean.IR.EmitC.emitMainFn</a> only propagates <code>argv[1]</code> onwards to the arguments to <code>def main</code>.</p>",
        "id": 432289709,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712681003
    },
    {
        "content": "<p>(As for the behavior of <code>lean --run</code>, this could set <code>argv[0]</code> to the path to the lean source file, like <code>python -m</code> does)</p>",
        "id": 432290935,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712681344
    },
    {
        "content": "<p>If it's too late to change the signature of <code>main</code> <del>(which would be very unfortunate, since it currently diverges from Python, C, and Rust)</del>, then I suppose this could be exposed by <code>IO.progName : IO String</code>?</p>",
        "id": 432325493,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712691439
    },
    {
        "content": "<p>Yes, that may be the most reasonable addition at this point. Do you have a use case where appPath (sp?) is not sufficient?</p>",
        "id": 432334201,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1712694271
    },
    {
        "content": "<p>Yes, in my use case the generated binary is symlinked from multiple locations, and I need to know which symlink my binary was invoked from</p>",
        "id": 432336450,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712695162
    },
    {
        "content": "<p>(I think appPath fully resolved the symlink when I tried it)</p>",
        "id": 432336560,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712695210
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/Accessing.20argv.5B0.5D/near/432336450\">said</a>:</p>\n<blockquote>\n<p>Yes, in my use case the generated binary is symlinked from multiple locations, and I need to know which symlink my binary was invoked from</p>\n</blockquote>\n<p>Note that this is a very general use case, for example busybox \"single binary all UNIX utils\" trick works like this. So from a PL perspective we definitely want this feature in some way.</p>",
        "id": 432336662,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1712695271
    },
    {
        "content": "<p>It looks like Haskell's design is close to lean; <code>getArgs</code> does not include <code>argv[0]</code>, which is instead in <code>getProgName</code></p>",
        "id": 432336784,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712695327
    },
    {
        "content": "<p>So I retract any implication that Lean has made a wrong turn here; this is a missing feature not a design flaw :)</p>",
        "id": 432336835,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712695356
    },
    {
        "content": "<p>Perhaps another solution is to allow <code>def main (progName : String) (args : List String) : IO _</code></p>",
        "id": 432336899,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712695397
    },
    {
        "content": "<p>Though making progName available globally monadically like it is in Haskell would be convenient for me</p>",
        "id": 432336953,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712695429
    }
]