[
    {
        "content": "<p>Is there a way I can provide a type-class instance to a function explicitly without using the <code>@</code>-notation? Or is there a way in which I can make the missing type class instance into a separate goal, instead of lean complaining that it can't synthesize the instance? I have a definition as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span><span class=\"w\"> </span><span class=\"kd\">def</span><span class=\"w\"> </span><span class=\"n\">inducedMap</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">𝒳</span><span class=\"w\"> </span><span class=\"bp\">⥤</span><span class=\"w\"> </span><span class=\"n\">𝒮</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">𝒮</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">𝒳</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"bp\">⟶</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">φ</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">⟶</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"o\">[</span><span class=\"n\">IsCartesian</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">φ</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">R'</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">𝒮</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">a'</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">𝒳</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">R'</span><span class=\"w\"> </span><span class=\"bp\">⟶</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">f'</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">R'</span><span class=\"w\"> </span><span class=\"bp\">⟶</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hf'</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">f'</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"bp\">≫</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">φ'</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">a'</span><span class=\"w\"> </span><span class=\"bp\">⟶</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">IsHomLift</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">f'</span><span class=\"w\"> </span><span class=\"n\">φ'</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">a'</span><span class=\"w\"> </span><span class=\"bp\">⟶</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>So basically a definition with a lot of parameters, and I want to apply it in a setting where lean can't infer the last parameter <code>IsHomLift p f' φ'</code>, but <code>aesop</code> can prove it. I know I could make a <code>have</code> statement to obtain this instance before trying to use this definition, but the type of the missing instance is somewhat ugly to write down, so it would be a lot cleaner if I could avoid that.</p>",
        "id": 440620124,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1716626534
    },
    {
        "content": "<p>If you have control of the <code>def</code>, naming the type class parameter (e.g. <code>[IsHom : IsHomLift p f' φ']</code>) lets you do <code>induceMap (IsHom := ...)</code>.</p>\n<p>If you do not, then the only way I can think of is to define an abbrev <code>induceMap'</code> that names the parameter and delegates to <code>induceMap</code> -- then you can use the trick above.</p>",
        "id": 440660172,
        "sender_full_name": "František Silváši 🦉",
        "timestamp": 1716666873
    },
    {
        "content": "<p>Thanks! The linter complains when I try to give a name to <code>IsHomLift</code> in the definition, since I don't use it explicitly in the construction, but the abbrev is a good trick!</p>",
        "id": 440696827,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1716711977
    },
    {
        "content": "<p>Linter is a heuristic - it's sometimes perfectly legitimate to <code>set_option linter.unusedVariables false in &lt;your def&gt;</code> :).</p>",
        "id": 440699681,
        "sender_full_name": "František Silváši 🦉",
        "timestamp": 1716715166
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"364929\">František Silváši 🦉</span> <a href=\"#narrow/stream/270676-lean4/topic/Providing.20type-class.20explicitly/near/440699681\">said</a>:</p>\n<blockquote>\n<p>Linter is a heuristic - it's sometimes perfectly legitimate to <code>set_option linter.unusedVariables false in &lt;your def&gt;</code> :).</p>\n</blockquote>\n<p>That makes sense, thanks!</p>",
        "id": 440729294,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1716746213
    }
]