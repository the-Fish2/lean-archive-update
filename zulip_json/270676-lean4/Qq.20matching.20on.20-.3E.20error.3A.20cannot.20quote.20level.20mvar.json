[
    {
        "content": "<p>Hi all, another metaprogramming question.</p>\n<p>I've been succesfully using Qq, and it's been very nice. However somehow I can't get it to pattern match on an implication. Here's an example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Qq</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"n\">Term</span> <span class=\"n\">Meta</span> <span class=\"n\">PrettyPrinter</span> <span class=\"n\">Qq</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">simplifyLocalDecl</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">localDecl</span> <span class=\"o\">:</span> <span class=\"n\">LocalDecl</span><span class=\"o\">):</span> <span class=\"n\">TacticM</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">MVarId</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">localDecl.fvarId</span>\n  <span class=\"k\">let</span> <span class=\"n\">xx</span> <span class=\"bp\">←</span> <span class=\"n\">inferTypeQ</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">fvar</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">res</span> <span class=\"bp\">←</span> <span class=\"k\">match</span> <span class=\"n\">xx</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">some</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">none</span>\n</code></pre></div>\n<p>I get an error on the match keyword: <code>cannot quote level mvar ?u.817</code>. For the and, or, and not operators this worked just fine.</p>\n<p>As a side question, is there some documentation somewhere on using Qq? The readme in the quote4 repo is pretty clear, but it says pattern matching doesn't work yet, yet it clearly does for me, so I'm guessing the readme is out of date a bit?</p>\n<p>Edit: Writing it with a universal quantifier gives the same error: <code> | ⟨0, ~q(∀ t, $b t), _⟩ =&gt; return none</code>. Pretty sure I'm not reading some fine print somewhere again...</p>",
        "id": 422010192,
        "sender_full_name": "Bob Rubbens",
        "timestamp": 1708175283
    },
    {
        "content": "<p>I worked around it for now by just using plain pattern matching:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">forallE</span> <span class=\"n\">_</span> <span class=\"n\">binderType</span> <span class=\"n\">body</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"n\">binderTypeType</span> <span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">binderType</span>\n      <span class=\"k\">let</span> <span class=\"n\">anteProp</span> <span class=\"bp\">←</span> <span class=\"n\">isDefEq</span> <span class=\"n\">binderTypeType</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"kt\">Prop</span><span class=\"o\">)</span>\n      <span class=\"k\">let</span> <span class=\"n\">bodyType</span> <span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">body</span>\n      <span class=\"k\">let</span> <span class=\"n\">conseProp</span> <span class=\"bp\">←</span> <span class=\"n\">isDefEq</span> <span class=\"n\">bodyType</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"kt\">Prop</span><span class=\"o\">)</span>\n      <span class=\"k\">if</span> <span class=\"n\">anteProp</span> <span class=\"bp\">∧</span> <span class=\"n\">conseProp</span>\n        <span class=\"k\">then</span> <span class=\"n\">return</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">localRewrite</span> <span class=\"n\">g</span> <span class=\"n\">localDecl</span> <span class=\"bp\">``</span><span class=\"n\">imp_or</span><span class=\"o\">)</span>\n        <span class=\"k\">else</span> <span class=\"n\">return</span> <span class=\"n\">none</span>\n</code></pre></div>\n<p>I was rewriting <code>-&gt;</code> to <code>or</code> expressions. I'm guessing dependent arrows are a fundamental thing in lean/its kernel so that might make pattern matching on it difficult?</p>",
        "id": 422011995,
        "sender_full_name": "Bob Rubbens",
        "timestamp": 1708177152
    },
    {
        "content": "<p>Qq pattern matching on functions is pretty difficult right now, <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> has been struggling with this too</p>",
        "id": 422013155,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708178221
    },
    {
        "content": "<p>Okay, then if my workaround isn't too silly I'm happy <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 422013204,
        "sender_full_name": "Bob Rubbens",
        "timestamp": 1708178264
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"381694\">Bob Rubbens</span> has marked this topic as resolved.</p>",
        "id": 422013231,
        "sender_full_name": "Notification Bot",
        "timestamp": 1708178282
    },
    {
        "content": "<p>Here's a mwe in case anyone wants to fiddle around with it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Qq</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"n\">Term</span> <span class=\"n\">Meta</span> <span class=\"n\">PrettyPrinter</span> <span class=\"n\">Qq</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">isImp</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Prop</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">res</span> <span class=\"bp\">←</span> <span class=\"k\">match</span> <span class=\"n\">p</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">((</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">false</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">isImp</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">True</span> <span class=\"bp\">→</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"c1\">-- wrong answer!</span>\n</code></pre></div>",
        "id": 422013519,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708178454
    },
    {
        "content": "<p>Oh, this works!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">isImp</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Prop</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Prop</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">match</span> <span class=\"n\">p</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(((</span><span class=\"bp\">$</span><span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">$</span><span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"n\">return</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">Q</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">return</span> <span class=\"n\">none</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">isImp</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">True</span> <span class=\"bp\">→</span> <span class=\"n\">False</span><span class=\"o\">)</span>\n<span class=\"k\">#eval</span> <span class=\"n\">isImp</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">True</span> <span class=\"bp\">∧</span> <span class=\"n\">False</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 422013726,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708178591
    },
    {
        "content": "<p>Those <code>()</code>s around <code>$P</code> are the trick</p>",
        "id": 422013739,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708178607
    },
    {
        "content": "<p>Stealing it immediately for my positivity extensions</p>",
        "id": 422013751,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708178620
    },
    {
        "content": "<p>Wait, I have one more complication in my use case: not all universes are <code>Prop</code></p>",
        "id": 422013828,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708178655
    },
    {
        "content": "<p>How do I get the universes to work out? If I want to destructure <code>π : Sort w</code> into <code>α → β</code> where <code>α : Sort u</code> and <code>β : Sort v</code> I somehow need to unify <code>w</code> with <code>imax u v</code>.</p>",
        "id": 422013886,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708178727
    },
    {
        "content": "<p>I guess you'll need <code>~q((($P) : Sort u) → (($Q) : Sort v))</code></p>",
        "id": 422013968,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708178779
    },
    {
        "content": "<p>Is <code>Type</code> ok for you?</p>",
        "id": 422013980,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708178782
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Qq.20matching.20on.20-.3E.20error.3A.20cannot.20quote.20level.20mvar/near/422013886\">said</a>:</p>\n<blockquote>\n<p>How do I get the universes to work out? If I want to destructure <code>π : Sort w</code> into <code>α → β</code> where <code>α : Sort u</code> and <code>β : Sort v</code> I somehow need to unify <code>w</code> with <code>imax u v</code>.</p>\n</blockquote>\n<p>This was discussed already in another thread of yours, please link it here when you find it!</p>",
        "id": 422014007,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708178811
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Qq.20matching.20on.20-.3E.20error.3A.20cannot.20quote.20level.20mvar/near/422013980\">said</a>:</p>\n<blockquote>\n<p>Is <code>Type</code> ok for you?</p>\n</blockquote>\n<p>Yes in fact I'm only dealing with <code>Type _</code> in my use case</p>",
        "id": 422014056,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708178857
    },
    {
        "content": "<p>I think <code>imax</code> would have caused you a lot more pain than <code>max</code></p>",
        "id": 422014151,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708178914
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Qq.20matching.20on.20-.3E.20error.3A.20cannot.20quote.20level.20mvar/near/422013968\">said</a>:</p>\n<blockquote>\n<p>I guess you'll need <code>~q((($P) : Sort u) → (($Q) : Sort v))</code></p>\n</blockquote>\n<p>But how do I get <code>u</code> and <code>v</code>?</p>",
        "id": 422014312,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708179065
    },
    {
        "content": "<p>They don't exist in my context before the match</p>",
        "id": 422014321,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708179074
    },
    {
        "content": "<p>You create them as metavariables</p>",
        "id": 422014598,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708179337
    },
    {
        "content": "<p>... as discussed in the previous thread you made somewhere</p>",
        "id": 422014652,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708179365
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> has marked this topic as unresolved.</p>",
        "id": 422014705,
        "sender_full_name": "Notification Bot",
        "timestamp": 1708179431
    },
    {
        "content": "<p><a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/Positivity.20extension.20for.20Finset.2Ecard\">https://leanprover.zulipchat.com/#narrow/stream/239415-metaprogramming-.2F-tactics/topic/Positivity.20extension.20for.20Finset.2Ecard</a> ?</p>",
        "id": 422014740,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708179476
    },
    {
        "content": "<p>Yes, <a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/Positivity.20extension.20for.20Finset.2Ecard/near/407956784\">this message</a></p>",
        "id": 422014827,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708179519
    },
    {
        "content": "<p>Something is wrong here</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Qq</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"n\">Term</span> <span class=\"n\">Meta</span> <span class=\"n\">PrettyPrinter</span> <span class=\"n\">Qq</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">isFun</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">Level</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"bp\">$</span><span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Level</span><span class=\"o\">),</span>  <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">v</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshLevelMVar</span>\n  <span class=\"k\">let</span> <span class=\"n\">w</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshLevelMVar</span>\n  <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">=</span><span class=\"n\">QL</span> <span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n  <span class=\"k\">match</span> <span class=\"n\">π</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(((</span><span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"bp\">$</span><span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"o\">⟨</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">β</span><span class=\"o\">)⟩</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">none</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">isFun</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Unit</span> <span class=\"bp\">→</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"c1\">-- none</span>\n</code></pre></div>",
        "id": 422015208,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708179827
    },
    {
        "content": "<p>Yeah, I think the universe variables don't unify properly</p>",
        "id": 422015307,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708179947
    },
    {
        "content": "<p>You could #print the resulting <code>isFun</code>, and reduce the failing meta code to a <code>~q</code>-free mwe</p>",
        "id": 422016246,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708180844
    },
    {
        "content": "<p>This seems to work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">isFun</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">Level</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Sort</span> <span class=\"bp\">$</span><span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Level</span><span class=\"o\">),</span>  <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Sort</span> <span class=\"n\">w</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">match</span> <span class=\"bp\">←</span> <span class=\"n\">whnfR</span> <span class=\"n\">π</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Expr.forallE</span> <span class=\"n\">_</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">sort</span> <span class=\"n\">v</span> <span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">return</span> <span class=\"n\">none</span>\n    <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">sort</span> <span class=\"n\">w</span> <span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">β</span> <span class=\"bp\">|</span> <span class=\"n\">return</span> <span class=\"n\">none</span>\n    <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"o\">⟨</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">none</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">isFun</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Unit</span> <span class=\"bp\">→</span> <span class=\"n\">Unit</span><span class=\"o\">)</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">some ⟨Lean.Level.succ</span>\n<span class=\"cm\">   (Lean.Level.zero), ⟨Lean.Level.succ (Lean.Level.zero),</span>\n<span class=\"cm\">(Lean.Expr.const `Unit [], Lean.Expr.const `Unit [])⟩⟩</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 422016507,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708181086
    },
    {
        "content": "<p>Oh, I know it's possible to do without Qq; my question is why Qq's generated code doesn't work</p>",
        "id": 422016561,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708181146
    },
    {
        "content": "<p>(that approach doesn't work if <code>π</code> has <code>mdata</code> or is a metavariable though)</p>",
        "id": 422016618,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708181169
    },
    {
        "content": "<p>My guess is that the issue is some kind of <code>max u1 v1 =?= max u2 v2</code> unification failure.</p>",
        "id": 422016636,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708181193
    },
    {
        "content": "<p>Edited to add <code>mdata</code> handling</p>",
        "id": 422016718,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708181264
    },
    {
        "content": "<p>I think <code>whnfR</code> is probably the better approach</p>",
        "id": 422016782,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708181304
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/Qq.20matching.20on.20-.3E.20error.3A.20cannot.20quote.20level.20mvar/near/422016246\">said</a>:</p>\n<blockquote>\n<p>You could #print the resulting <code>isFun</code>, and reduce the failing meta code to a <code>~q</code>-free mwe</p>\n</blockquote>\n<p>Am I supposed to do that from the raw expression?</p>",
        "id": 422016910,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708181447
    },
    {
        "content": "<p>Hmm, the version I had earlier printed without raw expressions...</p>",
        "id": 422024603,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708186795
    },
    {
        "content": "<p>Using <code>return .some ⟨v, w, α, β⟩</code> instead of <code>⟨v, w, q($α), q($β)⟩</code> fixes the printer</p>",
        "id": 422024685,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708186834
    },
    {
        "content": "<p>Replacing <code>withNewMCtxDepth _ false</code> with <code>withNewMCtxDepth _ true</code> seems to fix it</p>",
        "id": 422024814,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708186955
    },
    {
        "content": "<p>Yaël and Eric, it would be really nice to write Qq documentation with everything you understood.</p>",
        "id": 422026066,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708188011
    },
    {
        "content": "<p>I was contemplating doing that, actually</p>",
        "id": 422026238,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708188143
    },
    {
        "content": "<p>I have already spotted some existing docstrings that are confusing at best</p>",
        "id": 422026262,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708188173
    },
    {
        "content": "<p>It's quite funny reading my messages from a few months ago. I have definitely learned things! but not enough apparently <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 422026395,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708188271
    },
    {
        "content": "<p>Okay, so fixing the Qq version and simplifying it, I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Qq</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"n\">Term</span> <span class=\"n\">Meta</span> <span class=\"n\">PrettyPrinter</span> <span class=\"n\">Qq</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">isFun</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">Level</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"bp\">$</span><span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Level</span><span class=\"o\">,</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">v</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshLevelMVar</span>\n  <span class=\"k\">let</span> <span class=\"n\">w</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshLevelMVar</span>\n  <span class=\"n\">withNewMCtxDepth</span>\n    <span class=\"o\">(</span><span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">α</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">sort</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">v</span><span class=\"o\">)))</span>\n      <span class=\"k\">let</span> <span class=\"n\">β</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">sort</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">w</span><span class=\"o\">)))</span>\n      <span class=\"k\">match</span> <span class=\"bp\">←</span> <span class=\"n\">withReducible</span> <span class=\"o\">(</span><span class=\"n\">isDefEq</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">forallE</span> <span class=\"bp\">.</span><span class=\"n\">anonymous</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"bp\">.</span><span class=\"n\">default</span><span class=\"o\">)</span> <span class=\"n\">π</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">⟨</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"n\">β</span><span class=\"o\">⟩)</span>\n      <span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">none</span><span class=\"o\">)</span>\n    <span class=\"n\">true</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">isFun</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Unit</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 422026697,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708188518
    },
    {
        "content": "<p>It looks pretty similar to the version I came up with by hand, but looks a bit more robust.</p>",
        "id": 422026708,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708188538
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/Qq.20matching.20on.20-.3E.20error.3A.20cannot.20quote.20level.20mvar/near/422026066\">said</a>:</p>\n<blockquote>\n<p>Yaël and Eric, it would be really nice to write Qq documentation with everything you understood.</p>\n</blockquote>\n<p>All my writing energy is currently directed at a thesis, but this is high on my todo list. Do you think it has a better home in Qq itself, or in the metaprogramming book?</p>",
        "id": 422026977,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708188816
    },
    {
        "content": "<p>Presumably <code>withNewMCtxDepth false</code> is fine if the level metavariables are created inside the context</p>",
        "id": 422027171,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708189005
    },
    {
        "content": "<p>I think probably Qq is doing the right thing by refusing to unify universe metavariables that it doesn't own; but the problem is that unlike expression metavariables, it doesn't provide the user with any way to pass over ownership</p>",
        "id": 422027263,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708189132
    },
    {
        "content": "<p>Perhaps what's missing is a <code>~ql(max $u $v)</code> match clause</p>",
        "id": 422027271,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708189147
    },
    {
        "content": "<p>As a reminder, Qq already has <code>ql</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Level</span><span class=\"o\">}</span>\n<span class=\"k\">#check</span> <span class=\"n\">ql</span><span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 422027309,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708189198
    },
    {
        "content": "<p>Here's a MWE, with all the extra typeclasses stripped away:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Positivity.Core</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">IsFun</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"n\">Term</span> <span class=\"n\">Meta</span> <span class=\"n\">PrettyPrinter</span> <span class=\"n\">Qq</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">isFun</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">Level</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"bp\">$</span><span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Level</span><span class=\"o\">,</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">v</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshLevelMVar</span>\n  <span class=\"k\">let</span> <span class=\"n\">w</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshLevelMVar</span>\n  <span class=\"n\">withNewMCtxDepth</span>\n    <span class=\"o\">(</span><span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">α</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">sort</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">v</span><span class=\"o\">)))</span>\n      <span class=\"k\">let</span> <span class=\"n\">β</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">sort</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">w</span><span class=\"o\">)))</span>\n      <span class=\"k\">match</span> <span class=\"bp\">←</span> <span class=\"n\">withReducible</span> <span class=\"o\">(</span><span class=\"n\">isDefEq</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">forallE</span> <span class=\"bp\">.</span><span class=\"n\">anonymous</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"bp\">.</span><span class=\"n\">default</span><span class=\"o\">)</span> <span class=\"n\">π</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">⟨</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"n\">β</span><span class=\"o\">⟩)</span>\n      <span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">none</span><span class=\"o\">)</span>\n    <span class=\"n\">true</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">IsFun</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">Defs</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">conv</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">OrderedAddCommMonoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">conv_nonneg</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">conv</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">conv_nonneg_of_pos_of_nonneg</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">conv</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">conv_nonneg</span> <span class=\"n\">hf.le</span> <span class=\"n\">hg</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">conv_nonneg_of_nonneg_of_pos</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">conv</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">conv_nonneg</span> <span class=\"n\">hf</span> <span class=\"n\">hg.le</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">conv_pos</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">conv</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Defs</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Mathlib.Meta.Positivity</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Qq</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">positivity</span> <span class=\"n\">conv</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">evalConv</span> <span class=\"o\">:</span> <span class=\"n\">PositivityExt</span> <span class=\"n\">where</span> <span class=\"n\">eval</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">π</span><span class=\"o\">}</span> <span class=\"n\">zπ</span> <span class=\"n\">pπ</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"o\">⟨</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">β</span><span class=\"o\">)⟩</span> <span class=\"bp\">←</span> <span class=\"n\">isFun</span> <span class=\"n\">π</span> <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"not `conv`\"</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">=</span><span class=\"n\">QL</span> <span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">π</span> <span class=\"bp\">=</span><span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"bp\">$</span><span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n  <span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">don't know how to synthesize placeholder</span>\n<span class=\"cm\">context:</span>\n<span class=\"cm\">case m</span>\n<span class=\"cm\">«$$v»«$$w»: Level</span>\n<span class=\"cm\">$$x✝¹$$x✝: Expr × Bool</span>\n<span class=\"cm\">⊢ Sort ?u.6232</span>\n<span class=\"cm\">-/</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">conv</span> <span class=\"bp\">$</span><span class=\"n\">α</span> <span class=\"bp\">$</span><span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"bp\">$</span><span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"bp\">$</span><span class=\"n\">β</span><span class=\"o\">)))</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"not `conv`\"</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Mathlib.Meta.Positivity</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">Examples</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">OrderedAddCommMonoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n\n<span class=\"c1\">-- failed to prove positivity/nonnegativity/nonzeroness</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">conv</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">positivity</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">conv</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">positivity</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">conv</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">positivity</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">conv</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">positivity</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Examples</span>\n</code></pre></div>",
        "id": 422027435,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708189277
    },
    {
        "content": "<p>I have no idea where this error is coming from</p>",
        "id": 422027459,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708189300
    },
    {
        "content": "<p>This compiles:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">positivity</span> <span class=\"n\">conv</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">evalConv</span> <span class=\"o\">:</span> <span class=\"n\">PositivityExt</span> <span class=\"n\">where</span> <span class=\"n\">eval</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">π</span><span class=\"o\">}</span> <span class=\"n\">zπ</span> <span class=\"n\">pπ</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"o\">⟨</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">β</span><span class=\"o\">)⟩</span> <span class=\"bp\">←</span> <span class=\"n\">isFun</span> <span class=\"n\">π</span> <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"not `conv`\"</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">=</span><span class=\"n\">QL</span> <span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">π</span> <span class=\"bp\">=</span><span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"bp\">$</span><span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n  <span class=\"k\">match</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">conv.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">$</span><span class=\"n\">f</span> <span class=\"bp\">$</span><span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"not `conv`\"</span>\n</code></pre></div>",
        "id": 422028166,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708189883
    },
    {
        "content": "<p>(FYI, you can write <code>withNewMCtxDepth (allowLevelAssigments := true) do ...</code>, which reads slightly nicer.)</p>",
        "id": 422028260,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1708189936
    },
    {
        "content": "<p>In fact,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">evalConv</span> <span class=\"o\">:</span> <span class=\"n\">PositivityExt</span> <span class=\"n\">where</span> <span class=\"n\">eval</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">π</span><span class=\"o\">}</span> <span class=\"n\">zπ</span> <span class=\"n\">pπ</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"o\">⟨</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">β</span><span class=\"o\">)⟩</span> <span class=\"bp\">←</span> <span class=\"n\">isFun</span> <span class=\"n\">π</span> <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"not `conv`\"</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">=</span><span class=\"n\">QL</span> <span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">π</span> <span class=\"bp\">=</span><span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"bp\">$</span><span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n  <span class=\"k\">match</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">conv</span> <span class=\"bp\">$</span><span class=\"n\">f</span> <span class=\"bp\">$</span><span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"not `conv`\"</span>\n</code></pre></div>\n<p>works too</p>",
        "id": 422030670,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708192224
    },
    {
        "content": "<p>Why is <code>q($e)</code> not behaving the same as <code>e</code>?</p>",
        "id": 422030686,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708192240
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/270676-lean4/topic/Qq.20matching.20on.20-.3E.20error.3A.20cannot.20quote.20level.20mvar/near/422030670\">said</a>:</p>\n<blockquote>\n<p>In fact, [...] works too</p>\n</blockquote>\n<p>No it doesn't, the Qq ascriptions are wrong because new types are introduced.</p>",
        "id": 422031119,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708192694
    },
    {
        "content": "<p>New MWE, exhibiting a different error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">evalConv</span> <span class=\"o\">:</span> <span class=\"n\">PositivityExt</span> <span class=\"n\">where</span> <span class=\"n\">eval</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">π</span><span class=\"o\">}</span> <span class=\"n\">zπ</span> <span class=\"n\">pπ</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"o\">⟨</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">β</span><span class=\"o\">)⟩</span> <span class=\"bp\">←</span> <span class=\"n\">isFun</span> <span class=\"n\">π</span> <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"not `conv`\"</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">=</span><span class=\"n\">QL</span> <span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">π</span> <span class=\"bp\">=</span><span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"bp\">$</span><span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n  <span class=\"k\">match</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">conv</span> <span class=\"bp\">$</span><span class=\"n\">α</span> <span class=\"bp\">$</span><span class=\"n\">β</span> <span class=\"bp\">$</span><span class=\"n\">f</span> <span class=\"bp\">$</span><span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"bp\">←</span> <span class=\"n\">synthInstanceQ</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">OrderedAddCommMonoid</span> <span class=\"bp\">$</span><span class=\"n\">β</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"bp\">←</span> <span class=\"n\">synthInstanceQ</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">PartialOrder</span> <span class=\"bp\">$</span><span class=\"n\">β</span><span class=\"o\">)</span>\n    <span class=\"k\">match</span> <span class=\"bp\">←</span> <span class=\"n\">core</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">inferInstance</span><span class=\"o\">)</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">inferInstance</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">positive</span> <span class=\"n\">rf</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">match</span> <span class=\"bp\">←</span> <span class=\"n\">core</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">inferInstance</span><span class=\"o\">)</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">inferInstance</span><span class=\"o\">)</span> <span class=\"n\">g</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">positive</span> <span class=\"n\">rg</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n        <span class=\"k\">let</span> <span class=\"n\">rf</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rf</span>\n        <span class=\"k\">let</span> <span class=\"n\">rg</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">$</span><span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rg</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">application type mismatch</span>\n<span class=\"cm\">  conv_pos «$rf»</span>\n<span class=\"cm\">argument</span>\n<span class=\"cm\">  «$rf»</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  @OfNat.ofNat («$α» → «$β») 0</span>\n<span class=\"cm\">      (@Zero.toOfNat0 («$α» → «$β») (@Pi.instZero «$α» (fun a ↦ «$β») fun i ↦ AddMonoid.toZero)) &lt;</span>\n<span class=\"cm\">    «$f» : Prop</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  @OfNat.ofNat («$α» → «$β») 0</span>\n<span class=\"cm\">      (@Zero.toOfNat0 («$α» → «$β») (@Pi.instZero «$α» (fun a ↦ «$β») fun i ↦ AddMonoid.toZero)) &lt;</span>\n<span class=\"cm\">    ?m.21991 : Prop</span>\n<span class=\"cm\">-/</span>\n        <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">positive</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">conv_pos</span> <span class=\"bp\">$</span><span class=\"n\">α</span> <span class=\"bp\">$</span><span class=\"n\">β</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">$</span><span class=\"n\">rf</span> <span class=\"bp\">$</span><span class=\"n\">rg</span><span class=\"o\">)</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">nonnegative</span> <span class=\"n\">rg</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n      <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">none</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">nonnegative</span> <span class=\"n\">rf</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">none</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"not `conv`\"</span>\n</code></pre></div>",
        "id": 422033119,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708194420
    },
    {
        "content": "<p>The full MWE is available at <a href=\"https://github.com/YaelDillies/LeanAPAP/blob/conv_positivity/LeanAPAP/MWE.lean\">https://github.com/YaelDillies/LeanAPAP/blob/conv_positivity/LeanAPAP/MWE.lean</a></p>",
        "id": 422033163,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708194471
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/Qq.20matching.20on.20-.3E.20error.3A.20cannot.20quote.20level.20mvar/near/422026977\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/Qq.20matching.20on.20-.3E.20error.3A.20cannot.20quote.20level.20mvar/near/422026066\">said</a>:</p>\n<blockquote>\n<p>Yaël and Eric, it would be really nice to write Qq documentation with everything you understood.</p>\n</blockquote>\n<p>All my writing energy is currently directed at a thesis, but this is high on my todo list. Do you think it has a better home in Qq itself, or in the metaprogramming book?</p>\n</blockquote>\n<p>I would aim for an independent document but this is really up to you.</p>",
        "id": 422061106,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708225489
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/270676-lean4/topic/Qq.20matching.20on.20-.3E.20error.3A.20cannot.20quote.20level.20mvar/near/422033119\">said</a>:</p>\n<blockquote>\n<p>New MWE, exhibiting a different error: ...</p>\n</blockquote>\n<p>I would still use some wisdom on this one <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 422134161,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1708294751
    }
]