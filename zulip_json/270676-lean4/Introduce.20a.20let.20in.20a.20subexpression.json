[
    {
        "content": "<p>How do I introduce i to the context here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">let</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"bp\">;</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">i</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 433003911,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1712971081
    },
    {
        "content": "<p>I have a large number of let statements and I'd like to introduce them all</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">let</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"bp\">;</span> <span class=\"k\">let</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"k\">let</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"bp\">;</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">k</span>\n</code></pre></div>",
        "id": 433003985,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1712971150
    },
    {
        "content": "<p>Something like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">let</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"bp\">;</span> <span class=\"k\">let</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"k\">let</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"bp\">;</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">lift_lets</span>\n  <span class=\"n\">extract_lets</span> <span class=\"n\">i</span> <span class=\"n\">j</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">j</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 433007411,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1712974503
    },
    {
        "content": "<p>Is there a way to solve this without using mathlib?</p>",
        "id": 433352165,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1713203294
    },
    {
        "content": "<p>Not really. The <code>lift_lets</code> tactic is hard to reproduce with other tactics.</p>\n<p>You can replace <code>extract_lets i j</code> with <code>intro i j</code> however.</p>",
        "id": 433362107,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713206740
    },
    {
        "content": "<p>I hope <code>lift_lets</code> can be included included in the prelude then</p>",
        "id": 433363967,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1713207434
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"599027\">@Leni Aniva</span>, it looks like this would be easy to do, and I agree it would be reasonable. Currently <code>Mathlib/Tactic/LiftLets</code> imports <code>Mathlib/Tactic/Basic</code>, but it seems that can be replaced with <code>import Lean</code> (but should be replaced with something finer).</p>\n<p>If you wanted to make a PR moving this to the lean4 repository (I'm sure Kyle, the author, won't object), I could help clean it up and turn it into a built-in tactic. Otherwise we can try to get to it later.</p>",
        "id": 433640960,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713323878
    },
    {
        "content": "<p>I'd be happy to upstream these tactics myself if core wants them.</p>",
        "id": 433641509,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713324290
    },
    {
        "content": "<p>I think it's reasonable. They are fundamental tactics that you inevitably need once you're dealing with <code>let</code>, there's no need for them to be in Mathlib, and we have evidence above that they are wanted outside Mathlib.</p>",
        "id": 433641842,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713324514
    },
    {
        "content": "<p>I guess <code>extract_lets</code> uses some other stuff in Mathlib still.</p>",
        "id": 433641858,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713324531
    },
    {
        "content": "<p>Oh, maybe just <code>letDepth</code>, which is trivial to upstream.</p>",
        "id": 433641901,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1713324560
    }
]