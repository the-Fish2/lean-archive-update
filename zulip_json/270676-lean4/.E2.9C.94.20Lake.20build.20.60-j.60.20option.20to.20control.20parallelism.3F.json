[
    {
        "content": "<p>When compiling Rust, I can use <code>cargo build -j 4</code> to only spawn 4 compilation threads. Is there a similar option for <code>lake</code>? I'm having trouble finding it.</p>",
        "id": 439747881,
        "sender_full_name": "George Pîrlea",
        "timestamp": 1716276052
    },
    {
        "content": "<p>You can set the number of threads that the Lean runtime uses to schedule tasks with the environment variable <code>LEAN_NUM_THREADS</code>. Note that this sets the number of parallel schedulable tasks within the Lean runtime globally, not the number of Lake parallel tasks directly. It just so happens to be that Lake only spawns tasks that actually build things in the current implementation and thus these values are exactly the same.</p>",
        "id": 439750698,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1716277118
    },
    {
        "content": "<p>That works. Thank you!</p>",
        "id": 439751544,
        "sender_full_name": "George Pîrlea",
        "timestamp": 1716277434
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"542918\">George Pîrlea</span> has marked this topic as resolved.</p>",
        "id": 439751551,
        "sender_full_name": "Notification Bot",
        "timestamp": 1716277436
    },
    {
        "content": "<p>I was wondering the same before. Would it make sense for lake to support <code>-j</code>, if only for better discoverability?</p>",
        "id": 439790853,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1716289708
    },
    {
        "content": "<p>It would have helped me, for sure.</p>",
        "id": 439792835,
        "sender_full_name": "George Pîrlea",
        "timestamp": 1716290261
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Lake.20build.20.60-j.60.20option.20to.20control.20parallelism.3F/near/439790853\">said</a>:</p>\n<blockquote>\n<p>I was wondering the same before. Would it make sense for lake to support <code>-j</code>, if only for better discoverability?</p>\n</blockquote>\n<p>To my knowledge there does not exist a function to modify the number of threads from within a running lean program so far. Of course lake could build its own thread aware scheduler but that seems annoying. We could also add that functionality to the scheduler though it opens some fun questions such as: What should happen if all threads are currently in use and we decrease the amount of usable threads.</p>",
        "id": 439793337,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1716290417
    },
    {
        "content": "<p>Could <code>lake -j</code> just spawn a subprocess using <code>LEAN_NUM_THREADS</code>. Not beautiful, but ...?</p>",
        "id": 439797759,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716291591
    },
    {
        "content": "<p>Even just printing \"Run <code>LEAN_NUM_THREADS=8 lake build</code> instead\" and exiting would be useful, if it's too much hassle to implement this directly.</p>",
        "id": 439805122,
        "sender_full_name": "George Pîrlea",
        "timestamp": 1716294292
    },
    {
        "content": "<p>Want to create an issue on the lean4 repo?</p>",
        "id": 439806598,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716294771
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Lake.20build.20.60-j.60.20option.20to.20control.20parallelism.3F/near/439750698\">said</a>:</p>\n<blockquote>\n<p>You can set the number of threads that the Lean runtime uses to schedule tasks with the environment variable <code>LEAN_NUM_THREADS</code>. Note that this sets the number of parallel schedulable tasks within the Lean runtime globally, not the number of Lake parallel tasks directly. It just so happens to be that Lake only spawns tasks that actually build things in the current implementation and thus these values are exactly the same.</p>\n</blockquote>\n<p>Note that this is an unstable feature and relies on Lake not spawning any tasks but build tasks.</p>",
        "id": 439806766,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1716294827
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Kim Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Lake.20build.20.60-j.60.20option.20to.20control.20parallelism.3F/near/439806598\">said</a>:</p>\n<blockquote>\n<p>Want to create an issue on the lean4 repo?</p>\n</blockquote>\n<p>Will do.</p>",
        "id": 439809870,
        "sender_full_name": "George Pîrlea",
        "timestamp": 1716295847
    },
    {
        "content": "<p>Submitted: <a href=\"https://github.com/leanprover/lean4/issues/4241\">lean4#4241</a></p>",
        "id": 439812461,
        "sender_full_name": "George Pîrlea",
        "timestamp": 1716296694
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"542918\">@George Pîrlea</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Lake.20build.20.60-j.60.20option.20to.20control.20parallelism.3F/near/439809870\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110087\">Kim Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Lake.20build.20.60-j.60.20option.20to.20control.20parallelism.3F/near/439806598\">said</a>:</p>\n<blockquote>\n<p>Want to create an issue on the lean4 repo?</p>\n</blockquote>\n<p>Will do.</p>\n</blockquote>\n<p>Thanks! </p>\n<p>Just to <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a>, you know about <code>lake exe cache get</code> right? This offloads the work of local builds of Mathlib to our CI machines.</p>",
        "id": 439915905,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1716329518
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Kim Morrison</span> I do know about the cache (and use it for other projects), but it doesn't work for <a href=\"https://github.com/ufmg-smite/lean-smt\"><code>lean-smt</code></a>, which I was working with yesterday (i.e. my project uses/depends on <code>lean-smt</code>).</p>\n<p>I assumed the reason the cache didn't work is because <code>lean-smt</code> <a href=\"https://github.com/ufmg-smite/lean-smt/blob/main/lakefile.lean#L12-L14\">links against some dynamic libraries</a> and that invalidates the cache. I got the impresion from <a href=\"#narrow/stream/287929-mathlib4/topic/.5B4453.2F8908.5D.20Building.20Mathlib/near/438531399\">this thread</a> (see also <a href=\"#narrow/stream/287929-mathlib4/topic/.5B4453.2F8908.5D.20Building.20Mathlib/near/438535316\">this</a> and <a href=\"#narrow/stream/287929-mathlib4/topic/.5B4453.2F8908.5D.20Building.20Mathlib/near/438536533\">this</a>), but maybe I misunderstood and this is <em>not</em> expected behaviour.</p>\n<p>When I build <code>lean-smt</code>, even if I run <code>lake exe cache get</code>, I see:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">No</span> <span class=\"n\">files</span> <span class=\"n\">to</span> <span class=\"n\">download</span>\n<span class=\"n\">Decompressing</span> <span class=\"mi\">4359</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"n\">unpacked</span> <span class=\"k\">in</span> <span class=\"mi\">98</span> <span class=\"n\">ms</span>\n</code></pre></div>\n<p>...but then <code>mathlib</code> seems to be built anyway. If this isn't expected, I can make a separate thread to discuss that.</p>",
        "id": 439927561,
        "sender_full_name": "George Pîrlea",
        "timestamp": 1716334570
    },
    {
        "content": "<p>CC <span class=\"user-mention\" data-user-id=\"417967\">@Abdalrhman M Mohamed</span> ?</p>",
        "id": 439927787,
        "sender_full_name": "George Pîrlea",
        "timestamp": 1716334698
    },
    {
        "content": "<p>I don't think this is expected behavior. Is this replicable by compiling <code>lean-smt</code> itself or is it a project depending on <code>lean-smt</code>?</p>",
        "id": 439931564,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1716336894
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"542918\">@George Pîrlea</span>, from the thread you shared, it looks like mathlib's cache does not include <code>*.o</code> and <code>*.so</code> files. When I build <code>lean-smt</code>, I get something like:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"o\">[</span><span class=\"m\">2243</span>/2376<span class=\"o\">]</span><span class=\"w\"> </span>Compiling<span class=\"w\"> </span>Mathlib.Data.NNRat.Def\n<span class=\"o\">[</span><span class=\"m\">2244</span>/2376<span class=\"o\">]</span><span class=\"w\"> </span>Linking<span class=\"w\"> </span>Mathlib.Data.NNRat.Def\n</code></pre></div>\n<p>However, I don't see <code>Building Mathlib.Data.NNRat.Def</code>. So, it looks like Mathlib's cache is working properly...</p>",
        "id": 439931809,
        "sender_full_name": "Abdalrhman M Mohamed",
        "timestamp": 1716337046
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"417967\">@Abdalrhman M Mohamed</span> you're right, it does say \"Compiling\" rather than \"Building\".  (I hadn't noticed the difference yesterday.) I guess this is the cache working correctly, then. It is quite fast when I run it on <code>lean-smt</code>.</p>\n<p>Even in my project, I only see \"Compiling\" and \"Linking\" mathlib, but I depend on a few other large projects (<code>lean-auto</code> and <code>duper</code>), so it seems there's just a lot of compiling and linking to do. The cache does seem to be working correctly.</p>\n<p>Thank you both for your help!</p>",
        "id": 439933128,
        "sender_full_name": "George Pîrlea",
        "timestamp": 1716337883
    },
    {
        "content": "<p>By the way, I am considering removing <code>lean-smt</code>’s dependency on <code>mathlib</code>. However, the process is not straightforward due to a few challenges. First, we need to address how to support Reals - perhaps through a Real type-class. Additionally, there’s a complication: cvc5 uses the same linear arithmetic solver for both reals and integers. Consequently, proofs for goals that involve only integers could contain reals.</p>",
        "id": 439933510,
        "sender_full_name": "Abdalrhman M Mohamed",
        "timestamp": 1716338128
    }
]