[
    {
        "content": "<p>This came up on the Xena Discord:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Tree</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span>\n<span class=\"bp\">|</span> <span class=\"n\">pair</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span> <span class=\"bp\">→</span> <span class=\"n\">Tree</span> <span class=\"bp\">→</span> <span class=\"n\">Tree</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Tree</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">cut</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span> <span class=\"bp\">→</span> <span class=\"n\">Tree</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">Kpair</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">cut</span> <span class=\"o\">(</span><span class=\"n\">pair</span> <span class=\"o\">(</span><span class=\"n\">pair</span> <span class=\"n\">K</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"n\">pairL</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">cut</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">cut</span> <span class=\"o\">(</span><span class=\"n\">pair</span> <span class=\"n\">x</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pair</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">pairR</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">cut</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">cut</span> <span class=\"o\">(</span><span class=\"n\">pair</span> <span class=\"n\">z</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pair</span> <span class=\"n\">z</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">cut.ne</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">cut</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span>\n<span class=\"c1\">-- | Kpair, h =&gt; by cases h</span>\n<span class=\"bp\">|</span> <span class=\"n\">pairL</span> <span class=\"n\">xy</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xy.ne</span> <span class=\"o\">(</span><span class=\"n\">pair.inj</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">pairR</span> <span class=\"n\">xy</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xy.ne</span> <span class=\"o\">(</span><span class=\"n\">pair.inj</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n</code></pre></div>\n<p>With the commented-out line the theorem compiles and complains that we used <code>sorry</code> (as opposed to giving an error saying not all cases are covered). I thought this was surprising.</p>",
        "id": 436476603,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714557466
    },
    {
        "content": "<p><del>it surprises me that some cases of <code>cut</code> take 3 variables <code>x y z</code> without complaining even though the type suggests it should only take 2.</del></p>",
        "id": 436488317,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1714564685
    },
    {
        "content": "<p>nevermind, that didn't make sense.</p>\n<p>but the following message seems equally weird:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Tree</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span>\n<span class=\"bp\">|</span> <span class=\"n\">pair</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span> <span class=\"bp\">→</span> <span class=\"n\">Tree</span> <span class=\"bp\">→</span> <span class=\"n\">Tree</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Tree</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">cut</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span> <span class=\"bp\">→</span> <span class=\"n\">Tree</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">Kpair</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">cut</span> <span class=\"o\">(</span><span class=\"n\">pair</span> <span class=\"o\">(</span><span class=\"n\">pair</span> <span class=\"n\">K</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"n\">pairL</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">cut</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">cut</span> <span class=\"o\">(</span><span class=\"n\">pair</span> <span class=\"n\">x</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pair</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">pairR</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">cut</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">cut</span> <span class=\"o\">(</span><span class=\"n\">pair</span> <span class=\"n\">z</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pair</span> <span class=\"n\">z</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">cut.ne</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">cut</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">w</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">w</span> <span class=\"k\">with</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">missing cases:</span>\n<span class=\"cm\">_, _, (@Kpair _ _)</span>\n<span class=\"cm\">-/</span>\n<span class=\"bp\">|</span> <span class=\"n\">pairL</span> <span class=\"n\">xy</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xy.ne</span> <span class=\"o\">(</span><span class=\"n\">pair.inj</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">pairR</span> <span class=\"n\">xy</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xy.ne</span> <span class=\"o\">(</span><span class=\"n\">pair.inj</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n</code></pre></div>\n<p>why is there the <code>_, _, </code> part in the suggestion?</p>",
        "id": 436491205,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1714566404
    },
    {
        "content": "<p>It's probably the <code>a</code> and <code>b</code> arguments being included into the <code>match</code>. Technically a match needs <code>match a, b, w with</code>, but Lean can add the extra arguments.</p>",
        "id": 436492764,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714567133
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/lean.20claims.20theorem.20uses.20sorry/near/436476603\">said</a>:</p>\n<blockquote>\n<p>This came up on the Xena Discord:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Tree</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span>\n<span class=\"bp\">|</span> <span class=\"n\">pair</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span> <span class=\"bp\">→</span> <span class=\"n\">Tree</span> <span class=\"bp\">→</span> <span class=\"n\">Tree</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Tree</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">cut</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span> <span class=\"bp\">→</span> <span class=\"n\">Tree</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">Kpair</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">cut</span> <span class=\"o\">(</span><span class=\"n\">pair</span> <span class=\"o\">(</span><span class=\"n\">pair</span> <span class=\"n\">K</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"n\">pairL</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">cut</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">cut</span> <span class=\"o\">(</span><span class=\"n\">pair</span> <span class=\"n\">x</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pair</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">pairR</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">cut</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">cut</span> <span class=\"o\">(</span><span class=\"n\">pair</span> <span class=\"n\">z</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pair</span> <span class=\"n\">z</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">cut.ne</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">cut</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span>\n<span class=\"c1\">-- | Kpair, h =&gt; by cases h</span>\n<span class=\"bp\">|</span> <span class=\"n\">pairL</span> <span class=\"n\">xy</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xy.ne</span> <span class=\"o\">(</span><span class=\"n\">pair.inj</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">pairR</span> <span class=\"n\">xy</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xy.ne</span> <span class=\"o\">(</span><span class=\"n\">pair.inj</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n</code></pre></div>\n<p>With the commented-out line the theorem compiles and complains that we used <code>sorry</code> (as opposed to giving an error saying not all cases are covered). I thought this was surprising.</p>\n</blockquote>\n<p>For what it's worth, I'm pretty sure the error shouldn't be that not all cases are covered, since the equation compiler should be smart enough to notice the KPair case can't occur.</p>",
        "id": 436909933,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1714750729
    }
]