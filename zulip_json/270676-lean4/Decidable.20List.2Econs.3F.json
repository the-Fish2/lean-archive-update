[
    {
        "content": "<p>I'm not sure what to do here. <code>apply?</code> gives a suggestion <code>exact inst✝ (a :: w)</code> that doesn't work.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">P</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidablePred</span> <span class=\"n\">P</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span>\n<span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">w</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 417535135,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1706046654
    },
    {
        "content": "<p>Does <code>inferInstance</code> work?</p>",
        "id": 417535979,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706047013
    },
    {
        "content": "<p>There was a discussion somewhere about what should <code>exact?/apply?</code> do about inaccessible identifiers.  If you need this to work, you can work around it like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">w</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rename_i</span> <span class=\"n\">h</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">w</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 417535991,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706047020
    },
    {
        "content": "<p>Ruben, your suggestion work as well!  As does <code>by solve_by_elim</code>.</p>",
        "id": 417536173,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706047093
    },
    {
        "content": "<p>Nice!<br>\n(I hadn't realized that <code>inst✝: DecidablePred P</code> being inaccessible was the problem.)</p>",
        "id": 417537299,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1706047530
    },
    {
        "content": "<p>By the way, because <code>inferInstance</code> works on its own, you shouldn't need to write this instance</p>",
        "id": 417539507,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1706048504
    },
    {
        "content": "<p>Can I import <code>inferInstance</code>?</p>",
        "id": 417539986,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1706048709
    },
    {
        "content": "<p>In which sense \"import\"?</p>",
        "id": 417540280,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706048871
    },
    {
        "content": "<p><code>[DecidablePred P]</code> means (reducibly) <code>[∀ x, Decidable (P x)]</code>, so you don't need <code>x</code>-specific instances for <code>Decidable (P x)</code>.</p>",
        "id": 417540388,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706048920
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/270676-lean4/topic/Decidable.20List.2Econs.3F/near/417540280\">said</a>:</p>\n<blockquote>\n<p>In which sense \"import\"?</p>\n</blockquote>\n<p>Never mind, I see it now.</p>",
        "id": 417540732,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1706049091
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/Decidable.20List.2Econs.3F/near/417539507\">said</a>:</p>\n<blockquote>\n<p>By the way, because <code>inferInstance</code> works on its own, you shouldn't need to write this instance</p>\n</blockquote>\n<p>Perhaps we shouldn't even have to write <code>:= inferInstance</code> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> at all</p>",
        "id": 417541329,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1706049374
    },
    {
        "content": "<p>Do you want to show us your example where you need it?</p>",
        "id": 417542849,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1706050212
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/Decidable.20List.2Econs.3F/near/417542849\">said</a>:</p>\n<blockquote>\n<p>Do you want to show us your example where you need it?</p>\n</blockquote>\n<p>It's for an implementation of recursive backtracking in Lean. I can already use that method to count the number of squarefree words of a given length, but I wanted to generalize it to arbitrary decidable properties <code>P</code>.  I can share shortly...</p>",
        "id": 417550867,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1706054577
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/Decidable.20List.2Econs.3F/near/417542849\">said</a>:</p>\n<blockquote>\n<p>Do you want to show us your example where you need it?</p>\n</blockquote>\n<p><a href=\"https://github.com/bjoernkjoshanssen/bay/blob/main/Backtracking.lean\">https://github.com/bjoernkjoshanssen/bay/blob/main/Backtracking.lean</a></p>",
        "id": 417558936,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1706059380
    },
    {
        "content": "<p>Could you put a <code>lakefile.lean</code> and <code>lean-toolchain</code> in that repository so that we can run the code in it?</p>",
        "id": 417559181,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706059569
    },
    {
        "content": "<p>Otherwise we have to guess the mathlib version, which guarantees that it won't work in future</p>",
        "id": 417559223,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706059616
    },
    {
        "content": "<p>I was able to paste it into the web editor and it worked ok</p>",
        "id": 417559369,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706059708
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/Decidable.20List.2Econs.3F/near/417539507\">said</a>:</p>\n<blockquote>\n<p>By the way, because <code>inferInstance</code> works on its own, you shouldn't need to write this instance</p>\n</blockquote>\n<p>Kyle is correct; you can simply delete both <code>instance</code>s and it keeps working</p>",
        "id": 417559393,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706059728
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/Decidable.20List.2Econs.3F/near/417559393\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/Decidable.20List.2Econs.3F/near/417539507\">said</a>:</p>\n<blockquote>\n<p>By the way, because <code>inferInstance</code> works on its own, you shouldn't need to write this instance</p>\n</blockquote>\n<p>Kyle is correct; you can simply delete both <code>instance</code>s and it keeps working</p>\n</blockquote>\n<p>Oops, that's because I shared a working version without the generalization. But basically I want to replace <code>squarefree</code> by an arbitrary (monotone, decidable) predicate on <code>List (Fin 2)</code>.</p>",
        "id": 417560072,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1706060194
    },
    {
        "content": "<p>I think the remark still remains</p>",
        "id": 417560233,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706060289
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/Decidable.20List.2Econs.3F/near/417560233\">said</a>:</p>\n<blockquote>\n<p>I think the remark still remains</p>\n</blockquote>\n<p>I have fixed the code now so it works for an arbitrary \"monotone\" predicate and updated the github. And indeed, those two instances could be safely deleted.</p>",
        "id": 417571262,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1706068536
    },
    {
        "content": "<p>The main point is illustrated in line 85: <code>example : count_those_with_suffix SQF myvec = 1 := by decide</code><br>\nSquarefree binary words form a somewhat trivial example but it is easy to adapt to cover any \"forbidden pattern\", for instance cubefree words. Anyway, thanks for the help!</p>",
        "id": 417571733,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1706068824
    }
]