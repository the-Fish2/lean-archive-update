[
    {
        "content": "<p>(v4.6.0-rc1)<br>\nwhy would these functions expect types?:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Init.Data.List</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Data.List</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Defs</span>\n<span class=\"kn\">open</span> <span class=\"n\">Classical</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">And</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Or</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Not</span> <span class=\"o\">:</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">normalizable</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">toProp</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pred</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">And</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span>  <span class=\"n\">toProp</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">toProp</span> <span class=\"n\">b</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Or</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">toProp</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">toProp</span> <span class=\"n\">b</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Not</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">toProp</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"c1\">--no, these functions absolutely should not be expecting types</span>\n<span class=\"kd\">def</span> <span class=\"n\">subnormalize</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Or</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[[</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">n</span><span class=\"o\">],[</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">n</span><span class=\"o\">],[</span><span class=\"n\">Not</span> <span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">Not</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">Not</span> <span class=\"n\">n</span><span class=\"o\">]]</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">List.append</span> <span class=\"o\">(</span><span class=\"n\">subnormalize</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">subnormalize</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"n\">And</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[[</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">n</span><span class=\"o\">],[</span><span class=\"n\">Not</span> <span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">Not</span> <span class=\"n\">n</span><span class=\"o\">],[</span><span class=\"n\">Not</span> <span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">Not</span> <span class=\"n\">n</span><span class=\"o\">]]</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">List.append</span> <span class=\"o\">(</span><span class=\"n\">subnormalize</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">subnormalize</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Not</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[[</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"n\">Not</span> <span class=\"n\">i</span><span class=\"o\">],[</span><span class=\"n\">Not</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">]]</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">subnormalize</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[[[</span><span class=\"n\">n</span><span class=\"o\">],[</span><span class=\"n\">Not</span> <span class=\"n\">n</span><span class=\"o\">]]]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">normalize</span> <span class=\"o\">:</span>  <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">o</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"o\">[[</span><span class=\"n\">o</span><span class=\"o\">]]</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">subnormalize</span> <span class=\"n\">o</span><span class=\"o\">)</span> <span class=\"c1\">--first error here</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">nStrip</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Not</span> <span class=\"o\">(</span><span class=\"n\">Not</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nStrip</span> <span class=\"n\">i</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Not</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">false</span><span class=\"o\">,</span><span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span><span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">true</span><span class=\"o\">,</span><span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">normalizel</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">normalize</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">y.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">z</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nStrip</span> <span class=\"n\">z</span><span class=\"o\">)))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">wToProp</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">w.fst</span> <span class=\"k\">then</span> <span class=\"n\">toProp</span> <span class=\"n\">w.snd</span> <span class=\"k\">else</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">toProp</span> <span class=\"n\">w.snd</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sToProp</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">s.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">wToProp</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">foldr</span> <span class=\"bp\">∧</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">gToProp</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">g.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sToProp</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">foldr</span> <span class=\"bp\">∨</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">nToProp</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">))))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">n.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">gToProp</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">foldr</span> <span class=\"bp\">∧</span> <span class=\"n\">true</span>\n</code></pre></div>",
        "id": 420838007,
        "sender_full_name": "Jared green",
        "timestamp": 1707604548
    },
    {
        "content": "<p>If I look at the output of <code>#check subnormalize</code>, it's first explicit parameter is <code>(α : Type)</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">subnormalize</span> <span class=\"c1\">-- normalizable.subnormalize (α : Type) {pred : α → Prop} (n : normalizable α pred) : List (List (List (normalizable α pred)))</span>\n</code></pre></div>\n<p>This comes from <code>variable (α : Type)</code> above</p>",
        "id": 420838259,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1707604798
    },
    {
        "content": "<p>what can be done about it?</p>",
        "id": 420838343,
        "sender_full_name": "Jared green",
        "timestamp": 1707604876
    },
    {
        "content": "<p>If you want to leave <code>α</code> implicit and have it be inferred, you can declare the parameter with curly braces instead of parentheses:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Init.Data.List</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Data.List</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Defs</span>\n<span class=\"kn\">open</span> <span class=\"n\">Classical</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"c1\">-- &lt; changed</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">And</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Or</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Not</span> <span class=\"o\">:</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">normalizable</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">toProp</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pred</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">And</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span>  <span class=\"n\">toProp</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">toProp</span> <span class=\"n\">b</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Or</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">toProp</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">toProp</span> <span class=\"n\">b</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Not</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">toProp</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">subnormalize</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Or</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[[</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">n</span><span class=\"o\">],[</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">n</span><span class=\"o\">],[</span><span class=\"n\">Not</span> <span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">Not</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">Not</span> <span class=\"n\">n</span><span class=\"o\">]]</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">List.append</span> <span class=\"o\">(</span><span class=\"n\">subnormalize</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">subnormalize</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"n\">And</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[[</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">n</span><span class=\"o\">],[</span><span class=\"n\">Not</span> <span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">Not</span> <span class=\"n\">n</span><span class=\"o\">],[</span><span class=\"n\">Not</span> <span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">Not</span> <span class=\"n\">n</span><span class=\"o\">]]</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">List.append</span> <span class=\"o\">(</span><span class=\"n\">subnormalize</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">subnormalize</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Not</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[[</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"n\">Not</span> <span class=\"n\">i</span><span class=\"o\">],[</span><span class=\"n\">Not</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">]]</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">subnormalize</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[[[</span><span class=\"n\">n</span><span class=\"o\">],[</span><span class=\"n\">Not</span> <span class=\"n\">n</span><span class=\"o\">]]]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">normalize</span> <span class=\"o\">:</span>  <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">o</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"o\">[[</span><span class=\"n\">o</span><span class=\"o\">]]</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">subnormalize</span> <span class=\"n\">o</span><span class=\"o\">)</span> <span class=\"c1\">--no error!</span>\n</code></pre></div>",
        "id": 420838383,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1707604924
    }
]