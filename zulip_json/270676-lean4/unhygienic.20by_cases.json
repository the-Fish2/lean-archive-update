[
    {
        "content": "<p>I would like to use <code>by_cases</code> in combination to <code>tactic.hygienic false</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">tactic.hygienic</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">A</span>\n  <span class=\"bp\">·</span> <span class=\"n\">left</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"c1\">-- fails</span>\n  <span class=\"bp\">.</span> <span class=\"n\">right</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">A</span>\n  <span class=\"bp\">·</span> <span class=\"n\">left</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h_1</span> <span class=\"c1\">-- fails</span>\n  <span class=\"bp\">.</span> <span class=\"n\">right</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h_1</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>\n<p>The tactic is implemented (now in core):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">by_cases</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>It seems to me that the right thing to use would be <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.mkFreshBinderNameForTactic#doc\">docs#Lean.Meta.mkFreshBinderNameForTactic</a> but a macro rule is in <code>MacroM</code>, so I think it does not have access to <code>CoreM</code>. I don't have a perfect overview of all the monads, so is there an easy way to modify <code>by_cases</code> to respect the hygienic option?</p>",
        "id": 432667459,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1712829100
    },
    {
        "content": "<p>cc: <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span></p>",
        "id": 432668058,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712829261
    },
    {
        "content": "<p>One (I) would think that <code>set_option hygiene false</code> should help here but it doesn't. In any case, it seems unfortunate that we have these two similar but unconnected options.</p>",
        "id": 433281540,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1713185155
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/unhygienic.20by_cases/near/433281540\">said</a>:</p>\n<blockquote>\n<p>One (I) would think that <code>set_option hygiene false</code> should help here but it doesn't. In any case, it seems unfortunate that we have these two similar but unconnected options.</p>\n</blockquote>\n<p>Would it be reasonable to have <code>by_cases</code>to be an (tactic) elab instead of a macro? Like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Init.ByCases</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean.Elab.Tactic.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean.Meta.Tactic.Intro</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">by_cases'</span><span class=\"o\">)</span> <span class=\"s2\">\"by_cases' \"</span> <span class=\"o\">(</span><span class=\"n\">atomic</span><span class=\"o\">(</span><span class=\"n\">ident</span> <span class=\"s2\">\" : \"</span><span class=\"o\">))</span><span class=\"bp\">?</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">tactic</span> <span class=\"n\">by_cases'</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">evalByCases</span> <span class=\"o\">:</span> <span class=\"n\">Tactic</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshBinderNameForTactic</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"n\">stx</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">getArgs.getD</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"bp\">`</span><span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">getId</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">term</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">mkIdent</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">term</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">stx</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]⟩</span>\n  <span class=\"n\">evalTactic</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"kn\">open</span> <span class=\"n\">Classical</span> <span class=\"k\">in</span> <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">dite</span> <span class=\"bp\">$</span><span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">pos</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">neg</span><span class=\"o\">))))</span><span class=\"c1\">-- if $h' : $e then ?pos else ?neg))</span>\n\n\n<span class=\"c1\">-- Testing:</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">tactic.hygienic</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_cases'</span> <span class=\"n\">A</span>\n  <span class=\"bp\">·</span> <span class=\"n\">left</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"c1\">-- works</span>\n  <span class=\"bp\">.</span> <span class=\"n\">right</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_cases'</span> <span class=\"n\">A</span>\n  <span class=\"bp\">·</span> <span class=\"n\">left</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h_1</span> <span class=\"c1\">-- works</span>\n  <span class=\"bp\">.</span> <span class=\"n\">right</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h_1</span> <span class=\"c1\">-- works</span>\n</code></pre></div>\n<p>(now I'm not particularly good at meta-coding, so the details feel a bit hacked, but conceptually...)</p>",
        "id": 433325782,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1713195944
    },
    {
        "content": "<p>Sure, that works, but we should still look into why <code>hygiene</code> doesn't</p>",
        "id": 433327871,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1713196520
    },
    {
        "content": "<p>Sorry, I don't know anything about the <code>hygiene</code> option.</p>\n<p>If I read the chapter <a href=\"https://leanprover-community.github.io/lean4-metaprogramming-book/md/main/06_macros.html#hygiene-issues-and-how-to-solve-them\">\"hygiene issues and how to solve them\"</a> in the meta-programming book and look at how there is just a hard-coded <code>h</code> in the <code>by_cases</code>-marco (<a href=\"https://github.com/leanprover/lean4/blob/23aacdeac069475e3f40110e87859dad5a22074c/src/Init/ByCases.lean#L17\">source code</a>), I'm not sure I understand how the two are related.</p>\n<p>The former <code>hygiene</code> seems to talk about not accidentally using a wrong <code>h</code> when elaborating (like the example in the book with <code>x=42</code> vs <code>x=10</code>, but that's not an issue here. The issue is only that the user-facing names are not as expected.</p>\n<p>So according to the book, one should hard-code <code>$(mkIdent `h)</code> instead of just <code>h</code> but that would make the tactic always unhygienic (in the <code>tactic.hygienic</code> sense).</p>",
        "id": 433330743,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1713197245
    },
    {
        "content": "<p>(Ah or maybe you're referring to the following quote from the docstring of the <code>hygienic</code> option:</p>\n<blockquote>\n<p>Note that quotations/notations already defined are unaffected.</p>\n</blockquote>\n<p>Let me try that!)</p>",
        "id": 433331550,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1713197447
    },
    {
        "content": "<p>Indeed, adding <code>set_option hygienic false</code> in <code>Init.ByCases</code> before the syntax/macro definition does do what you expect it to do, i.e. <code>h : A</code> is now accessible after <code>by_cases A</code></p>",
        "id": 433332153,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1713197590
    },
    {
        "content": "<p>Ah, I didn't even remember that. So <code>hygiene</code> is a compile-time option while <code>tactic.hygienic</code> is run-time...</p>",
        "id": 433339362,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1713199513
    }
]