[
    {
        "content": "<p>It seems completely infeasible to have <code>precompileModules := true</code> downstream of mathlib. A <code>lake build</code> with prebuilt oleans present takes at least 25 minutes on my 12 core machine, and reloading file dependencies takes a minute or two (most of that time consumed by <code>ld</code>, from what I can tell). Which is unfortunate, because I want to write lazy proofs that just call slow automation tactics from mathlib.</p>\n<p>Is there any way to specify a subset of modules to precompile? Or any other way to make it feasible to use this feature downstream of mathlib?</p>\n<p>EDIT: clarified that lake build takes a while even with the prebuilt oleans</p>",
        "id": 411466234,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1704508067
    },
    {
        "content": "<p>\"Downstream of mathlib\" is not very precise, what size of dependency closure are we talking about here?</p>",
        "id": 411492332,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1704533812
    },
    {
        "content": "<p>I think roughly half of mathlib? (is there a quick way to check?) I import <code>Mathlib.Tactic</code> somewhere which inflates the closure quite a bit.</p>",
        "id": 411562628,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1704595992
    },
    {
        "content": "<p><code>import Mathlib.Tactic.Common</code> might work better?</p>",
        "id": 411567346,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1704600938
    },
    {
        "content": "<p>That appears to only cut out a couple hundred files. Let me figure out exactly which tactics I need.</p>",
        "id": 411574660,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1704609108
    },
    {
        "content": "<p>Ok, I only import linarith, ring, and fincases.</p>",
        "id": 411575115,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1704609635
    },
    {
        "content": "<p>(With dependencies, that gives 1400 ish modules)</p>",
        "id": 411575124,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1704609661
    },
    {
        "content": "<p>Unfortunately the <code>linarith</code> -&gt; <code>ring</code> -&gt; <code>norm_num</code> chain of tactics picks up an absurd number of side dependencies...</p>",
        "id": 411576580,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1704611182
    },
    {
        "content": "<p>And reducing the import closure is really only a bandaid on a feature that doesn't scale well...</p>",
        "id": 411576638,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1704611259
    },
    {
        "content": "<p>Note <a href=\"https://github.com/leanprover-community/mathlib4/pull/9411\">#9411</a> should help with that</p>",
        "id": 411582189,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704616557
    },
    {
        "content": "<p>It doesn't really reduce the number of dependencies itself, but it makes it much easier to do so. And that's not just a bandaid. I need to reduce those imports for a mathematical reason: I need the map from <code>ℚ≥0</code> to any <code>DivisionSemiring</code>.</p>",
        "id": 411582295,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704616642
    }
]