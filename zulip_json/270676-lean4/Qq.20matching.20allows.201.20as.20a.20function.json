[
    {
        "content": "<p>I seem to have found an unsoundness in <code>Qq</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">TermElabM</span> <span class=\"n\">_</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"o\">[</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"o\">]</span> <span class=\"bp\">←</span> <span class=\"n\">Meta.mkFreshLevelMVars</span> <span class=\"mi\">3</span> <span class=\"bp\">|</span> <span class=\"n\">unreachable</span><span class=\"bp\">!</span>\n    <span class=\"k\">let</span> <span class=\"n\">α</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVarQ</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">β</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVarQ</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">γ</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVarQ</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span>\n    <span class=\"n\">elabTermEnsuringTypeQ</span> <span class=\"o\">(</span><span class=\"bp\">←`</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">q</span><span class=\"o\">(((</span><span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"bp\">$</span><span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"bp\">$</span><span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>happily prints <code>Lean.Expr.mvar (Lean.Name.mkNum `_uniq 336)</code>.</p>",
        "id": 431901680,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1712566786
    },
    {
        "content": "<p>By comparison, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">TermElabM</span> <span class=\"n\">_</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n    <span class=\"n\">elabTermEnsuringType</span> <span class=\"o\">(</span><span class=\"bp\">←`</span><span class=\"o\">(</span><span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"n\">elabType</span> <span class=\"o\">(</span><span class=\"bp\">←`</span><span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>properly throws <code>type mismatch</code>, and while</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">TermElabM</span> <span class=\"n\">_</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n    <span class=\"n\">elabTermEnsuringType</span> <span class=\"o\">(</span><span class=\"bp\">←`</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"n\">elabType</span> <span class=\"o\">(</span><span class=\"bp\">←`</span><span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>doesn't panic, I do get <code>&lt;CoreM&gt;:0:0: error: failed to synthesize instance  OfNat (List ?m.3) 1</code>.</p>",
        "id": 431901999,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1712566836
    },
    {
        "content": "<p>Your code doesn't work for me due to missing imports; can you make it a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 431902768,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712566969
    },
    {
        "content": "<p>Sure.</p>",
        "id": 432077010,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1712614998
    },
    {
        "content": "<p>... Hmm, that's fascinating</p>",
        "id": 432077016,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1712615002
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Meta</span>\n<span class=\"kn\">import</span> <span class=\"n\">Qq</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.PPWithUniv</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span> <span class=\"c1\">-- Comment out this import to make the problem go away.</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Util.Superscript</span>\n\n  <span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span> <span class=\"n\">Qq</span> <span class=\"n\">Expr</span>\n\n  <span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">TermElabM</span> <span class=\"n\">_</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"o\">[</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"o\">]</span> <span class=\"bp\">←</span> <span class=\"n\">Meta.mkFreshLevelMVars</span> <span class=\"mi\">3</span> <span class=\"bp\">|</span> <span class=\"n\">unreachable</span><span class=\"bp\">!</span>\n    <span class=\"k\">let</span> <span class=\"n\">α</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVarQ</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">β</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVarQ</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">γ</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVarQ</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span>\n    <span class=\"n\">elabTermEnsuringTypeQ</span> <span class=\"o\">(</span><span class=\"bp\">←`</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">q</span><span class=\"o\">(((</span><span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"bp\">$</span><span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"bp\">$</span><span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 432077105,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1712615043
    },
    {
        "content": "<p>Probably should not default to importing all of <code>Mathlib.Tactic</code> <em>anyway</em> but it's convenient in my sandbox file.</p>",
        "id": 432077158,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1712615079
    },
    {
        "content": "<p>Anyway, something in <code>Mathlib.Tactic</code> (that isn't transitively imported by <code>PPWithUniv</code>) is making Qq unsound, I think. (Note that when the non-panic <code>CoreM</code> error throws, the corresponding output has a <code>sorryAx</code> in it, but doesn't when <code>Mathlib.Tactic</code> is imported.)</p>",
        "id": 432077341,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1712615189
    },
    {
        "content": "<p>Thanks for the mwe! But what's the problem? That currently logs:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Lean.Expr.app</span>\n  <span class=\"o\">(</span><span class=\"n\">Lean.Expr.app</span>\n    <span class=\"o\">(</span><span class=\"n\">Lean.Expr.app</span>\n      <span class=\"o\">(</span><span class=\"n\">Lean.Expr.const</span>\n        <span class=\"bp\">`</span><span class=\"n\">OfNat.ofNat</span>\n        <span class=\"o\">[</span><span class=\"n\">Lean.Level.max</span>\n           <span class=\"o\">(</span><span class=\"n\">Lean.Level.max</span> <span class=\"o\">(</span><span class=\"n\">Lean.Level.mvar</span> <span class=\"o\">(</span><span class=\"n\">Lean.Name.mkNum</span> <span class=\"bp\">`</span><span class=\"n\">_uniq</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Lean.Level.mvar</span> <span class=\"o\">(</span><span class=\"n\">Lean.Name.mkNum</span> <span class=\"bp\">`</span><span class=\"n\">_uniq</span> <span class=\"mi\">2</span><span class=\"o\">)))</span>\n           <span class=\"o\">(</span><span class=\"n\">Lean.Level.mvar</span> <span class=\"o\">(</span><span class=\"n\">Lean.Name.mkNum</span> <span class=\"bp\">`</span><span class=\"n\">_uniq</span> <span class=\"mi\">3</span><span class=\"o\">))])</span>\n      <span class=\"o\">(</span><span class=\"n\">Lean.Expr.mvar</span> <span class=\"o\">(</span><span class=\"n\">Lean.Name.mkNum</span> <span class=\"bp\">`</span><span class=\"n\">_uniq</span> <span class=\"mi\">8</span><span class=\"o\">)))</span>\n    <span class=\"o\">(</span><span class=\"n\">Lean.Expr.lit</span> <span class=\"o\">(</span><span class=\"n\">Lean.Literal.natVal</span> <span class=\"mi\">1</span><span class=\"o\">)))</span>\n  <span class=\"o\">(</span><span class=\"n\">Lean.Expr.mvar</span> <span class=\"o\">(</span><span class=\"n\">Lean.Name.mkNum</span> <span class=\"bp\">`</span><span class=\"n\">_uniq</span> <span class=\"mi\">11</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>What do you expect it to log?</p>",
        "id": 432077385,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712615214
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">&lt;</span><span class=\"n\">CoreM</span><span class=\"bp\">&gt;</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">OfNat</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.4</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.5</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.6</span><span class=\"o\">)</span> <span class=\"mi\">1</span>\n\n<span class=\"n\">Lean.Expr.app</span>\n  <span class=\"o\">(</span><span class=\"n\">Lean.Expr.app</span>\n    <span class=\"o\">(</span><span class=\"n\">Lean.Expr.const</span>\n      <span class=\"bp\">`</span><span class=\"n\">sorryAx</span>\n      <span class=\"o\">[</span><span class=\"n\">Lean.Level.max</span>\n         <span class=\"o\">(</span><span class=\"n\">Lean.Level.max</span>\n           <span class=\"o\">(</span><span class=\"n\">Lean.Level.succ</span> <span class=\"o\">(</span><span class=\"n\">Lean.Level.mvar</span> <span class=\"o\">(</span><span class=\"n\">Lean.Name.mkNum</span> <span class=\"bp\">`</span><span class=\"n\">_uniq</span> <span class=\"mi\">1</span><span class=\"o\">)))</span>\n           <span class=\"o\">(</span><span class=\"n\">Lean.Level.succ</span> <span class=\"o\">(</span><span class=\"n\">Lean.Level.mvar</span> <span class=\"o\">(</span><span class=\"n\">Lean.Name.mkNum</span> <span class=\"bp\">`</span><span class=\"n\">_uniq</span> <span class=\"mi\">2</span><span class=\"o\">))))</span>\n         <span class=\"o\">(</span><span class=\"n\">Lean.Level.succ</span> <span class=\"o\">(</span><span class=\"n\">Lean.Level.mvar</span> <span class=\"o\">(</span><span class=\"n\">Lean.Name.mkNum</span> <span class=\"bp\">`</span><span class=\"n\">_uniq</span> <span class=\"mi\">3</span><span class=\"o\">)))])</span>\n    <span class=\"o\">(</span><span class=\"n\">Lean.Expr.forallE</span>\n      <span class=\"n\">Lean.Name.anonymous</span>\n      <span class=\"o\">(</span><span class=\"n\">Lean.Expr.mvar</span> <span class=\"o\">(</span><span class=\"n\">Lean.Name.mkNum</span> <span class=\"bp\">`</span><span class=\"n\">_uniq</span> <span class=\"mi\">4</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"n\">Lean.Expr.forallE</span>\n        <span class=\"n\">Lean.Name.anonymous</span>\n        <span class=\"o\">(</span><span class=\"n\">Lean.Expr.mvar</span> <span class=\"o\">(</span><span class=\"n\">Lean.Name.mkNum</span> <span class=\"bp\">`</span><span class=\"n\">_uniq</span> <span class=\"mi\">5</span><span class=\"o\">))</span>\n        <span class=\"o\">(</span><span class=\"n\">Lean.Expr.mvar</span> <span class=\"o\">(</span><span class=\"n\">Lean.Name.mkNum</span> <span class=\"bp\">`</span><span class=\"n\">_uniq</span> <span class=\"mi\">6</span><span class=\"o\">))</span>\n        <span class=\"o\">(</span><span class=\"n\">Lean.BinderInfo.default</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"n\">Lean.BinderInfo.default</span><span class=\"o\">)))</span>\n  <span class=\"o\">(</span><span class=\"n\">Lean.Expr.const</span> <span class=\"bp\">`</span><span class=\"n\">Bool.true</span> <span class=\"o\">[])</span>\n</code></pre></div>\n<p>is the \"correct\" answer, I feel (because 1 is not a function that takes two parameters)</p>",
        "id": 432077471,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1712615263
    },
    {
        "content": "<p>But <code>1</code> <em>is</em> a function that takes two parameters, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Pi.instOne#doc\">docs#Pi.instOne</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Group.Pi.Basic</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 432077596,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712615310
    },
    {
        "content": "<p>.... Oh.  &gt;.&gt;;</p>",
        "id": 432077616,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1712615319
    },
    {
        "content": "<p>Fair enough, then!</p>",
        "id": 432077677,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1712615352
    },
    {
        "content": "<p>I guess it's kind of interesting that the presence of the instance makes your example work even though the generated term doesn't actually contain the instance</p>",
        "id": 432077919,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712615475
    },
    {
        "content": "<p>14 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/Qq.20matching.20on.20-.3E.20error.3A.20cannot.20quote.20level.20mvar\">#lean4 &gt; Qq matching on -&gt; error: cannot quote level mvar</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 432078203,
        "sender_full_name": "Notification Bot",
        "timestamp": 1712615644
    },
    {
        "content": "<p>But I think this is just because <code>elabTermEnsuringType</code> is super permissive</p>",
        "id": 432078249,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712615683
    }
]