[
    {
        "content": "<p>I'm trying to encode refinement types through evidence, like NonEmptyString; I've found an older conversation with an example, but <code>simp</code> is not solving the goal.</p>\n<p><a href=\"https://leanprover-community.github.io/archive/stream/270676-lean4/topic/newtype.html\">https://leanprover-community.github.io/archive/stream/270676-lean4/topic/newtype.html</a></p>\n<p>The closest result I've reached is this one.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">structure</span><span class=\"w\"> </span><span class=\"n\">NonEmptyString</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">String</span>\n<span class=\"w\">  </span><span class=\"n\">ev</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"bp\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">deriving</span><span class=\"w\"> </span><span class=\"n\">Repr</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">mkNonEmptyString</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ev</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"bp\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">NonEmptyString</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">ev</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">ev</span><span class=\"w\"> </span><span class=\"o\">}</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">eg</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">NonEmptyString</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"n\">mkNonEmptyString</span><span class=\"w\"> </span><span class=\"s2\">\"hello\"</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">decide</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Is it possible to pin a tactic into <code>mkNonEmptyString</code> and avoid applying it manually in the callers?</p>",
        "id": 441339681,
        "sender_full_name": "eduardo",
        "timestamp": 1717025258
    },
    {
        "content": "<p>Indeed it is.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">mkNonEmptyString</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ev</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"bp\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">decide</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">NonEmptyString</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">ev</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">ev</span><span class=\"w\"> </span><span class=\"o\">}</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">eg</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">NonEmptyString</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"n\">mkNonEmptyString</span><span class=\"w\"> </span><span class=\"s2\">\"hello\"</span>\n</code></pre></div>",
        "id": 441340155,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1717025414
    },
    {
        "content": "<p>Thank you, Chris!</p>",
        "id": 441341055,
        "sender_full_name": "eduardo",
        "timestamp": 1717025730
    },
    {
        "content": "<p>Can I take this opportunity to ask you what the semantic difference is between defining the evidence in the signature instead of within the function? I saw some examples, but they don't work (at least for this tactic).</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">mkNonEmptyString</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">NonEmptyString</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\"> </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">ev</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"bp\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">decide</span>\n<span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">ev</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">ev</span><span class=\"w\"> </span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 441341124,
        "sender_full_name": "eduardo",
        "timestamp": 1717025757
    },
    {
        "content": "<p><code>def mkNonEmptyString (s : String) : NonEmptyString :=</code> amounts to claiming that all strings are non-empty, which is obviously false!</p>",
        "id": 441341389,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717025851
    },
    {
        "content": "<p><code>(ev : s.length &gt; 0 := by decide)</code> is a hint to the caller; it's a regular argument, but if the caller omits it as<code>mkNonEmptyString \"hello\"</code> then it is elaborated as <code>mkNonEmptyString \"hello\" (by decide)</code></p>",
        "id": 441341576,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1717025906
    },
    {
        "content": "<p>Thank you, Eric!</p>",
        "id": 441341885,
        "sender_full_name": "eduardo",
        "timestamp": 1717026034
    },
    {
        "content": "<p>If it helps, that syntax <code>(a : A := ..)</code> is generic syntax for an optional argument, it just happens to work with proofs (and proofs via tactic):</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">b</span>\n\n<span class=\"bp\">#</span><span class=\"n\">eval</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\">     </span><span class=\"c1\">-- 10</span>\n<span class=\"bp\">#</span><span class=\"n\">eval</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\">   </span><span class=\"c1\">-- 15</span>\n</code></pre></div>",
        "id": 441341911,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1717026044
    },
    {
        "content": "<p>You can also provide a default when defining <code>structure</code>, and you don't need to define an extra <code>mkNoneEmptyString</code>, since <code>NonEmptyString.mk</code> already exists. With this your example becomes:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">structure</span><span class=\"w\"> </span><span class=\"n\">NonEmptyString</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">String</span>\n<span class=\"w\">  </span><span class=\"n\">ev</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"bp\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">decide</span>\n<span class=\"n\">deriving</span><span class=\"w\"> </span><span class=\"n\">Repr</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">eg</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">NonEmptyString</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"n\">NonEmptyString</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"w\"> </span><span class=\"s2\">\"hello\"</span>\n</code></pre></div>",
        "id": 441547299,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1717100202
    },
    {
        "content": "<p>Hmm, it seems <a href=\"https://leanprover-community.github.io/archive/stream/270676-lean4/topic/newtype.html\">https://leanprover-community.github.io/archive/stream/270676-lean4/topic/newtype.html</a> is correct except for the tactic; it wasn't clear to me if we were allowed to have default tactics at the structure declaration level. The compiler generates the <code>mk</code> I was looking for. Thank you, Marcus!</p>",
        "id": 441569551,
        "sender_full_name": "eduardo",
        "timestamp": 1717107176
    }
]