[
    {
        "content": "<p>Hi all,</p>\n<p>While defining Church booleans, I ran into an issue where it doesn't seem possible to specify a non-uniform implicit type argument.</p>\n<p>Here's my code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">def</span> <span class=\"n\">Cbool</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">T</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">Cbool</span>            <span class=\"c1\">-- Cbool.{u} : Sort (imax (u + 1) u)</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">Cbool</span> <span class=\"n\">Nat</span>       <span class=\"c1\">-- error: function expected</span>\n<span class=\"k\">#check</span> <span class=\"n\">Cbool</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"c1\">-- error: invalid argument name 'T'</span>\n\n<span class=\"c1\">-- How to unify T✝ with U?</span>\n<span class=\"kd\">def</span> <span class=\"n\">tt</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Cbool</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">_y</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>Is there a way to explicitly specify the type <code>T</code> for <code>Cbool</code> to be <code>U</code>?</p>",
        "id": 430806110,
        "sender_full_name": "Niklas Halonen",
        "timestamp": 1712068986
    },
    {
        "content": "<p>if you don't mind changing the definition a tad, this works:<br>\n<code>def Cbool {T : Sort u} : Sort _ := T → T → T</code></p>",
        "id": 430812165,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1712070522
    },
    {
        "content": "<p>or, at least, i think it does?</p>",
        "id": 430812279,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1712070555
    },
    {
        "content": "<p>i might not completely understand your intention here</p>",
        "id": 430812325,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1712070568
    },
    {
        "content": "<p><del>reading your message again, i believe it might also be the case that you want <code>(T → T) → T</code> rather than <code>T → T → T</code>?</del></p>",
        "id": 430812732,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1712070681
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"684366\">Edward van de Meent</span> <a href=\"#narrow/stream/270676-lean4/topic/Implicit.20type.20argument.20impossible.20to.20access.3F/near/430812165\">said</a>:</p>\n<blockquote>\n<p>if you don't mind changing the definition a tad, this works:<br>\n<code>def Cbool {T : Sort u} : Sort _ := T → T → T</code></p>\n</blockquote>\n<p>Thanks for responding; unfortunately that makes handling the type parameter <code>T</code> very inconvenient and ugly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Cbool</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">T</span>\n<span class=\"kd\">def</span> <span class=\"n\">ff</span> <span class=\"o\">:</span> <span class=\"n\">Cbool</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">y</span>\n\n<span class=\"c1\">-- This works and is pretty</span>\n<span class=\"kd\">def</span> <span class=\"n\">Cbool.and</span> <span class=\"o\">:</span> <span class=\"n\">Cbool</span> <span class=\"bp\">→</span> <span class=\"n\">Cbool</span> <span class=\"bp\">→</span> <span class=\"n\">Cbool</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">b1</span> <span class=\"n\">b2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b1</span> <span class=\"n\">b2</span> <span class=\"n\">ff</span>\n<span class=\"c1\">-- Method call (almost) works</span>\n<span class=\"k\">#eval</span> <span class=\"n\">Cbool.to_bool</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">ff.and</span> <span class=\"n\">ff</span> <span class=\"c1\">-- false</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">ff.and</span> <span class=\"n\">ff</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_bool</span> <span class=\"c1\">-- error: invalid field notation</span>\n\n<span class=\"c1\">-- However, moving the type parameter to be uniform</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Cbool'</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">T</span>\n<span class=\"kd\">def</span> <span class=\"n\">ff'</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">Cbool'</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">_x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">y</span>\n\n<span class=\"c1\">-- This doesn't work</span>\n<span class=\"kd\">def</span> <span class=\"n\">Cbool'.and</span> <span class=\"o\">:</span> <span class=\"n\">Cbool'</span> <span class=\"bp\">→</span> <span class=\"n\">Cbool'</span> <span class=\"bp\">→</span> <span class=\"n\">Cbool'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">b1</span> <span class=\"n\">b2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b1</span> <span class=\"n\">b2</span> <span class=\"n\">ff'</span>\n\n<span class=\"c1\">-- This works but is too ugly</span>\n<span class=\"kd\">def</span> <span class=\"n\">Cbool'.and'</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">Cbool'</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Cbool'</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Cbool'</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Cbool'</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">b1</span> <span class=\"n\">b2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b1</span> <span class=\"n\">b2</span> <span class=\"n\">ff'</span>\n\n<span class=\"c1\">-- Also methods don't work for some reason</span>\n<span class=\"k\">#eval</span> <span class=\"n\">Cbool'.to_bool</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">ff'.and'</span> <span class=\"n\">ff'</span>\n</code></pre></div>\n<p>My current solution is to define the following <code>Cbool</code> hierarchy, which allows me to refer to the underlying type when necessary:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">CboolTTT</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">_t</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">_t'</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">T</span>\n<span class=\"kd\">def</span> <span class=\"n\">CboolTT</span>  <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">}</span>            <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">t'</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">@</span><span class=\"n\">CboolTTT</span> <span class=\"n\">T</span> <span class=\"n\">t</span> <span class=\"n\">t'</span>\n<span class=\"kd\">def</span> <span class=\"n\">CboolT</span>   <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span>                    <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span>  <span class=\"bp\">→</span> <span class=\"bp\">@</span><span class=\"n\">CboolTT</span> <span class=\"n\">T</span> <span class=\"n\">t</span>\n<span class=\"kd\">def</span> <span class=\"n\">Cbool</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span>                                <span class=\"bp\">→</span> <span class=\"bp\">@</span><span class=\"n\">CboolT</span> <span class=\"n\">T</span>\n\n<span class=\"c1\">-- Example for accessing the inner T type</span>\n<span class=\"kd\">def</span> <span class=\"n\">tt</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">CboolT</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">_y</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>If you have better suggestions, please let me know!</p>",
        "id": 430834128,
        "sender_full_name": "Niklas Halonen",
        "timestamp": 1712077000
    },
    {
        "content": "<p>There's a difference between</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Cbool</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">T</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Cbool</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">T</span>\n</code></pre></div>\n<p>It seems like you're wanting to work with the first as if it were the second. Or maybe you want a feature that can specialize a pi type?</p>",
        "id": 430836698,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1712077831
    },
    {
        "content": "<p>Hmm, I think I get it. In the end I went with an explicit parameter <code>def Cbool := (T : Type u) → T → T → T</code> which made everything much easier <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 436468111,
        "sender_full_name": "Niklas Halonen",
        "timestamp": 1714552400
    }
]