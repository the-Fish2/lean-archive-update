[
    {
        "content": "<p>I often write tactic code that looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">induction</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">try</span> <span class=\"n\">aesop</span>\n</code></pre></div>\n<p>If I have a large number of cases, usually aesop can knock a bunch of them out and then I'll manually provide proofs for the hard cases.</p>\n<p>The problem I'm having is that in the remaining cases, the inductive hypothesis is in the context greyed out, and I can't refer to it directly because it has some machine-generated name.</p>\n<p>I'm wondering, is there a way to either  (1) access these unnamed/machine-named variables, or (2) manually give a name to the inductive hypothesis, when I'm using <code>induction</code> in a chain of tactics to try to automate as many cases as possible?</p>",
        "id": 432375841,
        "sender_full_name": "Joey Eremondi",
        "timestamp": 1712713582
    },
    {
        "content": "<p>(1) yes, the <code>rename_i</code> tactic or the <code>next ... =&gt;</code> focusing block (or <code>case ... =&gt;</code> if you want to refer to a case by name). (2) yes, you can use the structured induction tactic, with syntax <code>induction x with | case1 ... =&gt; ... | case2 ... =&gt; ...</code>. You can even write <code>induction x with intros a b; try aesop | case1 .... =&gt; ...</code> to try to knock out cases first. I could dig up references for these later.</p>",
        "id": 432377977,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1712714402
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Aesop</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Foo</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"n\">Foo.a</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">u</span> <span class=\"k\">with</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">try</span> <span class=\"n\">aesop</span><span class=\"bp\">;</span> <span class=\"n\">done</span>\n  <span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">c</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"n\">Foo.a</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">u</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">try</span> <span class=\"n\">aesop</span><span class=\"bp\">;</span> <span class=\"n\">done</span>\n  <span class=\"n\">case</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">case</span> <span class=\"n\">c</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 432378462,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1712714598
    },
    {
        "content": "<p>Ah, that works great, thanks both!</p>",
        "id": 432379955,
        "sender_full_name": "Joey Eremondi",
        "timestamp": 1712715317
    }
]