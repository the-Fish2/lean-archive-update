[
    {
        "content": "<p>Consider this very contrived example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>After the intro tactic, the current goal becomes</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span>\n</code></pre></div>\n<p>Then the tactic <code>apply HAppend.hAppend</code> fails due to this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span>\n  <span class=\"n\">HAppend</span> <span class=\"bp\">?</span><span class=\"n\">α</span> <span class=\"bp\">?</span><span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but curiously, this is fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">apply</span> <span class=\"n\">_</span> <span class=\"bp\">++</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>is there a way to make <code>apply HAppend.hAppend</code> succeed here?</p>",
        "id": 432610150,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1712796289
    },
    {
        "content": "<p>I think <code>apply HAppend.hAppend</code> should succeed and it should generate metavariables for the two type arguments <code>?α ?β</code></p>",
        "id": 432610809,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1712796844
    },
    {
        "content": "<p>I understand this is probably a mwe, but it's usually a bad idea to use tactic mode to generate data terms. This case is very simple so tactic mode probably produces the same term in the end but this is just easier:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">HAppend.hAppend</span>\n</code></pre></div>\n<p>In a proof of a theorem in tactic mode, when the arity of application is known in advance it is often a good idea to use <code>refine</code> instead of <code>apply</code>.</p>",
        "id": 432636243,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1712817111
    },
    {
        "content": "<p>In your example, this also works: <code>apply (HAppend.hAppend)</code>.</p>",
        "id": 432642293,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712820058
    },
    {
        "content": "<p>If you want the two type arguments to appear as goals (and the <code>HAppend instance</code>), then you can use <code>apply @HAppend.hAppend _ _ _ ?_ ?_ ?_</code>.</p>",
        "id": 432642908,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712820330
    },
    {
        "content": "<p>One more:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">apply</span> <span class=\"n\">HAppend.hAppend</span> <span class=\"o\">(</span><span class=\"n\">self</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>As far as I understand, this specifically asks <code>apply</code> to create a goal for <code>self : HAppend α β γ</code> and this is enough of a hint.</p>",
        "id": 432655211,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712825007
    },
    {
        "content": "<p>I am so totally confused by this thread :-) Maybe I shouldn't worry though, maybe this is all an artifact of using tactic mode to make data?</p>",
        "id": 432656128,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1712825300
    },
    {
        "content": "<p>I think this is quite related to <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/term.20vs.20by.20exact.20term\">#mathlib4 &gt; term vs by exact term</a>, since</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span> <span class=\"n\">HAppend.hAppend</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>gives a different error to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">HAppend.hAppend</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 432658723,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712826154
    }
]