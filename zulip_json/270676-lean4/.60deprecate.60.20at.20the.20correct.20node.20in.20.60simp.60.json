[
    {
        "content": "<p>In the example below, the deprecation warning is logged on the <code>simp</code> node, rather than on the identifier that is deprecated:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">deprecated</span><span class=\"kd\">]</span>\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">hi</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">True</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">intro</span>\n\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">True</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"c1\">-- the warning is on `simp`</span>\n<span class=\"w\">  </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">[</span>\n<span class=\"w\">    </span><span class=\"n\">hi</span><span class=\"w\">  </span><span class=\"c1\">-- could the warning be logged at the syntax node of `hi`?</span>\n<span class=\"w\">  </span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Would it be possible to get the deprecation on <code>hi</code>, rather than on <code>simp</code>?</p>",
        "id": 444498632,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718293645
    },
    {
        "content": "<p>Turns out you only need to add <code>withRef arg do</code> here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"c1\">--- a/src/Lean/Elab/Tactic/Simp.lean</span>\n<span class=\"bp\">+++</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Elab</span><span class=\"bp\">/</span><span class=\"n\">Tactic</span><span class=\"bp\">/</span><span class=\"n\">Simp</span><span class=\"bp\">.</span><span class=\"n\">lean</span>\n<span class=\"bp\">@@</span><span class=\"w\"> </span><span class=\"bp\">-</span><span class=\"mi\">204</span><span class=\"o\">,</span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"mi\">204</span><span class=\"o\">,</span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"bp\">@@</span><span class=\"w\"> </span><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">elabSimpArgs</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">stx</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Syntax</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ctx</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Simp</span><span class=\"bp\">.</span><span class=\"n\">Context</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simprocs</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Simp</span><span class=\"bp\">.</span><span class=\"n\">SimprocsAr</span>\n<span class=\"w\">                 </span><span class=\"n\">arg</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">][</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">getKind</span><span class=\"w\"> </span><span class=\"bp\">==</span><span class=\"w\"> </span><span class=\"ss\">``Parser.Tactic.simpPost</span>\n<span class=\"w\">             </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">inv</span><span class=\"w\">  </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">!</span><span class=\"n\">arg</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">isNone</span>\n<span class=\"w\">             </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">term</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]</span>\n<span class=\"bp\">-</span><span class=\"w\">            </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">resolveSimpIdTheorem?</span><span class=\"w\"> </span><span class=\"n\">term</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"bp\">+</span><span class=\"w\">            </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">withRef</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"k\">do</span><span class=\"w\"> </span><span class=\"n\">resolveSimpIdTheorem?</span><span class=\"w\"> </span><span class=\"n\">term</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">             </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">expr</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\">  </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">               </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">mkFreshId</span>\n<span class=\"w\">               </span><span class=\"n\">thms</span><span class=\"w\"> </span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">addDeclToUnfoldOrTheorem</span><span class=\"w\"> </span><span class=\"n\">thms</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">stx</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"n\">post</span><span class=\"w\"> </span><span class=\"n\">inv</span><span class=\"w\"> </span><span class=\"n\">kind</span>\n</code></pre></div>\n<p>(in <a href=\"https://github.com/leanprover/lean4/blob/285a3130782e9ec91c7a7e126f1e691a70f9e756/src/Lean/Elab/Tactic/Simp.lean#L207\">Lean/Elab/Tactic/Simp.lean</a>)</p>",
        "id": 444553505,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1718309839
    },
    {
        "content": "<p>Ah, great!  Would that also fix <code>dsimp</code>?</p>",
        "id": 444554526,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718310170
    },
    {
        "content": "<p>I think so, as both use <code>mkSimpContext</code>.</p>\n<p><a href=\"https://github.com/leanprover/lean4/pull/4448\">lean4#4448</a>. But I didn't create a RFC nor explained or linked the Zulip chat there.</p>",
        "id": 444554779,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1718310251
    },
    {
        "content": "<p>I agree that this is likely to fix both.</p>",
        "id": 444554858,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718310284
    },
    {
        "content": "<p>If it breaks nothing, I would be very happy to see this merged!  It would make what I thought was a bug in <code>update_deprecations</code> disappear... <span aria-label=\"ghost\" class=\"emoji emoji-1f47b\" role=\"img\" title=\"ghost\">:ghost:</span></p>",
        "id": 444555134,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718310378
    },
    {
        "content": "<p>It shouldn't, as far as I know <code>withRef</code> only specifies at which piece of <code>Syntax</code> logs should be displayed.</p>\n<p>But maybe you could add a short \"bug\" issue with a short description &amp; link.</p>",
        "id": 444558206,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1718311438
    },
    {
        "content": "<p>I will, but once I'm back at a computer tomorrow.  Thanks for debugging this!</p>",
        "id": 444558756,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718311635
    },
    {
        "content": "<p>Thanks. This will need a test file.</p>",
        "id": 444585358,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1718324115
    },
    {
        "content": "<p>I added a test suggestion to the PR and also issue <a href=\"https://github.com/leanprover/lean4/pull/4452\">lean4#4452</a>.</p>",
        "id": 444591423,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1718328314
    }
]