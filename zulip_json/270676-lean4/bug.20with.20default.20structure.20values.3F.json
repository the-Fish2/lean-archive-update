[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"n\">fn</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Bar</span> <span class=\"kd\">extends</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">fn</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n  <span class=\"c1\">--fn := id -- using this line, example below works</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span> <span class=\"n\">where</span> <span class=\"c1\">-- fields missing: 'fn'</span>\n  <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">Unit</span>\n</code></pre></div>\n<p>this seems to only happen when the default field involves a type <code>t</code> that is a field of Foo.<br>\nI tested on 4.5 and 4.6</p>",
        "id": 423310096,
        "sender_full_name": "Scott Kovach",
        "timestamp": 1708913017
    },
    {
        "content": "<p>I haven't confirmed this yet, but it's possible that the issue is that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.Term.StructInst.DefaultFields.reduce#doc\">docs#Lean.Elab.Term.StructInst.DefaultFields.reduce</a> doesn't look at the types of the arguments to a <code>fun</code> when processing.</p>\n<p>A workaround is to define the default value as a separate declaration:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"n\">fn</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">t</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">defFun</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Bar</span> <span class=\"kd\">extends</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">fn</span> <span class=\"o\">:=</span> <span class=\"n\">defFun</span> <span class=\"n\">t</span>\n</code></pre></div>",
        "id": 423321231,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708921592
    }
]