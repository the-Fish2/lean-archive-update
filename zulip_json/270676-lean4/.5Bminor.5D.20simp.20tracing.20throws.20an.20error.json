[
    {
        "content": "<p>In the following code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Group.TypeTags</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.Tactic.simp</span> <span class=\"n\">true</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Nat.add_one_mod</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mod_eq</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>\n<p>the simp tracing throws an error / output message with the single number <code>2</code> (larger imports give larger numbers), visible in the VSCode Output window <code>ctrl+shift+U</code> and an error pop-up. <br>\nThe <code>simp</code> call is otherwise working fine. It looks like some debug-printing message was not removed. </p>\n<p>I can minimize it a bit further, but not much, since this message seems to disappear without Mathlib.<br>\nSlightly more \"minimized\":</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Order.Defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Prod.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Subtype</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Unique</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Additive</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Multiplicative</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">forall1</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Additive</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">Iff.rfl</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">forall2</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Multiplicative</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">Iff.rfl</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.Tactic.simp</span> <span class=\"n\">true</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Nat.add_one_mod</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mod_eq</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>\n<p>This is on Mathlib commit <code>927ac92544</code> and Lean <code>4.7.0-rc2</code>.</p>",
        "id": 428183270,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1711042450
    },
    {
        "content": "<p>I bisected the global simp set to come up with this minimal list of lemmas that triggers the output:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Order.Defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Prod.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Subtype</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.IsEmpty</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">forall1</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Id</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">Iff.rfl</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">forall2</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Id</span> <span class=\"o\">(</span><span class=\"n\">Id</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">Iff.rfl</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.Tactic.simp</span> <span class=\"n\">true</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Nat.add_one_mod</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mod_eq</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span>\n    <span class=\"n\">forall1</span><span class=\"o\">,</span>\n    <span class=\"n\">forall2</span><span class=\"o\">,</span>\n    <span class=\"n\">ite_eq_right_iff</span><span class=\"o\">,</span>\n    <span class=\"n\">forall_eq'</span><span class=\"o\">,</span>\n    <span class=\"n\">forall_eq_or_imp</span><span class=\"o\">,</span>\n    <span class=\"n\">forall_eq_apply_imp_iff</span><span class=\"o\">,</span>\n    <span class=\"n\">forall_apply_eq_imp_iff₂</span><span class=\"o\">,</span>\n    <span class=\"n\">forall_exists_index</span><span class=\"o\">,</span>\n    <span class=\"n\">forall_eq</span><span class=\"o\">,</span>\n    <span class=\"n\">forall_const</span><span class=\"o\">,</span>\n    <span class=\"n\">forall_apply_eq_imp_iff</span><span class=\"o\">,</span>\n    <span class=\"n\">and_self</span><span class=\"o\">,</span>\n    <span class=\"n\">imp_self</span><span class=\"o\">,</span>\n    <span class=\"n\">not_and</span><span class=\"o\">,</span>\n    <span class=\"n\">Nat.lt_irrefl</span><span class=\"o\">,</span>\n    <span class=\"n\">Nat.lt_succ_self</span><span class=\"o\">,</span>\n    <span class=\"n\">Nat.not_le</span><span class=\"o\">,</span>\n    <span class=\"n\">Nat.zero_lt_succ</span><span class=\"o\">,</span>\n    <span class=\"n\">IsEmpty.forall_iff</span><span class=\"o\">,</span>\n    <span class=\"n\">forall_true_left</span><span class=\"o\">,</span>\n    <span class=\"n\">eq_iff_eq_cancel_left</span><span class=\"o\">,</span>\n    <span class=\"n\">eq_iff_eq_cancel_right</span><span class=\"o\">,</span>\n    <span class=\"n\">isEmpty_Prop</span><span class=\"o\">,</span>\n    <span class=\"n\">isEmpty_pi</span><span class=\"o\">,</span>\n    <span class=\"n\">not_le</span><span class=\"o\">,</span>\n    <span class=\"n\">Nonempty.forall</span><span class=\"o\">,</span>\n    <span class=\"n\">Prod.forall</span><span class=\"o\">,</span>\n    <span class=\"n\">Subtype.forall</span><span class=\"o\">,</span>\n    <span class=\"n\">Sum.forall</span>\n  <span class=\"o\">]</span>\n</code></pre></div>\n<p>If I had to guess, it's something to do with the forall case of the discrimination tree, because you need a lot of lemmas and they are all related to simplifying in a forall</p>",
        "id": 428201044,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711049054
    },
    {
        "content": "<p>It's also strange that I can't replicate it using lean from the command line, which suggests the server may be involved</p>",
        "id": 428203332,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711049813
    },
    {
        "content": "<p>likely <a href=\"https://github.com/leanprover/lean4/pull/3622\">lean4#3622</a></p>",
        "id": 428211889,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1711052978
    },
    {
        "content": "<p>what kind of monster has a function called <a href=\"https://github.com/Kha/lean4/blob/bd59d3b532e40e195ec7e4f272821a4e8b7ce9d5/src/Lean/Widget/InteractiveDiagnostic.lean#L161\"><code>chopUpChildren</code></a> ?!</p>",
        "id": 428220012,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1711056092
    },
    {
        "content": "<p>I'll check back in the next release candidate.</p>",
        "id": 428221899,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1711056934
    },
    {
        "content": "<p>As expected, this is now solved.</p>",
        "id": 436774512,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1714682960
    }
]