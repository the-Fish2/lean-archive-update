[
    {
        "content": "<p>how do i get the predicate out of list.pairwise?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Init.Data.List</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Data.List</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Dedup</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Pairwise</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Join</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Infix</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Lattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Lemmas</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Bool.AllAny</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Bool.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Classical</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">And</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Or</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Not</span> <span class=\"o\">:</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span>\n<span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">normalizable</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">reducible</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">toProp</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pred</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">And</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span>  <span class=\"n\">toProp</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">toProp</span> <span class=\"n\">b</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Or</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">toProp</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">toProp</span> <span class=\"n\">b</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Not</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">toProp</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">toProp_not</span> <span class=\"o\">:</span> <span class=\"n\">toProp</span> <span class=\"o\">(</span><span class=\"n\">Not</span> <span class=\"n\">n₁</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"n\">toProp</span> <span class=\"n\">n₁</span> <span class=\"o\">:=</span> <span class=\"n\">Iff.rfl</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">toProp_and</span> <span class=\"o\">:</span> <span class=\"n\">toProp</span> <span class=\"o\">(</span><span class=\"n\">And</span> <span class=\"n\">n₁</span> <span class=\"n\">n₂</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">toProp</span> <span class=\"n\">n₁</span> <span class=\"bp\">∧</span> <span class=\"n\">toProp</span> <span class=\"n\">n₂</span> <span class=\"o\">:=</span> <span class=\"n\">Iff.rfl</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">toProp_or</span> <span class=\"o\">:</span> <span class=\"n\">toProp</span> <span class=\"o\">(</span><span class=\"n\">Or</span> <span class=\"n\">n₁</span> <span class=\"n\">n₂</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">toProp</span> <span class=\"n\">n₁</span> <span class=\"bp\">∨</span> <span class=\"n\">toProp</span> <span class=\"n\">n₂</span> <span class=\"o\">:=</span> <span class=\"n\">Iff.rfl</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">toProp_atom</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">toProp</span> <span class=\"o\">(</span><span class=\"n\">atom</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">pred</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">Iff.rfl</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">subnormalize</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Or</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[[</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">n</span><span class=\"o\">],[</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">n</span><span class=\"o\">],[</span><span class=\"n\">Not</span> <span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">Not</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">Not</span> <span class=\"n\">n</span><span class=\"o\">]]</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">List.append</span> <span class=\"o\">(</span><span class=\"n\">subnormalize</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">subnormalize</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"n\">And</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[[</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">n</span><span class=\"o\">],[</span><span class=\"n\">Not</span> <span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">Not</span> <span class=\"n\">n</span><span class=\"o\">],[</span><span class=\"n\">Not</span> <span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">Not</span> <span class=\"n\">n</span><span class=\"o\">]]</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">List.append</span> <span class=\"o\">(</span><span class=\"n\">subnormalize</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">subnormalize</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Not</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[[</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"n\">Not</span> <span class=\"n\">i</span><span class=\"o\">],[</span><span class=\"n\">Not</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">]]</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">subnormalize</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[[[</span><span class=\"n\">n</span><span class=\"o\">],[</span><span class=\"n\">Not</span> <span class=\"n\">n</span><span class=\"o\">]]]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">normalize</span> <span class=\"o\">:</span>  <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">o</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"o\">[[</span><span class=\"n\">o</span><span class=\"o\">]]</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">subnormalize</span> <span class=\"n\">o</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">nStrip</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Not</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">false</span><span class=\"o\">,</span><span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">true</span><span class=\"o\">,</span><span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">booleanize</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">))))</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n  <span class=\"n\">n.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">y.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">z</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nStrip</span> <span class=\"n\">z</span><span class=\"o\">)))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">normalizel</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n  <span class=\"n\">booleanize</span> <span class=\"o\">(</span><span class=\"n\">normalize</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">wToProp</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">w.fst</span> <span class=\"k\">then</span> <span class=\"n\">toProp</span> <span class=\"n\">w.snd</span> <span class=\"k\">else</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">toProp</span> <span class=\"n\">w.snd</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sToProp</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">s.all</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">wToProp</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">gToProp</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">g.any</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sToProp</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">nToProp</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">))))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">n.all</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">gToProp</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fToProp</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">))))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">n.all</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.any</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">y.all</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">z</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">toProp</span> <span class=\"n\">z</span><span class=\"o\">)))</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">nStrip_equiv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">,</span> <span class=\"n\">toProp</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;-&gt;</span> <span class=\"n\">wToProp</span> <span class=\"o\">(</span><span class=\"n\">nStrip</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">nStrip</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">wToProp</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">wToProp</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">wToProp</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">wToProp</span>\n  <span class=\"n\">simp</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">booleanize_eqiv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">))),</span> <span class=\"n\">fToProp</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;-&gt;</span> <span class=\"n\">nToProp</span> <span class=\"o\">(</span><span class=\"n\">booleanize</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">nToProp</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">fToProp</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">booleanize</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">gToProp</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">sToProp</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">nStrip_equiv</span><span class=\"o\">]</span>\n\n  <span class=\"kd\">theorem</span> <span class=\"n\">andGateTaut</span> <span class=\"o\">:</span>  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">Classical.em</span> <span class=\"n\">a</span>\n  <span class=\"n\">cases</span> <span class=\"n\">Classical.em</span> <span class=\"n\">b</span>\n  <span class=\"n\">left</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">right</span>\n  <span class=\"n\">right</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">push_neg</span>\n  <span class=\"n\">intro</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">right</span>\n  <span class=\"n\">left</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">and_comm</span><span class=\"o\">]</span>\n  <span class=\"n\">push_neg</span>\n  <span class=\"n\">intro</span>\n  <span class=\"n\">assumption</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">orGateTaut</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">∨</span> <span class=\"o\">((</span><span class=\"bp\">¬</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">Classical.em</span> <span class=\"n\">a</span>\n  <span class=\"n\">left</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">left</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">right</span>\n  <span class=\"n\">cases</span> <span class=\"n\">Classical.em</span> <span class=\"n\">b</span>\n  <span class=\"n\">left</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">right</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">right</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">push_neg</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">assumption</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">all_and</span> <span class=\"o\">:</span> <span class=\"n\">List.all</span> <span class=\"o\">(</span> <span class=\"n\">a</span> <span class=\"bp\">++</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;-&gt;</span> <span class=\"n\">List.all</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">List.all</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">intro</span> <span class=\"n\">ha</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">intro</span> <span class=\"n\">b</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hb</span>\n  <span class=\"n\">apply</span> <span class=\"n\">ha</span>\n  <span class=\"n\">left</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hb</span>\n  <span class=\"n\">intro</span> <span class=\"n\">c</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hc</span>\n  <span class=\"n\">apply</span> <span class=\"n\">ha</span>\n  <span class=\"n\">right</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hc</span>\n  <span class=\"n\">intro</span> <span class=\"n\">ha</span>\n  <span class=\"n\">intro</span> <span class=\"n\">b</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hb</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hb</span>\n  <span class=\"n\">apply</span> <span class=\"n\">ha.left</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">apply</span> <span class=\"n\">ha.right</span>\n  <span class=\"n\">assumption</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">subnormal</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">,</span> <span class=\"n\">fToProp</span> <span class=\"o\">(</span><span class=\"n\">subnormalize</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">k</span> <span class=\"n\">l</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">subnormalize</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">fToProp</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">toProp</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Classical.em</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">subnormalize</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">fToProp</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.all_cons</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">List.any_cons</span><span class=\"o\">,</span> <span class=\"n\">List.all_cons</span><span class=\"o\">,</span> <span class=\"n\">List.all_nil</span><span class=\"o\">,</span> <span class=\"n\">Bool.and_true</span><span class=\"o\">,</span> <span class=\"n\">List.any_nil</span><span class=\"o\">,</span>\n    <span class=\"n\">Bool.or_false</span><span class=\"o\">,</span> <span class=\"n\">Bool.and_eq_true</span><span class=\"o\">,</span> <span class=\"n\">Bool.or_eq_true</span><span class=\"o\">,</span> <span class=\"n\">decide_eq_true_eq</span><span class=\"o\">,</span>\n    <span class=\"n\">List.mem_append</span><span class=\"o\">,</span> <span class=\"n\">List.any_eq_true</span><span class=\"o\">,</span><span class=\"n\">toProp_not</span><span class=\"o\">,</span><span class=\"n\">toProp_and</span><span class=\"o\">]</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">toProp_not</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">toProp_and</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">andGateTaut</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">all_and</span><span class=\"o\">]</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">fToProp</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">subnormalize</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.all_cons</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">List.any_cons</span><span class=\"o\">,</span> <span class=\"n\">List.all_cons</span><span class=\"o\">,</span> <span class=\"n\">toProp_or</span><span class=\"o\">,</span> <span class=\"n\">List.all_nil</span><span class=\"o\">,</span> <span class=\"n\">Bool.and_true</span><span class=\"o\">,</span> <span class=\"n\">toProp_not</span><span class=\"o\">,</span>\n    <span class=\"n\">List.any_nil</span><span class=\"o\">,</span> <span class=\"n\">Bool.or_false</span><span class=\"o\">,</span> <span class=\"n\">List.append_eq</span><span class=\"o\">,</span> <span class=\"n\">Bool.and_eq_true</span><span class=\"o\">,</span> <span class=\"n\">Bool.or_eq_true</span><span class=\"o\">,</span>\n    <span class=\"n\">decide_eq_true_eq</span><span class=\"o\">,</span> <span class=\"n\">List.mem_append</span><span class=\"o\">,</span> <span class=\"n\">List.any_eq_true</span><span class=\"o\">]</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">toProp_not</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">toProp_or</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">orGateTaut</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">all_and</span><span class=\"o\">]</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">fToProp</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">subnormalize</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.all_cons</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">List.any_cons</span><span class=\"o\">,</span> <span class=\"n\">List.all_cons</span><span class=\"o\">,</span> <span class=\"n\">toProp_not</span><span class=\"o\">,</span> <span class=\"n\">List.all_nil</span><span class=\"o\">,</span> <span class=\"n\">Bool.and_true</span><span class=\"o\">,</span> <span class=\"n\">Bool.and_self</span><span class=\"o\">,</span>\n    <span class=\"n\">not_not</span><span class=\"o\">,</span> <span class=\"n\">List.any_nil</span><span class=\"o\">,</span> <span class=\"n\">Bool.or_false</span><span class=\"o\">,</span> <span class=\"n\">Bool.and_eq_true</span><span class=\"o\">,</span> <span class=\"n\">Bool.or_eq_true</span><span class=\"o\">,</span> <span class=\"n\">decide_eq_true_eq</span><span class=\"o\">,</span>\n     <span class=\"n\">List.any_eq_true</span><span class=\"o\">]</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">cases</span> <span class=\"n\">Classical.em</span> <span class=\"o\">(</span><span class=\"n\">toProp</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n  <span class=\"n\">right</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">left</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">fToProp</span> <span class=\"n\">at</span> <span class=\"n\">l</span>\n  <span class=\"n\">exact</span> <span class=\"n\">l</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">normal</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">,</span> <span class=\"n\">toProp</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;-&gt;</span> <span class=\"n\">nToProp</span> <span class=\"o\">(</span><span class=\"n\">normalizel</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">normalizel</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">normalize</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">booleanize_eqiv</span><span class=\"o\">]</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">fToProp</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">List.all_cons</span><span class=\"o\">,</span> <span class=\"n\">List.any_cons</span><span class=\"o\">,</span> <span class=\"n\">List.all_nil</span><span class=\"o\">,</span> <span class=\"n\">Bool.and_true</span><span class=\"o\">,</span> <span class=\"n\">List.any_nil</span><span class=\"o\">,</span> <span class=\"n\">Bool.or_false</span><span class=\"o\">,</span>\n    <span class=\"n\">Bool.and_eq_true</span><span class=\"o\">,</span> <span class=\"n\">decide_eq_true_eq</span><span class=\"o\">,</span> <span class=\"n\">List.any_eq_true</span><span class=\"o\">,</span> <span class=\"n\">iff_self_and</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span>\n  <span class=\"n\">apply</span> <span class=\"n\">subnormal</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">coherent</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">))))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)),</span> <span class=\"n\">g</span> <span class=\"bp\">∈</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">),</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">g</span> <span class=\"bp\">-&gt;</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">,</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">-&gt;</span>\n  <span class=\"n\">w.snd</span> <span class=\"bp\">==</span> <span class=\"n\">x.snd</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">w.fst</span> <span class=\"bp\">==</span> <span class=\"n\">x.fst</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">s.Nodup</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">makeCoherent</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">))))</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n  <span class=\"n\">n.map</span>\n  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">x.filter</span>\n  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">y.Pairwise</span>\n  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a.snd</span> <span class=\"bp\">=</span> <span class=\"n\">b.snd</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">a.fst</span> <span class=\"bp\">=</span> <span class=\"n\">b.fst</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">map</span>\n  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">y.dedup</span><span class=\"o\">))</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">coherency</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">))),</span> <span class=\"n\">coherent</span> <span class=\"o\">(</span><span class=\"n\">makeCoherent</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span> <span class=\"n\">g</span> <span class=\"n\">hg</span> <span class=\"n\">s</span> <span class=\"n\">hs</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">makeCoherent</span> <span class=\"n\">at</span> <span class=\"n\">hg</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha_in_n</span><span class=\"o\">,</span> <span class=\"n\">ha_transformed_to_g</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">List.mem_map.mp</span> <span class=\"n\">hg</span>\n  <span class=\"n\">subst</span> <span class=\"n\">ha_transformed_to_g</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">intros</span> <span class=\"n\">w</span> <span class=\"n\">x</span> <span class=\"n\">hw</span> <span class=\"n\">heqw</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.mem_map</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hs</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb_in_filtered_a</span><span class=\"o\">,</span> <span class=\"n\">hb_eq_s</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hs</span>\n  <span class=\"n\">subst</span> <span class=\"n\">hb_eq_s</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.mem_filter</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hb_in_filtered_a</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">hb_in_a</span><span class=\"o\">,</span> <span class=\"n\">hb_pw</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hb_in_filtered_a</span>\n  <span class=\"k\">have</span> <span class=\"n\">hb_pairwise</span> <span class=\"o\">:</span> <span class=\"n\">b.Pairwise</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">c.snd</span> <span class=\"bp\">=</span> <span class=\"n\">d.snd</span> <span class=\"bp\">→</span> <span class=\"n\">c.fst</span> <span class=\"bp\">=</span> <span class=\"n\">d.fst</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">hb_pw</span>\n  <span class=\"k\">have</span> <span class=\"n\">snd_eq</span> <span class=\"o\">:</span> <span class=\"n\">w.snd</span> <span class=\"bp\">=</span> <span class=\"n\">x.snd</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">heqw</span>\n</code></pre></div>",
        "id": 424119128,
        "sender_full_name": "Jared green",
        "timestamp": 1709245181
    },
    {
        "content": "<p>where in the hundreds of lines of code that you've posted is your actual question?</p>\n<p>Did you consider removing all the proofs which you don't need (replacing them with <code>sorry</code> or deleting them completely) before posting?</p>",
        "id": 424124321,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709247544
    },
    {
        "content": "<p>Is your question still visible in this code, and if so, can you clarify what it is? e.g. by writing <code>have : [thing you want] := sorry -- &lt;-- please help me fill in this sorry</code> at the appropriate point?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Lattice</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">relaxedAutoImplicit</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Classical</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">And</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Or</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Not</span> <span class=\"o\">:</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span>\n<span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">normalizable</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">coherent</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">))))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)),</span> <span class=\"n\">g</span> <span class=\"bp\">∈</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">),</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">g</span> <span class=\"bp\">-&gt;</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">,</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">-&gt;</span>\n  <span class=\"n\">w.snd</span> <span class=\"bp\">==</span> <span class=\"n\">x.snd</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">w.fst</span> <span class=\"bp\">==</span> <span class=\"n\">x.fst</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">s.Nodup</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">makeCoherent</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">))))</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n  <span class=\"n\">n.map</span>\n  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">x.filter</span>\n  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">y.Pairwise</span>\n  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a.snd</span> <span class=\"bp\">=</span> <span class=\"n\">b.snd</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">a.fst</span> <span class=\"bp\">=</span> <span class=\"n\">b.fst</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">map</span>\n  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">y.dedup</span><span class=\"o\">))</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">coherency</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">))),</span> <span class=\"n\">coherent</span> <span class=\"o\">(</span><span class=\"n\">makeCoherent</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span> <span class=\"n\">g</span> <span class=\"n\">hg</span> <span class=\"n\">s</span> <span class=\"n\">hs</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">makeCoherent</span> <span class=\"n\">at</span> <span class=\"n\">hg</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha_in_n</span><span class=\"o\">,</span> <span class=\"n\">ha_transformed_to_g</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">List.mem_map.mp</span> <span class=\"n\">hg</span>\n  <span class=\"n\">subst</span> <span class=\"n\">ha_transformed_to_g</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intros</span> <span class=\"n\">w</span> <span class=\"n\">x</span> <span class=\"n\">hw</span> <span class=\"n\">heqw</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.mem_map</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hs</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb_in_filtered_a</span><span class=\"o\">,</span> <span class=\"n\">hb_eq_s</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hs</span>\n    <span class=\"n\">subst</span> <span class=\"n\">hb_eq_s</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.mem_filter</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hb_in_filtered_a</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">hb_in_a</span><span class=\"o\">,</span> <span class=\"n\">hb_pw</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hb_in_filtered_a</span>\n    <span class=\"k\">have</span> <span class=\"n\">hb_pairwise</span> <span class=\"o\">:</span> <span class=\"n\">b.Pairwise</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">c.snd</span> <span class=\"bp\">=</span> <span class=\"n\">d.snd</span> <span class=\"bp\">→</span> <span class=\"n\">c.fst</span> <span class=\"bp\">=</span> <span class=\"n\">d.fst</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">hb_pw</span>\n    <span class=\"k\">have</span> <span class=\"n\">snd_eq</span> <span class=\"o\">:</span> <span class=\"n\">w.snd</span> <span class=\"bp\">=</span> <span class=\"n\">x.snd</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">heqw</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 424125030,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709247844
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">snd_eq</span> <span class=\"o\">:</span> <span class=\"n\">w.snd</span> <span class=\"bp\">=</span> <span class=\"n\">x.snd</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">heqw</span>\n<span class=\"k\">have</span> <span class=\"n\">hp</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">∈</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span>  <span class=\"n\">d</span><span class=\"bp\">∈</span>  <span class=\"n\">b</span> <span class=\"bp\">-&gt;</span>   <span class=\"n\">c.2</span> <span class=\"bp\">=</span> <span class=\"n\">d.2</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">c.1</span> <span class=\"bp\">=</span> <span class=\"n\">d.1</span>\n</code></pre></div>",
        "id": 424322274,
        "sender_full_name": "Jared green",
        "timestamp": 1709325471
    },
    {
        "content": "<p>you can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.Pairwise.forall_of_forall#doc\">docs#List.Pairwise.forall_of_forall</a></p>",
        "id": 424328851,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1709328691
    },
    {
        "content": "<p>yeah, but what do i type in?</p>",
        "id": 424419567,
        "sender_full_name": "Jared green",
        "timestamp": 1709392749
    },
    {
        "content": "<p>i got this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">apply</span> <span class=\"n\">List.Pairwise.forall_of_forall</span>\n  <span class=\"n\">exact</span>\n  <span class=\"gr\">sorry</span>\n  <span class=\"n\">refine</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">exact</span>\n  <span class=\"gr\">sorry</span>\n  <span class=\"gr\">sorry</span>\n  <span class=\"gr\">sorry</span>\n  <span class=\"gr\">sorry</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">List.nodup_dedup</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hs</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb_in_filtered_a</span><span class=\"o\">,</span> <span class=\"n\">hb_eq_s</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hs</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">hb_eq_s</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">List.nodup_dedup</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 424421170,
        "sender_full_name": "Jared green",
        "timestamp": 1709393826
    },
    {
        "content": "<p>Can you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> of your question?</p>",
        "id": 424423247,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709395448
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Lattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Dedup</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Pairwise</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">Classical</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">And</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Or</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Not</span> <span class=\"o\">:</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span>\n<span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">normalizable</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">coherent</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">))))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)),</span> <span class=\"n\">g</span> <span class=\"bp\">∈</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">),</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">g</span> <span class=\"bp\">-&gt;</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">,</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">-&gt;</span>\n  <span class=\"n\">w.snd</span> <span class=\"bp\">==</span> <span class=\"n\">x.snd</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">w.fst</span> <span class=\"bp\">==</span> <span class=\"n\">x.fst</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">s.Nodup</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">makeCoherent</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">))))</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n  <span class=\"n\">n.map</span>\n  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">x.filter</span>\n  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">y.Pairwise</span>\n  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a.snd</span> <span class=\"bp\">=</span> <span class=\"n\">b.snd</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">a.fst</span> <span class=\"bp\">=</span> <span class=\"n\">b.fst</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">map</span>\n  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">y.dedup</span><span class=\"o\">))</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">coherency</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">))),</span> <span class=\"n\">coherent</span> <span class=\"o\">(</span><span class=\"n\">makeCoherent</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span> <span class=\"n\">g</span> <span class=\"n\">hg</span> <span class=\"n\">s</span> <span class=\"n\">hs</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">makeCoherent</span> <span class=\"n\">at</span> <span class=\"n\">hg</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha_in_n</span><span class=\"o\">,</span> <span class=\"n\">ha_transformed_to_g</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">List.mem_map.mp</span> <span class=\"n\">hg</span>\n  <span class=\"n\">subst</span> <span class=\"n\">ha_transformed_to_g</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">intros</span> <span class=\"n\">w</span> <span class=\"n\">x</span> <span class=\"n\">hw</span> <span class=\"n\">heqw</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.mem_map</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hs</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb_in_filtered_a</span><span class=\"o\">,</span> <span class=\"n\">hb_eq_s</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hs</span>\n  <span class=\"n\">subst</span> <span class=\"n\">hb_eq_s</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.mem_filter</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hb_in_filtered_a</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">hb_in_a</span><span class=\"o\">,</span> <span class=\"n\">hb_pw</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hb_in_filtered_a</span>\n  <span class=\"k\">have</span> <span class=\"n\">hb_pairwise</span> <span class=\"o\">:</span> <span class=\"n\">b.Pairwise</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">c.snd</span> <span class=\"bp\">=</span> <span class=\"n\">d.snd</span> <span class=\"bp\">→</span> <span class=\"n\">c.fst</span> <span class=\"bp\">=</span> <span class=\"n\">d.fst</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">hb_pw</span>\n  <span class=\"k\">have</span> <span class=\"n\">snd_eq</span> <span class=\"o\">:</span> <span class=\"n\">w.snd</span> <span class=\"bp\">=</span> <span class=\"n\">x.snd</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">heqw</span>\n  <span class=\"n\">apply</span> <span class=\"n\">List.Pairwise.forall_of_forall</span>\n  <span class=\"n\">exact</span>\n  <span class=\"gr\">sorry</span>\n  <span class=\"n\">refine</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">exact</span>\n  <span class=\"gr\">sorry</span>\n  <span class=\"gr\">sorry</span>\n  <span class=\"gr\">sorry</span>\n  <span class=\"gr\">sorry</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">List.nodup_dedup</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hs</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb_in_filtered_a</span><span class=\"o\">,</span> <span class=\"n\">hb_eq_s</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hs</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">hb_eq_s</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">List.nodup_dedup</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 424423452,
        "sender_full_name": "Jared green",
        "timestamp": 1709395595
    },
    {
        "content": "<p>That file has three errors. Can you post an error-free file by adding <code>sorry</code>s in the relevant place?</p>\n<p>I'm encouraging you to learn how to ask a good question.</p>\n<p>Edit: thanks!</p>",
        "id": 424423610,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709395705
    },
    {
        "content": "<p>So which of the 5 <code>sorry</code>s do you want the solution to?</p>",
        "id": 424423789,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709395842
    },
    {
        "content": "<p>all of them</p>",
        "id": 424423806,
        "sender_full_name": "Jared green",
        "timestamp": 1709395864
    },
    {
        "content": "<p>The first one is <code>rintro _ _ rfl; rfl</code> (and delete <code>exact</code> on the line before)</p>",
        "id": 424424018,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709396068
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Lattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Dedup</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Pairwise</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">Classical</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">And</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Or</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Not</span> <span class=\"o\">:</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span>\n<span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">normalizable</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">coherent</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">))))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)),</span> <span class=\"n\">g</span> <span class=\"bp\">∈</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">),</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">g</span> <span class=\"bp\">-&gt;</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">,</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">-&gt;</span>\n  <span class=\"n\">w.snd</span> <span class=\"bp\">==</span> <span class=\"n\">x.snd</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">w.fst</span> <span class=\"bp\">==</span> <span class=\"n\">x.fst</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">s.Nodup</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">makeCoherent</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">))))</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n  <span class=\"n\">n.map</span>\n  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">x.filter</span>\n  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">y.Pairwise</span>\n  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a.snd</span> <span class=\"bp\">=</span> <span class=\"n\">b.snd</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">a.fst</span> <span class=\"bp\">=</span> <span class=\"n\">b.fst</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">map</span>\n  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">y.dedup</span><span class=\"o\">))</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">coherency</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">normalizable</span> <span class=\"n\">α</span> <span class=\"n\">pred</span><span class=\"o\">))),</span> <span class=\"n\">coherent</span> <span class=\"o\">(</span><span class=\"n\">makeCoherent</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span> <span class=\"n\">g</span> <span class=\"n\">hg</span> <span class=\"n\">s</span> <span class=\"n\">hs</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">makeCoherent</span> <span class=\"n\">at</span> <span class=\"n\">hg</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha_in_n</span><span class=\"o\">,</span> <span class=\"n\">ha_transformed_to_g</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">List.mem_map.mp</span> <span class=\"n\">hg</span>\n  <span class=\"n\">subst</span> <span class=\"n\">ha_transformed_to_g</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">intros</span> <span class=\"n\">w</span> <span class=\"n\">x</span> <span class=\"n\">hw</span> <span class=\"n\">heqw</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.mem_map</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hs</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb_in_filtered_a</span><span class=\"o\">,</span> <span class=\"n\">hb_eq_s</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hs</span>\n  <span class=\"n\">subst</span> <span class=\"n\">hb_eq_s</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.mem_filter</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hb_in_filtered_a</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">hb_in_a</span><span class=\"o\">,</span> <span class=\"n\">hb_pw</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hb_in_filtered_a</span>\n  <span class=\"k\">have</span> <span class=\"n\">hb_pairwise</span> <span class=\"o\">:</span> <span class=\"n\">b.Pairwise</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">c.snd</span> <span class=\"bp\">=</span> <span class=\"n\">d.snd</span> <span class=\"bp\">→</span> <span class=\"n\">c.fst</span> <span class=\"bp\">=</span> <span class=\"n\">d.fst</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">hb_pw</span>\n  <span class=\"k\">have</span> <span class=\"n\">snd_eq</span> <span class=\"o\">:</span> <span class=\"n\">w.snd</span> <span class=\"bp\">=</span> <span class=\"n\">x.snd</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">heqw</span>\n  <span class=\"n\">apply</span> <span class=\"n\">List.Pairwise.forall_of_forall</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">rfl</span>\n  <span class=\"n\">refine</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">exact</span>\n  <span class=\"gr\">sorry</span>\n  <span class=\"gr\">sorry</span>\n  <span class=\"gr\">sorry</span>\n  <span class=\"gr\">sorry</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">List.nodup_dedup</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hs</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb_in_filtered_a</span><span class=\"o\">,</span> <span class=\"n\">hb_eq_s</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hs</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">hb_eq_s</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">List.nodup_dedup</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 424431504,
        "sender_full_name": "Jared green",
        "timestamp": 1709402034
    },
    {
        "content": "<p>this is the proof you were asking about earlier:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">∈</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">d</span> <span class=\"bp\">∈</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">c.2</span> <span class=\"bp\">=</span> <span class=\"n\">d.2</span> <span class=\"bp\">→</span> <span class=\"n\">c.1</span> <span class=\"bp\">=</span> <span class=\"n\">d.1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">⟨</span><span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"n\">hd</span><span class=\"o\">⟩</span>\n  <span class=\"n\">refine</span> <span class=\"n\">List.Pairwise.forall_of_forall</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"n\">hb_pairwise</span> <span class=\"n\">hc</span> <span class=\"n\">hd</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">(</span><span class=\"n\">h2.symm</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</code></pre></div>",
        "id": 424433469,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1709403638
    }
]