[
    {
        "content": "<p>The  idea is to find the size of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow><mi mathvariant=\"normal\">G</mi><mi mathvariant=\"normal\">L</mi></mrow><mi>n</mi></msub><mo stretchy=\"false\">(</mo><msub><mi mathvariant=\"double-struck\">F</mi><mi>q</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathrm{GL}_n(\\mathbb{F}_q)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0361em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">GL</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathbb\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">q</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>, which is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mo>∏</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msubsup><mo stretchy=\"false\">(</mo><msup><mi>q</mi><mi>n</mi></msup><mo>−</mo><msup><mi>q</mi><mi>i</mi></msup><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">\\prod_{i=0}^{n-1}(q^n-q^i) .</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.2537em;vertical-align:-0.2997em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∏</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.954em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0747em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8247em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\">.</span></span></span></span></p>",
        "id": 429340290,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1711361172
    },
    {
        "content": "<p>If you would like to just copy-paste a start of this, you can make a new file (ask me if you need help with this) and then paste in: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.Finite.GaloisField</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Matrix.GeneralLinearGroup</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Matrix</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"n\">Nat.Prime</span> <span class=\"n\">p</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"n\">fintype</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">GL</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">GaloisField</span> <span class=\"n\">p</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Fintype.ofFinite</span> <span class=\"o\">(</span><span class=\"n\">GL</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">GaloisField</span> <span class=\"n\">p</span> <span class=\"n\">m</span><span class=\"o\">))</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">card</span> <span class=\"o\">:</span> <span class=\"n\">Fintype.card</span> <span class=\"o\">(</span><span class=\"n\">GL</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">GaloisField</span> <span class=\"n\">p</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n   <span class=\"bp\">∏</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"s2\">\"𝔽\"</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">GaloisField</span> <span class=\"n\">p</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">𝔽</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">Submodule.span</span> <span class=\"bp\">𝔽</span> <span class=\"o\">({</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">𝔽</span><span class=\"o\">))</span>\n\n\n\n\n<span class=\"c1\">--Basis.invertibleToMatrix might be useful to turn it into a question about bases.</span>\n</code></pre></div>",
        "id": 429340844,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1711361305
    },
    {
        "content": "<p>Here is a proof I have in mind; no idea how doable it is.</p>\n<ol>\n<li>Define a (non-canonical) bijection between the invertible matrices and the bases, thereby reducing the problem to counting the number of bases.</li>\n<li>Define, given a non-zero vector v in V, a bijection between the bases of V starting with v and the bases of V / &lt;v&gt;.</li>\n<li>Prove the result by induction on the dimension.</li>\n</ol>",
        "id": 429347257,
        "sender_full_name": "Peiran Wu",
        "timestamp": 1711362779
    },
    {
        "content": "<p>Ok so 1. is definitely doable. This is all in <code>Basis.invertibleToMatrix</code>. But we can talk more about this to do the precise statement. 2. sounds like a good idea, but maybe we need to think about the best way to state it. And then yes 3 should be easy.</p>",
        "id": 429347783,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1711362914
    },
    {
        "content": "<p>As an alternative to 1., GL acts regularly on the set of all bases and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MulAction.orbitEquivQuotientStabilizer#doc\">docs#MulAction.orbitEquivQuotientStabilizer</a> gives us the bijection. This will probably boil down to the same arguments, so is not a priority.</p>",
        "id": 429349693,
        "sender_full_name": "Peiran Wu",
        "timestamp": 1711363401
    },
    {
        "content": "<p>It would be nice if we could also make the argument work for  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo>=</mo><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><mi>N</mi><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">R= \\mathbb{Z}/N \\mathbb{Z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathbb\">Z</span></span></span></span>, but that is not a priority</p>",
        "id": 429351294,
        "sender_full_name": "Edgar Costa",
        "timestamp": 1711363879
    },
    {
        "content": "<p>So I've made a repo for this: Hopefully following these instructions should let you download it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">git</span> <span class=\"n\">clone</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">CBirkbeck</span><span class=\"bp\">/</span><span class=\"n\">GLn_F_q</span>\n<span class=\"n\">cd</span> <span class=\"n\">GLn_F_q</span>\n<span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span> <span class=\"n\">get</span>\n<span class=\"n\">lake</span> <span class=\"n\">build</span>\n</code></pre></div>",
        "id": 429351530,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1711363925
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"258845\">Peiran Wu</span> <a href=\"#narrow/stream/429416-LFTCM-2024/topic/Project.20ideal.3A.20GL_n.28F_q.29/near/429349693\">said</a>:</p>\n<blockquote>\n<p>As an alternative to 1., GL acts regularly on the set of all bases and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MulAction.orbitEquivQuotientStabilizer#doc\">docs#MulAction.orbitEquivQuotientStabilizer</a> gives us the bijection. This will probably boil down to the same arguments, so is not a priority.</p>\n</blockquote>\n<p>Oh nice that could be useful. Its always good to have multiple options and see which is best for mathlib</p>",
        "id": 429351654,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1711363951
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"598091\">Edgar Costa</span> <a href=\"#narrow/stream/429416-LFTCM-2024/topic/Project.20ideal.3A.20GL_n.28F_q.29/near/429351294\">said</a>:</p>\n<blockquote>\n<p>It would be nice if we could also make the argument work for  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo>=</mo><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><mi>N</mi><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">R= \\mathbb{Z}/N \\mathbb{Z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathbb\">Z</span></span></span></span>, but that is not a priority</p>\n</blockquote>\n<p>Yes I agree this would be really nice! If there is a proof that isnt much harder then we could definitely think about this.</p>",
        "id": 429351863,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1711364007
    },
    {
        "content": "<p>I propose we meet up after Amelia's talk this afternoon and we can chat about how to approach this!</p>",
        "id": 429356555,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1711365218
    },
    {
        "content": "<p>The git repo has not been set-up correctly (<code>.gitignore</code> is old probably from prior to v4.3.0 and the inner modules are not imported into the main file so <code>lake build</code> doesn't do much). I've fixed this locally and can push the fix to a branch</p>",
        "id": 429357170,
        "sender_full_name": "Peiran Wu",
        "timestamp": 1711365388
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"389019\">Chris Birkbeck</span> <a href=\"#narrow/stream/429416-LFTCM-2024/topic/Project.20ideal.3A.20GL_n.28F_q.29/near/429356555\">said</a>:</p>\n<blockquote>\n<p>I propose we meet up after Amelia's talk this afternoon and we can chat about how to approach this!</p>\n</blockquote>\n<p>I'm up for this!</p>",
        "id": 429357211,
        "sender_full_name": "Peiran Wu",
        "timestamp": 1711365403
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"258845\">Peiran Wu</span> <a href=\"#narrow/stream/429416-LFTCM-2024/topic/Project.20ideal.3A.20GL_n.28F_q.29/near/429357170\">said</a>:</p>\n<blockquote>\n<p>The git repo has not been set-up correctly (<code>.gitignore</code> is old probably from prior to v4.3.0 and the inner modules are not imported into the main file so <code>lake build</code> doesn't do much). I've fixed this locally and can push the fix to a branch</p>\n</blockquote>\n<p>Oh thank you! yes push the fix and I'll merge it</p>",
        "id": 429357367,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1711365443
    },
    {
        "content": "<p>OK, just need push access. My GitHub handle is <code>wupr</code> :)</p>",
        "id": 429357587,
        "sender_full_name": "Peiran Wu",
        "timestamp": 1711365496
    },
    {
        "content": "<p>Hi Guys, could I join you?</p>",
        "id": 429433238,
        "sender_full_name": "InnaCap",
        "timestamp": 1711379492
    },
    {
        "content": "<p>The only problem is I know nothing.</p>",
        "id": 429433349,
        "sender_full_name": "InnaCap",
        "timestamp": 1711379519
    },
    {
        "content": "<p>Yes! thats perfectly fine. We can talk about this after Amelia's talk :)</p>",
        "id": 429433649,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1711379574
    },
    {
        "content": "<p>Great! Thank you very much. Where will I find you?</p>",
        "id": 429433787,
        "sender_full_name": "InnaCap",
        "timestamp": 1711379604
    },
    {
        "content": "<p>How about we meet up near the piano at the front on the room (by the boards), we can then maybe go find some room in the library/elsewhere</p>",
        "id": 429434185,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1711379679
    },
    {
        "content": "<p>Suggestion: prove instead that the number of maximal rank <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>×</mo><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">n \\times r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span> matrices with entries in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">F</mi><mi>q</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{F}_q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.975em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">q</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span> is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mo>∏</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>r</mi><mo>−</mo><mn>1</mn></mrow></msubsup><mo stretchy=\"false\">(</mo><msup><mi>q</mi><mi>n</mi></msup><mo>−</mo><msup><mi>q</mi><mi>i</mi></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\prod_{i=0}^{r-1} (q^n - q^i)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.2537em;vertical-align:-0.2997em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∏</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.954em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0747em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8247em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>, it should be a lot easier to do by induction.</p>",
        "id": 429434870,
        "sender_full_name": "Alessandro Iraci",
        "timestamp": 1711379804
    },
    {
        "content": "<p>Sorry, where is the piano?</p>",
        "id": 429440023,
        "sender_full_name": "InnaCap",
        "timestamp": 1711380752
    },
    {
        "content": "<p>Oh I just mean the covered up one at the front of the lecture theatre (although I'm not there yet, just snacking at the moment)</p>",
        "id": 429440358,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1711380824
    },
    {
        "content": "<p>Orbit-stabilizer theorem: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MulAction.orbitEquivQuotientStabilizer#doc\">docs#MulAction.orbitEquivQuotientStabilizer</a></p>",
        "id": 429453507,
        "sender_full_name": "Peiran Wu",
        "timestamp": 1711383216
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"345541\">Alessandro Iraci</span> <a href=\"#narrow/stream/429416-LFTCM-2024/topic/Project.20ideal.3A.20GL_n.28F_q.29/near/429434870\">said</a>:</p>\n<blockquote>\n<p>Suggestion: prove instead that the number of maximal rank <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>×</mo><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">n \\times r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span> matrices with entries in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">F</mi><mi>q</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{F}_q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.975em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">q</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span> is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mo>∏</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>r</mi><mo>−</mo><mn>1</mn></mrow></msubsup><mo stretchy=\"false\">(</mo><msup><mi>q</mi><mi>n</mi></msup><mo>−</mo><msup><mi>q</mi><mi>i</mi></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\prod_{i=0}^{r-1} (q^n - q^i)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.2537em;vertical-align:-0.2997em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∏</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.954em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0747em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8247em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>, it should be a lot easier to do by induction.</p>\n</blockquote>\n<p>One way to phrase this could be the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">m</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">𝔽</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">step2</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Nat.card</span> <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">𝔽</span><span class=\"o\">)</span> <span class=\"bp\">//</span> <span class=\"n\">LinearIndependent</span> <span class=\"bp\">𝔽</span> <span class=\"n\">s</span> <span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"bp\">∏</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">i.val</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 429463215,
        "sender_full_name": "Peiran Wu",
        "timestamp": 1711385276
    },
    {
        "content": "<p>Some results about linear independent vectors</p>\n<p>#check LinearIndependent<br>\n#check LinearIndependent.comp<br>\n#check linearIndependent_unique_iff<br>\n#check linearIndependent_fin_cons<br>\n#check linearIndependent_fin_snoc</p>",
        "id": 429465782,
        "sender_full_name": "Thomas Lanard",
        "timestamp": 1711385889
    },
    {
        "content": "<p>For the initialization</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">induction</span> <span class=\"n\">k</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">LinearIndependent</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 429497686,
        "sender_full_name": "Thomas Lanard",
        "timestamp": 1711396594
    },
    {
        "content": "<p>It may be easier to talk about finite families of vectors (Fin m -&gt; V) which are linearly independent. If m &lt; n, any such family can be extended to a family (Fin (m+1) -&gt; V) in exactly … ways, by choosing a vector which is not in the span.</p>",
        "id": 429514312,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1711402004
    },
    {
        "content": "<p>I have just finished Step 2 (still a lot of tidying-up to do). The code is now on branch <code>wupr</code> of the project repo.</p>",
        "id": 429514529,
        "sender_full_name": "Peiran Wu",
        "timestamp": 1711402102
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/429416-LFTCM-2024/topic/Project.20ideal.3A.20GL_n.28F_q.29/near/429514312\">said</a>:</p>\n<blockquote>\n<p>It may be easier to talk about finite families of vectors (Fin m -&gt; V) which are linearly independent. If m &lt; n, any such family can be extended to a family (Fin (m+1) -&gt; V) in exactly … ways, by choosing a vector which is not in the span.</p>\n</blockquote>\n<p>Yes, that's exactly what I have done.</p>",
        "id": 429514558,
        "sender_full_name": "Peiran Wu",
        "timestamp": 1711402121
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"704153\">@InnaCap</span> and I made some progress on Step 1 yesterday. We can push this to the repo.</p>",
        "id": 429604263,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1711441892
    },
    {
        "content": "<p>I've merged my branch into <code>main</code> since everyone seems to be working there.</p>",
        "id": 429670130,
        "sender_full_name": "Peiran Wu",
        "timestamp": 1711464043
    },
    {
        "content": "<p>I have finished step 1 and made the connection with step 2 to have a complete proof of the cardinal of GLn(Fq). However, I do not have the authorization to push to the repo.</p>",
        "id": 429953223,
        "sender_full_name": "Thomas Lanard",
        "timestamp": 1711575216
    },
    {
        "content": "<p>Oh send me your GitHub username and I'll add you</p>",
        "id": 429953975,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1711575568
    },
    {
        "content": "<p>Also, that's great!!</p>",
        "id": 429953992,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1711575581
    },
    {
        "content": "<p>Sorry I didn't actually  read what you said, so the project is done! thats amazing!</p>",
        "id": 429955705,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1711576409
    },
    {
        "content": "<p>or at least done until the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><mi>N</mi><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}/N\\mathbb{Z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathbb\">Z</span></span></span></span> people come back :P</p>",
        "id": 429955810,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1711576455
    },
    {
        "content": "<p>:)</p>",
        "id": 429955837,
        "sender_full_name": "Thomas Lanard",
        "timestamp": 1711576473
    },
    {
        "content": "<p>How about the size of O_n(q)?</p>",
        "id": 429964542,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711581252
    },
    {
        "content": "<p>Hmm I don't remember what the proofs are in that case. I'll have to look.</p>",
        "id": 429964989,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1711581543
    },
    {
        "content": "<p>It's much more complicated, (un)fortunately and the answer has arithmetic content. <br>\nThe only example I know by heart is for n = 2  : if -1 is a square in Fq, then it's  q - 1, otherwise it's q + 1.<br>\nTo do the proof for a general quadratic form, I'd take an orthogonal basis, and map the first vector to a vector of same value, hence I need to know the cardinality of the sphere, and I'd go on by induction. Fortunately, Witt tells you that orthogonals of two lines generated by vectors of same value are isomorphic.</p>",
        "id": 429967813,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1711583351
    },
    {
        "content": "<p>I pushed in the repo the proof of the cardinal of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><msub><mi>L</mi><mi>n</mi></msub><mo stretchy=\"false\">(</mo><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><msup><mi>p</mi><mi>r</mi></msup><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">GL_n(\\mathbb{Z}/p^r\\mathbb{Z})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathbb\">Z</span><span class=\"mord\">/</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span></span></span></span></span><span class=\"mord mathbb\">Z</span><span class=\"mclose\">)</span></span></span></span>.<br>\nIt just remains to prove that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>card </mtext><mi>G</mi><msub><mi>L</mi><mi>n</mi></msub><mo stretchy=\"false\">(</mo><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><mi>p</mi><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mtext>card </mtext><mi>G</mi><msub><mi>L</mi><mi>n</mi></msub><mo stretchy=\"false\">(</mo><msub><mi mathvariant=\"double-struck\">F</mi><mi>p</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\text{card } GL_n(\\mathbb{Z}/p\\mathbb{Z}) = \\text{card } GL_n(\\mathbb{F}_p)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord text\"><span class=\"mord\">card </span></span><span class=\"mord mathnormal\">G</span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathbb\">Z</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathbb\">Z</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0361em;vertical-align:-0.2861em;\"></span><span class=\"mord text\"><span class=\"mord\">card </span></span><span class=\"mord mathnormal\">G</span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathbb\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> and do some cleaning. (I will do it later)<br>\nI will also try to finish the cardinal of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><msub><mi>L</mi><mi>n</mi></msub><mo stretchy=\"false\">(</mo><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><mi>N</mi><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">GL_n(\\mathbb{Z}/N\\mathbb{Z})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathbb\">Z</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathbb\">Z</span><span class=\"mclose\">)</span></span></span></span> using the chinese remainder theorem.</p>",
        "id": 430276769,
        "sender_full_name": "Thomas Lanard",
        "timestamp": 1711727619
    },
    {
        "content": "<p>Ah fantastic! its been a good train ride I see :)</p>",
        "id": 430276926,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1711727685
    },
    {
        "content": "<p>Do we have that <code>GL</code> of isomorphic rings are isomorphic?</p>",
        "id": 430277461,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711727902
    },
    {
        "content": "<p>maybe not explicitly, but surely we have enough to do this.</p>",
        "id": 430277798,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1711728030
    },
    {
        "content": "<p>It the proof is about <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mtext>GL</mtext><mi>n</mi></msub><mo stretchy=\"false\">(</mo><mi>K</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\text{GL}_n(K)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">GL</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mclose\">)</span></span></span></span>, and gives the result in terms of <code>card K</code>, then we don't need such a result.</p>",
        "id": 430277862,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1711728051
    },
    {
        "content": "<p>Aha yes good point! Thats another good reason to not use <code>GaloisField</code> and instead use a \"general\" finite field :)</p>",
        "id": 430278181,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1711728180
    },
    {
        "content": "<p>Given a morphisme of commutative rings I defined in the file a morphism of group for GL. I don’t think it is too difficult to prove that this is a isomorphism.</p>",
        "id": 430278261,
        "sender_full_name": "Thomas Lanard",
        "timestamp": 1711728219
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/429416-LFTCM-2024/topic/Project.20idea.3A.20GL_n.28F_q.29/near/430277461\">said</a>:</p>\n<blockquote>\n<p>Do we have that <code>GL</code> of isomorphic rings are isomorphic?</p>\n</blockquote>\n<p>But if we dont have this, we should definitely add it, even if we dont need it here.</p>",
        "id": 430278292,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1711728237
    },
    {
        "content": "<p>If we want to use the chinese remainder theorem to get <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><msub><mi>L</mi><mi>n</mi></msub><mo stretchy=\"false\">(</mo><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><mi>N</mi><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">GL_n(\\mathbb{Z}/N\\mathbb{Z})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathbb\">Z</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathbb\">Z</span><span class=\"mclose\">)</span></span></span></span> we need it I think.</p>",
        "id": 430278479,
        "sender_full_name": "Thomas Lanard",
        "timestamp": 1711728305
    },
    {
        "content": "<p>Yes, I was thinking about the chinese remainder theorem.</p>",
        "id": 430279831,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711728942
    },
    {
        "content": "<p>If you need to add it, consider adding that GL preserve injectivity first.</p>",
        "id": 430279917,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711728969
    },
    {
        "content": "<p>Does anyone know a reasonable criterion to get surjectivity?</p>",
        "id": 430280062,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711729039
    },
    {
        "content": "<p>To preserve isoms, you only need functoriality</p>",
        "id": 430280217,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1711729106
    },
    {
        "content": "<p>Sure, but since injectivity is clearly preserved we can also add it.</p>",
        "id": 430280543,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711729264
    },
    {
        "content": "<p>I was just curious about surjectivity (that is not preserved in general)</p>",
        "id": 430280572,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711729282
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/429416-LFTCM-2024/topic/Project.20idea.3A.20GL_n.28F_q.29/near/430280062\">said</a>:</p>\n<blockquote>\n<p>Does anyone know a reasonable criterion to get surjectivity?</p>\n</blockquote>\n<p>morphism surjective + x is a unit if f(x) is a unit?</p>",
        "id": 430280696,
        "sender_full_name": "Thomas Lanard",
        "timestamp": 1711729334
    },
    {
        "content": "<p>Fun fact: such <code>f</code> are called local ring homs in Lean</p>",
        "id": 430280814,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1711729393
    },
    {
        "content": "<p>ah sure, preserving units is also a necessary condition.</p>",
        "id": 430281146,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711729545
    },
    {
        "content": "<p>Except when n = 0 <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 430281750,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1711729797
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"389019\">Chris Birkbeck</span> <a href=\"#narrow/stream/429416-LFTCM-2024/topic/Project.20idea.3A.20GL_n.28F_q.29/near/430278181\">said</a>:</p>\n<blockquote>\n<p>Aha yes good point! Thats another good reason to not use <code>GaloisField</code> and instead use a \"general\" finite field :)</p>\n</blockquote>\n<p>Ok this is done!</p>",
        "id": 430282471,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1711730086
    },
    {
        "content": "<p>For SL_n it's much more subtle -- for example SL_n(Z) surjects into SL_n(Z/NZ) but this is not immediately obvious as far as i know</p>",
        "id": 430332003,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711755236
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/429416-LFTCM-2024/topic/Project.20idea.3A.20GL_n.28F_q.29/near/430280062\">said</a>:</p>\n<blockquote>\n<p>Does anyone know a reasonable criterion to get surjectivity?</p>\n</blockquote>\n<p>It's a good question. For GL, little hope, unless you have surjectivity on units of the rings,  but for SL, you get it by adapting the proof that SL(n, Z) is generated by elementary matrices (1s one diagonal, 0 elsewhere except for one 1).</p>",
        "id": 430476563,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1711891387
    },
    {
        "content": "<p>I have an issue finishing the proof of the cardinal of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mtext>GL</mtext><mi>n</mi></msub><mo stretchy=\"false\">(</mo><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><mi>N</mi><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\text{GL}_n(\\mathbb{Z}/N\\mathbb{Z})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">GL</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathbb\">Z</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathbb\">Z</span><span class=\"mclose\">)</span></span></span></span>. So I want to rewrite N into its decomposition into prime numbers (in order to apply the Chinese Remainder Theorem). However, I have an error that I don’t understand. I think it has something to do with the instance of Fintype. Here are two attempts with a stupid example :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">NeZero</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"o\">(</span><span class=\"n\">N</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">ZMod.fintype</span> <span class=\"n\">N</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">GL</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"o\">(</span><span class=\"n\">N</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"n\">Fintype.ofFinite</span> <span class=\"o\">(</span><span class=\"n\">GL</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"n\">N</span><span class=\"o\">))</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">card_GL_ZMod</span> <span class=\"o\">:</span> <span class=\"n\">Fintype.card</span> <span class=\"o\">(</span><span class=\"n\">GL</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"o\">(</span><span class=\"n\">N</span><span class=\"o\">)))</span> <span class=\"bp\">=</span>  <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">Ne.symm</span> <span class=\"o\">(</span><span class=\"n\">NeZero.ne'</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"o\">(</span><span class=\"n\">Nat.factorization_prod_pow_eq_self</span> <span class=\"n\">h</span><span class=\"o\">)]</span>\n  <span class=\"c1\">--tactic 'rewrite' failed, motive is not type correct</span>\n</code></pre></div>\n<p>Here the rewrite does not work (tactic 'rewrite' failed, motive is not type correct).</p>\n<p>Second attempt :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">NeZero</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"o\">{</span> <span class=\"n\">out</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"o\">(</span><span class=\"n\">N</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">NeZero</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"o\">{</span> <span class=\"n\">out</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n  <span class=\"n\">apply</span> <span class=\"n\">ZMod.fintype</span> <span class=\"n\">N</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">GL</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"o\">(</span><span class=\"n\">N</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">NeZero</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"o\">{</span> <span class=\"n\">out</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Fintype.ofFinite</span> <span class=\"o\">(</span><span class=\"n\">GL</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"n\">N</span><span class=\"o\">))</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">card_GL_ZMod</span> <span class=\"o\">:</span> <span class=\"n\">Fintype.card</span> <span class=\"o\">(</span><span class=\"n\">GL</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"o\">(</span><span class=\"n\">N</span><span class=\"o\">)))</span> <span class=\"bp\">=</span>  <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">--failed to synthesize instance Fintype (GL (Fin n) (ZMod N))</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"o\">(</span><span class=\"n\">Nat.factorization_prod_pow_eq_self</span> <span class=\"n\">h</span><span class=\"o\">)]</span>\n</code></pre></div>\n<p>This time Lean complains: failed to synthesize instance Fintype (GL (Fin n) (ZMod N))</p>",
        "id": 432239242,
        "sender_full_name": "Thomas Lanard",
        "timestamp": 1712668869
    },
    {
        "content": "<p>The instance</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"o\">(</span><span class=\"n\">N</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">NeZero</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"o\">{</span> <span class=\"n\">out</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n  <span class=\"n\">apply</span> <span class=\"n\">ZMod.fintype</span> <span class=\"n\">N</span>\n</code></pre></div>\n<p>can not be applied automatically, because it depends on the explicit variable <code>h</code> which Lean cannot find automatically. Idem dito for the other <code>Fintype</code> instance below it.</p>",
        "id": 432239811,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1712669006
    },
    {
        "content": "<p>You could use <code>(N : ℕ+) </code> instead and then you dont need the <code>NeZero</code> stuff</p>",
        "id": 432241314,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1712669354
    },
    {
        "content": "<p>Although I don't think it'll let you rewrite <code>N</code> in the <code>Zmod N</code> into <code>Zmod (product of factors of N)</code>. To use CRT you might want to first turn <code>N</code> into  something like <code>N1 * N2</code> with <code>N1, N2</code> coprime and then go from there (as I cant see a version of CRT that breaks ZMod into each prime factor, but I could just be looking in the wrong place)</p>",
        "id": 432243110,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1712669751
    },
    {
        "content": "<p>But if I use <code>(N : ℕ+)</code> then the <code>rw</code> doesn’t work</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">GL</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"o\">(</span><span class=\"n\">N</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"n\">Fintype.ofFinite</span> <span class=\"o\">(</span><span class=\"n\">GL</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"n\">N</span><span class=\"o\">))</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">card_GL_ZMod</span> <span class=\"o\">:</span> <span class=\"n\">Fintype.card</span> <span class=\"o\">(</span><span class=\"n\">GL</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"o\">(</span><span class=\"n\">N.val</span><span class=\"o\">)))</span> <span class=\"bp\">=</span>  <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">N.val</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">PNat.ne_zero</span> <span class=\"n\">N</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">N.val</span> <span class=\"bp\">=</span> <span class=\"n\">Finsupp.prod</span> <span class=\"o\">(</span><span class=\"n\">Nat.factorization</span> <span class=\"n\">N.val</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">x_1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[(</span><span class=\"n\">Nat.factorization_prod_pow_eq_self</span> <span class=\"n\">h</span><span class=\"o\">)]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h2</span><span class=\"o\">]</span>\n  <span class=\"c1\">--tactic 'rewrite' failed, motive is not type correct</span>\n</code></pre></div>",
        "id": 432243279,
        "sender_full_name": "Thomas Lanard",
        "timestamp": 1712669786
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"389019\">Chris Birkbeck</span> <a href=\"#narrow/stream/429416-LFTCM-2024/topic/Project.20idea.3A.20GL_n.28F_q.29/near/432243110\">said</a>:</p>\n<blockquote>\n<p>Although I don't think it'll let you rewrite <code>N</code> in the <code>Zmod N</code> into <code>Zmod (product of factors of N)</code>. To use CRT you might want to first turn <code>N</code> into  something like <code>N1 * N2</code> with <code>N1, N2</code> coprime and then go from there (as I cant see a version of CRT that breaks ZMod into each prime factor, but I could just be looking in the wrong place)</p>\n</blockquote>\n<p>We could use <code>ZMod.prodEquivPi</code> no?</p>",
        "id": 432244034,
        "sender_full_name": "Thomas Lanard",
        "timestamp": 1712669960
    },
    {
        "content": "<p>Ah I missed that one! yes you are right, that would be what you want.</p>",
        "id": 432244412,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1712670036
    },
    {
        "content": "<p>You can also try </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">NeZero</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"o\">{</span> <span class=\"n\">out</span> <span class=\"o\">:=</span> <span class=\"n\">h.out</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"o\">(</span><span class=\"n\">N</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">NeZero</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"o\">{</span> <span class=\"n\">out</span> <span class=\"o\">:=</span> <span class=\"n\">h.out</span> <span class=\"o\">}</span>\n  <span class=\"n\">apply</span> <span class=\"n\">ZMod.fintype</span> <span class=\"n\">N</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">GL</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"o\">(</span><span class=\"n\">N</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">NeZero</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"o\">{</span> <span class=\"n\">out</span> <span class=\"o\">:=</span> <span class=\"n\">h.out</span> <span class=\"o\">}</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Fintype.ofFinite</span> <span class=\"o\">(</span><span class=\"n\">GL</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"n\">N</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>But I think this will also have the rw problem.</p>",
        "id": 432246060,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1712670374
    },
    {
        "content": "<p>Yes, same rw problem. Even for this, rw doesn’t work</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">card_GL_ZMod</span> <span class=\"o\">(</span><span class=\"n\">N</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">GL</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"n\">N</span><span class=\"o\">))]:</span>\n    <span class=\"n\">Fintype.card</span> <span class=\"o\">(</span><span class=\"n\">GL</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"o\">(</span><span class=\"n\">N</span><span class=\"o\">)))</span> <span class=\"bp\">=</span>  <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"o\">(</span><span class=\"n\">Nat.factorization_prod_pow_eq_self</span> <span class=\"n\">h</span><span class=\"o\">)]</span>\n  <span class=\"c1\">--tactic 'rewrite' failed, motive is not type correct</span>\n</code></pre></div>",
        "id": 432247212,
        "sender_full_name": "Thomas Lanard",
        "timestamp": 1712670637
    },
    {
        "content": "<p>hmm ok what about:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">ZMod.fintype</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">GL</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"o\">(</span><span class=\"n\">N</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n\n  <span class=\"n\">apply</span> <span class=\"n\">Fintype.ofFinite</span> <span class=\"o\">(</span><span class=\"n\">GL</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"o\">(</span><span class=\"n\">N</span><span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">card_GL_ZMod</span> <span class=\"o\">:</span> <span class=\"n\">Fintype.card</span> <span class=\"o\">(</span><span class=\"n\">GL</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"o\">(</span><span class=\"n\">N</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"bp\">=</span>  <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">--failed to synthesize instance Fintype (GL (Fin n) (ZMod N))</span>\n  <span class=\"c1\">--have := (Nat.factorization_prod_pow_eq_self h.out)</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Nat.recOnPosPrimePosCoprime</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">N</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Fintype.card</span> <span class=\"o\">(</span><span class=\"n\">GL</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"o\">(</span><span class=\"n\">N</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 432248341,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1712670875
    },
    {
        "content": "<p>this is quite ugly since it has <code>N+1</code> everywhere, but the <code>Nat.recOn</code> cases you get might be doable</p>",
        "id": 432248815,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1712670969
    },
    {
        "content": "<p>or perhaps, just replace the <code>N+1</code> with <code>N</code> and use the NeZero stuff.</p>",
        "id": 432249338,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1712671077
    },
    {
        "content": "<p>actually that probably wont work as itll factor N and not <code>N+1</code></p>",
        "id": 432250300,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1712671266
    },
    {
        "content": "<p>Why not use <code>Finite</code> instead of <code>Fintype</code>? That might solve the motive not being type correct error.</p>",
        "id": 432252040,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1712671687
    },
    {
        "content": "<p>ah yes thats a good idea: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)]</span>\n\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">NeZero</span> <span class=\"o\">(</span><span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span>  <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"o\">{</span><span class=\"n\">out</span> <span class=\"o\">:=</span> <span class=\"n\">h.out</span><span class=\"o\">}</span>\n  <span class=\"n\">refine</span> <span class=\"n\">ZMod.fintype</span> <span class=\"n\">N</span>\n\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Finite</span> <span class=\"o\">(</span><span class=\"n\">GL</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"o\">(</span><span class=\"n\">N</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n <span class=\"n\">exact</span> <span class=\"n\">instFiniteUnits</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">card_GL_ZMod</span> <span class=\"o\">:</span> <span class=\"n\">Nat.card</span> <span class=\"o\">(</span><span class=\"n\">GL</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"o\">(</span><span class=\"n\">N</span><span class=\"o\">)))</span> <span class=\"bp\">=</span>  <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">--failed to synthesize instance Fintype (GL (Fin n) (ZMod N))</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Nat.factorization_prod_pow_eq_self</span> <span class=\"n\">h.out</span><span class=\"o\">)</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">this</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 432253880,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1712672098
    },
    {
        "content": "<p>That works</p>",
        "id": 432254073,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1712672145
    },
    {
        "content": "<p>Thank you! I will try with <code>Nat.card</code> then!</p>",
        "id": 432254936,
        "sender_full_name": "Thomas Lanard",
        "timestamp": 1712672349
    },
    {
        "content": "<p>It worked with Nat.card <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>. Thank you!<br>\nI have pushed the proof in the repo (and also, as Riccardo wanted, the injectivity of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><msub><mi>L</mi><mi>n</mi></msub><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">)</mo><mo>→</mo><mi>G</mi><msub><mi>L</mi><mi>n</mi></msub><mo stretchy=\"false\">(</mo><mi>B</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">GL_n(A) \\to GL_n(B) </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span></span></span></span> for an injective morphism <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>→</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">A \\to B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span>, and surjectivity for a surjective local ring morphism).</p>",
        "id": 432927108,
        "sender_full_name": "Thomas Lanard",
        "timestamp": 1712935277
    },
    {
        "content": "<p>Thats great!  I'll try and have a look in the next few days. I guess the next thing is to think about cleaning it up to PR it to mathlib :)</p>",
        "id": 432927372,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1712935341
    },
    {
        "content": "<p>\"Next few days\" was a lie, but I've just bumped the repo. Hopefully I'll have some time soonish to start PRing some of this.</p>",
        "id": 440833194,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1716808943
    }
]