[
    {
        "content": "<p>I would like to propose the proof of Fermat Last Theorem for exponent <code>3</code> as a project. A couple of comments:</p>\n<ul>\n<li>first of all we already have a formalized proof (see <a href=\"https://github.com/leanprover-community/flt-regular/\">here</a>, in the <code>FltRegular/FltThree/</code> folder): that proof stays in <code>ℤ</code> and I would like to formalize the proof that uses <code>ℤ[ζ₃]</code>.</li>\n<li>Almost all the number theoretic prerequisites are already in mathlib, so the work is totally doable.</li>\n<li>The final goal is not only to have a proof, but to have a mathlib-ready proof (indeed FLT3 is a special case that does not follow from the general case proved by Wiles).</li>\n</ul>\n<p>For these reasons I think it's a very good project especially for students who like number theory (it is a good occasion to learn some beautiful math is you've never seen this proof).</p>\n<p>I am going to do it anyway if nobody is interested, so I've prepared a repository <a href=\"https://github.com/riccardobrasca/flt3/\">here</a>. As you can see I've already structured the proof I want to follow, there are \"only\"  37 <code>sorry</code>, but most of them are very easy (some of them will maybe need to be split, we will see).</p>\n<p>Let me know if you want to participate!</p>",
        "id": 428300755,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711103290
    },
    {
        "content": "<p>If you've never played with Lean, <code>sorry</code> means \"unproved results\".</p>",
        "id": 428300824,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711103321
    },
    {
        "content": "<p>This is the first blue node in the FLT project by the way!</p>",
        "id": 428304224,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711104555
    },
    {
        "content": "<p>Do you have a reference for the proof you are following ?</p>",
        "id": 428320383,
        "sender_full_name": "Florestan",
        "timestamp": 1711110895
    },
    {
        "content": "<p>I think that the reference currently is:</p>\n<ul>\n<li>Buzzard, Kevin and Taylor, Richard. Private communication, 2023.</li>\n</ul>",
        "id": 428320528,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1711110952
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"396599\">@Florestan</span> if you mean the proof of FLT3 yes</p>",
        "id": 428321688,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711111354
    },
    {
        "content": "<p>It's <a href=\"https://webusers.imj-prg.fr/~marc.hindry/Cours-arith.pdf\">here</a>, page 43</p>",
        "id": 428322013,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711111454
    },
    {
        "content": "<p>It's in French but I guess this is not a problem</p>",
        "id": 428322028,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711111462
    },
    {
        "content": "<p>(<a href=\"https://link.springer.com/book/10.1007/978-1-4471-2131-2\">english version</a>, page 84 maybe paywalled)</p>",
        "id": 428322283,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711111543
    },
    {
        "content": "<p>yes, thank you !</p>",
        "id": 428322791,
        "sender_full_name": "Florestan",
        "timestamp": 1711111726
    },
    {
        "content": "<p>To get the repository (assuming Lean and git are installed), one can do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">git</span> <span class=\"n\">clone</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">riccardobrasca</span><span class=\"bp\">/</span><span class=\"n\">flt3.git</span>\n<span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span> <span class=\"n\">get</span>\n<span class=\"n\">lake</span> <span class=\"n\">build</span>\n</code></pre></div>\n<p>the last step should take no more than a couple of minutes (and it should start compiling something like <code>2410/2412</code>, not <code>1/2412</code>).</p>",
        "id": 428323168,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711111846
    },
    {
        "content": "<p>note that copying/pasting the two files inside any other repository depending on mathlib will not work (because it uses a \"future\" version of mathlib)</p>",
        "id": 428323284,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711111888
    },
    {
        "content": "<p>To be precise I am following a slightly modified version of the proof, essentially I am not doing case 1 for the more general equation but only for the original one (since case 1 in <code>ℤ</code> is easy even in Lean, and it is already in mathlib, while case 1 for the general equation would be annoying).</p>\n<p>In particular I am not proving that the more general equation has no solution, but only that it has no solution in case 2, but this is enough to have case 2 in <code>ℤ</code> and so FLT3. I guess nobody really cares about the more general equation.</p>",
        "id": 428324326,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711112222
    },
    {
        "content": "<p>5 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"429416\" href=\"/#narrow/stream/429416-LFTCM-2024/topic/Installation.20issues\">#LFTCM 2024 &gt; Installation issues</a> by <span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span>.</p>",
        "id": 429179877,
        "sender_full_name": "Notification Bot",
        "timestamp": 1711274398
    },
    {
        "content": "<p>I think in Riccardo's steps above, you probably want to <code>cd</code> into the newly cloned repo.  So I think one might do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">git</span> <span class=\"n\">clone</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">riccardobrasca</span><span class=\"bp\">/</span><span class=\"n\">flt3.git</span>\n<span class=\"n\">cd</span> <span class=\"n\">flt3</span>\n<span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span> <span class=\"n\">get</span>\n<span class=\"n\">lake</span> <span class=\"n\">build</span>\n</code></pre></div>",
        "id": 429253627,
        "sender_full_name": "davidlowryduda",
        "timestamp": 1711318137
    },
    {
        "content": "<p>Yes, sorry, that's absolutely correct</p>",
        "id": 429254095,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711318452
    },
    {
        "content": "<p>If you are interested in FLT3 please show up here!</p>",
        "id": 429342564,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711361752
    },
    {
        "content": "<p>I would like to work on this project.</p>",
        "id": 429343436,
        "sender_full_name": "Emilie Uthaiwat",
        "timestamp": 1711361904
    },
    {
        "content": "<p>I'm interested <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 429343437,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1711361905
    },
    {
        "content": "<p>I'm interested.</p>",
        "id": 429343556,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1711361928
    },
    {
        "content": "<p>I'm interested</p>",
        "id": 429344042,
        "sender_full_name": "Lorenzo Luccioli",
        "timestamp": 1711362017
    },
    {
        "content": "<p>Good! I propose to meet this afternoon after Amelia's talk somewhere (maybe in the library) to set up everything.</p>",
        "id": 429345245,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711362236
    },
    {
        "content": "<p>I really think we can finish this by Friday</p>",
        "id": 429345335,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711362246
    },
    {
        "content": "<p>I am interested too</p>",
        "id": 429346689,
        "sender_full_name": "Sanyam Gupta",
        "timestamp": 1711362626
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/429416-LFTCM-2024/topic/Project.20idea.3A.20FLT3/near/428323168\">said</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">git</span> <span class=\"n\">clone</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">riccardobrasca</span><span class=\"bp\">/</span><span class=\"n\">flt3.git</span>\n</code></pre></div>\n<p>How did you set up <a href=\"https://github.com/riccardobrasca/flt3\">your repo</a> in a way that it contains no or lakefile.lean or lean-toolchain file at the root of your directory?</p>",
        "id": 429347695,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1711362883
    },
    {
        "content": "<p>The repo and what you have on you computer are two different things. <code>lake exe cache get</code> will download everything you need inside the project folder</p>",
        "id": 429349481,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711363348
    },
    {
        "content": "<p>Interested too <span aria-label=\"hand\" class=\"emoji emoji-270b\" role=\"img\" title=\"hand\">:hand:</span></p>",
        "id": 429350183,
        "sender_full_name": "Omar Haddad",
        "timestamp": 1711363536
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/429416-LFTCM-2024/topic/Project.20idea.3A.20FLT3/near/429349481\">said</a>:</p>\n<blockquote>\n<p>The repo and what you have on you computer are two different things. <code>lake exe cache get</code> will download everything you need inside the project folder</p>\n</blockquote>\n<p>Right, but I am asking because I did not even need to do that (the Lean 4 VS Code extension took care of it).</p>\n<p>I am just surprised: what if you want to use a specific version of Lean, say 4.6.0, can you set this up somewhere in your repo? Usually, I would just edit the <code>lean-toolchain</code>file and run <code>lake update</code>.</p>",
        "id": 429350445,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1711363611
    },
    {
        "content": "<p>What you can start doing is to get the project and write here your github username</p>",
        "id": 429350467,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711363619
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"513540\">Flo (Florent Schaffhauser)</span> <a href=\"#narrow/stream/429416-LFTCM-2024/topic/Project.20idea.3A.20FLT3/near/429350445\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/429416-LFTCM-2024/topic/Project.20idea.3A.20FLT3/near/429349481\">said</a>:</p>\n<blockquote>\n<p>The repo and what you have on you computer are two different things. <code>lake exe cache get</code> will download everything you need inside the project folder</p>\n</blockquote>\n<p>Right, but I am asking because I did not even need to do that (the Lean 4 VS Code extension took care of it).</p>\n<p>I am just surprised: why if you want to use a specific version of Lean, say 4.6.0, can you set this up somewhere in your repo?</p>\n</blockquote>\n<p>yes, you can do whatever you want. For example I specified in <code>lakefile.lean</code> that it uses mathlib from the branch <code>RB/CIRM</code>.</p>",
        "id": 429350770,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711363714
    },
    {
        "content": "<p>I am not completely familiar with all the various options, but you can specify absolutely whatever you want, and <code>lake</code> will do the right thing.</p>",
        "id": 429350993,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711363793
    },
    {
        "content": "<p>Which <code>lakefile.lean</code> file? I don't see any <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 429350997,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1711363794
    },
    {
        "content": "<p>Sorry, I'm talking about the FLT3 repo</p>",
        "id": 429351112,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1711363818
    },
    {
        "content": "<p>OK, Riccardo has just explained it to me: his repo does contain the files in question, and indeed they have been cloned to my machine: they just don't show up in VS Code due to some special settings in the <code>.vscode/settings.json </code> file. These can be modified by hand but maybe Riccardo will update the repo at some point?</p>",
        "id": 429352491,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1711364158
    },
    {
        "content": "<p>Either way, it works!</p>",
        "id": 429354192,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1711364580
    },
    {
        "content": "<p>I'm also interested in working on this.</p>",
        "id": 429354834,
        "sender_full_name": "davidlowryduda",
        "timestamp": 1711364750
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/HgawXtDkCvOfxZ9K1QlISpcq/blue_node.png\">blue_node.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/HgawXtDkCvOfxZ9K1QlISpcq/blue_node.png\" title=\"blue_node.png\"><img src=\"/user_uploads/3121/HgawXtDkCvOfxZ9K1QlISpcq/blue_node.png\"></a></div><p>It will fill in a blue node in the (currently still private) FLT repo so I would be very happy if this made it to mathlib :-)</p>",
        "id": 429360269,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711366113
    },
    {
        "content": "<p>May we claim we did 20% of the work when flt is done?</p>",
        "id": 429361026,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711366311
    },
    {
        "content": "<p>I guess some nodes are harder than others...</p>",
        "id": 429362962,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711366782
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/429416-LFTCM-2024/topic/Project.20idea.3A.20FLT3/near/429350467\">said</a>:</p>\n<blockquote>\n<p>What you can start doing is to get the project and write here your github username</p>\n</blockquote>\n<p><a href=\"https://github.com/OmarHaddad\">https://github.com/OmarHaddad</a></p>",
        "id": 429392965,
        "sender_full_name": "Omar Haddad",
        "timestamp": 1711371783
    },
    {
        "content": "<p>We can have a coffee together after Amelia's talk and look for a place to start working</p>",
        "id": 429421811,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711376981
    },
    {
        "content": "<p><a href=\"https://github.com/riccardobrasca/flt3/\">https://github.com/riccardobrasca/flt3/</a></p>",
        "id": 429443782,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711381492
    },
    {
        "content": "<p><a href=\"https://link.springer.com/book/10.1007/978-1-4471-2131-2\">https://link.springer.com/book/10.1007/978-1-4471-2131-2</a></p>",
        "id": 429447760,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711382132
    },
    {
        "content": "<p>page 84</p>",
        "id": 429447770,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711382134
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">dvd_of_mul_dvd_mul_left</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CancelMonoidWithZero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">∣</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∣</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">hd</span><span class=\"o\">⟩</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">hd</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 429522731,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711406463
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">dvd_of_mul_dvd_mul_left</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CancelMonoidWithZero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">∣</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∣</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">hd</span><span class=\"o\">⟩</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_eq_mul_left_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hd</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hd</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"bp\">|</span> <span class=\"n\">hd</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hd</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exfalso</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hc</span> <span class=\"n\">hd</span>\n</code></pre></div>",
        "id": 429523923,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711407099
    },
    {
        "content": "<p>Opened a related PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/11677\">#11677</a></p>",
        "id": 429528013,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1711409139
    },
    {
        "content": "<p>We've just rewritten the MWE and we've not been able to reproduce the <code>#find_home!</code> \"bug\" we thought we found yesterday with <span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span>: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">dvd_of_mul_dvd_mul_left_1</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CancelMonoidWithZero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">∣</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∣</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">hd</span><span class=\"o\">⟩</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_eq_mul_left_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hd</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hd</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"bp\">|</span> <span class=\"n\">hd</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hd</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exfalso</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hc</span> <span class=\"n\">hd</span>\n\n<span class=\"bp\">#</span><span class=\"n\">find_home</span><span class=\"bp\">!</span> <span class=\"n\">dvd_of_mul_dvd_mul_left_1</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">dvd_of_mul_dvd_mul_left_2</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CancelMonoidWithZero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">∣</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∣</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">hd</span><span class=\"o\">⟩</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">hd</span><span class=\"o\">⟩</span>\n\n<span class=\"bp\">#</span><span class=\"n\">find_home</span><span class=\"bp\">!</span> <span class=\"n\">dvd_of_mul_dvd_mul_left_2</span>\n</code></pre></div>\n<p>They both return the following output: </p>\n<div class=\"codehilite\" data-code-language=\"nothing\"><pre><span></span><code>[Mathlib.Algebra.GroupWithZero.Divisibility,\n Mathlib.Algebra.Order.Ring.Pow,\n Mathlib.Data.Set.Pointwise.ListOfFn,\n Mathlib.Algebra.Order.Nonneg.Field,\n Mathlib.Algebra.Divisibility.Prod,\n Mathlib.Algebra.GroupWithZero.Power,\n Mathlib.Data.Nat.MaxPowDiv,\n Mathlib.Data.Int.Cast.Lemmas,\n Mathlib.Algebra.Group.NatPowAssoc,\n Mathlib.Algebra.Ring.Fin,\n Mathlib.Algebra.Order.Invertible,\n Mathlib.Tactic.NormNum.Basic,\n Mathlib.Algebra.EuclideanDomain.Instances,\n Mathlib.Data.Rat.Defs]\n</code></pre></div>",
        "id": 429530653,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1711410872
    },
    {
        "content": "<p>Maybe something was wrong with my computer, let's just ignore it.</p>",
        "id": 429531581,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711411491
    },
    {
        "content": "<p>The file is getting really slow. I've created the branch <code>faster</code> with a small modification that should make things a little faster, but with the cost of having to write a lot of <code>hζ</code>. Can you see if it looks faster on your computer?</p>",
        "id": 429533273,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711412664
    },
    {
        "content": "<p>Anyway I am going to sleep, see you tomorrow!</p>",
        "id": 429533288,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711412676
    },
    {
        "content": "<p>Sure, I’ll do it tomorrow morning.</p>",
        "id": 429533500,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1711412832
    },
    {
        "content": "<p>I'd be happy to look at any slow code if you want to post it here</p>",
        "id": 429589164,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711433211
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> it is the file <code>flt3.lean</code> in <a href=\"https://github.com/riccardobrasca/flt3\">https://github.com/riccardobrasca/flt3</a> (I just gave you push rights if you want to experiment). It can be the usual problems with rings of integers, or the fact that <code>η</code> and <code>λ</code> are both notation. In the branch <code>faster</code> I replaced <code>CyclotomicField 3 ℚ K</code> (a specific model) with a generic cyclotomic extension, and as usual this helps a bit.</p>\n<p>At any rate feel free to play with the code, but don't worry if you don't have time. Thanks!</p>",
        "id": 429598926,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711439398
    },
    {
        "content": "<p>Is there a specific declaration which is slow?</p>",
        "id": 429621173,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711447762
    },
    {
        "content": "<p>I don't have much experience diagnosing performance issues, but I'm seeing a <em>lot</em> of this in the slow bits.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">246859</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">HAdd</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n  <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">102071</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">Subalgebra.seminormedCommRing</span> <span class=\"n\">to</span> <span class=\"n\">SeminormedCommRing</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">110639</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">Subalgebra.normedCommRing</span> <span class=\"n\">to</span> <span class=\"n\">NormedCommRing</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n</code></pre></div>",
        "id": 429622624,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1711448261
    },
    {
        "content": "<p>Also <a href=\"https://github.com/riccardobrasca/flt3/blob/0e30cd88a041e8d8963094cbd4d3cd33b362c179/FLT3/FLT3.lean#L181\">this line</a> takes over five seconds to run on my machine. Looks like it's generating an 8000-line pretty-printer.</p>",
        "id": 429622928,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1711448377
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span>  is saying: <code>a_cube_b_cube_same_congr</code> is one of the first slow declarations</p>",
        "id": 429623408,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1711448542
    },
    {
        "content": "<p>Reminder for the other team: we are working on \"odd\" sorries. </p>\n<p>We have proved: </p>\n<ul>\n<li><a href=\"https://github.com/riccardobrasca/flt3/blob/f0b8a7e5ddd1454ff14723cc52f79667a1158a3c/FLT3/FLT3.lean#L418\">https://github.com/riccardobrasca/flt3/blob/f0b8a7e5ddd1454ff14723cc52f79667a1158a3c/FLT3/FLT3.lean#L418</a></li>\n<li><a href=\"https://github.com/riccardobrasca/flt3/blob/f0b8a7e5ddd1454ff14723cc52f79667a1158a3c/FLT3/FLT3.lean#L447\">https://github.com/riccardobrasca/flt3/blob/f0b8a7e5ddd1454ff14723cc52f79667a1158a3c/FLT3/FLT3.lean#L447</a></li>\n<li><a href=\"https://github.com/riccardobrasca/flt3/blob/f0b8a7e5ddd1454ff14723cc52f79667a1158a3c/FLT3/FLT3.lean#L477\">https://github.com/riccardobrasca/flt3/blob/f0b8a7e5ddd1454ff14723cc52f79667a1158a3c/FLT3/FLT3.lean#L477</a></li>\n<li><a href=\"https://github.com/riccardobrasca/flt3/blob/f0b8a7e5ddd1454ff14723cc52f79667a1158a3c/FLT3/FLT3.lean#L511\">https://github.com/riccardobrasca/flt3/blob/f0b8a7e5ddd1454ff14723cc52f79667a1158a3c/FLT3/FLT3.lean#L511</a></li>\n</ul>",
        "id": 429632373,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1711451715
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"585783\">Arend Mellendijk</span> <a href=\"#narrow/stream/429416-LFTCM-2024/topic/Project.20idea.3A.20FLT3/near/429622928\">said</a>:</p>\n<blockquote>\n<p>Also <a href=\"https://github.com/riccardobrasca/flt3/blob/0e30cd88a041e8d8963094cbd4d3cd33b362c179/FLT3/FLT3.lean#L181\">this line</a> takes over five seconds to run on my machine. Looks like it's generating an 8000-line pretty-printer.</p>\n</blockquote>\n<p>Maybe I can try to make it a def</p>",
        "id": 429636847,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711453541
    },
    {
        "content": "<p>I added some dirty hacks to speed things up (I golfed a proof and I increased the priority of some instances; this is just a workaround to make your lives a bit easier) (and I pushed)</p>",
        "id": 429647699,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711457435
    },
    {
        "content": "<p>yeah something is seriously messed up with that notation!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Let `K` be `CyclotomicField 3 ℚ` and let `η : 𝓞 K` be the root of unity given by</span>\n<span class=\"sd\">`IsCyclotomicExtension.zeta`. We also set `λ = η - 1` -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">hζ</span> <span class=\"o\">:=</span> <span class=\"n\">IsCyclotomicExtension.zeta_spec</span> <span class=\"mi\">3</span> <span class=\"n\">ℚ</span> <span class=\"n\">K</span>\n<span class=\"kn\">local</span> <span class=\"n\">notation3</span> <span class=\"s2\">\"η\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hζ.toInteger</span>\n\n<span class=\"n\">count_heartbeats</span> <span class=\"k\">in</span> <span class=\"c1\">-- Used 124986 heartbeats, which is less than the current maximum of 200000.</span>\n<span class=\"kn\">local</span> <span class=\"n\">notation3</span> <span class=\"s2\">\"λ\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">η</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 429648135,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711457563
    },
    {
        "content": "<p>I note for my group later that there is <code>IsCoprime.isUnit_of_dvd'</code>, which we wanted earlier.</p>",
        "id": 429648273,
        "sender_full_name": "davidlowryduda",
        "timestamp": 1711457611
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"585783\">Arend Mellendijk</span> <a href=\"#narrow/stream/429416-LFTCM-2024/topic/Project.20idea.3A.20FLT3/near/429622928\">said</a>:</p>\n<blockquote>\n<p>Also <a href=\"https://github.com/riccardobrasca/flt3/blob/0e30cd88a041e8d8963094cbd4d3cd33b362c179/FLT3/FLT3.lean#L181\">this line</a> takes over five seconds to run on my machine. Looks like it's generating an 8000-line pretty-printer.</p>\n</blockquote>\n<p>How can you see these 8000 lines? I can just see that it's taking 125K heartbeats. (I've minimised and asked in <a class=\"stream\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4\">#mathlib4</a> )</p>",
        "id": 429648739,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711457762
    },
    {
        "content": "<p>Opened <a href=\"https://github.com/leanprover-community/mathlib4/pull/11691\">#11691</a> undoing <a href=\"https://github.com/leanprover-community/mathlib4/pull/11677\">#11677</a> since we have found out that the lemmas</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/blob/044f1333d4e273d0d45e7fdeaf07266d7e043c32/Mathlib/Algebra/GroupWithZero/Divisibility.lean#L171-L179\">https://github.com/leanprover-community/mathlib4/blob/044f1333d4e273d0d45e7fdeaf07266d7e043c32/Mathlib/Algebra/GroupWithZero/Divisibility.lean#L171-L179</a></p>\n<p>already exist in the same file with different names <code>mul_dvd_mul_iff_left</code> and <code>mul_dvd_mul_iff_right</code>: </p>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/blob/0f2ac6785f4ecb39c798a30eee01dafa63c828d7/Mathlib/Algebra/GroupWithZero/Divisibility.lean#L46-L58\">https://github.com/leanprover-community/mathlib4/blob/0f2ac6785f4ecb39c798a30eee01dafa63c828d7/Mathlib/Algebra/GroupWithZero/Divisibility.lean#L46-L58</a></p>",
        "id": 429658230,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1711460715
    },
    {
        "content": "<p>Of course we have updated everything accordingly in the FLT3 repository.</p>",
        "id": 429658389,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1711460757
    },
    {
        "content": "<p>Ok, I added a bit to our proof. I'm lean-stuck on a simple (I think) result:</p>\n<p>If we know that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>λ</mi></mrow><annotation encoding=\"application/x-tex\">\\lambda</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">λ</span></span></span></span> is prime, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> is prime, and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>λ</mi></mrow><annotation encoding=\"application/x-tex\">\\lambda</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">λ</span></span></span></span> is not an associate of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> , then how can we convince lean that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> doesn't divide <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>λ</mi></mrow><annotation encoding=\"application/x-tex\">\\lambda</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">λ</span></span></span></span> ?</p>",
        "id": 429667656,
        "sender_full_name": "davidlowryduda",
        "timestamp": 1711463327
    },
    {
        "content": "<p>I expect this to be very straightforward.</p>",
        "id": 429667757,
        "sender_full_name": "davidlowryduda",
        "timestamp": 1711463355
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Prime.dvd_prime_iff_associated#doc\">docs#Prime.dvd_prime_iff_associated</a></p>",
        "id": 429668313,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711463537
    },
    {
        "content": "<p>Opened <a href=\"https://github.com/leanprover-community/mathlib4/pull/11695\">#11695</a> generalising <code>mul_dvd_mul_left</code> to <code>Monoid</code> since it was only implemented for <code>CommMonoid</code>.</p>",
        "id": 429669345,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1711463837
    },
    {
        "content": "<p><strong>Next step</strong></p>\n<p>Team Pietro can do this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">lambda_not_dvd_x</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">λ</span> <span class=\"bp\">∣</span> <span class=\"n\">S.x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lambda_not_dvd_y</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">λ</span> <span class=\"bp\">∣</span> <span class=\"n\">S.y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lambda_not_dvd_z</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">λ</span> <span class=\"bp\">∣</span> <span class=\"n\">S.z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lambda_not_dvd_w</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">λ</span> <span class=\"bp\">∣</span> <span class=\"n\">S.w</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>And the other team can do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">coprime_x_y</span> <span class=\"o\">:</span> <span class=\"n\">IsCoprime</span> <span class=\"n\">S.x</span> <span class=\"n\">S.y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">coprime_x_z</span> <span class=\"o\">:</span> <span class=\"n\">IsCoprime</span> <span class=\"n\">S.x</span> <span class=\"n\">S.z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">coprime_y_z</span> <span class=\"o\">:</span> <span class=\"n\">IsCoprime</span> <span class=\"n\">S.y</span> <span class=\"n\">S.z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">x_mul_y_mul_z</span> <span class=\"o\">:</span> <span class=\"n\">S.x</span> <span class=\"bp\">*</span> <span class=\"n\">S.y</span> <span class=\"bp\">*</span> <span class=\"n\">S.z</span> <span class=\"bp\">=</span> <span class=\"n\">S.u</span> <span class=\"bp\">*</span> <span class=\"n\">S.w</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Everybody agrees?</p>",
        "id": 429686511,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1711468290
    },
    {
        "content": "<p>PS: We did leave \"Lemma 4\" open, but we'll get back to it later <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 429686726,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1711468339
    },
    {
        "content": "<p>Yes, we’re working on the first one.</p>",
        "id": 429689996,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1711469206
    },
    {
        "content": "<p>We just pushed <code>coprime_x_y</code></p>",
        "id": 429699597,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1711472221
    },
    {
        "content": "<p>We proved <code>lambda_not_dvd_w</code>. We are working on <code>lambda_not_dvd_x</code> now.</p>",
        "id": 429700052,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1711472349
    },
    {
        "content": "<p>We just pushed <code>coprime_x_z</code></p>",
        "id": 429701124,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1711472687
    },
    {
        "content": "<p>As well as <code>coprime_y_z</code></p>",
        "id": 429702032,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1711473000
    },
    {
        "content": "<p>We just finished too.</p>",
        "id": 429704566,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1711473889
    },
    {
        "content": "<p>Just pushed <code>x_mul_y_mul_z</code></p>",
        "id": 429710317,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1711475773
    },
    {
        "content": "<p>You guys are on a roll!</p>",
        "id": 429712579,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1711476605
    },
    {
        "content": "<p>We finally proved <code>lambda_pow_dvd_a_add_b</code>!</p>",
        "id": 429732488,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1711484262
    },
    {
        "content": "<p>Sorry for being ignorant - where is the repository?<br>\nI'd like to catch up.</p>",
        "id": 429737733,
        "sender_full_name": "Harald Helfgott",
        "timestamp": 1711486240
    },
    {
        "content": "<p>Will I get an up-to-date version of everything if I type <br>\n\"git clone <a href=\"https://github.com/riccardobrasca/flt3.git\">https://github.com/riccardobrasca/flt3.git</a><br>\nlake exe cache get<br>\nlake build\"?</p>",
        "id": 429738697,
        "sender_full_name": "Harald Helfgott",
        "timestamp": 1711486625
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"603502\">Harald Helfgott</span> <a href=\"#narrow/stream/429416-LFTCM-2024/topic/Project.20idea.3A.20FLT3/near/429738697\">said</a>:</p>\n<blockquote>\n<p>Will I get an up-to-date version of everything if I type <br>\n\"git clone <a href=\"https://github.com/riccardobrasca/flt3.git\">https://github.com/riccardobrasca/flt3.git</a><br>\nlake exe cache get<br>\nlake build\"?</p>\n</blockquote>\n<p>Hi, we are proving the “ideals_coprime” lemma. </p>\n<p>I’ll write here when we finish and you can follow the procedure you wrote to get the latest version.</p>",
        "id": 429739560,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1711486968
    },
    {
        "content": "<p>OK<br>\nWhat will people be working on next?</p>",
        "id": 429739855,
        "sender_full_name": "Harald Helfgott",
        "timestamp": 1711487084
    },
    {
        "content": "<p>Just finished the proof of “ideals_coprime” lemma. We are going to push it in a few minutes.</p>",
        "id": 429740865,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1711487541
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"603502\">Harald Helfgott</span> <a href=\"#narrow/stream/429416-LFTCM-2024/topic/Project.20idea.3A.20FLT3/near/429739855\">said</a>:</p>\n<blockquote>\n<p>OK<br>\nWhat will people be working on next?</p>\n</blockquote>\n<p>Then we are going to solve as many sorries as can. </p>\n<p>If you want to contribute you can start from the last sorry in the file “FLT3.lean”.</p>",
        "id": 429741126,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1711487663
    },
    {
        "content": "<p>We’ve just pushed the proof for the “ideals_coprime” lemma.</p>",
        "id": 429741178,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1711487693
    },
    {
        "content": "<p>Together with <span class=\"user-mention\" data-user-id=\"311610\">@davidlowryduda</span>, <span class=\"user-mention\" data-user-id=\"704124\">@Omar Haddad</span>  and Alexis, we were planning to work on this next:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">X_ne_zero</span> <span class=\"o\">:</span> <span class=\"n\">S.X</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lambda_not_dvd_X</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">λ</span> <span class=\"bp\">∣</span> <span class=\"n\">S.X</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lambda_not_dvd_Y</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">λ</span> <span class=\"bp\">∣</span> <span class=\"n\">S.Y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lambda_not_dvd_Z</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">λ</span> <span class=\"bp\">∣</span> <span class=\"n\">S.Z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">coprime_Y_Z</span> <span class=\"o\">:</span> <span class=\"n\">IsCoprime</span> <span class=\"n\">S.Y</span> <span class=\"n\">S.Z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 429741912,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1711488044
    },
    {
        "content": "<p>So, wait: we are in the case where lambda does not divide X Y Z? Why is it then non-trivial to show that lambda does not divide any of X, Y or Z?</p>",
        "id": 429745302,
        "sender_full_name": "Harald Helfgott",
        "timestamp": 1711489692
    },
    {
        "content": "<p>Is ideals_coprime the statement that a minimal solution must have X, Y, Z coprime?</p>",
        "id": 429745636,
        "sender_full_name": "Harald Helfgott",
        "timestamp": 1711489865
    },
    {
        "content": "<p>I'm a bit confused by what is meant by 'minimal' here. In the main case of the proof, it is clear - exactly one of the three variables (say, z)  is divisible by lambda, and we order solutions by v_\\lambda(z).</p>",
        "id": 429746452,
        "sender_full_name": "Harald Helfgott",
        "timestamp": 1711490226
    },
    {
        "content": "<p>Not sure where the statement and proof of Lemma 2.7 are?</p>",
        "id": 429748486,
        "sender_full_name": "Harald Helfgott",
        "timestamp": 1711491238
    },
    {
        "content": "<p>We obviously need that.</p>",
        "id": 429748802,
        "sender_full_name": "Harald Helfgott",
        "timestamp": 1711491410
    },
    {
        "content": "<p>UPDATE: We have just proved and pushed the “span_x_mul_span_y_mul_span_z”.</p>",
        "id": 429748901,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1711491471
    },
    {
        "content": "<p>I am somehow not getting that new version (with span_x_mul_span_y_mul_span_z - what does that mean?)</p>\n<p>Forgive me for asking, but what does span_x_mul_span_y_mul_span_z mean? What does a Span mean here?</p>",
        "id": 429749884,
        "sender_full_name": "Harald Helfgott",
        "timestamp": 1711492073
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"603502\">Harald Helfgott</span> <a href=\"#narrow/stream/429416-LFTCM-2024/topic/Project.20idea.3A.20FLT3/near/429748486\">said</a>:</p>\n<blockquote>\n<p>Not sure where the statement and proof of Lemma 2.7 are?</p>\n</blockquote>\n<p>We don't prove Lemma 2.7. Instead, we are actually proving flt3 only in the second case in the reference, which is the case when <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>3</mn><mo>∣</mo><mi>a</mi><mi>b</mi><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">3 \\mid abc</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∣</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">ab</span><span class=\"mord mathnormal\">c</span></span></span></span>. I think I heard that the other case (which is what Lemma 2.7 handles easily) is already in mathlib, but I'm not sure.</p>",
        "id": 429750222,
        "sender_full_name": "davidlowryduda",
        "timestamp": 1711492280
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"603502\">Harald Helfgott</span> <a href=\"#narrow/stream/429416-LFTCM-2024/topic/Project.20idea.3A.20FLT3/near/429749884\">said</a>:</p>\n<blockquote>\n<p>I am somehow not getting that new version (with span_x_mul_span_y_mul_span_z - what does that mean?)</p>\n<p>Forgive me for asking, but what does span_x_mul_span_y_mul_span_z mean? What does a Span mean here?</p>\n</blockquote>\n<p>You can ask lean to define things for you. For example, hovering over span I get the message that span(u) is the ideal generated by the element u.</p>",
        "id": 429750356,
        "sender_full_name": "davidlowryduda",
        "timestamp": 1711492358
    },
    {
        "content": "<p>But we will need Lemma 2.7 even in the second case in the reference.</p>",
        "id": 429750413,
        "sender_full_name": "Harald Helfgott",
        "timestamp": 1711492412
    },
    {
        "content": "<p>In the last paragraph of the proof (I'm going by the English-language version - the one published by Springer), \"We finish by pointing out that...\" follows from Lemma 2.7.</p>",
        "id": 429750515,
        "sender_full_name": "Harald Helfgott",
        "timestamp": 1711492473
    },
    {
        "content": "<p>Looking at the document, I see that the implication from this last paragraph is in <code>by_kummer</code>, which is <code>sorry</code>d. Perhaps Kummer's lemma is also in mathlib? I don't know.</p>",
        "id": 429750868,
        "sender_full_name": "davidlowryduda",
        "timestamp": 1711492698
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"311610\">davidlowryduda</span> <a href=\"#narrow/stream/429416-LFTCM-2024/topic/Project.20idea.3A.20FLT3/near/429750868\">said</a>:</p>\n<blockquote>\n<p>Looking at the document, I see that the implication from this last paragraph is in <code>by_kummer</code>, which is <code>sorry</code>d. Perhaps Kummer's lemma is also in mathlib? I don't know.</p>\n</blockquote>\n<p>It is in cyclo, for p=3</p>",
        "id": 429750931,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711492748
    },
    {
        "content": "<p>Oh, nevermind --- it's in <code>cyclo</code>, and is called <code>eq_one_or_neg_one_of_unit_of_congruent</code></p>",
        "id": 429750940,
        "sender_full_name": "davidlowryduda",
        "timestamp": 1711492754
    },
    {
        "content": "<p>(As Riccardo also just noted)</p>",
        "id": 429750966,
        "sender_full_name": "davidlowryduda",
        "timestamp": 1711492772
    },
    {
        "content": "<p>I spent the last two years proving kummer's lemma in general (with 5 collaborators), but it is not going to be in mathlib soon <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 429751086,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711492833
    },
    {
        "content": "<p>I don't mean the \"therefore\" (that follows from what we have just \"finished by pointing out\" by Kummer) - I mean what we \"finish by pointing out\"; to point that out, we need Lemma 2.7, no?</p>",
        "id": 429751185,
        "sender_full_name": "Harald Helfgott",
        "timestamp": 1711492912
    },
    {
        "content": "<p>It follows from the last displayed equation by Lemma 2.7</p>",
        "id": 429751296,
        "sender_full_name": "Harald Helfgott",
        "timestamp": 1711492967
    },
    {
        "content": "<p>The \"we finish\" is the proof in <code>cyclo</code>, and the \"therefore...\" is the stubbed proof <code>by_kummer</code></p>",
        "id": 429751309,
        "sender_full_name": "davidlowryduda",
        "timestamp": 1711492981
    },
    {
        "content": "<p>Suppose I have <code>hx: p | x</code> and <code>hy: p | y</code>. I want to show that x and y are not coprime. How do I put these hypotheses together into some definition and tell lean that?</p>",
        "id": 429751427,
        "sender_full_name": "davidlowryduda",
        "timestamp": 1711493047
    },
    {
        "content": "<p>Sorry if I am being extremely obtuse, but it seems to me that eq_one_or_neg_one_of_unit_of_congruent (in cyclo) is the special case of Kummer that we need for the 'therefore...' step</p>",
        "id": 429751660,
        "sender_full_name": "Harald Helfgott",
        "timestamp": 1711493224
    },
    {
        "content": "<p>whereas ±1 ± u^4 ≡ 0 mod λ^2 follows from the displayed equation by (element not divisible by lambda)^3 =  ±1 mod λ^2, which is a weaker ve</p>",
        "id": 429751837,
        "sender_full_name": "Harald Helfgott",
        "timestamp": 1711493358
    },
    {
        "content": "<p>a weaker version of Lemma 2.7</p>",
        "id": 429751847,
        "sender_full_name": "Harald Helfgott",
        "timestamp": 1711493368
    },
    {
        "content": "<p>Have we proved at least that weaker version? It's not obvious how to prove it without proving Lemma 2.7 in the process.</p>",
        "id": 429752127,
        "sender_full_name": "Harald Helfgott",
        "timestamp": 1711493534
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"311610\">davidlowryduda</span> <a href=\"#narrow/stream/429416-LFTCM-2024/topic/Project.20idea.3A.20FLT3/near/429751427\">said</a>:</p>\n<blockquote>\n<p>Suppose I have <code>hx: p | x</code> and <code>hy: p | y</code>. I want to show that x and y are not coprime. How do I put these hypotheses together into some definition and tell lean that?</p>\n</blockquote>\n<p>I'm sure there is something better, but you could try <code>IsCoprime.isUnit_of_dvd'</code>?</p>",
        "id": 429752183,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1711493583
    },
    {
        "content": "<p>For that matter, we need the full power (such as it is) of Lemma 2.7 to get ±1 ± 1 ≡ u z^3 mod λ^4, two lines after (3.4) (it is an immediate consequence of (3.4) and Lemma 2.7).</p>",
        "id": 429753489,
        "sender_full_name": "Harald Helfgott",
        "timestamp": 1711494295
    },
    {
        "content": "<p>So we do need Lemma 2.7. Is it elsewhere in cyclo?</p>",
        "id": 429753519,
        "sender_full_name": "Harald Helfgott",
        "timestamp": 1711494317
    },
    {
        "content": "<p>We can discuss this tomorrow, but mathematically we are here: we have <code>a b c : 𝓞 K</code> (here <code>K</code> is a 3-rd cyclotomic extension of <code>ℚ</code>) such that <code>a^3+b^3=u*c^3</code>, where <code>u : (𝓞 K)ˣ</code> and <code>¬ λ ∣ a</code>, <code>¬ λ ∣ b</code> and <code>λ ∣ c</code>, where <code>λ = η - 1</code> and <code>η</code> is a fixed 3-rd root of unity (we know all the properties of <code>λ</code>, for example it is a prime). We also may (and do) assume that <code>λ ^ 2 ∣ a + b</code>.</p>",
        "id": 429755910,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711495727
    },
    {
        "content": "<p>we know that:</p>\n<ul>\n<li><code>λ ∣ (a + η * b)</code> </li>\n<li><code>λ ∣ (a + η ^ 2 * b)</code></li>\n<li><code>¬ λ ^ 2 ∣ (a + η * b)</code></li>\n<li><code>¬ λ ^ 2 ∣ (a + η ^ 2 * b)</code></li>\n</ul>",
        "id": 429755983,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711495787
    },
    {
        "content": "<p>so we write (here <code>t</code> is the multiplicity of <code>λ</code> in <code>c</code>, that we know it is at least <code>2</code>):</p>\n<ul>\n<li><code>a + b = λ^(3*t-2) * x</code></li>\n<li><code>a + η * b = λ * y</code></li>\n<li><code>a + η ^ 2 * b = λ * z</code></li>\n</ul>",
        "id": 429756135,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711495865
    },
    {
        "content": "<p>we know that <code>x</code>, <code>y</code> and <code>z</code> are pairwise coprime, and that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">w</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>where <code>c = λ ^ t * w</code></p>",
        "id": 429756197,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711495907
    },
    {
        "content": "<p>this is all done in Lean</p>",
        "id": 429756211,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711495913
    },
    {
        "content": "<p>Now, we move from (1) to the corresponding equality for ideals</p>",
        "id": 429756284,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711495955
    },
    {
        "content": "<p>so we have that the product of three pairwise coprime ideals is a cube in a PID, so each generator is a cube up to a unit, and this is the next math step</p>",
        "id": 429756343,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711496001
    },
    {
        "content": "<p>this is where we write <code>x = u₁ * X^3</code>, and similarly for <code>y</code> and <code>z</code></p>",
        "id": 429756427,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711496048
    },
    {
        "content": "<p>Kummer's lemma enters into the story because playing with <code>X</code>, <code>Y</code>, <code>Z</code> and <code>u₁</code>, <code>u₂</code>, <code>u₃</code>, we can prove that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Y</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span><span class=\"n\">u₄</span> <span class=\"bp\">*</span> <span class=\"n\">Z</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"n\">u₅</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span>\n</code></pre></div>\n<p>where <code>u₄</code> and <code>u₅</code> are explicit.</p>",
        "id": 429756836,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711496295
    },
    {
        "content": "<p>Now, this looks like the original equation (the one we want to do the descent on), but there is an extraneous <code>u₄</code>. Looking modulo <code>λ^2</code> and using kummer's lemma, we get <code>u₄ = ±1</code> (since cubes not <code>0</code> modulo <code>λ^2</code> are <code>±1 mod λ^2</code>, and nothing is <code>0</code> mod <code>λ^2</code> in this equation), so we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Y</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"n\">u₄</span> <span class=\"bp\">*</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"n\">u₅</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span>\n</code></pre></div>",
        "id": 429757048,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711496457
    },
    {
        "content": "<p>this essentially finishes the proof</p>",
        "id": 429757074,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711496474
    },
    {
        "content": "<p>Right, thanks. I don't want to sound like a broken record, but I'm still wondering why we are not proving Lemma 2.7: we are using it implicitly in the above to ensure that λ ^ 2 ∣ a + b (otherwise I don't see how you are justifying that).</p>",
        "id": 429757295,
        "sender_full_name": "Harald Helfgott",
        "timestamp": 1711496630
    },
    {
        "content": "<p>we have it</p>",
        "id": 429757310,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711496642
    },
    {
        "content": "<p>We have Lemma 2.7?</p>",
        "id": 429757383,
        "sender_full_name": "Harald Helfgott",
        "timestamp": 1711496671
    },
    {
        "content": "<p>it's called <code>lambda_sq_dvd_or_dvd_or_dvd</code></p>",
        "id": 429757389,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711496675
    },
    {
        "content": "<p>no, sorry</p>",
        "id": 429757397,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711496681
    },
    {
        "content": "<p>it is <code>a_cube_b_cube_same_congr</code></p>",
        "id": 429757412,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711496695
    },
    {
        "content": "<p>sorry again</p>",
        "id": 429757457,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711496731
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">λ</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">λ</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"bp\">λ</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n</code></pre></div>",
        "id": 429757461,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711496733
    },
    {
        "content": "<p>Ah well then!<br>\nThat clears matters</p>",
        "id": 429757553,
        "sender_full_name": "Harald Helfgott",
        "timestamp": 1711496774
    },
    {
        "content": "<p>this is in <code>cyclo</code>, and it is used to prove that we may assume <code>λ ^ 2 ∣ a + b</code> (this condition holding or not is the difference between what I call <code>Solution'</code> (without the condition) and <code>Solution</code>)</p>",
        "id": 429757568,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711496791
    },
    {
        "content": "<p>we know that given a <code>Solution'</code> we may construct a <code>Solution</code> with the same <code>c</code>, so in practice we can work with a <code>Solution</code></p>",
        "id": 429757608,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711496831
    },
    {
        "content": "<p>OK, I'm a happy camper. Will try to fall asleep now.</p>",
        "id": 429757718,
        "sender_full_name": "Harald Helfgott",
        "timestamp": 1711496898
    },
    {
        "content": "<p>same here. good night!</p>",
        "id": 429757731,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711496909
    },
    {
        "content": "<p>There's not much left to do, is there?</p>",
        "id": 429757740,
        "sender_full_name": "Harald Helfgott",
        "timestamp": 1711496918
    },
    {
        "content": "<p>I feel we are almost done, but maybe the devil is in the details</p>",
        "id": 429757766,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711496938
    },
    {
        "content": "<p>The devil will be getting it into mathlib :-)</p>",
        "id": 429761506,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711499870
    },
    {
        "content": "<p>Perhaps I went down a bit of a hole, but say I have the following status</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">Solution</span>\n<span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n<span class=\"n\">hp</span><span class=\"o\">:</span> <span class=\"n\">Prime</span> <span class=\"n\">p</span>\n<span class=\"n\">p_dvd_Y</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">Y</span> <span class=\"n\">S</span>\n<span class=\"n\">p_dvd_Z</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">Z</span> <span class=\"n\">S</span>\n<span class=\"n\">auxY</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">y</span> <span class=\"n\">S</span>\n<span class=\"n\">auxZ</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">z</span> <span class=\"n\">S</span>\n<span class=\"n\">gcd_isUnit</span><span class=\"o\">:</span> <span class=\"n\">IsUnit</span> <span class=\"o\">(</span><span class=\"n\">gcd</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"n\">S</span><span class=\"o\">))</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">¬</span><span class=\"n\">IsRelPrime</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This is obviously mathematically true: <code>auxY</code> and <code>auxZ</code> immediately give a common prime factor p. But I don't know how to use lean's definition of <code>IsRelPrime</code> to conclude.</p>",
        "id": 429802274,
        "sender_full_name": "davidlowryduda",
        "timestamp": 1711526287
    },
    {
        "content": "<p>You should probably look in the API for <code>IsRelPrime</code>, but yesterday I had the impression we can avoid this notion. We can have a look together after the talk.</p>",
        "id": 429803159,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711526694
    },
    {
        "content": "<p>I just added the three <code>lambda_not_dvd_*</code> proofs.</p>",
        "id": 429803975,
        "sender_full_name": "davidlowryduda",
        "timestamp": 1711527138
    },
    {
        "content": "<p>Listening to these details on structures is very interesting. But it also makes me appreciate the work <span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> did in setting up the structures (and the whole outline) for this project before this workshop.</p>",
        "id": 429810339,
        "sender_full_name": "davidlowryduda",
        "timestamp": 1711529685
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 429810359,
        "sender_full_name": "davidlowryduda",
        "timestamp": 1711529695
    },
    {
        "content": "<p><code>Solution'</code> is indeed a structure, and <code>Solution</code> extends <code>Solution'</code>. We never need to use <code>ext</code> but it can be added.</p>",
        "id": 429810530,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711529764
    },
    {
        "content": "<p>I introduced those just to avoid having an infoview with like 37 variables <code>a</code>, <code>b</code>, <code>c</code>, <code>u</code>, <code>x,</code> ... and 62 assumptions</p>",
        "id": 429810715,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711529852
    },
    {
        "content": "<p>In the alternate world where we made our own outline and setup as we went along, I think we wouldn't have realized that <code>Solution'</code> and <code>Solution</code> would be so good at managing complexity and information hiding. I'm reminded of the experience of first learning a programming language with custom datatypes --- judicious types makes the whole process much easier to reason about.</p>",
        "id": 429811818,
        "sender_full_name": "davidlowryduda",
        "timestamp": 1711530184
    },
    {
        "content": "<p>We're going to start proving these lemmas: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">x_eq_unit_mul_cube</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">u₁</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"n\">S.x</span> <span class=\"bp\">=</span> <span class=\"n\">u₁</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">y_eq_unit_mul_cube</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">u₂</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"n\">S.y</span> <span class=\"bp\">=</span> <span class=\"n\">u₂</span> <span class=\"bp\">*</span> <span class=\"n\">Y</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">z_eq_unit_mul_cube</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">u₃</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"n\">S.z</span> <span class=\"bp\">=</span> <span class=\"n\">u₃</span> <span class=\"bp\">*</span> <span class=\"n\">Z</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 429822232,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1711533649
    },
    {
        "content": "<p>We just pushed <code>X_ne_zero</code> and <code>coprime_Y_Z</code> (so we’re done with the list from last night).</p>",
        "id": 429826214,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1711534842
    },
    {
        "content": "<p>We're going to start proving</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">u₄'_isUnit</span> <span class=\"o\">:</span> <span class=\"n\">IsUnit</span> <span class=\"n\">S.u₄'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">u₅'_isUnit</span> <span class=\"o\">:</span> <span class=\"n\">IsUnit</span> <span class=\"n\">S.u₅'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 429826772,
        "sender_full_name": "davidlowryduda",
        "timestamp": 1711535039
    },
    {
        "content": "<p>We have added the following (still sorried) necessary lemmas: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">span_x_cube</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"n\">span</span> <span class=\"o\">{</span><span class=\"n\">S.x</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">I</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">span_y_cube</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"n\">span</span> <span class=\"o\">{</span><span class=\"n\">S.y</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">I</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">span_z_cube</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"n\">span</span> <span class=\"o\">{</span><span class=\"n\">S.z</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">I</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 429828964,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1711535765
    },
    {
        "content": "<p>We just pushed <code>u₅'_isUnit</code></p>",
        "id": 429831151,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1711536393
    },
    {
        "content": "<p>Fixed bugs in new lemmas. We’re almost there!</p>",
        "id": 429873571,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1711549992
    },
    {
        "content": "<p>Excellent! Did you push to GitHub?</p>",
        "id": 429884470,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1711552580
    },
    {
        "content": "<p>Yes</p>",
        "id": 429900184,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1711556749
    },
    {
        "content": "<p>I'm off to marseille, but I am sure you are doing an amazing job!</p>",
        "id": 429903069,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711557586
    },
    {
        "content": "<p>Riccardo: Are you off to Marseille to have bouillabaisse?</p>",
        "id": 429907109,
        "sender_full_name": "Harald Helfgott",
        "timestamp": 1711558806
    },
    {
        "content": "<p>I am seeing some friends, but no bouillabaisse paid by the conference only for me, don't worry <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 429907984,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711559060
    },
    {
        "content": "<p>Money is not the issue, fish is the issue. Can some of us get together and pay extra for CIRM <br>\nbouillabaisse?</p>",
        "id": 429919662,
        "sender_full_name": "Harald Helfgott",
        "timestamp": 1711563040
    },
    {
        "content": "<p>I have no idea, you can maybe ask</p>",
        "id": 429925113,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711565127
    },
    {
        "content": "<p>Merged <a href=\"https://github.com/leanprover-community/mathlib4/pull/11691\">#11691</a></p>",
        "id": 429939259,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1711570440
    },
    {
        "content": "<p>We’ve just proved and pushed the following lemmas:</p>\n<ul>\n<li>x_unit_mul_cube;</li>\n<li>y_unit_mul_cube;</li>\n<li>z_unit_mul_cube.</li>\n</ul>",
        "id": 429954922,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1711576065
    },
    {
        "content": "<p>Now we tackle “formula_2”.</p>",
        "id": 429956304,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1711576710
    },
    {
        "content": "<p>Oh, ok! But I think that David had some remarks about the statement of that lemma.</p>",
        "id": 429957739,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1711577449
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"556875\">@Pietro Monticone</span>  Just so you know, there is also this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">x_ne_y</span> <span class=\"o\">:</span> <span class=\"n\">S.x</span> <span class=\"bp\">≠</span> <span class=\"n\">S.y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">x_ne_z</span> <span class=\"o\">:</span> <span class=\"n\">S.x</span> <span class=\"bp\">≠</span> <span class=\"n\">S.z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">y_ne_z</span> <span class=\"o\">:</span> <span class=\"n\">S.y</span> <span class=\"bp\">≠</span> <span class=\"n\">S.z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 429958049,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1711577661
    },
    {
        "content": "<p>We know, we know. They are probably not needed. It was for the old proof of the latest lemmas we’ve proved and pushed.</p>\n<p>We added comments to remind ourselves to discuss the removal of those lemmas we believe are not necessary.</p>",
        "id": 429959006,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1711578214
    },
    {
        "content": "<p>Ok, great! In any case, the first message was meant to avoid you spending a significant amount of time on Formula 2 if it ends up being the wrong statement.</p>",
        "id": 429959529,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1711578496
    },
    {
        "content": "<p>Ok, thank you!</p>",
        "id": 429959833,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1711578664
    },
    {
        "content": "<p>I had noticed two things odd about <code>formula2</code> before. But looking more, I see that one of them was because we had misdefined <code>u_5</code> and <code>u_5'</code>. I just fixed that and pushed. (Interestingly, this didn't change the proof that u5 was a unit, as lean happily handled the missing inverse on its own).</p>",
        "id": 429960595,
        "sender_full_name": "davidlowryduda",
        "timestamp": 1711579042
    },
    {
        "content": "<p>That's the important one. The other observation is that in a vacuum, maybe I would have phrased formula1 differently. The way to transform formula2 into formula1 is to multiply formula2 by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>η</mi><mi>λ</mi><msub><mi>u</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\"> \\eta \\lambda u_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">η</span><span class=\"mord mathnormal\">λ</span><span class=\"mord\"><span class=\"mord mathnormal\">u</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> (and then to parse the new notation for u4 and u5 correctly).</p>",
        "id": 429960802,
        "sender_full_name": "davidlowryduda",
        "timestamp": 1711579137
    },
    {
        "content": "<p>I guess this also indicates how to transform formula1 into formula2. Either is fine, as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>η</mi><mi>λ</mi><msub><mi>u</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\eta \\lambda u_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">η</span><span class=\"mord mathnormal\">λ</span><span class=\"mord\"><span class=\"mord mathnormal\">u</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is prime (and more importantly, obviously nonzero).</p>",
        "id": 429961067,
        "sender_full_name": "davidlowryduda",
        "timestamp": 1711579281
    },
    {
        "content": "<p>But multipying by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>η</mi></mrow><annotation encoding=\"application/x-tex\">\\eta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">η</span></span></span></span> is odd, as it suggests that we should have used a different combination of roots of unity to obtain formula1. This doesn't matter though.</p>",
        "id": 429961208,
        "sender_full_name": "davidlowryduda",
        "timestamp": 1711579352
    },
    {
        "content": "<p>There aren't so many sorry's left!</p>",
        "id": 429961225,
        "sender_full_name": "davidlowryduda",
        "timestamp": 1711579362
    },
    {
        "content": "<p>When you're done you can try proving that 5 is a regular prime, then you can do FLT5 :-)</p>",
        "id": 429964440,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711581188
    },
    {
        "content": "<p>I think we know that it's a PID in that case, so know its regular. FLT7  is next one we need.</p>",
        "id": 429964773,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1711581412
    },
    {
        "content": "<p>We’ve just proved an additional lemma we will use to prove “formula2” whatever is the u_4 unit.</p>",
        "id": 429966979,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1711582841
    },
    {
        "content": "<p>I was thinking about the 6 remaining sorrys a bit. I think <code>formula2</code>, <code>by_kummer</code>, and <code>final</code> are all straightforward. But the three new lemmas saying that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo separator=\"true\">,</mo><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">x , y, z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span> are pairwise unequal is rather finicky.</p>",
        "id": 429967034,
        "sender_full_name": "davidlowryduda",
        "timestamp": 1711582885
    },
    {
        "content": "<p>Don’t worry about the three new lemmas. There almost certainly useless.</p>",
        "id": 429967174,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1711582957
    },
    {
        "content": "<p>Yes, I was thinking about how to prove the one result we use them for, but without them.</p>",
        "id": 429967240,
        "sender_full_name": "davidlowryduda",
        "timestamp": 1711582995
    },
    {
        "content": "<p>It's true without those assumptions. But it is convenient to iterate over the finite set in that way.</p>",
        "id": 429967274,
        "sender_full_name": "davidlowryduda",
        "timestamp": 1711583015
    },
    {
        "content": "<p>I wonder if there is enough PID and unique factorization stuff in lean to make it easy.</p>",
        "id": 429967405,
        "sender_full_name": "davidlowryduda",
        "timestamp": 1711583080
    },
    {
        "content": "<p>Anyhow, that's a job for tomorrow me. Now I sleep.</p>",
        "id": 429967422,
        "sender_full_name": "davidlowryduda",
        "timestamp": 1711583093
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"311610\">davidlowryduda</span> <a href=\"#narrow/stream/429416-LFTCM-2024/topic/Project.20idea.3A.20FLT3/near/429967274\">said</a>:</p>\n<blockquote>\n<p>It's true without those assumptions. But it is convenient to iterate over the finite set in that way.</p>\n</blockquote>\n<p>We have already worked around that with the following lemmas:</p>\n<ul>\n<li>x_unit_mul_cube;</li>\n<li>y_unit_mul_cube;</li>\n<li>z_unit_mul_cube.</li>\n</ul>",
        "id": 429967493,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1711583130
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"311610\">davidlowryduda</span> <a href=\"#narrow/stream/429416-LFTCM-2024/topic/Project.20idea.3A.20FLT3/near/429967422\">said</a>:</p>\n<blockquote>\n<p>Anyhow, that's a job for tomorrow me. Now I sleep.</p>\n</blockquote>\n<p>Sure. Se you tomorrow.</p>",
        "id": 429967575,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1711583166
    },
    {
        "content": "<p>Oh, you pushed these away in the last 20 minutes or so! That's wonderful.</p>",
        "id": 429967641,
        "sender_full_name": "davidlowryduda",
        "timestamp": 1711583235
    },
    {
        "content": "<p>Outstanding</p>",
        "id": 429967645,
        "sender_full_name": "davidlowryduda",
        "timestamp": 1711583238
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"556875\">Pietro Monticone</span> <a href=\"#narrow/stream/429416-LFTCM-2024/topic/Project.20idea.3A.20FLT3/near/429966979\">said</a>:</p>\n<blockquote>\n<p>We’ve just proved an additional lemma we will use to prove “formula2” whatever is the u_4 unit.</p>\n</blockquote>\n<p>Yep, that is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsCyclotomicExtension.Rat.five_pid#doc\">docs#IsCyclotomicExtension.Rat.five_pid</a></p>",
        "id": 429969682,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711584369
    },
    {
        "content": "<p>Sorry, I wanted to answer to Chris comment</p>",
        "id": 429969751,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711584412
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"389019\">Chris Birkbeck</span> <a href=\"#narrow/stream/429416-LFTCM-2024/topic/Project.20idea.3A.20FLT3/near/429964773\">said</a>:</p>\n<blockquote>\n<p>I think we know that it's a PID in that case, so know its regular. FLT7  is next one we need.</p>\n</blockquote>\n<p>This message</p>",
        "id": 429969790,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711584427
    },
    {
        "content": "<p>We’ve just pushed a partial proof of “by_kummer”.</p>",
        "id": 429972313,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1711586262
    },
    {
        "content": "<p>I pushed a proof of <code>final</code>.</p>",
        "id": 430032721,
        "sender_full_name": "davidlowryduda",
        "timestamp": 1711620155
    },
    {
        "content": "<p>Now just <code>formula2</code> and <code>by_kummer</code> are left. I'm not sure how the ending of <code>by_kummer</code> is supposed to go mathematically though.</p>",
        "id": 430032835,
        "sender_full_name": "davidlowryduda",
        "timestamp": 1711620196
    },
    {
        "content": "<p>We’re working on “formula2” and “by_kummer”.</p>",
        "id": 430033266,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1711620343
    },
    {
        "content": "<p>Locally fixed those ugly timeout errors (thanks <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span>! )</p>",
        "id": 430042370,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1711623920
    },
    {
        "content": "<p>I just pushed a longer partial <code>formula2</code>, with almost everything worked out except for exponent arithmetic</p>",
        "id": 430082879,
        "sender_full_name": "davidlowryduda",
        "timestamp": 1711636818
    },
    {
        "content": "<p>omega should take care of that</p>",
        "id": 430082950,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711636836
    },
    {
        "content": "<p>I had hoped that too, but it complains when I try. But last time I tried to reason with exponents you did give me some one line thing that solved my woes.</p>",
        "id": 430083220,
        "sender_full_name": "davidlowryduda",
        "timestamp": 1711636906
    },
    {
        "content": "<p>let me have a look</p>",
        "id": 430083249,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711636913
    },
    {
        "content": "<p>unless some of you wants to finish it :)</p>",
        "id": 430083376,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711636936
    },
    {
        "content": "<p>I’m gonna try it</p>",
        "id": 430083665,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1711637009
    },
    {
        "content": "<p>it is <em>very</em> similar (the exact same thing?) as what we did yesterday night</p>",
        "id": 430083944,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711637081
    },
    {
        "content": "<p>Anyway, stuff like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"bp\">λ</span> <span class=\"bp\">*</span> <span class=\"n\">η</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">u₂</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Y</span> <span class=\"n\">S</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span>\n           <span class=\"bp\">+</span>\n           <span class=\"bp\">λ</span> <span class=\"bp\">*</span> <span class=\"n\">η</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">u₃</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Z</span> <span class=\"n\">S</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span>\n           <span class=\"bp\">+</span>\n           <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">u₁</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"n\">S</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"bp\">λ</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">multiplicity</span> <span class=\"n\">S</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n           <span class=\"bp\">=</span>\n           <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">u₁</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"n\">S</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"bp\">λ</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">multiplicity</span> <span class=\"n\">S</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n           <span class=\"bp\">+</span>\n           <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">u₂</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">η</span> <span class=\"bp\">*</span> <span class=\"n\">Y</span> <span class=\"n\">S</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"bp\">λ</span>\n           <span class=\"bp\">+</span>\n           <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">u₃</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">η</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">Z</span> <span class=\"n\">S</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"bp\">λ</span>  <span class=\"kd\">by</span> <span class=\"n\">ring_nf</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">formula1</span> <span class=\"n\">S</span>\n</code></pre></div>\n<p>can be done via</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">convert</span> <span class=\"n\">formula1</span> <span class=\"n\">S</span> <span class=\"n\">using</span> <span class=\"mi\">1</span>\n  <span class=\"n\">ring</span>\n</code></pre></div>",
        "id": 430085651,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711637501
    },
    {
        "content": "<p>haha, that seems like a pretty substantial improvement</p>",
        "id": 430085772,
        "sender_full_name": "davidlowryduda",
        "timestamp": 1711637525
    },
    {
        "content": "<p>Solved the sorry by </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">tmp</span> <span class=\"o\">:</span> <span class=\"bp\">λ</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">u₁</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">multiplicity</span> <span class=\"n\">S</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n             <span class=\"bp\">=</span>\n             <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">u₁</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"n\">S</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"bp\">λ</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">multiplicity</span> <span class=\"n\">S</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span>\n    <span class=\"n\">congr</span> <span class=\"mi\">1</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_pow</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">S.X</span> <span class=\"bp\">^</span> <span class=\"n\">_</span><span class=\"o\">)]</span>\n    <span class=\"n\">congr</span> <span class=\"mi\">1</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">pow_mul</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">pow_succ</span><span class=\"o\">]</span>\n    <span class=\"n\">congr</span> <span class=\"mi\">1</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">two_le_multiplicity</span> <span class=\"n\">S</span>\n    <span class=\"n\">omega</span>\n</code></pre></div>",
        "id": 430088258,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1711638145
    },
    {
        "content": "<p>Now we need to tackle <code>by_kummer</code>.</p>",
        "id": 430088455,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1711638193
    },
    {
        "content": "<p>We should get together after the talk!</p>",
        "id": 430089022,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1711638340
    },
    {
        "content": "<p>There is nothing special in <code>by_kumme</code>, don't worry</p>",
        "id": 430089037,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711638344
    },
    {
        "content": "<p>Ah, it really was similar to what you did yesterday. I haven't used <code>congr</code> much.</p>",
        "id": 430089891,
        "sender_full_name": "davidlowryduda",
        "timestamp": 1711638592
    },
    {
        "content": "<p>Here, the third time you used it, it recognized that it was sufficient to work with just the exponents. This was the secret!</p>",
        "id": 430089997,
        "sender_full_name": "davidlowryduda",
        "timestamp": 1711638614
    },
    {
        "content": "<p>Very nice.</p>",
        "id": 430090017,
        "sender_full_name": "davidlowryduda",
        "timestamp": 1711638620
    },
    {
        "content": "<p>I've removed the three commented <code>sorry</code>'s from the file (the ones from yesterday), you can pull the changes from GitHub.</p>",
        "id": 430130943,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1711647693
    },
    {
        "content": "<p>Great. Thanks.</p>",
        "id": 430132514,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1711648174
    },
    {
        "content": "<p>Oh btw, we finished <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span></p>",
        "id": 430137612,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1711649717
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"638899\">@Lorenzo Luccioli</span> and I have just finished writing a sketch for our tomorrow's presentation. </p>\n<p>You can find it here <a href=\"https://github.com/riccardobrasca/flt3/blob/master/FLT3/README.md\">https://github.com/riccardobrasca/flt3/blob/master/FLT3/README.md</a></p>",
        "id": 430178581,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1711669222
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"556875\">@Pietro Monticone</span> and <span class=\"user-mention\" data-user-id=\"638899\">@Lorenzo Luccioli</span> Just updated the <code>md</code> file. Please double check for typos and omissions on my part <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span> Thanks!</p>",
        "id": 430208301,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1711692928
    },
    {
        "content": "<p>I've just polished and pushed the final version of the talk. <a href=\"https://github.com/riccardobrasca/flt3/tree/master/FLT3\">https://github.com/riccardobrasca/flt3/tree/master/FLT3</a></p>",
        "id": 430220280,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1711700622
    },
    {
        "content": "<p>I've talked with <span class=\"user-mention\" data-user-id=\"638899\">@Lorenzo Luccioli</span> , <span class=\"user-mention\" data-user-id=\"311610\">@davidlowryduda</span> and <span class=\"user-mention\" data-user-id=\"513540\">@Flo (Florent Schaffhauser)</span> a few minutes ago and we agreed on the following plan: </p>\n<ol>\n<li>I'll start the lightning talk going through Motivation and Overview  projecting VS Code from my laptop and switching between FLT3.lean and the Markdown document. </li>\n<li>Anybody can interrupt whenever needed </li>\n<li><span class=\"user-mention\" data-user-id=\"638899\">@Lorenzo Luccioli</span>  will present the Lean Showcase we prepared yesterday night</li>\n</ol>",
        "id": 430220988,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1711701050
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"556875\">Pietro Monticone</span> <a href=\"#narrow/stream/429416-LFTCM-2024/topic/Project.20idea.3A.20FLT3/near/430220280\">said</a>:</p>\n<blockquote>\n<p>I've just polished and pushed the final version of the talk. <a href=\"https://github.com/riccardobrasca/flt3/tree/master/FLT3\">https://github.com/riccardobrasca/flt3/tree/master/FLT3</a></p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"556875\">@Pietro Monticone</span> <br>\nGreat, thanks! But I guess you did not pull before editing the file? Because the modifications I made this morning are no longer there (I had renamed the file to <code>FinalPres.md</code>).</p>",
        "id": 430221574,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1711701373
    },
    {
        "content": "<p>Ah, good catch</p>",
        "id": 430221749,
        "sender_full_name": "davidlowryduda",
        "timestamp": 1711701441
    },
    {
        "content": "<p>Oh sorry. I didn't noticed. I'll fix it.</p>",
        "id": 430221784,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1711701451
    },
    {
        "content": "<p>No worries <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span></p>",
        "id": 430221833,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1711701472
    },
    {
        "content": "<p>Done <a href=\"https://github.com/riccardobrasca/flt3/tree/master/FLT3\">https://github.com/riccardobrasca/flt3/tree/master/FLT3</a></p>",
        "id": 430222048,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1711701565
    },
    {
        "content": "<p>OK, I'll remove <code>FinalPres.md</code>then <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 430222485,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1711701793
    },
    {
        "content": "<p>Done (plus some markdown cleanup).</p>",
        "id": 430222661,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1711701885
    },
    {
        "content": "<p>Pushed final version with direct links to slide comments so that <span class=\"user-mention\" data-user-id=\"638899\">@Lorenzo Luccioli</span> can easily and quickly switch from the README.md file (in preview mode) to the relevant line in the FLT3.lean script. <a href=\"https://github.com/riccardobrasca/flt3/tree/master/FLT3\">https://github.com/riccardobrasca/flt3/tree/master/FLT3</a></p>",
        "id": 430223633,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1711702404
    },
    {
        "content": "<p>Nice!</p>",
        "id": 430223881,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1711702542
    },
    {
        "content": "<p>Added reference to Theorem 2.6 p.84 in Hindry's book.</p>",
        "id": 430226142,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1711703724
    },
    {
        "content": "<p>I've open <a href=\"https://github.com/leanprover-community/mathlib4/pull/11767\">#11767</a>. You can have a look and comment/improve it. I can show you how to get it on your computer if you need it. I didn't pay too much attention to the names, so feel free to check them.</p>",
        "id": 430239250,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711710062
    },
    {
        "content": "<p>I'll try to setup the blueprint for the FLT3 project in order to understand how it works and force myself to learn at least some of the underlying mathematics I don't know yet.</p>",
        "id": 430240176,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1711710482
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/429416-LFTCM-2024/topic/Project.20idea.3A.20FLT3/near/430239250\">said</a>:</p>\n<blockquote>\n<p>I've open <a href=\"https://github.com/leanprover-community/mathlib4/pull/11767\">#11767</a>. You can have a look and comment/improve it. I can show you how to get it on your computer if you need it. I didn't pay too much attention to the names, so feel free to check them.</p>\n</blockquote>\n<p>What's the difference between: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">!</span>\n<span class=\"cm\">Documentation comments...</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>and </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/--</span>\n<span class=\"sd\">Documentation comments...</span>\n<span class=\"sd\">-/</span>\n</code></pre></div>\n<p>?</p>",
        "id": 430242059,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1711711600
    },
    {
        "content": "<p>Probably something is displayed differently in the webpage, I don't know the details.</p>",
        "id": 430242148,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711711652
    },
    {
        "content": "<p>I copy/paste the same header since 3 years.</p>",
        "id": 430242168,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711711668
    },
    {
        "content": "<p>One of them shows up on the documentation web pages but is not attached to any declaration. The other is attached to a declaration so it also shows up when you hover over the declaration</p>",
        "id": 430242270,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711711713
    },
    {
        "content": "<p>eg any definition in mathlib will have a <code>/--</code> before it and then wherever it appears in mathlib you can hover over it to find out what it is</p>",
        "id": 430242308,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711711756
    },
    {
        "content": "<p>I am updating mathlib, so we can use the \"normal\" version. This means that after the next <code>git pull</code> you have to do <code>lake exe cache get</code>.</p>\n<p>Funny thing: yesterday the definition of monoid changed in mathlib (!) so a couple of proofs broke, but nothing serious.</p>",
        "id": 430254947,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711718309
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/429416-LFTCM-2024/topic/Project.20idea.3A.20FLT3/near/430242270\">said</a>:</p>\n<blockquote>\n<p>One of them shows up on the documentation web pages but is not attached to any declaration. The other is attached to a declaration so it also shows up when you hover over the declaration</p>\n</blockquote>\n<p>I see. Thanks.</p>",
        "id": 430284577,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1711730950
    },
    {
        "content": "<p>Anyway thanks everybody for all the work! I didn't see some of you yesterday afternoon and I didn't say goodbye in person, but it was really a pleasure to work with  you.</p>\n<p>And don't forget we want all of this in mathlib! :D</p>",
        "id": 430385921,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711801566
    },
    {
        "content": "<p>Thank you for your amazing support and supervision! Learnt a lot.</p>",
        "id": 430386003,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1711801650
    },
    {
        "content": "<p>It was a great week indeed <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span>🧑🏼‍💻 Let’s do this again soon!</p>",
        "id": 430386094,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1711801743
    },
    {
        "content": "<p>I’ll add documentation to <a href=\"https://github.com/leanprover-community/mathlib4/pull/11767\">#11767</a> as soon as I can.</p>",
        "id": 430386132,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1711801790
    },
    {
        "content": "<p>Just opened <a href=\"https://github.com/leanprover-community/mathlib4/pull/11791\">#11791</a> to <code>RB/flt3_reduction</code> adding the first two tentative docstrings. If they're considered Mathlib-quality I'm going to document as many lemmas as I can this evening.</p>",
        "id": 430394019,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1711808546
    },
    {
        "content": "<p>Just as a side note, PRs to another branch than <code>master</code> don't really fit in our workflow. Of course there's nothing wrong with using them, but the usual process is to ask \"is it fine if I push [foo] on your branch\" and if the answer is yes you can just do it directly.</p>",
        "id": 430407607,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1711820740
    },
    {
        "content": "<p>Ops, I didn’t know that. Sorry.</p>",
        "id": 430408421,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1711821486
    },
    {
        "content": "<p>No reason to be!</p>",
        "id": 430408759,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1711821767
    },
    {
        "content": "<p>Closed <a href=\"https://github.com/leanprover-community/mathlib4/pull/11791\">#11791</a>. I'll ask directly when necessary then.</p>",
        "id": 430418173,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1711830667
    },
    {
        "content": "<p>I have managed to get blueprint to work (<a href=\"https://github.com/pitmonticone/FLT3\">https://github.com/pitmonticone/FLT3</a>) after encountering the problems forewarned by <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span>.</p>\n<p>When I find the time, I will open a PR here <a href=\"https://github.com/PatrickMassot/leanblueprint\">https://github.com/PatrickMassot/leanblueprint</a> to include the solution in the README so that others do not have to face the same issues.</p>",
        "id": 430430663,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1711844203
    },
    {
        "content": "<p>Done <a href=\"https://github.com/PatrickMassot/leanblueprint/pull/16\">https://github.com/PatrickMassot/leanblueprint/pull/16</a></p>",
        "id": 430433024,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1711846820
    },
    {
        "content": "<p>I believe I’ve done everything correctly (<a href=\"https://github.com/pitmonticone/FLT3\">https://github.com/pitmonticone/FLT3</a> ) but I don’t get why the GitHub page returns a 404 error (<a href=\"https://pitmonticone.github.io/FLT3\">https://pitmonticone.github.io/FLT3</a>). </p>\n<p>Could it be due to the fact that I’ve not added anything in content.tex yet?</p>",
        "id": 430580504,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1711971516
    },
    {
        "content": "<p>It's because that's not the right address for the blueprint: <a href=\"https://pitmonticone.github.io/FLT3/blueprint/\">https://pitmonticone.github.io/FLT3/blueprint/</a></p>",
        "id": 430581235,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1711971972
    },
    {
        "content": "<p>leanblueprint does not presume that's it's the only thing on you website and lets you have your own index page if you want</p>",
        "id": 430581341,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1711972051
    },
    {
        "content": "<p>Ops <span aria-label=\"man facepalming\" class=\"emoji emoji-1f926-200d-2642\" role=\"img\" title=\"man facepalming\">:man_facepalming:</span> </p>\n<p>Thank you very much!</p>",
        "id": 430581360,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1711972069
    },
    {
        "content": "<p>(and in your case there is no index.html at the root, so 404)</p>",
        "id": 430581370,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1711972081
    },
    {
        "content": "<p>And your doc is at <a href=\"https://pitmonticone.github.io/FLT3/docs/\">https://pitmonticone.github.io/FLT3/docs/</a></p>",
        "id": 430581463,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1711972116
    },
    {
        "content": "<p>I wrote about this a bit: <a href=\"https://davidlowryduda.com/flt3-at-lftcm2024/\">https://davidlowryduda.com/flt3-at-lftcm2024/</a></p>",
        "id": 430690416,
        "sender_full_name": "davidlowryduda",
        "timestamp": 1712021112
    },
    {
        "content": "<p>This was fun! I suppose I should reexamine our code and start adjusting it for mathlib, including docs and conventions</p>",
        "id": 430690498,
        "sender_full_name": "davidlowryduda",
        "timestamp": 1712021148
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"311610\">@davidlowryduda</span> thanks for writing this! Just a small comment: the fact that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">[</mo><msub><mi>ζ</mi><mn>3</mn></msub><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}[\\zeta_3]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0738em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span> is a PID (or UFD, for ring of integers these notions are equivalent) is of course a key point, but to apply Minkowski's criterion one has first of all to know that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">[</mo><msub><mi>ζ</mi><mn>3</mn></msub><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}[\\zeta_3]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0738em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span> is the ring of integers of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">(</mo><msub><mi>ζ</mi><mn>3</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}(\\zeta_3)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Q</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0738em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>, something true but non obvious. And luckily this is already in mathlib!</p>",
        "id": 430728489,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1712043120
    },
    {
        "content": "<p>I am PRing the prerequisites, (see <a href=\"https://github.com/leanprover-community/mathlib4/pull/11767\">#11767</a> and <a href=\"https://github.com/leanprover-community/mathlib4/pull/11792\">#11792</a>, both marked awaiting author, but I will take care of the comments today). I agree that making <code>η</code> a unit will probably golf some of the proofs, especially those at the end (we need to find a way to convince automation to use <code>η^2+η+1</code>!).</p>",
        "id": 430729657,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1712043579
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"311610\">davidlowryduda</span> <a href=\"#narrow/stream/429416-LFTCM-2024/topic/Project.20idea.3A.20FLT3/near/430690498\">said</a>:</p>\n<blockquote>\n<p>This was fun! I suppose I should reexamine our code and start adjusting it for mathlib, including docs and conventions</p>\n</blockquote>\n<p>I’ll do it too + the blueprint as mentioned above. Here is the (now working) empty website: <a href=\"https://pitmonticone.github.io/FLT3\">https://pitmonticone.github.io/FLT3</a>.</p>",
        "id": 430775722,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1712059624
    },
    {
        "content": "<p>Writing the blueprint for FLT3, I realised that the lemma <code>ideals_coprime</code> (<a href=\"https://github.com/riccardobrasca/flt3/blob/23ef890df76a7383c3d8bc235abe7933df04336f/FLT3/FLT3.lean#L686C1-L709C16\">https://github.com/riccardobrasca/flt3/blob/23ef890df76a7383c3d8bc235abe7933df04336f/FLT3/FLT3.lean#L686C1-L709C16</a>) is useless and can be removed without breaking anything. </p>\n<p>I'm going to push the change to the original repository in a minute.</p>",
        "id": 431699549,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1712431630
    },
    {
        "content": "<p>Done <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span></p>",
        "id": 431699661,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1712431752
    },
    {
        "content": "<p>And the same is true for the lemma <code>x_mul_y_mul_z </code> <a href=\"https://github.com/riccardobrasca/flt3/blob/23ef890df76a7383c3d8bc235abe7933df04336f/FLT3/FLT3.lean#L670C1-L681C44\">https://github.com/riccardobrasca/flt3/blob/23ef890df76a7383c3d8bc235abe7933df04336f/FLT3/FLT3.lean#L670C1-L681C44</a> of course (since it's completely substituted by <code>x_mul_y_mul_z_eq_u_w_pow_three</code>). I'm going to remove that too.</p>",
        "id": 431700932,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1712432939
    },
    {
        "content": "<p>Done <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span></p>",
        "id": 431702159,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1712433902
    },
    {
        "content": "<p>Super nice <span class=\"user-mention\" data-user-id=\"556875\">@Pietro Monticone</span> ! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 431703713,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1712435630
    },
    {
        "content": "<p>I've just finished documenting the <code>Cyclo.lean</code> file.  <a href=\"https://github.com/pitmonticone/FLT3/blob/master/FLT3/Cyclo.lean\">https://github.com/pitmonticone/FLT3/blob/master/FLT3/Cyclo.lean</a></p>\n<p>I'm going to push the the fully documented version to the original repository <a href=\"https://github.com/riccardobrasca/flt3/blob/master/FLT3/Cyclo.lean\">https://github.com/riccardobrasca/flt3/blob/master/FLT3/Cyclo.lean</a>.</p>",
        "id": 431781907,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1712502810
    },
    {
        "content": "<p>The documentation of <code>Cyclo.lean</code> is going to be published in a few minutes here <a href=\"https://pitmonticone.github.io/FLT3/docs/FLT3/Cyclo.html\">https://pitmonticone.github.io/FLT3/docs/FLT3/Cyclo.html</a>.</p>",
        "id": 431782284,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1712503004
    },
    {
        "content": "<p>Done <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span></p>",
        "id": 431782943,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1712503357
    },
    {
        "content": "<p>Thanks for doing this!</p>",
        "id": 431792861,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1712508099
    },
    {
        "content": "<p>Just a comment: in my opinion the documentation should provide the bridge between the mathematical statement and the lean statement (of course it's not always clear what this means, since we have different mental images), and I have the impression your doc are a literal translation of the lean statement</p>",
        "id": 431793197,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1712508250
    },
    {
        "content": "<p>For example, the difference between eta and zeta is mathematically irrelevant. And even if it should be mentioned once, I think that keeping repeating it just makes things more difficult to parse</p>",
        "id": 431793334,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1712508321
    },
    {
        "content": "<p>But again, thanks for all the work, this is just a suggestion!</p>",
        "id": 431793399,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1712508349
    },
    {
        "content": "<p>Sure, I thought the blueprint should provide the bridge between the math and lean.</p>",
        "id": 431793522,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1712508390
    },
    {
        "content": "<p>I thought \"Since we are documenting the Lean code...\"</p>",
        "id": 431793623,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1712508441
    },
    {
        "content": "<p>Also, </p>\n<blockquote>\n<p>Let <code>u</code> be a unit in <code>(𝓞 K)ˣ</code>.`</p>\n</blockquote>\n<p>shows up in various statements in the documentation, where the statement doesn't involve <code>u</code>.<br>\nMaybe along the lines of what <span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> , would be better to state all the variables up top.</p>",
        "id": 432259650,
        "sender_full_name": "Edgar Costa",
        "timestamp": 1712673593
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"598091\">Edgar Costa</span> <a href=\"#narrow/stream/429416-LFTCM-2024/topic/Project.20idea.3A.20FLT3/near/432259650\">said</a>:</p>\n<blockquote>\n<p>Also, </p>\n<blockquote>\n<p>Let <code>u</code> be a unit in <code>(𝓞 K)ˣ</code>.`</p>\n</blockquote>\n<p>shows up in various statements in the documentation, where the statement doesn't involve <code>u</code>.<br>\nMaybe along the lines of what <span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> , would be better to state all the variables up top.</p>\n</blockquote>\n<p>Ops, you're totally right. I'm going to fix that in a few minutes.</p>",
        "id": 432285652,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1712679833
    },
    {
        "content": "<p>Done <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span></p>",
        "id": 432286362,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1712680024
    },
    {
        "content": "<p>The dependency graph skeleton (without all the informal statements and proofs) should be finished in a few days <a href=\"https://pitmonticone.github.io/FLT3/blueprint/dep_graph_document.html\">https://pitmonticone.github.io/FLT3/blueprint/dep_graph_document.html</a></p>",
        "id": 432289759,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1712681027
    },
    {
        "content": "<p>Moved <code>lambda_ne_zero</code> from FLT3.lean to Cyclo.lean as we wrote in a comment and modified a few lemmas in FLT3.lean accordingly (<code>lambda_ne_zero</code> to <code>(lambda_ne_zero hζ)</code>) <a href=\"https://github.com/riccardobrasca/flt3/commits/master\">https://github.com/riccardobrasca/flt3/commits/master</a></p>",
        "id": 432602131,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1712790276
    },
    {
        "content": "<p>I've just verified that the lemma <code>span_x_mul_span_y_mul_span_z</code> is useless too. I'm going to remove it. <a href=\"https://github.com/pitmonticone/FLT3/blob/d37f6e39c4c6922ddbd3c8539bbab65d11628111/FLT3/FLT3.lean#L715-L724\">https://github.com/pitmonticone/FLT3/blob/d37f6e39c4c6922ddbd3c8539bbab65d11628111/FLT3/FLT3.lean#L715-L724</a></p>",
        "id": 432658750,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1712826163
    },
    {
        "content": "<p>Same for <code>lambda_sq_dvd_u_mul_cube</code>.</p>",
        "id": 432661707,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1712827157
    },
    {
        "content": "<p><strong>Update:</strong></p>\n<ul>\n<li>Code documentation and refactoring completed <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> <a href=\"https://pitmonticone.github.io/FLT3/docs/\">https://pitmonticone.github.io/FLT3/docs/</a></li>\n<li>Dependency graph completed <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> <a href=\"https://pitmonticone.github.io/FLT3/blueprint/dep_graph_document.html\">https://pitmonticone.github.io/FLT3/blueprint/dep_graph_document.html</a></li>\n<li>Blueprint: informalised statements completed <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> <a href=\"https://pitmonticone.github.io/FLT3/blueprint/index.html\">https://pitmonticone.github.io/FLT3/blueprint/index.html</a></li>\n<li>Blueprint: informalised proofs in progress <a href=\"https://pitmonticone.github.io/FLT3/blueprint/index.html\">https://pitmonticone.github.io/FLT3/blueprint/index.html</a></li>\n</ul>\n<p>If anyone wants to review the work done so far, I would greatly appreciate it.</p>",
        "id": 433046021,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1713013866
    },
    {
        "content": "<p>I am in Singapore for two weeks, so I don't have too much time, but it looks a great job!</p>",
        "id": 433106077,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1713073517
    },
    {
        "content": "<p><strong>Update:</strong> 12 informalised proofs left. I should be able to conclude by the end of the week.</p>",
        "id": 433562069,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1713284660
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/11767\">#11767</a> is now merged, so I am bumping mathlib and removing the corresponding results from the project.</p>",
        "id": 433664483,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1713332370
    },
    {
        "content": "<p>Simplified proof of <code>associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq_mul_b</code></p>",
        "id": 434251164,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1713480929
    },
    {
        "content": "<p>Simplified proof of <code>final</code> (thanks <span class=\"user-mention\" data-user-id=\"638899\">@Lorenzo Luccioli</span> ).</p>",
        "id": 434448086,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1713568237
    },
    {
        "content": "<p><strong>Update:</strong></p>\n<ul>\n<li>Code documentation and refactoring completed <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> <a href=\"https://pitmonticone.github.io/FLT3/docs/\">https://pitmonticone.github.io/FLT3/docs/</a></li>\n<li>Dependency graph completed <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> <a href=\"https://pitmonticone.github.io/FLT3/blueprint/dep_graph_document.html\">https://pitmonticone.github.io/FLT3/blueprint/dep_graph_document.html</a></li>\n<li>Blueprint: informalised statements completed <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> <a href=\"https://pitmonticone.github.io/FLT3/blueprint/index.html\">https://pitmonticone.github.io/FLT3/blueprint/index.html</a></li>\n<li>Blueprint: informalised proofs completed <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> <a href=\"https://pitmonticone.github.io/FLT3/blueprint/index.html\">https://pitmonticone.github.io/FLT3/blueprint/index.html</a></li>\n</ul>",
        "id": 434858138,
        "sender_full_name": "Pietro Monticone",
        "timestamp": 1713824495
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/11792\">#11792</a> is merged. I've updated the repo and opened <a href=\"https://github.com/leanprover-community/mathlib4/pull/12765\">#12765</a>.</p>",
        "id": 437678651,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1715183470
    },
    {
        "content": "<p>Opened also <a href=\"https://github.com/leanprover-community/mathlib4/pull/12767\">#12767</a></p>",
        "id": 437686476,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1715185755
    }
]