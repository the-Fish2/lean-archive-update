[
    {
        "content": "<p>The idea is to define power residue symbols <a href=\"https://en.wikipedia.org/wiki/Power_residue_symbol\">see the definition here</a>. For this we might need to first define residue fields for rings of integers (or maybe more generally Dedekind domains). Then its \"just\" playing around with roots of unity</p>",
        "id": 429341578,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1711361509
    },
    {
        "content": "<p>Here is a mess of ideas on how to start this that you can just copy-paste:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.NumberTheory.Cyclotomic.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Ideal.Norm</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">NumberField</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NumberField</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">ζ</span> <span class=\"o\">:</span> <span class=\"bp\">𝓞</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">IsPrimitiveRoot</span> <span class=\"n\">ζ</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/--The residue field of a number field (specifically the ring of intergers) at a prime-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">ResidueFieldAtPrime</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">F</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">Ideal.IsPrime</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">LocalRing.ResidueField</span> <span class=\"o\">(</span><span class=\"n\">Localization.AtPrime</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/--The residue field of a number field (specifically the ring of intergers) at a prime-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">ResidueFieldAtPrime2</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">F</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">Ideal.IsPrime</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>  <span class=\"bp\">𝓞</span> <span class=\"n\">F</span> <span class=\"bp\">⧸</span> <span class=\"n\">p</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">F</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">Ideal.IsPrime</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Field</span> <span class=\"o\">(</span><span class=\"n\">ResidueFieldAtPrime</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">LocalRing.ResidueField.field</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">hp2</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"bp\">⊥</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Field</span> <span class=\"o\">(</span><span class=\"n\">ResidueFieldAtPrime2</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Ideal.IsMaximal</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Ideal.IsPrime.isMaximal</span> <span class=\"n\">hp</span> <span class=\"n\">hp2</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Ideal.Quotient.field</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">residue_map</span> <span class=\"o\">:</span> <span class=\"bp\">𝓞</span> <span class=\"n\">F</span> <span class=\"bp\">→+*</span> <span class=\"o\">(</span><span class=\"n\">ResidueFieldAtPrime</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">LocalRing.residue</span> <span class=\"o\">(</span><span class=\"n\">Localization.AtPrime</span> <span class=\"n\">p</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Localization.AtPrime</span> <span class=\"n\">p</span><span class=\"o\">))</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">inst1</span> <span class=\"o\">(</span><span class=\"n\">hp2</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"bp\">⊥</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">ResidueFieldAtPrime2</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">norm_div_lemmas</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">F</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">Ideal.IsPrime</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">hpn</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">⊔</span> <span class=\"n\">Ideal.span</span> <span class=\"o\">({(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">F</span><span class=\"o\">))}</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">F</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span>  <span class=\"bp\">∣</span> <span class=\"o\">((</span><span class=\"n\">Ideal.absNorm</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">exits_pth_root</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">𝓞</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">F</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">Ideal.IsPrime</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hpn</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">⊔</span> <span class=\"n\">Ideal.span</span> <span class=\"o\">({(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">F</span><span class=\"o\">))}</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">F</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃!</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"o\">(((</span><span class=\"n\">Ideal.absNorm</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">-</span>  <span class=\"n\">ζ</span><span class=\"bp\">^</span><span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 429341923,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1711361635
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"389019\">@Chris Birkbeck</span> are ideals computable in mathlib?</p>",
        "id": 429351804,
        "sender_full_name": "Edgar Costa",
        "timestamp": 1711363989
    },
    {
        "content": "<p>When you say computable, which sense do you mean?</p>",
        "id": 429352554,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1711364165
    },
    {
        "content": "<p>I mean, in the practical sense, given two ideals defined by its generators <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>I</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>I</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">I_1, I_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, can one for example compute <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>I</mi><mn>1</mn></msub><msub><mi>I</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">I_1 I_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>?</p>\n<p>I am just curious if one would be able to apply the residue map to a concrete ideal, or it will be totally theoretical.</p>",
        "id": 429352999,
        "sender_full_name": "Edgar Costa",
        "timestamp": 1711364268
    },
    {
        "content": "<p>It will be theoretical, but you can prove a lemma for ideals generated by explicit elements that will \"compute\" for you</p>",
        "id": 429353876,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1711364500
    },
    {
        "content": "<p>If you label it with <code>@[simp]</code> then the simp tactic will use it automatically</p>",
        "id": 429354080,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1711364548
    },
    {
        "content": "<p>Actually computing something can be quite difficult!  I expect we have results that describe the product of two ideals in terms of the generators of each one. But if it lets you say (2)(3)=(6), I'm don't know if that works (but maybe I'm wrong!)</p>",
        "id": 429354096,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1711364556
    },
    {
        "content": "<p>Sure, maybe the right approach would not be having lean to compute it, but have a tactic that calls a CAS to express both generators in terms of the other, and thus establish equality</p>",
        "id": 429354764,
        "sender_full_name": "Edgar Costa",
        "timestamp": 1711364727
    },
    {
        "content": "<p>Ok I've made a repository for this: If you follow these instructions it should download it for you:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">CBirkbeck</span><span class=\"bp\">/</span><span class=\"n\">power_residue_symbols</span>\n<span class=\"n\">cd</span> <span class=\"n\">power_residue_symbols</span>\n<span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span> <span class=\"n\">get</span>\n<span class=\"n\">lake</span> <span class=\"n\">build</span>\n</code></pre></div>",
        "id": 429356379,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1711365154
    },
    {
        "content": "<p>I propose we meet up after Amelia's talk this afternoon and we can chat about how to approach this!</p>",
        "id": 429356518,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1711365207
    },
    {
        "content": "<p>I'll be near the front of the lecture theatre, so we can group there and organise ourselves!</p>",
        "id": 429442215,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1711381180
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"389019\">Chris Birkbeck</span> <a href=\"#narrow/stream/429416-LFTCM-2024/topic/Project.20idea.3A.20Power.20residue.20symbols/near/429442215\">said</a>:</p>\n<blockquote>\n<p>I'll be near the front of the lecture theatre, so we can group there and organise ourselves!</p>\n</blockquote>\n<p>I gather my stuffs and I join you!</p>",
        "id": 429443247,
        "sender_full_name": "Ramla ABDELLATIF",
        "timestamp": 1711381385
    },
    {
        "content": "<p>This might be useful for proving that the roots are distinct modulo p: <code>Polynomial.X_pow_sub_one_separable_iff</code></p>",
        "id": 429647362,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1711457351
    },
    {
        "content": "<p>I was thinking of <code>IsPrimitiveRoot.sub_one_norm_eq_eval_cyclotomic</code>, so that<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ζ</mi><mo>−</mo><mn>1</mn><mo>∈</mo><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">\\zeta - 1 \\in P</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6835em;vertical-align:-0.0391em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span></span> that relates <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Nm</mi><mo>⁡</mo><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">\\operatorname{Nm} P </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mop\"><span class=\"mord mathrm\">Nm</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>ϕ</mi><mi>n</mi></msub><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mi mathvariant=\"normal\">Nm</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>ζ</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>=</mo></mrow><annotation encoding=\"application/x-tex\"> \\phi_n(1) = \\operatorname{Nm}(\\zeta - 1)   =  </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">ϕ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mord mathrm\">Nm</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span></span></span></span> 1 or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>q</mi></mrow><annotation encoding=\"application/x-tex\">q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span></span></span></span> if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>=</mo><msup><mi>q</mi><mi>k</mi></msup></mrow><annotation encoding=\"application/x-tex\">n = q^k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0435em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span></span></span></p>",
        "id": 429649568,
        "sender_full_name": "Edgar Costa",
        "timestamp": 1711458003
    },
    {
        "content": "<p>We can probably do a proof like this:</p>\n<ul>\n<li>show that n is not zero in the quotient ring</li>\n<li>define P(X) = (X^n-1)/(X-1), so that (in characteristic 0) P(1) = n and P(\\zeta^i) = 0 if n does not divide i.</li>\n<li>assuming that 1 and \\zeta^i are congruent modulo p, obtain a contradiction if n does not divide i</li>\n</ul>\n<p>So we avoid working with the norm of \\zeta - 1, or separabilty.</p>",
        "id": 429680152,
        "sender_full_name": "Sandra Rozensztajn",
        "timestamp": 1711466629
    },
    {
        "content": "<p>ok I added a proof that the reduction mod p of the primitive root is still a primitive root: <code>primitivemodp'</code>. The key is to use the link to cyclotomic polynomials and roots under ring homs. it still has one sorry asking that n is not zero in the residue field, but that should be easy.</p>",
        "id": 429739561,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1711486968
    }
]