[
    {
        "content": "<p>This is a thread for Alex's talk on Basic Tactics</p>",
        "id": 429321933,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1711357371
    },
    {
        "content": "<p>Alex mentioned that you can prove the statement in his talk about continuous functions with the <code>continuity</code> tactic. One can also try the <code>fun_prop</code> tactic for proving simple statements about continuity, which should be faster. Mathlib is currently transitioning from the former to the latter for performance reasons (and other reasons as well). In this particular case, <code>continuity</code> succeeds, but <code>fun_prop</code> fails. This is only because no one has yet told the <code>fun_prop</code> tactic that <code>sin</code> and <code>cos</code> are continuous. Once we tell it that (I've done that using the <code>attribute</code> line below), it succeeds.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">fun_prop</span><span class=\"o\">]</span> <span class=\"n\">continuous_cos</span> <span class=\"n\">continuous_sin</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">sin</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">cos</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">fun_prop</span>\n</code></pre></div>",
        "id": 429323330,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1711357794
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> what was your suggestion about numeric types?</p>",
        "id": 429324310,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711358062
    },
    {
        "content": "<p><code>set_option pp.numericTypes true</code> will show in the infoview what type a numeral has, so instead of showing <code>5</code>, it will show <code>5 : ℕ</code> or <code>5 : ℝ</code>.</p>",
        "id": 429324459,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1711358091
    },
    {
        "content": "<p>This is <em>very</em> helpful for new users I suspect (and for experienced ones too sometimes!)</p>",
        "id": 429324872,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1711358163
    },
    {
        "content": "<p>A numeral is essentially an expression made of digits, like <code>3432523534</code>. Lean has a special support to understand that those are natural/real/complex/... numbers</p>",
        "id": 429324988,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711358176
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/429416-LFTCM-2024/topic/Talk.3A.20Basic.20Tactics/near/429324459\">said</a>:</p>\n<blockquote>\n<p><code>set_option pp.numericTypes true</code> will show in the infoview what type a numeral has, so instead of showing <code>5</code>, it will show <code>5 : ℕ</code> or <code>5 : ℝ</code>.</p>\n</blockquote>\n<p>Just to complement to <span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> 's comment: if you want to use one of these <code>set_option</code> tools, you should use them <strong>outside</strong> proofs, not inside them. Just before the lemma/def you are working on, basically, on a new line.</p>",
        "id": 429325178,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1711358212
    },
    {
        "content": "<p>Where can we find documentation on <code>fun_prop</code>?</p>",
        "id": 429326316,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1711358455
    }
]