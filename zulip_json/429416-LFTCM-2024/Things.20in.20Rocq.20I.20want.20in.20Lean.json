[
    {
        "content": "<p>This is a random list of things I am seeing the Rocq tutorial and I would like to have in Lean (maybe the're already there and I don't know it):</p>\n<ul>\n<li>the abort command</li>\n</ul>",
        "id": 430017039,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711614384
    },
    {
        "content": "<ul>\n<li>have -&gt;</li>\n</ul>",
        "id": 430017681,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711614649
    },
    {
        "content": "<ul>\n<li>rewrite seems easier to combine with other tactics</li>\n</ul>",
        "id": 430018920,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711615083
    },
    {
        "content": "<ul>\n<li>rw [in ...]</li>\n</ul>",
        "id": 430021561,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711616108
    },
    {
        "content": "<ul>\n<li><code>search</code> in the middle of a tactic script</li>\n</ul>",
        "id": 430022100,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1711616317
    },
    {
        "content": "<ul>\n<li><code>have -&gt; : some_prop := by proof</code> as alternative to <code>rw [show some_prop by proof]</code></li>\n</ul>",
        "id": 430023848,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1711616970
    },
    {
        "content": "<p>Re: <code>have -&gt;</code>: I think it makes sense to add <code>←</code> and  <code>→</code> as <code>rcases</code> patterns, to rewrite with the term immediately (forwards and backwards) and then clear it. Then you can write <code>obtain → : ... := ...</code></p>",
        "id": 430027383,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1711618267
    },
    {
        "content": "<p>Yeah, I don't mind whether it is <code>have</code> or <code>obtain</code>. I can also imagine that those two tactics get merged anyways.</p>",
        "id": 430030204,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1711619302
    },
    {
        "content": "<p>What is the difference between have and obtain btw?</p>",
        "id": 430043397,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1711624298
    },
    {
        "content": "<p><code>have x : P := Q</code> requires that <code>x</code> is a single variable, while <code>obtain</code> accepts any destructuring pattern.</p>",
        "id": 430043689,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1711624426
    },
    {
        "content": "<p>So <code>obtain</code> is strictly more powerful than <code>have</code>. And <code>obtain</code> and <code>rcases</code> are the same, apart from syntax.</p>",
        "id": 430043843,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1711624483
    },
    {
        "content": "<p>Have does some destructuring now, I think</p>",
        "id": 430047665,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1711625861
    },
    {
        "content": "<p>I believe you can write <code>obtain rfl : a = b := ...</code> in current lean.</p>",
        "id": 430054349,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1711627957
    },
    {
        "content": "<p>there is some difference though... i believe <code>obtain a := b</code> removes <code>b</code> from the context, while <code>have a := b</code> doesn't...</p>",
        "id": 430057865,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1711629241
    },
    {
        "content": "<p>so it's not <em>exactly</em> strictly more expressive</p>",
        "id": 430057977,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1711629273
    }
]