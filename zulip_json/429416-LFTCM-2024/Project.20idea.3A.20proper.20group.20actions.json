[
    {
        "content": "<p>Here's a thread for discussing the proper group actions project.</p>",
        "id": 429339295,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1711360969
    },
    {
        "content": "<p>I'm in !</p>",
        "id": 429350874,
        "sender_full_name": "Florestan",
        "timestamp": 1711363751
    },
    {
        "content": "<p>Me too</p>",
        "id": 429350918,
        "sender_full_name": "Etienne Marion",
        "timestamp": 1711363767
    },
    {
        "content": "<p>Mee too</p>",
        "id": 429354777,
        "sender_full_name": "Vincent Guirardel",
        "timestamp": 1711364731
    },
    {
        "content": "<p>Me too</p>",
        "id": 429398152,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1711372566
    },
    {
        "content": "<p>I'm setting up a repository and refreshing my mind about what we have and what needs to be done, we can talk about it after the talks.</p>",
        "id": 429398575,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1711372636
    },
    {
        "content": "<p>I was scared that we wouldn't have enough things to do, but I just realized we don't know that the composition of proper maps is proper <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 429399360,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1711372762
    },
    {
        "content": "<p>Here's the repository for the project: <a href=\"https://github.com/ADedecker/ProperAction\">https://github.com/ADedecker/ProperAction</a></p>",
        "id": 429439909,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1711380727
    },
    {
        "content": "<p>J'ai reussi a rentrer la composition des applications propres, mais en utilisant la composition des applications continues qu'on a reprouvé. Je ne sais pas comment utiliser  ContinuousMap.comp  a partir de f et g et des preuves que f et g sont continues.</p>",
        "id": 429520856,
        "sender_full_name": "Vincent Guirardel",
        "timestamp": 1711405291
    },
    {
        "content": "<p>You have to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Continuous.comp#doc\">docs#Continuous.comp</a>, not <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContinuousMap.comp#doc\">docs#ContinuousMap.comp</a>, I can explain more tomorrow (usually we keep the conversations in English on Zulip, don’t know wether that’s too relevant here though)</p>",
        "id": 429521082,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1711405438
    },
    {
        "content": "<p>Thanks very much.</p>",
        "id": 429523171,
        "sender_full_name": "Vincent Guirardel",
        "timestamp": 1711406720
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=isProperMap_iff_ultrafilter_of_t2#doc\">docs#isProperMap_iff_ultrafilter_of_t2</a></p>",
        "id": 429631047,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1711451171
    },
    {
        "content": "<p>I pushed a nearly complete proof of <code>t2Space_of_ProperSMul</code>, in the file Basic_florestan . Surprisingly (or not), the most tedious  part for me was to show the \"obvious fact\" that the preimage of the diagonal in (X/G)^2 is equal to the image of the defining map G x X -&gt; X x X. In fact, the only <code>sorry</code> left is  one  of the inclusions of this fact.</p>",
        "id": 429906566,
        "sender_full_name": "Florestan",
        "timestamp": 1711558675
    },
    {
        "content": "<p>Nice! Yes I can see why that could be a bit tedious, but it’s a good exercise!</p>",
        "id": 429907185,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1711558821
    },
    {
        "content": "<p>I think I'm gonna skip the coq session, do you want to meet somewhere ?</p>",
        "id": 430028502,
        "sender_full_name": "Florestan",
        "timestamp": 1711618735
    },
    {
        "content": "<p>I would like to do the Coq session. Do you want to work on something in autonomy, or do you need me for anything ? I can also do some back and forth if you need some help.</p>",
        "id": 430030758,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1711619509
    },
    {
        "content": "<p>No, don't worry, I will work in autonomy !</p>",
        "id": 430031286,
        "sender_full_name": "Florestan",
        "timestamp": 1711619669
    },
    {
        "content": "<p>We are in the big meeting room in the library</p>",
        "id": 430061703,
        "sender_full_name": "Florestan",
        "timestamp": 1711630654
    },
    {
        "content": "<p>I did the PR for proper maps: <a href=\"https://github.com/leanprover-community/mathlib4/pull/11754\">https://github.com/leanprover-community/mathlib4/pull/11754</a><br>\nI was not sure whether I had to indicate that it depends on yours because I do not use outside lemmas so I didn't indicate it.</p>",
        "id": 430165547,
        "sender_full_name": "Etienne Marion",
        "timestamp": 1711661661
    },
    {
        "content": "<p>I added my results to your PR on proper actions. There are errors because it relies on my PR.</p>",
        "id": 430171664,
        "sender_full_name": "Etienne Marion",
        "timestamp": 1711665059
    },
    {
        "content": "<p>Sorry I was spending some time helping the Cantor people. Indeed <a href=\"https://github.com/leanprover-community/mathlib4/pull/11754\">#11754</a> should come before <a href=\"https://github.com/leanprover-community/mathlib4/pull/11746\">#11746</a>, so the first one doesn’t have to depend on the second. You can go on branch <code>FEVA_ProperAction</code> and do <code>git merge em/ProperMap</code>, I’ll tell you tomorrow how to indicate the dependence on GitHub.</p>",
        "id": 430176597,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1711668010
    },
    {
        "content": "<p>OK did that, but there seems to be a problem with imports anymay.</p>",
        "id": 430177666,
        "sender_full_name": "Etienne Marion",
        "timestamp": 1711668695
    },
    {
        "content": "<p>We’ll see tomorrow</p>",
        "id": 430179187,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1711669570
    },
    {
        "content": "<p>Did you bring back the keys yesterday ?</p>",
        "id": 430209016,
        "sender_full_name": "Etienne Marion",
        "timestamp": 1711693463
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"703970\">Etienne Marion</span> <a href=\"#narrow/stream/429416-LFTCM-2024/topic/Project.20idea.3A.20proper.20group.20actions/near/430209016\">said</a>:</p>\n<blockquote>\n<p>Did you bring back the keys yesterday ?</p>\n</blockquote>\n<p>yes</p>",
        "id": 430214071,
        "sender_full_name": "Vincent Guirardel",
        "timestamp": 1711696857
    },
    {
        "content": "<p>I don't manage tu push my file: \"you have divergent branches...\"</p>",
        "id": 430214759,
        "sender_full_name": "Vincent Guirardel",
        "timestamp": 1711697313
    },
    {
        "content": "<p>OK, I managed (with help)</p>",
        "id": 430218897,
        "sender_full_name": "Vincent Guirardel",
        "timestamp": 1711699799
    },
    {
        "content": "<p>Where did you push? I can't see it.</p>",
        "id": 430221811,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1711701461
    },
    {
        "content": "<p>Small tip: when someone (including a bot like \"reviewerdog\") makes a suggestion, and you're reasonably confident that it shouldn't break anything, you can click \"commit suggestion\" to do it in GitHub. But we can talk about all of this right after the talk.</p>",
        "id": 430222423,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1711701759
    },
    {
        "content": "<p>Also: the errors in GitHub might be a bit scary, but they should tell you what to do to fix them.</p>",
        "id": 430225229,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1711703219
    },
    {
        "content": "<p>Well I don't find them really clear right now :(</p>",
        "id": 430225306,
        "sender_full_name": "Etienne Marion",
        "timestamp": 1711703258
    },
    {
        "content": "<p>Okay let's talk about it right after the end of the questions then.</p>",
        "id": 430225384,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1711703289
    },
    {
        "content": "<p>Looks like there are troubles with imports of files we did not use.</p>",
        "id": 430225417,
        "sender_full_name": "Etienne Marion",
        "timestamp": 1711703305
    },
    {
        "content": "<p>I pushed a partial proof of <code>properMap_of_naiveProper_T2_FirstCountable</code>which says that if $X$ and $Y$ are T2 and first countable,<br>\nthen the naive definition<br>\nof proper map is equivalent to the good definition</p>",
        "id": 430402541,
        "sender_full_name": "Florestan",
        "timestamp": 1711816040
    },
    {
        "content": "<p>I have 2 sorrys:</p>",
        "id": 430402554,
        "sender_full_name": "Florestan",
        "timestamp": 1711816064
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">isCompact_seq_lim</span> <span class=\"o\">{</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">seq</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hconv</span><span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"n\">seq</span> <span class=\"n\">atTop</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"n\">y</span><span class=\"o\">)):</span>\n    <span class=\"n\">IsCompact</span> <span class=\"o\">(</span><span class=\"n\">Set.range</span> <span class=\"n\">seq</span> <span class=\"bp\">∪</span> <span class=\"o\">{</span><span class=\"n\">y</span><span class=\"o\">})</span>\n</code></pre></div>\n<p>which says that a convergent sequence and its limit is compact, which I guess should be somewhere</p>",
        "id": 430402634,
        "sender_full_name": "Florestan",
        "timestamp": 1711816113
    },
    {
        "content": "<p>and a kind of factorization lemme</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">map_factor</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">c</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">U</span><span class=\"o\">):</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">s'</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"o\">(</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">s'</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">s'</span> <span class=\"n\">c</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 430402640,
        "sender_full_name": "Florestan",
        "timestamp": 1711816128
    },
    {
        "content": "<p>which looks obvious, but couldn't do</p>",
        "id": 430402675,
        "sender_full_name": "Florestan",
        "timestamp": 1711816182
    },
    {
        "content": "<p>comments, ideas or simplications welcome !</p>",
        "id": 430402739,
        "sender_full_name": "Florestan",
        "timestamp": 1711816208
    },
    {
        "content": "<p>Nice! I will have a closer look at this (and the rest of the PR) a bit later (maybe this evening, otherwise tomorrow).<br>\nRegarding the first sorry, I think I went looking for this a while ago but never found it. I'll double check, but if it is indeed missing that would be a good thing to add.<br>\nFor the second one let's talk in the thread you opened about it (<a href=\"#narrow/stream/113489-new-members/topic/Map.20factorization/near/430395859\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Map.20factorization/near/430395859</a> for other readers)</p>",
        "id": 430405084,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1711818402
    },
    {
        "content": "<p>Ah, we do have the first sorry: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Filter.Tendsto.isCompact_insert_range#doc\">docs#Filter.Tendsto.isCompact_insert_range</a>. It looks like it's been there for some time, so I probably missed it when I last searched for it. Note that it is a consequence of the much more general <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Filter.Tendsto.isCompact_insert_range_of_cocompact#doc\">docs#Filter.Tendsto.isCompact_insert_range_of_cocompact</a>, so the same lemma applies for sequences and continuous functions vanishing at infinity!</p>",
        "id": 430407372,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1711820509
    },
    {
        "content": "<p>Etienne's PR just got merged <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> Of course this created some conflict between master and <a href=\"https://github.com/leanprover-community/mathlib4/pull/11746\">#11746</a>, as indicated at the bottom of the PR. This is good <code>git</code> practice so I'll let one of you fix it by running <code>git fetch</code>, <code>git merge origin/master</code>, and then fix the conflicts in VSCode.</p>",
        "id": 430408630,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1711821666
    },
    {
        "content": "<p>Done! Just to be sure: the issue was that some modifications of <a href=\"https://github.com/leanprover-community/mathlib4/pull/11746\">#11746</a> were done on ProperMap which was modified by my PR so it did not know which modification was supposed to be merged to master? I don't really understand what fetch does, it seems to pull the current master branch.</p>",
        "id": 430411856,
        "sender_full_name": "Etienne Marion",
        "timestamp": 1711824731
    },
    {
        "content": "<p>Great, thank you Anatole, and congrats Etienne !</p>",
        "id": 430413017,
        "sender_full_name": "Florestan",
        "timestamp": 1711825741
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 430413054,
        "sender_full_name": "Etienne Marion",
        "timestamp": 1711825785
    },
    {
        "content": "<p>I proved map_factor:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">map_factor</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">c</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">U</span><span class=\"o\">):</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">s'</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"o\">(</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">s'</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">s'</span> <span class=\"n\">c</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">choose</span> <span class=\"n\">s'</span> <span class=\"n\">hs'</span> <span class=\"n\">using</span> <span class=\"n\">h</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">s'</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">c</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">hs'</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">⟩</span>\n  <span class=\"n\">ext</span> <span class=\"n\">c</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">hs'</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">]</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>\n<p><code>choose</code> creates automatically a function and adds the right hypothesis so no need to use set.</p>",
        "id": 430413260,
        "sender_full_name": "Etienne Marion",
        "timestamp": 1711825944
    },
    {
        "content": "<p>Yes, thank you, in the end I just used directly <code>choose</code></p>\n<p><span class=\"user-mention silent\" data-user-id=\"703970\">Etienne Marion</span> <a href=\"#narrow/stream/429416-LFTCM-2024/topic/Project.20idea.3A.20proper.20group.20actions/near/430413260\">said</a>:</p>\n<blockquote>\n<p>I proved map_factor:<br>\n</p>\n</blockquote>",
        "id": 430415790,
        "sender_full_name": "Florestan",
        "timestamp": 1711828322
    },
    {
        "content": "<p>Yes makes sense</p>",
        "id": 430415843,
        "sender_full_name": "Etienne Marion",
        "timestamp": 1711828350
    },
    {
        "content": "<p>Ah, I was going to suggest something like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Function.invFun#doc\">docs#Function.invFun</a>, for some reason I didn’t think about using <code>choose</code> directly <span aria-label=\"man facepalming\" class=\"emoji emoji-1f926-200d-2642\" role=\"img\" title=\"man facepalming\">:man_facepalming:</span> <br>\nBut yes, the reason we don’t have a lemma for it is it’s just easier to use <code>choose</code> directly in the middle of the proof (it’s quite flexible, especially if you use <code>choose!</code>).</p>",
        "id": 430428665,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1711842273
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"703970\">Etienne Marion</span> <a href=\"#narrow/stream/429416-LFTCM-2024/topic/Project.20idea.3A.20proper.20group.20actions/near/430411856\">said</a>:</p>\n<blockquote>\n<p>Done! Just to be sure: the issue was that some modifications of <a href=\"https://github.com/leanprover-community/mathlib4/pull/11746\">#11746</a> were done on ProperMap which was modified by my PR so it did not know which modification was supposed to be merged to master?</p>\n</blockquote>\n<p>Yes.</p>\n<blockquote>\n<p>I don't really understand what fetch does, it seems to pull the current master branch.</p>\n</blockquote>\n<p><code>git fetch</code> tells git to lookup the changes that happened on the global (online) repo, <em>without</em> making any change to your local copy of Mathlib. Then, <code>git merge origin/master</code> tells git to merge, into the current branch, the branch master <em>from the global repo</em> (hence the need to fetch, but no need to pull).</p>",
        "id": 430430422,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1711843967
    },
    {
        "content": "<p>(Disclaimer: I am not at all a git wizard, just a regular user)</p>",
        "id": 430430508,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1711844055
    },
    {
        "content": "<p>Ok thanks!</p>",
        "id": 430459526,
        "sender_full_name": "Etienne Marion",
        "timestamp": 1711873593
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"396599\">@Florestan</span> I had a look at the proof of <code>properMap_of_naiveProper_T2_FirstCountable</code>, and I think you're making your life a little harder than necessary (mathematically). My suggestion (motivated by the fact that I know that both this and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=isProperMap_iff_isCompact_preimage#doc\">docs#isProperMap_iff_isCompact_preimage</a> are special cases of a result about compactly generated spaces) would be to first prove a lemma saying that, in a T2 first countable space, a set is closed if and only if its intersection with any compact subset is closed (using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Filter.Tendsto.isCompact_insert_range#doc\">docs#Filter.Tendsto.isCompact_insert_range</a>).<br>\nThen you can use the very-underrated <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.image_inter_preimage#doc\">docs#Set.image_inter_preimage</a> to prove easily that your map is closed: take a closed subset <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> in the domain, you want to show <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>C</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(C)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mclose\">)</span></span></span></span> is closed, hence you have to show that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>C</mi><mo stretchy=\"false\">)</mo><mo>∩</mo><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">f(C) \\cap K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∩</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> is closed for any compact <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span>. But <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>C</mi><mo stretchy=\"false\">)</mo><mo>∩</mo><mi>K</mi><mo>=</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>C</mi><mo>∩</mo><msup><mi>f</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">(</mo><mi>K</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(C) \\cap K = f(C \\cap f^{-1}(K))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∩</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∩</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mclose\">))</span></span></span></span> is compact, hence closed by separation.</p>\n<p>Does that make sense? In any case do not delete your current proof, I will make some comments on it so that you can learn some tricks!</p>",
        "id": 430480336,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1711895106
    },
    {
        "content": "<p>As I think I told you during the week, the reason we don't have compactly generated spaces yet is because we wanted to think before choosing one of the three definitions of <a href=\"https://en.wikipedia.org/wiki/Compactly_generated_space\">https://en.wikipedia.org/wiki/Compactly_generated_space</a>, which are all equivalent in this case because of separation. I'm more and more leaning towards moving forward with definition 1, but in the mean time it would be nice to make sure that the proofs can be easily generalized to this setup.</p>",
        "id": 430481559,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1711896200
    },
    {
        "content": "<p>Also, note that in my suggested proof above, I make no assumption about the domain! No separation (actually, Lean already complains that this is not used in your proof), but also no first countability!</p>",
        "id": 430481663,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1711896275
    },
    {
        "content": "<p>I just opened a discussion about the annoying linter failure on the PR at <a href=\"#narrow/stream/287929-mathlib4/topic/simp.20tag.20on.20StieltjesFunction.2Emeasure_singleton/near/430482334\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/simp.20tag.20on.20StieltjesFunction.2Emeasure_singleton/near/430482334</a></p>",
        "id": 430482377,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1711896930
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/429416-LFTCM-2024/topic/Project.20idea.3A.20proper.20group.20actions/near/430482377\">said</a>:</p>\n<blockquote>\n<p>I just opened a discussion about the annoying linter failure on the PR at <a href=\"#narrow/stream/287929-mathlib4/topic/simp.20tag.20on.20StieltjesFunction.2Emeasure_singleton/near/430482334\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/simp.20tag.20on.20StieltjesFunction.2Emeasure_singleton/near/430482334</a></p>\n</blockquote>\n<p>About that, why can’t we just increase the limit of time as suggested in the failure?</p>",
        "id": 430505869,
        "sender_full_name": "Etienne Marion",
        "timestamp": 1711917644
    },
    {
        "content": "<p>The thing is the issue does not appear at build time, it appears at linting time, which makes it a bit harder to control (to me at least, I'm sure there is a way to do that). To be more specific, one of these steps is to check that, even when all of mathlib is imported, the left hand side of a <code>simp</code> lemma cannot be reduced by simp without this exact lemma (otherwise it means the lemma would never trigger since the LHS would have already been simplified). In our case, Lean fails to <em>make sense</em> of the LHS in reasonable time <em>when all of Mathlib is imported</em>, thus causing a linter failure.</p>\n<p>I don't know how the linter works, but I guess there would be no reason for the \"increase limit for this lemma\" option to be passed on to the linter.</p>",
        "id": 430506668,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1711918349
    },
    {
        "content": "<p>Although now that I think about it it has to be, otherwise lemmas which need a raised limit would never pass the linting step <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span> Let me try it.</p>",
        "id": 430506794,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1711918489
    },
    {
        "content": "<p>Well it didn't work, apparently the linter still used the same limit as before. <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 430508703,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1711920347
    },
    {
        "content": "<p>You can remove the simp tag from that lemma (adding a comment). It is used only three times.</p>",
        "id": 430508903,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711920499
    },
    {
        "content": "<p>I asked about it in the public thread linked above (most people do not follow this stream), if no one answers I'll do that.</p>",
        "id": 430508956,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1711920577
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/429416-LFTCM-2024/topic/Project.20idea.3A.20proper.20group.20actions/near/430480336\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"396599\">Florestan</span> I had a look at the proof of <code>properMap_of_naiveProper_T2_FirstCountable</code>, and I think you're making your life a little harder than necessary (mathematically). My suggestion (motivated by the fact that I know that both this and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=isProperMap_iff_isCompact_preimage#doc\">docs#isProperMap_iff_isCompact_preimage</a> are special cases of a result about compactly generated spaces) would be to first prove a lemma saying that, in a T2 first countable space, a set is closed if and only if its intersection with any compact subset is closed (using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Filter.Tendsto.isCompact_insert_range#doc\">docs#Filter.Tendsto.isCompact_insert_range</a>).<br>\nThen you can use the very-underrated <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.image_inter_preimage#doc\">docs#Set.image_inter_preimage</a> to prove easily that your map is closed: take a closed subset <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> in the domain, you want to show <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>C</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(C)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mclose\">)</span></span></span></span> is closed, hence you have to show that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>C</mi><mo stretchy=\"false\">)</mo><mo>∩</mo><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">f(C) \\cap K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∩</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> is closed for any compact <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span>. But <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>C</mi><mo stretchy=\"false\">)</mo><mo>∩</mo><mi>K</mi><mo>=</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>C</mi><mo>∩</mo><msup><mi>f</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">(</mo><mi>K</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(C) \\cap K = f(C \\cap f^{-1}(K))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∩</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∩</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mclose\">))</span></span></span></span> is compact, hence closed by separation.</p>\n<p>Does that make sense? In any case do not delete your current proof, I will make some comments on it so that you can learn some tricks!</p>\n</blockquote>\n<p>I see, I will try at some point to implement your suggestion. And thanks a lot for all your comments !</p>",
        "id": 430787256,
        "sender_full_name": "Florestan",
        "timestamp": 1712063449
    },
    {
        "content": "<p>Hey! I got back to the PR today, thanks a lot Anatole for your detailed comments, and also for that amazing shortcut using <code>congrm</code>! I added the proof you suggested using the idea of compactly generated space, although it does not really belong to this file.</p>",
        "id": 435246811,
        "sender_full_name": "Etienne Marion",
        "timestamp": 1713982294
    },
    {
        "content": "<p>I added some documentation and proved the equivalence between properly discontinuous and proper when <code>X</code> is T2 and <code>X × X</code> is compactly generated. However this cannot really be added now because compactly generated spaces are not defined yet if I understood correctly (and maybe the chosen definition won't be the same as the one I used). <span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span>  do you think we should wait for this to be added to Mathlib or change assumptions so that we can ask for reviewing?</p>",
        "id": 435468959,
        "sender_full_name": "Etienne Marion",
        "timestamp": 1714079638
    },
    {
        "content": "<p>Hey! Sorry for the delay, I was at CIRM again this week for another conference, and that took all of my energy again <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> Thanks for all your work Étienne! Regarding things about compactly generated spaces, I think we can add them just for the sake of deducing the sequential and locally compact special cases, with a comment saying that when we have defined compactly generated spaces we should move to that definition and remove the special cases (since the gap will be bridged by typeclass inference).</p>",
        "id": 435582605,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1714136771
    },
    {
        "content": "<p>More concretly, I would:</p>\n<ul>\n<li>replace the current <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=isProperMap_iff_isCompact_preimage#doc\">docs#isProperMap_iff_isCompact_preimage</a> by the primed version that we have</li>\n<li>add a comment saying this should be the only result needed, but because we don't have a way to state it nicely we just use it as an intermediate results to get the two usual consequences</li>\n<li>move the two \"compact generation\" criterions to this file, and use them to add lemmas <code>WeaklyLocallyCompactSpace.isProperMap_iff_isCompact_preimage</code> and <code>SequentialSpace.isProperMap_iff_isCompact_preimage</code> for the two use cases.</li>\n</ul>\n<p>Does that make sense ?</p>",
        "id": 435583045,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1714136937
    },
    {
        "content": "<p>Yes I think I get it, thanks! Hope you enjoyed the conference</p>",
        "id": 435583488,
        "sender_full_name": "Etienne Marion",
        "timestamp": 1714137085
    },
    {
        "content": "<p>Yes it was really nice, thanks!</p>",
        "id": 435605098,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1714144114
    },
    {
        "content": "<p>I moved the stuff and I also reworked <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=isProperMap_iff_tendsto_cocompact#doc\">docs#isProperMap_iff_tendsto_cocompact</a> as it was based on <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=isProperMap_iff_isCompact_preimage#doc\">docs#isProperMap_iff_isCompact_preimage</a>. I added the comment just before the statement, I am not sure if it should be added to the implementation notes in the header.</p>",
        "id": 435613758,
        "sender_full_name": "Etienne Marion",
        "timestamp": 1714146975
    },
    {
        "content": "<p>I think it would make sense to have it in the implementation notes as well</p>",
        "id": 435613947,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1714147033
    },
    {
        "content": "<p>Ok</p>",
        "id": 435613980,
        "sender_full_name": "Etienne Marion",
        "timestamp": 1714147048
    },
    {
        "content": "<p>I have a question: each time I switch from master to our branch, I have to restart lean because it is not the same version (which is fine), but I also have to use <code>lake exe cache get!</code> because \"the imports are out of date and must be rebuilt\", which is a bit annoying. And I have to do the same when I switch back to master. Is there a way to avoid this (apart from merging master into our branch)?</p>",
        "id": 435618360,
        "sender_full_name": "Etienne Marion",
        "timestamp": 1714148392
    },
    {
        "content": "<p>No there is no real way around <code>lake exe cache get</code>. Note however that if no changes has been made since you last got the cache, <em>and if you don’t use <code>get!</code></em>, it will not download anything and just unpack the cache that is already on your computer</p>",
        "id": 435619009,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1714148580
    },
    {
        "content": "<p>Oh ok thanks! I was wondering what the difference was between <code>get</code> and ˋget!`,<br>\nI thought it was just about the number of file downloaded.</p>",
        "id": 435619304,
        "sender_full_name": "Etienne Marion",
        "timestamp": 1714148681
    },
    {
        "content": "<p><code>get!</code> is meant to be used if something is wrong and <code>get</code> doesn’t fix it, so you just want to download everything from scratch. Otherwise you should rely on the fact that <code>get</code> is quite smart in downloading only the file which have changed since the last cache, and other optimizations I’m probably not aware of</p>",
        "id": 435619625,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1714148750
    },
    {
        "content": "<p>Do you think we can remove the WIP label and add awaiting-review?</p>",
        "id": 436302792,
        "sender_full_name": "Etienne Marion",
        "timestamp": 1714492219
    },
    {
        "content": "<p>Sure! I had a very quick look and apart from a few potential cleanups in the proofs (and some merge conflict) I think it looks more than ready to be reviewed (in fact I think I should have told you so a week ago already, since you cleaned up everything).</p>",
        "id": 436886874,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1714743956
    }
]