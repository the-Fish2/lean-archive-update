[
    {
        "content": "<p>Suppose I have the following types:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">A</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a2</span> <span class=\"o\">:</span> <span class=\"n\">A</span>\n<span class=\"kn\">open</span> <span class=\"n\">A</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">b1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"n\">a1</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a1</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">b2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"n\">a2</span> <span class=\"o\">(</span><span class=\"n\">a1</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">b3</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"n\">a2</span> <span class=\"n\">a2</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>And suppose I have a terms</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"n\">a1</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Now, the only constructor that allows to have (a1 x) as the first argument to B is b1. Thus, I can be sure that (f z) should have form (a1 y) for some unknown y. However, I have no idea how to extract these values.</p>\n<p>Simple pattern matching results in type mismatch (a1 ?    vs    f z), cases tactic results in \"dependent elimination failed\". How can I get some term like ∃ y : Nat, f z = a1 y?</p>",
        "id": 418589564,
        "sender_full_name": "Anatoliy Baskakov",
        "timestamp": 1706518747
    },
    {
        "content": "<p>In this code here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"n\">a1</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">z</span><span class=\"o\">))</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">foo</span> <span class=\"n\">at</span> <span class=\"n\">term</span>\n  <span class=\"n\">cases</span> <span class=\"n\">term</span>\n</code></pre></div>\n<p>You can get <code>h: f z = a1 y✝</code>. I believe <code>generalize</code> is what you're looking for.</p>",
        "id": 418592917,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1706519830
    },
    {
        "content": "<p>Thank you, that helped a lot!</p>",
        "id": 418618519,
        "sender_full_name": "Anatoliy Baskakov",
        "timestamp": 1706528563
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"681890\">Anatoliy Baskakov</span> has marked this topic as resolved.</p>",
        "id": 418618541,
        "sender_full_name": "Notification Bot",
        "timestamp": 1706528576
    }
]