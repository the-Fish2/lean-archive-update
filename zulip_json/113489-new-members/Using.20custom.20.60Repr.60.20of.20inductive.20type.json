[
    {
        "content": "<p>I define <code>Node</code> with a custom <code>Repr</code> to reduce output size during proofs.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">inductive</span><span class=\"w\"> </span><span class=\"n\">Node</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">atom</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Atom</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Node</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">pair</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Node</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Node</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Node</span>\n\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">repr_node</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Node</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Node</span><span class=\"bp\">.</span><span class=\"n\">atom</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">b2h</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">data</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Node</span><span class=\"bp\">.</span><span class=\"n\">pair</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">s!</span><span class=\"s2\">\"({repr_node a} . {repr_node b})\"</span>\n\n\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Repr</span><span class=\"w\"> </span><span class=\"n\">Node</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">reprPrec</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Node</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">repr_node</span><span class=\"w\"> </span><span class=\"n\">n</span>\n</code></pre></div>\n<p>When I do <code>#eval n</code> where with <code>n: Node</code> my custom <code>Repr</code> works just fine. But in proofs it uses the default verbose <code>Node.pair ...</code>. What am I missing?</p>",
        "id": 447366183,
        "sender_full_name": "Richard Kiss",
        "timestamp": 1719450522
    },
    {
        "content": "<p>I don't know the answer, but what happens if you also implement <code>ToString</code>?</p>",
        "id": 447395336,
        "sender_full_name": "Michal Wallace (tangentstorm)",
        "timestamp": 1719469401
    },
    {
        "content": "<p>I gave it a shot, but it didn't help. Looks like <code>#eval toString n</code> for <code>n: Node</code> does the same as <code>repr_node</code> except it puts double quotes around the whole thing</p>",
        "id": 447397269,
        "sender_full_name": "Richard Kiss",
        "timestamp": 1719470065
    },
    {
        "content": "<p>Could you make a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>? Anyway, I believe what you need is a delaborator, see <a href=\"https://leanprover-community.github.io/lean4-metaprogramming-book/extra/03_pretty-printing.html\">https://leanprover-community.github.io/lean4-metaprogramming-book/extra/03_pretty-printing.html</a> .</p>",
        "id": 447398919,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1719470550
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">app_unexpander</span><span class=\"w\"> </span><span class=\"n\">Node</span><span class=\"bp\">.</span><span class=\"n\">pair</span><span class=\"kd\">]</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">unexpNodePair</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">PrettyPrinter</span><span class=\"bp\">.</span><span class=\"n\">Unexpander</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">))</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">throw</span><span class=\"w\"> </span><span class=\"o\">()</span>\n</code></pre></div>\n<p>should work</p>",
        "id": 447398978,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1719470568
    },
    {
        "content": "<p>here's a simplified <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">structure</span><span class=\"w\"> </span><span class=\"n\">Atom</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">mk</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">data</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">repr_atom</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Atom</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">s!</span><span class=\"s2\">\"*{a.data}*\"</span>\n<span class=\"w\">  </span><span class=\"c1\">-- put stars around the nat to make it clear it's working</span>\n\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Repr</span><span class=\"w\"> </span><span class=\"n\">Atom</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"n\">reprPrec</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Atom</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">repr_atom</span><span class=\"w\"> </span><span class=\"n\">n</span>\n\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">a1</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Atom</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">a2</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Atom</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n\n<span class=\"bp\">#</span><span class=\"n\">eval</span><span class=\"w\"> </span><span class=\"n\">a1</span><span class=\"w\"> </span><span class=\"c1\">-- this works fine</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">different</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">a1</span><span class=\"w\"> </span><span class=\"bp\">≠</span><span class=\"w\"> </span><span class=\"n\">a2</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">unfold</span><span class=\"w\"> </span><span class=\"n\">a1</span>\n<span class=\"w\">  </span><span class=\"n\">unfold</span><span class=\"w\"> </span><span class=\"n\">a2</span>\n<span class=\"w\">  </span><span class=\"c1\">-- put cursor on this line and look at `Tactic state` in the Infoview</span>\n<span class=\"w\">  </span><span class=\"c1\">-- it doesn't match the `#eval a1` output</span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 447552255,
        "sender_full_name": "Richard Kiss",
        "timestamp": 1719513294
    },
    {
        "content": "<p>I tried playing around a bit with <code>@[app_unexpander Atom]</code> in the <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, adding</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">app_unexpander</span><span class=\"w\"> </span><span class=\"n\">Atom</span><span class=\"kd\">]</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">unexpNodePair</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">PrettyPrinter</span><span class=\"bp\">.</span><span class=\"n\">Unexpander</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">))</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">throw</span><span class=\"w\"> </span><span class=\"o\">()</span>\n</code></pre></div>\n<p>but it didn't seem to have any effect.</p>",
        "id": 447552702,
        "sender_full_name": "Richard Kiss",
        "timestamp": 1719513409
    },
    {
        "content": "<p>I'll read up more on elaborator, delaborator and the pretty-printing link above.</p>",
        "id": 447552849,
        "sender_full_name": "Richard Kiss",
        "timestamp": 1719513431
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"690858\">Daniel Weber</span> <a href=\"#narrow/stream/113489-new-members/topic/Using.20custom.20.60Repr.60.20of.20inductive.20type/near/447398919\">said</a>:</p>\n<blockquote>\n<p>Could you make a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>? Anyway, I believe what you need is a delaborator, see <a href=\"https://leanprover-community.github.io/lean4-metaprogramming-book/extra/03_pretty-printing.html\">https://leanprover-community.github.io/lean4-metaprogramming-book/extra/03_pretty-printing.html</a> .</p>\n</blockquote>\n<p>This is the correct direciton to go into.</p>\n<p>There are two distinct ways to look at a datatype. One is <code>Repr</code> which you can implement to turn a value of your type to a string at runtime of a program (which is what eval is simulating). The other is controlled by the delaborator which determines how Lean shows you values etc. in its interactive editing facilities such as the LSP. Both of these facilities are inherently disconnected.</p>\n<p>For your concrete use case you will need to put the delaborator on the constructor of <code>Atom</code>, <code>Atom.mk</code> instead of the type <code>Atom</code> which can of course have a custom interactive representation as well:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">app_unexpander</span><span class=\"w\"> </span><span class=\"n\">Atom</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"kd\">]</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">unexpNodePair</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">PrettyPrinter</span><span class=\"bp\">.</span><span class=\"n\">Unexpander</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">))</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">throw</span><span class=\"w\"> </span><span class=\"o\">()</span>\n</code></pre></div>",
        "id": 447553164,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1719513536
    },
    {
        "content": "<p>got it! That worked. So I think I'm unblocked, thank you</p>",
        "id": 447553497,
        "sender_full_name": "Richard Kiss",
        "timestamp": 1719513617
    },
    {
        "content": "<p>is there a place I can read more about <code>@[...]</code> attributes? It smells like python decorators to me, but I haven't seen a formal definition of what it means</p>",
        "id": 447553753,
        "sender_full_name": "Richard Kiss",
        "timestamp": 1719513678
    },
    {
        "content": "<p>They are called attributes and they are quite different from decorators. If you wish to know how they work internally you can read up on it in the meta programming book that is linked above. If you just wish to work with them the answer is approximately the following: Tagging a declaration with an attribute will put it into a sort of mini database (potentially with additional meta information, in the case of <code>app_unexpander</code> that meta information is <code>Atom.mk</code>) within a Lean meta programming extension which can then do a kind of job. For <code>app_unexpander</code> that extension is the (surprise) unexpander which is part of the delaborator.</p>",
        "id": 447554048,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1719513770
    },
    {
        "content": "<p>on further reflection, this makes sense. During proofs, we have to revert to how <code>Atom</code> is defined in their original context rather than creating instances of <code>Atom</code> and <code>Repr</code>ing them.</p>",
        "id": 447582019,
        "sender_full_name": "Richard Kiss",
        "timestamp": 1719521745
    },
    {
        "content": "<p>Precisley, note that in proofs your terms may have variables in them that you got from e.g. a function argument. You cannot <code>Repr</code> these variables as they are opaque values, you are doing symbolic reasoning after all.</p>",
        "id": 447588331,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1719523371
    }
]