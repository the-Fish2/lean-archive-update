[
    {
        "content": "<p>Hi! I am currently going through the \"Functional Programming in Lean\" book, and one of the exercises is to implement drop for a Vector type that has its length as a parameter, like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Vect</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">Vect</span> <span class=\"n\">α</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Vect</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Vect</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Vect.drop</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Vect</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Vect</span> <span class=\"n\">α</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>The book hasn't introduced tactics or proof solving yet, so I was wondering, is there any way to do this with just pattern matching? My best attempt is this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Vect.drop</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Vect</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Vect</span> <span class=\"n\">α</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Vect.nil</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">v</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">drop</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">xs</span>\n</code></pre></div>\n<p>But this errrors on the second line since the compiler can't determine that <code>k+n = k</code>, so it doesn't know that <code>v</code> is of the right type. If I could somehow match for <code>k+n=k</code> that might work, but of course I can't since pattern matching won't let me refer to another variable. </p>\n<p>I've tried matching on less things, but I couldn't get it to work there either since I couldn't give the compiler enough info to not error. Any hints?</p>",
        "id": 412792150,
        "sender_full_name": "Max Stoumen",
        "timestamp": 1705218652
    },
    {
        "content": "<p>Use <code>n+1</code> on the LHS rather than <code>n-1</code> on the RHS</p>",
        "id": 412792255,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705218737
    },
    {
        "content": "<p>pattern matching on <code>k+n</code> is almost certainly wrong</p>",
        "id": 412792279,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1705218767
    },
    {
        "content": "<p>ah, got it to work, thank you so much!!!</p>",
        "id": 412792625,
        "sender_full_name": "Max Stoumen",
        "timestamp": 1705219090
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"681232\">Max Stoumen</span> has marked this topic as resolved.</p>",
        "id": 412793166,
        "sender_full_name": "Notification Bot",
        "timestamp": 1705219592
    }
]