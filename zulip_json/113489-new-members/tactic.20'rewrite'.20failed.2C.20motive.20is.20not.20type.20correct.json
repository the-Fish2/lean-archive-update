[
    {
        "content": "<p>I'm trying to complete the definition of <code>equivProduct</code> below:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Partition.Finpartition</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span> <span class=\"n\">Finset</span> <span class=\"n\">Function</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Finpartition</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Finpartition</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">existsUnique_mem</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃!</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">P.parts</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">ht</span><span class=\"o\">,</span> <span class=\"n\">ht'</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">P.exists_mem</span> <span class=\"n\">ha</span>\n  <span class=\"n\">refine'</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">ht</span><span class=\"o\">,</span> <span class=\"n\">ht'</span><span class=\"o\">⟩,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">u</span> <span class=\"o\">⟨</span><span class=\"n\">hu</span><span class=\"o\">,</span> <span class=\"n\">hu'</span><span class=\"o\">⟩</span>\n  <span class=\"n\">exact</span> <span class=\"n\">P.eq_of_mem_parts</span> <span class=\"n\">hu</span> <span class=\"n\">ht</span> <span class=\"n\">hu'</span> <span class=\"n\">ht'</span>\n\n<span class=\"sd\">/-- The part of the finpartition that `a` lies in. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">part</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">choose</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:=</span> <span class=\"n\">P.existsUnique_mem</span> <span class=\"n\">ha</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">part_mem</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P.part</span> <span class=\"n\">ha</span> <span class=\"bp\">∈</span> <span class=\"n\">P.parts</span> <span class=\"o\">:=</span> <span class=\"n\">choose_mem</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">mem_part</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">P.part</span> <span class=\"n\">ha</span> <span class=\"o\">:=</span> <span class=\"n\">choose_property</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">equivProduct</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">≃</span> <span class=\"o\">{</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span> <span class=\"bp\">//</span> <span class=\"n\">t.1</span> <span class=\"bp\">∈</span> <span class=\"n\">P.parts</span> <span class=\"bp\">∧</span> <span class=\"n\">t.2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t.1.card</span> <span class=\"o\">}</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">P.part</span> <span class=\"n\">x.2</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">p.equivFin</span> <span class=\"o\">⟨</span><span class=\"n\">x.1</span><span class=\"o\">,</span> <span class=\"n\">P.mem_part</span> <span class=\"n\">x.2</span><span class=\"o\">⟩⟩,</span>\n      <span class=\"o\">⟨</span><span class=\"kd\">by</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">P.part_mem</span> <span class=\"n\">x.2</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">Fin.prop</span><span class=\"o\">⟩⟩</span>\n  <span class=\"n\">invFun</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">l</span><span class=\"o\">⟩⟩</span> <span class=\"o\">:=</span> <span class=\"n\">t</span>\n    <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">p.equivFin.symm</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">l</span><span class=\"o\">⟩</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">x.1</span><span class=\"o\">,</span> <span class=\"n\">mem_of_subset</span> <span class=\"o\">((</span><span class=\"n\">le_sup</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">P.supParts.le</span><span class=\"o\">)</span> <span class=\"n\">x.2</span><span class=\"o\">⟩</span>\n  <span class=\"n\">left_inv</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n  <span class=\"n\">right_inv</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">l</span><span class=\"o\">⟩⟩</span> <span class=\"o\">:=</span> <span class=\"n\">t</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"n\">at</span> <span class=\"n\">m</span> <span class=\"n\">l</span>\n    <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">p.equivFin.symm</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">l</span><span class=\"o\">⟩</span>\n    <span class=\"k\">have</span> <span class=\"n\">ξ</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">mem_of_subset</span> <span class=\"o\">((</span><span class=\"n\">le_sup</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">P.supParts.le</span><span class=\"o\">)</span> <span class=\"n\">x.2</span>\n    <span class=\"k\">have</span> <span class=\"n\">ξ'</span> <span class=\"o\">:</span> <span class=\"n\">P.part</span> <span class=\"n\">ξ</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">P.eq_of_mem_parts</span> <span class=\"o\">(</span><span class=\"n\">P.part_mem</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">P.mem_part</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">x.2</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ξ'</span><span class=\"o\">,</span> <span class=\"n\">id_eq</span><span class=\"o\">,</span> <span class=\"n\">Subtype.mk.injEq</span><span class=\"o\">,</span> <span class=\"n\">Prod.mk.injEq</span><span class=\"o\">,</span> <span class=\"n\">true_and</span><span class=\"o\">]</span>\n    <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">P.part</span> <span class=\"n\">ξ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">equivFin</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">i</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ξ'</span><span class=\"o\">]</span> <span class=\"c1\">-- tactic 'rewrite' failed, motive is not type correct</span>\n</code></pre></div>\n<p>Just before <code>rw [ξ']</code> the goal state is <code>↑((equivFin (part P ξ)) { val := ↑((equivFin p).symm { val := i, isLt := l }), property := _ }) = i</code>. I've been trying for an hour to prove <code>right_inv</code>, without success, and yet the goal is clearly true. Can anybody help?</p>",
        "id": 410255405,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1703748391
    },
    {
        "content": "<p>(<code>equivProduct</code> is an equivalence between the elements of a <code>Finpartition</code>ed finset and pairs <code>(part, index within part)</code>, where the in-part indices are generated by the noncomputable <code>equivFin</code>)</p>",
        "id": 410255652,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1703748595
    },
    {
        "content": "<p>It seems like <code>rw [ξ']</code> should go through, and then I'd be able to use basic equiv theorems to finish it off</p>",
        "id": 410255747,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1703748645
    },
    {
        "content": "<p>I don't need to follow the proposed path to prove <code>right_inv</code></p>",
        "id": 410260124,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1703751605
    },
    {
        "content": "<p>The following lemma, or some variant of it, could be useful in this context:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">congr_coe_equivFin_apply</span>\n    <span class=\"o\">{</span><span class=\"n\">S₁</span> <span class=\"n\">S₂</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">S₁</span> <span class=\"bp\">=</span> <span class=\"n\">S₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x₁</span> <span class=\"o\">:</span> <span class=\"n\">S₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x₂</span> <span class=\"o\">:</span> <span class=\"n\">S₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x₁.1</span> <span class=\"bp\">=</span> <span class=\"n\">x₂.1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">equivFin</span> <span class=\"n\">S₁</span> <span class=\"n\">x₁</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">equivFin</span> <span class=\"n\">S₂</span> <span class=\"n\">x₂</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">subst</span> <span class=\"n\">h</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"n\">x₁</span> <span class=\"bp\">=</span> <span class=\"n\">x₂</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">hx</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 410290245,
        "sender_full_name": "Joël Riou",
        "timestamp": 1703768292
    }
]