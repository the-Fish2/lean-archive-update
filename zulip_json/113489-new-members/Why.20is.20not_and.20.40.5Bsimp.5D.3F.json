[
    {
        "content": "<p>It's quite annoying that <code>¬(a ∧ b)</code> rewrites to <code>a → ¬b</code> automatically, since sometimes I want to rely on the commutativity of <code>∧</code> but that detail gets lost in this rewrite. Of course I can disable it with <code>-not_and</code>, but is there a more general rule governing which facts are marked as <code>@[simp]</code> or not?</p>",
        "id": 434603211,
        "sender_full_name": "Will Crichton",
        "timestamp": 1713718305
    },
    {
        "content": "<p>One explanation for this would be when writing theorems, we write them curried:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- instead of</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">((</span><span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"o\">((</span><span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">not_and</span><span class=\"o\">,</span> <span class=\"n\">and_imp</span><span class=\"o\">]</span> <span class=\"c1\">-- or just simp</span>\n</code></pre></div>\n<p>This means most theorems will match the form <code>a → ¬b</code> over <code>¬(a ∧ b)</code>. As for why this is helpful see the documentation on <a href=\"https://leanprover-community.github.io/extras/simp.html#simp-normal-form\">simp-normal forms</a>.</p>",
        "id": 434605943,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1713720886
    },
    {
        "content": "<p>Does <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=imp_not_comm#doc\">docs#imp_not_comm</a> help here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"bp\">∧</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">not_and</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"bp\">⊢</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">imp_not_comm</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 434607147,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1713722143
    }
]