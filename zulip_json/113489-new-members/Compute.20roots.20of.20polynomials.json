[
    {
        "content": "<p>I want to show that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>h</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>:</mo><mo>=</mo><msup><mi>x</mi><mn>3</mn></msup><mo>−</mo><mn>6</mn><mi mathvariant=\"normal\">/</mi><mn>8</mn><mi>x</mi><mo>−</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>8</mn></mrow><annotation encoding=\"application/x-tex\">h(x) := x^3 - 6/8 x - 1/8</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">6/8</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1/8</span></span></span></span> is irreducible, there I showed that it is sufficient to show that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>h</mi></mrow><annotation encoding=\"application/x-tex\">h</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">h</span></span></span></span> has no roots. I thought of proving this using the rational roots theorem for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>8</mn><mo>⋅</mo><mi>h</mi></mrow><annotation encoding=\"application/x-tex\">8\\cdot h</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">8</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">h</span></span></span></span>. <br>\nBut I cannot figure out how to convert the goal to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>h</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>0</mn><mo>↔</mo><mi>x</mi><mi mathvariant=\"normal\">∣</mi><mn>8</mn></mrow><annotation encoding=\"application/x-tex\">h(x) = 0 \\leftrightarrow x | 8</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↔</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord\">∣8</span></span></span></span> (comment 1) and then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>∈</mo><mo stretchy=\"false\">{</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>2</mn><mo separator=\"true\">,</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>4</mn><mo separator=\"true\">,</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>8</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">x \\in \\{1, 1/2, 1/4, 1/8\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1/2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1/4</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1/8</span><span class=\"mclose\">}</span></span></span></span> (comment 2).</p>\n<p>Does anyone know how to write the proof according to comments 1-4 or has a better way of structuring the proof?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Polynomial</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"mi\">6</span><span class=\"bp\">/</span><span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">8</span><span class=\"o\">)</span>  <span class=\"c1\">-- x^3 - 6/8 x - 1/8</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">H'</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"n\">C</span> <span class=\"mi\">8</span> <span class=\"bp\">*</span><span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"mi\">1</span> <span class=\"c1\">-- 8x^3 - 6 x - 1</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">H_eq_mul_H'</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">H'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">H_roots</span><span class=\"o\">:</span> <span class=\"n\">roots</span> <span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">heq</span><span class=\"o\">:</span> <span class=\"n\">roots</span> <span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"n\">roots</span> <span class=\"n\">H'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">heq</span><span class=\"o\">]</span>\n  <span class=\"n\">refine</span> <span class=\"n\">Multiset.eq_zero_of_forall_not_mem</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">h</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₀</span><span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">IsFractionRing.den</span> <span class=\"n\">ℚ</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∣</span> <span class=\"n\">Polynomial.leadingCoeff</span> <span class=\"n\">H'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">den_dvd_of_is_root</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span><span class=\"o\">:</span> <span class=\"n\">Polynomial.leadingCoeff</span> <span class=\"n\">H'</span> <span class=\"bp\">=</span> <span class=\"mi\">8</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n  <span class=\"c1\">--! 1. show H(x) = 0 ↔ x | 8</span>\n  <span class=\"c1\">--! 2. show x ∈ {1, 1/2, 1/4, 1/8}</span>\n\n  <span class=\"c1\">-- 3. show H(z) ≠ 0 for z ∈ {1, 1/2, 1/4, 1/8}</span>\n  <span class=\"c1\">-- 4. contradiction</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 420538666,
        "sender_full_name": "Ludwig Monnerjahn",
        "timestamp": 1707425105
    },
    {
        "content": "<p>I suspect that you may find <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=num_dvd_of_is_root#doc\">docs#num_dvd_of_is_root</a> useful.  I also think that there is probably the need of more API lemmas around this to actually make proving your lemma easier.</p>",
        "id": 420543981,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707427273
    },
    {
        "content": "<p>Yay, maybe the constant coefficient is easier, I tried using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=den_dvd_of_is_root#doc\">docs#den_dvd_of_is_root</a>. But it the problems I get stuct remain the same.</p>",
        "id": 420570897,
        "sender_full_name": "Ludwig Monnerjahn",
        "timestamp": 1707441190
    },
    {
        "content": "<p>Nothing serious, but your example doesn't work (you wrote <code>mathlib</code> instead of <code>Mathlib</code> in the first line).</p>",
        "id": 420613768,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707470872
    },
    {
        "content": "<p>Anyway let me have a look. My first suggestion is to take <code>H' := IsLocalization.integerNormalization _ H</code></p>",
        "id": 420615523,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707471567
    },
    {
        "content": "<p>I played with this a little, but I have to stop for a bit.  I made some progress, but did not manage to finish it.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"n\">abbrev</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"mi\">6</span><span class=\"bp\">/</span><span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">8</span><span class=\"o\">)</span>  <span class=\"c1\">-- x^3 - 6/8 x - 1/8</span>\n<span class=\"kd\">noncomputable</span> <span class=\"n\">abbrev</span> <span class=\"n\">H'</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"n\">C</span> <span class=\"mi\">8</span> <span class=\"bp\">*</span><span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"mi\">1</span> <span class=\"c1\">-- 8x^3 - 6 x - 1</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"n\">abbrev</span> <span class=\"n\">Hz</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"n\">C</span> <span class=\"mi\">8</span> <span class=\"bp\">*</span><span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"mi\">1</span> <span class=\"c1\">-- 8x^3 - 6 x - 1</span>\n\n<span class=\"c1\">-- this statement is ready for use in an extension of `compute_degree` that should be able to solve `leadingCoeff` goals.</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">leadingCoeff_eq_of_natDegree_le_of_coeff_eq</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r0</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]}</span>\n    <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">dn</span> <span class=\"o\">:</span> <span class=\"n\">f.natDegree</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cn</span> <span class=\"o\">:</span> <span class=\"n\">f.coeff</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">f.leadingCoeff</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">subst</span> <span class=\"n\">cn</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">leadingCoeff</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">natDegree_eq_of_le_of_coeff_ne_zero</span> <span class=\"n\">dn</span> <span class=\"n\">r0</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">leadingCoeffHz</span> <span class=\"o\">:</span> <span class=\"n\">leadingCoeff</span> <span class=\"n\">Hz</span> <span class=\"bp\">=</span> <span class=\"mi\">8</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">Hz</span>\n  <span class=\"n\">apply</span> <span class=\"n\">leadingCoeff_eq_of_natDegree_le_of_coeff_eq</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">compute_degree</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">coeff_sub</span><span class=\"o\">,</span> <span class=\"n\">coeff_C_mul</span><span class=\"o\">,</span> <span class=\"n\">coeff_X_pow</span><span class=\"o\">,</span> <span class=\"bp\">↓</span><span class=\"n\">reduceIte</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">coeff_X</span><span class=\"o\">,</span> <span class=\"n\">coeff_C</span><span class=\"o\">]</span>\n    <span class=\"n\">norm_num</span>\n  <span class=\"bp\">·</span> <span class=\"n\">norm_num</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">leadingCoeffH'z</span> <span class=\"o\">:</span> <span class=\"n\">leadingCoeff</span> <span class=\"n\">H'</span> <span class=\"bp\">=</span> <span class=\"mi\">8</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">H'</span>\n  <span class=\"n\">apply</span> <span class=\"n\">leadingCoeff_eq_of_natDegree_le_of_coeff_eq</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">compute_degree</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">coeff_sub</span><span class=\"o\">,</span> <span class=\"n\">coeff_C_mul</span><span class=\"o\">,</span> <span class=\"n\">coeff_X_pow</span><span class=\"o\">,</span> <span class=\"bp\">↓</span><span class=\"n\">reduceIte</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">coeff_X</span><span class=\"o\">,</span> <span class=\"n\">coeff_C</span><span class=\"o\">]</span>\n    <span class=\"n\">norm_num</span>\n  <span class=\"bp\">·</span> <span class=\"n\">norm_num</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">H_roots</span><span class=\"o\">:</span> <span class=\"n\">roots</span> <span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">heq</span><span class=\"o\">:</span> <span class=\"n\">roots</span> <span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"n\">roots</span> <span class=\"n\">H'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">heq</span><span class=\"o\">]</span>\n  <span class=\"n\">refine</span> <span class=\"n\">Multiset.eq_zero_of_forall_not_mem</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">h</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span><span class=\"o\">:=</span> <span class=\"n\">leadingCoeffH'z</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">den_dvd_of_is_root</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">Hz</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"n\">lcZ</span> <span class=\"o\">:=</span> <span class=\"n\">leadingCoeffHz</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">lcZ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">8</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">),</span> <span class=\"n\">dvd_prime_pow</span> <span class=\"o\">(</span><span class=\"n\">Int.prime_two</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">num_dvd_of_is_root</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">Hz</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp_all</span><span class=\"o\">)</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">isUnit_iff_dvd_one</span><span class=\"o\">,</span> <span class=\"n\">Int.isUnit_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n    <span class=\"gr\">sorry</span>  <span class=\"c1\">-- here the numerator and denominator are bounded, but there is some missing API around</span>\n           <span class=\"c1\">-- `IsFractionRing.num` and `IsFractionRing.den`</span>\n  <span class=\"bp\">·</span> <span class=\"n\">convert</span> <span class=\"n\">h</span>\n    <span class=\"n\">simp</span>\n  <span class=\"n\">done</span>\n</code></pre></div>",
        "id": 420621956,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707473967
    },
    {
        "content": "<p>I am also playing with it, and I dont think anymore that using <code>IsLocalization.integerNormalization</code> is a good idea.</p>",
        "id": 420622454,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707474130
    },
    {
        "content": "<p>From here it should be very easy to finish the list of roots</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Polynomial</span> <span class=\"n\">nonZeroDivisors</span> <span class=\"n\">IsFractionRing</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"mi\">6</span><span class=\"bp\">/</span><span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">8</span><span class=\"o\">)</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">H'</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"n\">C</span> <span class=\"mi\">8</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">H_H'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">ℤ</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"n\">H'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">H'</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">one_div</span><span class=\"o\">,</span> <span class=\"n\">smul_eq_C_mul</span><span class=\"o\">,</span> <span class=\"n\">map_ofNat</span><span class=\"o\">,</span> <span class=\"n\">mul_sub</span><span class=\"o\">,</span> <span class=\"n\">algebraMap_int_eq</span><span class=\"o\">,</span> <span class=\"n\">Polynomial.map_sub</span><span class=\"o\">,</span>\n    <span class=\"n\">Polynomial.map_mul</span><span class=\"o\">,</span> <span class=\"n\">Polynomial.map_ofNat</span><span class=\"o\">,</span> <span class=\"n\">Polynomial.map_pow</span><span class=\"o\">,</span> <span class=\"n\">map_X</span><span class=\"o\">,</span> <span class=\"n\">Polynomial.map_one</span><span class=\"o\">]</span>\n  <span class=\"n\">congr</span> <span class=\"mi\">2</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span>\n    <span class=\"n\">congr</span>\n    <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">8</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">6</span> <span class=\"bp\">/</span> <span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">6</span>\n    <span class=\"n\">convert</span> <span class=\"n\">congr_arg</span> <span class=\"n\">C</span> <span class=\"n\">this</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">map_mul</span><span class=\"o\">,</span> <span class=\"n\">map_ofNat</span><span class=\"o\">,</span> <span class=\"n\">mul_eq_mul_left_iff</span><span class=\"o\">,</span> <span class=\"n\">OfNat.ofNat_ne_zero</span><span class=\"o\">,</span> <span class=\"n\">or_false</span><span class=\"o\">]</span>\n    <span class=\"n\">norm_num</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">8</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"mi\">8</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">map_mul</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">H'_degree</span> <span class=\"o\">:</span> <span class=\"n\">H'.natDegree</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">H'</span><span class=\"o\">]</span>\n  <span class=\"n\">compute_degree</span>\n  <span class=\"n\">repeat</span> <span class=\"n\">norm_num</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">H_degree</span> <span class=\"o\">:</span> <span class=\"n\">H.natDegree</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">H</span><span class=\"o\">]</span>\n  <span class=\"n\">compute_degree</span>\n  <span class=\"n\">repeat</span> <span class=\"n\">norm_num</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">H_ne_zero</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">H_degree</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">H'_coeff_zero</span> <span class=\"o\">:</span> <span class=\"n\">H'.coeff</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">H'</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">H'_leading</span> <span class=\"o\">:</span> <span class=\"n\">H'.leadingCoeff</span> <span class=\"bp\">=</span> <span class=\"mi\">8</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">leadingCoeff</span><span class=\"o\">,</span> <span class=\"n\">H'_degree</span><span class=\"o\">,</span> <span class=\"n\">H'</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">coeff_one</span><span class=\"o\">,</span> <span class=\"n\">coeff_X</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">H'_roots_num</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">aeval</span> <span class=\"n\">a</span> <span class=\"n\">H'</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">num</span> <span class=\"n\">ℤ</span> <span class=\"n\">a</span> <span class=\"bp\">∣</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">convert</span> <span class=\"n\">num_dvd_of_is_root</span> <span class=\"n\">ha</span>\n  <span class=\"n\">exact</span> <span class=\"n\">H'_coeff_zero.symm</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">H'_roots_den</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">aeval</span> <span class=\"n\">a</span> <span class=\"n\">H'</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">den</span> <span class=\"n\">ℤ</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">∣</span> <span class=\"mi\">8</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">convert</span> <span class=\"n\">den_dvd_of_is_root</span> <span class=\"n\">ha</span>\n  <span class=\"n\">exact</span> <span class=\"n\">H'_leading.symm</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">roots_H_H'</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">H.roots</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">aeval</span> <span class=\"n\">a</span> <span class=\"n\">H'</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">aeval</span> <span class=\"n\">a</span> <span class=\"o\">((</span><span class=\"n\">C</span> <span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_roots</span> <span class=\"n\">H_ne_zero</span><span class=\"o\">,</span> <span class=\"n\">IsRoot.def</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ha</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">]</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">H_H'</span><span class=\"o\">,</span> <span class=\"n\">aeval_map_algebraMap</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">roots_num</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">H.roots</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">num</span> <span class=\"n\">ℤ</span> <span class=\"n\">a</span> <span class=\"bp\">∣</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span>\n  <span class=\"n\">H'_roots_num</span> <span class=\"o\">(</span><span class=\"n\">roots_H_H'</span> <span class=\"n\">ha</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">roots_den</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">H.roots</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">den</span> <span class=\"n\">ℤ</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">∣</span> <span class=\"mi\">8</span> <span class=\"o\">:=</span>\n  <span class=\"n\">H'_roots_den</span> <span class=\"o\">(</span><span class=\"n\">roots_H_H'</span> <span class=\"n\">ha</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 420627013,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707475691
    },
    {
        "content": "<p>I have to stop half an hour, but I will try to finish it later. It is anyway a ridiculous pain.</p>",
        "id": 420627116,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707475729
    },
    {
        "content": "<p>Riccardo, <code>compute_degree!</code> ~ <code>compute_degree; repeat norm_num</code>.</p>",
        "id": 420627541,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707475882
    },
    {
        "content": "<p>Do you see a way of making the first lemma immediate? I hoped for something like a ext split simp combo, but it didn't work</p>",
        "id": 420628224,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707476147
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span>   not really immediate:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">H_H'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">ℤ</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"n\">H'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">H'</span><span class=\"o\">]</span>\n  <span class=\"n\">ext</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"mi\">1</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">coeff_X</span><span class=\"o\">,</span> <span class=\"n\">coeff_C</span><span class=\"o\">,</span> <span class=\"n\">coeff_one</span><span class=\"o\">]</span>\n  <span class=\"n\">split_ifs</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">norm_num</span>\n</code></pre></div>",
        "id": 420628748,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707476329
    },
    {
        "content": "<p>Ah, very nice! I didn't notice <code>ext</code> was going too deep.</p>",
        "id": 420628974,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707476410
    },
    {
        "content": "<p>There should be <em>a lot</em> more automation for dealing with <em>explicit</em> polynomials.  Mathlib has \"general\" results, but these kinds of explicit computations appear quite a bit!</p>",
        "id": 420628988,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707476414
    },
    {
        "content": "<p>Yes, <code>ext</code> entering <code>Rat</code> is always an issue, in my experience.</p>",
        "id": 420629039,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707476435
    },
    {
        "content": "<p>Anyway, going from <code>IsFractionRing.num/den</code> to <code>Rat.num/den</code> is also painful, btw...</p>",
        "id": 420629340,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707476542
    },
    {
        "content": "<p>I think that we both got to this point and then had to do something else!  <span aria-label=\"lol\" class=\"emoji emoji-1f606\" role=\"img\" title=\"lol\">:lol:</span></p>",
        "id": 420629474,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707476598
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113489-new-members/topic/Compute.20roots.20of.20polynomials/near/420629039\">said</a>:</p>\n<blockquote>\n<p>Yes, <code>ext</code> entering <code>Rat</code> is always an issue, in my experience.</p>\n</blockquote>\n<p>That can be fixed by removing the <code>ext</code> attribute from the relevant lemma. We did the same thing for <code>ℂ</code> recently.</p>",
        "id": 420631659,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1707477494
    },
    {
        "content": "<p>OK, I have a proof of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">roots_num</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">H.roots</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">num</span> <span class=\"n\">ℤ</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">num</span> <span class=\"n\">ℤ</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">roots_den</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">H.roots</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">den</span> <span class=\"n\">ℤ</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"o\">({</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">8</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">8</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 420632510,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707477850
    },
    {
        "content": "<p>But this still leaves 16 (of course 8 in reality) cases, very annoying</p>",
        "id": 420632579,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707477883
    },
    {
        "content": "<p>Well, not so much.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Polynomial</span> <span class=\"n\">IsFractionRing</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"mi\">6</span><span class=\"bp\">/</span><span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">8</span><span class=\"o\">)</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">H'</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"n\">C</span> <span class=\"mi\">8</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">H_H'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">ℤ</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"n\">H'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">H'</span><span class=\"o\">]</span>\n  <span class=\"n\">ext</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"mi\">1</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">map_ofNat</span><span class=\"o\">,</span> <span class=\"n\">one_div</span><span class=\"o\">,</span> <span class=\"n\">coeff_ofNat_mul</span><span class=\"o\">,</span> <span class=\"n\">coeff_sub</span><span class=\"o\">,</span> <span class=\"n\">coeff_X_pow</span><span class=\"o\">,</span> <span class=\"n\">coeff_C_mul</span><span class=\"o\">,</span> <span class=\"n\">coeff_X</span><span class=\"o\">,</span>\n    <span class=\"n\">mul_ite</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"n\">coeff_C</span><span class=\"o\">,</span> <span class=\"n\">algebraMap_int_eq</span><span class=\"o\">,</span> <span class=\"n\">Polynomial.map_sub</span><span class=\"o\">,</span> <span class=\"n\">Polynomial.map_mul</span><span class=\"o\">,</span>\n    <span class=\"n\">Polynomial.map_ofNat</span><span class=\"o\">,</span> <span class=\"n\">Polynomial.map_pow</span><span class=\"o\">,</span> <span class=\"n\">map_X</span><span class=\"o\">,</span> <span class=\"n\">Polynomial.map_one</span><span class=\"o\">,</span> <span class=\"n\">coeff_one</span><span class=\"o\">]</span>\n  <span class=\"n\">split_ifs</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">norm_num</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">H'_degree</span> <span class=\"o\">:</span> <span class=\"n\">H'.natDegree</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">H'</span><span class=\"o\">]</span>\n  <span class=\"n\">compute_degree</span><span class=\"bp\">!</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">H_degree</span> <span class=\"o\">:</span> <span class=\"n\">H.natDegree</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">H</span><span class=\"o\">]</span>\n  <span class=\"n\">compute_degree</span><span class=\"bp\">!</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">H_ne_zero</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">H_degree</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">H'_coeff_zero</span> <span class=\"o\">:</span> <span class=\"n\">H'.coeff</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">H'</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">H'_leading</span> <span class=\"o\">:</span> <span class=\"n\">H'.leadingCoeff</span> <span class=\"bp\">=</span> <span class=\"mi\">8</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">leadingCoeff</span><span class=\"o\">,</span> <span class=\"n\">H'_degree</span><span class=\"o\">,</span> <span class=\"n\">H'</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">coeff_one</span><span class=\"o\">,</span> <span class=\"n\">coeff_X</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">H'_roots_num</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">aeval</span> <span class=\"n\">a</span> <span class=\"n\">H'</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">num</span> <span class=\"n\">ℤ</span> <span class=\"n\">a</span> <span class=\"bp\">∣</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">convert</span> <span class=\"n\">num_dvd_of_is_root</span> <span class=\"n\">ha</span>\n  <span class=\"n\">exact</span> <span class=\"n\">H'_coeff_zero.symm</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">H'_roots_den</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">aeval</span> <span class=\"n\">a</span> <span class=\"n\">H'</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">den</span> <span class=\"n\">ℤ</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">∣</span> <span class=\"mi\">8</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">convert</span> <span class=\"n\">den_dvd_of_is_root</span> <span class=\"n\">ha</span>\n  <span class=\"n\">exact</span> <span class=\"n\">H'_leading.symm</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">roots_H_H'</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">H.roots</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">aeval</span> <span class=\"n\">a</span> <span class=\"n\">H'</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">aeval</span> <span class=\"n\">a</span> <span class=\"o\">((</span><span class=\"n\">C</span> <span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_roots</span> <span class=\"n\">H_ne_zero</span><span class=\"o\">,</span> <span class=\"n\">IsRoot.def</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ha</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">]</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">H_H'</span><span class=\"o\">,</span> <span class=\"n\">aeval_map_algebraMap</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">roots_num</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">H.roots</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">num</span> <span class=\"n\">ℤ</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">num</span> <span class=\"n\">ℤ</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">H'_roots_num</span> <span class=\"o\">(</span><span class=\"n\">roots_H_H'</span> <span class=\"n\">ha</span><span class=\"o\">)</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Int.natAbs_dvd_natAbs</span><span class=\"o\">,</span> <span class=\"n\">Int.natAbs_neg</span><span class=\"o\">,</span> <span class=\"n\">Int.natAbs_one</span><span class=\"o\">,</span> <span class=\"n\">Nat.dvd_one</span><span class=\"o\">,</span>\n    <span class=\"n\">Int.natAbs_eq_iff</span><span class=\"o\">,</span> <span class=\"n\">Nat.cast_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">roots_den_abs</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">H.roots</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">den</span> <span class=\"n\">ℤ</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">natAbs</span> <span class=\"bp\">∈</span> <span class=\"o\">({</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">8</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">8</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.divisors</span> <span class=\"mi\">8</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">Nat.mem_divisors</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Int.coe_nat_dvd</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">H'_roots_den</span> <span class=\"o\">(</span><span class=\"n\">roots_H_H'</span> <span class=\"n\">ha</span><span class=\"o\">)],</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">roots_den</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">H.roots</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">den</span> <span class=\"n\">ℤ</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"o\">({</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">8</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">8</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">roots_den_abs</span> <span class=\"n\">ha</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Finset.mem_insert</span><span class=\"o\">,</span> <span class=\"n\">Finset.mem_singleton</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span> <span class=\"c1\">--can I use `fin_cases`?</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rcases</span> <span class=\"n\">Int.natAbs_eq_iff.1</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">roots</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">H.roots</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">roots_den</span> <span class=\"n\">ha</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Int.reduceNeg</span><span class=\"o\">,</span> <span class=\"n\">Finset.mem_insert</span><span class=\"o\">,</span> <span class=\"n\">OneMemClass.coe_eq_one</span><span class=\"o\">,</span> <span class=\"n\">Finset.mem_singleton</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n  <span class=\"k\">have</span> <span class=\"n\">num</span> <span class=\"o\">:=</span> <span class=\"n\">roots_num</span> <span class=\"n\">ha</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_roots</span> <span class=\"n\">H_ne_zero</span><span class=\"o\">,</span> <span class=\"n\">IsRoot.def</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">eval_sub</span><span class=\"o\">,</span> <span class=\"n\">eval_sub</span><span class=\"o\">,</span> <span class=\"n\">eval_pow</span><span class=\"o\">,</span> <span class=\"n\">eval_X</span><span class=\"o\">,</span> <span class=\"n\">eval_mul</span><span class=\"o\">,</span> <span class=\"n\">eval_C</span><span class=\"o\">,</span>\n    <span class=\"n\">eval_X</span><span class=\"o\">,</span> <span class=\"n\">eval_C</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">mk'_num_den'</span> <span class=\"n\">ℤ</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ha</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">algebraMap_int_eq</span><span class=\"o\">,</span> <span class=\"n\">eq_intCast</span><span class=\"o\">,</span> <span class=\"n\">div_pow</span><span class=\"o\">,</span> <span class=\"n\">one_div</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ha</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">num</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">&lt;;&gt;</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"bp\">|</span> <span class=\"n\">h1</span> <span class=\"bp\">|</span> <span class=\"n\">h1</span> <span class=\"bp\">|</span> <span class=\"n\">h1</span> <span class=\"bp\">|</span> <span class=\"n\">h1</span> <span class=\"bp\">|</span> <span class=\"n\">h1</span> <span class=\"bp\">|</span> <span class=\"n\">h1</span> <span class=\"bp\">|</span> <span class=\"n\">h1</span><span class=\"o\">)</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">norm_num</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ha</span>\n</code></pre></div>",
        "id": 420635118,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707478757
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"671805\">@Ludwig Monnerjahn</span> is the fact the the non existence of a root implies irreducibility in mathlb? I thought we were missing that.</p>",
        "id": 420635444,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707478893
    },
    {
        "content": "<p>Ah, it's <a href=\"https://github.com/leanprover-community/mathlib4/pull/9697\">#9697</a></p>",
        "id": 420638028,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707479921
    },
    {
        "content": "<p>Here a full proof that <code>H</code> is irreducible.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Polynomial</span> <span class=\"n\">IsFractionRing</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">irreducible_iff_lt_natDegree_lt</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NoZeroDivisors</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p.Monic</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp1</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Irreducible</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">Monic</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">natDegree</span> <span class=\"n\">q</span> <span class=\"bp\">∈</span> <span class=\"n\">Finset.Ioc</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">natDegree</span> <span class=\"n\">p</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">q</span> <span class=\"bp\">∣</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hp.irreducible_iff_natDegree'</span><span class=\"o\">,</span> <span class=\"n\">and_iff_right</span> <span class=\"n\">hp1</span><span class=\"o\">]</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"n\">h</span> <span class=\"n\">g</span> <span class=\"n\">hg</span> <span class=\"n\">hdg</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">hg.of_mul_monic_left</span> <span class=\"n\">hp</span><span class=\"o\">)</span> <span class=\"n\">hg</span> <span class=\"o\">(</span><span class=\"n\">mul_comm</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">hdg</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"n\">h</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">-</span> <span class=\"n\">hg</span> <span class=\"n\">rfl</span> <span class=\"n\">hdg</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">g</span> <span class=\"n\">hg</span> <span class=\"n\">hdg</span> <span class=\"o\">(</span><span class=\"n\">dvd_mul_left</span> <span class=\"n\">g</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">irreducible_iff_roots_eq_zero_of_degree_le_three</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsDomain</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p.Monic</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hp2</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">p.natDegree</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp3</span> <span class=\"o\">:</span> <span class=\"n\">p.natDegree</span> <span class=\"bp\">≤</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Irreducible</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">p.roots</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">irreducible_iff_lt_natDegree_lt</span> <span class=\"n\">hp</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">swap</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"n\">rfl</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">natDegree_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hp2</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">hp2</span>\n  <span class=\"k\">have</span> <span class=\"n\">hp0</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rintro</span> <span class=\"n\">rfl</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">natDegree_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hp2</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">hp2</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"n\">p.natDegree</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">Nat.div_le_div_right</span> <span class=\"n\">hp3</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">antisymm</span>\n    <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">Nat.div_le_div_right</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">hp2</span><span class=\"o\">),</span> <span class=\"k\">show</span> <span class=\"n\">Finset.Ioc</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n    <span class=\"n\">Finset.mem_singleton</span><span class=\"o\">,</span> <span class=\"n\">Multiset.eq_zero_iff_forall_not_mem</span><span class=\"o\">,</span> <span class=\"n\">mem_roots</span> <span class=\"n\">hp0</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">dvd_iff_isRoot</span><span class=\"o\">]</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"n\">r</span> <span class=\"bp\">↦</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">monic_X_sub_C</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">natDegree_X_sub_C</span> <span class=\"n\">r</span><span class=\"o\">),</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"n\">q</span> <span class=\"n\">hq</span> <span class=\"n\">hq1</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hq.eq_X_add_C</span> <span class=\"n\">hq1</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">sub_neg_eq_add</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">C_neg</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"mi\">6</span><span class=\"bp\">/</span><span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">8</span><span class=\"o\">)</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">H'</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"n\">C</span> <span class=\"mi\">8</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">H_H'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">ℤ</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"n\">H'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">H'</span><span class=\"o\">]</span>\n  <span class=\"n\">ext</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"mi\">1</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">map_ofNat</span><span class=\"o\">,</span> <span class=\"n\">one_div</span><span class=\"o\">,</span> <span class=\"n\">coeff_ofNat_mul</span><span class=\"o\">,</span> <span class=\"n\">coeff_sub</span><span class=\"o\">,</span> <span class=\"n\">coeff_X_pow</span><span class=\"o\">,</span> <span class=\"n\">coeff_C_mul</span><span class=\"o\">,</span> <span class=\"n\">coeff_X</span><span class=\"o\">,</span>\n    <span class=\"n\">mul_ite</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"n\">coeff_C</span><span class=\"o\">,</span> <span class=\"n\">algebraMap_int_eq</span><span class=\"o\">,</span> <span class=\"n\">Polynomial.map_sub</span><span class=\"o\">,</span> <span class=\"n\">Polynomial.map_mul</span><span class=\"o\">,</span>\n    <span class=\"n\">Polynomial.map_ofNat</span><span class=\"o\">,</span> <span class=\"n\">Polynomial.map_pow</span><span class=\"o\">,</span> <span class=\"n\">map_X</span><span class=\"o\">,</span> <span class=\"n\">Polynomial.map_one</span><span class=\"o\">,</span> <span class=\"n\">coeff_one</span><span class=\"o\">]</span>\n  <span class=\"n\">split_ifs</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">norm_num</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">H'_degree</span> <span class=\"o\">:</span> <span class=\"n\">H'.natDegree</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">H'</span><span class=\"o\">]</span>\n  <span class=\"n\">compute_degree</span><span class=\"bp\">!</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">H_degree</span> <span class=\"o\">:</span> <span class=\"n\">H.natDegree</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">H</span><span class=\"o\">]</span>\n  <span class=\"n\">compute_degree</span><span class=\"bp\">!</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">H_monic</span> <span class=\"o\">:</span> <span class=\"n\">H.Monic</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">H</span>\n  <span class=\"n\">monicity</span><span class=\"bp\">!</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">H_ne_zero</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">H_degree</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">H'_coeff_zero</span> <span class=\"o\">:</span> <span class=\"n\">H'.coeff</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">H'</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">H'_leading</span> <span class=\"o\">:</span> <span class=\"n\">H'.leadingCoeff</span> <span class=\"bp\">=</span> <span class=\"mi\">8</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">leadingCoeff</span><span class=\"o\">,</span> <span class=\"n\">H'_degree</span><span class=\"o\">,</span> <span class=\"n\">H'</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">coeff_one</span><span class=\"o\">,</span> <span class=\"n\">coeff_X</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">H'_roots_num</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">aeval</span> <span class=\"n\">a</span> <span class=\"n\">H'</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">num</span> <span class=\"n\">ℤ</span> <span class=\"n\">a</span> <span class=\"bp\">∣</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">convert</span> <span class=\"n\">num_dvd_of_is_root</span> <span class=\"n\">ha</span>\n  <span class=\"n\">exact</span> <span class=\"n\">H'_coeff_zero.symm</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">H'_roots_den</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">aeval</span> <span class=\"n\">a</span> <span class=\"n\">H'</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">den</span> <span class=\"n\">ℤ</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">∣</span> <span class=\"mi\">8</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">convert</span> <span class=\"n\">den_dvd_of_is_root</span> <span class=\"n\">ha</span>\n  <span class=\"n\">exact</span> <span class=\"n\">H'_leading.symm</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">roots_H_H'</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">H.roots</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">aeval</span> <span class=\"n\">a</span> <span class=\"n\">H'</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">aeval</span> <span class=\"n\">a</span> <span class=\"o\">((</span><span class=\"n\">C</span> <span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_roots</span> <span class=\"n\">H_ne_zero</span><span class=\"o\">,</span> <span class=\"n\">IsRoot.def</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ha</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">]</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">H_H'</span><span class=\"o\">,</span> <span class=\"n\">aeval_map_algebraMap</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">roots_num</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">H.roots</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">num</span> <span class=\"n\">ℤ</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">num</span> <span class=\"n\">ℤ</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">H'_roots_num</span> <span class=\"o\">(</span><span class=\"n\">roots_H_H'</span> <span class=\"n\">ha</span><span class=\"o\">)</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Int.natAbs_dvd_natAbs</span><span class=\"o\">,</span> <span class=\"n\">Int.natAbs_neg</span><span class=\"o\">,</span> <span class=\"n\">Int.natAbs_one</span><span class=\"o\">,</span> <span class=\"n\">Nat.dvd_one</span><span class=\"o\">,</span>\n    <span class=\"n\">Int.natAbs_eq_iff</span><span class=\"o\">,</span> <span class=\"n\">Nat.cast_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">roots_den_abs</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">H.roots</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">den</span> <span class=\"n\">ℤ</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">natAbs</span> <span class=\"bp\">∈</span> <span class=\"o\">({</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">8</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">8</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.divisors</span> <span class=\"mi\">8</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">Nat.mem_divisors</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Int.coe_nat_dvd</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">H'_roots_den</span> <span class=\"o\">(</span><span class=\"n\">roots_H_H'</span> <span class=\"n\">ha</span><span class=\"o\">)],</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">roots_den</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">H.roots</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">den</span> <span class=\"n\">ℤ</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"o\">({</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">8</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">8</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">roots_den_abs</span> <span class=\"n\">ha</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Finset.mem_insert</span><span class=\"o\">,</span> <span class=\"n\">Finset.mem_singleton</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span> <span class=\"c1\">--can I use `fin_cases`?</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rcases</span> <span class=\"n\">Int.natAbs_eq_iff.1</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">H_roots</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">H.roots</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">roots_den</span> <span class=\"n\">ha</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Int.reduceNeg</span><span class=\"o\">,</span> <span class=\"n\">Finset.mem_insert</span><span class=\"o\">,</span> <span class=\"n\">OneMemClass.coe_eq_one</span><span class=\"o\">,</span> <span class=\"n\">Finset.mem_singleton</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n  <span class=\"k\">have</span> <span class=\"n\">num</span> <span class=\"o\">:=</span> <span class=\"n\">roots_num</span> <span class=\"n\">ha</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_roots</span> <span class=\"n\">H_ne_zero</span><span class=\"o\">,</span> <span class=\"n\">IsRoot.def</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">eval_sub</span><span class=\"o\">,</span> <span class=\"n\">eval_sub</span><span class=\"o\">,</span> <span class=\"n\">eval_pow</span><span class=\"o\">,</span> <span class=\"n\">eval_X</span><span class=\"o\">,</span> <span class=\"n\">eval_mul</span><span class=\"o\">,</span> <span class=\"n\">eval_C</span><span class=\"o\">,</span>\n    <span class=\"n\">eval_X</span><span class=\"o\">,</span> <span class=\"n\">eval_C</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">mk'_num_den'</span> <span class=\"n\">ℤ</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ha</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">algebraMap_int_eq</span><span class=\"o\">,</span> <span class=\"n\">eq_intCast</span><span class=\"o\">,</span> <span class=\"n\">div_pow</span><span class=\"o\">,</span> <span class=\"n\">one_div</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ha</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">num</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">&lt;;&gt;</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"bp\">|</span> <span class=\"n\">h1</span> <span class=\"bp\">|</span> <span class=\"n\">h1</span> <span class=\"bp\">|</span> <span class=\"n\">h1</span> <span class=\"bp\">|</span> <span class=\"n\">h1</span> <span class=\"bp\">|</span> <span class=\"n\">h1</span> <span class=\"bp\">|</span> <span class=\"n\">h1</span> <span class=\"bp\">|</span> <span class=\"n\">h1</span><span class=\"o\">)</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">norm_num</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ha</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">H_irr</span> <span class=\"o\">:</span> <span class=\"n\">Irreducible</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">irreducible_iff_roots_eq_zero_of_degree_le_three</span> <span class=\"n\">H_monic</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n    <span class=\"o\">(</span><span class=\"n\">Multiset.eq_zero_of_forall_not_mem</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"bp\">↦</span> <span class=\"n\">H_roots</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩))</span> <span class=\"bp\">&lt;;&gt;</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">H_degree</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span>\n</code></pre></div>",
        "id": 420640537,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707480844
    },
    {
        "content": "<p>The lemmas leading up to the computation of the leading coefficients should really have to disappear: the tactic <code>compute_degree</code> essentially already \"knows\" that the leading coefficient is <code>8</code> and that it is non-zero (via <code>norm_num</code>).</p>\n<p>I wonder if there is enough interest in actually developing further <code>compute_degree</code> into a <code>polynomial</code> tactic that handles most goals involving explicit polynomials.</p>",
        "id": 420640639,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707480886
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">H_monic</span> <span class=\"o\">:</span> <span class=\"n\">H.Monic</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">H</span>\n  <span class=\"n\">monicity</span><span class=\"bp\">!</span>\n</code></pre></div>",
        "id": 420640767,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707480944
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113489-new-members/topic/Compute.20roots.20of.20polynomials/near/420640639\">said</a>:</p>\n<blockquote>\n<p>The lemmas leading up to the computation of the leading coefficients should really have to disappear: the tactic <code>compute_degree</code> essentially already \"knows\" that the leading coefficient is <code>8</code> and that it is non-zero (via <code>norm_num</code>).</p>\n<p>I wonder if there is enough interest in actually developing further <code>compute_degree</code> into a <code>polynomial</code> tactic that handles most goals involving explicit polynomials.</p>\n</blockquote>\n<p>I was thinking the same. In my opinion we really want that. This is the usual problem that polynomials are noncomputable, so all these computations are really nontrivial.</p>",
        "id": 420640776,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707480947
    },
    {
        "content": "<p><code>monicity</code>?!</p>",
        "id": 420640798,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707480957
    },
    {
        "content": "<p>Indeed!</p>",
        "id": 420640853,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707480965
    },
    {
        "content": "<p>Those tactics are really proliferating</p>",
        "id": 420640899,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707480982
    },
    {
        "content": "<p><code>compute_degree</code> deals with finding leading coefficients and proving inequalities of degrees.  Once you have that, you can answer a lot of questions about polynomials.  This may take some time, but I can look into automating many of the computations on explicit polynomials into a single tactic.</p>",
        "id": 420641042,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707481043
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span> has some thoughts here. In principle with computable polynomials everything would be much easier, right? (Of course I don't have any idea on how to do it properly)</p>",
        "id": 420641223,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707481107
    },
    {
        "content": "<p>I also liked <span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> experiment of encoding polynomials as <code>List</code>s of coefficients.  That would also simplify a lot of these computations.</p>",
        "id": 420641328,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707481153
    },
    {
        "content": "<p>Regarding <code>computable</code> polynomials: that would definitely help.  In that case, maybe all these tactics would convert into <code>norm_num</code> extensions.</p>",
        "id": 420641506,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707481221
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110193\">@Cyril Cohen</span> how easy is to do this in Coq? We have the explicit polynomial, with rational coefficients, <code>X ^ 3 - (C (6/8) * X) - C (1/8)</code> (<code>C a</code> is the constant polynomial <code>a</code>) and we want to prove that it has no rational roots using the rational root test. We have the result in mathlib, but applying it in practice is a pain.</p>",
        "id": 420642106,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707481471
    },
    {
        "content": "<p>(BTW we want a version for the rational root test specific to <code>ℤ</code> and <code>ℚ</code>, without any localization stuff, that takes numerator and denominator as in the <code>Rat</code> API, at least this would divide the number of cases by two)</p>",
        "id": 420642368,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707481576
    },
    {
        "content": "<p>And I think that these lemmas</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">H'_degree</span> <span class=\"o\">:</span> <span class=\"n\">H'.natDegree</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">H_degree</span> <span class=\"o\">:</span> <span class=\"n\">H.natDegree</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">H_monic</span> <span class=\"o\">:</span> <span class=\"n\">H.Monic</span> <span class=\"o\">:=</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">H_ne_zero</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">H'_coeff_zero</span> <span class=\"o\">:</span> <span class=\"n\">H'.coeff</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">H'_leading</span> <span class=\"o\">:</span> <span class=\"n\">H'.leadingCoeff</span> <span class=\"bp\">=</span> <span class=\"mi\">8</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>should all be hidden by automation (and are probably very close to being invisible already, though not quite).</p>",
        "id": 420642707,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707481712
    },
    {
        "content": "<p>Making <code>H</code> and <code>H'</code> notation would surely help.</p>",
        "id": 420642809,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707481754
    },
    {
        "content": "<p>Or <code>abbrev</code> at least.</p>",
        "id": 420642826,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707481765
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Compute.20roots.20of.20polynomials/near/420631659\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113489-new-members/topic/Compute.20roots.20of.20polynomials/near/420629039\">said</a>:</p>\n<blockquote>\n<p>Yes, <code>ext</code> entering <code>Rat</code> is always an issue, in my experience.</p>\n</blockquote>\n<p>That can be fixed by removing the <code>ext</code> attribute from the relevant lemma. We did the same thing for <code>ℂ</code> recently.</p>\n</blockquote>\n<p>What do people think about this?  I think that I never wanted <code>ext</code> to break a rational number into its numerator and its denominator.  Should I remove the <del>instance</del><code>ext</code> attribute?</p>",
        "id": 420643486,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707481966
    },
    {
        "content": "<p>Let's try and see what happens</p>",
        "id": 420643573,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707482015
    },
    {
        "content": "<p>Funny that I'm mentioned in this thread, because iirc I'm also the one that added the ext attribute to Rat</p>",
        "id": 420643691,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1707482055
    },
    {
        "content": "<p>The <code>ext</code> attribute is in <code>Std</code>.</p>",
        "id": 420644099,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707482201
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Rat.ext#doc\">docs#Rat.ext</a></p>",
        "id": 420644167,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707482234
    },
    {
        "content": "<p>ah, then I don't know</p>",
        "id": 420644182,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707482243
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/Compute.20roots.20of.20polynomials/near/420643691\">said</a>:</p>\n<blockquote>\n<p>Funny that I'm mentioned in this thread, because iirc I'm also the one that added the ext attribute to Rat</p>\n</blockquote>\n<p>You were really meant to chime in here!  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 420644354,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707482291
    },
    {
        "content": "<p>Ok, I won't push for removing the <code>ext</code> attribute from <code>Rat</code>: it is easy enough to circumvent the issue by using <code>ext : whaterver</code>.</p>",
        "id": 420644500,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707482344
    },
    {
        "content": "<p>I think it should be removed</p>",
        "id": 420646175,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1707482981
    },
    {
        "content": "<p>Ok, I have never made a PR to <code>Std</code> and this seems like a good time to learn!</p>",
        "id": 420646341,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707483036
    },
    {
        "content": "<p>Regarding list polys, if the construction is built up, then the tactic framework would be to traverse the expression and construct the list. Then construct the proof that the list.to_poly is equal to the original. And then hopefully the obvious lemmas either compute directly or via norm_num like proof construction via VM calculation</p>",
        "id": 420646565,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1707483128
    },
    {
        "content": "<p>The expression traversal already happens for <code>compute_degree</code>, I think that it would be relatively easy meta-extract the \"correct\" list of coefficients.  After that a little of <code>ext; simp</code> should prove that the list representation is accurate.</p>",
        "id": 420646921,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707483278
    },
    {
        "content": "<p>If I understand correctly, you would then need a few lemmas to connect <code>leadingCoeff, degree, natDegree, Monic,...</code> to the corresponding <code>List</code> properties, right?</p>",
        "id": 420647082,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707483355
    },
    {
        "content": "<p>Yes, exactly. And the traversal being in the existing tactic is a boon!</p>",
        "id": 420647243,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1707483420
    },
    {
        "content": "<p>I will focus on extending the \"old\" approach for now, but I suspect that the list perspective is better in the long run.</p>",
        "id": 420647948,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707483675
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> Thank you so much. I was stuck on the proof for days.</p>",
        "id": 420662938,
        "sender_full_name": "Ludwig Monnerjahn",
        "timestamp": 1707488897
    },
    {
        "content": "<p>If you look at the proof I didn't do anything fancy, I just split the work in several small pieces.</p>",
        "id": 420663271,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707489004
    },
    {
        "content": "<p>BTW, is there a <code>rcases</code> syntax allowing to do these lines</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rcases</span> <span class=\"n\">num</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">&lt;;&gt;</span>\n<span class=\"n\">rcases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"bp\">|</span> <span class=\"n\">h1</span> <span class=\"bp\">|</span> <span class=\"n\">h1</span> <span class=\"bp\">|</span> <span class=\"n\">h1</span> <span class=\"bp\">|</span> <span class=\"n\">h1</span> <span class=\"bp\">|</span> <span class=\"n\">h1</span> <span class=\"bp\">|</span> <span class=\"n\">h1</span> <span class=\"bp\">|</span> <span class=\"n\">h1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>in one?</p>",
        "id": 420666295,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707489931
    },
    {
        "content": "<p>Defining a \"minimal effort\" <code>polynomial</code> tactic makes it possible to inline most of the \"obvious\" lemmas above:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- using `notation` to avoid having to `unfold` all the time.</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"H\"</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"mi\">6</span><span class=\"bp\">/</span><span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"H'\"</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"mi\">8</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">H'_degree</span> <span class=\"o\">:</span> <span class=\"n\">natDegree</span> <span class=\"n\">H'</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">polynomial</span><span class=\"bp\">!</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">H_degree</span> <span class=\"o\">:</span> <span class=\"n\">natDegree</span> <span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">polynomial</span><span class=\"bp\">!</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">H_monic</span> <span class=\"o\">:</span> <span class=\"n\">Monic</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">polynomial</span><span class=\"bp\">!</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">H'_leading</span> <span class=\"o\">:</span> <span class=\"n\">leadingCoeff</span> <span class=\"n\">H'</span> <span class=\"bp\">=</span> <span class=\"mi\">8</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">polynomial</span><span class=\"bp\">!</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">H_ne_zero</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply_fun</span> <span class=\"n\">leadingCoeff</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">ne_of_eq_of_ne</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">polynomial</span><span class=\"bp\">!</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 420713624,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707505426
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/10387\">#10387</a>: feel free to comment and add feature requests!</p>",
        "id": 420716429,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707506517
    },
    {
        "content": "<p>I don't know if this really help in this case, but it is related: there are factorization algorithms <a href=\"https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7115093/\">formally verified</a> in Isabelle. </p>\n<p>Maybe it would be worth trying to port them to Lean (although I guess that would be a big task). That could provide both a tactic that factorizes polynomials over the rationals, and a proof of the correcteness of the result.</p>",
        "id": 420732695,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1707513239
    },
    {
        "content": "<p>I just did an experimental implementation that allows proving <code>(C 8) * H = map (algebraMap ℤ ℚ) H'</code> almost by reflection:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Polynomial.Eval</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Polynomial</span>\n<span class=\"kn\">open</span> <span class=\"n\">Polynomial</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Polynomial.ComputableRepr</span> <span class=\"n\">where</span>\n  <span class=\"n\">coeff</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">R</span>\n  <span class=\"n\">degreeBound</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n  <span class=\"n\">coeff_eq</span> <span class=\"o\">⦃</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">⦄</span> <span class=\"o\">:</span> <span class=\"n\">p.coeff</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">coeff</span> <span class=\"n\">n</span>\n  <span class=\"n\">support_subset</span> <span class=\"o\">:</span> <span class=\"n\">p.support</span> <span class=\"bp\">⊆</span> <span class=\"n\">Finset.range</span> <span class=\"n\">degreeBound</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Polynomial.ComputableRepr</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span><span class=\"bp\">.</span><span class=\"n\">ComputableRepr</span> <span class=\"n\">where</span>\n  <span class=\"n\">coeff</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">degreeBound</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">coeff_eq</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n  <span class=\"n\">support_subset</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"c1\">-- Can't make this work:</span>\n<span class=\"c\">/-</span><span class=\"cm\"> noncomputable instance (m : ℕ) [m.AtLeastTwo] : (OfNat.ofNat m : R[X]).ComputableRepr where</span>\n<span class=\"cm\">  coeff n := if n = 0 then m else 0</span>\n<span class=\"cm\">  degreeBound := 1</span>\n<span class=\"cm\">  coeff_eq := by sorry</span>\n<span class=\"cm\">  support_subset := sorry</span>\n<span class=\"cm\">example : (2 : ℤ[X]).ComputableRepr := inferInstance -- fails -/</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">r</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ComputableRepr</span> <span class=\"n\">where</span>\n  <span class=\"n\">coeff</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">r</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n  <span class=\"n\">degreeBound</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n  <span class=\"n\">coeff_eq</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Polynomial.coeff_C</span><span class=\"o\">]</span>\n  <span class=\"n\">support_subset</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Polynomial.monomial_zero_left</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">Polynomial.support_monomial'</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span><span class=\"bp\">.</span><span class=\"n\">ComputableRepr</span> <span class=\"n\">where</span>\n  <span class=\"n\">coeff</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n  <span class=\"n\">degreeBound</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span>\n  <span class=\"n\">coeff_eq</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">Polynomial.coeff_X</span><span class=\"o\">,</span> <span class=\"n\">eq_comm</span><span class=\"o\">]</span>\n  <span class=\"n\">support_subset</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Polynomial.monomial_one_one_eq_X</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">Polynomial.support_monomial'</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">p.ComputableRepr</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- TODO: replace assumptions of `support_smul` and here by `[SMulZeroClass S R]`</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">S</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DistribMulAction</span> <span class=\"n\">S</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">•</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ComputableRepr</span> <span class=\"n\">where</span>\n  <span class=\"n\">coeff</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">s</span> <span class=\"bp\">•</span> <span class=\"n\">coeff</span> <span class=\"n\">p</span> <span class=\"n\">n</span>\n  <span class=\"n\">degreeBound</span> <span class=\"o\">:=</span> <span class=\"n\">degreeBound</span> <span class=\"n\">p</span>\n  <span class=\"n\">coeff_eq</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Polynomial.coeff_smul</span><span class=\"o\">,</span> <span class=\"n\">coeff_eq</span><span class=\"o\">]</span>\n  <span class=\"n\">support_subset</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Polynomial.support_smul</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">support_subset</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Polynomial.ComputableRepr</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">p</span><span class=\"o\">}</span> <span class=\"k\">in</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">coeff_eq_zero_of_le</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">degreeBound</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p.coeff</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Polynomial.not_mem_support_iff.mp</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"n\">hn.not_lt</span> <span class=\"o\">(</span><span class=\"n\">Finset.mem_range.mp</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">support_subset</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">reducible</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">ofEq</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">q.ComputableRepr</span> <span class=\"n\">where</span>\n  <span class=\"n\">coeff</span> <span class=\"o\">:=</span> <span class=\"n\">coeff</span> <span class=\"n\">p</span>\n  <span class=\"n\">degreeBound</span> <span class=\"o\">:=</span> <span class=\"n\">degreeBound</span> <span class=\"n\">p</span>\n  <span class=\"n\">coeff_eq</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">coeff_eq</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">support_subset</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">support_subset</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">degreeAux</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidablePred</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">WithBot</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"bp\">⊥</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">n</span> <span class=\"k\">else</span> <span class=\"n\">degreeAux</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">degree</span> <span class=\"o\">:</span> <span class=\"n\">WithBot</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">degreeAux</span> <span class=\"o\">(</span><span class=\"n\">coeff</span> <span class=\"n\">p</span> <span class=\"bp\">·</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">degreeBound</span> <span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">natDegree</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">degree</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">unbot'</span> <span class=\"mi\">0</span>\n<span class=\"kd\">def</span> <span class=\"n\">leadingCoeff</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">coeff</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">natDegree</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">Monic</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">leadingCoeff</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">degree_eq</span> <span class=\"o\">:</span> <span class=\"n\">p.degree</span> <span class=\"bp\">=</span> <span class=\"n\">degree</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">natDegree_eq</span> <span class=\"o\">:</span> <span class=\"n\">p.natDegree</span> <span class=\"bp\">=</span> <span class=\"n\">natDegree</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">natDegree</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">degree_eq</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">leadingCoeff_eq</span> <span class=\"o\">:</span> <span class=\"n\">p.leadingCoeff</span> <span class=\"bp\">=</span> <span class=\"n\">leadingCoeff</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">leadingCoeff</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">coeff_eq</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">natDegree_eq</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">monic_iff</span> <span class=\"o\">:</span> <span class=\"n\">p.Monic</span> <span class=\"bp\">↔</span> <span class=\"n\">Monic</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Monic</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">leadingCoeff_eq</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"n\">p.Monic</span> <span class=\"o\">:=</span> <span class=\"n\">decidable_of_iff</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">monic_iff</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Polynomial.ComputableRepr</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span><span class=\"bp\">.</span><span class=\"n\">ComputableRepr</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">ofEq</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">map_one</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span><span class=\"bp\">.</span><span class=\"n\">ComputableRepr</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">ofEq</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Polynomial.C_eq_nat_cast</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">q.ComputableRepr</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ComputableRepr</span> <span class=\"n\">where</span>\n  <span class=\"n\">coeff</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">coeff</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">coeff</span> <span class=\"n\">q</span> <span class=\"n\">n</span>\n  <span class=\"n\">degreeBound</span> <span class=\"o\">:=</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">degreeBound</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">degreeBound</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n  <span class=\"n\">coeff_eq</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">Polynomial.coeff_add</span><span class=\"o\">,</span> <span class=\"n\">coeff_eq</span><span class=\"o\">]</span>\n  <span class=\"n\">support_subset</span> <span class=\"o\">:=</span> <span class=\"n\">Polynomial.support_add.trans</span> <span class=\"bp\">&lt;|</span>\n    <span class=\"o\">(</span><span class=\"n\">Finset.union_subset_union</span> <span class=\"n\">support_subset</span> <span class=\"n\">support_subset</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span> <span class=\"n\">simp_all</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Nat.withBotAdd</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simps</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">WithBot.natSuccIso</span> <span class=\"o\">:</span> <span class=\"n\">WithBot</span> <span class=\"n\">ℕ</span> <span class=\"bp\">≃</span><span class=\"n\">o</span> <span class=\"n\">ℕ</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">m.recBotCoe</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"n\">invFun</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">m.rec</span> <span class=\"bp\">⊥</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">)</span>\n  <span class=\"n\">left_inv</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">right_inv</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">map_rel_iff'</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">cases</span> <span class=\"n\">m</span><span class=\"bp\">;</span> <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">recBotCoe</span><span class=\"o\">]</span>\n    <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"bp\">;</span> <span class=\"bp\">·</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">recBotCoe</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">WithBot.bot_lt_coe</span> <span class=\"n\">_</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">recBotCoe</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">WithBot.natSucc</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">WithBot</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">WithBot.natSuccIso</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Polynomial.natSucc_degree</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p.degree.natSucc</span> <span class=\"bp\">=</span> <span class=\"n\">p.natDegree</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">natDegree</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">WithBot.coe_unbot</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">degree_eq_bot.not.mpr</span> <span class=\"n\">hp</span><span class=\"o\">)]</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">WithBot.natSucc_add</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">WithBot</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m.natSucc.withBotAdd</span> <span class=\"n\">n.natSucc</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">natSucc</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Polynomial.support_subset_range</span> <span class=\"o\">:</span> <span class=\"n\">p.support</span> <span class=\"bp\">⊆</span> <span class=\"n\">Finset.range</span> <span class=\"n\">p.degree.natSucc</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">degree</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp_all</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">natSucc_degree</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">degree_eq_bot.not.mp</span> <span class=\"n\">hp</span><span class=\"o\">),</span> <span class=\"n\">Finset.mem_range_succ_iff</span><span class=\"o\">]</span>\n    <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">h</span>\n    <span class=\"n\">exact</span> <span class=\"n\">not_mem_support_iff.mpr</span> <span class=\"o\">(</span><span class=\"n\">Polynomial.coeff_eq_zero_of_natDegree_lt</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ComputableRepr</span> <span class=\"n\">where</span>\n  <span class=\"n\">coeff</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">Finset.range</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">degreeBound</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)),</span> <span class=\"n\">coeff</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">coeff</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"n\">degreeBound</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">degreeBound</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">withBotAdd</span> <span class=\"o\">(</span><span class=\"n\">degreeBound</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n  <span class=\"n\">coeff_eq</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">coeff_eq</span><span class=\"o\">,</span> <span class=\"n\">Polynomial.coeff_mul</span><span class=\"o\">,</span> <span class=\"n\">Finset.Nat.sum_antidiagonal_eq_sum_range_succ_mk</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Finset.sum_range_add_sum_Ico</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">min_le_right</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)]</span>\n    <span class=\"n\">convert</span> <span class=\"n\">add_zero</span> <span class=\"n\">_</span>\n    <span class=\"n\">refine</span> <span class=\"n\">Finset.sum_eq_zero</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.mem_Ico</span><span class=\"o\">,</span> <span class=\"n\">min_le_iff</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">not_lt</span><span class=\"o\">,</span> <span class=\"n\">or_iff_left</span> <span class=\"n\">h.2.not_le</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Finset.mem_range</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Polynomial.not_mem_support_iff.mp</span> <span class=\"k\">fun</span> <span class=\"n\">hn</span> <span class=\"bp\">↦</span> <span class=\"n\">h.1</span> <span class=\"o\">(</span><span class=\"n\">support_subset</span> <span class=\"n\">hn</span><span class=\"o\">),</span> <span class=\"n\">zero_mul</span><span class=\"o\">]</span>\n  <span class=\"n\">support_subset</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">support_subset_range.trans</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Finset.range_mono</span> <span class=\"bp\">&lt;|</span>\n    <span class=\"o\">(</span><span class=\"n\">WithBot.natSuccIso.monotone</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">p.degree_mul_le</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">WithBot.natSucc</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">WithBot.natSucc_add</span><span class=\"o\">]</span>\n      <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"n\">mid</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ComputableRepr</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Nat.rec</span> <span class=\"o\">(</span><span class=\"n\">ofEq</span> <span class=\"mi\">1</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">pow_zero</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">ofEq</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">pow_succ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span><span class=\"bp\">.</span><span class=\"n\">ComputableRepr</span> <span class=\"n\">where</span>\n  <span class=\"n\">coeff</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n  <span class=\"n\">degreeBound</span> <span class=\"o\">:=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"n\">coeff_eq</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">Polynomial.coeff_X_pow</span><span class=\"o\">]</span>\n  <span class=\"n\">support_subset</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Polynomial.monomial_one_right_eq_X_pow</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">Polynomial.support_monomial'</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">S</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p.map</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ComputableRepr</span> <span class=\"n\">where</span>\n  <span class=\"n\">coeff</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">coeff</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"n\">degreeBound</span> <span class=\"o\">:=</span> <span class=\"n\">degreeBound</span> <span class=\"n\">p</span>\n  <span class=\"n\">coeff_eq</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Polynomial.coeff_map</span><span class=\"o\">,</span> <span class=\"n\">coeff_eq</span><span class=\"o\">]</span>\n  <span class=\"n\">support_subset</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Polynomial.support_map_subset</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">support_subset</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">S</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">[</span><span class=\"n\">p.ComputableRepr</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">q.ComputableRepr</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ComputableRepr</span> <span class=\"n\">where</span>\n  <span class=\"n\">coeff</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"bp\">-</span> <span class=\"n\">coeff</span> <span class=\"n\">p</span> <span class=\"n\">n</span>\n  <span class=\"n\">degreeBound</span> <span class=\"o\">:=</span> <span class=\"n\">degreeBound</span> <span class=\"n\">p</span>\n  <span class=\"n\">coeff_eq</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Polynomial.coeff_neg</span><span class=\"o\">,</span> <span class=\"n\">coeff_eq</span><span class=\"o\">]</span>\n  <span class=\"n\">support_subset</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Polynomial.support_neg</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">support_subset</span>\n\n<span class=\"c1\">-- `coeff p n - coeff q n` more efficient?</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ComputableRepr</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">ofEq</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">sub_eq_add_neg</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Polynomial.ComputableRepr.eq_iff</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"bp\">↔</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">Finset.range</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">degreeBound</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">degreeBound</span> <span class=\"n\">q</span><span class=\"o\">)),</span> <span class=\"n\">coeff</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">coeff</span> <span class=\"n\">q</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">coeff_eq</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">],</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"n\">ext</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Finset.mem_range</span><span class=\"o\">,</span> <span class=\"n\">lt_max_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">coeff_eq</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">n</span> <span class=\"n\">hn</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">not_or</span><span class=\"o\">,</span> <span class=\"n\">not_lt</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hn</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">coeff_eq_zero_of_le</span> <span class=\"n\">hn.1</span><span class=\"o\">,</span> <span class=\"n\">coeff_eq_zero_of_le</span> <span class=\"n\">hn.2</span><span class=\"o\">]⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">decidable_of_iff</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Polynomial.ComputableRepr.eq_iff</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">+</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.cast_eq_ofNat</span><span class=\"o\">]</span> <span class=\"c1\">-- have to do this</span>\n  <span class=\"n\">decide</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"mi\">6</span><span class=\"bp\">/</span><span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">8</span><span class=\"o\">)</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">H'</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">C</span> <span class=\"mi\">8</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span> <span class=\"c1\">-- okay</span>\n<span class=\"c1\">-- example : (6 / 8 : ℚ) * 8 = 6 := by decide -- doesn't work because operations on ℚ are irreducible</span>\n<span class=\"c1\">-- see https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/how.20to.20explicitly.20rfl.20for.20.E2.84.9A.3F/near/406961128</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">H_H'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"n\">H'.map</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">ℤ</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">H'</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">of_decide_eq_true</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n<span class=\"c1\">-- `of_decide_eq_true &lt;| by rw [H, H']; rfl` doesn't work. Maybe the rewritten Decidable instance is not good?</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">H'_degree</span> <span class=\"o\">:</span> <span class=\"n\">H'.natDegree</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">H'</span><span class=\"o\">,</span> <span class=\"n\">natDegree_eq</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">H_degree</span> <span class=\"o\">:</span> <span class=\"n\">H.natDegree</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">natDegree_eq</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">H_monic</span> <span class=\"o\">:</span> <span class=\"n\">H.Monic</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">monic_iff</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- decide doesn't work (because it's in ℚ)</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">H_ne_zero</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">H</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">of_decide_eq_true</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">H'_coeff_zero</span> <span class=\"o\">:</span> <span class=\"n\">H'.coeff</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">H'</span><span class=\"o\">,</span> <span class=\"n\">coeff_eq</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">H'_leading</span> <span class=\"o\">:</span> <span class=\"n\">H'.leadingCoeff</span> <span class=\"bp\">=</span> <span class=\"mi\">8</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">H'</span><span class=\"o\">,</span> <span class=\"n\">leadingCoeff_eq</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">X</span> <span class=\"bp\">+</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">5</span> <span class=\"bp\">-</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">6</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">7</span> <span class=\"bp\">-</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">8</span> <span class=\"bp\">-</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">9</span> <span class=\"bp\">+</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">12</span> <span class=\"bp\">+</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">13</span> <span class=\"bp\">+</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">14</span> <span class=\"bp\">+</span>\n        <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">15</span> <span class=\"bp\">+</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">16</span> <span class=\"bp\">+</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">17</span> <span class=\"bp\">-</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">20</span> <span class=\"bp\">-</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">22</span> <span class=\"bp\">-</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">24</span> <span class=\"bp\">-</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">26</span> <span class=\"bp\">-</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">28</span> <span class=\"bp\">+</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">31</span> <span class=\"bp\">+</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">32</span> <span class=\"bp\">+</span>\n        <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">33</span> <span class=\"bp\">+</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">34</span> <span class=\"bp\">+</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">35</span> <span class=\"bp\">+</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">36</span> <span class=\"bp\">-</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">39</span> <span class=\"bp\">-</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">40</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">41</span> <span class=\"bp\">-</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">42</span> <span class=\"bp\">-</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">43</span> <span class=\"bp\">+</span>\n        <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">46</span> <span class=\"bp\">+</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">47</span> <span class=\"bp\">+</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">48</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span><span class=\"bp\">.</span><span class=\"n\">degree</span> <span class=\"bp\">=</span> <span class=\"mi\">48</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.cast_eq_ofNat</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">ℤ</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">degree_eq</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n<span class=\"c\">/-</span><span class=\"cm\"> typeclass inference of Polynomial.ComputableRepr took 159ms</span>\n<span class=\"cm\">   elaboration took 314ms -/</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">X</span> <span class=\"bp\">+</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">5</span> <span class=\"bp\">-</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">6</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">7</span> <span class=\"bp\">-</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">8</span> <span class=\"bp\">-</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">9</span> <span class=\"bp\">+</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">12</span> <span class=\"bp\">+</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">13</span> <span class=\"bp\">+</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">14</span> <span class=\"bp\">+</span>\n        <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">15</span> <span class=\"bp\">+</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">16</span> <span class=\"bp\">+</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">17</span> <span class=\"bp\">-</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">20</span> <span class=\"bp\">-</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">22</span> <span class=\"bp\">-</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">24</span> <span class=\"bp\">-</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">26</span> <span class=\"bp\">-</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">28</span> <span class=\"bp\">+</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">31</span> <span class=\"bp\">+</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">32</span> <span class=\"bp\">+</span>\n        <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">33</span> <span class=\"bp\">+</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">34</span> <span class=\"bp\">+</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">35</span> <span class=\"bp\">+</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">36</span> <span class=\"bp\">-</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">39</span> <span class=\"bp\">-</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">40</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">41</span> <span class=\"bp\">-</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">42</span> <span class=\"bp\">-</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">43</span> <span class=\"bp\">+</span>\n        <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">46</span> <span class=\"bp\">+</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">47</span> <span class=\"bp\">+</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">48</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span><span class=\"bp\">.</span><span class=\"n\">degree</span> <span class=\"bp\">=</span> <span class=\"mi\">48</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.cast_eq_ofNat</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">ℚ</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">degree_eq</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n<span class=\"c\">/-</span><span class=\"cm\"> typeclass inference of Polynomial.ComputableRepr took 172ms</span>\n<span class=\"cm\">   elaboration took 352ms -/</span>\n</code></pre></div>",
        "id": 420748541,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1707521087
    },
    {
        "content": "<p>It turns out there's an <a href=\"#narrow/stream/113489-new-members/topic/how.20to.20explicitly.20rfl.20for.20.E2.84.9A.3F/near/406961128\">irreducibility issue</a> of operations in Rat which blocks <code>decide</code>. However <code>rfl</code> (the tactic, not the term) still works, and you can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=of_decide_eq_true#doc\">docs#of_decide_eq_true</a> to convert any goal to an equality goal and apply <code>rfl</code>, and all DecidableEq instances work this way. Now I can also compute <code>natDegree</code>, <code>degree</code>, <code>leadingCoeff</code> and <code>Monic</code> by reflection (see updated code above).</p>",
        "id": 420774188,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1707544504
    },
    {
        "content": "<p>This is very cool!  I'm not at a computer now, but I wonder if this is the way to go, instead of the tactic.</p>\n<p>Can you try your approach on the tests for <code>compute_degree</code>?</p>\n<p>I'm especially curious about performance on the slowest: the computations with the 105 cyclotomic polynomial.  If I remember correctly, the tactic takes about 3 seconds to compute the degree.</p>",
        "id": 420780387,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707551750
    },
    {
        "content": "<p>I think my method can't handle the tests with [Nontrivial R], since it requires [DecidableEq R], so your tactics are certainly more powerful in that aspect!</p>\n<p>I tested the cyclotomic 105 example after adding a dedicated instance for (X^n).ComputableRepr, and it also takes about 3 seconds for ℤ[X] and ℚ[X]. (Profiler is reporting a lower number, and I'm not sure how to get it to report actual kernel checking time.) I updated the code above, and there are two remaining sorries which I'll take care tomorrow :)</p>",
        "id": 420783996,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1707555734
    },
    {
        "content": "<p>Okay, my previous implementation of <code>degree</code>/<code>degreeAux</code> is probably slightly buggy, but everything is now sorry free at <a href=\"https://gist.github.com/alreadydone/2dca4fde11fb2e9be7f8a10b59216b3f\">https://gist.github.com/alreadydone/2dca4fde11fb2e9be7f8a10b59216b3f</a><br>\nSome proofs may be golfable with appropriate lemmas.<br>\nFor now I'll focus on other stuff so I'm not adding support for other ways of constructing polynomials, but you're welcome to experiment with it! I wonder where else this technique can be applied to. (One place is Finsupp addition which also produces non-computable support which makes equality non-decidable.)<br>\n<strong>It would be nice if we could make the <code>ofNat</code> instance work.</strong><br>\nTo show the 105th cyclotomic polynomial is of degree 48 over an arbitrary nontrivial ring, one way would be proving a lemma that if <code>coeff p (degreeBound p - 1)</code> is nonzero then <code>degree</code> is equal to <code>degreeBound p - 1</code> (in this case, <code>degreeBound p</code> already computes to 49). However this coefficient computes (defeq) to 0 + 0 + 0 + ... + 0 + 1, so you may need to apply some <code>(add_zero _).trans</code> in term mode ...</p>",
        "id": 420832934,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1707599290
    },
    {
        "content": "<p>It seems that your approach leverages typeclass inference to compute degrees, while the tactic uses... well meta-programming.</p>\n<p>So, another possible performance issue might be that the tactic discharges some goals using <code>norm_num</code>, while your approach would resort to... <code>decide</code>?  That could lead to slower proofs, especially if the coefficients are big (so, possibly an artificial case, for the moment!).</p>",
        "id": 420836702,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707603309
    },
    {
        "content": "<p>Anyway, I think that this is a very good experiment!</p>",
        "id": 420837604,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707604199
    },
    {
        "content": "<p>Thanks! Yeah I think typeclass inference is a nice way to match syntax, and it's used to build up a computable representation of an expression involving operations for which instances are provided; I don't know how its performance compare to tactics. I think there are more people familiar with typeclasses than there are with meta-programming, so my approach might have a lower entry barrier :) </p>\n<p>With Lean 4's GMP arithmetic, I think there's probably no advantage of <code>norm_num</code> over <code>rfl</code> for arithmetic in Nat, Int, and Rat. <code>norm_num</code> extensions (primality, Legendre symbols, etc.) are nice but I think they could also be implemented by as functions (like <code>degree</code>, <code>leadingCoeff</code> etc. in the Polynomial.ComputableRepr namespace in my code).</p>\n<p>Non-computability of Finsupp has been a discussion topic <a href=\"#narrow/stream/113488-general/topic/Computability.20and.20finsupp.20and.20finite/near/306412467\">a lot</a> <a href=\"#narrow/stream/116395-maths/topic/Lagrange.20interpolants/near/287806674\">before</a>, but most recently <span class=\"user-mention\" data-user-id=\"514145\">@Geoffrey Irving</span>'s question prompted me to identify <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/GaussianRat/near/412628504\">main difficulties</a> of <strong>polynomial</strong> computability: a degree bound is necessary to offer a finite range for the summation in polynomial multiplication and for equality testing, so it's built into my ComputableRepr together with a proof that it's actually a bound. I think a natural next step is to <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.F0.9D.94.BD.E2.82.84/near/321047870\">compute in AdjoinRoot</a> using this approach, which provides a way to address his original question.</p>\n<p>In previous discussions people seemed to think it's necessary to redefine the Finsupp/Polynomial types to gain computability, but my approach here shows that:</p>\n<ol>\n<li>we could make an auxiliary type and \"implement\" computable operations there, and make no modification to the primary type at all.</li>\n<li>the auxiliary type doesn't have to be \"isomorphic\" to the primary type.</li>\n<li>there doesn't even need to be a function from the primary type to the auxiliary type; the mapping could depend on the syntactic form of the term of the primary type via typeclass inference, if we make the auxiliary type a class. (For example, <code>X - X</code>, <code>1 - 1</code> and <code>0</code> are mapped to non-equal ComputableRepr terms with degreeBound = 2, 1 and 0 respectively.)<br>\n(I tried to put the <code>@[csimp]</code> attribute on <code>degree_eq</code>, <code>leadingCoeff_eq</code> etc. but got an error; probably Lean doesn't like dependence on the instance argument.)</li>\n</ol>\n<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span>'s <a href=\"https://github.com/leanprover-community/mathlib4/pull/9973\">#9973</a> (<a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Working.20with.20polynomials/near/417704581\">Zulip</a>) attempts to use List as the auxiliary type, but the <code>toList</code> there doesn't use typeclass inference to match the syntax; instead it uses <code>natDegree</code> which relies on a computable support to be computable, so it won't actually provide a computable list when applied to expressions outside of trivial ones. I'm also worried that a list representation may not be efficient for computing the degree of X^10000+1, for example.</p>\n<p>I'd also like to hear opinions from <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>, and <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>. Feel free to move the discussion to another topic/stream as appropriate.</p>",
        "id": 420858175,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1707624593
    },
    {
        "content": "<blockquote>\n<p>With Lean 4's GMP arithmetic, I think there's probably no advantage of norm_num over rfl for arithmetic in Nat, Int, and Rat.</p>\n</blockquote>\n<p>I think this is only true for a specific enumerated set of functions. For functions which are not built in <code>norm_num</code> still has the edge, certainly anything defined by recursion.</p>",
        "id": 420858648,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1707625128
    },
    {
        "content": "<p>The values in these type class instances seem prone to non defeq diamonds since they contain data</p>",
        "id": 420858670,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1707625173
    },
    {
        "content": "<p>These instances are just for generating computable representations. If Lean finds two different instances/representations for the same expression (potentially not prop-eq), they may differ in efficiency, but will still compute the same correct result when used to compute coefficients, degree, etc.</p>\n<p>(The way to compute is to rewrite using one of the lemmas <code>coeff_eq</code>, <code>degree_eq</code>, <code>natDegree_eq</code>, <code>leadingCoeff_eq</code>, <code>monic_iff</code> under the <code>Polynomial.ComputableRepr</code> namespace, and then use <code>rfl</code> or <code>decide</code> (if not dealing with Rat). Lean may not find the instance that you intend when doing the rewrite, but any instance works.)</p>",
        "id": 420859129,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1707625708
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Compute.20roots.20of.20polynomials/near/420631659\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113489-new-members/topic/Compute.20roots.20of.20polynomials/near/420629039\">said</a>:</p>\n<blockquote>\n<p>Yes, <code>ext</code> entering <code>Rat</code> is always an issue, in my experience.</p>\n</blockquote>\n<p>That can be fixed by removing the <code>ext</code> attribute from the relevant lemma. We did the same thing for <code>ℂ</code> recently.</p>\n</blockquote>\n<p>The <code>ext</code> attribute on <code>Rat</code> has just been removed from <code>Std</code>.  It will take a little bit of time to trickle down to <code>Mathlib</code>. but, according to a local build that I made, there should be only one instance in <code>Mathlib</code> where the ext attribute on <code>Rat</code> is used.</p>",
        "id": 421904396,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708103989
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> (or anyone else here) <a href=\"https://github.com/leanprover-community/mathlib4/pull/10954\">#10954</a> is the long overdue bump for Mathlib, that is now broken because of the missing <code>Rat.ext</code>. Could you please fix this asap? This is on the critical path to being able to release v4.7.0rc1 this week.</p>",
        "id": 423252386,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1708857521
    },
    {
        "content": "<p>(Ideally PRs to Std or Lean that break Mathlib should include a clear reference in the PR description to the location of the patch branch, so that others can help deploy the patch once it is needed.)</p>",
        "id": 423252413,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1708857559
    },
    {
        "content": "<p>You mean making <a href=\"https://github.com/leanprover-community/mathlib4/pull/10954\">#10954</a> compile?</p>",
        "id": 423252497,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1708857634
    },
    {
        "content": "<p>I can do it now</p>",
        "id": 423252500,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1708857637
    },
    {
        "content": "<p>Great, thanks!</p>",
        "id": 423252506,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1708857644
    },
    {
        "content": "<p>(This could have been done as soon as the Rat.ext removal landed in Std. I've been behind on bumping, but everyone is allowed to do this. :-)</p>",
        "id": 423252530,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1708857674
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span>, I just pushed a change to <a href=\"https://github.com/leanprover-community/mathlib4/pull/10954\">#10954</a>, so we are not updating aesop at the same time. If you've already pull, pull again please. :-)</p>",
        "id": 423252722,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1708857836
    },
    {
        "content": "<p>Ugh, there are multiple problems, because we haven't bumped for a while.</p>",
        "id": 423252857,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1708857922
    },
    {
        "content": "<p>I will take care of the Int and List stuff.</p>",
        "id": 423252861,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1708857928
    },
    {
        "content": "<p>Can we remove Rat.ext in mathlib before bumping to reduce the amount of debt, or  is that not how attribute removal works?</p>",
        "id": 423252962,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708857993
    },
    {
        "content": "<p>I'm not sure what you mean, sorry.</p>",
        "id": 423252980,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1708858011
    },
    {
        "content": "<p><code>Rat.ext</code> was de-<code>@[ext]</code>d in a version of Std that we haven't bumped to yet, right? Can we locally de-attribute it in Mathlib to deal with the fallout without having to fix everything else in the Std bump at the same time?</p>",
        "id": 423253121,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708858117
    },
    {
        "content": "<p>Oh, I see. I think we need to just do it. :-) I need the entire bump anyway asap, so I can continue work on the nightly-testing branch.</p>",
        "id": 423253288,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1708858240
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/10954\">#10954</a> is looking okay now other than Mathlib/Data/NNRat/Defs.lean</p>",
        "id": 423253319,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1708858275
    },
    {
        "content": "<p>Mainly the suggestion was to allow the fixes to be parallelized with someone else:)</p>",
        "id": 423253324,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708858283
    },
    {
        "content": "<p>I think we're parallelizing by pushing to the same branch.</p>",
        "id": 423253421,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1708858341
    },
    {
        "content": "<p>I am fixing <code>/Data/NNRat/Defs.lean</code>, without pulling</p>",
        "id": 423254450,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1708859069
    },
    {
        "content": "<p>Great, thanks.</p>",
        "id": 423254596,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1708859190
    },
    {
        "content": "<p>I've fixed everything that is not downstream of that.</p>",
        "id": 423254610,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1708859209
    },
    {
        "content": "<p>If the goal was simply to fix it, it's done (I didn't do anything fancy, I just applied manually the lemma that was called by <code>ext</code>).</p>",
        "id": 423254974,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1708859534
    },
    {
        "content": "<p>Great, thanks!</p>",
        "id": 423255153,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1708859675
    },
    {
        "content": "<p>I am also fixing the later error in sum of four squares</p>",
        "id": 423259328,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1708863391
    },
    {
        "content": "<p>it builds locally</p>",
        "id": 423259862,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1708863963
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span>!</p>",
        "id": 423261210,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1708865322
    },
    {
        "content": "<p>There is a linter error about <code>Std.BitVec.toFin_natCast</code> in <code>Data/BitVec/Lemmas</code></p>",
        "id": 423261237,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1708865360
    },
    {
        "content": "<p>I am not sure how to fix it, currently <code>simp</code> transforms</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">toFin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">BitVec</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>into</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Fin.ofNat'</span> <span class=\"n\">n</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>and I am not sure if this is a good idea</p>",
        "id": 423261506,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1708865640
    },
    {
        "content": "<p>Sorry about getting late here: I had built Mathlib locally with the not-yet removal of the ext attribute on Std and had found (I think) a single issue.  However, I did not really know where I was supposed to make the fix, even after Scott explained some of the details of how to deal with changes to std.  I'll try to clean up after myself in the future.</p>",
        "id": 423273270,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1708876891
    }
]