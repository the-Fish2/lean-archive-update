[
    {
        "content": "<p>For various (perhaps bad) reasons, I have, in my context</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Matrix.vecCons</span> <span class=\"n\">a</span> <span class=\"bp\">!</span> <span class=\"o\">[</span><span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span><span class=\"n\">Matrix.vecCons</span> <span class=\"n\">a'</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">b'</span><span class=\"o\">]</span> <span class=\"n\">i</span>\n</code></pre></div>\n<p>(<code>i</code> is of type <code>Fin 2</code>) and I would like to deduce</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a'</span>\n</code></pre></div>\n<p>Is this true? I think it is. Is there an easy way to prove it?</p>",
        "id": 422046225,
        "sender_full_name": "Cody Roux",
        "timestamp": 1708207677
    },
    {
        "content": "<p>Can you make a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>? (with imports etc)</p>",
        "id": 422046416,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708207831
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.ModelTheory.Satisfiability</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fintype.Card</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">FirstOrder</span>\n<span class=\"kn\">open</span> <span class=\"n\">FirstOrder.Language</span>\n<span class=\"kn\">open</span> <span class=\"n\">FirstOrder.Language.Theory</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">NonStandard</span>\n\n<span class=\"c1\">-- The naturals extended with a non-standard element</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">NS</span> <span class=\"o\">:=</span>\n<span class=\"bp\">|</span> <span class=\"n\">standard</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">NS</span>\n<span class=\"bp\">|</span> <span class=\"n\">omega</span> <span class=\"o\">:</span> <span class=\"n\">NS</span>\n\n<span class=\"c1\">-- The language with all of ℕ as constants, and a single binary relation.</span>\n<span class=\"kd\">def</span> <span class=\"n\">Arith</span> <span class=\"o\">:</span> <span class=\"n\">Language</span> <span class=\"o\">:=</span> <span class=\"n\">Language.mk₂</span> <span class=\"n\">ℕ</span> <span class=\"n\">Empty</span> <span class=\"n\">Empty</span> <span class=\"n\">Empty</span> <span class=\"n\">Unit</span>\n\n<span class=\"c1\">-- The language with all of NS as constants, and a single binary relation.</span>\n<span class=\"kd\">def</span> <span class=\"n\">OmegaArith</span> <span class=\"o\">:</span> <span class=\"n\">Language</span> <span class=\"o\">:=</span> <span class=\"n\">Language.mk₂</span> <span class=\"n\">NS</span> <span class=\"n\">Empty</span> <span class=\"n\">Empty</span> <span class=\"n\">Empty</span> <span class=\"n\">Unit</span>\n\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">instance</span> <span class=\"n\">standardModel</span> <span class=\"o\">:</span> <span class=\"n\">Structure</span> <span class=\"n\">Arith</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Structure.mk₂</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"bp\">↦</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"n\">h.elim</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"n\">h.elim</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"n\">h.elim</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">c₁</span> <span class=\"n\">c₂</span> <span class=\"bp\">↦</span> <span class=\"n\">c₁</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c₂</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">lessThan</span> <span class=\"o\">:</span> <span class=\"n\">OmegaArith.Relations</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">Unit.unit</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">omegaGtN</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Sentence</span> <span class=\"n\">OmegaArith</span> <span class=\"o\">:=</span>\n  <span class=\"n\">lessThan.formula₂</span> <span class=\"o\">(</span><span class=\"n\">Constants.term</span> <span class=\"o\">(</span><span class=\"n\">NS.standard</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Constants.term</span> <span class=\"n\">NS.omega</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">omegaGtN_inj</span> <span class=\"o\">:</span> <span class=\"n\">omegaGtN</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">omegaGtN</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">intros</span> <span class=\"n\">eq</span>\n  <span class=\"n\">injection</span> <span class=\"n\">eq</span>\n  <span class=\"c1\">-- -- This isn't well typed!</span>\n  <span class=\"c1\">-- let f := λ i ↦</span>\n  <span class=\"c1\">--  Term.relabel Sum.inl</span>\n  <span class=\"c1\">--  (Matrix.vecCons</span>\n  <span class=\"c1\">--    (Constants.term (NS.standard n)) ![Constants.term NS.omega])</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 422046853,
        "sender_full_name": "Cody Roux",
        "timestamp": 1708208257
    },
    {
        "content": "<p>This doesn't answer your original question, but solves the issue:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">omegaGtN_inj</span> <span class=\"o\">:</span> <span class=\"n\">omegaGtN</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">omegaGtN</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">intros</span> <span class=\"n\">eq</span>\n  <span class=\"n\">injection</span> <span class=\"n\">eq</span> <span class=\"k\">with</span> <span class=\"n\">hn</span> <span class=\"n\">hl</span> <span class=\"n\">hR</span> <span class=\"n\">hts</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Function.funext_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hts</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">hts</span> <span class=\"mi\">0</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">this</span>  <span class=\"c1\">-- this is bad style; `simp?`'s output would be better</span>\n  <span class=\"n\">injection</span> <span class=\"n\">this</span>\n</code></pre></div>",
        "id": 422047720,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708209173
    },
    {
        "content": "<p>If you turn your original question into a mwe without any of the language stuff, then I can answer that too</p>",
        "id": 422047742,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708209216
    },
    {
        "content": "<p><code>have := congr_fun hts 0</code> can also replace the <code>rw</code> and <code>have</code> line</p>",
        "id": 422047827,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708209305
    },
    {
        "content": "<p>Neat, thanks! I'll dig deeper if I really have to.</p>",
        "id": 422047928,
        "sender_full_name": "Cody Roux",
        "timestamp": 1708209447
    }
]