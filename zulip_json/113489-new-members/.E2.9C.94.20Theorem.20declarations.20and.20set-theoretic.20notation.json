[
    {
        "content": "<p>Are the following three theorem declarations in Lean regarded as equivalent in terms of their logical assertions?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">verify_assoc_axiom_1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">verify_assoc_axiom_2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span>   <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">verify_assoc_axiom_3</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span>    <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Would their usage in expressions (left-hand side with regards to <code>:=</code>) and their proofs (right-hand side) be identical?</p>\n<p>In addition, I'm interested in exploring ways to make the theorem presentation more accessible for educational purposes. Specifically, I'm considering scenarios where individuals, primarily those with a background in traditional set-theoretic mathematics and not in type theory, might be introduced to Lean. For such cases, employing notation or expressions that bear a closer resemblance to familiar set-theoretic concepts could be advantageous. This approach is not about altering Lean's syntax, but rather about finding ways to present Lean's type-theoretic concepts in a manner that is less daunting and more relatable to those accustomed to classical mathematical notation.</p>\n<p>Is there a way to phrase a theorem in Lean using a syntax that mirrors traditional set-theoretic notation? A hypothetical example might be:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">verify_assoc_axiom_hypothetical</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"n\">k</span> <span class=\"bp\">∈</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Is such a syntax achievable in Lean, particularly for use in educational contexts?</p>",
        "id": 417295789,
        "sender_full_name": "Isak Colboubrani",
        "timestamp": 1705949975
    },
    {
        "content": "<p>These three are essentially the same, yes. The proofs for the first two will need to start with <code>intro g h k</code>, though. There's also a syntax for passing arguments that looks like <code>f (a := a)</code> that probably will only work for the third case</p>",
        "id": 417303699,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1705952934
    },
    {
        "content": "<p>The syntax <code>∀ g ∈ G, ...</code> already exists using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Membership#doc\">docs#Membership</a>, particularly sets (not types), so it would likely be a bit annoying to repurpose it</p>",
        "id": 417303940,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1705953008
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"683979\">Isak Colboubrani</span> has marked this topic as resolved.</p>",
        "id": 417382143,
        "sender_full_name": "Notification Bot",
        "timestamp": 1705993128
    }
]