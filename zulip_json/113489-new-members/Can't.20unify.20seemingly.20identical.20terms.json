[
    {
        "content": "<p>I'm trying to prove a theorem in additive combinatorics, but there's a weird bug - when I'm trying to do <code>exact</code> to something which looks like the goal, it fails to unify. A <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Classical</span> <span class=\"n\">Pointwise</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">card_of_inv</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">=</span> <span class=\"n\">A.card</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">GUS</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"n\">p.Prime</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">•</span> <span class=\"n\">A</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"bp\">•</span> <span class=\"n\">A</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">≥</span>\n    <span class=\"o\">((</span><span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">A.card</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ge_iff_le</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"k\">have</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"k\">have</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"k\">have</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"k\">calc</span> <span class=\"o\">((</span><span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">A.card</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span>\n    <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"gr\">sorry</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">A</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">norm_cast</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Eq.symm</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n      <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">card_of_inv</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">ZMod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">this</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">A</span><span class=\"o\">))</span>\n      <span class=\"n\">exact</span> <span class=\"n\">this</span>\n      <span class=\"c1\">-- type mismatch</span>\n      <span class=\"c1\">--   this</span>\n      <span class=\"c1\">-- has type</span>\n      <span class=\"c1\">--   ((c - d) • (A + ((a - b) / (c - d) + 1) • A)).card = (A + ((a - b) / (c - d) + 1) • A).card : Prop</span>\n      <span class=\"c1\">-- but is expected to have type</span>\n      <span class=\"c1\">--   ((c - d) • (A + ((a - b) / (c - d) + 1) • A)).card = (A + ((a - b) / (c - d) + 1) • A).card : Prop</span>\n      <span class=\"gr\">sorry</span>\n    <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Additionally, if I try to end the <code>calc</code> with <code>(3 • A^2 - 3 • A^2).card</code> it fails, with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">'</span><span class=\"k\">calc</span><span class=\"bp\">'</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">A.card</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"bp\">?</span><span class=\"n\">m.24439</span>\n<span class=\"n\">but</span> <span class=\"n\">it</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">A.card</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">•</span> <span class=\"n\">A</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"bp\">•</span> <span class=\"n\">A</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span>\n</code></pre></div>\n<p>I don't know if this is related. Regardless, what's going on there, and are there general ways to debug something like this?</p>",
        "id": 429161425,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1711261614
    },
    {
        "content": "<p>In fact</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Classical</span> <span class=\"n\">Pointwise</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">card_of_inv</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">=</span> <span class=\"n\">A.card</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">card_of_inv_zmod</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"n\">p.Prime</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">=</span> <span class=\"n\">A.card</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">card_of_inv</span> <span class=\"n\">A</span> <span class=\"n\">a</span> <span class=\"n\">h</span>\n  <span class=\"n\">exact</span> <span class=\"n\">this</span>\n</code></pre></div>\n<p>already fails, so it shouldn't be related to the <code>calc</code>. I'm suspecting there might be a diamond or something, but I don't know what to do about that</p>",
        "id": 429162470,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1711262440
    },
    {
        "content": "<p>Oh, I figured it out, there's a diamond with <code>DecidableEq α</code>. Removing <code>Classical</code> and adding <code>DecidableEq</code> works, although <code>calc</code> still fails. I realized I should try and remove <code>Classical</code> for my whole project, but I have another problem: is <code>DecidableEq</code> and <code>DecidableMem</code> for submodules over a <code>DecidableEq</code> <code>Fintype</code> defined somewhere?</p>",
        "id": 429163930,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1711263508
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/Can.27t.20unify.20seemingly.20identical.20terms\">#general &gt; Can't unify seemingly identical terms</a> by <span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span>.</p>",
        "id": 429166392,
        "sender_full_name": "Notification Bot",
        "timestamp": 1711265257
    },
    {
        "content": "<p>Can you write precisely what you are looking for? A <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> would be great</p>",
        "id": 429166683,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711265491
    },
    {
        "content": "<p>Sure:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Line</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">//</span> <span class=\"n\">FiniteDimensional.finrank</span> <span class=\"n\">α</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instSetLike</span> <span class=\"o\">:</span> <span class=\"n\">SetLike</span> <span class=\"o\">(</span><span class=\"n\">Line</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x.val</span>\n  <span class=\"n\">coe_injective'</span> <span class=\"n\">x1</span> <span class=\"n\">x2</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Subtype.ext</span>\n    <span class=\"n\">simp_all</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">mem2</span> <span class=\"o\">:</span> <span class=\"n\">Membership</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Line</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">mem</span> <span class=\"n\">x</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">x.1</span><span class=\"o\">,</span> <span class=\"n\">x.2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">⟩</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instDecidableMem2</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Line</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instDecidableEqLine</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"o\">(</span><span class=\"n\">Line</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 429166864,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1711265580
    },
    {
        "content": "<p>Are you really interested in these instances or you want them just because Lean is complaining? It Lean wants them is a proof you can just start the proof with <code>classical</code> and the problem will disappear.</p>",
        "id": 429167724,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711266335
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/113489-new-members/topic/Can't.20unify.20seemingly.20identical.20terms/near/429167724\">said</a>:</p>\n<blockquote>\n<p>Are you really interested in these instances or you want them just because Lean is complaining? It Lean wants them is a proof you can just start the proof with <code>classical</code> and the problem will disappear.</p>\n</blockquote>\n<p>But wouldn't that potentially cause a diamond?</p>",
        "id": 429170296,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1711268189
    },
    {
        "content": "<p>You're not going to be able to create these two instances. These are additional assumptions you'll have to add to theorems if you don't want to go with <code>classical</code>.</p>",
        "id": 429170640,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711268456
    },
    {
        "content": "<p>For your original problem, do you know about <code>convert</code>? It's like <code>exact</code>, but it tries to handle dealing with small differences between terms automatically, and for whatever it can't handle you get new subgoals.</p>",
        "id": 429170670,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711268511
    },
    {
        "content": "<p>If you replace <code>exact this</code> with <code>convert this</code>, it works.</p>",
        "id": 429170745,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711268569
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"690858\">Daniel Weber</span> <a href=\"#narrow/stream/113489-new-members/topic/Can't.20unify.20seemingly.20identical.20terms/near/429170296\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/113489-new-members/topic/Can't.20unify.20seemingly.20identical.20terms/near/429167724\">said</a>:</p>\n<blockquote>\n<p>Are you really interested in these instances or you want them just because Lean is complaining? It Lean wants them is a proof you can just start the proof with <code>classical</code> and the problem will disappear.</p>\n</blockquote>\n<p>But wouldn't that potentially cause a diamond?</p>\n</blockquote>\n<p>Using <code>classical</code> in a proof is fine. In your previous example you used it in the statement, and that can indeed create diamond.</p>",
        "id": 429171534,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1711268936
    },
    {
        "content": "<p>In your initial example all those <code>have a : ZMod p :=</code> should be <code>let a : ZMod p :=</code> btw</p>",
        "id": 429172644,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711269698
    },
    {
        "content": "<p>The basic rule for classical/decidable is that if you can state the theorems without decidability then do this and use the <code>classical</code> tactic in the proof and you'll be fine.</p>",
        "id": 429172776,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1711269824
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Can't.20unify.20seemingly.20identical.20terms/near/429170670\">said</a>:</p>\n<blockquote>\n<p>For your original problem, do you know about <code>convert</code>? It's like <code>exact</code>, but it tries to handle dealing with small differences between terms automatically, and for whatever it can't handle you get new subgoals.</p>\n</blockquote>\n<p>Interesting, I didn't know of it, thanks</p>",
        "id": 429173348,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1711270263
    },
    {
        "content": "<p>Concerning to me that this is giving the unhelpful error message where it reports a distinction between terms that are visually identical. I thought we fixed this issue. Isn't the error message supposed to automatically show the more elaborate terms when the pretty-printings are equal?</p>",
        "id": 431190345,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1712184336
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span></p>",
        "id": 431190356,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1712184342
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/3234\">lean4#3234</a> was the relevant PR. Maybe that only fixed <code>apply</code> and not <code>exact</code>?</p>",
        "id": 431190553,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1712184446
    },
    {
        "content": "<p>My PR wasn’t good and I ran out of cycles for this feature; it needs more refactoring to make the error message “lazy enough“ so that you don’t run an expensive algorithm when the users never sees the message (e.g. when backtracking tactics.)</p>",
        "id": 431502550,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1712316084
    }
]