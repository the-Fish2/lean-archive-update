[
    {
        "content": "<p>Hello,<br>\nI am trying to use the tactic calc with SModEq but I have an error. For instance, if I try to reprove the theorem SModEq.trans of MathLib using calc :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">hxy</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≡</span> <span class=\"n\">y</span> <span class=\"o\">[</span><span class=\"n\">SMOD</span> <span class=\"n\">U</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">hyz</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≡</span> <span class=\"n\">z</span> <span class=\"o\">[</span><span class=\"n\">SMOD</span> <span class=\"n\">U</span><span class=\"o\">])</span> <span class=\"o\">:</span>\n<span class=\"n\">x</span> <span class=\"bp\">≡</span> <span class=\"n\">z</span> <span class=\"o\">[</span><span class=\"n\">SMOD</span> <span class=\"n\">U</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">x</span> <span class=\"bp\">≡</span> <span class=\"n\">y</span> <span class=\"o\">[</span><span class=\"n\">SMOD</span> <span class=\"n\">U</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">hxy</span>\n    <span class=\"n\">_</span> <span class=\"bp\">≡</span> <span class=\"n\">z</span> <span class=\"o\">[</span><span class=\"n\">SMOD</span> <span class=\"n\">U</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">hyz</span>\n</code></pre></div>\n<p>then I got the following error :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"bp\">'</span><span class=\"k\">calc</span><span class=\"bp\">'</span> <span class=\"n\">step</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"bp\">`</span><span class=\"n\">Trans</span><span class=\"bp\">`</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">Trans</span> <span class=\"o\">(</span><span class=\"n\">SModEq</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">SModEq</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">m.3474</span>\n</code></pre></div>\n<p>Am I doing something wrong here?</p>",
        "id": 421100095,
        "sender_full_name": "Thomas Lanard",
        "timestamp": 1707762219
    },
    {
        "content": "<p>Have you seen any code that uses calc with smodeq yet?</p>",
        "id": 421102185,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707762843
    },
    {
        "content": "<p>Is the point that you have to prove <code>Trans</code> <em>first</em> before <code>calc</code> starts working?</p>",
        "id": 421105099,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707763685
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> No, I haven’t seen any code with calc and smodeq</p>\n<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Trans is already in MathLib under the name SModEq.trans. I just want to use calc and smodeq if it is possible</p>",
        "id": 421107426,
        "sender_full_name": "Thomas Lanard",
        "timestamp": 1707764402
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=SModEq.trans#doc\">docs#SModEq.trans</a> is just a lemma, it needs to be an instance of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Trans#doc\">docs#Trans</a> for calc to work</p>",
        "id": 421108025,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707764607
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">SModEq.instTrans</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Trans</span> <span class=\"o\">(</span><span class=\"n\">SModEq</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">SModEq</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">SModEq</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">trans</span> <span class=\"o\">:=</span> <span class=\"n\">SModEq.trans</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hxy</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≡</span> <span class=\"n\">y</span> <span class=\"o\">[</span><span class=\"n\">SMOD</span> <span class=\"n\">U</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">hyz</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≡</span> <span class=\"n\">z</span> <span class=\"o\">[</span><span class=\"n\">SMOD</span> <span class=\"n\">U</span><span class=\"o\">])</span> <span class=\"o\">:</span>\n    <span class=\"n\">x</span> <span class=\"bp\">≡</span> <span class=\"n\">z</span> <span class=\"o\">[</span><span class=\"n\">SMOD</span> <span class=\"n\">U</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">x</span> <span class=\"bp\">≡</span> <span class=\"n\">y</span> <span class=\"o\">[</span><span class=\"n\">SMOD</span> <span class=\"n\">U</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">hxy</span>\n    <span class=\"n\">_</span> <span class=\"bp\">≡</span> <span class=\"n\">z</span> <span class=\"o\">[</span><span class=\"n\">SMOD</span> <span class=\"n\">U</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">hyz</span>\n</code></pre></div>",
        "id": 421108442,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1707764749
    },
    {
        "content": "<p>I imagine the missing instance of <code>Trans</code> was an oversight. Feel free to make a PR to mathlib adding it</p>",
        "id": 421109215,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1707765024
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 421198129,
        "sender_full_name": "Thomas Lanard",
        "timestamp": 1707813748
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"666481\">Thomas Lanard</span> has marked this topic as resolved.</p>",
        "id": 421198141,
        "sender_full_name": "Notification Bot",
        "timestamp": 1707813755
    }
]