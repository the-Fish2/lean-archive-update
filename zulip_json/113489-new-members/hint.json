[
    {
        "content": "<p>How should I think about what <code>hint</code>'s \"job\" is?<br>\nI used to (in Mathlib3) use it as \"I think one of the 'simple' tactics in the library will fully solve the goal but I forget which, so run all of them and tell me which ones do\". Perhaps this was wrong even in Lean 3, but it worked some small amount of time, mostly to remind me about goals where <code>trivial</code> or something worked. Now however, in the small amount of time that I try <code>hint</code>, it often will recommend <code>aesop</code> and <code>simp</code>, tactics which then will potentially complain they didn't make any progress after trying them. I've assumed that's simply <code>hint</code> saying \"I have no ideas but these tactics are pretty strong, try those\" -- but is there now something that will do what my previous mental model had, i.e. \"try a set of tactics and tell me if they solve the goal\"?</p>",
        "id": 412353336,
        "sender_full_name": "Julian Berman",
        "timestamp": 1704983089
    },
    {
        "content": "<p>I am quite sure that your mental model about the Lean 3 version is correct.</p>",
        "id": 412353810,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1704983218
    },
    {
        "content": "<p>My impression is also that <code>hint</code> should only suggest tactics that actually make progress.</p>",
        "id": 412353874,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1704983234
    },
    {
        "content": "<p>Thanks! OK. I don't have an example in front of me, but I'm somewhat sure I had one recently where hint suggested <code>aesop</code> which didn't solve the goal or seemingly make any progress, even with unfolding. I'll have to follow up.</p>",
        "id": 412354470,
        "sender_full_name": "Julian Berman",
        "timestamp": 1704983407
    },
    {
        "content": "<p>yeah, I've noticed this too. <code>hint</code> suggests <code>aesop</code> but <code>aesop</code> does not actually do anything</p>",
        "id": 412354546,
        "sender_full_name": "David Renshaw",
        "timestamp": 1704983428
    },
    {
        "content": "<p>example that I have at hand:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lemma1</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">13</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">hint</span>\n<span class=\"c1\">-- Try these:</span>\n<span class=\"c1\">-- • aesop</span>\n\n<span class=\"c1\">-- ... but `aesop` fails with \"failed to prove the goal after exhaustive search.\"</span>\n</code></pre></div>",
        "id": 412354828,
        "sender_full_name": "David Renshaw",
        "timestamp": 1704983513
    }
]