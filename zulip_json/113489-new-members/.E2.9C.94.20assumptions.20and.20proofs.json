[
    {
        "content": "<p>hello,<br>\nhow can i encode in a Lean Type that a functions return value follows some restrictive assumptions?<br>\na function of that type should return<br>\n1 - the resulting value<br>\n2 - a proof that guarantees a certain assumption on the resulting value</p>\n<p>for exmple a fn: Nat -&gt; Nat that i want to restrict to be only albe to produce values &lt;= 2</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">inc_until_2</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">&lt;=</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span>\n<span class=\"bp\">|</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">3</span> <span class=\"c1\">-- line should not be valid</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span>\n</code></pre></div>",
        "id": 419306551,
        "sender_full_name": "Simon Daniel",
        "timestamp": 1706811438
    },
    {
        "content": "<p>This is generally done with <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Prelude.html#Subtype\">Subtype</a></p>\n<p>I don't know how you want the actual function to work, but an example would be:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">inc_until_2</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">{</span> <span class=\"n\">n</span> <span class=\"bp\">//</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;=</span> <span class=\"mi\">2</span> <span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">Nat.le_refl</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 419307799,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1706811887
    },
    {
        "content": "<p>Just to mention that you can put <code>Nat</code> in the subtype notation: <code>{ n : Nat // n &lt;= 2 }</code></p>",
        "id": 419309128,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1706812360
    },
    {
        "content": "<p>thanks alot, havent heard about subtypes yet :)<br>\nmy actual function is more complex, ill try to use subtypes. Im still not that confident about  tactics like simp and decide. I find the Theorem Proving in Lean 4 book to be a little scary on first looks, can you recommend it for someone who is more into programming than math?</p>",
        "id": 419310261,
        "sender_full_name": "Simon Daniel",
        "timestamp": 1706812766
    },
    {
        "content": "<p>Consider reading Functional Programming in Lean instead in that case.</p>",
        "id": 419310418,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1706812814
    },
    {
        "content": "<p>yea im currently using \"Functional Programming in Lean\" and the Lean Manual Books for learning, thanks!</p>",
        "id": 419310799,
        "sender_full_name": "Simon Daniel",
        "timestamp": 1706812968
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"684702\">Simon Daniel</span> has marked this topic as resolved.</p>",
        "id": 419310840,
        "sender_full_name": "Notification Bot",
        "timestamp": 1706812983
    }
]