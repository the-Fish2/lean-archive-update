[
    {
        "content": "<p>Hi! I am learning the Lean prover to better understand content in abstract algebra, commutative algebra, category theory and even algebraic geometry because I used to think that Lean can eliminate the vague and even fuzzy and jumpy content in traditional textbooks. But while doing the exercises using tactics it seems that I am now doing Lean more \"programming style\": For doing definitions or proving theorems I just repeated the loop of \"change the code, try if rfl works, try simp with results already got as more as possible, ...\" until no errors are reported. Finally, I got some correct results with the Lean Prover's powerful tactic system. But in the end, it becomes a proof similar to some traditional textbook I still don't know how the result is proved rigorously. It seems kind of backing to the starting point. To understand proof in Lean, I have to know the plain style proof. But to understand the plain proof, I want also Lean's assistance.</p>",
        "id": 422437672,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1708441749
    },
    {
        "content": "<p>An example is an exercise in TPIL section 8, where I solved it with the following snippet</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">fuse_eq</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">,</span> <span class=\"n\">eval</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">fuse</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">eval</span> <span class=\"n\">v</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"n\">intro</span> <span class=\"n\">e</span>\n<span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"n\">plus</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"n\">plus</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"n\">plus</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fuse</span><span class=\"o\">,</span> <span class=\"n\">simpConst_eq</span><span class=\"o\">,</span> <span class=\"n\">eval</span><span class=\"o\">,</span> <span class=\"n\">fuse_eq</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"n\">plus</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fuse</span><span class=\"o\">,</span> <span class=\"n\">simpConst_eq</span><span class=\"o\">,</span> <span class=\"n\">eval</span><span class=\"o\">,</span> <span class=\"n\">fuse_eq</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"n\">plus</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fuse</span><span class=\"o\">,</span> <span class=\"n\">simpConst_eq</span><span class=\"o\">,</span> <span class=\"n\">eval</span><span class=\"o\">,</span> <span class=\"n\">fuse_eq</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"n\">plus</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fuse</span><span class=\"o\">,</span> <span class=\"n\">simpConst_eq</span><span class=\"o\">,</span> <span class=\"n\">eval</span><span class=\"o\">,</span> <span class=\"n\">fuse_eq</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"n\">plus</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fuse</span><span class=\"o\">,</span> <span class=\"n\">simpConst_eq</span><span class=\"o\">,</span> <span class=\"n\">eval</span><span class=\"o\">,</span> <span class=\"n\">fuse_eq</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"n\">times</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"n\">times</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"n\">times</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fuse</span><span class=\"o\">,</span> <span class=\"n\">simpConst_eq</span><span class=\"o\">,</span> <span class=\"n\">eval</span><span class=\"o\">,</span> <span class=\"n\">fuse_eq</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"n\">times</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fuse</span><span class=\"o\">,</span> <span class=\"n\">simpConst_eq</span><span class=\"o\">,</span> <span class=\"n\">eval</span><span class=\"o\">,</span> <span class=\"n\">fuse_eq</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"n\">times</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fuse</span><span class=\"o\">,</span> <span class=\"n\">simpConst_eq</span><span class=\"o\">,</span> <span class=\"n\">eval</span><span class=\"o\">,</span> <span class=\"n\">fuse_eq</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"n\">times</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fuse</span><span class=\"o\">,</span> <span class=\"n\">simpConst_eq</span><span class=\"o\">,</span> <span class=\"n\">eval</span><span class=\"o\">,</span> <span class=\"n\">fuse_eq</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"n\">times</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fuse</span><span class=\"o\">,</span> <span class=\"n\">simpConst_eq</span><span class=\"o\">,</span> <span class=\"n\">eval</span><span class=\"o\">,</span> <span class=\"n\">fuse_eq</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>But I worked this out by trying to see if rfl or simp works (i.e., no error showed up). At the end it was proved, it seems I still don't understand how it is proved. It's like a textbook proof now: \"For showing they are the same, split them into cases and use the definitions and do it inductively\"</p>",
        "id": 422439180,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1708442154
    },
    {
        "content": "<p>This kind of exercise is really hard to compare with the kind of mathematics you mentioned.</p>",
        "id": 422445350,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708443771
    },
    {
        "content": "<p>About your general question, this is part of the mission of informalisation to help you access the details provided by automation, but we are not yet there.</p>",
        "id": 422445682,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708443866
    },
    {
        "content": "<blockquote>\n<p>Finally, I got some correct results with the Lean Prover's powerful tactic system. But in the end, it becomes a proof similar to some traditional textbook I still don't know how the result is proved rigorously. </p>\n</blockquote>\n<p>Bebehind the scenes, these tactics are constructing a rigorous proof. You can use <code>#print your_theorem</code> to see this proof, though this won't help understand <em>why</em> it is rigorous.</p>",
        "id": 422445962,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708443944
    },
    {
        "content": "<p>Yeah.. after knowing it's true with Lean, I think I can try to figure the rigorous proof out from all related tactics. Anyway, understanding proof in a textbook without lean is also time-consuming hence it should not bother me to do it manually. Thank you very much, Eric and Patrick <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 422447932,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1708444525
    },
    {
        "content": "<p>My solution is simpler:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>My solution</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Expr</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span>   <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">plus</span>  <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">times</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Expr</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sampleExpr</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"n\">plus</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"mi\">7</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"n\">n</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">v</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">plus</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">eval</span> <span class=\"n\">v</span> <span class=\"n\">e₁</span> <span class=\"bp\">+</span> <span class=\"n\">eval</span> <span class=\"n\">v</span> <span class=\"n\">e₂</span>\n  <span class=\"bp\">|</span> <span class=\"n\">times</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">eval</span> <span class=\"n\">v</span> <span class=\"n\">e₁</span> <span class=\"bp\">*</span> <span class=\"n\">eval</span> <span class=\"n\">v</span> <span class=\"n\">e₂</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sampleVal</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">5</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">6</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">eval</span> <span class=\"n\">sampleVal</span> <span class=\"n\">sampleExpr</span> <span class=\"c1\">-- output: 47</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">simpConst</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">plus</span>  <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"n\">n₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"n\">n₂</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">const</span> <span class=\"o\">(</span><span class=\"n\">n₁</span> <span class=\"bp\">+</span> <span class=\"n\">n₂</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">times</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"n\">n₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"n\">n₂</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">const</span> <span class=\"o\">(</span><span class=\"n\">n₁</span> <span class=\"bp\">*</span> <span class=\"n\">n₂</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">e</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fuse</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">const</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"n\">n</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">var</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">plus</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">simpConst</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"o\">(</span><span class=\"n\">fuse</span> <span class=\"n\">e₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fuse</span> <span class=\"n\">e₂</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"n\">times</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simpConst</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"o\">(</span><span class=\"n\">fuse</span> <span class=\"n\">e₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fuse</span> <span class=\"n\">e₂</span><span class=\"o\">))</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">simpConst_eq</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">),</span> <span class=\"n\">eval</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">simpConst</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">eval</span> <span class=\"n\">v</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">e</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">simpConst</span><span class=\"o\">]</span>\n  <span class=\"n\">split</span> <span class=\"bp\">&lt;;&gt;</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">fuse_eq</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">),</span> <span class=\"n\">eval</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">fuse</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">eval</span> <span class=\"n\">v</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">e</span>\n  <span class=\"n\">induction</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"n\">n</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span> <span class=\"n\">ih₁</span> <span class=\"n\">ih₂</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fuse</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">simpConst_eq</span><span class=\"o\">]</span>\n    <span class=\"n\">repeat</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eval</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ih₁</span><span class=\"o\">,</span> <span class=\"n\">ih₂</span><span class=\"o\">]</span>\n</code></pre></div>\n</div></div>",
        "id": 422553964,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1708497389
    },
    {
        "content": "<p>Yeah it’s much more simpler.</p>",
        "id": 422554096,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1708497487
    }
]