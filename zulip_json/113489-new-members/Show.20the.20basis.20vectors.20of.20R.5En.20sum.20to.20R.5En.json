[
    {
        "content": "<p>It's been a while, but I'm working on Axler's LADL in Lean done natively in Mathlib (that is, using the actual Mathlib structures and proofs rather than recreating Axler's definitions).</p>\n<p>I did a tour of MiL, then completed the proof that Axler's direct sum and Mathlib's notion of modeling \\sup + <code>IsCompl</code> are equivalent.</p>\n<p>Now we have the very basic notion that the canonical basis of <code>R^n</code> sums to <code>R^n</code>(in Axler's terms, the direct sum across all the subspaces formed form the span of each of the canonical vectors of <code>R^n</code> is <code>R^n</code>).</p>\n<p>I see <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Pi.basisFun#doc\">docs#Pi.basisFun</a> ...</p>",
        "id": 439304037,
        "sender_full_name": "Arien Malec",
        "timestamp": 1715987509
    },
    {
        "content": "<p>There should probably have been a question: What's the Mathlib setup or statement to prove that the sum of all the submodules formed from the individual canonical basis vectors are \\top (I guess).</p>",
        "id": 439304940,
        "sender_full_name": "Arien Malec",
        "timestamp": 1715988182
    },
    {
        "content": "<p>Do you mean like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.StdBasis</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Submodule.span</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">Set.range</span> <span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">basisFun</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">basisFun</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">span_eq</span>\n</code></pre></div>",
        "id": 439305209,
        "sender_full_name": "Richard Copley",
        "timestamp": 1715988414
    },
    {
        "content": "<p>Or this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.StdBasis</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⨆</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">ℝ</span> <span class=\"bp\">∙</span> <span class=\"o\">(</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">basisFun</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>(<code>R ∙ x</code> is short for <code>span R (singleton x)</code>; see <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=mem_span_singleton#doc\">docs#mem_span_singleton</a> etc.)</p>",
        "id": 439306099,
        "sender_full_name": "Richard Copley",
        "timestamp": 1715989179
    },
    {
        "content": "<p>Perfect!</p>",
        "id": 439307201,
        "sender_full_name": "Arien Malec",
        "timestamp": 1715990291
    },
    {
        "content": "<p>Any hints for proving the last one?</p>",
        "id": 439360874,
        "sender_full_name": "Arien Malec",
        "timestamp": 1716044091
    },
    {
        "content": "<p>Obviously the first is the more natural formulation, but the second seems like it reveals better what's going on \"under the covers\".</p>",
        "id": 439361561,
        "sender_full_name": "Arien Malec",
        "timestamp": 1716044674
    },
    {
        "content": "<p>I think <code>rw [← Submodule.span_range_eq_iSup]</code> gets me close to the first form?</p>",
        "id": 439363980,
        "sender_full_name": "Arien Malec",
        "timestamp": 1716046813
    },
    {
        "content": "<p>Got it but had do do This One Weird Trick</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.StdBasis</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⨆</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">ℝ</span> <span class=\"bp\">∙</span> <span class=\"o\">(</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">basisFun</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Submodule.span_range_eq_iSup</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">basisFun</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">basisFun</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">DFunLike.coe_fn_eq</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">basisFun</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">span_eq</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 439366001,
        "sender_full_name": "Arien Malec",
        "timestamp": 1716048779
    },
    {
        "content": "<p>Slightly Less Weird Trick</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⨆</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">ℝ</span> <span class=\"bp\">∙</span> <span class=\"o\">(</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">basisFun</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Submodule.span_range_eq_iSup</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">DFunLike.coe_fn_eq</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">basisFun</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">span_eq</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 439367527,
        "sender_full_name": "Arien Malec",
        "timestamp": 1716050328
    },
    {
        "content": "<p>No tricks:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⨆</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"bp\">∙</span> <span class=\"o\">(</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">basisFun</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Submodule.span_range_eq_iSup</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">basisFun</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">span_eq</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>So the <code>simp</code> machinery knows how to handle the conversion in the background while <code>rw</code> doesn't?</p>",
        "id": 439368016,
        "sender_full_name": "Arien Malec",
        "timestamp": 1716050853
    },
    {
        "content": "<p>There are cases involving dependent types where simp is stronger than rw, but I think in this case they both work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.StdBasis</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⨆</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">ℝ</span> <span class=\"bp\">∙</span> <span class=\"o\">(</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">basisFun</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Submodule.span_range_eq_iSup</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">basisFun</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">span_eq</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 439371384,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1716054292
    },
    {
        "content": "<p>So it does! I was trying to get the conversion to work and <em>that</em> wasn't working cleanly in <code>rw</code> without the hoops.</p>",
        "id": 439388098,
        "sender_full_name": "Arien Malec",
        "timestamp": 1716072860
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"400544\">Richard Copley</span> <a href=\"#narrow/stream/113489-new-members/topic/Show.20the.20basis.20vectors.20of.20R.5En.20sum.20to.20R.5En/near/439306099\">said</a>:</p>\n<blockquote>\n<p>Or this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.StdBasis</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⨆</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">ℝ</span> <span class=\"bp\">∙</span> <span class=\"o\">(</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">basisFun</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>(<code>R ∙ x</code> is short for <code>span R (singleton x)</code>; see <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=mem_span_singleton#doc\">docs#mem_span_singleton</a> etc.)</p>\n</blockquote>\n<p>What dot is this? It's not \\cdot or \\smul</p>",
        "id": 439388409,
        "sender_full_name": "Arien Malec",
        "timestamp": 1716073209
    },
    {
        "content": "<p>I can't seem to get VS Code to tell me.</p>",
        "id": 439388496,
        "sender_full_name": "Arien Malec",
        "timestamp": 1716073321
    },
    {
        "content": "<p>Sometimes Unicode notation is great, sometimes:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"c\">/-</span><span class=\"cm\"> Note that the character `∙` U+2219 used below is different from the scalar multiplication</span>\n<span class=\"cm\">character `•` U+2022. -/</span>\n<span class=\"n\">R</span> <span class=\"s2\">\" ∙ \"</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">span</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">singleton</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 439388832,
        "sender_full_name": "Arien Malec",
        "timestamp": 1716073637
    },
    {
        "content": "<p>Indeed it's not in the VS Code list of abbreviations <a href=\"https://github.com/leanprover/vscode-lean/blob/master/src/abbreviation/abbreviations.json\">https://github.com/leanprover/vscode-lean/blob/master/src/abbreviation/abbreviations.json</a> . Make a PR! You'll have to think of a good abbreviation for it :-)</p>",
        "id": 439392547,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716077797
    },
    {
        "content": "<p>'\\span'?</p>",
        "id": 439393933,
        "sender_full_name": "Arien Malec",
        "timestamp": 1716079231
    },
    {
        "content": "<p>Looks good -- right now we have <code>\\spadesuit</code> but nothing matching <code>span</code>.</p>",
        "id": 439394174,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716079464
    },
    {
        "content": "<p>PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/447\">#447</a> to <a href=\"https://github.com/leanprover/vscode-lean4\">https://github.com/leanprover/vscode-lean4</a></p>\n<p>I'll create a PR for Mathlib/LinearAlgebra/Span.lean itself, which has incorrect docu</p>",
        "id": 439445119,
        "sender_full_name": "Arien Malec",
        "timestamp": 1716131404
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/13039\">mathlib4#13039</a></p>",
        "id": 439455965,
        "sender_full_name": "Arien Malec",
        "timestamp": 1716141928
    }
]