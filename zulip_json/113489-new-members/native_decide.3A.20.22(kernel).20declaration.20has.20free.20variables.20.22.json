[
    {
        "content": "<p>When I try</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">stupid</span> <span class=\"o\">:</span> <span class=\"n\">IsLeast</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"bp\">|</span> <span class=\"n\">true</span><span class=\"o\">}</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">IsLeast</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"bp\">|</span> <span class=\"n\">true</span><span class=\"o\">}</span> <span class=\"mi\">0</span> <span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">isTrue</span>\n    <span class=\"n\">simp</span>\n  <span class=\"n\">native_decide</span>\n</code></pre></div>\n<p>I get the fairly inscrutable message</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">kernel</span><span class=\"o\">)</span> <span class=\"n\">declaration</span> <span class=\"n\">has</span> <span class=\"n\">free</span> <span class=\"kd\">variables</span> <span class=\"bp\">'</span><span class=\"n\">stupid._nativeDecide_1'</span>\n</code></pre></div>\n<p>Any idea what this means / how to fix it?</p>",
        "id": 426821588,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1710536555
    },
    {
        "content": "<p>Best I can find is that it comes from <code>declHasFVars</code> in the kernel, which comes from a <code>declaration_has_free_vars_exception</code> in C, which comes from <code>check_no_metavar_no_fvar</code> (which is only caller of <code>check_no_fvar</code>).</p>",
        "id": 426822236,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1710536868
    },
    {
        "content": "<p>Lean can't evaluate your decidable instance because it is a local variable in that context. If you lift it to a separate definition then it should work</p>",
        "id": 426831812,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710541588
    },
    {
        "content": "<p>Oh, huh. Is this related to the fact that theorems are opaque? Like somehow native_decide doesn't \"pass on\" the relevant details to the kernel?</p>",
        "id": 426831898,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1710541639
    },
    {
        "content": "<p><code>native_decide</code> only works when <code>(inferInstance : Decidable &lt;your_goal&gt;)</code> results in a proof with no free variables</p>",
        "id": 426831928,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710541661
    },
    {
        "content": "<p>which can therefore be sent to the compiler</p>",
        "id": 426832016,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710541697
    },
    {
        "content": "<p>it's the same reason that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"k\">#eval</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>doesn't work</p>",
        "id": 426832050,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710541714
    },
    {
        "content": "<p>Interesting. Alright! Maybe worth mentioning in the docstring for native_decide (or a clearer error message?) I was banging my head on this for fifteen minutes and wouldn't have guessed that :)</p>\n<p>Thanks!</p>",
        "id": 426832059,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1710541721
    },
    {
        "content": "<p>yeah no that's a really bad error message, you should report it</p>",
        "id": 426832109,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710541756
    },
    {
        "content": "<p>Normally this is a point where I would point out that you've used <code>have</code> where you really should have used <code>let</code>, but in this case I think that won't be good enough because the code in question is not smart enough to unfold let variables before the free variable check</p>",
        "id": 426832323,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710541892
    },
    {
        "content": "<p>Yeah,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">stupid</span> <span class=\"o\">:</span> <span class=\"n\">IsLeast</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"bp\">|</span> <span class=\"n\">true</span><span class=\"o\">}</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">IsLeast</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"bp\">|</span> <span class=\"n\">true</span><span class=\"o\">}</span> <span class=\"mi\">0</span> <span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">isTrue</span>\n    <span class=\"n\">simp</span>\n  <span class=\"n\">native_decide</span>\n</code></pre></div>\n<p>has the same message</p>",
        "id": 426832462,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1710541972
    }
]