[
    {
        "content": "<p>I want to define an inductive type that describes the elementary row operations on a matrix. Could anyone explain why this error is popping up, and how to rectify it?</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">inductive</span><span class=\"w\"> </span><span class=\"n\">elemOp</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">scalarMul</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Rat</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">elemOp</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">rowSwap</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">elemOp</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">rowMulAdd</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Rat</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">elemOp</span>\n<span class=\"n\">deriving</span><span class=\"w\"> </span><span class=\"n\">Repr</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">elemOpOnMatrix</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Matrix</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">Rat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">E</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">elemOp</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:=</span><span class=\"n\">m</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Matrix</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">Rat</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">scalarMul</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">updateRow</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">))</span>\n<span class=\"c1\">--invalid pattern, constructor or constant marked with '[match pattern]' expected</span>\n</code></pre></div>",
        "id": 440461425,
        "sender_full_name": "Vivek Rajesh Joshi",
        "timestamp": 1716538248
    },
    {
        "content": "<p>I suspect that <code>scalarMul</code> is not matching with the constructor, whose name is <code>elemOp.scalarMul</code>. This might be one problem.</p>",
        "id": 440462548,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716538787
    },
    {
        "content": "<p>You can probably use <code>.scalarMul</code>, or <code>namespace elemOp</code>, or <code>def elemOp.OnMatrix</code>; these would all fix this problem.</p>",
        "id": 440462727,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716538862
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 440465848,
        "sender_full_name": "Vivek Rajesh Joshi",
        "timestamp": 1716540130
    },
    {
        "content": "<p>is this the right place to ask quick questions? I'm wondering why this doesn't check:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"c1\">-- create an IsEven(n) inductive type for Nat</span>\n<span class=\"kn\">inductive</span><span class=\"w\"> </span><span class=\"n\">IsEven</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"kt\">Prop</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">ez</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">IsEven</span><span class=\"w\"> </span><span class=\"n\">zero</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">es</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">IsEven</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">IsEven</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">))</span>\n\n<span class=\"c1\">-- create a foo function that only receives even nats</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">IsEven</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">zero</span><span class=\"w\">          </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">n</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"bp\">_</span>\n</code></pre></div>\n<p>errors with <code>invalid pattern, constructor or constant marked with '[match_pattern]' expected</code>. why?</p>",
        "id": 446651391,
        "sender_full_name": "Victor Maia",
        "timestamp": 1719244314
    },
    {
        "content": "<p><a href=\"#narrow/stream/113489-new-members/topic/invalid.20pattern.2C.20constructor.20marked.20with.20.27.5Bmatch.20pattern.5D.27/near/446651391\">A message</a> was moved here from <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/v4.2E9.2E0-rc1.20discussion\">#general &gt; v4.9.0-rc1 discussion</a> by <span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span>.</p>",
        "id": 446651742,
        "sender_full_name": "Notification Bot",
        "timestamp": 1719244362
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"372571\">@Victor Maia</span> (moved the message here, that discussion is for reporting recent regressions)</p>",
        "id": 446651991,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1719244405
    },
    {
        "content": "<p>You are missing <code>open Nat</code> most likely, otherwise <code>zero =&gt; </code> will be interpreted as declaring a new variable and <code>succ (succ p)</code> is invalid syntax. The most recent version (or possibly the next version, since I think it isn't live yet) will have additional help to identify this mistake and suggest to use <code>Nat.zero</code> or <code>.zero</code> instead of <code>zero</code></p>",
        "id": 446653134,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1719244587
    },
    {
        "content": "<p>that \"discussion\"? I thought that was just the general channel? sorry zulip is confusing lol</p>",
        "id": 446653756,
        "sender_full_name": "Victor Maia",
        "timestamp": 1719244689
    },
    {
        "content": "<p>okay so you mean I need the <code>Nat.</code>, right? something like this works then:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"c1\">-- create a foo function that only receives even nats</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">IsEven</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"w\">              </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">n</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"w\">     </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"bp\">_</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">n</span>\n</code></pre></div>\n<p>but how do I mark this case as unreachable?</p>",
        "id": 446654595,
        "sender_full_name": "Victor Maia",
        "timestamp": 1719244824
    },
    {
        "content": "<p>can I disable the positivity checker so I can have proper HOAS?</p>",
        "id": 446668581,
        "sender_full_name": "Victor Maia",
        "timestamp": 1719248591
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">IsEven</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\">              </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">n</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">n</span>\n</code></pre></div>",
        "id": 446677629,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1719250908
    },
    {
        "content": "<p>nice, ty</p>",
        "id": 446677836,
        "sender_full_name": "Victor Maia",
        "timestamp": 1719250967
    },
    {
        "content": "<p>so just to be sure, no way to disable the positivity checker right?</p>",
        "id": 446707968,
        "sender_full_name": "Victor Maia",
        "timestamp": 1719260197
    },
    {
        "content": "<p>If you want to prove anything about the function, no. (I assume you mean \"termination checker\" here, right? I know of positivity as a concept for inductive types, and maybe some systems use that also for checking structural recursion?)</p>",
        "id": 446718471,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1719263088
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> I just want to be able to write a HOAS type (like, <code>lam : (Term -&gt; Term) -&gt; Term</code>), which doesn't pass the positivity checker (which is likely part of the termination checker indeed). from your message, I assume I can actually disable it somehow? in agda for example, we can disable the termination checker. of course, that means our proofs may have inconsistencies, but it basically tells the type checker that you'll take care of this, so it only has to do the type checking, not the termination checking. and you can still write proofs the same</p>",
        "id": 446718836,
        "sender_full_name": "Victor Maia",
        "timestamp": 1719263197
    },
    {
        "content": "<p>Ok, so you do mean positivity checker for the inductive types — I was confused because the context of your question was this <code>foo</code> function (and I was wondering how <code>foo</code> had anything to do with HOAS). The termination checker is completely different.</p>",
        "id": 446719240,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1719263344
    },
    {
        "content": "<p>No you can't disable the positivity checker, Lean will not allow you to make it an inconsistent system apart from explicitly introducing <code>axiom</code>s. You can instead use a PHOAS type to do the things you might do with HOAS: <a href=\"https://lean-lang.org/lean4/doc/examples/phoas.lean.html\">https://lean-lang.org/lean4/doc/examples/phoas.lean.html</a></p>",
        "id": 446719343,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1719263395
    },
    {
        "content": "<p>ah, that's unfortunate. phoas compiles to a considerably slower representation, which is very relevant if you want to build a fast interpreter. it is also considerably harder to prove things about and reason about, which is why I asked. hoas by itself is perfectly terminating. sad that we can't do it in lean, but fair enough</p>",
        "id": 446719721,
        "sender_full_name": "Victor Maia",
        "timestamp": 1719263535
    },
    {
        "content": "<p>How does Agda do termination checking? Is it a decision procedure, or is it more like Lean, where the output of termination checking is the definition compiled as a recursor expression?</p>",
        "id": 446720939,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1719263839
    },
    {
        "content": "<p>idk but you can disable it and essentially say \"for my project let me take care of termination, just check the types\" (which IMO is the right take, specially because any termination checker will necessarily blacklist perfectly good programs)</p>",
        "id": 446721263,
        "sender_full_name": "Victor Maia",
        "timestamp": 1719263901
    },
    {
        "content": "<p>Do these definitions still reduce? Lean relies on the fact the definitions are \"compiled\" to be recursor terms for reduction to succeed. If you skip this with the <code>partial</code> keyword, then the definitions become opaque.</p>",
        "id": 446721577,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1719263990
    },
    {
        "content": "<p>yes they reduce! it just disables the termination checker, that changes nothing on how the evaluator works. this is not related to axioms</p>",
        "id": 446721725,
        "sender_full_name": "Victor Maia",
        "timestamp": 1719264027
    },
    {
        "content": "<p>ah you can still have total coverage AND unrestricted recursion / negative types</p>",
        "id": 446721803,
        "sender_full_name": "Victor Maia",
        "timestamp": 1719264058
    },
    {
        "content": "<p>In Lean there's also a difference between the kernel typechecker and the VM evaluator. You can evaluate things in the latter sense even if they can't be reduced in the DTT sense or have theorems proved about them.</p>",
        "id": 446722286,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1719264280
    },
    {
        "content": "<p>that is quite cool, but I'd still like to be able to prove things about a HOAS-based interpreter (I mean, otherwise I'd be using Haskell probably!) - but that is fair, I'll take that as an annoying limitation and move on</p>",
        "id": 446722409,
        "sender_full_name": "Victor Maia",
        "timestamp": 1719264334
    },
    {
        "content": "<p>By the way, here's what factorial looks like after \"termination checking\":</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">fact</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">*</span><span class=\"w\"> </span><span class=\"n\">fact</span><span class=\"w\"> </span><span class=\"n\">k</span>\n\n<span class=\"kn\">set_option</span><span class=\"w\"> </span><span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">false</span>\n<span class=\"bp\">#</span><span class=\"n\">print</span><span class=\"w\"> </span><span class=\"n\">fact</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">def fact : Nat → Nat :=</span>\n<span class=\"cm\">fun n =&gt; Nat.brecOn n fun n f =&gt; fact.match_1 (fun n =&gt; Nat.below n → Nat) n (fun a x =&gt; 1) (fun k x =&gt; n * x.fst.fst) f</span>\n<span class=\"cm\">-/</span>\n<span class=\"bp\">#</span><span class=\"n\">print</span><span class=\"w\"> </span><span class=\"n\">fact</span><span class=\"bp\">.</span><span class=\"n\">match_1</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">def fact.match_1.{u_1} : (motive : Nat → Sort u_1) →</span>\n<span class=\"cm\">  (n : Nat) → (Unit → motive 0) → ((k : Nat) → motive k.succ) → motive n :=</span>\n<span class=\"cm\">fun motive n h_1 h_2 =&gt; Nat.casesOn n (h_1 ()) fun n =&gt; h_2 n</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>(I'm putting \"termination checking\" in quotes because it's not just a check.)</p>",
        "id": 446722586,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1719264393
    },
    {
        "content": "<p>It also generates a couple lemmas so you never have to deal with these internal details.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">print</span><span class=\"w\"> </span><span class=\"n\">fact</span><span class=\"bp\">.</span><span class=\"n\">eq_1</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">theorem fact.eq_1 : fact 0 = 1 :=</span>\n<span class=\"cm\">Eq.refl (fact 0)</span>\n<span class=\"cm\">-/</span>\n<span class=\"bp\">#</span><span class=\"n\">print</span><span class=\"w\"> </span><span class=\"n\">fact</span><span class=\"bp\">.</span><span class=\"n\">eq_2</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">theorem fact.eq_2 : ∀ (k : Nat), fact k.succ = k.succ * fact k :=</span>\n<span class=\"cm\">fun k =&gt; Eq.refl (fact k.succ)</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 446722776,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1719264459
    },
    {
        "content": "<p>Just sharing this to give you a better idea of the limitations and what you might be able to expect or not expect from Lean</p>",
        "id": 446723124,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1719264534
    },
    {
        "content": "<p>thanks for sharing. interesting</p>",
        "id": 446723299,
        "sender_full_name": "Victor Maia",
        "timestamp": 1719264575
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/113489-new-members/topic/invalid.20pattern.2C.20constructor.20marked.20with.20'.5Bmatch.20pattern.5D'/near/446719343\">said</a>:</p>\n<blockquote>\n<p>No you can't disable the positivity checker, Lean will not allow you to make it an inconsistent system apart from explicitly introducing <code>axiom</code>s. You can instead use a PHOAS type to do the things you might do with HOAS: <a href=\"https://lean-lang.org/lean4/doc/examples/phoas.lean.html\">https://lean-lang.org/lean4/doc/examples/phoas.lean.html</a></p>\n</blockquote>\n<p>Actually that's not true, with <code>unsafe inductive</code> lean will let you violate positivity</p>",
        "id": 446749227,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1719276614
    }
]