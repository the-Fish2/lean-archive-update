[
    {
        "content": "<p>If I have a hypothesis like that <code>h: succ (a + d) = 0</code> how can I use <code>Nat.succ_ne_zero</code> to show that this hypothesis must be false?  E.g. can I use apply here somehow?</p>",
        "id": 421294970,
        "sender_full_name": "Philipp SL Schäfer",
        "timestamp": 1707846512
    },
    {
        "content": "<p>You should be able to do <code>apply Nat.succ_ne_zero at h</code>. which should give you <code>h : False</code>.</p>",
        "id": 421295500,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1707846694
    },
    {
        "content": "<p>thanks!</p>",
        "id": 421296213,
        "sender_full_name": "Philipp SL Schäfer",
        "timestamp": 1707846949
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"690867\">Philipp SL Schäfer</span> has marked this topic as resolved.</p>",
        "id": 421296221,
        "sender_full_name": "Notification Bot",
        "timestamp": 1707846952
    },
    {
        "content": "<p>In case it helps, you may not need to bother getting there, sometimes you can head straight for proving your goal. Or relatedly, it's worth trying the <code>hint</code> and/or <code>exact?</code>tactics with a simple example, they can sometimes tell you something can help you. E.g. here's a simple example that seems to say you might be able to just use <code>linarith</code> to prove your goal without any manual manipulating:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">hint</span> <span class=\"c1\">-- says linarith can solve the goal</span>\n</code></pre></div>",
        "id": 421296669,
        "sender_full_name": "Julian Berman",
        "timestamp": 1707847120
    },
    {
        "content": "<p>Another tactic you can use is <code>cases h</code>, which has the ability to reason about constructors. In this case it can close the goal since <code>succ</code> and <code>0</code> are different constructors, so the hypothesis is a contradiction.</p>",
        "id": 421298879,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1707848000
    },
    {
        "content": "<p>Maybe I can quickly ask another question here. I am currently going through the natural number game to get more familiar with the syntax. But some things are very confusing. Given some hypothesis like <code>hxy: x ≤ y</code> in the game one can use <code>cases hxy with a ha</code> to arrive at <code>ha: y = x + a</code> and then one can even introduce some <code>a</code> with <code>use</code>. However trying these things out in vscode it doesn't work, what am I doing wrong?</p>",
        "id": 421302412,
        "sender_full_name": "Philipp SL Schäfer",
        "timestamp": 1707849311
    },
    {
        "content": "<p>There are some differences between the NNG and Lean 4. To use NNG's <code>with ...variables...</code> syntax, switch to <code>cases' hxy with a ha</code></p>",
        "id": 421302652,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1707849394
    },
    {
        "content": "<p>Same goes for <code>induction</code>: you need to use <code>induction' ... with ...</code> instead</p>",
        "id": 421302714,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1707849419
    },
    {
        "content": "<p>thanks! And what about <code>use</code>?</p>",
        "id": 421303076,
        "sender_full_name": "Philipp SL Schäfer",
        "timestamp": 1707849541
    },
    {
        "content": "<p><code>use</code> is just about the same. There's no mathlib version that works the same as the NNG4 version, but the only difference is that the NNG4 version is called without any discharger. This basically means you may find yourself closing a goal without explicitly using <code>rfl</code>.</p>",
        "id": 421304380,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1707849976
    },
    {
        "content": "<p>Also, ≤ is defined in a different way in mathlib, so you don't get the same results when using cases on it</p>",
        "id": 421306301,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707850634
    },
    {
        "content": "<p>Ahh that might explain why cases' behaves differently. Why is $\\leq$ defined differently, and could I use the same definition as in NNG4 somehow?</p>",
        "id": 421308730,
        "sender_full_name": "Philipp SL Schäfer",
        "timestamp": 1707851480
    },
    {
        "content": "<p>I don't know why it's called <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.le.dest#doc\">docs#Nat.le.dest</a>, but I think you could do <code>cases' Nat.le.dest hxy with a ha</code></p>",
        "id": 421310472,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1707852150
    },
    {
        "content": "<p>Thanks! Then I get something like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>\n<span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">hb</span><span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">z</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">z</span>\n</code></pre></div>\n<p>but how can I apply it to the goal then?</p>",
        "id": 421311801,
        "sender_full_name": "Philipp SL Schäfer",
        "timestamp": 1707852702
    },
    {
        "content": "<p>Sorry for bothering, I am just pretty lost to translate things from NNG to normal lean.</p>",
        "id": 421311882,
        "sender_full_name": "Philipp SL Schäfer",
        "timestamp": 1707852727
    },
    {
        "content": "<p>You could probably do <code>subst ha hb</code> and then use transitivity and something like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.le_add_left#doc\">docs#Nat.le_add_left</a>.</p>",
        "id": 421312710,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707853049
    },
    {
        "content": "<p>If you have a hypothesis <code>h : a \\le b</code>, you can probably use <code>cases' Nat.exists_eq_add_of_le h</code></p>",
        "id": 421315005,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707853995
    },
    {
        "content": "<p>This translates between the core lean definition and the one used in NNG</p>",
        "id": 421315060,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707854020
    },
    {
        "content": "<p>I used the exists definition in NNG because extensive testing on undergraduates convinced me that the inductive prop definition was really confusing for them. I think that the easiest way to recover NNG behaviour in mathlib proper is simply to rewrite the lemma everywhere that says a &lt;= b iff exists c etc etc. The proof of that lemma is not <code>rfl</code> in lean but who cares, just rewrite it everywhere. I don't know its name and I'm on mobile but just guessing maybe it's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.le_iff_exists_add#doc\">docs#Nat.le_iff_exists_add</a> (edit: nope, but it will certainly be there somewhere)</p>",
        "id": 421394750,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707899752
    },
    {
        "content": "<p>@loogle LE.le, Exists</p>",
        "id": 421394998,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707899853
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.le.dest#doc\">docs#Nat.le.dest</a> was mentioned earlier: is this what you had in mind?</p>",
        "id": 421395595,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707900082
    },
    {
        "content": "<p>What a weird name!</p>",
        "id": 421395889,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707900190
    },
    {
        "content": "<p>Oh no, that's not what I want, I want the iff, so users can rewrite everywhere and not worry whether it's in a hypothesis or a goal</p>",
        "id": 421395979,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707900232
    },
    {
        "content": "<p>Ruben independently brought up <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.exists_eq_add_of_le#doc\">docs#Nat.exists_eq_add_of_le</a>, which is the same lemma (still not the iff) but with a better name</p>",
        "id": 421396098,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1707900271
    },
    {
        "content": "<p>Philipp is stuck precisely because they don't have access to the iff, but it's certainly there somewhere. I could mention it on the docstring for &lt;= in NNG. Note: it's easily findable with <code>exact?</code> but I'm not at lean right now</p>",
        "id": 421396426,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707900395
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=le_iff_exists_add#doc\">docs#le_iff_exists_add</a> because it's generalized away from Nat</p>",
        "id": 421402288,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707902448
    },
    {
        "content": "<p>Thanks everyone! So when arriving at </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">hb</span><span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">z</span>\n</code></pre></div>\n<p>how would you close the proof?</p>",
        "id": 421532498,
        "sender_full_name": "Philipp SL Schäfer",
        "timestamp": 1707944653
    },
    {
        "content": "<p>Can you finish it after <code>rw [le_iff_exists_add]</code>?</p>",
        "id": 421533747,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707945182
    },
    {
        "content": "<p>I don't quite get it ...</p>",
        "id": 421534926,
        "sender_full_name": "Philipp SL Schäfer",
        "timestamp": 1707945691
    },
    {
        "content": "<p>Or is it okay to use  <code>rw [hb]</code>and then <code>existsi (a+b)</code> and then <code>rfl</code></p>",
        "id": 421535928,
        "sender_full_name": "Philipp SL Schäfer",
        "timestamp": 1707946106
    },
    {
        "content": "<p>I don't know, what does lean say when you try it?</p>",
        "id": 421536325,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707946282
    },
    {
        "content": "<p>I thought the whole point of this conversation was that <code>existsi</code>won't work in regular lean without the rewrite?</p>",
        "id": 421538714,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707947273
    },
    {
        "content": "<p>In case anybody else finds themselves here after NNG4.</p>\n<p>(If you click \"View in Lean 4 playgound\", <br>\nyou can step through the infoview for everything)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"c1\">-- rw to make it like the NNG4 version</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">le_iff_exists_add</span><span class=\"o\">]</span>\n  <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- There's a linear arithmetic tactic that can solve this</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">linarith</span>\n\n<span class=\"c1\">-- You can solve this with library search.</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">cases</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span><span class=\"bp\">?</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span><span class=\"bp\">?</span>\n\n<span class=\"c1\">-- The solution after using the library search.</span>\n<span class=\"c1\">-- You can look into how `zero_le` and `le_add_right` are</span>\n<span class=\"c1\">-- implemented in Nat.basic (F12 in VS Code)</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">cases</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.zero_le</span> <span class=\"n\">_</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.le_add_right</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- if: `succ n =&gt; ... n + 1 ...`</span>\n<span class=\"c1\">-- just looks like: `x =&gt; ... x ...`</span>\n<span class=\"c1\">-- to you. You can use match ¯\\_(ツ)_/¯</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.zero_le</span> <span class=\"n\">_</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.le_add_right</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 421728200,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1708026305
    }
]