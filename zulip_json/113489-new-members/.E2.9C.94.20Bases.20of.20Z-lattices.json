[
    {
        "content": "<p>Hello! I've already asked a few questions and you kindly answered, but let me introduce myself. I am a mathematical physicist and interested in formalising functions on lattices, operators on them and so on, and I want to consider rather specific operators.</p>\n<p>To start with, I want that the ℤ-lattice in a EuclideanSpace to be a subset of EuclideanSpace. In the file<br>\n<a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Module/Zlattice.html\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Module/Zlattice.html</a><br>\ntwo ways are suggested:</p>\n<ul>\n<li><code>Submodule.span ℤ (Set.range b)</code> for a basis <code>b</code></li>\n<li><code>AddSubgroup E</code> with additional properties<br>\nSo I tried the first one.,</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">R2Basis</span> <span class=\"o\">:=</span> <span class=\"n\">EuclideanSpace.basisFun</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">Z2</span> <span class=\"o\">:=</span> <span class=\"n\">Submodule.span</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">Set.range</span> <span class=\"o\">(</span><span class=\"n\">R2Basis</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>Now I want that any <code>(v : Z2)</code> has integer coefficients in <code>R2Basis</code>. However, <code>R2Basis</code> is a subset of <code>EuclideanSpace</code>. It is still possible to expand <code>v</code> in <code>R2Basis</code>, yet I cannot find a theorem that the coefficients in this case are ℤ (in ℝ). On the other hand, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">Z2Basis</span> <span class=\"o\">:=</span> <span class=\"n\">Basis.restrictScalars</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">OrthonormalBasis.toBasis</span> <span class=\"n\">R2Basis</span><span class=\"o\">)</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">Z2'</span> <span class=\"o\">:=</span> <span class=\"n\">Submodule.span</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">Set.range</span> <span class=\"o\">(</span><span class=\"n\">Z2Basis</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>gives a basis of the ℤ-submodule <code>Z2'</code> but <code>v</code> is not there. What can I do?</p>",
        "id": 423171625,
        "sender_full_name": "Yoh Tanimoto",
        "timestamp": 1708782688
    },
    {
        "content": "<p>Hi! <span class=\"user-mention\" data-user-id=\"488648\">@Xavier Roblot</span> proved quite a lot of stuff about lattices (in number theory thought). Maybe he has some opinion.</p>",
        "id": 423171879,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1708782862
    },
    {
        "content": "<p>I am also interested in lattices but am unsure of the best way to do what you want.  Maybe <span class=\"user-mention\" data-user-id=\"266253\">@Joseph Myers</span> would be able to point you in the right direction of what is needed here?</p>",
        "id": 423176652,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1708786240
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"382902\">Yoh Tanimoto</span> <a href=\"#narrow/stream/113489-new-members/topic/Bases.20of.20Z-lattices/near/423171625\">said</a>:</p>\n<blockquote>\n<p>Hello! I've already asked a few questions and you kindly answered, but let me introduce myself. I am a mathematical physicist and interested in formalising functions on lattices, operators on them and so on, and I want to consider rather specific operators.</p>\n<p>To start with, I want that the ℤ-lattice in a EuclideanSpace to be a subset of EuclideanSpace. In the file<br>\n<a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Module/Zlattice.html\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Module/Zlattice.html</a><br>\ntwo ways are suggested:</p>\n<ul>\n<li><code>Submodule.span ℤ (Set.range b)</code> for a basis <code>b</code></li>\n<li><code>AddSubgroup E</code> with additional properties<br>\nSo I tried the first one.,</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">R2Basis</span> <span class=\"o\">:=</span> <span class=\"n\">EuclideanSpace.basisFun</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">Z2</span> <span class=\"o\">:=</span> <span class=\"n\">Submodule.span</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">Set.range</span> <span class=\"o\">(</span><span class=\"n\">R2Basis</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>Now I want that any <code>(v : Z2)</code> has integer coefficients in <code>R2Basis</code>. </p>\n</blockquote>\n<p>For that, you can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Basis.mem_span_iff_repr_mem#doc\">docs#Basis.mem_span_iff_repr_mem</a></p>",
        "id": 423177447,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1708786623
    },
    {
        "content": "<p>thank you, it worked!</p>\n<p>by the way, which is the most natural way to say that a (s : ℝ) \"is an integer\"? I do as follows, I'm not sure whether it's the best.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">R2Basis</span> <span class=\"o\">:=</span> <span class=\"n\">EuclideanSpace.basisFun</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">Z2</span> <span class=\"o\">:=</span> <span class=\"n\">Submodule.span</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">Set.range</span> <span class=\"o\">(</span><span class=\"n\">R2Basis</span><span class=\"o\">))</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">R2</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">EuclideanSpace</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">))</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">R2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"bp\">∈</span> <span class=\"n\">Z2</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">hw</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)),</span> <span class=\"o\">((</span><span class=\"n\">OrthonormalBasis.toBasis</span> <span class=\"n\">R2Basis</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">repr</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">Set.range</span> <span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">ℤ</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">Basis.mem_span_iff_repr_mem</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">OrthonormalBasis.toBasis</span> <span class=\"n\">R2Basis</span><span class=\"o\">)</span> <span class=\"n\">w</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">Set.range</span> <span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">ℤ</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n <span class=\"n\">simp</span>\n <span class=\"n\">intro</span> <span class=\"n\">n</span> <span class=\"n\">hn</span>\n <span class=\"n\">use</span> <span class=\"n\">n</span>\n <span class=\"n\">exact</span> <span class=\"n\">hn.symm</span>\n</code></pre></div>",
        "id": 423180069,
        "sender_full_name": "Yoh Tanimoto",
        "timestamp": 1708788115
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"382902\">Yoh Tanimoto</span> has marked this topic as resolved.</p>",
        "id": 423180163,
        "sender_full_name": "Notification Bot",
        "timestamp": 1708788149
    },
    {
        "content": "<p>I don't have specific advice on using lattices in mathlib, just a general observation that quite often it's more convenient to use homomorphisms rather than subsets or subtypes (in which case you'd be working with a free ℤ-module with an injective linear map to Euclidean space satisfying appropriate conditions).</p>",
        "id": 423181122,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1708788856
    },
    {
        "content": "<p>ok, in my case, I want to consider functions on ℤ^d, extend them in some natural way to ℤ^d, do some operations there and then restrict them to ℤ^d.</p>",
        "id": 423181641,
        "sender_full_name": "Yoh Tanimoto",
        "timestamp": 1708789277
    },
    {
        "content": "<p>I think \"in the range of Int.cast\" is more typical.</p>",
        "id": 423182097,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1708789618
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"382902\">Yoh Tanimoto</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Bases.20of.20Z-lattices/near/423180069\">said</a>:</p>\n<blockquote>\n<p>thank you, it worked!</p>\n<p>by the way, which is the most natural way to say that a (s : ℝ) \"is an integer\"? I do as follows, I'm not sure whether it's the best.</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">R2Basis</span> <span class=\"o\">:=</span> <span class=\"n\">EuclideanSpace.basisFun</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">Z2</span> <span class=\"o\">:=</span> <span class=\"n\">Submodule.span</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">Set.range</span> <span class=\"o\">(</span><span class=\"n\">R2Basis</span><span class=\"o\">))</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">R2</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">EuclideanSpace</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">))</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">R2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"bp\">∈</span> <span class=\"n\">Z2</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">hw</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)),</span> <span class=\"o\">((</span><span class=\"n\">OrthonormalBasis.toBasis</span> <span class=\"n\">R2Basis</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">repr</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">Set.range</span> <span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">ℤ</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">Basis.mem_span_iff_repr_mem</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">OrthonormalBasis.toBasis</span> <span class=\"n\">R2Basis</span><span class=\"o\">)</span> <span class=\"n\">w</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">Set.range</span> <span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">ℤ</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n <span class=\"n\">simp</span>\n <span class=\"n\">intro</span> <span class=\"n\">n</span> <span class=\"n\">hn</span>\n <span class=\"n\">use</span> <span class=\"n\">n</span>\n <span class=\"n\">exact</span> <span class=\"n\">hn.symm</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I think the example above is the best way, note that you have in fact:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">Set.range</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">ℤ</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 423182876,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1708790108
    },
    {
        "content": "<p>ok, noted, thanks to you all!</p>",
        "id": 423185873,
        "sender_full_name": "Yoh Tanimoto",
        "timestamp": 1708792433
    }
]