[
    {
        "content": "<p>Two questions:<br>\na) Is this already in Mathlib somewhere? I couldn't find it in a reasonably close form.<br>\nb) If not, can it be shortened significantly? I would imagine all the \"nonempty whatever\" can be optmized.<br>\nc) If not, should the answer to a) become \"yes\"?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Order.Pointwise</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Image</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Pointwise.Basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">Pointwise</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">abs_inf_dist_le_sup</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hα</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n <span class=\"o\">(</span><span class=\"n\">fpos</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">gpos</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">BddAbove</span> <span class=\"o\">(</span><span class=\"n\">Set.range</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"bp\">-</span> <span class=\"n\">g</span><span class=\"bp\">|</span><span class=\"o\">)):</span>\n    <span class=\"bp\">|</span><span class=\"n\">sInf</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">-</span> <span class=\"n\">sInf</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"o\">}</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">sSup</span> <span class=\"o\">{</span><span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">refine</span> <span class=\"n\">abs_le.mpr</span> <span class=\"o\">⟨</span><span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n    <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">sInf</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">-</span> <span class=\"n\">sSup</span> <span class=\"o\">{</span><span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">≤</span> <span class=\"n\">sInf</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">csInf_sub</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">hb</span><span class=\"o\">)]</span>\n        <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">le_csInf</span>\n          <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"n\">z₀</span> <span class=\"o\">:=</span> <span class=\"n\">Classical.choice</span> <span class=\"n\">hα</span>\n            <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">f</span> <span class=\"n\">z₀</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span>\n          <span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n            <span class=\"n\">refine</span> <span class=\"bp\">@</span><span class=\"n\">csInf_le_of_le</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">({</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">x_1</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">x_1</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">-</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">x_1</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"n\">x_1</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"n\">x_1</span><span class=\"bp\">|</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">})</span>\n              <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"bp\">|</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n            <span class=\"bp\">·</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">sub_eq_add_neg</span><span class=\"o\">]</span>\n              <span class=\"n\">apply</span> <span class=\"n\">BddBelow.add</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">BddAbove.neg</span> <span class=\"n\">hb</span><span class=\"o\">)</span>\n              <span class=\"bp\">·</span> <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span><span class=\"bp\">;</span><span class=\"n\">rintro</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">gpos</span>\n            <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">Set.mem_sub.mpr</span>\n              <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">),</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"bp\">|</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span><span class=\"o\">⟩</span>\n            <span class=\"bp\">·</span> <span class=\"n\">nth_rewrite</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">abs_of_nonneg</span> <span class=\"o\">(</span><span class=\"n\">gpos</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">abs_sub_comm</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">]</span>\n              <span class=\"k\">calc</span>\n              <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"bp\">|</span><span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">|</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">abs_sub_abs_le_abs_sub</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n              <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring_nf</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">abs_of_nonneg</span> <span class=\"o\">(</span><span class=\"n\">fpos</span> <span class=\"n\">x</span><span class=\"o\">)]</span>\n        <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"n\">z₀</span> <span class=\"o\">:=</span> <span class=\"n\">Classical.choice</span> <span class=\"n\">hα</span>\n          <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">g</span> <span class=\"n\">z₀</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span>\n        <span class=\"bp\">·</span> <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"n\">rintro</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">gpos</span>\n        <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"n\">z₀</span> <span class=\"o\">:=</span> <span class=\"n\">Classical.choice</span> <span class=\"n\">hα</span>\n          <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"n\">z₀</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"n\">z₀</span><span class=\"bp\">|</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span>\n      <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">sInf</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">-</span> <span class=\"n\">sSup</span> <span class=\"o\">{</span><span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">≤</span> <span class=\"n\">sInf</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">csInf_sub</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">hb</span><span class=\"o\">)]</span>\n        <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">le_csInf</span>\n          <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"n\">z₀</span> <span class=\"o\">:=</span> <span class=\"n\">Classical.choice</span> <span class=\"n\">hα</span>\n            <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">g</span> <span class=\"n\">z₀</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span>\n          <span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n            <span class=\"n\">refine</span> <span class=\"bp\">@</span><span class=\"n\">csInf_le_of_le</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">({</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">x_1</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x_1</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">-</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">x_1</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"n\">x_1</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"n\">x_1</span><span class=\"bp\">|</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">})</span>\n              <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"bp\">|</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n            <span class=\"bp\">·</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">sub_eq_add_neg</span><span class=\"o\">]</span>\n              <span class=\"n\">apply</span> <span class=\"n\">BddBelow.add</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">BddAbove.neg</span> <span class=\"n\">hb</span><span class=\"o\">)</span>\n              <span class=\"bp\">·</span> <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"n\">rintro</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">fpos</span>\n            <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">Set.mem_sub.mpr</span> <span class=\"o\">⟨</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">),</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"bp\">|</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span><span class=\"o\">⟩</span>\n            <span class=\"bp\">·</span> <span class=\"n\">nth_rewrite</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">abs_of_nonneg</span> <span class=\"o\">(</span><span class=\"n\">fpos</span> <span class=\"n\">x</span><span class=\"o\">)]</span>\n              <span class=\"k\">calc</span>\n              <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">|</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">abs_sub_abs_le_abs_sub</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n              <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring_nf</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">abs_of_nonneg</span> <span class=\"o\">(</span><span class=\"n\">gpos</span> <span class=\"n\">x</span><span class=\"o\">)]</span>\n        <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"n\">z₀</span> <span class=\"o\">:=</span> <span class=\"n\">Classical.choice</span> <span class=\"n\">hα</span>\n          <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">f</span> <span class=\"n\">z₀</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span>\n        <span class=\"bp\">·</span> <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"n\">rintro</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">fpos</span>\n        <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"n\">z₀</span> <span class=\"o\">:=</span> <span class=\"n\">Classical.choice</span> <span class=\"n\">hα</span>\n          <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"n\">z₀</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"n\">z₀</span><span class=\"bp\">|</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span>\n      <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 425406263,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1709850252
    },
    {
        "content": "<p>Note that <code>sSup { f x | x }</code> is usually better written as <code>iSup f</code> (or with the notation for that function)</p>",
        "id": 425411842,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709852723
    },
    {
        "content": "<p>I am bumping this up again, since I didn't get anywhere. I did rewrite the statement of the theorem in terms of <code>iSup</code> and <code>iInf</code> since it was convenient when applying it, but proof wise I don't see a series of rewrites that is as simple as the one above (so I ended up rewriting <code>iSup</code>and <code>iInf</code> to <code>csSup</code> and <code>csInf</code> on the first line and kept everything else the same). I did cut the length of the proof in half by adding a separate lemma: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Pointwise</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">inf_sub_sup_le_inf</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n <span class=\"o\">(</span><span class=\"n\">fpos</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">gpos</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">BddAbove</span> <span class=\"o\">(</span><span class=\"n\">Set.range</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"bp\">-</span> <span class=\"n\">g</span><span class=\"bp\">|</span><span class=\"o\">)):</span>\n    <span class=\"n\">iInf</span> <span class=\"n\">g</span> <span class=\"bp\">-</span> <span class=\"n\">iSup</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"bp\">-</span> <span class=\"n\">g</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">iInf</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hα</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"n\">α</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">iInf</span><span class=\"o\">,</span> <span class=\"n\">iSup</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">csInf_sub</span> <span class=\"o\">⟨</span><span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">Classical.choice</span> <span class=\"n\">hα</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">hb</span><span class=\"o\">)]</span>\n    <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">le_csInf</span> <span class=\"o\">⟨</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Classical.choice</span> <span class=\"n\">hα</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span>\n      <span class=\"n\">rintro</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n      <span class=\"n\">refine</span> <span class=\"bp\">@</span><span class=\"n\">csInf_le_of_le</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">({</span><span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">-</span> <span class=\"o\">{</span><span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"o\">})</span>\n        <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"bp\">|</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">),</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"bp\">|</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span><span class=\"o\">⟩</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n      <span class=\"bp\">·</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">sub_eq_add_neg</span><span class=\"o\">]</span>\n        <span class=\"n\">apply</span> <span class=\"n\">BddBelow.add</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">BddAbove.neg</span> <span class=\"n\">hb</span><span class=\"o\">)</span>\n        <span class=\"bp\">·</span> <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span><span class=\"bp\">;</span><span class=\"n\">rintro</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">gpos</span>\n      <span class=\"bp\">·</span> <span class=\"n\">nth_rewrite</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">abs_of_nonneg</span> <span class=\"o\">(</span><span class=\"n\">gpos</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">abs_sub_comm</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">]</span>\n        <span class=\"k\">calc</span>\n        <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"bp\">|</span><span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">|</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">abs_sub_abs_le_abs_sub</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n        <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring_nf</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">abs_of_nonneg</span> <span class=\"o\">(</span><span class=\"n\">fpos</span> <span class=\"n\">x</span><span class=\"o\">)]</span>\n    <span class=\"bp\">·</span> <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"n\">rintro</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">gpos</span>\n    <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"n\">z₀</span> <span class=\"o\">:=</span> <span class=\"n\">Classical.choice</span> <span class=\"n\">hα</span>\n      <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"n\">z₀</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"n\">z₀</span><span class=\"bp\">|</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">not_nonempty_iff.mp</span> <span class=\"n\">hα</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">abs_sub_inf_le_sup</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n <span class=\"o\">(</span><span class=\"n\">fpos</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">gpos</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">BddAbove</span> <span class=\"o\">(</span><span class=\"n\">Set.range</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"bp\">-</span> <span class=\"n\">g</span><span class=\"bp\">|</span><span class=\"o\">)):</span>\n    <span class=\"bp\">|</span><span class=\"n\">iInf</span> <span class=\"n\">f</span> <span class=\"bp\">-</span> <span class=\"n\">iInf</span> <span class=\"n\">g</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">iSup</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"bp\">-</span> <span class=\"n\">g</span><span class=\"bp\">|</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">refine</span> <span class=\"n\">abs_le.mpr</span> <span class=\"o\">⟨</span><span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n    <span class=\"bp\">·</span> <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">inf_sub_sup_le_inf</span> <span class=\"n\">fpos</span> <span class=\"n\">gpos</span> <span class=\"n\">hb</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">abs_sub_comm</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n      <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">inf_sub_sup_le_inf</span> <span class=\"n\">gpos</span> <span class=\"n\">fpos</span> <span class=\"n\">hb</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 431690407,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1712424296
    },
    {
        "content": "<p>One obvious thing from your proof is that <code>BddBelow.sub</code> is missing; that would a be nice thing to PR (along with the <code>BddAbove</code> version)</p>",
        "id": 431698914,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712431044
    },
    {
        "content": "<p>Good point</p>",
        "id": 431699811,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1712431884
    },
    {
        "content": "<p>Here's how I'd clean things up a bit:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Pointwise</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">bddBelow_range</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Preorder</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">BddBelow</span> <span class=\"o\">(</span><span class=\"n\">Set.range</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">BddBelow</span><span class=\"o\">,</span> <span class=\"n\">Set.Nonempty</span><span class=\"o\">,</span> <span class=\"n\">mem_lowerBounds</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">BddBelow.range</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Preorder</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">BddBelow</span> <span class=\"o\">(</span><span class=\"n\">Set.range</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">bddBelow_range</span> <span class=\"n\">_</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">mpr</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">hf</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">BddBelow.sub</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddGroup</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">CovariantClass</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">≤</span> <span class=\"bp\">·</span><span class=\"o\">)]</span>\n    <span class=\"o\">[</span><span class=\"n\">CovariantClass</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">Function.swap</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"bp\">·</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">≤</span> <span class=\"bp\">·</span><span class=\"o\">)]</span>\n    <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">BddBelow</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">BddAbove</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">BddBelow</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">-</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">sub_eq_add_neg</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">hs.add</span> <span class=\"n\">ht.neg</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">inf_sub_sup_le_inf</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">fpos</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">gpos</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">BddAbove</span> <span class=\"o\">(</span><span class=\"n\">Set.range</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"bp\">-</span> <span class=\"n\">g</span><span class=\"bp\">|</span><span class=\"o\">)):</span>\n    <span class=\"n\">iInf</span> <span class=\"n\">g</span> <span class=\"bp\">-</span> <span class=\"n\">iSup</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"bp\">-</span> <span class=\"n\">g</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">iInf</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">isEmpty_or_nonempty</span> <span class=\"n\">α</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">iInf</span><span class=\"o\">,</span> <span class=\"n\">iSup</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">csInf_sub</span> <span class=\"o\">(</span><span class=\"n\">Set.range_nonempty</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hb</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">refine</span> <span class=\"n\">le_ciInf</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n    <span class=\"n\">refine</span> <span class=\"n\">csInf_le_of_le</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"bp\">|</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"bp\">.</span><span class=\"n\">sub</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">_</span> <span class=\"n\">gpos</span><span class=\"o\">)</span> <span class=\"n\">hb</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">Set.sub_mem_sub</span> <span class=\"o\">(</span><span class=\"n\">Set.mem_range_self</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Set.mem_range_self</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n    <span class=\"bp\">·</span> <span class=\"n\">nth_rewrite</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">abs_of_nonneg</span> <span class=\"o\">(</span><span class=\"n\">gpos</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">abs_sub_comm</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">]</span>\n      <span class=\"k\">calc</span>\n        <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"bp\">|</span><span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">|</span> <span class=\"o\">:=</span> <span class=\"n\">abs_sub_abs_le_abs_sub</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n        <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring_nf</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">abs_of_nonneg</span> <span class=\"o\">(</span><span class=\"n\">fpos</span> <span class=\"n\">x</span><span class=\"o\">)]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">_</span> <span class=\"n\">gpos</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">Set.range_nonempty</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 431700032,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712432148
    },
    {
        "content": "<p><code>rintro _ ⟨x, rfl⟩</code> is a great tool, but to get shorter proofs, you should avoid it until you're sure that there isn't already a useful lemma</p>",
        "id": 431700099,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712432187
    },
    {
        "content": "<p>In this case, you missed out on <code>Set.range_nonempty</code> and <code>Set.mem_range_self</code></p>",
        "id": 431700115,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712432207
    },
    {
        "content": "<p>What about this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Order.Pointwise</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Image</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Pointwise.Basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">Pointwise</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">abs_inf_dist_le_sup</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hα</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">fpos</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">gpos</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">BddAbove</span> <span class=\"o\">(</span><span class=\"n\">Set.range</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"bp\">-</span> <span class=\"n\">g</span><span class=\"bp\">|</span><span class=\"o\">)):</span>\n    <span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"bp\">⨅</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"bp\">⨅</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"bp\">⨆</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">set</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"bp\">⨆</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"bp\">|</span>\n  <span class=\"k\">have</span> <span class=\"n\">hC</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">le_ciSup</span> <span class=\"n\">hb</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">abs_sub_le_iff</span><span class=\"o\">,</span> <span class=\"n\">forall_and</span><span class=\"o\">,</span> <span class=\"n\">sub_le_iff_le_add</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hC</span> <span class=\"bp\">⊢</span>\n  <span class=\"k\">suffices</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">v</span> <span class=\"bp\">→</span>\n      <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">C</span> <span class=\"bp\">+</span> <span class=\"n\">v</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">⨅</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">C</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">⨅</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"k\">from</span>\n    <span class=\"o\">⟨</span><span class=\"n\">this</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">fpos</span> <span class=\"n\">gpos</span> <span class=\"n\">hC.1</span><span class=\"o\">,</span> <span class=\"n\">this</span> <span class=\"n\">g</span> <span class=\"n\">f</span> <span class=\"n\">gpos</span> <span class=\"n\">fpos</span> <span class=\"n\">hC.2</span><span class=\"o\">⟩</span>\n  <span class=\"n\">intro</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">upos</span> <span class=\"n\">vpos</span> <span class=\"n\">hC</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_ciInf</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">Set.forall_mem_range.mpr</span> <span class=\"n\">vpos</span><span class=\"o\">⟩]</span>\n  <span class=\"n\">refine</span> <span class=\"n\">ciInf_mono</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">Set.forall_mem_range.mpr</span> <span class=\"n\">upos</span><span class=\"o\">⟩</span> <span class=\"n\">hC</span>\n</code></pre></div>",
        "id": 431700696,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1712432749
    },
    {
        "content": "<p>Note that it gets even simpler if you assume directly that <code>f</code> and <code>g</code> are bounded below x)</p>",
        "id": 431700781,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1712432812
    },
    {
        "content": "<p>Thanks to the both of you</p>",
        "id": 431703498,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1712435356
    }
]