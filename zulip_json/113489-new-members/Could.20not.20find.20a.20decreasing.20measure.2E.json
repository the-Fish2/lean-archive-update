[
    {
        "content": "<p>I see what it's complaining about but I don't understand why <a href=\"https://github.com/leanprover/lean4/blob/6fce8f7d5cd18a4419bca7fd51780c71c9b1cc5a/src/Init/Data/List/Basic.lean#L594-L596\"><code>List.zipWith</code></a> doesn't have the same problem. How can I fix it?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">zipWithFill</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"n\">bs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"n\">bs</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">::</span><span class=\"n\">bs</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">zipWithFill</span> <span class=\"n\">f</span> <span class=\"n\">z</span> <span class=\"n\">as</span> <span class=\"n\">bs</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">zipWithFill</span> <span class=\"n\">f</span> <span class=\"n\">z</span> <span class=\"n\">as</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">::</span><span class=\"n\">bs</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">z</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">zipWithFill</span> <span class=\"n\">f</span> <span class=\"n\">z</span> <span class=\"o\">[]</span> <span class=\"n\">bs</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n<span class=\"n\">fail</span> <span class=\"n\">to</span> <span class=\"k\">show</span> <span class=\"n\">termination</span> <span class=\"n\">for</span>\n  <span class=\"n\">zipWithFill</span>\n<span class=\"k\">with</span> <span class=\"n\">errors</span>\n<span class=\"n\">argument</span> <span class=\"bp\">#</span><span class=\"mi\">4</span> <span class=\"n\">was</span> <span class=\"n\">not</span> <span class=\"n\">used</span> <span class=\"n\">for</span> <span class=\"n\">structural</span> <span class=\"n\">recursion</span>\n  <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">eliminate</span> <span class=\"n\">recursive</span> <span class=\"n\">application</span>\n    <span class=\"n\">zipWithFill</span> <span class=\"n\">f</span><span class=\"bp\">✝</span> <span class=\"n\">z</span> <span class=\"n\">as</span> <span class=\"n\">bs</span>\n\n<span class=\"n\">argument</span> <span class=\"bp\">#</span><span class=\"mi\">5</span> <span class=\"n\">was</span> <span class=\"n\">not</span> <span class=\"n\">used</span> <span class=\"n\">for</span> <span class=\"n\">structural</span> <span class=\"n\">recursion</span>\n  <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">eliminate</span> <span class=\"n\">recursive</span> <span class=\"n\">application</span>\n    <span class=\"n\">zipWithFill</span> <span class=\"n\">f</span><span class=\"bp\">✝</span> <span class=\"n\">z</span> <span class=\"n\">as</span> <span class=\"n\">bs</span>\n\n<span class=\"n\">structural</span> <span class=\"n\">recursion</span> <span class=\"n\">cannot</span> <span class=\"n\">be</span> <span class=\"n\">used</span>\n\n<span class=\"n\">Could</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"n\">a</span> <span class=\"n\">decreasing</span> <span class=\"n\">measure.</span>\n<span class=\"n\">The</span> <span class=\"n\">arguments</span> <span class=\"n\">relate</span> <span class=\"n\">at</span> <span class=\"n\">each</span> <span class=\"n\">recursive</span> <span class=\"n\">call</span> <span class=\"n\">as</span> <span class=\"n\">follows</span><span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">,</span> <span class=\"bp\">≤</span><span class=\"o\">,</span> <span class=\"bp\">=</span><span class=\"o\">:</span> <span class=\"n\">relation</span> <span class=\"n\">proved</span><span class=\"o\">,</span> <span class=\"bp\">?</span> <span class=\"n\">all</span> <span class=\"n\">proofs</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">proof</span> <span class=\"n\">attempted</span><span class=\"o\">)</span>\n             <span class=\"n\">as</span> <span class=\"n\">bs</span>\n<span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">147</span><span class=\"o\">:</span><span class=\"mi\">33</span><span class=\"bp\">-</span><span class=\"mi\">54</span>  <span class=\"bp\">?</span>  <span class=\"bp\">?</span>\n<span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"mi\">148</span><span class=\"o\">:</span><span class=\"mi\">29</span><span class=\"bp\">-</span><span class=\"mi\">50</span>  <span class=\"n\">_</span>  <span class=\"n\">_</span>\n<span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"mi\">149</span><span class=\"o\">:</span><span class=\"mi\">29</span><span class=\"bp\">-</span><span class=\"mi\">50</span>  <span class=\"n\">_</span>  <span class=\"n\">_</span>\n<span class=\"n\">Please</span> <span class=\"n\">use</span> <span class=\"bp\">`</span><span class=\"n\">termination_by</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">specify</span> <span class=\"n\">a</span> <span class=\"n\">decreasing</span> <span class=\"n\">measure.</span>\n</code></pre></div>",
        "id": 434850635,
        "sender_full_name": "Iocta",
        "timestamp": 1713821585
    },
    {
        "content": "<p>This seems to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">zipWithFill</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"n\">bs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"n\">bs</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">::</span><span class=\"n\">bs</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">zipWithFill</span> <span class=\"n\">f</span> <span class=\"n\">z</span> <span class=\"n\">as</span> <span class=\"n\">bs</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">zipWithFill</span> <span class=\"n\">f</span> <span class=\"n\">z</span> <span class=\"n\">as</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"n\">b</span><span class=\"o\">::</span><span class=\"n\">bs</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">z</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">zipWithFill</span> <span class=\"n\">f</span> <span class=\"n\">z</span> <span class=\"o\">[]</span> <span class=\"n\">bs</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n</code></pre></div>\n<p>There was a question just like this one a few minutes ago, I think.</p>",
        "id": 434853217,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1713822509
    }
]