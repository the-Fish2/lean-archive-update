[
    {
        "content": "<p>I've been working on compatible families of Galois representations and I seem to need the following two instances.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">NumberField</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">A</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsFractionRing</span> <span class=\"n\">A</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">B</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">A</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsScalarTower</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsScalarTower</span> <span class=\"n\">A</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">IsIntegralClosure</span> <span class=\"n\">B</span> <span class=\"n\">A</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">FiniteDimensional</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"c1\">-- standard AKLB setub</span>\n    <span class=\"o\">[</span><span class=\"n\">NumberField</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NumberField</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">IsIntegralClosure</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"n\">Ideal.IsMaximal</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"o\">((</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">⧸</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>It seems to me that I would get the first instance for free if I didn't pass to 𝓞 - notation (A would 'be' 𝓞 K and B would 'be' 𝓞 L and this instance is exactly an assumption in the AKLB setup) . However, I really would like to like to use this notation.</p>\n<p>In the second instance, IsMaximal can just be replaced with the hypothesis that P is non-zero, but it should be true nonetheless.</p>\n<p>exact? doesn't close either of these goals and I can't seem to find anything  in Mathlib that could help close these goals. Has anyone dealt with either of these before and could shed some light on this?</p>",
        "id": 429387615,
        "sender_full_name": "Ivan Farabella",
        "timestamp": 1711370951
    },
    {
        "content": "<p>The reason that <code>instance : IsIntegralClosure (𝓞 L) (𝓞 K) L := by sorry</code>is not as immediate as you are expecting is that <code>𝓞 L</code> is defined as <code>integralClosure ℤ L</code> (and similarly for <code>K</code>), so indeed there is something to prove, and I don't think it is in Mathlib.<br>\nRegarding the second instance, <span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> and I have formalized the local version <a href=\"https://github.com/mariainesdff/LocalClassFieldTheory/blob/master/LocalClassFieldTheory/DiscreteValuationRing/ResidueField.lean\">here</a>.</p>",
        "id": 429675988,
        "sender_full_name": "María Inés de Frutos Fernández",
        "timestamp": 1711465548
    },
    {
        "content": "<p>Thanks for your reply, I'll have a look into this</p>",
        "id": 429715801,
        "sender_full_name": "Ivan Farabella",
        "timestamp": 1711477811
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"638465\">Ivan Farabella</span> has marked this topic as resolved.</p>",
        "id": 429715818,
        "sender_full_name": "Notification Bot",
        "timestamp": 1711477817
    }
]