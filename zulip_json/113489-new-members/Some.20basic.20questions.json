[
    {
        "content": "<p>I'm working through Glimpse of Lean and I was a little surprised to see that this apparently works with the <code>by</code> removed:<br>\n<a href=\"/user_uploads/3121/FjJWx5sjGrE2fqH76edMCmX2/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/FjJWx5sjGrE2fqH76edMCmX2/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/FjJWx5sjGrE2fqH76edMCmX2/image.png\"></a></div>",
        "id": 412777770,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705204051
    },
    {
        "content": "<p>I had assumed so far that <code>by</code> is how you embed a tactic script into a term, akin to <code>ltac:</code> in coq, but evidently not?</p>",
        "id": 412777854,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705204118
    },
    {
        "content": "<p>The <code>calc</code> syntax works both in term mode and in tactic mode.</p>",
        "id": 412777877,
        "sender_full_name": "David Renshaw",
        "timestamp": 1705204156
    },
    {
        "content": "<p>Ahh</p>",
        "id": 412777890,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705204171
    },
    {
        "content": "<p>So if I put a <code>rw</code> there instead, it would syntax error at me?</p>",
        "id": 412777912,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705204197
    },
    {
        "content": "<p>cool, makes sense</p>",
        "id": 412778031,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705204291
    },
    {
        "content": "<p>How does subgoal focusing work?</p>",
        "id": 413231494,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705435957
    },
    {
        "content": "<p>I'm working thru Glimpse of Lean; it just had me use <code>apply</code> on something with two hypotheses, and it told me to just prove each of them one after another inline</p>",
        "id": 413231584,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705436004
    },
    {
        "content": "<p>in coq i would be able to use bullets to focus on them one by one, but lean is yelling at me if i try to use a bullet</p>",
        "id": 413231617,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705436019
    },
    {
        "content": "<p>What exactly does a bullet do in lean, then, and how do I organize a proof after applying something with multiple hypotheses, if not with bullets?</p>",
        "id": 413231684,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705436043
    },
    {
        "content": "<p>You can use <code>·</code> for focusing on goals in Lean. Be sure it's the correct dot, there are a number of unicode variants. This one is <code>\\.</code> in VS Code.</p>",
        "id": 413231915,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705436141
    },
    {
        "content": "<p>oh wait i see the problem</p>",
        "id": 413232002,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705436165
    },
    {
        "content": "<p>There's also using</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">next</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">tac1</span>\n  <span class=\"n\">tac2</span>\n</code></pre></div>\n<p>for focusing. It's the same, but <code>next</code> lets you name inaccessible variables at the same time.</p>",
        "id": 413232043,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705436187
    },
    {
        "content": "<p>i tried to put a bullet before the next line and it was actually yelling at me for not having indented the line after yet, but i thought it was yelling at me for the bullet itself because that's where it put the red gunk</p>",
        "id": 413232064,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705436200
    },
    {
        "content": "<p>not used to whitespace sensitivity in my proof assistant</p>",
        "id": 413232092,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705436213
    },
    {
        "content": "<p>okay that makes more sense lol</p>",
        "id": 413232136,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705436236
    },
    {
        "content": "<p>btw, glimpse of lean formats some of its proofs like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>which seems excessive to me when</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"k\">calc</span>\n  <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n  <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>works. is the former actually considered idiomatic over the latter?</p>",
        "id": 413232546,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705436394
    },
    {
        "content": "<p>or is it just trying to avoid confusing readers as to whether you always need a <code>by {}</code></p>",
        "id": 413232649,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705436436
    },
    {
        "content": "<p>I believe the point is that with the <code>{}</code> around you get unsolved goals errors on the <code>}</code>, not on the <code>by</code> (which beginners find <em>very</em> confusing)</p>",
        "id": 413232776,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705436516
    },
    {
        "content": "<p><del>I suspect that the <code>by</code> really does change things. The proofs you fill in on the various lines will be expecting terms without the <code>by</code> and tactics with the <code>by</code>.</del> (edit: I just tried this and as Yael says below this is not true)</p>",
        "id": 413232790,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705436522
    },
    {
        "content": "<p>Yaël's said the reason for <code>by { ... }</code>. It puts the error in a place that someone first learning Lean might notice it.</p>",
        "id": 413232911,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705436573
    },
    {
        "content": "<p>In general, yes, but here term-mode <code>calc</code> and tactic mode <code>calc</code> should leave you the same kinds of holes.</p>",
        "id": 413232916,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705436579
    },
    {
        "content": "<p>But also, you need the <code>by</code> to go into tactic mode. Pedagogically it's easier to stay in the realm of tactics than to discuss terms vs tactics. Plus, in your example, the <code>:= _</code>'s cause new goals in the tactic version. That's not allowed in the term version.</p>",
        "id": 413232973,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705436620
    },
    {
        "content": "<p>Another fix for the \"error in a weird place\" which I'm experimenting with in my course this year is to encourage students to end all proofs with <code>done</code></p>",
        "id": 413232984,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705436624
    },
    {
        "content": "<p>my question though is basically just, in actual lean code do people stylistically tend to bother with the redundant <code>do {}</code> around proofs that are just a single <code>calc</code></p>",
        "id": 413233117,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705436677
    },
    {
        "content": "<p>huh, what do you mean about causing new goals</p>",
        "id": 413233152,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705436695
    },
    {
        "content": "<p>You see that there's an error in your <code>foo</code> example without the <code>by</code> right?</p>\n<p>Though to get new goals with <code>by</code> you have to use <code>?_</code> instead of <code>_</code>, otherwise it gives a similar error.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"c1\">-- Two goals:</span>\n  <span class=\"gr\">sorry</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 413233377,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705436803
    },
    {
        "content": "<p>is it like, in the term version lean needs to be able to individually automatically—yeah alright</p>",
        "id": 413233413,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705436823
    },
    {
        "content": "<p>i was actually also wondering what the distinction between _ and ?_ is</p>",
        "id": 413233442,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705436838
    },
    {
        "content": "<p>does _ ask for the elaborator to fill a hole and ?_ spawns a new goal?</p>",
        "id": 413233476,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705436853
    },
    {
        "content": "<p>The <code>calc ...</code> tactic is short for <code>refine calc ...</code>, and in <code>refine</code>, each <code>?a</code> or <code>?_</code> turns into a new goal.</p>",
        "id": 413233491,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705436863
    },
    {
        "content": "<p>Yes, <code>_</code> placeholders need to be solvable by unification.</p>",
        "id": 413233518,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705436880
    },
    {
        "content": "<p>so you can't use ?_ outside of a tactic script then</p>",
        "id": 413233593,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705436901
    },
    {
        "content": "<p>actually wait</p>",
        "id": 413233608,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705436910
    },
    {
        "content": "<p>right, they aren't even the same type are they</p>",
        "id": 413233617,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705436916
    },
    {
        "content": "<p>actually hold on</p>",
        "id": 413233655,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705436937
    },
    {
        "content": "<p>Right, <code>?_</code> is an interactive thing. If you're in term mode then you'd better be writing the term in full.</p>",
        "id": 413233725,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705436962
    },
    {
        "content": "<p>so—you can use either _ or ?_ as a <em>tactic</em> and you can use either _ or ?_ as a <em>term</em>, but you can only use ?_ as a term if the superterm it's part of is in a <code>refine</code>, i'm guessing?</p>",
        "id": 413233780,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705436990
    },
    {
        "content": "<p>what's the difference between _ and ?_ as <em>tactics</em>, though?</p>",
        "id": 413233862,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705437009
    },
    {
        "content": "<p><code>refine</code> is a tactic but it will consume <code>?_</code> and give you a new goal (still in tactic mode)</p>",
        "id": 413233876,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705437018
    },
    {
        "content": "<p>oh wait no i'm confused again</p>",
        "id": 413233887,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705437022
    },
    {
        "content": "<p>one moment, let me look at this code again lol</p>",
        "id": 413233920,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705437041
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"679868\">sarahzrf</span> <a href=\"#narrow/stream/113489-new-members/topic/Some.20basic.20questions/near/413233117\">said</a>:</p>\n<blockquote>\n<p>my question though is basically just, in actual lean code do people stylistically tend to bother with the redundant <code>do {}</code> around proofs that are just a single <code>calc</code></p>\n</blockquote>\n<p>In actual lean code there is no <code>{}</code> at all. This is purely a beginner thing.</p>",
        "id": 413233977,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1705437068
    },
    {
        "content": "<p>At risk of confusing you, you can do some really weird things with these <code>?x</code> metavariables outside of tactics (nobody does this; it's not good practice). If you stick with the un-named version <code>?_</code> then I'm not sure there's anything you can do with them outside of tactics.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"bp\">?</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">foo</span>\n<span class=\"sd\">/--</span>\n<span class=\"sd\">theorem foo : ℕ = ℕ :=</span>\n<span class=\"sd\">rfl</span>\n<span class=\"sd\">-/</span>\n</code></pre></div>",
        "id": 413234220,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705437155
    },
    {
        "content": "<p>this makes perfect sense kyle</p>",
        "id": 413234353,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705437223
    },
    {
        "content": "<p>well i'm maybe a tiny bit surprised that actually typechecks lol</p>",
        "id": 413234433,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705437252
    },
    {
        "content": "<p>so okay hold on</p>",
        "id": 413234584,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705437318
    },
    {
        "content": "<p>something i was going to ask about was a kind of like. scoping thing—</p>",
        "id": 413234602,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705437330
    },
    {
        "content": "<p>like, if you're in the middle of a proof script and then you write a term in the middle there that contains a <code>by</code> and then somewhere in that <code>by</code> you write a term that contains a <code>?_</code>, which tactic script gets the goal</p>",
        "id": 413234705,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705437372
    },
    {
        "content": "<p>But i was asking this under the impression that metavariables sort of did not exist in the term language ordinarily unless you were in a proof context. But tbh i probably shouldve expected that they did, coq works that way too</p>",
        "id": 413234779,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705437416
    },
    {
        "content": "<p>Um. Hm</p>",
        "id": 413234788,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705437421
    },
    {
        "content": "<p>My question still kinda stands though, now that I think about it</p>",
        "id": 413234801,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705437428
    },
    {
        "content": "<p>Do we have a kind of situation where metavariables and goals are sort of the same thing or what</p>",
        "id": 413234819,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705437439
    },
    {
        "content": "<p>After a <code>by</code> you are in tactic mode so you don't write a term, you write a tactic.</p>",
        "id": 413234934,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705437487
    },
    {
        "content": "<p>yes, i know, tactics often have terms as arguments</p>",
        "id": 413234953,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705437500
    },
    {
        "content": "<p>i elided a step</p>",
        "id": 413234975,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705437513
    },
    {
        "content": "<p>Right, like <code>refine</code>. So if you are in tactic mode and write <code>refine \\&lt;?_, ?_\\&gt;</code> and this makes sense then you're still in tactic mode but now you have two goals, and most tactics will just apply to the first goal, but the universe has split into two at this point.</p>",
        "id": 413235118,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705437587
    },
    {
        "content": "<p>and if you were lucky enough to have a metavariable around when the universe split into two then you can do some wacky things like assigning it in one universe and having it magically be assigned in the other universe.</p>",
        "id": 413235296,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705437669
    },
    {
        "content": "<p>i understand that</p>",
        "id": 413235346,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705437697
    },
    {
        "content": "<p>let me write down an example of what i meant</p>",
        "id": 413235360,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705437703
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"679868\">sarahzrf</span> <a href=\"#narrow/stream/113489-new-members/topic/Some.20basic.20questions/near/413234819\">said</a>:</p>\n<blockquote>\n<p>Do we have a kind of situation where metavariables and goals are sort of the same thing or what</p>\n</blockquote>\n<p>They are exactly the same thing. Metavariables that are meant to be goals are also marked as being \"synthetic opaque\" (\"synthetic\" as in something will solve for them, namely the user). Generally, unification avoids solving for these and will even throw an error if anything tries to (hence \"opaque\" I guess). Goal metavariables are also recorded in a list of goals in the tactic state. It's up to tactics to remember to add lingering goal metavariables to this list of goals.</p>",
        "id": 413235507,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705437762
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">blah</span> <span class=\"n\">blah</span>\n<span class=\"n\">blah</span>\n<span class=\"n\">refine</span> <span class=\"bp\">\\&lt;</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">refine</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> you are here -/</span>\n  <span class=\"o\">}</span><span class=\"bp\">\\&gt;</span>\n</code></pre></div>",
        "id": 413235635,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705437828
    },
    {
        "content": "<p>presumably at the marked point we get to refine the <code>?_</code> hole</p>",
        "id": 413235728,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705437856
    },
    {
        "content": "<p>But say we put no more tactics there and instead skipped to the end of what i've written so far</p>",
        "id": 413235762,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705437873
    },
    {
        "content": "<p>If we focused there, would we also from there get to refine the <code>?_</code> hole?</p>",
        "id": 413235793,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705437884
    },
    {
        "content": "<p>Or is there some kind of scoping going on?</p>",
        "id": 413235822,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705437891
    },
    {
        "content": "<p>The list of goals is \"scoped\" to the current tactic block, and a tactic block requires that all lingering goals in its goal list be solved for.</p>",
        "id": 413235826,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705437894
    },
    {
        "content": "<p>perfect, thank you</p>",
        "id": 413235865,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705437913
    },
    {
        "content": "<p>Potentially you could circumvent this and get <code>refine</code> to capture lingering goals, but it would take a hack, or perhaps a new tactic that's just for doing this.</p>",
        "id": 413235892,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705437925
    },
    {
        "content": "<p>Yeah, this can be done:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"k\">in</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"defer_all\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">setGoals</span> <span class=\"o\">[]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨(</span><span class=\"kd\">by</span> <span class=\"n\">refine</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"bp\">;</span> <span class=\"n\">defer_all</span><span class=\"o\">),</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  case refine_1</span>\n<span class=\"cm\">  ⊢ 1 + ?refine_2 = 1 + ?refine_2</span>\n\n<span class=\"cm\">  case refine_2</span>\n<span class=\"cm\">  ⊢ ℕ</span>\n<span class=\"cm\">  -/</span>\n</code></pre></div>",
        "id": 413236393,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705438127
    },
    {
        "content": "<p>(<code>refine</code> works by walking through the expression it's given, collecting all <code>?_</code> metavariables, and adding them to the list of goals)</p>",
        "id": 413236453,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705438160
    },
    {
        "content": "<p>yea, coq has a <code>refine</code> tactic too</p>",
        "id": 413236597,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705438211
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"679868\">sarahzrf</span> <a href=\"#narrow/stream/113489-new-members/topic/Some.20basic.20questions/near/413234779\">said</a>:</p>\n<blockquote>\n<p>But i was asking this under the impression that metavariables sort of did not exist in the term language ordinarily unless you were in a proof context. But tbh i probably shouldve expected that they did, coq works that way too</p>\n</blockquote>\n<p>You are right that completed terms do not have metavariables, but metavariables are essential to both elaboration and tactic execution, and they're part of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Expr#doc\">docs#Lean.Expr</a> -- it's just that the kernel throws an exception if it ever encounters an <code>Expr.mvar</code>.</p>",
        "id": 413236732,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705438280
    },
    {
        "content": "<p>Although coq's <code>refine</code> doesnt have a way of distinguishing between goal holes and should-be-solved-by-the-elaborator holes, which can be awkward</p>",
        "id": 413236780,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705438305
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Some.20basic.20questions/near/413236732\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"679868\">sarahzrf</span> <a href=\"#narrow/stream/113489-new-members/topic/Some.20basic.20questions/near/413234779\">said</a>:</p>\n<blockquote>\n<p>But i was asking this under the impression that metavariables sort of did not exist in the term language ordinarily unless you were in a proof context. But tbh i probably shouldve expected that they did, coq works that way too</p>\n</blockquote>\n<p>You are right that completed terms do not have metavariables, but metavariables are essential to both elaboration and tactic execution, and they're part of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Expr#doc\">docs#Lean.Expr</a> -- it's just that the kernel throws an exception if it ever encounters an <code>Expr.mvar</code>.</p>\n</blockquote>\n<p><span aria-label=\"thought\" class=\"emoji emoji-1f4ad\" role=\"img\" title=\"thought\">:thought:</span> what does this mean semantically...</p>",
        "id": 413236882,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705438336
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"679868\">sarahzrf</span> <a href=\"#narrow/stream/113489-new-members/topic/Some.20basic.20questions/near/413236780\">said</a>:</p>\n<blockquote>\n<p>Although coq's <code>refine</code> doesnt have a way of distinguishing between goal holes and should-be-solved-by-the-elaborator holes, which can be awkward</p>\n</blockquote>\n<p>Yeah, it could be awkward in Lean 3 also, which didn't have this distinction either.</p>",
        "id": 413236998,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705438391
    },
    {
        "content": "<p>entirely too many times ive tried to <code>refine</code> in coq and ended up with like 5 random typeclass instances as goals <span aria-label=\"sob\" class=\"emoji emoji-1f62d\" role=\"img\" title=\"sob\">:sob:</span></p>",
        "id": 413237051,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705438420
    },
    {
        "content": "<p>Lean 4 has <code>refine'</code> to relive the Lean 3 days. This can be useful sometimes.</p>",
        "id": 413237166,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705438458
    },
    {
        "content": "<p>Though the way typeclass instances are synthesized, I think you never end up with unsolved instance goals with <code>refine</code>/<code>refine'</code>.</p>",
        "id": 413237268,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705438509
    },
    {
        "content": "<p>coq's typeclass machinery is extremely fucking funny</p>",
        "id": 413237362,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705438557
    },
    {
        "content": "<p>You can put arbitrary tactic scripts into it</p>",
        "id": 413237431,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705438577
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"679868\">sarahzrf</span> <a href=\"#narrow/stream/113489-new-members/topic/Some.20basic.20questions/near/413236882\">said</a>:</p>\n<blockquote>\n<p><span aria-label=\"thought\" class=\"emoji emoji-1f4ad\" role=\"img\" title=\"thought\">:thought:</span> what does this mean semantically...</p>\n</blockquote>\n<p>I'm not sure what the question is exactly, but I'll say a few things. We've got the elaborator and the kernel, and the kernel uses the same <code>Lean.Expr</code> as the elaborator, but it's effectively using the subtype of <code>Lean.Expr</code> that does not contain the <code>Lean.Expr.mvar</code> constructor, which is used for metavariables. The elaborator needs metavariables to handle implicit arguments, typeclass instance arguments, tactic blocks, etc. etc.</p>",
        "id": 413237603,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705438666
    },
    {
        "content": "<p>yeah i followed that, i wasnt asking a specific question, the pl part of my brain just caught on what you said and reflexively started Wondering Things</p>",
        "id": 413237764,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705438725
    },
    {
        "content": "<p>thought bubble emoji indicated idle curiosity</p>",
        "id": 413237792,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705438739
    },
    {
        "content": "<p>very much a tangent</p>",
        "id": 413237990,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705438808
    },
    {
        "content": "<p>anyway i should probably get back to learning the basics. lol</p>",
        "id": 413238038,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705438833
    },
    {
        "content": "<p>So let's not get started on how <code>refine fun x =&gt; ?_</code> manages to create a goal state with an extra <code>x</code> variable in its local context, at the level of terms :-)</p>",
        "id": 413238460,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705439000
    },
    {
        "content": "<p>what exactly is problematic there?</p>",
        "id": 413238731,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705439117
    },
    {
        "content": "<p>huhhh, you can rewrite by iffs... is this accomplished thru setoidy mechanisms or is it just propext?</p>",
        "id": 413239109,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705439300
    },
    {
        "content": "<p>propext</p>",
        "id": 413239178,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705439335
    },
    {
        "content": "<p>You can use <code>by?</code> to see the term a tactic produced by the way.</p>",
        "id": 413239201,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705439348
    },
    {
        "content": "<p><span aria-label=\"rolling eyes\" class=\"emoji emoji-1f644\" role=\"img\" title=\"rolling eyes\">:rolling_eyes:</span> typical cheaters</p>",
        "id": 413239211,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705439354
    },
    {
        "content": "<p>or use the <code>show_term</code> tactic, which has the syntax <code>show_term *tactic*</code></p>",
        "id": 413239219,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705439358
    },
    {
        "content": "<p>It's not cheating if we want <code>Prop</code> to be equivalent to <code>Bool</code>, right?</p>",
        "id": 413239379,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705439418
    },
    {
        "content": "<p>u dont even have computational behavior for ur system. ur cheating. ur just positing new terms willy nilly &amp; violating the harmony of introduction and elimination forms</p>",
        "id": 413239449,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705439451
    },
    {
        "content": "<p>it makes me sick</p>",
        "id": 413239453,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705439454
    },
    {
        "content": "<p>on the other hand. wow is it convenient. hmmm</p>",
        "id": 413239518,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705439488
    },
    {
        "content": "<p>hmm, this example in Glimpse of Lean is using <code>have</code> and then immediately <code>rw</code>ing by the thing we had. is there no tactic for doing this? in coq for example you can say <code>replace foo with bar by tactic</code> where <code>tactic</code> proves <code>foo = bar</code></p>",
        "id": 413239969,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705439681
    },
    {
        "content": "<p><code>obtain rfl : foo = bar := by tactic</code> will do (assuming <code>foo</code> is a variable)</p>",
        "id": 413240178,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705439781
    },
    {
        "content": "<p>well, the two sides arent identifiers, <code>foo</code> and <code>bar</code> were metavariables and not variables there :P</p>",
        "id": 413240276,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705439829
    },
    {
        "content": "<p>i wouldve written <code>x</code> and <code>y</code> if i had variables in mind</p>",
        "id": 413240339,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705439863
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">conv</span> <span class=\"k\">in</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">equals</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"c1\">-- 1 + c = d</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 413240947,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705440118
    },
    {
        "content": "<p>i have no idea what <code>=&gt;</code>, <code>conv</code>, or <code>equals</code> are doing here sorry lol</p>",
        "id": 413241089,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705440166
    },
    {
        "content": "<p>It's doing <code>replace a + b with 1 by admit</code></p>",
        "id": 413241193,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705440214
    },
    {
        "content": "<p>well i can see that, i just mean i dont understand enough lean for this to teach me something</p>",
        "id": 413241246,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705440234
    },
    {
        "content": "<p>Like, i dont understand the pieces yet so this is not showing me a way to put them together</p>",
        "id": 413241324,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705440249
    },
    {
        "content": "<p>I imagine you've learned that Lean has an analogue? You don't need to understand the pieces to be able to use it.</p>",
        "id": 413241446,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705440300
    },
    {
        "content": "<p>If I gave you a single tactic to do it, you probably wouldn't be complaining that you don't know how it's implemented <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 413241536,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705440341
    },
    {
        "content": "<p>well, i dont like using things without understanding how they work</p>",
        "id": 413241539,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705440342
    },
    {
        "content": "<p>eh, true</p>",
        "id": 413241555,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705440352
    },
    {
        "content": "<p>wait, you can use <code>calc</code> with a chain of multiple relations?</p>",
        "id": 413245340,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705441999
    },
    {
        "content": "<p>that's cool</p>",
        "id": 413245368,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705442013
    },
    {
        "content": "<p>what is the typeclsas underlying it exactly?</p>",
        "id": 413245381,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705442021
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"679868\">@sarahzrf</span> you are very welcome here, but you should know that you are not at all in the intended audience of the Glimpse of Lean tutorial. It may be very frustrating for you to keep going in this direction. You will probably have more fun with <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/\">#tpil</a>.</p>",
        "id": 415381939,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1705447069
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/Some.20basic.20questions/near/415381939\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"679868\">sarahzrf</span> you are very welcome here, but you should know that you are not at all in the intended audience of the Glimpse of Lean tutorial. It may be very frustrating for you to keep going in this direction. You will probably have more fun with <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/\">#tpil</a>.</p>\n</blockquote>\n<p>i saw tpil first and quite frankly it looks <em>more</em> frustrating to me, i dont need concepts like \"terms have types\" explained to me lol</p>",
        "id": 415382657,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705447361
    },
    {
        "content": "<p>i decided glimpse of lean looks nice because at least it's actually all code so i can skip directly to learning what the syntax is like</p>",
        "id": 415382720,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705447392
    },
    {
        "content": "<p>I see your point, but I'm still worried Glimpse of Lean won't answer a lot of your questions. It is really meant for people who are not interested in type theory.</p>",
        "id": 415385227,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1705448422
    },
    {
        "content": "<p>i mean, i dont <em>need</em> type theory explained for me, i only need <em>lean</em> explained to me</p>",
        "id": 415385487,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705448545
    },
    {
        "content": "<p>I think Patrick would also include more generally \"people who are immediately interested in low-level aspects of Lean\".</p>\n<p><span class=\"user-mention silent\" data-user-id=\"679868\">sarahzrf</span> <a href=\"#narrow/stream/113489-new-members/topic/Some.20basic.20questions/near/415382657\">said</a>:</p>\n<blockquote>\n<p>i saw tpil first and quite frankly it looks <em>more</em> frustrating to me, i dont need concepts like \"terms have types\" explained to me lol</p>\n</blockquote>\n<p>I don't really understand the issue, or what's funny about a book not being aware of what you personally already know -- here's a friendly reminder that you can skip content that you're familiar with <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> (Of course, carry on with Glimpse of Lean if you're happy enough with it.)</p>",
        "id": 415388014,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705449720
    },
    {
        "content": "<p>well, i was using that as one example of a more general issue, which is that tpil spends a lot of time actually explaining the concepts underlying lean. which is a good thing! but in my case it's irrelevant to me and means i have to skim heavily, because i already know the vast majority of those concepts. i'd really only be reading it for the code samples</p>",
        "id": 415388530,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705449938
    },
    {
        "content": "<p>the \"lol\" wasnt meant to indicate that i found something funny per se, its almost more like a tone particle in function, idk. i can speak less casually if you like</p>",
        "id": 415388972,
        "sender_full_name": "sarahzrf",
        "timestamp": 1705450165
    },
    {
        "content": "<p>I wouldn't want this place to be devoid of character, and there's room for a casual tone, but it's worth being aware that it tends to be more professional here than maybe other forums. Generally communication tends to be more functional than conversational, but that's just a tendency, not a rule. I don't want to put any damper on your excitement learning Lean or feeling like you can hang out here to discuss or ask questions about Lean.</p>\n<p>For me, I started back in the Lean 3 days, going through Kevin Buzzards NNG and then a Patrick Massot's tutorial, and from there I relied on my past experience with functional programming (including some Agda), consulted the Lean 3 reference manual, and hung out here picking up things from what people were talking about. Oh, I had also opened up the HoTT book a few times, if that counts for anything. I think it's fair using whatever materials speak to you; I myself have only read <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/\">#tpil</a> randomly, skimming chapters here and there. My first question on the Zulip was about a frustrating non-beta-reduced lambda that was hidden because of the pretty printer, which I could deduce because I knew lambda calculus, and because I was following a math-oriented tutorial I didn't have the tools to deal with it. (An answer is <code>dsimp only</code> by the way.)</p>",
        "id": 415398201,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705453963
    },
    {
        "content": "<p>Does Lean have some kind of command that searches the types of all loaded definitions for a given subterm? For example, is there some way of saying something like<br>\n<code>#search _ + (_ + _) = (_ + _) + _</code><br>\nto look for associativity theorems about <code>+</code>?</p>",
        "id": 417972143,
        "sender_full_name": "sarahzrf",
        "timestamp": 1706134058
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span>  _ + (_ + _) = (_ + _) + _</p>\n<p>Let's see this!</p>",
        "id": 417972545,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706134224
    },
    {
        "content": "<p>Is there something that works from inside a Lean session?</p>",
        "id": 417972596,
        "sender_full_name": "sarahzrf",
        "timestamp": 1706134246
    },
    {
        "content": "<p>Failure! Bot is unavailable</p>",
        "id": 417972597,
        "sender_full_name": "loogle",
        "timestamp": 1706134246
    },
    {
        "content": "<p>Maybe <code>#find</code>?</p>",
        "id": 417972664,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706134283
    },
    {
        "content": "<p>How do I use <code>#find</code>?</p>",
        "id": 417972815,
        "sender_full_name": "sarahzrf",
        "timestamp": 1706134339
    },
    {
        "content": "<p>(I never used it, though.)</p>",
        "id": 417972829,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706134344
    },
    {
        "content": "<p>If you've imported some of mathlib it should just work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Sqrt</span> <span class=\"c1\">-- or whatever</span>\n\n<span class=\"bp\">#</span><span class=\"n\">find</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">?</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">List</span> <span class=\"bp\">?</span><span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">List</span> <span class=\"bp\">?</span><span class=\"n\">b</span> <span class=\"c1\">-- finds List.map and some other stuff</span>\n</code></pre></div>\n<p>See examples at <a href=\"https://loogle.lean-lang.org/\">https://loogle.lean-lang.org/</a></p>",
        "id": 417981591,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706138974
    },
    {
        "content": "<p>Cool</p>",
        "id": 417981763,
        "sender_full_name": "sarahzrf",
        "timestamp": 1706139056
    },
    {
        "content": "<p>Is there a way to do an AND?</p>",
        "id": 417981776,
        "sender_full_name": "sarahzrf",
        "timestamp": 1706139063
    },
    {
        "content": "<p>for example, if i want to search for a theorem that includes both <code>Continuous ?f</code> and <code>Monotone ?f</code> in its statement</p>",
        "id": 417981842,
        "sender_full_name": "sarahzrf",
        "timestamp": 1706139119
    },
    {
        "content": "<p>Also: I see that Lean has sections and section variables. Does it have full-on ML-style modules?</p>",
        "id": 417983455,
        "sender_full_name": "sarahzrf",
        "timestamp": 1706140259
    },
    {
        "content": "<p>My understanding is</p>\n<ol>\n<li>in Lean terminology, a \"module\" = \"file\" = \"compilation unit\"</li>\n<li>Lean also has namespaces, which are orthogonal to modules</li>\n<li>Lean does <em>not</em> have ML-style modules/functors, but can support a lot of the same patterns via dependent types</li>\n</ol>",
        "id": 417988320,
        "sender_full_name": "David Renshaw",
        "timestamp": 1706143321
    },
    {
        "content": "<p>how do i declare a class instance <code>variable</code></p>",
        "id": 417998948,
        "sender_full_name": "sarahzrf",
        "timestamp": 1706150452
    },
    {
        "content": "<p>i wrote <code>variable (C : Type) [Category C]</code> and it's complaining</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">binder</span> <span class=\"n\">annotation</span><span class=\"o\">,</span> <span class=\"n\">type</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.1425</span>\n<span class=\"n\">use</span> <span class=\"n\">the</span> <span class=\"n\">command</span> <span class=\"bp\">`</span><span class=\"kd\">set_option</span> <span class=\"n\">checkBinderAnnotations</span> <span class=\"n\">false</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">disable</span> <span class=\"n\">the</span> <span class=\"n\">check</span>\n</code></pre></div>",
        "id": 417998976,
        "sender_full_name": "sarahzrf",
        "timestamp": 1706150473
    },
    {
        "content": "<p>If you mean mathematical categories then maybe you want <code>open CategoryTheory</code>somewhere</p>",
        "id": 418021022,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706167270
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Category#doc\">docs#Category</a></p>",
        "id": 418021036,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706167280
    },
    {
        "content": "<p>Difficult to tell without a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 418021146,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706167326
    },
    {
        "content": "<p>Ah yes, the issue was that it was <code>Category</code> and not <code>CategoryTheory.Category</code></p>",
        "id": 418021187,
        "sender_full_name": "sarahzrf",
        "timestamp": 1706167354
    },
    {
        "content": "<p>Why isn't the error that <code>Category</code> doesn't exist, then?</p>",
        "id": 418021281,
        "sender_full_name": "sarahzrf",
        "timestamp": 1706167403
    },
    {
        "content": "<p>Do you get a better error with <code>set_option autoImplicit false</code>? If so, see <a href=\"https://lean-lang.org/lean4/doc/autobound.html\">https://lean-lang.org/lean4/doc/autobound.html</a></p>",
        "id": 418021705,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1706167629
    },
    {
        "content": "<p><code>#set_option autoImplicit false</code> gives an error, but oddly enough it does result in a better error message anyway</p>",
        "id": 418022115,
        "sender_full_name": "sarahzrf",
        "timestamp": 1706167882
    },
    {
        "content": "<p>Hm, <code>Category</code> isn't a lowercase letter or Greek, so why is that link relevant?</p>",
        "id": 418022250,
        "sender_full_name": "sarahzrf",
        "timestamp": 1706167976
    },
    {
        "content": "<p>It really is <code>set_option</code> without the <code>#</code>. You can disable auto implicits for non-single-character identifiers with <code>set_option relaxedAutoImplicit false</code>, I think. The single-letter restriction was relaxed after the manual was written, I think (<a href=\"https://github.com/leanprover/lean4/pull/1011\">lean4#1011</a>).</p>",
        "id": 418022759,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1706168286
    },
    {
        "content": "<p>LSP should highlight autoimplicits differently but it can be a bit subtle. There are some threads here in Zulip containing tweaks to the color scheme.</p>",
        "id": 418023030,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1706168410
    },
    {
        "content": "<p>There's this great footgun switched on in lean by default which goes \"if the user makes a typo, just create a new type called that and press on\".</p>",
        "id": 418040012,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706175376
    },
    {
        "content": "<p>Once you're aware of it it's great. When you're not, it's as confusing as hell</p>",
        "id": 418040123,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706175414
    }
]