[
    {
        "content": "<p>Hello!<br>\nHow can one do an induction over a finite set, say <code>1  ≤ m ≤ n</code>for a fixed <code>n : ℕ</code>?<br>\nI could take <code>m</code> and impose <code>m ≤ n</code>, but is there a canonical way? Specifically, I would like to prove the following.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">|</span> <span class=\"n\">l.1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">i.1</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">toFinset</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"n\">i</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">ℝ</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">|</span> <span class=\"n\">l.1</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">toFinset</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">|</span> <span class=\"n\">l.1</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">toFinset</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">m</span> <span class=\"k\">with</span> <span class=\"n\">m</span> <span class=\"n\">ihm</span>\n  <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 432865525,
        "sender_full_name": "Yoh Tanimoto",
        "timestamp": 1712913859
    },
    {
        "content": "<p>My first thought on seeing this question is that you have a natural subtraction m-1 in it which is always going to make your life harder. Are you sure that your m shouldn't be renumbered so it's m+1? My second thought is that the Fin n's are also probably making your life more difficult. Are you sure you can't just have functions g indexed by the naturals (for example taking junk values like 0 for indices bigger than n)? Then you can replace Fin n with Nat and use Finset.range m with all its API instead of this finite subset of a finite type stuff. In short, I'm wondering whether you're asking the right question. Why do you need this? There might be a better way to set things up.</p>",
        "id": 432867564,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1712914693
    },
    {
        "content": "<p>Thank you for your reply!</p>\n<ul>\n<li>that is absolutely true, I should renumber m to m+1.</li>\n<li>I think filling the indices bigger than n is not very convenient, because this lemma will be used to show the finite subadditivity of Riesz content <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/MeasureTheory/Integral/RieszMarkovKakutani.html#rieszContentAux\">rieszContentAux</a> , but I am using the definition of Rudin (for an open V it is sup {Λ f} where supp f ⊆ V and 0  ≤ f x  ≤ 1).</li>\n<li>this specific lemma is a part of the following generalization of <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/UrysohnsLemma.html#exists_continuous_zero_one_of_isClosed\">Urysohn's lemma</a>.</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span> <span class=\"n\">Function</span> <span class=\"n\">Set</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">exists_forall_tsupport_iUnion_one_iUnion_of_isOpen_isClosed</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormalSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">T2Space</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">LocallyCompactSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">IsOpen</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">IsClosed</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">htcp</span> <span class=\"o\">:</span> <span class=\"n\">IsCompact</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hst</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">⊆</span> <span class=\"bp\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">tsupport</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">EqOn</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"n\">t</span>\n    <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Icc</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 432903607,
        "sender_full_name": "Yoh Tanimoto",
        "timestamp": 1712928382
    }
]