[
    {
        "content": "<p>I have a use of the pattern <code>conv in (\\Gamma { val := (_ : Nat), property := _ }) =&gt; skip;</code>to identify if pattern arises. The only behavior is expect that the tactic does nothing if the pattern exists and fails if the pattern does not exist. However, for some simple pattern the tactic also solves the proof-state which is undesirable to me. Does anyone have an idea how to avoid this?</p>\n<p>The reason I use this tactic is that I try to guard a call to <code>generalize \\Gamma { val := _, property := _ } = e;</code> which does not fail in case the pattern cannot be matched, but instead just introduces a new meta variable. An alternative solution for me would be something that makes generalize fail if a pattern cannot be found.</p>",
        "id": 432918099,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1712932645
    },
    {
        "content": "<p>Right now, <code>conv</code> tries <code>rfl</code>, but in the next release of Lean, <span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> made it so that <code>conv</code> will use just reducible <code>rfl</code> (<a href=\"https://github.com/leanprover/lean4/pull/3763\">lean4#3763</a>). That's not a complete solution to your problem. I wonder if <code>conv</code> should have a flag or variant that doesn't try <code>rfl</code> at all, like how there's <code>rw</code> and <code>rewrite</code>.</p>",
        "id": 432920305,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1712933364
    },
    {
        "content": "<p>I would be in favor of such a flag, indeed.</p>",
        "id": 432925517,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1712934797
    },
    {
        "content": "<p>Would you like me to open a PR?</p>",
        "id": 432925543,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1712934807
    },
    {
        "content": "<p>Or even submit a patch?</p>",
        "id": 432925567,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1712934813
    },
    {
        "content": "<p>Maybe it would be best to create a bug issue saying how you use <code>conv</code> for pattern matching purposes, with a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> of what you want to do.</p>\n<p>I'm not sure whether it's best to modify <code>conv</code>, or to extract the pattern matching capabilities into a separate tactic. Or maybe <code>generalize</code> could have a variant that fails.</p>",
        "id": 432925957,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1712934941
    },
    {
        "content": "<p>Don't we have a <code>guard_goal</code> tactic or similar that asserts that a state has a certain shape? Maybe that would be the natural thing to extend to “assert that some subexpression of the goal matches this patterns”?</p>",
        "id": 432929963,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1712936137
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/issues/3889\">https://github.com/leanprover/lean4/issues/3889</a></p>",
        "id": 432930423,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1712936271
    },
    {
        "content": "<p>I have not really tested what is below, but you can try if this works for you:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Meta.KAbstract</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean.Elab.Tactic.ElabTerm</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"n\">Meta</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"contains? \"</span> <span class=\"n\">ts</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">tgt</span> <span class=\"bp\">←</span> <span class=\"n\">getMainTarget</span>\n  <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">kabstract</span> <span class=\"n\">tgt</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">ts</span> <span class=\"n\">none</span><span class=\"o\">))</span> <span class=\"bp\">==</span> <span class=\"n\">tgt</span> <span class=\"k\">then</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"pattern not found\"</span>\n</code></pre></div>",
        "id": 432930875,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712936417
    },
    {
        "content": "<p>unknown identifier 'kabstract'</p>\n<p>AliveAutoGenerated.lean:3172:23</p>\n<p>unknown identifier 'elabTerm'</p>\n<p>AliveAutoGenerated.lean:3172:54</p>\n<p>unknown identifier 'logInfo'<br>\n?</p>",
        "id": 432931067,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1712936497
    },
    {
        "content": "<p>I guess I miss an include.</p>",
        "id": 432931086,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1712936504
    },
    {
        "content": "<p>import</p>",
        "id": 432931092,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1712936506
    },
    {
        "content": "<p>I made what is above a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, sorry!</p>",
        "id": 432931327,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712936563
    },
    {
        "content": "<p>This works. How can I change <code>contains?</code> to fail if the pattern is not found.</p>",
        "id": 432932178,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1712936813
    },
    {
        "content": "<p><code>throwError</code> instead of <code>logWarning</code>.</p>",
        "id": 432932256,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712936830
    },
    {
        "content": "<p>(I edited the code above with the error)</p>",
        "id": 432932470,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712936887
    },
    {
        "content": "<p>Perfect. Thank you so much.</p>",
        "id": 432932787,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1712936992
    },
    {
        "content": "<p><code>kabstract</code> is what <code>rw</code> uses, if I remember correctly: it should be <em>very</em> robust.</p>",
        "id": 432933341,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712937127
    },
    {
        "content": "<p><code>kabstract</code> is also what <code>generalize</code> uses</p>",
        "id": 432934749,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1712937526
    },
    {
        "content": "<p>Right.</p>",
        "id": 432934900,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1712937582
    },
    {
        "content": "<p>I think this is the right direction. I am currently trying to integrate this into our actual code and it seems to be a bit more fragile than I hoped.</p>",
        "id": 432935012,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1712937605
    },
    {
        "content": "<p>Let me play around with it for a moment and see if I can get a handle of it.</p>",
        "id": 432935064,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1712937621
    },
    {
        "content": "<p>I am afraid in my setting, the new <code>contains?</code> is still fragile:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>     <span class=\"c1\">-- aa : Valuation [Ty.int]</span>\n     <span class=\"c1\">-- ⊢ aa { val := 0, property := ⋯ } + BitVec.ofInt 32 0 = aa { val := 0, property := ⋯ }</span>\n      <span class=\"n\">conv</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">aa</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Var</span> <span class=\"bp\">..</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">skip</span> <span class=\"c1\">-- does not throw an error as it matches</span>\n      <span class=\"n\">contains</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">aa</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Var</span> <span class=\"bp\">..</span><span class=\"o\">))</span> <span class=\"c1\">-- unknown identifier 'aa', pattern not found</span>\n</code></pre></div>",
        "id": 432937296,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1712938341
    },
    {
        "content": "<p>I am particularly surprised by the <code>unknown identifier 'aa'</code>.</p>",
        "id": 432937350,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1712938365
    },
    {
        "content": "<p>I am unsure how to extract a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> here.</p>",
        "id": 432938639,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1712938823
    },
    {
        "content": "<p>If someone wants to try, our code is here: <a href=\"https://github.com/opencompl/ssa/pull/224\">https://github.com/opencompl/ssa/pull/224</a></p>",
        "id": 432938763,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1712938867
    },
    {
        "content": "<p>This also does not work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">contains</span><span class=\"bp\">?</span> <span class=\"n\">_</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 432938806,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712938882
    },
    {
        "content": "<p>Interesting.</p>",
        "id": 432939030,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1712938944
    },
    {
        "content": "<p>The example that I wrote may be related to the fact that <code>rw</code> does not enter much into binders.  Yours seems to be pointing to a missing <code>withContext</code>, but honestly I do not see where that would go...</p>",
        "id": 432939401,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712939056
    },
    {
        "content": "<p>For your example, generalize also does not work.</p>",
        "id": 432939623,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1712939145
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">generalize</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n  <span class=\"c1\">-- x : ℕ</span>\n  <span class=\"c1\">-- ⊢ ∀ (a : ℕ), a + 0 = 0</span>\n</code></pre></div>",
        "id": 432939725,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1712939173
    },
    {
        "content": "<p>Meaning, it does not match but introduces this funny unconstrained variable.</p>",
        "id": 432939779,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1712939195
    },
    {
        "content": "<p>So contains? not matching here either is acceptable for me.</p>",
        "id": 432939833,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1712939216
    },
    {
        "content": "<p>(Untested) It seems to be missing <code>withMainContext</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"contains? \"</span> <span class=\"n\">ts</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">tgt</span> <span class=\"bp\">←</span> <span class=\"n\">getMainTarget</span>\n  <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">kabstract</span> <span class=\"n\">tgt</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">ts</span> <span class=\"n\">none</span><span class=\"o\">))</span> <span class=\"bp\">==</span> <span class=\"n\">tgt</span> <span class=\"k\">then</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"pattern not found\"</span>\n</code></pre></div>",
        "id": 432939909,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1712939244
    },
    {
        "content": "<p>I tried that, but it does not fix my example.  However, my example might be expected (but undesired) behaviour.</p>",
        "id": 432940217,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712939360
    },
    {
        "content": "<p>Anyway, see if Kyle's suggestion works for you (I probably won't be at a computer for a while).</p>",
        "id": 432940429,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1712939423
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/conv.20tactic.20sometimes.20solves.20goal/near/432939909\">said</a>:</p>\n<blockquote>\n<p>(Untested) It seems to be missing <code>withMainContext</code></p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"contains? \"</span> <span class=\"n\">ts</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">tgt</span> <span class=\"bp\">←</span> <span class=\"n\">getMainTarget</span>\n  <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">kabstract</span> <span class=\"n\">tgt</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">ts</span> <span class=\"n\">none</span><span class=\"o\">))</span> <span class=\"bp\">==</span> <span class=\"n\">tgt</span> <span class=\"k\">then</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"pattern not found\"</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This works for me and does exactly what I need.</p>",
        "id": 432940639,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1712939507
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span></p>",
        "id": 432940662,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1712939516
    }
]