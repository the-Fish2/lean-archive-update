[
    {
        "content": "<p>Can I find something like this in mathlib4 already:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fixedPoint</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">step</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">result</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.iterate</span> <span class=\"n\">step</span> <span class=\"n\">n</span> <span class=\"n\">s</span>\n  <span class=\"k\">let</span> <span class=\"n\">limit</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">⋂</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">result</span> <span class=\"n\">n</span>\n  <span class=\"n\">limit</span>\n</code></pre></div>",
        "id": 419796230,
        "sender_full_name": "Kamila Szewczyk",
        "timestamp": 1707125457
    },
    {
        "content": "<p>Did you intend <code>f (fixedPoint f s) = fixedPoint f s</code> to always be true?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.PushNeg</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Lattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Function.Iterate</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fixedPoint</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">step</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">result</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.iterate</span> <span class=\"n\">step</span> <span class=\"n\">n</span> <span class=\"n\">s</span>\n  <span class=\"k\">let</span> <span class=\"n\">limit</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">⋂</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">result</span> <span class=\"n\">n</span>\n  <span class=\"n\">limit</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">fixedPoint_apply'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">fixedPoint</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"bp\">⋂</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span> <span class=\"bp\">∪</span> <span class=\"n\">f</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬∀</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n    <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">fixedPoint</span> <span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fixedPoint</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">push_neg</span>\n  <span class=\"n\">use</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Set.univ</span><span class=\"o\">,</span> <span class=\"bp\">∅</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fixedPoint_apply'</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Set.inter_iInter_nat_succ</span><span class=\"o\">,</span> <span class=\"n\">Function.iterate_zero_apply</span><span class=\"o\">,</span>\n    <span class=\"n\">Set.empty_inter</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Set.nonempty_iff_ne_empty</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Set.nonempty_iff_univ_nonempty</span><span class=\"o\">]</span>\n  <span class=\"n\">infer_instance</span>\n</code></pre></div>",
        "id": 419816683,
        "sender_full_name": "Richard Copley",
        "timestamp": 1707132384
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"400544\">Richard Copley</span> <a href=\"#narrow/stream/113489-new-members/topic/Is.20this.20function.20present.20in.20mathlib4.3F/near/419816683\">said</a>:</p>\n<blockquote>\n<p>Did you intend <code>f (fixedPoint f s) = fixedPoint f s</code> to always be true?</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.PushNeg</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Lattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Function.Iterate</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fixedPoint</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">step</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">result</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.iterate</span> <span class=\"n\">step</span> <span class=\"n\">n</span> <span class=\"n\">s</span>\n  <span class=\"k\">let</span> <span class=\"n\">limit</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">⋂</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">result</span> <span class=\"n\">n</span>\n  <span class=\"n\">limit</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">fixedPoint_apply'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">fixedPoint</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"bp\">⋂</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span> <span class=\"bp\">∪</span> <span class=\"n\">f</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬∀</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n    <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">fixedPoint</span> <span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fixedPoint</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">push_neg</span>\n  <span class=\"n\">use</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Set.univ</span><span class=\"o\">,</span> <span class=\"bp\">∅</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fixedPoint_apply'</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Set.inter_iInter_nat_succ</span><span class=\"o\">,</span> <span class=\"n\">Function.iterate_zero_apply</span><span class=\"o\">,</span>\n    <span class=\"n\">Set.empty_inter</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Set.nonempty_iff_ne_empty</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Set.nonempty_iff_univ_nonempty</span><span class=\"o\">]</span>\n  <span class=\"n\">infer_instance</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>oh, yes... thank you! I wonder why mathlib doesn't have this already...</p>",
        "id": 419816791,
        "sender_full_name": "Kamila Szewczyk",
        "timestamp": 1707132431
    },
    {
        "content": "<p>I'm confused! What's it useful for?</p>",
        "id": 419817090,
        "sender_full_name": "Richard Copley",
        "timestamp": 1707132523
    },
    {
        "content": "<p>iterating functions in a fixed point, many programming languages already have it as a combinator. e.g. APL: <code>⍣≡</code></p>",
        "id": 419817236,
        "sender_full_name": "Kamila Szewczyk",
        "timestamp": 1707132582
    },
    {
        "content": "<p>Richard has just shown that, precisely, your definition doesn't give a fixpoint in general.</p>",
        "id": 419818325,
        "sender_full_name": "Sébastien Gouëzel",
        "timestamp": 1707132946
    }
]