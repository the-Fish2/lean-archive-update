[
    {
        "content": "<p>I'm having some trouble understanding why <code>rw</code> is failing.  The example is here: <a href=\"https://github.com/mdgeorge4153/cglean/blob/2eef007d269b6a655f26d2194590977198cf7585/CGLean/Data/AdjoinSqrt.lean#L180\">https://github.com/mdgeorge4153/cglean/blob/2eef007d269b6a655f26d2194590977198cf7585/CGLean/Data/AdjoinSqrt.lean#L180</a></p>\n<p>I have a goal of the form <code>match (sign 0, sign 0) with ... = 0</code>, and I have a lemma <code>SignedRing.sign_zero : âˆ€ {R : Type} [self : SignedRing R], sign 0 = 0</code>, but <code>rw [SignedRing.sign_zero]</code> is failing. Hovering over <code>sign 0</code> in the goal shows it is <code>@sign R SignedRing.toSigned 0 : SignType</code>, and the error message for the failed rewrite says there is no subexpression of the form <code>@sign ?m.194078 SignedRing.toSigned 0 :\nSignType</code>. I don't understand why <code>?m.194078</code> can't be unified with <code>R</code>.</p>\n<p>Thanks for your help</p>",
        "id": 436171147,
        "sender_full_name": "Michael George",
        "timestamp": 1714440013
    },
    {
        "content": "<p>FYI, it's hard for people to help since all the code is interconnected and the only way to really help is to clone the code directly (and Mathlib, and build it, and ...). I can help once the Mathlib dependencies are done...</p>\n<p>Update: Oops, I forgot about <code>lake exe cache get</code> again</p>",
        "id": 436285908,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714487706
    },
    {
        "content": "<p>But from the error message \"there is no subexpression of the form @sign ?m.194078 SignedRing.toSigned 0 : SignType\", I would suggest you to try <code>convert</code>!</p>",
        "id": 436285987,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714487734
    },
    {
        "content": "<p>In particular, you seem to be using <code>Type*</code> (well, <code>Type u</code>) somewhere, and plain <code>Type</code> elsewhere. That'll probably cause universe unification to fail</p>",
        "id": 436286172,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714487775
    },
    {
        "content": "<p>Nevermind, it's because the <code>sign_zero</code> you are trying to rewrite with is <code>Mathlib.Data.Sign.sign_zero</code>, while the <code>sign 0</code> in the goal is <code>(CGLean.Algebra.)Signed.sign</code></p>",
        "id": 436296159,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714490386
    },
    {
        "content": "<p>In that case, extra thanks for diving in to help. I wasn't sure how best to minimize the example to make it easier to help. Is there an easy way to see that? I'm pretty sure I'm trying to rewrite with <code>SignedRing.sign_zero</code> since I wrote <code>rw [SignedRing.sign_zero]</code></p>",
        "id": 436297694,
        "sender_full_name": "Michael George",
        "timestamp": 1714490776
    },
    {
        "content": "<p>In fact, systematically renaming the <code>SignedRing</code> fields led to the same problem.</p>",
        "id": 436299395,
        "sender_full_name": "Michael George",
        "timestamp": 1714491265
    },
    {
        "content": "<p>Nevermind, I know</p>",
        "id": 436300407,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714491561
    },
    {
        "content": "<p>Your <code>[Field R]</code> is causing some kind of type diamond.</p>",
        "id": 436301414,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714491852
    },
    {
        "content": "<p>If you remove it, then the proof works. But I don't know what the solution here is, since (I think) you need that for the statement</p>",
        "id": 436301508,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714491880
    },
    {
        "content": "<p>Let me try to minimise it first so it's easier for others to help</p>",
        "id": 436301541,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714491890
    },
    {
        "content": "<p>thank you!</p>",
        "id": 436301575,
        "sender_full_name": "Michael George",
        "timestamp": 1714491900
    },
    {
        "content": "<p>I found the issue by <code>set_option pp.all true</code></p>",
        "id": 436301588,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714491904
    },
    {
        "content": "<p>and staring at it for sufficiently long time</p>",
        "id": 436301603,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714491910
    },
    {
        "content": "<p>I think it boils down to this [edit: boiled down a little more]:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Field.Defs</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sign</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">sign_zero</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">sign</span> <span class=\"n\">R</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">sign</span> <span class=\"n\">R</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">sign_zero</span> <span class=\"n\">R</span> <span class=\"c1\">-- error</span>\n\n<span class=\"c1\">-- Lean 4: type mismatch</span>\n<span class=\"c1\">--   sign_zero R</span>\n<span class=\"c1\">-- has type</span>\n<span class=\"c1\">--   sign R 0 = @OfNat.ofNat R 0 (@Zero.toOfNat0 R MonoidWithZero.toZero) : Prop</span>\n<span class=\"c1\">-- but is expected to have type</span>\n<span class=\"c1\">--   sign R 0 = @OfNat.ofNat R 0 (@Zero.toOfNat0 R CommMonoidWithZero.toZero) : Prop</span>\n</code></pre></div>\n<p>It's nothing so subtle as a diamond. There are two unrelated ring structures.</p>",
        "id": 436305844,
        "sender_full_name": "Richard Copley",
        "timestamp": 1714493114
    },
    {
        "content": "<p>Is that not what a diamond is? Two (ring here) structures on the same object?</p>",
        "id": 436308301,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714493794
    },
    {
        "content": "<p>I guess it's just half a diamond lol</p>",
        "id": 436308367,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714493820
    },
    {
        "content": "<p>Just so I understand, the problem with your example is that there are two assumptions in the example <code>[i1: Field R]</code>  and <code>[i2: Ring R]</code>, each of which define <code>zero</code>, but the two <code>zero</code>s are not definitionally equal. <code>sign_zero</code> is using the <code>zero</code> from <code>i2</code>, while the declared type of the example (<code>sign R 0 = 0</code>) is using the <code>zero</code> from <code>i1</code>.  Is that right?</p>",
        "id": 436309492,
        "sender_full_name": "Michael George",
        "timestamp": 1714494145
    },
    {
        "content": "<p>In that case, what's the right approach for resolving the issue? At a high level, I'd like to say that if R has the operations and satisfies the axioms of both a field and a signed ring, that so does <code>AdjoinSqrt R n</code>.</p>",
        "id": 436310279,
        "sender_full_name": "Michael George",
        "timestamp": 1714494364
    },
    {
        "content": "<p>Use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsField#doc\">docs#IsField</a> instead.</p>",
        "id": 436312589,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1714495104
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"579936\">@Gareth Ma</span> a diamond is when code manages to create two distinct instances of a class given reasonable assumptions. Here we have a user creating two distinct instances of a class with their assumptions so the word diamond isn't used.</p>",
        "id": 436313882,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714495568
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"568451\">Michael George</span> <a href=\"#narrow/stream/113489-new-members/topic/Why.20isn't.20rewrite.20applying.3F/near/436309492\">said</a>:</p>\n<blockquote>\n<p>Just so I understand, the problem with your example is that there are two assumptions in the example <code>[i1: Field R]</code>  and <code>[i2: Ring R]</code>, each of which define <code>zero</code>, but the two <code>zero</code>s are not definitionally equal. <code>sign_zero</code> is using the <code>zero</code> from <code>i2</code>, while the declared type of the example (<code>sign R 0 = 0</code>) is using the <code>zero</code> from <code>i1</code>.  Is that right?</p>\n</blockquote>\n<p>To be even more clear: the two <code>zero</code>s have nothing to do with each other, and could be completely different elements.</p>",
        "id": 436340129,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1714505480
    },
    {
        "content": "<p>And the solution is to use \"mixins\" which is a fancy word for a class that has another class as argument, like <code>IsField</code> mentioned above. Another solution is to make your <code>SignedRing</code> a mixin (i.e., have it take <code>[Ring R]</code> as argument instead of <code>extends Ring R</code>).</p>",
        "id": 436340423,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1714505588
    }
]