[
    {
        "content": "<p>As title, how do I close this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.NumberTheory.Divisors</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">func</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∑</span> <span class=\"n\">d</span> <span class=\"k\">in</span> <span class=\"n\">n.properDivisors</span><span class=\"o\">,</span> <span class=\"n\">func</span> <span class=\"n\">d</span>\n</code></pre></div>",
        "id": 425921747,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1710167558
    },
    {
        "content": "<p>Here's my attempt:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">func</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∑</span> <span class=\"n\">d</span> <span class=\"k\">in</span> <span class=\"n\">n.properDivisors</span><span class=\"o\">,</span> <span class=\"n\">func</span> <span class=\"n\">d</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">n</span>\n<span class=\"n\">decreasing_by</span>\n  <span class=\"n\">simp_wf</span> <span class=\"c\">/-</span><span class=\"cm\"> \\goal: d &lt; n -/</span>\n</code></pre></div>",
        "id": 425922774,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1710167869
    },
    {
        "content": "<p>Your function doesn't terminate; does it have a typo? Should it be <code>func d</code>?</p>",
        "id": 425930077,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710169687
    },
    {
        "content": "<p>Yes it should be <code>func d</code></p>",
        "id": 425930160,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1710169711
    },
    {
        "content": "<p>sorry</p>",
        "id": 425930166,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1710169712
    },
    {
        "content": "<p>Now I have to prove <code>d &lt; n</code>, but I also need that <code>d in n.properDivisors</code> hypothesis</p>",
        "id": 425930363,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1710169764
    },
    {
        "content": "<p><code>∑ d in n.properDivisors.attach, have := Nat.mem_properDivisors.mp d.prop; func d</code> works</p>",
        "id": 425930371,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710169767
    },
    {
        "content": "<p>Ahh okay this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">func</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∑</span> <span class=\"n\">d</span> <span class=\"k\">in</span> <span class=\"n\">n.properDivisors.attach</span><span class=\"o\">,</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.mem_properDivisors.mp</span> <span class=\"n\">d.prop</span><span class=\"bp\">;</span> <span class=\"n\">func</span> <span class=\"n\">d</span>\n<span class=\"n\">decreasing_by</span> <span class=\"n\">simp_wf</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">this.right</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">func</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">d</span> <span class=\"k\">in</span> <span class=\"n\">n.properDivisors</span><span class=\"o\">,</span> <span class=\"n\">func</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">func</span><span class=\"o\">,</span> <span class=\"n\">Finset.sum_attach</span><span class=\"o\">]</span>\n  <span class=\"n\">all_goals</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">trivial</span>\n</code></pre></div>\n<p>(Is this code acceptable in Mathlib xD) Thanks!!</p>",
        "id": 425931382,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1710169961
    },
    {
        "content": "<p>If you don't mind, I have another not-so-related question</p>",
        "id": 425936339,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1710171292
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.NumberTheory.VonMangoldt</span>\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span> <span class=\"n\">Finset</span> <span class=\"n\">BigOperators</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">ArithmeticFunction.invFun</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ArithmeticFunction</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Invertible</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">R</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hf.invOf</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">-</span><span class=\"n\">hf.invOf</span> <span class=\"bp\">*</span> <span class=\"bp\">∑</span> <span class=\"n\">d</span> <span class=\"k\">in</span> <span class=\"n\">n.properDivisors.attach</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.mem_properDivisors.mp</span> <span class=\"n\">d.prop</span><span class=\"bp\">;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">f.invFun</span> <span class=\"n\">hf</span> <span class=\"n\">d</span>\n<span class=\"n\">decreasing_by</span> <span class=\"n\">simp_wf</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">this.right</span>\n</code></pre></div>\n<p>This is my code right now which is okay. However, if I move the <code>f: ...</code> to the <code>variable</code> section:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ArithmeticFunction</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">ArithmeticFunction.invFun</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Invertible</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">R</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hf.invOf</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">-</span><span class=\"n\">hf.invOf</span> <span class=\"bp\">*</span> <span class=\"bp\">∑</span> <span class=\"n\">d</span> <span class=\"k\">in</span> <span class=\"n\">n.properDivisors.attach</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.mem_properDivisors.mp</span> <span class=\"n\">d.prop</span><span class=\"bp\">;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">f.invFun</span> <span class=\"n\">hf</span> <span class=\"n\">d</span>\n<span class=\"n\">decreasing_by</span> <span class=\"n\">simp_wf</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">this.right</span>\n</code></pre></div>\n<p>Then it fails at the <code>f.invFun</code> call:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ArithmeticFunction</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">ArithmeticFunction.invFun</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Invertible</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">R</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hf.invOf</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">-</span><span class=\"n\">hf.invOf</span> <span class=\"bp\">*</span> <span class=\"bp\">∑</span> <span class=\"n\">d</span> <span class=\"k\">in</span> <span class=\"n\">n.properDivisors.attach</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.mem_properDivisors.mp</span> <span class=\"n\">d.prop</span><span class=\"bp\">;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">f.invFun</span> <span class=\"n\">hf</span> <span class=\"n\">d</span>\n<span class=\"n\">decreasing_by</span> <span class=\"n\">simp_wf</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">this.right</span>\n</code></pre></div>\n<p>Why is that? (Using <code>namespace ArithmeticFunction</code> doesn't work either)</p>",
        "id": 425936532,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1710171351
    },
    {
        "content": "<p>When you move the variable to the <code>variable</code> line, the \"recursive\" stub that Lean creates for you of the function is already applied to all the variables appearing before the <code>:</code>.  Thus, in your case, you could use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.NumberTheory.VonMangoldt</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span> <span class=\"n\">Finset</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ArithmeticFunction</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">ArithmeticFunction.invFun</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Invertible</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">R</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hf.invOf</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">-</span><span class=\"n\">hf.invOf</span> <span class=\"bp\">*</span> <span class=\"bp\">∑</span> <span class=\"n\">d</span> <span class=\"k\">in</span> <span class=\"n\">n.properDivisors.attach</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.mem_properDivisors.mp</span> <span class=\"n\">d.prop</span><span class=\"bp\">;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">ArithmeticFunction.invFun</span> <span class=\"n\">hf</span> <span class=\"n\">d</span>\n<span class=\"c1\">--  note the call `ArithmeticFunction.invFun` *without* passing `f` ^^^^^^^^^^^^^^^</span>\n</code></pre></div>",
        "id": 425938660,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1710171869
    },
    {
        "content": "<p>Ahha okay thanks that works</p>",
        "id": 425998838,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1710187094
    },
    {
        "content": "<p>Also I removed the <code>Invertible</code> to an instance <code>[Invertible (f 1)]</code> and write <code>⅟(f 1)</code> instead, I think that's more common</p>",
        "id": 425998921,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1710187140
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"579936\">Gareth Ma</span> has marked this topic as resolved.</p>",
        "id": 426034206,
        "sender_full_name": "Notification Bot",
        "timestamp": 1710204935
    }
]