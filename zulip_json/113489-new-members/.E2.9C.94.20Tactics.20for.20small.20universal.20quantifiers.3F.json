[
    {
        "content": "<p>I've got a small concrete list and I'm looking for a tactic or theorem that will simplify my attempts to prove theorems about its elements by cases.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">7</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span> <span class=\"n\">h</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">head</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.le_of_ble_eq_true</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">|</span> <span class=\"n\">tail</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">head</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.le_of_ble_eq_true</span> <span class=\"n\">rfl</span>\n      <span class=\"bp\">|</span> <span class=\"n\">tail</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"n\">head</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.le_of_ble_eq_true</span> <span class=\"n\">rfl</span>\n        <span class=\"bp\">|</span> <span class=\"n\">tail</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n          <span class=\"bp\">|</span> <span class=\"n\">head</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.le_of_ble_eq_true</span> <span class=\"n\">rfl</span>\n          <span class=\"bp\">|</span> <span class=\"n\">tail</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n            <span class=\"bp\">|</span> <span class=\"n\">head</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.le_of_ble_eq_true</span> <span class=\"n\">rfl</span>\n            <span class=\"bp\">|</span> <span class=\"n\">tail</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n              <span class=\"bp\">|</span> <span class=\"n\">head</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.le_of_ble_eq_true</span> <span class=\"n\">rfl</span>\n              <span class=\"bp\">|</span> <span class=\"n\">tail</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">contradiction</span>\n</code></pre></div>\n<p>I'd imagine that there's a more concise way to do this... anyone have any suggestions? I have a feeling that the answer is somewhere in <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/inductive_types.html\">here</a>, but it's not coming to me.</p>",
        "id": 417527787,
        "sender_full_name": "N Gelwan",
        "timestamp": 1706043742
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">7</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span> <span class=\"n\">h</span>\n  <span class=\"n\">fin_cases</span> <span class=\"n\">h</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">norm_num</span>\n</code></pre></div>",
        "id": 417528107,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1706043887
    },
    {
        "content": "<p><code>fin_cases</code>, excellent, thank you!</p>",
        "id": 417528262,
        "sender_full_name": "N Gelwan",
        "timestamp": 1706043955
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"665242\">N Gelwan</span> has marked this topic as resolved.</p>",
        "id": 417528342,
        "sender_full_name": "Notification Bot",
        "timestamp": 1706043969
    },
    {
        "content": "<p>This is not better than what Kyle suggested, but in your example <code>decide</code> also works...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Basic</span>\n<span class=\"kd\">def</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">7</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">decide</span>\n</code></pre></div>",
        "id": 417529167,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706044304
    },
    {
        "content": "<p>It's probably more efficient than what I did, since it's just <code>List Nat</code> and presumably a simple algorithm.</p>",
        "id": 417529555,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1706044438
    }
]