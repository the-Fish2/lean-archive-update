[
    {
        "content": "<p>I have defined the following Add instance and written a lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">BV.instadd</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">Vector</span> <span class=\"n\">Bool</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">Vector.map₂</span> <span class=\"n\">xor</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">f1</span> <span class=\"o\">(</span><span class=\"n\">v1</span> <span class=\"n\">v2</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">Bool</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">Vector.map₂</span> <span class=\"n\">xor</span> <span class=\"n\">v1</span> <span class=\"n\">v2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">tail</span> <span class=\"bp\">=</span> <span class=\"n\">Vector.map₂</span> <span class=\"n\">xor</span> <span class=\"n\">v1.tail</span> <span class=\"n\">v2.tail</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">match</span> <span class=\"n\">v1</span><span class=\"o\">,</span> <span class=\"n\">v2</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">⟨</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"o\">⟩,</span> <span class=\"o\">⟨</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Vector.map₂</span><span class=\"o\">,</span> <span class=\"n\">Vector.tail</span><span class=\"o\">,</span> <span class=\"n\">List.zipWith</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">f2</span> <span class=\"o\">(</span><span class=\"n\">v1</span> <span class=\"n\">v2</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">Bool</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">v1</span> <span class=\"bp\">+</span> <span class=\"n\">v2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">tail</span> <span class=\"bp\">=</span> <span class=\"n\">v1.tail</span> <span class=\"bp\">+</span> <span class=\"n\">v2.tail</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">f1</span>\n</code></pre></div>\n<p>f1 and f2 are the same, except in f1 I have just unfolded the definition of +. The statements are definitionally equal. But I can't use the proof of f1 in f2. I don't know how to unfold or simplify the instance definition. I have tried <code>unfold BV.instadd</code>, <code>simp [BV.instadd]</code>, <code>unfold +</code>, etc. How can I prove f2 without having to manually unfold the definitions?</p>\n<p>Also I'm kinda confused how typeclass instance resolution works. Is there coherence guarantees? Since it seems like I can define an overlapping instance like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">BV.instadd'</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">Vector</span> <span class=\"n\">Bool</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">Vector.map₂</span> <span class=\"n\">or</span>\n</code></pre></div>\n<p>and then how would it know which instance to select?</p>",
        "id": 423320768,
        "sender_full_name": "Timothy Mou",
        "timestamp": 1708921299
    },
    {
        "content": "<p>Typeclass instance coherence: If you make two <code>Add</code> instances on a type then your mental model should be that it will select a random one. There's no coherence guarantee,</p>",
        "id": 423334636,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708931380
    },
    {
        "content": "<p>I suppose that makes sense to not have coherence, since you have the option of manually applying typeclass instances.<br>\nCan anyone help me with my first question?</p>",
        "id": 423532150,
        "sender_full_name": "Timothy Mou",
        "timestamp": 1709009067
    },
    {
        "content": "<p>A syntax for unfolding <code>+</code> is <code>simp [(· + ·)]</code>.</p>\n<p>Mathlib has an <code>unfold_projs</code> tactic that might help unfold all the instances</p>",
        "id": 423532412,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709009224
    },
    {
        "content": "<p>Thanks, <code>unfold_projs</code> is what I was looking for.</p>",
        "id": 423537133,
        "sender_full_name": "Timothy Mou",
        "timestamp": 1709013132
    }
]