[
    {
        "content": "<p>Hello everyone! I am really enjoying working with Lean4, it's a fantastic and powerful language!<br>\nRight now, I consider that I can walk with my own feet in the functional programming side of things (I am a CS undergrad), but the Theorem Proving part is new, where I am struggling most.</p>\n<p>Right now I got this (almost) working code, that sets the base case of the inductive proof of the <a href=\"https://jakobnordstrom.se/docs/presentations/TalkVeriPB_Dagstuhl23.pdf#page=45\">Addition Rule</a>, for Pseudo-Boolean Sums .</p>\n<p>This is the current code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fin.Tuple.Reflection</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fin.VecNotation</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">ZulipExample</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">FinVec</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">PBSum</span> <span class=\"o\">(</span><span class=\"n\">cs</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∑</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">cs</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">xs</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">PBIneq</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">cs</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">PBSum</span> <span class=\"n\">cs</span> <span class=\"n\">xs</span> <span class=\"bp\">≥</span> <span class=\"n\">const</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">expandDefinitionOfPBIneq</span>\n <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">PBIneq</span> <span class=\"n\">cs</span> <span class=\"n\">xs</span> <span class=\"n\">const</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">PBSum</span> <span class=\"n\">cs</span> <span class=\"n\">xs</span> <span class=\"bp\">≥</span> <span class=\"n\">const</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n\n<span class=\"c1\">-- It's literally the definition of the function...</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">expandDefinitionOfPBSum</span>\n  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">PBSum</span> <span class=\"n\">cs</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">cs</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">xs</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n  <span class=\"n\">done</span>\n\n<span class=\"c1\">-- Addition</span>\n<span class=\"c1\">-- ∑i (a i * l i) ≥ A</span>\n<span class=\"c1\">-- ∑i (b i * l i) ≥ B</span>\n<span class=\"c1\">-- ⊢</span>\n<span class=\"c1\">-- ∑i ((a i + b i) * l i) ≥ A + B</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Addition</span>\n  <span class=\"o\">{</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">PBIneq</span> <span class=\"n\">as</span> <span class=\"n\">xs</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">bs</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">PBIneq</span> <span class=\"n\">bs</span> <span class=\"n\">xs</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">PBIneq</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"bp\">+</span> <span class=\"n\">bs</span><span class=\"o\">)</span> <span class=\"n\">xs</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">+</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span>\n  <span class=\"bp\">.</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">expandDefinitionOfPBIneq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ha</span>\n    <span class=\"c1\">-- -- should get me `ha : PBSum as xs ≥ A`</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">expandDefinitionOfPBSum</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ha</span>\n    <span class=\"c1\">-- -- should get me `ha : ∑ i, (![] i + ![] i) ≥ A`</span>\n    <span class=\"k\">have</span> <span class=\"n\">sumZero</span> <span class=\"o\">:</span> <span class=\"n\">PBSum</span> <span class=\"bp\">!</span><span class=\"o\">[]</span> <span class=\"bp\">!</span><span class=\"o\">[]</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">sumZero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ha</span>\n\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">expandDefinitionOfPBIneq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hb</span>\n    <span class=\"c1\">-- -- should get me `hb : PBSum bs xs ≥ B`</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">expandDefinitionOfPBSum</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hb</span>\n    <span class=\"c1\">-- -- should get me `hb : ∑ i, (![] i + ![] i) ≥ B`</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">sumZero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hb</span>\n\n    <span class=\"c1\">-- Got ha : A ≤ 0 ; hb : B ≤ 0</span>\n    <span class=\"k\">have</span> <span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">+</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">Int.add_nonpos</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span>\n\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Nat.zero_eq</span><span class=\"o\">,</span> <span class=\"n\">Matrix.empty_add_empty</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">expandDefinitionOfPBIneq</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">expandDefinitionOfPBSum</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">sumZero</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hk</span>\n\n  <span class=\"bp\">.</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">done</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">ZulipExample</span>\n</code></pre></div>\n<p>As you can see, what I managed to do is use <code>rw</code> to unwrap the defintions, with the <code>expandDefinitionOfPBIneq</code> and <code>expandDefinitionOfPBSum</code> lemmas, where the latter has a <code>sorry</code>.<br>\nHow can I fix this? Any tipps are welcome, also reading material in the topic...</p>",
        "id": 435452972,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1714073009
    },
    {
        "content": "<p>Ok, with * I could make some progress:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fin.Tuple.Reflection</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fin.VecNotation</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">ZulipExample</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">FinVec</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">PBSum</span> <span class=\"o\">(</span><span class=\"n\">cs</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∑</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">cs</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">xs</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">PBIneq</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">cs</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">PBSum</span> <span class=\"n\">cs</span> <span class=\"n\">xs</span> <span class=\"bp\">≥</span> <span class=\"n\">const</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">expandDefinitionOfPBIneq</span>\n <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">PBIneq</span> <span class=\"n\">cs</span> <span class=\"n\">xs</span> <span class=\"n\">const</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">PBSum</span> <span class=\"n\">cs</span> <span class=\"n\">xs</span> <span class=\"bp\">≥</span> <span class=\"n\">const</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n\n<span class=\"c1\">-- It's literally the definition of the function...</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">expandDefinitionOfPBSum</span>\n  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">PBSum</span> <span class=\"n\">cs</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">cs</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">xs</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n  <span class=\"n\">done</span>\n\n<span class=\"c1\">-- Addition</span>\n<span class=\"c1\">-- ∑i (a i * l i) ≥ A</span>\n<span class=\"c1\">-- ∑i (b i * l i) ≥ B</span>\n<span class=\"c1\">-- ⊢</span>\n<span class=\"c1\">-- ∑i ((a i + b i) * l i) ≥ A + B</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Addition</span>\n  <span class=\"o\">{</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">PBIneq</span> <span class=\"n\">as</span> <span class=\"n\">xs</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">bs</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">PBIneq</span> <span class=\"n\">bs</span> <span class=\"n\">xs</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">PBIneq</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"bp\">+</span> <span class=\"n\">bs</span><span class=\"o\">)</span> <span class=\"n\">xs</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">+</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span>\n  <span class=\"bp\">.</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">expandDefinitionOfPBIneq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">expandDefinitionOfPBSum</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n    <span class=\"k\">have</span> <span class=\"n\">sumZero</span> <span class=\"o\">:</span> <span class=\"n\">PBSum</span> <span class=\"bp\">!</span><span class=\"o\">[]</span> <span class=\"bp\">!</span><span class=\"o\">[]</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">sumZero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Int.add_nonpos</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span>\n  <span class=\"bp\">.</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">done</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">ZulipExample</span>\n</code></pre></div>\n<p>It's just the sorry in the second lemma that's keeping me</p>",
        "id": 435456368,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1714074442
    },
    {
        "content": "<p><code>expandDefinitionOfPBSum</code> is wrong, it should be <code> cs i * xs i</code> :)</p>",
        "id": 435456609,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714074527
    },
    {
        "content": "<p>Oh, that's silly... I fixed it.</p>",
        "id": 435456832,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1714074609
    },
    {
        "content": "<p>Either way, is there a \"unwrap definition\" tactic that I could have used?</p>",
        "id": 435456898,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1714074637
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 435457051,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714074687
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"671510\">Bernardo Borges</span> <a href=\"#narrow/stream/113489-new-members/topic/Proof.20refactor.20.28suggestions.29.20and.20how.20to.20expand.20a.20definition/near/435456898\">said</a>:</p>\n<blockquote>\n<p>Either way, is there a \"unwrap definition\" tactic that I could have used?</p>\n</blockquote>\n<p>What do you mean? Just <code>rw</code>? Or <code>dsimp</code>? <code>simp only</code>?</p>",
        "id": 435457090,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714074703
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"579936\">Gareth Ma</span> <a href=\"#narrow/stream/113489-new-members/topic/Proof.20refactor.20.28suggestions.29.20and.20how.20to.20expand.20a.20definition/near/435457090\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"671510\">Bernardo Borges</span> <a href=\"#narrow/stream/113489-new-members/topic/Proof.20refactor.20.28suggestions.29.20and.20how.20to.20expand.20a.20definition/near/435456898\">said</a>:</p>\n<blockquote>\n<p>Either way, is there a \"unwrap definition\" tactic that I could have used?</p>\n</blockquote>\n<p>What do you mean? Just <code>rw</code>? Or <code>dsimp</code>? <code>simp only</code>?</p>\n</blockquote>\n<p>What I meant was a tactic that will not require the lemmas, since they only call <code>rfl</code></p>",
        "id": 435457278,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1714074768
    },
    {
        "content": "<p>Yes <code>rw</code> would just work. So you can remove <code>expandDefinitionOfPBSum</code> entirely, and just <code>rw [PBSum]</code></p>",
        "id": 435457357,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714074799
    },
    {
        "content": "<p>Sometimes it's still a good idea to keep these <code>rfl</code> lemmas for rewriting, but here it's okay</p>",
        "id": 435457440,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714074830
    },
    {
        "content": "<p>The induction tactic is <em>not</em> “not too easy to use”. You need to type <code>induction n</code> and their either click the little light bulb and use <code>Ctrl-.</code> to get the Lean server to provide the proof skeleton.</p>",
        "id": 435457480,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1714074843
    },
    {
        "content": "<p>Yes but for beginners it's easier to use <code>induction'</code></p>",
        "id": 435457867,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714074987
    },
    {
        "content": "<p>\"not too easy to use\" is my own experience anyways</p>",
        "id": 435457908,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714075009
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Addition</span>\n  <span class=\"o\">{</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">PBIneq</span> <span class=\"n\">as</span> <span class=\"n\">xs</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">bs</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">PBIneq</span> <span class=\"n\">bs</span> <span class=\"n\">xs</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">PBIneq</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"bp\">+</span> <span class=\"n\">bs</span><span class=\"o\">)</span> <span class=\"n\">xs</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">+</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">n_ih</span>\n\n  <span class=\"bp\">.</span> <span class=\"c\">/-</span><span class=\"cm\"> Expand definitions as you wanted -/</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">PBIneq</span><span class=\"o\">,</span> <span class=\"n\">PBSum</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span> <span class=\"bp\">⊢</span>\n    <span class=\"c\">/-</span><span class=\"cm\"> Fin.sum_univ_zero : ∑ i : Fin 0, f i = 0 -/</span>\n    <span class=\"c\">/-</span><span class=\"cm\"> Pro tip: You can find this with `rw?`. -/</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Fin.sum_univ_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span> <span class=\"bp\">⊢</span>\n    <span class=\"c\">/-</span><span class=\"cm\"> Closes integer goals -/</span>\n    <span class=\"n\">omega</span>\n\n  <span class=\"bp\">.</span> <span class=\"gr\">sorry</span>\n\n  <span class=\"n\">done</span>\n</code></pre></div>\n<p>Anyways <span class=\"user-mention\" data-user-id=\"671510\">@Bernardo Borges</span> check this out for the base case :)</p>",
        "id": 435457939,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714075022
    },
    {
        "content": "<p>This is great! It will definetly be useful!<br>\nRight now, to my surprise, the base case was solved WITHOUT any rewriting!<br>\nNow its up to the inductive:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Addition</span>\n  <span class=\"o\">{</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">PBIneq</span> <span class=\"n\">as</span> <span class=\"n\">xs</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">bs</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">PBIneq</span> <span class=\"n\">bs</span> <span class=\"n\">xs</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">PBIneq</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"bp\">+</span> <span class=\"n\">bs</span><span class=\"o\">)</span> <span class=\"n\">xs</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">+</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">n_id</span>\n  <span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"n\">Int.add_nonpos</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span>\n  <span class=\"bp\">.</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">PBIneq</span><span class=\"o\">,</span><span class=\"n\">PBSum</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"n\">done</span>\n</code></pre></div>",
        "id": 435458008,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1714075054
    },
    {
        "content": "<p>My experience with <code>induction</code> was \"not too easy to use until the blue lightbulb trick was implemented and then trivial to use\"</p>",
        "id": 435458025,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714075059
    },
    {
        "content": "<p>Okay I have deleted my comment</p>",
        "id": 435458200,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714075116
    },
    {
        "content": "<p>Back to the proof</p>",
        "id": 435458215,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714075123
    },
    {
        "content": "<p>I would also recommend <code>induction</code> over <code>induction'</code></p>",
        "id": 435458321,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1714075170
    },
    {
        "content": "<p>Also thanks for the \"Light Bulb trick\", it worked in VS Code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Addition</span>\n  <span class=\"o\">{</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">PBIneq</span> <span class=\"n\">as</span> <span class=\"n\">xs</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">bs</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">PBIneq</span> <span class=\"n\">bs</span> <span class=\"n\">xs</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">PBIneq</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"bp\">+</span> <span class=\"n\">bs</span><span class=\"o\">)</span> <span class=\"n\">xs</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">+</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">Int.add_nonpos</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">PBIneq</span><span class=\"o\">,</span><span class=\"n\">PBSum</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"n\">done</span>\n</code></pre></div>",
        "id": 435458440,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1714075206
    },
    {
        "content": "<p>anyways</p>",
        "id": 435458615,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714075261
    },
    {
        "content": "<p>For your inductive case, you want a rewriting lemma that proves</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n.succ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n.succ</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"bp\">∑</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a.castSucc</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>(Or something similar)</p>",
        "id": 435458703,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714075293
    },
    {
        "content": "<p>Actually why are you using induction at all</p>",
        "id": 435459236,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714075488
    },
    {
        "content": "<p>I'm using induction, in principle, because I need to prove it for any length FinVec</p>",
        "id": 435459318,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1714075528
    },
    {
        "content": "<p>But all you're proving here is that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mo>∑</mo><mi>i</mi></msub><msub><mi>a</mi><mi>i</mi></msub><msub><mi>x</mi><mi>i</mi></msub><mo>≥</mo><mi>A</mi><mo stretchy=\"false\">)</mo><mo>∧</mo><mo stretchy=\"false\">(</mo><msub><mo>∑</mo><mi>i</mi></msub><msub><mi>b</mi><mi>i</mi></msub><msub><mi>x</mi><mi>i</mi></msub><mo>≥</mo><mi>B</mi><mo stretchy=\"false\">)</mo><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><mo stretchy=\"false\">(</mo><msub><mo>∑</mo><mi>i</mi></msub><mo stretchy=\"false\">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo>+</mo><msub><mi>b</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><msub><mi>x</mi><mi>i</mi></msub><mo>≥</mo><mi>A</mi><mo>+</mo><mi>B</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(\\sum_{i} a_ix_i \\geq A) \\land (\\sum_i b_ix_i \\geq B) \\implies (\\sum_i (a_i + b_i)x_i \\geq A + B)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0497em;vertical-align:-0.2997em;\"></span><span class=\"mopen\">(</span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.162em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∧</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0497em;vertical-align:-0.2997em;\"></span><span class=\"mopen\">(</span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.162em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⟹</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0497em;vertical-align:-0.2997em;\"></span><span class=\"mopen\">(</span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.162em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span></span></span></span></p>",
        "id": 435459611,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714075647
    },
    {
        "content": "<p>That doesn't require induction, does it :)</p>",
        "id": 435459621,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714075653
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Addition</span>\n  <span class=\"o\">{</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">PBIneq</span> <span class=\"n\">as</span> <span class=\"n\">xs</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">bs</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">PBIneq</span> <span class=\"n\">bs</span> <span class=\"n\">xs</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">PBIneq</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"bp\">+</span> <span class=\"n\">bs</span><span class=\"o\">)</span> <span class=\"n\">xs</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">+</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">PBIneq</span><span class=\"o\">,</span> <span class=\"n\">PBSum</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> (as + bs) i = as i + bs i -/</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">add_apply</span><span class=\"o\">]</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> (as i + bs i) * (xs x) = (as i * xs x) + (bs i * xs x) -/</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">add_mul</span><span class=\"o\">]</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> ∑ i, f i + g i = ∑ i, f i + ∑ i, g i -/</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.sum_add_distrib</span><span class=\"o\">]</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> a ≥ A, b ≥ B → a + b ≥ A + B -/</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Int.add_le_add</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span>\n</code></pre></div>\n<p>Haha</p>",
        "id": 435459775,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714075712
    },
    {
        "content": "<p>(intentionally verbose, for all the experts waiting to correct me again <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span> )</p>",
        "id": 435459811,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714075729
    },
    {
        "content": "<p>Great! Can you explain what was your thought process? Are you using  <code>simp?</code> or you just knew these theorems?</p>",
        "id": 435460060,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1714075846
    },
    {
        "content": "<p>The first one I used <code>simp?</code> but I kind of know it I guess</p>",
        "id": 435460407,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714076000
    },
    {
        "content": "<p>The second one I know it, it's just typical <code>(a+b)*c=a*c+b*c</code></p>",
        "id": 435460442,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714076013
    },
    {
        "content": "<p>The third one I'm supposed to know it but I forgot, so what I do is I write a new <code>example</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span><span class=\"bp\">?</span>\n</code></pre></div>\n<p>Then it shows (I used <code>rw?</code> but whatever)</p>",
        "id": 435460580,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714076065
    },
    {
        "content": "<p>the final one I exact?</p>",
        "id": 435460629,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714076092
    },
    {
        "content": "<p>This is very nice! Thanks for the help. Apparently I'll have to get used to the possible steps and grind each one like you did. How did you learn Lean in general?</p>",
        "id": 435460930,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1714076228
    },
    {
        "content": "<p>formalised a bunch of stuff, asking on Zulip when I need help or get stuck</p>",
        "id": 435461014,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714076274
    },
    {
        "content": "<p>sometimes i also post my 200 lines proof here and usually people go \"actually there's a better way\" and return with a 13 line proof</p>",
        "id": 435461115,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714076312
    },
    {
        "content": "<p>Do you think finishing the Natural Number Game would be useful? I did a third of it</p>",
        "id": 435461264,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1714076402
    },
    {
        "content": "<p>Depends, but not really worth it IMO</p>",
        "id": 435461651,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714076559
    },
    {
        "content": "<p><a href=\"https://github.com/grhkm21/lean4/commits/master/\">https://github.com/grhkm21/lean4/commits/master/</a> you can lookk at my earliest commits</p>",
        "id": 435461702,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714076579
    },
    {
        "content": "<p>Lean 3 repo: <a href=\"https://github.com/grhkm21/lean/commits/master/\">https://github.com/grhkm21/lean/commits/master/</a></p>",
        "id": 435461722,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714076589
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"579936\">Gareth Ma</span> <a href=\"#narrow/stream/113489-new-members/topic/Proof.20refactor.20.28suggestions.29.20and.20how.20to.20expand.20a.20definition/near/435461702\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/grhkm21/lean4/commits/master/\">https://github.com/grhkm21/lean4/commits/master/</a> you can lookk at my earliest commits</p>\n</blockquote>\n<p>Cool, I'll take a look <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 435461766,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1714076613
    },
    {
        "content": "<p>So I just went \"ooo Mersenne's Theorem, let me prove it\", then spent a long time doing that, and you will usually learn the stuff you need along the way. Of course this only works if you know the proof beforehand alreadyt, which is very important</p>",
        "id": 435461883,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714076655
    },
    {
        "content": "<p>If you do the NNG world which introduces apply and exact after the addition world then as far as learning lean goes you've already learnt most of the tactics which that game teaches you, I should think</p>",
        "id": 435461900,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1714076666
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"579936\">Gareth Ma</span> <a href=\"#narrow/stream/113489-new-members/topic/Proof.20refactor.20.28suggestions.29.20and.20how.20to.20expand.20a.20definition/near/435459611\">said</a>:</p>\n<blockquote>\n<p>But all you're proving here is that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mo>∑</mo><mi>i</mi></msub><msub><mi>a</mi><mi>i</mi></msub><msub><mi>x</mi><mi>i</mi></msub><mo>≥</mo><mi>A</mi><mo stretchy=\"false\">)</mo><mo>∧</mo><mo stretchy=\"false\">(</mo><msub><mo>∑</mo><mi>i</mi></msub><msub><mi>b</mi><mi>i</mi></msub><msub><mi>x</mi><mi>i</mi></msub><mo>≥</mo><mi>B</mi><mo stretchy=\"false\">)</mo><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><mo stretchy=\"false\">(</mo><msub><mo>∑</mo><mi>i</mi></msub><mo stretchy=\"false\">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo>+</mo><msub><mi>b</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><msub><mi>x</mi><mi>i</mi></msub><mo>≥</mo><mi>A</mi><mo>+</mo><mi>B</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(\\sum_{i} a_ix_i \\geq A) \\land (\\sum_i b_ix_i \\geq B) \\implies (\\sum_i (a_i + b_i)x_i \\geq A + B)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0497em;vertical-align:-0.2997em;\"></span><span class=\"mopen\">(</span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.162em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∧</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0497em;vertical-align:-0.2997em;\"></span><span class=\"mopen\">(</span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.162em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⟹</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0497em;vertical-align:-0.2997em;\"></span><span class=\"mopen\">(</span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.162em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span></span></span></span></p>\n</blockquote>\n<p>Knowing the math proof <em>before</em> you begin proving stuff is important :)</p>",
        "id": 435461962,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714076704
    },
    {
        "content": "<p>Hello everyone. I wanted to say that the tips from yesterday were really useful, mainly <span class=\"user-mention\" data-user-id=\"579936\">@Gareth Ma</span> , I embarked in a new proof and I'm getting the hang of it!</p>\n<p>Now I am proving the Multiplication property, and I actually finished it!:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fin.Tuple.Reflection</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fin.VecNotation</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">FinVec</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">PBSum</span> <span class=\"o\">(</span><span class=\"n\">cs</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∑</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">cs</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">xs</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">PBIneq</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">cs</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">PBSum</span> <span class=\"n\">cs</span> <span class=\"n\">xs</span> <span class=\"bp\">≥</span> <span class=\"n\">const</span>\n\n<span class=\"c1\">-- Multiplication</span>\n<span class=\"c1\">-- ∑i (a i * l i) ≥ A</span>\n<span class=\"c1\">-- c : ℕ</span>\n<span class=\"c1\">-- c &gt; 0</span>\n<span class=\"c1\">-- ⊢</span>\n<span class=\"c1\">-- ∑i (c * a i * l i) ≥ c*A</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Multiplication</span>\n  <span class=\"o\">{</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">PBIneq</span> <span class=\"n\">as</span> <span class=\"n\">xs</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"c1\">-- TODO: change `c` to ℕ</span>\n  <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hc0</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">PBIneq</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"n\">xs</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">PBIneq</span><span class=\"o\">,</span><span class=\"n\">PBSum</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">smul_apply</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Int.mul_assoc</span><span class=\"o\">]</span>\n\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.mul_sum</span> <span class=\"n\">Finset.univ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"n\">as</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">xs</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">symm</span><span class=\"o\">]</span>\n\n  <span class=\"c1\">-- Maybe this will work?</span>\n  <span class=\"c1\">-- apply @Nat.cast ℤ at c</span>\n\n  <span class=\"n\">apply</span> <span class=\"n\">mul_le_mul_iff_of_pos_left</span> <span class=\"n\">hc0</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">mpr</span>\n  <span class=\"n\">exact</span> <span class=\"n\">ha</span>\n  <span class=\"n\">done</span>\n</code></pre></div>\n<p>A last thing that I am stuck with is the implicit castings between Nat's, Fin 2s and Ints. As you can see in the comment, I would prefer <code>c :  ℕ</code> but I could only finish the proof when it was an integer. This should not make a difference, since I have proof that <code>c &gt; 0</code>, but this last part is vexing me. Any suggestions to perform the conversion?</p>",
        "id": 435670685,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1714172432
    },
    {
        "content": "<p>Without looking at your code, you might be interested in tactics like <code>apply_mod_cast</code> and <code>rw_mod_cast</code></p>",
        "id": 435671471,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1714173096
    },
    {
        "content": "<p>Glad to hear that I helped :) I can take a look at the code tomorrow. Note that c=0 works</p>",
        "id": 435677149,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714178105
    },
    {
        "content": "<p><code>lift c to Nat using hc0.le</code></p>",
        "id": 435717516,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1714199887
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Proof.20refactor.20.28suggestions.29.20and.20how.20to.20expand.20a.20definition/near/435717516\">said</a>:</p>\n<blockquote>\n<p><code>lift c to Nat using hc0.le</code></p>\n</blockquote>\n<p>Sorry, how is this done in practice?</p>",
        "id": 435752174,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1714219891
    },
    {
        "content": "<p>I would prefer to lift c to Int and reuse the same code from above</p>",
        "id": 435752427,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1714220116
    },
    {
        "content": "<p>How do you like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Int.ofNat_pos</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hc0</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_le_mul_iff_of_pos_left</span> <span class=\"n\">hc0</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_le_mul_iff_of_pos_left</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">convert</span> <span class=\"n\">hc0</span><span class=\"bp\">;</span> <span class=\"n\">norm_cast</span><span class=\"o\">)]</span>\n</code></pre></div>\n<p>(with <code>{c : ℕ}</code>)?</p>",
        "id": 435753226,
        "sender_full_name": "Richard Copley",
        "timestamp": 1714220817
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"671510\">Bernardo Borges</span> <a href=\"#narrow/stream/113489-new-members/topic/Proof.20refactor.20.28suggestions.29.20and.20how.20to.20expand.20a.20definition/near/435752427\">said</a>:</p>\n<blockquote>\n<p>I would prefer to lift c to Int and reuse the same code from above</p>\n</blockquote>\n<p>I think Yaël misinterpreted your question. His suggestion (<code>lift c to Nat using ...</code>) will change <code>c : Int</code> to <code>c : Nat</code>, and you can prove that new goal. But you are having the opposite problem: You want to have <code>c : Nat</code> as a hypothesis, then \"lift\" it to <code>c : Nat</code> (but this \"lift\" is different from Lean's <code>lift</code>)</p>",
        "id": 435753327,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714220904
    },
    {
        "content": "<p>Have you tried <code>zify</code>? :)</p>\n<p>Usage:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">lem_for_int</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lem_for_nat</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">zify</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> Now we have ↑n ^ 2 = ↑n * ↑n -/</span>\n  <span class=\"n\">exact</span> <span class=\"n\">lem_for_int</span>\n</code></pre></div>",
        "id": 435753335,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714220923
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">zify</span> <span class=\"n\">at</span> <span class=\"n\">hc0</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_le_mul_iff_of_pos_left</span> <span class=\"n\">hc0</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 435753373,
        "sender_full_name": "Richard Copley",
        "timestamp": 1714220989
    },
    {
        "content": "<p>Great! <span class=\"user-mention\" data-user-id=\"400544\">@Richard Copley</span> 's answer worked</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fin.Tuple.Reflection</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fin.VecNotation</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">FinVec</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">PBSum</span> <span class=\"o\">(</span><span class=\"n\">cs</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∑</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">cs</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">xs</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">PBIneq</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">cs</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">PBSum</span> <span class=\"n\">cs</span> <span class=\"n\">xs</span> <span class=\"bp\">≥</span> <span class=\"n\">const</span>\n\n<span class=\"c1\">-- Multiplication</span>\n<span class=\"c1\">-- ∑i (a i * l i) ≥ A</span>\n<span class=\"c1\">-- c : ℕ</span>\n<span class=\"c1\">-- c &gt; 0</span>\n<span class=\"c1\">-- ⊢</span>\n<span class=\"c1\">-- ∑i (c * a i * l i) ≥ c*A</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Multiplication</span>\n  <span class=\"o\">{</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">PBIneq</span> <span class=\"n\">as</span> <span class=\"n\">xs</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hc0</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">PBIneq</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"n\">xs</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">PBIneq</span><span class=\"o\">,</span><span class=\"n\">PBSum</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">smul_apply</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Int.mul_assoc</span><span class=\"o\">]</span>\n\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.mul_sum</span> <span class=\"n\">Finset.univ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"n\">as</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">xs</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">symm</span><span class=\"o\">]</span>\n\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">Int.ofNat_pos</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hc0</span>\n\n  <span class=\"n\">apply</span> <span class=\"n\">mul_le_mul_iff_of_pos_left</span> <span class=\"n\">hc0</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">mpr</span>\n  <span class=\"n\">exact</span> <span class=\"n\">ha</span>\n  <span class=\"n\">done</span>\n</code></pre></div>",
        "id": 435753583,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1714221137
    },
    {
        "content": "<p>What does zify do? I have to import it so maybe it's better to just use the  rw[]</p>",
        "id": 435753734,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1714221262
    },
    {
        "content": "<p>It's just a suggestion, in case you need it for another proof</p>",
        "id": 435753812,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714221331
    },
    {
        "content": "<blockquote>\n<p>What does zify do?</p>\n</blockquote>\n<p>I gave an example</p>",
        "id": 435753817,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714221338
    },
    {
        "content": "<p>Actually no it doesn't really work here, nevermind</p>",
        "id": 435753875,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1714221371
    },
    {
        "content": "<p>Oh I see, it takes all instances of Nat to Int</p>",
        "id": 435753895,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1714221394
    },
    {
        "content": "<p>Thanks for the answers! I achieved what was needed <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 435754183,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1714221677
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"671510\">Bernardo Borges</span> has marked this topic as resolved.</p>",
        "id": 436154270,
        "sender_full_name": "Notification Bot",
        "timestamp": 1714430877
    }
]