[
    {
        "content": "<p>I tried the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Fin</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Sqrt</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">Nat.zero</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span><span class=\"bp\">?</span>\n</code></pre></div>\n<p>Lean said:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"n\">eq_zero_of_zero_eq_one</span> <span class=\"n\">rfl</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>But the following gives an error on <code>rfl</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Fin</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Sqrt</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">Nat.zero</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"n\">eq_zero_of_zero_eq_one</span> <span class=\"n\">rfl</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>From the InfoView:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">FinError.lean</span><span class=\"o\">:</span><span class=\"mi\">5</span><span class=\"o\">:</span><span class=\"mi\">39</span>\n<span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">eq_zero_of_zero_eq_one</span> <span class=\"n\">rfl</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">rfl</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>I have two questions:</p>\n<ol>\n<li>Should we expect <code>apply?</code> to suggest something that Lean might not accept?</li>\n<li>Is the example provable?</li>\n</ol>",
        "id": 430067445,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1711632586
    },
    {
        "content": "<p>If <code>apply?</code> responds with something, it is provable.</p>\n<p>And yes, we do expect <code>apply?</code> to suggest things that Lean might not accept — but, it's not that there's no proof, it's that it didn't pretty print the proof it derived in a way that can be read back in and interpreted correctly. (We expect it only because of limitations in the pretty printer's ability to succeed in \"round tripping\".)</p>",
        "id": 430069284,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711633171
    },
    {
        "content": "<p>Sometimes setting <code>set_option pp.analysis true</code> gets it to pretty print with enough information to work. That doesn't appear to work here however.</p>",
        "id": 430069692,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711633317
    },
    {
        "content": "<p><code>set_option pp.explicit true</code> works</p>",
        "id": 430069784,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711633339
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">Nat.zero</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span>\n    <span class=\"bp\">@</span><span class=\"n\">eq_zero_of_zero_eq_one</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">HAdd.hAdd</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHAdd</span> <span class=\"n\">Nat</span> <span class=\"n\">instAddNat</span><span class=\"o\">)</span> <span class=\"n\">Nat.zero</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonAssocSemiring.toMulZeroOneClass</span>\n        <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">HAdd.hAdd</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHAdd</span> <span class=\"n\">Nat</span> <span class=\"n\">instAddNat</span><span class=\"o\">)</span> <span class=\"n\">Nat.zero</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semiring.toNonAssocSemiring</span>\n          <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">HAdd.hAdd</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHAdd</span> <span class=\"n\">Nat</span> <span class=\"n\">instAddNat</span><span class=\"o\">)</span> <span class=\"n\">Nat.zero</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommSemiring.toSemiring</span>\n            <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">HAdd.hAdd</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHAdd</span> <span class=\"n\">Nat</span> <span class=\"n\">instAddNat</span><span class=\"o\">)</span> <span class=\"n\">Nat.zero</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toCommSemiring</span>\n              <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">HAdd.hAdd</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHAdd</span> <span class=\"n\">Nat</span> <span class=\"n\">instAddNat</span><span class=\"o\">)</span> <span class=\"n\">Nat.zero</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Fin.instCommRing</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">HAdd.hAdd</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHAdd</span> <span class=\"n\">Nat</span> <span class=\"n\">instAddNat</span><span class=\"o\">)</span> <span class=\"n\">Nat.zero</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NeZero.succ</span> <span class=\"n\">Nat.zero</span><span class=\"o\">))))))</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">rfl</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">HAdd.hAdd</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHAdd</span> <span class=\"n\">Nat</span> <span class=\"n\">instAddNat</span><span class=\"o\">)</span> <span class=\"n\">Nat.zero</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 430069812,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711633347
    },
    {
        "content": "<p>Once you have that, you can simplify the term by hand.</p>",
        "id": 430069847,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711633360
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">Nat.zero</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"n\">eq_zero_of_zero_eq_one</span> <span class=\"o\">(</span><span class=\"n\">Eq.refl</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 430070130,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711633460
    },
    {
        "content": "<p>Thanks for the proof. Could the limitation be overcome?</p>",
        "id": 430071286,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1711633822
    },
    {
        "content": "<p>Well, <code>set_option pp.all true</code> theoretically overcomes that limitation, at the cost of having unreadable terms :-)</p>",
        "id": 430071827,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711633971
    },
    {
        "content": "<p>The <code>set_option pp.analyze true</code> option was meant to try to make round tripping work, but (1) as we see in this example, it doesn't always work and (2) apparently in practice it was too verbose as a default for all pretty printing.</p>",
        "id": 430072069,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711634042
    },
    {
        "content": "<p><code>exact?</code> and <code>apply?</code> should probably pretty print with <code>pp.analyze</code> true (and that algorithm needs more attention)</p>",
        "id": 430072397,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1711634141
    },
    {
        "content": "<p>Thanks for the explanation.</p>",
        "id": 430072596,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1711634187
    },
    {
        "content": "<p>Sometimes I think that <code>apply?</code> also mistakes which variables to use where.</p>",
        "id": 430106629,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1711642111
    },
    {
        "content": "<p>See for instance <a href=\"#narrow/stream/287929-mathlib4/topic/exact.3F.20failure/near/429662322\">this example</a>, where, besides the incorrect <code>Ne.symm</code> and metavariables, the second variable should have been <code>H</code> instead of repeated <code>hc</code>.</p>",
        "id": 430106938,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1711642200
    },
    {
        "content": "<p>Here is another problem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">main_odd</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha'</span> <span class=\"o\">:</span> <span class=\"n\">Odd</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"mi\">0</span> <span class=\"bp\">≠</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">heq</span>\n  <span class=\"k\">have</span> <span class=\"n\">ha''</span> <span class=\"o\">:</span> <span class=\"n\">Odd</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"c1\">-- `apply?` suggests</span>\n    <span class=\"n\">refine</span> <span class=\"n\">Nat.odd_add'.mpr</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">heq.symm</span><span class=\"o\">))</span>\n    <span class=\"c1\">-- which gives an error on `(?_ (id heq.symm))`</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Why is <code>apply?</code> producing suggestions involving expressions like <code>(?_ (id heq.symm))</code> above? It does not seem to make a lot of sense.</p>",
        "id": 432933179,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1712937090
    },
    {
        "content": "<p>That's weird. The goals that <code>apply?</code> reports show that it's really just saying \"you can prove this by reverting <code>heq</code>\"</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>Try this: refine Nat.odd_add'.mpr (?_ (id heq.symm))\nRemaining subgoals:\n⊢ 4 + a = 0 → (Odd a ↔ Even 4)\n⊢ Odd a ↔ Even 4\n</code></pre></div>",
        "id": 432935974,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1712937904
    },
    {
        "content": "<p>But the second subgoal subsumes the first, so reverting <code>heq</code> is completely unnecessary.</p>",
        "id": 432942131,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1712940076
    },
    {
        "content": "<p>Here is another failure:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Int.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- exact? fails, apply? does not produce anything useful</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Int.eq_of_mul_eq_mul_left</span> <span class=\"n\">ha</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>It works when I remove the import.</p>",
        "id": 432965219,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1712948413
    },
    {
        "content": "<p>The first suggestion from <code>apply?</code> is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">refine</span> <span class=\"n\">Int.neg_inj.mp</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">Ne.symm</span> <span class=\"n\">ha</span><span class=\"o\">)))</span>\n<span class=\"n\">Remaining</span> <span class=\"n\">subgoals</span><span class=\"o\">:</span>\n<span class=\"bp\">⊢</span> <span class=\"mi\">0</span> <span class=\"bp\">≠</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"bp\">-</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">c</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"bp\">-</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">c</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">-</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">c</span>\n</code></pre></div>\n<p>where again the last subgoal implies the other two (and this occurs <em>a lot</em>). It should just produce</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">refine</span> <span class=\"n\">Int.neg_inj.mp</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n<span class=\"n\">Remaining</span> <span class=\"n\">subgoals</span><span class=\"o\">:</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">-</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">c</span>\n</code></pre></div>\n<p>(not that this is useful in the example...).</p>",
        "id": 432965699,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1712948598
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Kim Morrison</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 432972517,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1712951695
    },
    {
        "content": "<p>You really don't want the first suggestion <code>apply?</code> produces to look like that:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">refine</span> <span class=\"n\">help</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">heq.symm</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">heq.symm</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">heq.symm</span><span class=\"o\">))</span>\n<span class=\"n\">Remaining</span> <span class=\"n\">subgoals</span><span class=\"o\">:</span>\n<span class=\"bp\">⊢</span> <span class=\"mi\">8</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">7</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Y</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">⊢</span> <span class=\"mi\">8</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">7</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Y</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">⊢</span> <span class=\"mi\">8</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">7</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Y</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">⊢</span> <span class=\"mi\">8</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">7</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Y</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">⊢</span> <span class=\"mi\">8</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">7</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Y</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">⊢</span> <span class=\"mi\">8</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">7</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Y</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">IsCoprime</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.63791</span> <span class=\"bp\">⋯</span><span class=\"o\">)</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.60679</span> <span class=\"bp\">⋯</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"mi\">8</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">7</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Y</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.70015</span> <span class=\"bp\">⋯</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"bp\">?</span><span class=\"n\">m.66903</span> <span class=\"bp\">⋯</span> <span class=\"bp\">*</span> <span class=\"bp\">?</span><span class=\"n\">m.73127</span> <span class=\"bp\">⋯</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">m.63791</span> <span class=\"bp\">⋯</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.60679</span> <span class=\"bp\">⋯</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"mi\">8</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">7</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Y</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">J</span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.66903</span> <span class=\"bp\">⋯</span> <span class=\"bp\">|</span> <span class=\"bp\">?</span><span class=\"n\">m.60679</span> <span class=\"bp\">⋯</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">J</span><span class=\"o\">(</span><span class=\"mi\">7</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">J</span><span class=\"o\">(</span><span class=\"mi\">7</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">J</span><span class=\"o\">(</span><span class=\"mi\">7</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">J</span><span class=\"o\">(</span><span class=\"mi\">7</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">J</span><span class=\"o\">(</span><span class=\"mi\">7</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">J</span><span class=\"o\">(</span><span class=\"mi\">7</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">IsCoprime</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.63791</span> <span class=\"bp\">⋯</span><span class=\"o\">)</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.60679</span> <span class=\"bp\">⋯</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">IsCoprime</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.63791</span> <span class=\"bp\">⋯</span><span class=\"o\">)</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.60679</span> <span class=\"bp\">⋯</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">J</span><span class=\"o\">(</span><span class=\"mi\">7</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.70015</span> <span class=\"bp\">⋯</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"bp\">?</span><span class=\"n\">m.66903</span> <span class=\"bp\">⋯</span> <span class=\"bp\">*</span> <span class=\"bp\">?</span><span class=\"n\">m.73127</span> <span class=\"bp\">⋯</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">m.63791</span> <span class=\"bp\">⋯</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.60679</span> <span class=\"bp\">⋯</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">?</span><span class=\"n\">m.70015</span> <span class=\"bp\">⋯</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"bp\">?</span><span class=\"n\">m.66903</span> <span class=\"bp\">⋯</span> <span class=\"bp\">*</span> <span class=\"bp\">?</span><span class=\"n\">m.73127</span> <span class=\"bp\">⋯</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">m.63791</span> <span class=\"bp\">⋯</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.60679</span> <span class=\"bp\">⋯</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">J</span><span class=\"o\">(</span><span class=\"mi\">7</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">J</span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.66903</span> <span class=\"bp\">⋯</span> <span class=\"bp\">|</span> <span class=\"bp\">?</span><span class=\"n\">m.60679</span> <span class=\"bp\">⋯</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">J</span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.66903</span> <span class=\"bp\">⋯</span> <span class=\"bp\">|</span> <span class=\"bp\">?</span><span class=\"n\">m.60679</span> <span class=\"bp\">⋯</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span>\n</code></pre></div>\n<p>Am I the only one who is seeing this?</p>",
        "id": 433036405,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1713004176
    },
    {
        "content": "<p>This seems to be a fairly recent regression.</p>",
        "id": 433037837,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1713005759
    },
    {
        "content": "<p>I think I have found the declaration that changes the behavior of <code>apply?</code> from \"good\" to \"bad\" (but I have no idea how it does it):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">axiom</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">symm</span><span class=\"o\">]</span> <span class=\"n\">Eq.symm</span> <span class=\"c1\">-- set in `Mathlib.Init.Logic`</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span><span class=\"bp\">?</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  Try this: refine test 3 a (?_ (id h.symm))</span>\n<span class=\"cm\">  Remaining subgoals:</span>\n<span class=\"cm\">  ⊢ 6 = a → a = f 3</span>\n<span class=\"cm\">  ⊢ a = f 3 -/</span>\n\n<span class=\"c1\">-- without `attribute [symm] Eq.symm`:</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  Try this: refine test 3 a ?h</span>\n<span class=\"cm\">  Remaining subgoals:</span>\n<span class=\"cm\">  ⊢ a = f 3</span>\n<span class=\"cm\">  -/</span>\n</code></pre></div>\n<p><a href=\"https://tqft.net/mathlib4files/Mathlib/Init/Logic\">file#Mathlib/Init/Logic</a> in line 45 does</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">symm</span><span class=\"o\">]</span> <span class=\"n\">Eq.symm</span>\n</code></pre></div>\n<p>Whatever the intended effect is, it also has the unintended effect on <code>apply?</code> shown above.<br>\nA knock-on effect of this bad behavior seems to be that the text produced by <code>apply?</code> in the infoview is extremely bloated, which (at least on my fairly fast laptop) makes scrolling through it in VSCode <em>extremely</em> sluggish, so that <code>apply?</code> becomes almost unusable except in very simple situations. (This had been much better until fairly recently.)</p>",
        "id": 433075865,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1713039826
    },
    {
        "content": "<p>The <code>symm</code> attribute is defined in <code>Lean/Meta/Tactic/Symm.lean</code>, which seems to have been created by <a href=\"https://github.com/leanprover/lean4/pull/3408\">lean4#3408</a> (maybe moved from <code>Std</code>). <span class=\"user-mention\" data-user-id=\"110994\">@Joe Hendrix</span>  <br>\nThe problematic behavior of <code>apply?</code> seems to predate the merging of this PR, though...</p>",
        "id": 433077756,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1713041563
    },
    {
        "content": "<p>Moving the discussion <a href=\"#narrow/stream/270676-lean4/topic/apply.3F.20and.20the.20.22symm.22.20attribute/near/433120818\">here</a>.</p>",
        "id": 433120904,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1713088096
    }
]