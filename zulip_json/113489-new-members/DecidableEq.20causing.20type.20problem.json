[
    {
        "content": "<p>Why is there a type error here, and how do I resolve it?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Notation</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">Rat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">m</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">rowListofMat</span> <span class=\"o\">:=</span> <span class=\"n\">List.map</span> <span class=\"n\">List.ofFn</span> <span class=\"o\">(</span><span class=\"n\">List.ofFn</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">rowListLength_eq_numRow</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">rowListofMat</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">rowListofMat_elt_length_eq_numCol</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">rowListofMat</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">rowLengthEq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">List.ofFn</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">List.ofFn</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">j</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">colListofMat</span> <span class=\"o\">:=</span> <span class=\"n\">List.map</span> <span class=\"n\">List.ofFn</span> <span class=\"o\">(</span><span class=\"n\">List.ofFn</span> <span class=\"n\">M.transpose</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">colListLength_eq_numCol</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">colListofMat</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">list_allZero</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Rat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"n\">l.all</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">==</span><span class=\"mi\">0</span><span class=\"o\">))</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">nonzInRowList_imp_nonzInColList</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">r</span> <span class=\"bp\">∈</span> <span class=\"n\">rowListofMat</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"n\">list_allZero</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">c</span> <span class=\"bp\">∈</span> <span class=\"n\">colListofMat</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"n\">list_allZero</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">row</span><span class=\"o\">,</span><span class=\"n\">row_rl</span><span class=\"o\">,</span><span class=\"n\">hrow</span><span class=\"o\">⟩</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.all_eq_true</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hrow</span><span class=\"bp\">;</span> <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">hrow</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hrow</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">xrow</span><span class=\"o\">,</span><span class=\"n\">xn0</span><span class=\"o\">⟩</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">List.indexOf</span> <span class=\"n\">x</span> <span class=\"n\">row</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">colListofMat</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">colListLength_eq_numCol</span><span class=\"o\">]</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">List.indexOf_lt_length.mpr</span> <span class=\"n\">row_rl</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">rowListofMat_elt_length_eq_numCol</span> <span class=\"n\">M</span> <span class=\"o\">⟨(</span><span class=\"n\">rowListofMat</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">indexOf</span> <span class=\"n\">row</span><span class=\"o\">,</span><span class=\"n\">this</span><span class=\"o\">⟩]</span>\n</code></pre></div>\n<p>The error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"o\">⟨</span><span class=\"n\">List.indexOf</span> <span class=\"n\">row</span> <span class=\"o\">(</span><span class=\"n\">rowListofMat</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">this</span><span class=\"o\">⟩</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">this</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">List.indexOf</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"n\">instBEqOfDecidableEq</span> <span class=\"n\">row</span> <span class=\"o\">(</span><span class=\"n\">rowListofMat</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">rowListofMat</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">List.indexOf</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"n\">List.instBEq</span> <span class=\"n\">row</span> <span class=\"o\">(</span><span class=\"n\">rowListofMat</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">rowListofMat</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>",
        "id": 439348087,
        "sender_full_name": "Vivek Rajesh Joshi",
        "timestamp": 1716031564
    },
    {
        "content": "<p>This looks like the LawfulBEq / DecidableEq diamond that I'm struggling to find the tracking issue for</p>",
        "id": 439349612,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716033123
    },
    {
        "content": "<p>The issue is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">instBEqOfDecidableEq</span> <span class=\"o\">:</span> <span class=\"n\">BEq</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">List.instBEq</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 439349755,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716033248
    },
    {
        "content": "<p>They do mean the same though, right?</p>",
        "id": 439350936,
        "sender_full_name": "Vivek Rajesh Joshi",
        "timestamp": 1716034504
    },
    {
        "content": "<p>How do I show that to Lean?</p>",
        "id": 439350939,
        "sender_full_name": "Vivek Rajesh Joshi",
        "timestamp": 1716034511
    },
    {
        "content": "<p>Ah, <a href=\"https://github.com/leanprover/lean4/pull/2038\">lean4#2038</a> is the tracking PR</p>",
        "id": 439351803,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716035441
    },
    {
        "content": "<p>I'm kinda new to all this <code>DecidableEq</code>, <code>Beq</code> and <code>InstBeq</code> stuff, can you explain what is going on here?</p>",
        "id": 439351919,
        "sender_full_name": "Vivek Rajesh Joshi",
        "timestamp": 1716035567
    },
    {
        "content": "<p>I think the best advice for now is to avoid <code>==</code> as much as possible when using Mathlib (by changing to <code>abbrev list_allZero (l : List Rat) : Prop := ∀ x ∈ l, x = 0</code>)</p>",
        "id": 439352606,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716036395
    },
    {
        "content": "<p>Okay, but how do I resolve the difference between the type of <code>this</code> and the expected type in the code above?</p>",
        "id": 439352711,
        "sender_full_name": "Vivek Rajesh Joshi",
        "timestamp": 1716036485
    },
    {
        "content": "<p><code>by convert this</code> fixes it</p>",
        "id": 439353303,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716037083
    },
    {
        "content": "<p>But ultimately this is really a lean bug</p>",
        "id": 439353332,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716037088
    },
    {
        "content": "<p>Okay, thanks!</p>",
        "id": 439353483,
        "sender_full_name": "Vivek Rajesh Joshi",
        "timestamp": 1716037244
    }
]