[
    {
        "content": "<p>If I have something like <code>h : a + b + c =  0</code>, is there syntax to refer to the left-hand side <code>a + b + c</code>?  I want to be able to do something like <code>let g := (the left-side of the equality in h)</code>.</p>",
        "id": 416992315,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1705758162
    },
    {
        "content": "<p>Can you un-xy? Why do you want to give the left hand side of the equality a name?</p>",
        "id": 416992407,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705758247
    },
    {
        "content": "<p>Because I am going to refer to the left-hand side many times (not exactly this expression here) but don't want to retype the whole thing. (In my case, the left-hand side is very long.)</p>",
        "id": 416992475,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1705758318
    },
    {
        "content": "<p>You know, there was a great trick for this in Lean 3, where you could do something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Lean 3 code</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 417047021,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1705805075
    },
    {
        "content": "<p>I don't know if it works in Lean 4 though</p>",
        "id": 417047034,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1705805092
    },
    {
        "content": "<p>Here's something we could have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Lean.Expr.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"lhs%\"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">Elab.Term.elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">none</span>\n  <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">lhs</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_rhs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">e</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sides</span><span class=\"bp\">?</span> <span class=\"k\">then</span>\n    <span class=\"n\">return</span> <span class=\"n\">lhs</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">throwError</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"Not an equality, iff, or HEq:{indentD e}\"</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"rhs%\"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">Elab.Term.elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">none</span>\n  <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_lhs</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rhs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">e</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sides</span><span class=\"bp\">?</span> <span class=\"k\">then</span>\n    <span class=\"n\">return</span> <span class=\"n\">rhs</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">throwError</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"Not an equality, iff, or HEq:{indentD e}\"</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">lhs</span><span class=\"bp\">%</span> <span class=\"n\">h</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  g : Nat := a + b + c</span>\n<span class=\"cm\">  -/</span>\n</code></pre></div>",
        "id": 417047136,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705805164
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"380294\">@Matt Diamond</span> I tried a few tricks, but couldn't get that to work.</p>",
        "id": 417047173,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705805210
    },
    {
        "content": "<p>That's unfortunate... it was pretty useful for handling unwieldy expressions</p>",
        "id": 417047269,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1705805291
    },
    {
        "content": "<p>it would be cool if the <code>change</code> tactic automatically created variables for you if they don't already exist</p>",
        "id": 417047394,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1705805426
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"397075\">@Kevin Cheung</span> Are you familiar with the <code>set</code> tactic? You could use that to define a new variable and it should automatically update any hypotheses that match the definition. The only downside is that you'll need to write out the expression (but only once).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">set</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">e</span> <span class=\"c1\">-- h's type is now `foo = 0`</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 417047754,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1705805780
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"579936\">@Gareth Ma</span> was working on a <code>setm</code> tactic for this a while back, with advice from <span class=\"user-mention\" data-user-id=\"548935\">@Thomas Murrills</span>. There's probably a PR around somewhere.</p>",
        "id": 417053109,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1705810618
    },
    {
        "content": "<p>Hi yes… my real life got busy and I couldn’t do any Lean the past weeks</p>",
        "id": 417053922,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1705811487
    },
    {
        "content": "<p>I can find it, it’s somewhere</p>",
        "id": 417053924,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1705811493
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/7890\">https://github.com/leanprover-community/mathlib4/pull/7890</a></p>",
        "id": 417053988,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1705811541
    },
    {
        "content": "<p>I don’t remember exactly what’s missing, but it must be something I didn’t understand, otherwise I would’ve implemented it lol</p>",
        "id": 417054011,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1705811582
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"380294\">@Matt Diamond</span> I hacked your idea together</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">change</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">_</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  a b c : ℕ</span>\n<span class=\"cm\">  x : ℕ := a + b + c</span>\n<span class=\"cm\">  h : x = 0</span>\n<span class=\"cm\">  ⊢ False</span>\n<span class=\"cm\">  -/</span>\n</code></pre></div>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>code</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Meta</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">withReverted</span>\n    <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonadLiftT</span> <span class=\"n\">MetaM</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonadControlT</span> <span class=\"n\">MetaM</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonadInfoTree</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">mvarId</span> <span class=\"o\">:</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fvarIds</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">FVarId</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">MVarId</span> <span class=\"bp\">→</span> <span class=\"n\">Array</span> <span class=\"n\">FVarId</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">MVarId</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">clearAuxDeclsInsteadOfRevert</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">Array</span> <span class=\"n\">FVarId</span> <span class=\"bp\">×</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">mvarId</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">mvarId.revert</span> <span class=\"n\">fvarIds</span> <span class=\"n\">true</span> <span class=\"n\">clearAuxDeclsInsteadOfRevert</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">mvarId</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">k</span> <span class=\"n\">mvarId</span> <span class=\"n\">xs</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">ys</span><span class=\"o\">,</span> <span class=\"n\">mvarId</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">mvarId.introNP</span> <span class=\"n\">xs.size</span>\n  <span class=\"n\">mvarId.withContext</span> <span class=\"k\">do</span>\n    <span class=\"n\">for</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"k\">in</span> <span class=\"n\">ys</span> <span class=\"k\">do</span>\n      <span class=\"n\">pushInfoLeaf</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">ofFVarAliasInfo</span> <span class=\"o\">{</span> <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">baseId</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">userName</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"n\">y.getUserName</span> <span class=\"o\">})</span>\n  <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">ys</span><span class=\"o\">,</span> <span class=\"n\">mvarId</span><span class=\"o\">)</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">withAutoBoundLet</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">TermElabM</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TermElabM</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">withReader</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">ctx</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">ctx</span> <span class=\"k\">with</span> <span class=\"n\">autoBoundImplicit</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">autoBoundImplicits</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span> <span class=\"o\">})</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">loop</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">SavedState</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TermElabM</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n      <span class=\"n\">try</span>\n        <span class=\"n\">k</span>\n      <span class=\"n\">catch</span>\n        <span class=\"bp\">|</span> <span class=\"n\">ex</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">isAutoBoundImplicitLocalException</span><span class=\"bp\">?</span> <span class=\"n\">ex</span> <span class=\"k\">with</span>\n          <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span>\n            <span class=\"c1\">-- Restore state, declare `n`, and try again</span>\n            <span class=\"n\">s.restore</span>\n            <span class=\"k\">let</span> <span class=\"n\">val</span> <span class=\"bp\">←</span> <span class=\"n\">Meta.mkFreshExprMVar</span> <span class=\"n\">none</span>\n            <span class=\"n\">Meta.withLetDecl</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Meta.inferType</span> <span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"n\">val</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span>\n              <span class=\"n\">withReader</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">ctx</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">ctx</span> <span class=\"k\">with</span> <span class=\"n\">autoBoundImplicits</span> <span class=\"o\">:=</span> <span class=\"n\">ctx.autoBoundImplicits.push</span> <span class=\"n\">x</span> <span class=\"o\">}</span> <span class=\"o\">)</span> <span class=\"k\">do</span>\n                <span class=\"n\">loop</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">saveState</span><span class=\"o\">)</span>\n          <span class=\"bp\">|</span> <span class=\"n\">none</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"n\">ex</span>\n    <span class=\"n\">loop</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">saveState</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Tactic</span> <span class=\"k\">in</span>\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">change</span> <span class=\"bp\">$</span><span class=\"n\">newType</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">loc</span><span class=\"o\">:</span><span class=\"n\">location</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"n\">withLocation</span> <span class=\"o\">(</span><span class=\"n\">expandOptLocation</span> <span class=\"o\">(</span><span class=\"n\">Lean.mkOptionalNode</span> <span class=\"n\">loc</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"n\">atLocal</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withSynthesize</span> <span class=\"k\">do</span>\n        <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"bp\">←</span> <span class=\"n\">getMainGoal</span>\n        <span class=\"k\">let</span> <span class=\"n\">hTy</span> <span class=\"bp\">←</span> <span class=\"n\">h.getType</span>\n        <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">mvar</span><span class=\"o\">,</span> <span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">withReverted</span> <span class=\"n\">g</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"k\">fun</span> <span class=\"n\">g</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n          <span class=\"n\">g.withContext</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">withAutoBoundLet</span> <span class=\"k\">do</span>\n            <span class=\"k\">let</span> <span class=\"n\">auto</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">read</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">autoBoundImplicits.toArray</span>\n            <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"bp\">←</span> <span class=\"n\">auto.foldlM</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:=</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">g</span> <span class=\"n\">fvar</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n              <span class=\"k\">let</span> <span class=\"n\">decl</span> <span class=\"bp\">←</span> <span class=\"n\">fvar.fvarId</span><span class=\"bp\">!.</span><span class=\"n\">getDecl</span>\n              <span class=\"n\">Prod.snd</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">g.let</span> <span class=\"n\">decl.userName</span> <span class=\"n\">decl.value</span> <span class=\"n\">decl.type</span><span class=\"o\">)</span>\n            <span class=\"n\">g.withContext</span> <span class=\"k\">do</span>\n            <span class=\"k\">let</span> <span class=\"n\">mvar</span> <span class=\"bp\">←</span> <span class=\"n\">Meta.mkFreshExprMVar</span> <span class=\"n\">none</span>\n            <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"bp\">←</span> <span class=\"n\">Term.elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">term</span> <span class=\"bp\">|</span> <span class=\"k\">show</span> <span class=\"bp\">$</span><span class=\"n\">newType</span> <span class=\"k\">from</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Term.exprToSyntax</span> <span class=\"n\">mvar</span><span class=\"o\">)))</span> <span class=\"n\">hTy</span>\n            <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">mvar</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n        <span class=\"k\">let</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">h'</span> <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"internal error with fvars\"</span>\n        <span class=\"n\">g.withContext</span> <span class=\"k\">do</span>\n        <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"bp\">←</span> <span class=\"n\">g.changeLocalDecl'</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Meta.inferType</span> <span class=\"n\">mvar</span><span class=\"o\">)</span>\n        <span class=\"n\">replaceMainGoal</span> <span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">])</span>\n      <span class=\"o\">(</span><span class=\"n\">atTarget</span> <span class=\"o\">:=</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"unimplemented\"</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">failed</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"change tactic failed\"</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">change</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">_</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  a b c : ℕ</span>\n<span class=\"cm\">  x : ℕ := a + b + c</span>\n<span class=\"cm\">  h : x = 0</span>\n<span class=\"cm\">  ⊢ False</span>\n<span class=\"cm\">  -/</span>\n</code></pre></div>\n</div></div>",
        "id": 417056793,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705814418
    },
    {
        "content": "<p>I'm not sure this is a good default for <code>change</code>, but it's interesting and worth considering as a tactic.</p>",
        "id": 417056895,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705814527
    },
    {
        "content": "<p>nice! yeah perhaps it could be a separate tactic</p>",
        "id": 417057331,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1705814966
    },
    {
        "content": "<p>Gareth's <code>setm</code> seems similar in function, just with slightly different syntax</p>",
        "id": 417057435,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1705815090
    },
    {
        "content": "<p>I would have expected the syntax to be <code>change ?x = _ at h</code></p>",
        "id": 417077803,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705835535
    },
    {
        "content": "<p>Or perhaps <code>$x</code></p>",
        "id": 417085718,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705842643
    },
    {
        "content": "<p>I think it shouldn't be a separate tactic if we manage to make one of Eric's or my syntax work</p>",
        "id": 417086840,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1705843513
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"380294\">Matt Diamond</span> <a href=\"#narrow/stream/113489-new-members/topic/Extracting.20left-hand.20side.20from.20an.20equality/near/417047754\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"397075\">Kevin Cheung</span> Are you familiar with the <code>set</code> tactic? You could use that to define a new variable and it should automatically update any hypotheses that match the definition. The only downside is that you'll need to write out the expression (but only once).</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">set</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">e</span> <span class=\"c1\">-- h's type is now `foo = 0`</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I didn't know about set, only let and have. This could work. Thanks!</p>",
        "id": 417087030,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1705843667
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Extracting.20left-hand.20side.20from.20an.20equality/near/417077803\">said</a>:</p>\n<blockquote>\n<p>I would have expected the syntax to be <code>change ?x = _ at h</code></p>\n</blockquote>\n<p>Sure -- my experiment was just to see if I could misuse the autoImplicits mechanism to get this to work. Maybe there will be a tactic one day where it'll be useful to auto-add additional let bindings like this.</p>",
        "id": 417112065,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705864176
    },
    {
        "content": "<p>Gareth's <code>setm</code> uses <code>?x</code> and it seems like a better idea on the grounds that you can predict what the new let bindings will be.</p>",
        "id": 417112138,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705864212
    },
    {
        "content": "<p>I just discovered a hack to get the Lean 3 trick <span class=\"user-mention\" data-user-id=\"380294\">@Matt Diamond</span> mentioned to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">refine</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  a b c d e : ℕ</span>\n<span class=\"cm\">  foo : ℕ := a + b + c + d + e</span>\n<span class=\"cm\">  h : foo = 0</span>\n<span class=\"cm\">  ⊢ False</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 417154472,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705896242
    },
    {
        "content": "<p>Here's a variation on it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">change</span> <span class=\"n\">type_of</span><span class=\"bp\">%</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">refine</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  a b c d e : ℕ</span>\n<span class=\"cm\">  foo : ℕ := a + b + c + d + e</span>\n<span class=\"cm\">  h : foo = 0</span>\n<span class=\"cm\">  ⊢ False</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 417154542,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705896282
    },
    {
        "content": "<p>There's a chance I just coded <code>change ... at ...</code> wrong and there's a way to get <code>change foo = 0 at h</code> by itself to work here. I think I remember that there was a tradeoff between <code>change foo = 0 at h</code> working and typeclass instance synthesis succeeding for things like numerals.</p>",
        "id": 417154690,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705896394
    },
    {
        "content": "<p>Getting <code>change</code> to work for this without breaking hasn't been successful yet. <a href=\"https://github.com/leanprover/std4/pull/555\">std4#555</a> is an attempt, but it seems to be choosing the wrong instances in <code>Std.Data.Int.DivMod</code>. I'm not sure why it's picking up on <code>Nat</code> instances rather than unifying with the <code>Int</code> ones if there's nothing that I can see triggering default instances.</p>",
        "id": 417167618,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705906275
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Extracting.20left-hand.20side.20from.20an.20equality/near/417154472\">said</a>:</p>\n<blockquote>\n<p>I just discovered a hack to get the Lean 3 trick <span class=\"user-mention silent\" data-user-id=\"380294\">Matt Diamond</span> mentioned to work:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">refine</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  a b c d e : ℕ</span>\n<span class=\"cm\">  foo : ℕ := a + b + c + d + e</span>\n<span class=\"cm\">  h : foo = 0</span>\n<span class=\"cm\">  ⊢ False</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This is amazing. But it looks like magic to me.  What are <code>refine</code> and <code>replace</code> actually doing under the hood?</p>",
        "id": 417211748,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1705923841
    },
    {
        "content": "<p>The <code>replace</code> tactic is cheating and not actually changing <code>h</code>, but replacing it.</p>\n<p>The key trick is that <code>refine</code> has the power to assign to <code>?_</code> metavariables at a certain step, and these are normally not assignable. (In <a href=\"https://github.com/leanprover/std4/pull/555\">std4#555</a> I tried giving <code>change</code> this power)</p>",
        "id": 417212315,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705924060
    },
    {
        "content": "<p>I see.</p>",
        "id": 417212458,
        "sender_full_name": "Kevin Cheung",
        "timestamp": 1705924111
    }
]