[
    {
        "content": "<p>I am trying to define whether a polynomial is homogeneous of a certain degree. The ring I am working with is a polynomial ring over F_2 in two variables. So far this is my approach. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">myRange</span><span class=\"o\">:</span><span class=\"n\">Finset</span> <span class=\"n\">ℕ</span><span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">homogeneous</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">MvPolynomial</span> <span class=\"n\">myRange</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">):</span><span class=\"kt\">Prop</span><span class=\"o\">:=</span><span class=\"kd\">by</span>\n<span class=\"k\">let</span> <span class=\"n\">totalDegrees</span> <span class=\"o\">:=</span><span class=\"n\">x.support.image</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">j</span><span class=\"bp\">=&gt;</span> <span class=\"n\">Finset.sum</span> <span class=\"n\">myRange</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">j</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>Then lean complains with </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">j</span> <span class=\"n\">i</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">i</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">ℕ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">myRange</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>Is there a way to fix this. If I understand things correctly, then  { x // x ∈ myRange } consists of pairs \\langle i,i_is_in_myRange\\rangle. How can I obtain the second part of the argument. Or is there a better way to do this ?</p>",
        "id": 411277851,
        "sender_full_name": "Henrik Rueping",
        "timestamp": 1704410826
    },
    {
        "content": "<p>The easiest thing to do is to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MvPolynomial.IsHomogeneous#doc\">docs#MvPolynomial.IsHomogeneous</a> from mathlib</p>",
        "id": 411278208,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1704411039
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"675265\">Henrik Rueping</span> has marked this topic as resolved.</p>",
        "id": 411327001,
        "sender_full_name": "Notification Bot",
        "timestamp": 1704442863
    }
]