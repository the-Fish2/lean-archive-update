[
    {
        "content": "<p>Hello! In trying to prove something, I found myself wanting to use the following result.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">Summable</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n       <span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Is this in mathlib or is there an easy way to establish this? I know that, if the return type of g were <code>NNReal</code> instead, this is simply <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=tsum_eq_zero_iff#doc\">docs#tsum_eq_zero_iff</a>. However, it seems like a hassle to have to change everything concerning <code>g</code> because of this, and I believe the result would also be useful in this form.</p>",
        "id": 425992033,
        "sender_full_name": "João Camarneiro",
        "timestamp": 1710184365
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=hasSum_zero_iff_of_nonneg#doc\">docs#hasSum_zero_iff_of_nonneg</a>, but weirdly enough we don’t seem to have the tsum version</p>",
        "id": 425994245,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1710185260
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/113489-new-members/topic/Infinite.20sum.20is.20zero.20iff.20every.20term.20is.20zero/near/425994245\">said</a>:</p>\n<blockquote>\n<p>We have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=hasSum_zero_iff_of_nonneg#doc\">docs#hasSum_zero_iff_of_nonneg</a>, but weirdly enough we don’t seem to have the tsum version</p>\n</blockquote>\n<p>Thank you! With that, this does the trick:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">Summable</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">_</span> <span class=\"bp\">↔</span> <span class=\"n\">HasSum</span> <span class=\"n\">g</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Summable.hasSum_iff</span> <span class=\"n\">h'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n    <span class=\"n\">_</span> <span class=\"bp\">↔</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">hasSum_zero_iff_of_nonneg</span> <span class=\"n\">h</span>\n    <span class=\"n\">_</span> <span class=\"bp\">↔</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">Function.funext_iff</span>\n</code></pre></div>",
        "id": 425999585,
        "sender_full_name": "João Camarneiro",
        "timestamp": 1710187402
    }
]