[
    {
        "content": "<p>Hi. Let's say I need some auxiliary sequence to prove some theorem in Lean. This sequence would be defined inductively using <code>choose</code>.</p>\n<p>Here is a minimal example, where, given a binary relation <code>P</code>, I try to build a sequence <code>T</code> with <code>P Nat.zero (T Nat.zero)</code>, and <code>P (T n) (T n.succ)</code> for all <code>n: Nat</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Init.Classical</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Classical</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">HP</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"n\">p</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Nat.zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">choose</span> <span class=\"o\">(</span><span class=\"n\">HP</span> <span class=\"n\">Nat.zero</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">choose</span> <span class=\"o\">(</span><span class=\"n\">HP</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"n\">m</span><span class=\"o\">))</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">T0</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"n\">Nat.zero</span> <span class=\"bp\">=</span> <span class=\"n\">choose</span> <span class=\"o\">(</span><span class=\"n\">HP</span> <span class=\"n\">Nat.zero</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"c1\">-- rfl doesn't work</span>\n    <span class=\"gr\">sorry</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">T1</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">Nat.zero</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"n\">Nat.zero</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"c1\">-- this doesn't work either</span>\n    <span class=\"c1\">-- have := choose_spec (HP Nat.zero)</span>\n    <span class=\"c1\">-- exact this</span>\n    <span class=\"gr\">sorry</span>\n\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"kn\">section</span>\n</code></pre></div>\n<p>As you see, I am unable to prove even the most basic assertions about <code>T</code>. For instance, although <code>T Nat.zero</code> is basically given the definition of <code>choose (HP Nat.zero)</code>, I cannot prove that simple fact.</p>\n<p>You could say that it would be better to build the sequence <em>outside the proof</em>, but in the actual proof, <code>T</code> depends on a large number of local hypotheses (some of which come from a <code>by_cases</code>) that it would very cumbersome to reproduce in a global context. So let's pretend that I really need to build <code>T</code> <em>inside</em> the proof.</p>\n<p>What's the correct way to do this, assuming there <em>is</em> one?</p>\n<p>Note: I don't want to use <code>mathlib4</code>, the main point of my work being to develop an alternative to <code>mathlib</code> for basic undergraduate calculus (using different ways of doing it). I may copy the <code>mathlib</code> way, if needed.</p>\n<p>Bonus question: there is no <code>noncomputable let rec</code>, as far as I know. This forced me to put all the stuff above inside a <code>noncomputable section</code>. What is the equivalent of <code>noncomputable def</code>, but for a <code>let</code>?</p>",
        "id": 427369138,
        "sender_full_name": "LB",
        "timestamp": 1710746998
    },
    {
        "content": "<p>You're looking for the <code>choose</code> tactic I think:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">choose</span> <span class=\"n\">T</span> <span class=\"n\">h</span> <span class=\"n\">using</span> <span class=\"n\">HP</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  T : ℕ → ℕ</span>\n<span class=\"cm\">  h : ∀ (n : ℕ), P n (T n)</span>\n<span class=\"cm\">  -/</span>\n</code></pre></div>",
        "id": 427370406,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710747257
    },
    {
        "content": "<p>You're iterating <code>T</code> though, so it might take some more work than this. (Maybe it's just <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.iterate#doc\">docs#Nat.iterate</a> applied to <code>T</code>, evaluated at <code>0</code>?)</p>",
        "id": 427370632,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710747314
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/let.20rec.20in.20a.20proof.20using.20choose/near/427370406\">said</a>:</p>\n<blockquote>\n<p>You're looking for the <code>choose</code> tactic I think:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">choose</span> <span class=\"n\">T</span> <span class=\"n\">h</span> <span class=\"n\">using</span> <span class=\"n\">HP</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  T : ℕ → ℕ</span>\n<span class=\"cm\">  h : ∀ (n : ℕ), P n (T n)</span>\n<span class=\"cm\">  -/</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thank you. I'll have a look at that.</p>",
        "id": 427372658,
        "sender_full_name": "LB",
        "timestamp": 1710747758
    },
    {
        "content": "<p>This fails your \"no mathlib\" requirement since <code>choose</code> is a mathlib tactic though.</p>",
        "id": 427372746,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710747785
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/let.20rec.20in.20a.20proof.20using.20choose/near/427372746\">said</a>:</p>\n<blockquote>\n<p>This fails your \"no mathlib\" requirement since <code>choose</code> is a mathlib tactic though.</p>\n</blockquote>\n<p>Not really a problem, and not the first time I find myself copying the <code>mathlib</code> way of doing things in certain circumstances...</p>\n<p>I have literally hundreds of lines of code borrowed from mathlib in my library... :)</p>",
        "id": 427372966,
        "sender_full_name": "LB",
        "timestamp": 1710747834
    },
    {
        "content": "<p>(Is there any way you can make your library a layer on top of mathlib? It could save a lot of work if you don't have to do everything from scratch.)</p>",
        "id": 427373853,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710748029
    },
    {
        "content": "<p>Also, <code>let rec</code> inside of proofs doesn't work. You don't have access to the definition until <em>after</em> the theorem is proved unfortunately.</p>",
        "id": 427373920,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710748052
    },
    {
        "content": "<p>Okay. I may have missed that. I was hoping it would,  as <code>let</code> <em>does</em> work (cumbersome, but it works).</p>\n<p>Yes, you're right. I just tried a simpler version of <code>T</code> without <code>choose</code>, and it didn't work, as you said.</p>\n<p>I guess I'm in for a very thorough study of inductive constructors...</p>",
        "id": 427375395,
        "sender_full_name": "LB",
        "timestamp": 1710748377
    },
    {
        "content": "<p>By the way, here's something equivalent to <code>choose T' h' using HP</code> using only (I think) core tactics:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">T'</span><span class=\"o\">,</span> <span class=\"n\">h'</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">T'</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">T'</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">exists</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">choose</span> <span class=\"o\">(</span><span class=\"n\">HP</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n      <span class=\"n\">intro</span> <span class=\"n\">n</span>\n      <span class=\"n\">apply</span> <span class=\"n\">choose_spec</span>\n</code></pre></div>",
        "id": 427376051,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710748528
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/let.20rec.20in.20a.20proof.20using.20choose/near/427373853\">said</a>:</p>\n<blockquote>\n<p>(Is there any way you can make your library a layer on top of mathlib? It could save a lot of work if you don't have to do everything from scratch.)</p>\n</blockquote>\n<p>I've been thinking about that for a while... But I'm (at this point) too afraid of collisions. It seems dangerous to use tactics I have not defined myself, cause they would be based on theorems I have not proved in my library. Maybe when I'm secure enough in my knowledge of lean 4.</p>",
        "id": 427376840,
        "sender_full_name": "LB",
        "timestamp": 1710748696
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/let.20rec.20in.20a.20proof.20using.20choose/near/427376051\">said</a>:</p>\n<blockquote>\n<p>By the way, here's something equivalent to <code>choose T' h' using HP</code> using only (I think) core tactics:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">T'</span><span class=\"o\">,</span> <span class=\"n\">h'</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">T'</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">T'</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">exists</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">choose</span> <span class=\"o\">(</span><span class=\"n\">HP</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n      <span class=\"n\">intro</span> <span class=\"n\">n</span>\n      <span class=\"n\">apply</span> <span class=\"n\">choose_spec</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Yes! That's the sort of things I was envisioning. Thank you for the idea! I'll try to work this out (later, now I'm off to see my students...).</p>",
        "id": 427377116,
        "sender_full_name": "LB",
        "timestamp": 1710748762
    },
    {
        "content": "<p>It's becoming clearer everyday that I should avoid using <code>let</code> in my future endeavours, and prefer to use <code>have</code> with existentials.</p>",
        "id": 427377856,
        "sender_full_name": "LB",
        "timestamp": 1710748914
    },
    {
        "content": "<p>Note that <code>let rec</code> is a special construct, very different from <code>let</code>. It constructs an auxiliary definition while capturing the current scope, and it supports mutual recursion.</p>",
        "id": 427378247,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710748986
    },
    {
        "content": "<blockquote>\n<p>cause they would be based on theorems I have not proved in my library</p>\n</blockquote>\n<p>You don't have to justify your project, but what's the goal? If you want a library that's useful for <em>doing</em> basic undergrad calculus, then there's no harm in using mathlib theorems to set it up (students wouldn't see the mathlib theorems). But if you're wanting to make a library whose proofs are <em>all</em> formed in a certain way, maybe so students can learn math <em>from</em> the construction of the library, then I could see you wanting to be more careful.</p>",
        "id": 427378561,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710749053
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/let.20rec.20in.20a.20proof.20using.20choose/near/427378561\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>cause they would be based on theorems I have not proved in my library</p>\n</blockquote>\n<p>You don't have to justify your project, but what's the goal? If you want a library that's useful for <em>doing</em> basic undergrad calculus, then there's no harm in using mathlib theorems to set it up (students wouldn't see the mathlib theorems). But if you're wanting to make a library whose proofs are <em>all</em> formed in a certain way, maybe so students can learn math <em>from</em> the construction of the library, then I could see you wanting to be more careful.</p>\n</blockquote>\n<p>My goal, or maybe I should say my <em>goals</em>, are a little different. For the last ten years or so, I have been teaching undergrad math to students with a technical mind. Moreover, the students changed, in part due to covid restrictions, in part because the new generation of students is less willing to learn things. Lately I found myself simplifying things a lot for my students, and basically <em>changing the course matter</em> while keeping the original goals.</p>\n<p>Last year was a turning point, and I rewrote the whole theoretical base, to stay on solid ground. It was about the same time I heard about lean (I had dabbled in coq before).</p>\n<p>There, you have my primary goal: to use lean to check that all the material on which I'm basing my teaching, is still sound. Or change the material, if it is not.</p>\n<p>I decided that I would stop the project as soon as I manage to prove that 3.14 &lt; π &lt; 3.15. One of the challenges is to find a definition for π. No hand-waving, no RIemann integration (primitives of continuous functions are allowed, integrals of continuous functions are allowed), no uniform continuity (I still do uniform continuity locally in the library), no Cauchy sequence. No uniform convergence. No monotone convergence, no dominated convergence. Powers series are allowed, at zero only (no holomorphic functions), and you can differentiate power series on the open <em>real</em> domain of convergence only. All the stuff should be proved.</p>\n<p>I also changed the way I teach <em>limits</em>: uniqueness isn't a requirement anymore. I have good reasons to think that the theory is working. This has to be checked, too.</p>\n<p>Secondary goals: have fun + be able to contribute to mathlib at some point.</p>",
        "id": 427452361,
        "sender_full_name": "LB",
        "timestamp": 1710763004
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 427453009,
        "sender_full_name": "LB",
        "timestamp": 1710763145
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 427453727,
        "sender_full_name": "LB",
        "timestamp": 1710763303
    },
    {
        "content": "<p>Interesting motivation, and it's nice to see Lean being used as a tool for thought.</p>\n<p>In my thesis, I had included some theory of filters as background material, and there was some part of how I was developing it that I wasn't sure about. I reached for Lean to work through (and correct) some of the reasoning.</p>",
        "id": 427508488,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710774804
    },
    {
        "content": "<p>By the way, my favorite definition for π (used in the metamath database) is \"the first positive zero of the <code>sin</code> function\", or (slightly easier to prove the key theorems about) \"twice the first positive zero of the <code>cos</code> function\", where <code>sin</code> and <code>cos</code> are defined as power series. You can use some simple bounds on the power series, plus the double angle formulas, to show that <code>cos 1 &gt; 0</code> and <code>cos 2 &lt; 0</code> (or <code>sin 2 &gt; 0</code> and <code>sin 4 &lt; 0</code>) and then use the intermediate value theorem to prove that a root exists and 2 &lt; π &lt; 4.</p>",
        "id": 427534738,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710781573
    },
    {
        "content": "<p>(Just checked mathlib, and it's using my favorite definition already. Coincidence?)</p>",
        "id": 427535503,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710781812
    },
    {
        "content": "<p>I think that satisfies all your criteria. The main difference from mathlib is that you would probably define <code>sin</code> directly instead of in terms of the <code>exp</code> function if you want to avoid complex numbers</p>",
        "id": 427536634,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710782196
    },
    {
        "content": "<p>Mine is the limit (at infinity) of f = 2*arctan, which is interesting in itself as :</p>\n<ul>\n<li>it is easily built as a primitive of 2/(1+x^2)</li>\n<li>cos and sin are easily built from the inverse of f</li>\n<li>one easily gets that π=f(1/3) + f(1/2), which leads to easy approximations using the fact that for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>≥</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">x\\ge 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>, one has <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>≤</mo><mn>2</mn><msubsup><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>0</mn></mrow><mi>n</mi></msubsup><mfrac><mrow><mo stretchy=\"false\">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy=\"false\">)</mo><mi>k</mi></msup><mtext> </mtext><msup><mi>x</mi><mrow><mn>2</mn><mi>k</mi><mo>+</mo><mn>1</mn></mrow></msup></mrow><mrow><mn>2</mn><mi>k</mi><mo>+</mo><mn>1</mn></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">f(x)\\le 2\\sum\\limits_{k=0}^{n}\\frac{(-1)^k\\,x^{2k+1}}{2k+1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.3535em;vertical-align:-1.0021em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3514em;\"><span style=\"top:-2.0979em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop op-symbol small-op\">∑</span></span></span><span style=\"top:-3.95em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0021em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1339em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.485em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\"><span class=\"mclose mtight\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.927em;\"><span style=\"top:-2.931em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span><span class=\"mspace mtight\" style=\"margin-right:0.1952em;\"></span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.927em;\"><span style=\"top:-2.931em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4033em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> even and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>≥</mo><mn>2</mn><msubsup><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>0</mn></mrow><mi>n</mi></msubsup><mfrac><mrow><mo stretchy=\"false\">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy=\"false\">)</mo><mi>k</mi></msup><mtext> </mtext><msup><mi>x</mi><mrow><mn>2</mn><mi>k</mi><mo>+</mo><mn>1</mn></mrow></msup></mrow><mrow><mn>2</mn><mi>k</mi><mo>+</mo><mn>1</mn></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">f(x)\\ge 2\\sum\\limits_{k=0}^{n}\\frac{(-1)^k\\,x^{2k+1}}{2k+1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.3535em;vertical-align:-1.0021em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3514em;\"><span style=\"top:-2.0979em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop op-symbol small-op\">∑</span></span></span><span style=\"top:-3.95em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0021em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1339em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.485em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\"><span class=\"mclose mtight\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.927em;\"><span style=\"top:-2.931em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span><span class=\"mspace mtight\" style=\"margin-right:0.1952em;\"></span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.927em;\"><span style=\"top:-2.931em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4033em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> odd (which can be proved inductively without any theory of integration or power series, because the difference is monotonic)</li>\n</ul>",
        "id": 427537440,
        "sender_full_name": "LB",
        "timestamp": 1710782428
    },
    {
        "content": "<p>That's the one I use.</p>",
        "id": 427537546,
        "sender_full_name": "LB",
        "timestamp": 1710782463
    },
    {
        "content": "<p>(I suspect we have different definitions of \"easy\" <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> ) That's certainly a theory I have not seen before. Seems difficult to prove stuff like the angle addition formula with cos defined as some algebra on an inverse of a primitive of another inverse function...</p>",
        "id": 427538949,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710782946
    },
    {
        "content": "<p>Actually I am interested to know how specifically you build <code>cos</code> and <code>sin</code> from the inverse of <code>f</code>. Wouldn't you have to paste a bunch of curve sections together and fill in the holes?</p>",
        "id": 427539347,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710783082
    },
    {
        "content": "<p>re: \"without any theory of integration\", didn't you just use primitives in the definition? FTR that's the thing that makes me disprefer this definition, you need a theory of derivatives and/or integrals, rather than just power series and limits</p>",
        "id": 427539807,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710783238
    },
    {
        "content": "<p>The inverse function of f is defined on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mo>−</mo><mi>π</mi><mo separator=\"true\">,</mo><mi>π</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(-\\pi,\\pi)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mclose\">)</span></span></span></span>. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>cos</mi><mo>⁡</mo></mrow><annotation encoding=\"application/x-tex\">\\cos</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mop\">cos</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>sin</mi><mo>⁡</mo></mrow><annotation encoding=\"application/x-tex\">\\sin</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6679em;\"></span><span class=\"mop\">sin</span></span></span></span> are built on top of that. You also get some algebraic properties using the definition of f. Some of them give <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>cos</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>π</mi><mo>−</mo><mi>t</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo>−</mo><mi>cos</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\cos(\\pi-t)=-\\cos(t)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">cos</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">−</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\">cos</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>sin</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>π</mi><mo>−</mo><mi>t</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>sin</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\sin(\\pi-t)=\\sin(t)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">sin</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">sin</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>sin</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">\\sin(t)&gt;0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">sin</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi><mo>∈</mo><mo stretchy=\"false\">(</mo><mn>0</mn><mo separator=\"true\">,</mo><mi>π</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">t\\in(0,\\pi)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6542em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mclose\">)</span></span></span></span>. Those can be extended to the periodic extensions, and provide us with a way to prove differentiability at <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mi>π</mi></mrow><annotation encoding=\"application/x-tex\">-\\pi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi></mrow><annotation encoding=\"application/x-tex\">\\pi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span></span></span></span> using differentiability at <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>.</p>\n<p>I'm not saying those definitions are good in a general sense, but I find them good in the restricted context of the course I give to my students (which <em>starts</em> with a theory of derivatives)... Moreover, my students <em>know</em> the formulas giving <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>cos</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\cos(t)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">cos</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>sin</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\sin(t)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">sin</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span></span></span></span> in terms of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>tan</mi><mo>⁡</mo><mo fence=\"true\" stretchy=\"true\" minsize=\"1.2em\" maxsize=\"1.2em\">(</mo><mfrac><mi>t</mi><mn>2</mn></mfrac><mo fence=\"true\" stretchy=\"true\" minsize=\"1.2em\" maxsize=\"1.2em\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\tan\\bigl(\\frac t 2\\bigr)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.2em;vertical-align:-0.35em;\"></span><span class=\"mop\">tan</span><span class=\"mopen\"><span class=\"delimsizing size1\">(</span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8246em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">t</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\"><span class=\"delimsizing size1\">)</span></span></span></span></span> because they have to learn them for the computations of certain integrals.</p>\n<p>Actually, addition formulas are difficult to find if you don't have a theory of derivatives, even for power series: formula <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>exp</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>exp</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mo stretchy=\"false\">)</mo><mo>×</mo><mi>exp</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>b</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\exp(a+b)=\\exp(a)\\times\\exp(b)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">exp</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">exp</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">exp</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span></span></span></span> isn't so easy because of technicalities when taking limits.</p>",
        "id": 427541675,
        "sender_full_name": "LB",
        "timestamp": 1710783820
    },
    {
        "content": "<p>IIRC you need <a href=\"https://en.wikipedia.org/wiki/Cauchy_product#Proof_of_Mertens.27_theorem\">Mertens' theorem</a> to prove that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>e</mi><mrow><mi>x</mi><mo>+</mo><mi>y</mi></mrow></msup><mo>=</mo><msup><mi>e</mi><mi>x</mi></msup><msup><mi>e</mi><mi>y</mi></msup></mrow><annotation encoding=\"application/x-tex\">e^{x+y}=e^xe^y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7713em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7713em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"mbin mtight\">+</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">y</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6644em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">y</span></span></span></span></span></span></span></span></span></span></span> with the power series definition</p>",
        "id": 427542409,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710784045
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/let.20rec.20in.20a.20proof.20using.20choose/near/427542409\">said</a>:</p>\n<blockquote>\n<p>IIRC you need <a href=\"https://en.wikipedia.org/wiki/Cauchy_product#Proof_of_Mertens.27_theorem\">Mertens' theorem</a> to prove that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>e</mi><mrow><mi>x</mi><mo>+</mo><mi>y</mi></mrow></msup><mo>=</mo><msup><mi>e</mi><mi>x</mi></msup><msup><mi>e</mi><mi>y</mi></msup></mrow><annotation encoding=\"application/x-tex\">e^{x+y}=e^xe^y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7713em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7713em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"mbin mtight\">+</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">y</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6644em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">y</span></span></span></span></span></span></span></span></span></span></span> with the power series definition</p>\n</blockquote>\n<p>Yes, those are the technicalities I was talking about...</p>\n<p>Using derivatives, things are much easier: you first show (without any theory of differential equations) that any <em>real</em> function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> st <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>y</mi><mrow><mo mathvariant=\"normal\">′</mo><mo mathvariant=\"normal\">′</mo></mrow></msup><mo>+</mo><mi>y</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">y&#x27;&#x27;+y=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9463em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> must be a linear combination of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>cos</mi><mo>⁡</mo></mrow><annotation encoding=\"application/x-tex\">\\cos</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mop\">cos</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>sin</mi><mo>⁡</mo></mrow><annotation encoding=\"application/x-tex\">\\sin</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6679em;\"></span><span class=\"mop\">sin</span></span></span></span> (differentiate <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>z</mi><mn>2</mn></msup><mo>+</mo><msup><mi>z</mi><mrow><mo mathvariant=\"normal\">′</mo><mn>2</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">z^2+z&#x27;^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′2</span></span></span></span></span></span></span></span></span></span></span></span>, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>z</mi><mo>=</mo><mi>y</mi><mo>−</mo><mi>a</mi><mi>cos</mi><mo>⁡</mo><mo>−</mo><mi>b</mi><mi>sin</mi><mo>⁡</mo></mrow><annotation encoding=\"application/x-tex\">z=y-a\\cos-b\\sin</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7778em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\">cos</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">−</span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\">sin</span></span></span></span> for suitable <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span>). Then you use that fact with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi><mo>:</mo><mi>t</mi><mo>↦</mo><mi>cos</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mo>+</mo><mi>t</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">y:t\\mapsto\\cos(a+t)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6261em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">cos</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span></span></span></span>.</p>",
        "id": 427543594,
        "sender_full_name": "LB",
        "timestamp": 1710784426
    },
    {
        "content": "<p>Update on my question: I didn't manage to build my own version of inductive local definitions inside tactic proofs using <code>Nat.recOn</code> and <code>Nat.brecOn</code>.</p>\n<p>So I decided finally to build my auxiliary sequence <code>T</code> <em>outside</em> the proof, as a<code>private noncomputable def T</code> with all the hypotheses included as parameters of <code>T</code>, then use it inside the proof while passing the real hypotheses as arguments of <code>T</code>.</p>\n<p>It works but I still would like it very much if someone could give me an explanation of why the <code>let rec</code> approach doesn't work. And perhaps tell me why, when you define a <code>let rec</code> in that type of context, the resulting term doesn't appear in my infoview, while the <code>let</code> definitions <em>do</em> appear.</p>\n<p>That sort of feedback would be very useful, just to be sure that the definition is sound and syntactically correct, for instance.</p>\n<p>Should I create an issue in the repo? Or is there something I fail to understand about <code>let rec</code> s?</p>",
        "id": 427819913,
        "sender_full_name": "LB",
        "timestamp": 1710886375
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/let.20rec.20in.20a.20proof.20using.20choose/near/427378247\">said</a>:</p>\n<blockquote>\n<p>Note that <code>let rec</code> is a special construct, very different from <code>let</code>. It constructs an auxiliary definition while capturing the current scope, and it supports mutual recursion.</p>\n</blockquote>\n<p>The <code>let</code> tactic creates a local definition using the <code>let</code> expression. When you do <code>let x := v</code> it's sort of like doing <code>refine let x := v; ?_</code> where <code>?_</code> becomes your new goal with the new binding.</p>\n<p>The <code>let rec</code> tactic creates an auxiliary <em>global</em> definition (that's why it doesn't appear in your context). It can be mutually recursive with the theorem you're proving itself. There is a separate step once the proof/definition is done where the \"equation compiler\" works out how the (mutual) recursion should be turned expressions using the underlying recursors.</p>",
        "id": 427846014,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710904030
    },
    {
        "content": "<p>Maybe if a <code>let rec</code> in a proof doesn't refer to the theorem, and you try unfolding it, it could try to turn the so-called \"pre-definition\" into a definition via that equation compiler?</p>\n<p>In any case, there's no worry about soundness. Everything will get checked by the kernel once the <code>let rec</code> has been completely processed.</p>",
        "id": 427847600,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710905200
    },
    {
        "content": "<p>Thank you very much for your thorough explanation. I must admit that I was a bit bewildered by the exact meaning of \"capturing the current scope\".</p>\n<p>That clarifies my secondary problem.</p>\n<p>Yet, the principal one remains. How do you even use the <code>let rec</code> term? I cannot find any tactic that manages to prove anything about it.</p>\n<p>When I define it \"outside\" a proof like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Nat.zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">choose</span> <span class=\"o\">(</span><span class=\"n\">HP</span> <span class=\"n\">Nat.zero</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">choose</span> <span class=\"o\">(</span><span class=\"n\">HP</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"n\">m</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>I can prove that <code>T 0 = choose (HP Nat.zero)</code> for instance:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">choose</span> <span class=\"o\">(</span><span class=\"n\">HP</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>or that <code>P 0 (T 0)</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">choose_spec</span> <span class=\"o\">(</span><span class=\"n\">HP</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Both proofs work perfectly. None of them work when I define <code>T</code>  as a <code>let rec</code> inside the proof of a(nother) theorem. I suspect that, <em>again</em>, it has something to do with \"capturing the scope\", like some sort of snake biting its own tail: in the context of finding a proof of the scoping theorem, using an object that is defined <em>from</em> / <em>in relation</em> to the theorem itself would lead to a loophole / not well-founded recursion, but I'm not sure... Kyle says that this comes from the fact that the object is only finalized <em>after</em> the proof, but the examples that are given in the <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/induction_and_recursion.html?highlight=let%20rec#local-recursive-declarations\">documentation</a> seem to use the construct without any problem (which is a good point, otherwise <code>let rec</code> couldn't be used for anything, at least inside a proof). Admittedly as a builder of terms (applied), and not as an object of study (destructed?), but what is the quality of <code>let rec</code>s that makes them suitable for one use (while still not finalized) but not the other?</p>\n<p>I guess the best way to understand all that, would be to try to write out the constructed proof instead of using tactics. But the task seems overwhelming.</p>\n<p>Anyway, back to the <em>original</em> question, that I leave  here in case someone has found a way: how do you build a recursive object inside a proof, so that it can be used as a proof of its own existence? Like, a different API for building the same thing, knowing that I don't need it to interact with the whole scope? I suspect that the answer comes from using <code>recOn</code>, <code>brecOn</code>, or the <code>mathlib4</code> tactic <code>choose</code> (except that <code>choose</code>, if I read correctly, doesn't seem to be well-equipped to build recursive objects, only direct functional ones).</p>\n<p>Again, your efforts to put my on the right track are very much appreciated...</p>",
        "id": 427983368,
        "sender_full_name": "LB",
        "timestamp": 1710956310
    },
    {
        "content": "<blockquote>\n<p>but what is the quality of let recs that makes them suitable for one use (while still not finalized) but not the other?</p>\n</blockquote>\n<p>The documentation's examples are all creating functions that are only used, not reasoned about.</p>\n<p>You can only reason about the definition once there are \"equation lemmas\", which can only be generated once the actual definition is generated, and that happens after the pre-definition is constructed (what you see as you write a definition or theorem is the pre-definition). The pre-definition is able to do unrestricted recursion, and its during the transition from pre-definition to definition that the recursion is analyzed and converted into applications of recursors for the inductive types.</p>",
        "id": 427999598,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710962099
    },
    {
        "content": "<p>It seems like using <code>let rec</code> to define recursive definitions inside a theorem and getting equation lemmas for it, like what you'd need in your original message, would be a reasonable feature request.</p>\n<p>You could create an issue on the Lean 4 repository for this feature, including that message's code. If you do, please post a link to the issue here.</p>",
        "id": 428000063,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710962306
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> The challenge is that those <code>let rec</code>s can potentially refer or be referred to by other <code>let rec</code>s and the definition itself, so part of the pre-definition -&gt; definition transformation is analyzing the call graph to see where the mutual blocks have to be. We can't generate auxiliary definitions until after that process is completed, but elaboration happens before that point, so the equation lemmas won't be ready yet and we can't put them in the environment during the definition process without committing to some recursion structure that isn't yet completely worked out</p>",
        "id": 428047834,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1710988464
    }
]