[
    {
        "content": "<p>I found this <a href=\"https://medium.com/@sorenlind/solving-logic-puzzles-automatically-with-swift-part-1-544ef57b7f11\">article</a> where the author creates a model checker for some of Smullyan's puzzles and I thought to myself that this formalization would also work via a proof in Lean.</p>\n<p>I'm not sure if this is the best way to encode something like this. I wasn't really sure how to create a return type that didn't give away the answer beforehand (and unless you're creating a puzzle, why would you even want to?)</p>\n<p>The setup is that everybody is either always truthful or always a liar. Furthermore brothers are always of the same inclination, so they either both tell the truth or they both lie.</p>\n<p>Here's the puzzle:</p>\n<blockquote>\n<p>Now, I heard a story of two brothers, Bahman and Perviz, who were once asked if they were married. They gave the following replies:</p>\n<p>Bahman: We are both married.</p>\n<p>Perviz: I am not married.</p>\n<p>“Is Bahman married or not? And what about Perviz?”</p>\n</blockquote>\n<p>and here is my proof that  <code>(married Bahman = false) ∧ (married Perviz = true)</code>. The thing I'm not sure about is whether <code>∃a b : Bool ...</code> is too permissive? Actually, I'm pretty sure it is. Classically, this seems just trivially true without even looking at the hypothesis in question. </p>\n<p>Is there a better way to encode this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"n\">opaque</span> <span class=\"n\">Object</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Predicate</span> <span class=\"o\">:=</span> <span class=\"n\">Object</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Classical</span>\n\n<span class=\"kd\">example</span>\n  <span class=\"o\">(</span><span class=\"n\">truthful</span> <span class=\"n\">married</span> <span class=\"o\">:</span> <span class=\"n\">Predicate</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">Bahman</span> <span class=\"n\">Perviz</span> <span class=\"o\">:</span> <span class=\"n\">Object</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">truthful</span> <span class=\"n\">Bahman</span> <span class=\"bp\">↔</span> <span class=\"n\">truthful</span> <span class=\"n\">Perviz</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">truthful</span> <span class=\"n\">Bahman</span> <span class=\"bp\">↔</span> <span class=\"n\">married</span> <span class=\"n\">Bahman</span> <span class=\"bp\">∧</span> <span class=\"n\">married</span> <span class=\"n\">Perviz</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">truthful</span> <span class=\"n\">Perviz</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"n\">married</span> <span class=\"n\">Perviz</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"bp\">∃</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">married</span> <span class=\"n\">Bahman</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">married</span> <span class=\"n\">Perviz</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n\n  <span class=\"n\">cases</span> <span class=\"n\">Classical.em</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">truthful</span> <span class=\"n\">Bahman</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">mpe</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">h2.mp</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right</span>\n    <span class=\"k\">have</span> <span class=\"n\">nmp</span> <span class=\"o\">:=</span> <span class=\"n\">h3.mp</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">h1.mp</span> <span class=\"n\">h</span>\n    <span class=\"n\">contradiction</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">ntp</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">iff_false_left</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h1</span>\n    <span class=\"k\">have</span> <span class=\"n\">mpe</span> <span class=\"o\">:=</span> <span class=\"n\">not_not.mp</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">mt</span> <span class=\"n\">h3.mpr</span> <span class=\"n\">ntp</span>\n    <span class=\"k\">have</span> <span class=\"n\">nmor</span> <span class=\"o\">:=</span> <span class=\"n\">not_and_or.mp</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"n\">iff_false_left</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h2</span>\n    <span class=\"k\">have</span> <span class=\"n\">nmb</span> <span class=\"o\">:=</span> <span class=\"n\">nmor.resolve_right</span> <span class=\"o\">(</span><span class=\"n\">not_not.mpr</span> <span class=\"n\">mpe</span><span class=\"o\">)</span>\n    <span class=\"n\">use</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">true</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">eq_iff_iff</span><span class=\"o\">,</span> <span class=\"n\">iff_false</span><span class=\"o\">,</span> <span class=\"n\">iff_true</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">nmb</span><span class=\"o\">,</span> <span class=\"n\">mpe</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 424321804,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1709325253
    },
    {
        "content": "<p>Maybe this is more compelling as you need to provide actual data for each claim?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span>\n  <span class=\"o\">(</span><span class=\"n\">truthful</span> <span class=\"n\">married</span> <span class=\"o\">:</span> <span class=\"n\">Predicate</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">Bahman</span> <span class=\"n\">Perviz</span> <span class=\"o\">:</span> <span class=\"n\">Object</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">truthful</span> <span class=\"n\">Bahman</span> <span class=\"bp\">↔</span> <span class=\"n\">truthful</span> <span class=\"n\">Perviz</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">truthful</span> <span class=\"n\">Bahman</span> <span class=\"bp\">↔</span> <span class=\"n\">married</span> <span class=\"n\">Bahman</span> <span class=\"bp\">∧</span> <span class=\"n\">married</span> <span class=\"n\">Perviz</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">truthful</span> <span class=\"n\">Perviz</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"n\">married</span> <span class=\"n\">Perviz</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">Bool</span> <span class=\"bp\">//</span> <span class=\"n\">married</span> <span class=\"n\">Bahman</span> <span class=\"bp\">=</span> <span class=\"n\">x.1</span> <span class=\"bp\">∧</span> <span class=\"n\">married</span> <span class=\"n\">Perviz</span> <span class=\"bp\">=</span> <span class=\"n\">x.2</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n\n  <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">eq_iff_iff</span><span class=\"o\">,</span> <span class=\"n\">iff_false</span><span class=\"o\">,</span> <span class=\"n\">iff_true</span><span class=\"o\">]</span>\n  <span class=\"n\">cases</span> <span class=\"n\">Classical.em</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">truthful</span> <span class=\"n\">Bahman</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">mpe</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">h2.mp</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right</span>\n    <span class=\"k\">have</span> <span class=\"n\">nmp</span> <span class=\"o\">:=</span> <span class=\"n\">h3.mp</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">h1.mp</span> <span class=\"n\">h</span>\n    <span class=\"n\">contradiction</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">ntp</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">iff_false_left</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h1</span>\n    <span class=\"k\">have</span> <span class=\"n\">mpe</span> <span class=\"o\">:=</span> <span class=\"n\">not_not.mp</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">mt</span> <span class=\"n\">h3.mpr</span> <span class=\"n\">ntp</span>\n    <span class=\"k\">have</span> <span class=\"n\">nmor</span> <span class=\"o\">:=</span> <span class=\"n\">not_and_or.mp</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"n\">iff_false_left</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h2</span>\n    <span class=\"k\">have</span> <span class=\"n\">nmb</span> <span class=\"o\">:=</span> <span class=\"n\">nmor.resolve_right</span> <span class=\"o\">(</span><span class=\"n\">not_not.mpr</span> <span class=\"n\">mpe</span><span class=\"o\">)</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">nmb</span><span class=\"o\">,</span> <span class=\"n\">mpe</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 424326212,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1709327430
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> has marked this topic as resolved.</p>",
        "id": 424335862,
        "sender_full_name": "Notification Bot",
        "timestamp": 1709332207
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> has marked this topic as unresolved.</p>",
        "id": 424335889,
        "sender_full_name": "Notification Bot",
        "timestamp": 1709332218
    }
]