[
    {
        "content": "<p>It is useless to directly rw [Fin.val_one (n := n - 2)] because Lean does not know if n - 2 + 2 = n ?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.BoxIntegral.Partition.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Sups</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.Measure.FiniteMeasure</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fin.SuccPred</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NeZero</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"c1\">-- n no of slices</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">g₂</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n      <span class=\"c1\">-- rw [Fin.val_one (n := n - 2)]</span>\n</code></pre></div>",
        "id": 424173256,
        "sender_full_name": "Xintao Yu",
        "timestamp": 1709278114
    },
    {
        "content": "<p>This is false in the case <code>n=1</code>, and this is the reason why <code>n-2</code> appears.</p>",
        "id": 424180489,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1709281779
    },
    {
        "content": "<p>Note that in the title of the topic you write <code>n &gt; 1</code>, but not in your code.</p>",
        "id": 424180633,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1709281814
    },
    {
        "content": "<p>Ah! Thank you for your reply! You are right. Here is the result :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">QAQ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)(</span><span class=\"n\">Spe</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"n\">x.val</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sub_eq_add_neg</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Fin.val_add_eq_ite</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"n\">g₁</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Fin.coe_neg</span><span class=\"o\">]</span>\n    <span class=\"k\">have</span> <span class=\"n\">g₂</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simp</span>\n      <span class=\"n\">exact</span> <span class=\"n\">Nat.mod_eq_of_lt</span> <span class=\"n\">Spe</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">g₂</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.mod_eq_of_lt</span><span class=\"o\">]</span>\n    <span class=\"n\">cases</span> <span class=\"n\">n</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.lt_trans</span> <span class=\"n\">Nat.le.refl</span> <span class=\"n\">Spe</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.le.refl</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">g₁</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_pos</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Nat.sub_eq_of_eq_add</span>\n    <span class=\"k\">calc</span>\n      <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x.val</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">x.val</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.sub_add_comm</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.le_of_lt</span> <span class=\"n\">Spe</span><span class=\"o\">)]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">x.val</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">x.val</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.sub_add_comm</span> <span class=\"n\">g</span>\n  <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x.val</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">exact</span> <span class=\"n\">Nat.pos_iff_ne_zero.mp</span> <span class=\"n\">g</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Nat.le_add_pred_of_pos</span> <span class=\"n\">n</span> <span class=\"n\">this</span>\n</code></pre></div>",
        "id": 424181573,
        "sender_full_name": "Xintao Yu",
        "timestamp": 1709282248
    },
    {
        "content": "<p>You can golf it like this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">QAQ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)(</span><span class=\"n\">Spe</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"n\">x.val</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Nat.sub_add_cancel</span> <span class=\"n\">Spe</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">⟩</span>\n  <span class=\"n\">subst</span> <span class=\"n\">ha</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[(</span><span class=\"n\">Fin.coe_sub_iff_le</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n    <span class=\"o\">(</span><span class=\"n\">Fin.le_def.2</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Nat.one_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">Fin.lt_def.1</span> <span class=\"n\">g</span><span class=\"o\">))]</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 424184394,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1709283427
    },
    {
        "content": "<p>The trick is to replace <code>n</code> by <code>a -2 + 2</code> for some <code>a</code> (of course <code>a = n</code>, but Lean complains if you use <code>n</code>), and then everything is much easier.</p>",
        "id": 424184562,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1709283467
    }
]