[
    {
        "content": "<p>Hello,<br>\ni was wondering if the following code actually measures the evaluation time of the pure function</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">expensive</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">start</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">IO.monoNanosNow</span>\n  <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">expensive</span> <span class=\"n\">n</span>\n  <span class=\"k\">let</span> <span class=\"n\">delta</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">&lt;-</span><span class=\"n\">IO.monoNanosNow</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">start</span>\n  <span class=\"n\">IO.println</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"duration: {delta} ns.\"</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>does the evaluation of \"expensive n\" get sequenced between the 2 time measurements, even though it is side effect free?</p>",
        "id": 427458326,
        "sender_full_name": "Simon Daniel",
        "timestamp": 1710764186
    },
    {
        "content": "<p>Worse, it gets eliminated since it's side effect free and the result isn't used.</p>\n<p>This does not print the trace message:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">expensive</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">dbg_trace</span> <span class=\"s2\">\"hi\"</span><span class=\"bp\">;</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">start</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">IO.monoNanosNow</span>\n  <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">expensive</span> <span class=\"n\">n</span>\n  <span class=\"k\">let</span> <span class=\"n\">delta</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">&lt;-</span><span class=\"n\">IO.monoNanosNow</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">start</span>\n  <span class=\"n\">IO.println</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"duration: {delta} ns.\"</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">test</span> <span class=\"mi\">22</span>\n</code></pre></div>\n<p>But this does:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">expensive</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">dbg_trace</span> <span class=\"s2\">\"hi\"</span><span class=\"bp\">;</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">start</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">IO.monoNanosNow</span>\n  <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">expensive</span> <span class=\"n\">n</span>\n  <span class=\"k\">let</span> <span class=\"n\">delta</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">&lt;-</span><span class=\"n\">IO.monoNanosNow</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">start</span>\n  <span class=\"n\">IO.println</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"duration: {delta} ns. {r}\"</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">test</span> <span class=\"mi\">22</span>\n</code></pre></div>\n<p>Even with this, there's no guarantee that <code>expensive</code> is being timed.</p>",
        "id": 427601227,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710809681
    },
    {
        "content": "<p>thanks, your first point seems obvious.<br>\nis the intuition that correct that taking up cpu time is already a implicit side effect of \"pure\" computation at runtime?<br>\nand if you say there is no guarantee of it being timed, is it even possible (or a good idea) to measure the runtime of pure functions?</p>",
        "id": 427665372,
        "sender_full_name": "Simon Daniel",
        "timestamp": 1710845723
    },
    {
        "content": "<p>I think this is how you're supposed to do it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">expensive</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">discard</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">timeit</span> <span class=\"s2\">\"Expensive\"</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">expensive</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Though I'm still worried about the possibility of the compiler lifting <code>expensive n</code> out of <code>timeit</code>. This probably would protect against that:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">expensive</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">noinline</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">prof</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">return</span> <span class=\"n\">expensive</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">discard</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">timeit</span> <span class=\"s2\">\"Expensive\"</span> <span class=\"o\">(</span><span class=\"n\">prof</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 427684021,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710851705
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"684702\">Simon Daniel</span> has marked this topic as resolved.</p>",
        "id": 427685262,
        "sender_full_name": "Notification Bot",
        "timestamp": 1710852120
    }
]