[
    {
        "content": "<p>Hi I saw <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/CategoryTheory/Limits/IsLimit.html#CategoryTheory.Limits.IsLimit.equivIsoLimit\">CategoryTheory.Limits.IsLimit.equivIsoLimit</a> shows that two isomorphic cones over the same diagram give limit or not at the same time. Is it similar theorem for two cones over different diagrams with the same shape?</p>",
        "id": 438624379,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1715708548
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Limits.IsLimit.postcomposeHomEquiv#doc\">docs#CategoryTheory.Limits.IsLimit.postcomposeHomEquiv</a></p>",
        "id": 438624826,
        "sender_full_name": "Joël Riou",
        "timestamp": 1715708756
    },
    {
        "content": "<p>Ah awesome <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> I am trying to read the doc and using it</p>",
        "id": 438625049,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1715708870
    },
    {
        "content": "<p>Btw do we have theorem turning a cone into a diagram? It seems similar to <code>WidePullbackShape</code> or <code>WidePushoutShape</code> but with also morphisms indexed by morphisms in the original diagram.</p>",
        "id": 438625750,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1715709211
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/N6wo9WidxA9KJ8GHt8Qjghz6/image.png\">image.png</a><br>\nas said in Riehl's _Category Theory in Context_</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/N6wo9WidxA9KJ8GHt8Qjghz6/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/N6wo9WidxA9KJ8GHt8Qjghz6/image.png\"></a></div>",
        "id": 438627078,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1715709757
    },
    {
        "content": "<p>I am trying</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Category.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Functor.Basic</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n<span class=\"kd\">universe</span> <span class=\"n\">v</span> <span class=\"n\">u</span> <span class=\"n\">v'</span> <span class=\"n\">u'</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span> <span class=\"n\">Category</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u'</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v'</span><span class=\"o\">}</span> <span class=\"n\">J</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">⥤</span> <span class=\"n\">C</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">⥤</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">AddInitObj</span> <span class=\"o\">:=</span> <span class=\"n\">Option</span> <span class=\"n\">J</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">AddInitObj</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Hom</span> <span class=\"o\">:</span> <span class=\"n\">AddInitObj</span> <span class=\"n\">J</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">AddInitObj</span> <span class=\"n\">J</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">u'</span>\n  <span class=\"bp\">|</span> <span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">Hom</span> <span class=\"n\">X</span> <span class=\"n\">X</span>\n  <span class=\"bp\">|</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"o\">,</span> <span class=\"n\">Hom</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">none</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mor</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">j</span> <span class=\"n\">j'</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">⟶</span> <span class=\"n\">j'</span><span class=\"o\">),</span> <span class=\"n\">Hom</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">j'</span><span class=\"o\">)</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span>\n<span class=\"kd\">end</span> <span class=\"n\">AddInitObj</span>\n</code></pre></div>\n<p>But it seems there is some universe level error saying</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"kd\">universe</span> <span class=\"n\">level</span> <span class=\"k\">in</span> <span class=\"n\">constructor</span> <span class=\"bp\">'</span><span class=\"n\">AddInitObj.Hom.mor'</span><span class=\"o\">,</span> <span class=\"kd\">parameter</span> <span class=\"sc\">'f'</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">j</span> <span class=\"bp\">⟶</span> <span class=\"n\">j'</span>\n<span class=\"n\">at</span> <span class=\"kd\">universe</span> <span class=\"n\">level</span>\n  <span class=\"n\">v'</span><span class=\"bp\">+</span><span class=\"mi\">1</span>\n<span class=\"n\">it</span> <span class=\"n\">must</span> <span class=\"n\">be</span> <span class=\"n\">smaller</span> <span class=\"n\">than</span> <span class=\"n\">or</span> <span class=\"n\">equal</span> <span class=\"n\">to</span> <span class=\"n\">the</span> <span class=\"kd\">inductive</span> <span class=\"n\">datatype</span> <span class=\"kd\">universe</span> <span class=\"n\">level</span>\n  <span class=\"n\">u'</span><span class=\"bp\">+</span><span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 438627275,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1715709816
    },
    {
        "content": "<p><code>[Category.{v'} J]</code> means \"Hom sets in J are in universe v'\", so your Homs for AddInitObj J should also be taking values in universe v'.</p>",
        "id": 438628135,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1715710141
    },
    {
        "content": "<p>Ah the following version works for smallcategory:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Category.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Functor.Basic</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n<span class=\"kd\">universe</span> <span class=\"n\">v</span> <span class=\"n\">u</span> <span class=\"n\">v'</span> <span class=\"n\">u'</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span> <span class=\"n\">Category</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u'</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">SmallCategory</span> <span class=\"n\">J</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">⥤</span> <span class=\"n\">C</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">⥤</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">AddInitObj</span> <span class=\"o\">:=</span> <span class=\"n\">Option</span> <span class=\"n\">J</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">AddInitObj</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Hom</span> <span class=\"o\">:</span> <span class=\"n\">AddInitObj</span> <span class=\"n\">J</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">AddInitObj</span> <span class=\"n\">J</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">u'</span>\n  <span class=\"bp\">|</span> <span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">Hom</span> <span class=\"n\">X</span> <span class=\"n\">X</span>\n  <span class=\"bp\">|</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"o\">,</span> <span class=\"n\">Hom</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">none</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mor</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">j</span> <span class=\"n\">j'</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">⟶</span> <span class=\"n\">j'</span><span class=\"o\">),</span> <span class=\"n\">Hom</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">j'</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span> <span class=\"n\">AddInitObj</span>\n</code></pre></div>\n<p>maybe I can try both <code>postcomposeHomEquiv</code> and turn cone into diagram and prove similar result hhhh</p>",
        "id": 438628233,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1715710185
    },
    {
        "content": "<p>Yeah changing to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Hom</span> <span class=\"o\">:</span> <span class=\"n\">AddInitObj</span> <span class=\"n\">J</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">AddInitObj</span> <span class=\"n\">J</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">v'</span>\n</code></pre></div>\n<p>gives error at the line <code>| id : ∀ X, Hom X X</code> now. Declaring <code>J</code> SmallCategory seems OK now <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 438628592,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1715710345
    },
    {
        "content": "<p>We have <code>WithInitial</code>, see <code>CategoryTheory.WithTerminal</code>.</p>",
        "id": 438631853,
        "sender_full_name": "Joël Riou",
        "timestamp": 1715711720
    },
    {
        "content": "<p>Ah I didn’t notice it. Thank you very much <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span></p>",
        "id": 438632113,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1715711825
    }
]