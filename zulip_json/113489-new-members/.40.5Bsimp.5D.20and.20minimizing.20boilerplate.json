[
    {
        "content": "<p>In my Lean programming, I frequently encounter a pattern:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"n\">some</span> <span class=\"n\">property</span> <span class=\"n\">of</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Foo</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">theorem</span> <span class=\"n\">bar_theorem</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"n\">some</span> <span class=\"n\">property</span> <span class=\"n\">of</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">Foo.bar</span>\n</code></pre></div>\n<p>This pattern seems somewhat redundant, especially in trivial cases where <code>bar_theorem</code> is exclusively utilized through the <code>simp</code> tactic.</p>\n<p>Ideally, I would like to apply the <code>simp</code> attribute directly within the class definition, like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"n\">some</span> <span class=\"n\">property</span> <span class=\"n\">of</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>However, I understand that this direct approach is not possible in Lean. Is there a less verbose way to achieve a similar outcome?</p>",
        "id": 418737195,
        "sender_full_name": "Isak Colboubrani",
        "timestamp": 1706569613
    },
    {
        "content": "<p>Does <code>attribute [simp] Foo.bar</code> work?</p>",
        "id": 418737907,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706570024
    },
    {
        "content": "<p>Note the difference in explicitness between <code>{M}</code> and <code>(M)</code>, though</p>",
        "id": 418737988,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706570066
    }
]