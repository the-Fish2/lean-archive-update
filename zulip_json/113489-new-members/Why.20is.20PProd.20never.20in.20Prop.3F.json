[
    {
        "content": "<p>Why does <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PProd#doc\">docs#PProd</a> have sort <code>Sort (max (max u 1) v)</code> instead of <code>Sort (max u v)</code>? It seems like <code>PProd.{0, 0}</code> could be equivalent to <code>And</code> without causing any inconsistency.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">PProd</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"c1\">-- Type</span>\n<span class=\"k\">#check</span> <span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span> <span class=\"c1\">-- Prop</span>\n</code></pre></div>",
        "id": 420965144,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1707722441
    },
    {
        "content": "<p>Note that if you write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">PPProd</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">fst</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n  <span class=\"n\">snd</span> <span class=\"o\">:</span> <span class=\"n\">β</span>\n</code></pre></div>\n<p>you get the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"kd\">universe</span> <span class=\"n\">polymorphic</span> <span class=\"n\">type</span><span class=\"o\">,</span> <span class=\"n\">the</span> <span class=\"n\">resultant</span> <span class=\"kd\">universe</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"kt\">Prop</span> <span class=\"o\">(</span><span class=\"n\">i.e.</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"n\">but</span> <span class=\"n\">it</span> <span class=\"n\">may</span> <span class=\"n\">be</span> <span class=\"kt\">Prop</span> <span class=\"n\">for</span> <span class=\"n\">some</span> <span class=\"kd\">parameter</span> <span class=\"n\">values</span> <span class=\"o\">(</span><span class=\"n\">solution</span><span class=\"o\">:</span> <span class=\"n\">use</span> <span class=\"bp\">'</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"bp\">'</span> <span class=\"n\">or</span> <span class=\"bp\">'</span><span class=\"n\">max</span> <span class=\"mi\">1</span> <span class=\"n\">u'</span>\n  <span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n</code></pre></div>",
        "id": 420971597,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707725513
    },
    {
        "content": "<p>(lean 3 gives the same error)</p>",
        "id": 420971748,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707725579
    },
    {
        "content": "<p>I was hoping this would work, but it doesn't (filed as <a href=\"https://github.com/leanprover/lean4/pull/3310\">lean4#3310</a>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">bootstrap.inductiveCheckResultingUniverse</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"kd\">structure</span> <span class=\"n\">PPProd.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">fst</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n  <span class=\"n\">snd</span> <span class=\"o\">:</span> <span class=\"n\">β</span>\n</code></pre></div>",
        "id": 420972284,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707725799
    }
]