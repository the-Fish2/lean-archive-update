[
    {
        "content": "<p>I have a common problem where I have a function <code>f</code> which contains bindings, and I want to prove <code>P (f x)</code> for all <code>x</code>. However, I want to lift those bindings into the proof environment without redundantly writing out the binding in the proof. For instance:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n  <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ex</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">f</span>\n  <span class=\"c1\">-- current goal: ⊢ P (let y := x; y + 1)</span>\n  <span class=\"c1\">-- want to get the goal: let y := x ⊢ P (y + 1)</span>\n</code></pre></div>\n<p>Is there an easy to way to do this? I looked at the conversion tactic mode, which does allow me to focus on the unfolded term, but I don't understand how to propagate introduced bindings back out of the conversion tactic to the top level.</p>\n<p>Also, I don't want the binding  to be eagerly substituted, so just using <code>simp</code> is not an option here.</p>",
        "id": 424452837,
        "sender_full_name": "Will Crichton",
        "timestamp": 1709420470
    },
    {
        "content": "<p>Mathlib has the <code>lift_lets</code> tactic, which you can follow up with <code>intro</code></p>",
        "id": 424455234,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709422688
    },
    {
        "content": "<p>Terminology note: the \"environment\" is where all the top-level declarations go, and the \"local context\" is the collection of variables and hypotheses associated to a goal state, what you're calling the proof environment.</p>",
        "id": 424455261,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709422731
    },
    {
        "content": "<p>(An alternative to <code>intro</code> is mathlib's <code>extract_lets</code>, which on the goal is an <code>intro</code> that only works on <code>let</code>s, and on a hypothesis adds an extra hypothesis for the <code>let</code>s. No need to use it on the goal, but since you're working with <code>let</code>s, I figured I'd mention one of the few tools that are available.)</p>",
        "id": 424455494,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709422943
    },
    {
        "content": "<p>Ah that's exactly what I need, thank you! And good to know on the terminology.</p>",
        "id": 424458963,
        "sender_full_name": "Will Crichton",
        "timestamp": 1709426499
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"625391\">Will Crichton</span> has marked this topic as resolved.</p>",
        "id": 424458966,
        "sender_full_name": "Notification Bot",
        "timestamp": 1709426502
    },
    {
        "content": "<p>Oh a quick follow-up: is there a way to instruct <code>simp</code> to not rewrite using specific variable bindings in the local context? It seems like most of the configuration options are for preventing the use of propositions.</p>",
        "id": 424459212,
        "sender_full_name": "Will Crichton",
        "timestamp": 1709426776
    },
    {
        "content": "<p>In the next Lean release, not substituting local variables will be the new default, and you can pass them in with the list of simp lemmas to substitute them.</p>\n<p>In the meantime, you can do <code>simp (config := {zeta := false})</code></p>",
        "id": 424459908,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709427493
    },
    {
        "content": "<p>the config clause comes before the list of simp lemmas</p>",
        "id": 424459915,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709427512
    }
]