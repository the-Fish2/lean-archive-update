[
    {
        "content": "<p>I'm trying to go through <a href=\"https://djvelleman.github.io/HTPIwL/IntroLean.html\">How to prove it with lean</a> but there seem to be some outdated tactic like <code>assume</code> which <a href=\"https://stackoverflow.com/questions/75055993/assume-in-lean-4\">SO</a> mentions is now <code>intro</code> but how would I specifiy what I want to intro - for eg. <code>assume h2 : Â¬R</code> should be <code>intro h2 : Â¬R</code> but <code>:</code> is not syntactically valid for this statement.</p>\n<p>TL;DR : What should I be syntactically the correct way to write <code>assume h2 : Â¬R</code> in lean4?</p>",
        "id": 420807136,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1707577722
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"557243\">Shubham Kumar ðŸ¦€ (he/him)</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20prove.20it.20with.20lean/near/420807136\">said</a>:</p>\n<blockquote>\n<p>I'm trying to go through <a href=\"https://djvelleman.github.io/HTPIwL/IntroLean.html\">How to prove it with lean</a> but there seem to be some outdated tactic like <code>assume</code> which <a href=\"https://stackoverflow.com/questions/75055993/assume-in-lean-4\">SO</a> mentions is now <code>intro</code> but how would I specifiy what I want to intro - for eg. <code>assume h2 : Â¬R</code> should be <code>intro h2 : Â¬R</code> but <code>:</code> is not syntactically valid for this statement.</p>\n<p>TL;DR : What should I be syntactically the correct way to write <code>assume h2 : Â¬R</code> in lean4?</p>\n</blockquote>\n<p>Have you tried <code>suffices h : P</code>?<br>\n<code>have</code> and <code>revert</code> can also be helpful. Here are instructions from Set Theory Game <a href=\"https://adam.math.hhu.de/#/\">https://adam.math.hhu.de/#/</a> </p>\n<p>Use intro to introduce either a new assumption or a new object into your proof.</p>\n<p>There are two situations in which you can use the intro tactic:</p>\n<p>If you are proving a statement of the form P â†’ Q, then you can use the tactic intro h to introduce the assumption h : P and set Q as the goal. Be sure to use an identifier that is not already in use.<br>\nIf you are proving a statement of the form âˆ€ x, P x, where P x is some statement about x, then you can use the tactic intro x to introduce a new object x into the proof. Be sure to use a variable name that is not already in use. The goal will then be P x.<br>\nYou can do multiple introductions in one step: for example, intro x h has the same effect as doing intro x followed by intro h.</p>",
        "id": 420807721,
        "sender_full_name": "Yagub Aliyev",
        "timestamp": 1707578200
    },
    {
        "content": "<p>Thanks! one question so when you mention object you mean parameter passed to a proposition, right?</p>",
        "id": 420810162,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1707580169
    },
    {
        "content": "<p>also the following 2 statements are syntactically incorrect way I'm guessing because it doesn't expect suffices after the hypothesis</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">suffices</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">Â¬</span><span class=\"n\">R</span>\n  <span class=\"k\">suffices</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">P</span>\n</code></pre></div>",
        "id": 420810424,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1707580328
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unexpected</span> <span class=\"n\">token</span> <span class=\"bp\">'</span><span class=\"k\">suffices</span><span class=\"bp\">';</span> <span class=\"n\">expected</span> <span class=\"bp\">'</span><span class=\"kd\">by</span><span class=\"bp\">'</span> <span class=\"n\">or</span> <span class=\"bp\">'</span><span class=\"k\">from</span><span class=\"bp\">'</span><span class=\"n\">Lean</span> <span class=\"mi\">4</span>\n</code></pre></div>",
        "id": 420810452,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1707580352
    },
    {
        "content": "<p><code>suffices</code> is not a correct replacement for <code>assume</code>; you want <code>intro</code></p>",
        "id": 420810863,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707580656
    },
    {
        "content": "<p>can I specify proposition I want to intro?<br>\nFor eg. <code>intro h2 : P</code> ?</p>",
        "id": 420810951,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1707580701
    },
    {
        "content": "<p>I think that might work with the <code>rintro</code> variant, e.g. <code>rintro (h2 : P)</code></p>",
        "id": 420810991,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707580751
    },
    {
        "content": "<p>because <code>:</code> =&gt; <code>unexpected token ':'; expected commandLean 4</code></p>",
        "id": 420810992,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1707580751
    },
    {
        "content": "<p>Thanks, I need to lookup rintro/intro diff</p>",
        "id": 420811019,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1707580785
    },
    {
        "content": "<p>Found it : <a href=\"https://leanprover-community.github.io/mathlib4_docs/Std/Tactic/RCases.html#Std.Tactic.RCases.rcases\">https://leanprover-community.github.io/mathlib4_docs/Std/Tactic/RCases.html#Std.Tactic.RCases.rcases</a><br>\nfor my future self</p>",
        "id": 420811162,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1707580860
    },
    {
        "content": "<p>oops cannot find rintro do I need to <code>import Std</code> ?</p>",
        "id": 420811205,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1707580901
    },
    {
        "content": "<p>ok so I need to make Std available in lakefile because it's not available as prelude or equivalent</p>",
        "id": 420811473,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1707581097
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"557243\">@Shubham Kumar ðŸ¦€ (he/him)</span>  How To Prove It with Lean requires a Lean package that you have to download.  That package defines a number of tactics that are used in the book, including <code>assume</code>.  See the preface, the section on installing Lean.</p>",
        "id": 420834317,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1707600874
    }
]