[
    {
        "content": "<p>I had some trouble proving this lemma, which I believed was going to be easy with the use of <code>ring</code> but it couldn't solve the goal surprisingly.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">-</span><span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ring</span>\n</code></pre></div>",
        "id": 424361689,
        "sender_full_name": "Colin Jones ⚛️",
        "timestamp": 1709352098
    },
    {
        "content": "<p>not sure why <code>ring</code> didn't work, but I was able to get it with a couple of rewrites:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">-</span><span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">neg_inv</span><span class=\"o\">,</span> <span class=\"n\">neg_mul</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 424362397,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1709352849
    },
    {
        "content": "<p>also looks like the positivity assumptions were unnecessary</p>",
        "id": 424362452,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1709352926
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"380294\">Matt Diamond</span> has marked this topic as resolved.</p>",
        "id": 424362543,
        "sender_full_name": "Notification Bot",
        "timestamp": 1709353060
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"380294\">Matt Diamond</span> has marked this topic as unresolved.</p>",
        "id": 424362544,
        "sender_full_name": "Notification Bot",
        "timestamp": 1709353065
    },
    {
        "content": "<p>(sorry, didn't mean to click resolve)</p>",
        "id": 424362547,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1709353077
    },
    {
        "content": "<p><code>ring</code> didn't work because <code>⁻¹</code> appears in the statement, which is not an operator in the language of rings. Sometimes <code>field_simp; ring</code> works to prove goals in the language of fields, but <code>field_simp</code> works by cancelling out all of the divisions with the help of hypotheses that the divisors are nonzero, which we don't have here. You could use <code>field_simp</code> if you first used <code>by_cases</code> to handle all of the cases where the divisors are zero, but that doesn't seem worthwhile given that there's a simple proof with <code>rw</code>.</p>",
        "id": 424365264,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1709355695
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"628490\">Colin Jones ⚛️</span> has marked this topic as resolved.</p>",
        "id": 424419166,
        "sender_full_name": "Notification Bot",
        "timestamp": 1709392393
    },
    {
        "content": "<p>Your original statement is nonsense because <code>ha</code> is about a different <code>a</code> to the one in the rest of the theorem</p>",
        "id": 424443612,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709411429
    },
    {
        "content": "<p>If you use <code>set_option autoImplicit false</code>, lean will tell you this.</p>",
        "id": 424443632,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709411461
    }
]