[
    {
        "content": "<p>I'm interested in the calculational style of proofs. However, I'm having trouble figuring out how to use implication/reverse implication as a binary relation.</p>\n<p>Lean doesn't accept expressions like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">calc</span> <span class=\"n\">a</span>\n     <span class=\"n\">_</span>  <span class=\"bp\">⇒</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>Here's an example of a proof that I'm trying to do: <br>\nProve: <code>a ∧ c ⇒ b ∧ d ⇐ (a⇒b) ∧ (c⇒d)</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>   <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">⇒</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">d</span>                                        <span class=\"n\">distribute</span> <span class=\"bp\">⇒</span> <span class=\"n\">over</span> <span class=\"n\">second</span> <span class=\"bp\">∧</span>\n<span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">⇒</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">⇒</span> <span class=\"n\">d</span><span class=\"o\">)</span>                             <span class=\"n\">antidistribution</span> <span class=\"n\">twice</span>\n<span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">a</span><span class=\"bp\">⇒</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">⇒</span><span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">∧</span> <span class=\"o\">((</span><span class=\"n\">a</span><span class=\"bp\">⇒</span><span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">⇒</span><span class=\"n\">d</span><span class=\"o\">))</span>                     <span class=\"n\">distribute</span> <span class=\"bp\">∧</span> <span class=\"n\">over</span> <span class=\"bp\">∨</span> <span class=\"n\">twice</span>\n<span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⇒</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">∧</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⇒</span><span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⇒</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">∧</span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">⇒</span><span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">⇒</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">∧</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⇒</span><span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">⇒</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">∧</span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">⇒</span><span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">generalization</span>\n<span class=\"bp\">⇐</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⇒</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">⇒</span><span class=\"n\">d</span><span class=\"o\">)</span>\n\n<span class=\"n\">From</span> <span class=\"n\">the</span> <span class=\"kd\">mutual</span> <span class=\"n\">transitivity</span> <span class=\"n\">of</span> <span class=\"bp\">=</span> <span class=\"n\">and</span> <span class=\"bp\">⇐</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">⇒</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">d</span> <span class=\"bp\">⇐</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⇒</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">⇒</span><span class=\"n\">d</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 424101214,
        "sender_full_name": "Vlad",
        "timestamp": 1709238084
    },
    {
        "content": "<p>Sadly, <code>→</code> currently does not work with <code>calc</code>. This is a known issue</p>",
        "id": 424101585,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709238239
    },
    {
        "content": "<p>Thank you for the prompt reply, <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> .  I'm curious, is this feature on a public roadmap somewhere? It would be great if I could receive updates regarding its progress.</p>",
        "id": 424102227,
        "sender_full_name": "Vlad",
        "timestamp": 1709238499
    },
    {
        "content": "<p>Unsure... sorry!</p>",
        "id": 424102385,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1709238572
    },
    {
        "content": "<p>Reading through the documentation, it appears that it might be possible to implement a custom implication operator.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">imp</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">@[</span><span class=\"n\">trans</span><span class=\"kd\">]</span> <span class=\"kd\">theorem</span> <span class=\"n\">imp_trans</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">imp</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">imp</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">imp</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"s2\">\" ==&gt; \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">imp</span>\n</code></pre></div>\n<p>I'm not sure how proceed with the implementation.  Any guidance or pointers would be greatly appreciated.</p>",
        "id": 424163315,
        "sender_full_name": "Vlad",
        "timestamp": 1709271412
    },
    {
        "content": "<p>Do you want to be using <code>Bool</code> or <code>Prop</code> here? It looked like your use case up above was about propositions</p>",
        "id": 424164394,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1709272383
    },
    {
        "content": "<p>In Lean, implication between propositions is normally written with the same symbol as for functions between types: <code>→</code>. You could use that to define your <code>imp</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">imp</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span>\n</code></pre></div>",
        "id": 424164705,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1709272673
    },
    {
        "content": "<p>Ah, I see. Thanks, <span class=\"user-mention\" data-user-id=\"500038\">@Timo Carlin-Burns</span> . I'm still trying to wrap my head around the difference between Bool and Prop. Just from the examples I've seen in the documentation, Prop is indeed the more appropriate option here (but I'm not entirely sure why). <br>\nAlso, do I need to have <code>imp a b</code> and <code>imp b c</code> as parameters, or should those propositions be provided by the user?</p>",
        "id": 424169210,
        "sender_full_name": "Vlad",
        "timestamp": 1709275900
    },
    {
        "content": "<p>It works!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">imp</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">):</span>  <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">P</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Q</span>\n<span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"s2\">\" ==&gt; \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">imp</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">implication_trans</span> <span class=\"o\">(</span><span class=\"n\">ab</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bc</span><span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">c</span><span class=\"o\">):</span> <span class=\"n\">a</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"n\">bc</span> <span class=\"o\">(</span><span class=\"n\">ab</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Trans</span> <span class=\"n\">imp</span> <span class=\"n\">imp</span> <span class=\"n\">imp</span> <span class=\"n\">where</span>\n  <span class=\"n\">trans</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">implication_trans</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">abcd</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ab</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bc</span><span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cd</span><span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">a</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">ab</span>\n    <span class=\"n\">_</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">bc</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">d</span>   <span class=\"o\">:=</span> <span class=\"n\">cd</span>\n</code></pre></div>\n<p>Thanks everyone for help!</p>",
        "id": 424174209,
        "sender_full_name": "Vlad",
        "timestamp": 1709278608
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"696014\">Vlad</span> has marked this topic as resolved.</p>",
        "id": 424174222,
        "sender_full_name": "Notification Bot",
        "timestamp": 1709278615
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"696014\">@Vlad</span> <code>Bool</code> is a type and <code>Prop</code> is a universe, so they're at different levels of the hierarchy and this has consequences.</p>",
        "id": 424215660,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709293098
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> thank you for your reply. Could you please elaborate on the consequences in this case? I interpret expression <code>P -&gt; Q</code> as a binary (boolean) expression - it is either true or false. Therefore, <code>P</code> and <code>Q</code> here are binary (boolean) values as well.</p>",
        "id": 424293246,
        "sender_full_name": "Vlad",
        "timestamp": 1709313679
    },
    {
        "content": "<p>Right, but you lose the alternative interpretation of <code>f: P -&gt; Q</code>being not just the assertion that P implies Q is <code>true</code>, but being a function from proofs of <code>P</code> to proofs of <code>Q</code>, and this interpretation is used everywhere in Lean. So <code>-&gt;</code> is a much richer object than boolean implication, which is entirely encapsulated with a truth table.</p>",
        "id": 424302331,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709317165
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"696014\">Vlad</span> has marked this topic as unresolved.</p>",
        "id": 424305780,
        "sender_full_name": "Notification Bot",
        "timestamp": 1709318495
    },
    {
        "content": "<p>I feel like I begin to understand the difference, but it will take some time to get used to thinking at that meta-level. Thank you for your explanations.</p>\n<p>On a separate note, I'm now facing with the following challenge:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">rimp</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">):</span>  <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">Q</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">P</span>\n<span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"s2\">\" &lt;== \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rimp</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">rimplication_trans</span> <span class=\"o\">(</span><span class=\"n\">ab</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;==</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bc</span><span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;==</span> <span class=\"n\">c</span><span class=\"o\">):</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;==</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">c</span> <span class=\"bp\">↦</span> <span class=\"n\">ab</span> <span class=\"o\">(</span><span class=\"n\">bc</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Trans</span> <span class=\"n\">rimp</span> <span class=\"n\">rimp</span> <span class=\"n\">rimp</span> <span class=\"n\">where</span>\n  <span class=\"n\">trans</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">rimplication_trans</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ab</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bc</span><span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;==</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cd</span><span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;==</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">ab</span>\n    <span class=\"n\">_</span> <span class=\"bp\">&lt;==</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">bc</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">d</span>   <span class=\"o\">:=</span> <span class=\"n\">cd</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">&lt;==</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">calc</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">d</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">_</span>              <span class=\"bp\">&lt;==</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">d</span><span class=\"o\">))</span>         <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>The last example results in an error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"bp\">'</span><span class=\"k\">calc</span><span class=\"bp\">'</span> <span class=\"n\">step</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"bp\">`</span><span class=\"n\">Trans</span><span class=\"bp\">`</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">Trans</span> <span class=\"n\">rimp</span> <span class=\"n\">And</span> <span class=\"bp\">?</span><span class=\"n\">m.5019</span>\n</code></pre></div>",
        "id": 424306118,
        "sender_full_name": "Vlad",
        "timestamp": 1709318635
    },
    {
        "content": "<p>NVM, the above is fixed by adjusting the precedence of <code>&lt;==</code>.</p>",
        "id": 424312077,
        "sender_full_name": "Vlad",
        "timestamp": 1709321042
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"696014\">Vlad</span> has marked this topic as resolved.</p>",
        "id": 424312107,
        "sender_full_name": "Notification Bot",
        "timestamp": 1709321050
    }
]