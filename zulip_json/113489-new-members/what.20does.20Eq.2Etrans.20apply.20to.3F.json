[
    {
        "content": "<p>In the example of <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/tactics.html\">https://leanprover.github.io/theorem_proving_in_lean4/tactics.html</a>, there is an example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intros</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Eq.trans</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Eq.symm</span>\n  <span class=\"n\">assumption</span>\n  <span class=\"n\">assumption</span>\n</code></pre></div>\n<p>I don't quite understand what Eq.trans apply to, and why it follows with a Eq.symm, rather than an assumption?</p>",
        "id": 418213710,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1706246175
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/what.20does.20Eq.2Etrans.20apply.20to.3F\">#general &gt; what does Eq.trans apply to?</a> by <span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span>.</p>",
        "id": 418214047,
        "sender_full_name": "Notification Bot",
        "timestamp": 1706246488
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"560873\">@Coriver Chen</span> I moved this question to the <a class=\"stream\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members\">#new members</a> stream. Did you try this example in an environment that shows current goals?</p>",
        "id": 418214124,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706246540
    },
    {
        "content": "<p>Yeah thank you. I tried a wrong version of it</p>",
        "id": 418214157,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1706246589
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/c7CzZBZBdeshw4u7zSfQJuML/E9BB532E-95C3-4DD3-B72C-2532DE64771A.jpg\">E9BB532E-95C3-4DD3-B72C-2532DE64771A.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/c7CzZBZBdeshw4u7zSfQJuML/E9BB532E-95C3-4DD3-B72C-2532DE64771A.jpg\" title=\"E9BB532E-95C3-4DD3-B72C-2532DE64771A.jpg\"><img src=\"/user_uploads/3121/c7CzZBZBdeshw4u7zSfQJuML/E9BB532E-95C3-4DD3-B72C-2532DE64771A.jpg\"></a></div>",
        "id": 418214166,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1706246597
    },
    {
        "content": "<p><code>apply Eq.trans</code> should generate 3 goals:</p>\n<ul>\n<li><code>c = ?a</code></li>\n<li><code>?a = b</code></li>\n<li><code>Nat</code>,</li>\n</ul>\n<p>where the last goal is an unknown intermediate number.</p>",
        "id": 418214173,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706246607
    },
    {
        "content": "<p><code>apply Eq.symm</code> turns <code>c = ?a</code> into <code>?a = c</code>, and we have an assumption of this form.</p>",
        "id": 418214194,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706246636
    },
    {
        "content": "<p>Once you call <code>assumption</code>, Lean figures out that <code>?a</code> is <code>a</code>, and you have to prove <code>a = b</code>, which is done by the second <code>assumption</code>.</p>",
        "id": 418214251,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706246668
    },
    {
        "content": "<p>That's exactly what happens on your screenshot (though you renamed variables)</p>",
        "id": 418214299,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706246738
    },
    {
        "content": "<p>Lean tries to find an assumption <code>b = ?b</code> (here <code>?b</code> is a placeholder for a number it doesn't know yet) and fails because the relevant assumption is <code>a = b</code>, not <code>b = a</code>.</p>",
        "id": 418214373,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706246791
    },
    {
        "content": "<p>Thank you I think I get it now</p>",
        "id": 418214488,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1706246890
    },
    {
        "content": "<p>Let me debug into the corect example step by step. Hence the applied tactic is applied to the goals? It turns the original goals into new one. And when I read the proof, I should read it from the bottom to the top?</p>",
        "id": 418214621,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1706247038
    },
    {
        "content": "<p>When you write <code>apply</code>, then it uses backward reasoning, yes.</p>",
        "id": 418214677,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706247105
    },
    {
        "content": "<p>Quite often we write proofs using a combination of backward and forward reasoning, mixing <code>have</code>s, <code>apply</code>s etc</p>",
        "id": 418214738,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706247137
    },
    {
        "content": "<p>Also, the most readable way to write this proof is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">hab</span> <span class=\"n\">hac</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">hac.symm</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">hab</span>\n</code></pre></div>",
        "id": 418214798,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706247209
    },
    {
        "content": "<p>Thank you for the detailed explanation and additional examples</p>",
        "id": 418214869,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1706247256
    },
    {
        "content": "<p>But <code>mathlib</code> code is not always optimized for readability, so I would write this as <code>hac.symm.trans hab</code> in Mathlib.</p>",
        "id": 418214870,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1706247257
    },
    {
        "content": "<p>In fact one could even argue that most of the time <code>mathlib</code> code is optimised for unreadability, with the principle being \"if the lemma is obvious, then nobody wants to read the proof so let's make it as compact as possible\".</p>",
        "id": 418256739,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706268245
    }
]