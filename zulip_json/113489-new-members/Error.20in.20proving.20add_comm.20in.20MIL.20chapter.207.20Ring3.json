[
    {
        "content": "<p>Hi why it reports an error in line 96?</p>",
        "id": 428189100,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1711044528
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/4ZGpynVdMhxCe13Gfw1AI4Q7/0484D00B-27DC-40D9-8DBC-C892EBB8E2F1.png\">0484D00B-27DC-40D9-8DBC-C892EBB8E2F1.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/4ZGpynVdMhxCe13Gfw1AI4Q7/0484D00B-27DC-40D9-8DBC-C892EBB8E2F1.png\" title=\"0484D00B-27DC-40D9-8DBC-C892EBB8E2F1.png\"><img src=\"/user_uploads/3121/4ZGpynVdMhxCe13Gfw1AI4Q7/0484D00B-27DC-40D9-8DBC-C892EBB8E2F1.png\"></a></div>",
        "id": 428189192,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1711044546
    },
    {
        "content": "<p>I checked the left and the right is the same. Should I add a <code>rfl</code> to it?</p>",
        "id": 428189494,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1711044633
    },
    {
        "content": "<p>Quite late in my timezone hence now I am stop debugging it and off the computer <span aria-label=\"smiling face\" class=\"emoji emoji-263a\" role=\"img\" title=\"smiling face\">:smiling_face:</span> Btw is there any tactic for rw but with the reverse direction? Lots of <code>rw &lt;-</code> seems a little annoying</p>",
        "id": 428189843,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1711044774
    },
    {
        "content": "<p>You will have a much higher hope of getting an answer if you post copy-pastable code instead of a screenshot.</p>",
        "id": 428194206,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1711046366
    },
    {
        "content": "<p>Sorry for the fuzzy screenshot.</p>",
        "id": 428244654,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1711070409
    },
    {
        "content": "<p>A minimal MWE is the following, trying to prove a+b = 1*(a+b):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Ex1</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">true</span>\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">nth_rewrite</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">one_mul</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"o\">)]</span>\n  <span class=\"n\">rfl</span>\n<span class=\"kd\">end</span> <span class=\"n\">Ex1</span>\n</code></pre></div>",
        "id": 428244704,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1711070458
    },
    {
        "content": "<p>I remembered that the <code>rfl</code> is unnecessary, but if I removed it, I got an error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- unsolved goals</span>\n<span class=\"c1\">-- R: Type ?u.3301</span>\n<span class=\"c1\">-- inst✝: Ring R</span>\n<span class=\"c1\">-- ab: R</span>\n<span class=\"c1\">-- ⊢ 1 * (a + b) = 1 * (a + b)</span>\n</code></pre></div>",
        "id": 428244767,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1711070510
    },
    {
        "content": "<p>why do you think <code>rfl</code> is unnecessary? you're using <code>nth_rewrite</code>, not <code>nth_rw</code></p>",
        "id": 428244965,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1711070641
    },
    {
        "content": "<p>Oh I dont know there is a tactic called <code>nth_rw</code>, that should be the tactic I want to use before <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span></p>",
        "id": 428245090,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1711070703
    },
    {
        "content": "<p>Let me check the difference between them <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 428245159,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1711070760
    },
    {
        "content": "<p>Btw is there any tactic like <code>rw</code> but use the reverse direction by default, the following example have lots of <code>&lt;-</code>. It's kind of a little annoying</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">one_mul</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">one_mul</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">mul_left_inv</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 428245326,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1711070863
    },
    {
        "content": "<p>Yeah change <code>nth_rewrite</code> to <code>nth_rw</code> the <code>rfl </code>is unnecessarily now. Thank you very much Matt <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 428245700,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1711071078
    },
    {
        "content": "<p>Why don’t you simply rewrite in <code>h</code>?</p>",
        "id": 428247095,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1711072072
    },
    {
        "content": "<p>I am reading <a href=\"https://leanprover-community.github.io/mathematics_in_lean/C07_Hierarchies.html#basics\">MIL Chapter 7</a> and it’s quite often only using <code>rw</code>. Yeah it should be cleaner if rewritten <code>h</code> rather than the goal. I will try this. Thank you for the kindly advice<span aria-label=\"smiling face\" class=\"emoji emoji-263a\" role=\"img\" title=\"smiling face\">:smiling_face:</span></p>",
        "id": 428247979,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1711072724
    },
    {
        "content": "<p>Patrick, do you mind elaborating? This is version of the proof with <code>rw ... at h</code> which comes to mind, but I wouldn't say it's simpler</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply_fun</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">inv_mul_cancel_left</span><span class=\"o\">,</span> <span class=\"n\">inv_mul_cancel_left</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n\n<span class=\"c1\">-- It seems simpler *not* to rewrite in h:</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">inv_mul_cancel_left</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">inv_mul_cancel_left</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 428250291,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1711074465
    },
    {
        "content": "<p>I was really commenting on the fact that Coriver was complaining about needing a lot of right to left rewrites to bring the goal to h. I was suggesting to rather rewrite from left to right in h until you get the goal. Actually the solution I wrote in MIL is doing both: <code>simpa [mul_assoc₃] using congr_arg (· * a⁻¹) h</code> (part of what this section is teaching is the importance of tagging relevant lemmas with simp as you go). Also note that your solution use Mathlib’s group whereas the context in MIL is a custom definition of group. If you use Mathlib then you can just as well do a single rewrite using the lemma you need to prove…</p>",
        "id": 428252326,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1711076077
    }
]