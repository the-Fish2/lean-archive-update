[
    {
        "content": "<p>Can someone help with the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp'</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">Squarefree</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hp'</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> Simple case -/</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hp'</span><span class=\"o\">,</span> <span class=\"n\">one_dvd</span><span class=\"o\">]</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> The other case -/</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">n'</span><span class=\"o\">,</span> <span class=\"n\">hn'</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hp</span>\n  <span class=\"n\">subst</span> <span class=\"n\">hn'</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hd'</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">∣</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">n'</span>\n  <span class=\"bp\">·</span> <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">n'</span> <span class=\"bp\">/</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.mul_div_assoc</span> <span class=\"n\">_</span> <span class=\"n\">hd'</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">sq</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I tried using <code>multiplicity</code> but the API there is a bit weird / lacking, and <code>Factorization</code> doesn't work since <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> doesn't have to be a prime (yes, it works for non-primes too - maybe not for p=0, I haven't thought about that).</p>",
        "id": 425613196,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709934829
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp'</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">Squarefree</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hp'</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> Simple case -/</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hp'</span><span class=\"o\">,</span> <span class=\"n\">one_dvd</span><span class=\"o\">]</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> The other case -/</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">n'</span><span class=\"o\">,</span> <span class=\"n\">hn'</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hp</span>\n  <span class=\"n\">subst</span> <span class=\"n\">hn'</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hd'</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">∣</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">n'</span>\n  <span class=\"bp\">·</span> <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">n'</span> <span class=\"bp\">/</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.mul_div_assoc</span> <span class=\"n\">_</span> <span class=\"n\">hd'</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">sq</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">d'</span><span class=\"o\">,</span> <span class=\"n\">hd'</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hd</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hd'</span><span class=\"o\">]</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.mul_div_right</span> <span class=\"n\">d'</span> <span class=\"n\">this</span><span class=\"o\">]</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">d'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Squarefree.dvd_of_squarefree_of_mul_dvd_mul_right</span> <span class=\"n\">hn</span> <span class=\"n\">this</span>\n</code></pre></div>",
        "id": 425619526,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1709938191
    },
    {
        "content": "<p>I worked out something very similar!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp'</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">Squarefree</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hp'</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> Simple case -/</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hp'</span><span class=\"o\">,</span> <span class=\"n\">one_dvd</span><span class=\"o\">]</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> The other case -/</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">n'</span><span class=\"o\">,</span> <span class=\"n\">hn'</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hp</span>\n  <span class=\"n\">subst</span> <span class=\"n\">hn'</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hd'</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">∣</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">n'</span>\n  <span class=\"bp\">·</span> <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">n'</span> <span class=\"bp\">/</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.mul_div_assoc</span> <span class=\"n\">_</span> <span class=\"n\">hd'</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">sq</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">refine</span> <span class=\"n\">hd'.elim</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"bp\">;</span> <span class=\"n\">clear</span> <span class=\"n\">hd'</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">d1</span><span class=\"o\">,</span> <span class=\"n\">d2</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩:=</span> <span class=\"n\">dvd_mul.mp</span> <span class=\"n\">hd</span>\n    <span class=\"n\">apply</span> <span class=\"n\">mul_dvd_mul</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"n\">h2</span>\n    <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">hn.of_mul_left.dvd_pow_iff_dvd</span> <span class=\"n\">two_ne_zero</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 425619809,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709938332
    },
    {
        "content": "<p>Thanks both! Damiano can you explain the <code>obtain \\&lt;..., rfl\\&gt;</code> (again), I tried a billion times and still don't understand it</p>",
        "id": 425625885,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709942686
    },
    {
        "content": "<p>I observed that <code>rcases ... with ... | rfl</code> is kind of like cases then <code>subst</code> or something</p>",
        "id": 425636358,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709951919
    },
    {
        "content": "<p>For <code>obtain</code>, start thinking as though it was <code>have</code> and give just a name to the resulting hypothesis that it will add.</p>\n<p>However, unlike <code>have</code>, <code>obtain</code> gives you the option of pattern matching on the shape of the hypothesis.  In the example above, the hypothesis was a sequence of existentials, <code>And</code> and an equality.  So, you can name the various pieces by writing <code>⟨names⟩</code>.</p>\n<p>Next, if you have a hypothesis on which <code>subst</code> would work, writing <code>rfl</code> in it's place, will do <code>subst</code>.</p>\n<p>The pattern matching in <code>obtain</code> and in <code>rcases</code> are similar, though I do not know if they are really identical -- they may be.</p>",
        "id": 425654697,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709965337
    },
    {
        "content": "<p>In the example above, <code>h1</code> was a divisibility assumption (if I remember correctly) and you could have replaced <code>..., h1,...</code> in the <code>obtain</code> pattern with <code>..., ⟨c, h⟩,...</code> to break into the existential implied by the divisibility.  And <code>h</code> could have been <code>rfl</code>, and so on recursively (untested).</p>",
        "id": 425654902,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1709965594
    },
    {
        "content": "<p>Ahh okay, thanks for the explanation!</p>",
        "id": 425673854,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709978571
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113489-new-members/topic/Divisibility.20proof.202/near/425654697\">said</a>:</p>\n<blockquote>\n<p>The pattern matching in <code>obtain</code> and in <code>rcases</code> are similar, though I do not know if they are really identical -- they may be.</p>\n</blockquote>\n<p>The documentation says that they're the same: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Parser.Tactic.obtain#doc\">docs#Lean.Parser.Tactic.obtain</a></p>",
        "id": 425734128,
        "sender_full_name": "Chris Wong",
        "timestamp": 1710035089
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"579936\">Gareth Ma</span> has marked this topic as resolved.</p>",
        "id": 426034192,
        "sender_full_name": "Notification Bot",
        "timestamp": 1710204916
    }
]