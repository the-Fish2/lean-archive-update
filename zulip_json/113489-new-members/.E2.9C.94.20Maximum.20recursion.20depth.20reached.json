[
    {
        "content": "<p>Hey, I get \"maximum recursion depth reached\" at the sorry in the following somewhat minimal example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">10</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">S'</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Finset.biUnion</span> <span class=\"o\">(</span><span class=\"n\">Finset.range</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Finset.range</span> <span class=\"mi\">10</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">Finset.range</span> <span class=\"mi\">10</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">g'</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">S'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>It seems that the error comes from the fact that I am taking a very big biUinon, because if I decrease 100 to for example 10, the code runs. I'm not sure how recursion depth works, so is there anyway I can fix this so that I can define a function into a biUnion with a big indexing set?</p>",
        "id": 420633749,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1707478197
    },
    {
        "content": "<p>This works, but not a step less:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">maxRecDepth</span> <span class=\"mi\">1126</span>\n<span class=\"kd\">def</span> <span class=\"n\">g'</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">S'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p><span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 420641943,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707481407
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113489-new-members/topic/Maximum.20recursion.20depth.20reached/near/420641943\">said</a>:</p>\n<blockquote>\n<p>This works, but not a step less:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">maxRecDepth</span> <span class=\"mi\">1126</span>\n<span class=\"kd\">def</span> <span class=\"n\">g'</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">S'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p><span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n</blockquote>\n<p>Yes, but what If I want to take an even bigger Finset.range? Shouldnt there be a way for me to do this without lean \"evaluating\" this huge union (or whatever it's doing). Or is this always necessary since I'm working with Finset?</p>",
        "id": 420645647,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1707482771
    },
    {
        "content": "<p>Using <code>irreducible_def</code> like this seems to help:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">irreducible_def</span> <span class=\"n\">S'</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Finset.biUnion</span> <span class=\"o\">(</span><span class=\"n\">Finset.range</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Finset.range</span> <span class=\"mi\">10</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">Finset.range</span> <span class=\"mi\">10</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 420703307,
        "sender_full_name": "David Renshaw",
        "timestamp": 1707501395
    },
    {
        "content": "<p>or just <code>@[irreducible] def ...</code></p>",
        "id": 420703335,
        "sender_full_name": "David Renshaw",
        "timestamp": 1707501405
    },
    {
        "content": "<p>(I recently learned about <code>irreducible_def</code> in this conversation: <a href=\"#narrow/stream/270676-lean4/topic/Stop.20unfolding.20expensive.20definitions/near/418384238\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Stop.20unfolding.20expensive.20definitions/near/418384238</a> )</p>",
        "id": 420703486,
        "sender_full_name": "David Renshaw",
        "timestamp": 1707501474
    },
    {
        "content": "<p>Could you make <code>S'</code> be a <code>Set</code> too, and then use lemmas to relate that <code>Set</code> to a <code>Finset</code> construction when you need it?</p>",
        "id": 420705516,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1707502213
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243791\">David Renshaw</span> <a href=\"#narrow/stream/113489-new-members/topic/Maximum.20recursion.20depth.20reached/near/420703307\">said</a>:</p>\n<blockquote>\n<p>Using <code>irreducible_def</code> like this seems to help:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">irreducible_def</span> <span class=\"n\">S'</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Finset.biUnion</span> <span class=\"o\">(</span><span class=\"n\">Finset.range</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Finset.range</span> <span class=\"mi\">10</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">Finset.range</span> <span class=\"mi\">10</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Oh this looks very good! Do you know if there is a way I can do this with <code>let </code> statements also?</p>",
        "id": 420786307,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1707558123
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Maximum.20recursion.20depth.20reached/near/420705516\">said</a>:</p>\n<blockquote>\n<p>Could you make <code>S'</code> be a <code>Set</code> too, and then use lemmas to relate that <code>Set</code> to a <code>Finset</code> construction when you need it?</p>\n</blockquote>\n<p>I'm not sure, I think that would also be very good but I cant seem to find the right lemmas to go between <code>Set.biUnion</code> and <code>Finset.biUnion</code>. The only thing I can find is <code>Set.Finite.biUnion</code>, but I don't know how to use that to then convert it to a Finset.</p>",
        "id": 420786516,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1707558343
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"132603\">Calle Sönne</span> <a href=\"#narrow/stream/113489-new-members/topic/Maximum.20recursion.20depth.20reached/near/420786516\">said</a>:</p>\n<blockquote>\n<p>The only thing I can find is <code>Set.Finite.biUnion</code>, but I don't know how to use that to then convert it to a Finset.</p>\n</blockquote>\n<p>Is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.Finite.toFinset#doc\">docs#Set.Finite.toFinset</a> the missing ingredient?</p>",
        "id": 420817280,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1707585587
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"500038\">Timo Carlin-Burns</span> <a href=\"#narrow/stream/113489-new-members/topic/Maximum.20recursion.20depth.20reached/near/420817280\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"132603\">Calle Sönne</span> <a href=\"#narrow/stream/113489-new-members/topic/Maximum.20recursion.20depth.20reached/near/420786516\">said</a>:</p>\n<blockquote>\n<p>The only thing I can find is <code>Set.Finite.biUnion</code>, but I don't know how to use that to then convert it to a Finset.</p>\n</blockquote>\n<p>Is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.Finite.toFinset#doc\">docs#Set.Finite.toFinset</a> the missing ingredient?</p>\n</blockquote>\n<p>I'm not sure, that gives me a finset, but I would also want to know that this finset is a biunion of finsets (because eventually I want to compute its cardinality).</p>",
        "id": 420819582,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1707587460
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"132603\">Calle Sönne</span> <a href=\"#narrow/stream/113489-new-members/topic/Maximum.20recursion.20depth.20reached/near/420786307\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"243791\">David Renshaw</span> <a href=\"#narrow/stream/113489-new-members/topic/Maximum.20recursion.20depth.20reached/near/420703307\">said</a>:</p>\n<blockquote>\n<p>Using <code>irreducible_def</code> like this seems to help:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">irreducible_def</span> <span class=\"n\">S'</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Finset.biUnion</span> <span class=\"o\">(</span><span class=\"n\">Finset.range</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Finset.range</span> <span class=\"mi\">10</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">Finset.range</span> <span class=\"mi\">10</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Oh this looks very good! Do you know if there is a way I can do this with <code>let </code> statements also?</p>\n</blockquote>\n<p>The <code>set x := v with h</code> tactic is a close equivalent of <code>irreducible_def</code> which works in tactic mode. e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">set</span> <span class=\"n\">S'</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">Finset.biUnion</span> <span class=\"o\">(</span><span class=\"n\">Finset.range</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Finset.range</span> <span class=\"mi\">10</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">Finset.range</span> <span class=\"mi\">10</span><span class=\"o\">)</span>\n    <span class=\"k\">with</span> <span class=\"n\">S'_def</span>\n</code></pre></div>",
        "id": 420828996,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1707595334
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"132603\">Calle Sönne</span> <a href=\"#narrow/stream/113489-new-members/topic/Maximum.20recursion.20depth.20reached/near/420819582\">said</a>:</p>\n<blockquote>\n<p>I'm not sure, that gives me a finset, but I would also want to know that this finset is a biunion of finsets (because eventually I want to compute its cardinality).</p>\n</blockquote>\n<p>Does this help? It seems hard to provide exactly what you need for this cardinality-based proof without being able to see the bigger picture. If you still want help, can you provide a more complete code snippet, ideally with a <code>sorry</code> for the ultimate goal you're trying to prove?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Finite</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Set.Finite.biUnion_toFinset</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s.Finite</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Finite</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">biUnion</span> <span class=\"n\">hs</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hf</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toFinset</span> <span class=\"bp\">=</span> <span class=\"n\">Finset.biUnion</span> <span class=\"o\">(</span><span class=\"n\">hs.toFinset</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toFinset</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 420829260,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1707595611
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"500038\">Timo Carlin-Burns</span> <a href=\"#narrow/stream/113489-new-members/topic/Maximum.20recursion.20depth.20reached/near/420829260\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"132603\">Calle Sönne</span> <a href=\"#narrow/stream/113489-new-members/topic/Maximum.20recursion.20depth.20reached/near/420819582\">said</a>:</p>\n<blockquote>\n<p>I'm not sure, that gives me a finset, but I would also want to know that this finset is a biunion of finsets (because eventually I want to compute its cardinality).</p>\n</blockquote>\n<p>Does this help? It seems hard to provide exactly what you need for this cardinality-based proof without being able to see the bigger picture. If you still want help, can you provide a more complete code snippet, ideally with a <code>sorry</code> for the ultimate goal you're trying to prove?</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Finite</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Set.Finite.biUnion_toFinset</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s.Finite</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Finite</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">biUnion</span> <span class=\"n\">hs</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hf</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toFinset</span> <span class=\"bp\">=</span> <span class=\"n\">Finset.biUnion</span> <span class=\"o\">(</span><span class=\"n\">hs.toFinset</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toFinset</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span>\n  <span class=\"n\">simp</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This is perfect, thank you!!</p>",
        "id": 420883912,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1707652126
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"500038\">Timo Carlin-Burns</span> <a href=\"#narrow/stream/113489-new-members/topic/Maximum.20recursion.20depth.20reached/near/420828996\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"132603\">Calle Sönne</span> <a href=\"#narrow/stream/113489-new-members/topic/Maximum.20recursion.20depth.20reached/near/420786307\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"243791\">David Renshaw</span> <a href=\"#narrow/stream/113489-new-members/topic/Maximum.20recursion.20depth.20reached/near/420703307\">said</a>:</p>\n<blockquote>\n<p>Using <code>irreducible_def</code> like this seems to help:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">irreducible_def</span> <span class=\"n\">S'</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Finset.biUnion</span> <span class=\"o\">(</span><span class=\"n\">Finset.range</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Finset.range</span> <span class=\"mi\">10</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">Finset.range</span> <span class=\"mi\">10</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Oh this looks very good! Do you know if there is a way I can do this with <code>let </code> statements also?</p>\n</blockquote>\n<p>The <code>set x := v with h</code> tactic is a close equivalent of <code>irreducible_def</code> which works in tactic mode. e.g.</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">set</span> <span class=\"n\">S'</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">Finset.biUnion</span> <span class=\"o\">(</span><span class=\"n\">Finset.range</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Finset.range</span> <span class=\"mi\">10</span> <span class=\"bp\">×ˢ</span> <span class=\"n\">Finset.range</span> <span class=\"mi\">10</span><span class=\"o\">)</span>\n    <span class=\"k\">with</span> <span class=\"n\">S'_def</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Interestingly enough, <code>set x := v with h</code> seems to also give a maximum recursion depth error. But the other option you sent works great :)</p>",
        "id": 420883955,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1707652170
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"132603\">Calle Sönne</span> has marked this topic as resolved.</p>",
        "id": 420909085,
        "sender_full_name": "Notification Bot",
        "timestamp": 1707674057
    }
]