[
    {
        "content": "<p>Consider the following example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Category.MonCat.Basic</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">MonCat</span>\n\n<span class=\"c1\">-- dropping the `[UnivLE.{v, u}]` makes it work</span>\n<span class=\"kd\">@[</span><span class=\"n\">to_additive</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">[</span><span class=\"n\">UnivLE.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}]</span> <span class=\"o\">:</span> <span class=\"n\">Category</span> <span class=\"o\">(</span><span class=\"n\">MonCat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">to_additive</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">bla</span> <span class=\"o\">:</span> <span class=\"n\">Category</span> <span class=\"o\">(</span><span class=\"n\">MonCat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span>\n</code></pre></div>\n<p>The <code>to_additive</code> tag on <code>bla</code> fails with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">▶</span> <span class=\"mi\">12</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"bp\">-</span><span class=\"mi\">12</span><span class=\"o\">:</span><span class=\"mi\">14</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">kernel</span><span class=\"o\">)</span> <span class=\"n\">declaration</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">AddMonCat.bla'</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">,</span> <span class=\"n\">u_1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">MonCat</span>\n<span class=\"n\">but</span> <span class=\"n\">it</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">,</span> <span class=\"n\">u_1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">AddMonCat</span>\n</code></pre></div>\n<p>I think the problem is that <code>to_additive</code> does not additivize the call of <code>foo</code>, since the <code>UnivLE.{v, u}</code> argument has no multiplicative type-class. I tried various versions with <code>to_additive_ignore_args</code> and/or <code>to_additive_relevant_arg</code> with no success. Can I tell <code>to_additive</code> that it should additivize based on the return type?</p>",
        "id": 425772735,
        "sender_full_name": "Christian Merten",
        "timestamp": 1710076647
    },
    {
        "content": "<p>For completeness, here is the output of <code>to_additive?</code> on <code>bla</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">▶</span> <span class=\"mi\">12</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"bp\">-</span><span class=\"mi\">12</span><span class=\"o\">:</span><span class=\"mi\">15</span><span class=\"o\">:</span> <span class=\"n\">information</span><span class=\"o\">:</span>\n<span class=\"o\">[</span><span class=\"n\">to_additive</span><span class=\"o\">]</span> <span class=\"n\">Added</span> <span class=\"n\">translation</span> <span class=\"n\">MonCat.bla</span> <span class=\"bp\">↦</span> <span class=\"n\">AddMonCat.bla</span>\n\n<span class=\"o\">[</span><span class=\"n\">to_additive</span><span class=\"o\">]</span> <span class=\"n\">generating</span>\n    <span class=\"n\">AddMonCat.bla.proof_1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">),</span> <span class=\"n\">Small.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n      <span class=\"k\">fun</span> <span class=\"n\">α</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">univLE_of_max</span> <span class=\"n\">α</span>\n\n<span class=\"o\">[</span><span class=\"n\">to_additive</span><span class=\"o\">]</span> <span class=\"n\">generating</span>\n    <span class=\"n\">AddMonCat.bla</span> <span class=\"o\">:</span> <span class=\"n\">CategoryTheory.Category.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">,</span> <span class=\"n\">u_1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">AddMonCat</span> <span class=\"o\">:=</span>\n      <span class=\"n\">MonCat.foo</span>\n</code></pre></div>",
        "id": 425772831,
        "sender_full_name": "Christian Merten",
        "timestamp": 1710076717
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> Is this a <code>to_additive</code> bug? The first <code>to_additive</code> adds the translation <code>MonCat.foo ↦ AddMonCat.foo </code>, but the second <code>to_additive</code> doesn't appear to make use of it.</p>",
        "id": 425786720,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1710088840
    },
    {
        "content": "<p><code>set_option trace.to_additive_detail true</code><br>\ngives<br>\n<code>The application of MonCat.foo contains the fixed type MonCat.bla.proof_1, so it is not changed</code><br>\nSo this is the heuristics misfiring. Because the first argument of <code>MonCat.foo</code> is a constant, it thinks we're additivizing an operation in a type like <code>Nat</code>, and therefore decides to not translate.</p>\n<p>As a workaround, you can add the attribute <code>to_additive_relevant_arg 2</code> to <code>foo</code>. This tells <code>to_additive</code> to translate it unless the second argument is a fixed type, which will never happen since <code>foo</code> only has one argument.</p>",
        "id": 425796382,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1710097086
    },
    {
        "content": "<p>If I understand correctly,  you suggest this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">to_additive_relevant_arg</span> <span class=\"mi\">2</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">[</span><span class=\"n\">UnivLE.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}]</span> <span class=\"o\">:</span> <span class=\"n\">Category</span> <span class=\"o\">(</span><span class=\"n\">MonCat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">to_additive</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">bla</span> <span class=\"o\">:</span> <span class=\"n\">Category</span> <span class=\"o\">(</span><span class=\"n\">MonCat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span>\n</code></pre></div>\n<p>This seems to not generate an additivized version of <code>foo</code>, hence <code>to_additive</code> on <code>bla</code> fails with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">▶</span> <span class=\"mi\">15</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"bp\">-</span><span class=\"mi\">15</span><span class=\"o\">:</span><span class=\"mi\">14</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span>\n<span class=\"kd\">@[</span><span class=\"n\">to_additive</span><span class=\"kd\">]</span> <span class=\"n\">failed.</span> <span class=\"kt\">Type</span> <span class=\"n\">mismatch</span> <span class=\"k\">in</span> <span class=\"n\">additive</span> <span class=\"n\">declaration.</span> <span class=\"n\">For</span> <span class=\"n\">help</span><span class=\"o\">,</span> <span class=\"n\">see</span> <span class=\"n\">the</span> <span class=\"n\">docstring</span> <span class=\"n\">of</span> <span class=\"bp\">`</span><span class=\"n\">to_additive.attr</span><span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"kn\">section</span> <span class=\"bp\">`</span><span class=\"n\">Troubleshooting</span><span class=\"bp\">`.</span> <span class=\"n\">Failed</span> <span class=\"n\">to</span> <span class=\"n\">add</span> <span class=\"n\">declaration</span>\n<span class=\"n\">AddMonCat.bla</span><span class=\"o\">:</span>\n<span class=\"n\">unknown</span> <span class=\"kd\">constant</span> <span class=\"bp\">'</span><span class=\"n\">AddMonCat.foo'</span>\n</code></pre></div>",
        "id": 425796845,
        "sender_full_name": "Christian Merten",
        "timestamp": 1710097456
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">to_additive</span><span class=\"o\">,</span> <span class=\"n\">to_additive_relevant_arg</span> <span class=\"mi\">2</span><span class=\"kd\">]</span> <span class=\"c1\">-- in either order</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">[</span><span class=\"n\">UnivLE.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}]</span> <span class=\"o\">:</span> <span class=\"n\">Category</span> <span class=\"o\">(</span><span class=\"n\">MonCat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n</code></pre></div>",
        "id": 425796891,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1710097497
    },
    {
        "content": "<p>Ah, this works. Thanks!</p>",
        "id": 425796927,
        "sender_full_name": "Christian Merten",
        "timestamp": 1710097526
    }
]