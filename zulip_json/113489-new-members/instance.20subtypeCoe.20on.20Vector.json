[
    {
        "content": "<p>So vector is defined as a subtype of List. Subtypes have CoeOut instance that coerces to the subtype's <code>.val</code>. My intuition is that these two below should be the same, but <code>bar</code> doesn't typecheck </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">ℕ</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">42</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">l.val</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">ℕ</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">42</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"bp\">↑</span><span class=\"n\">l</span>\n</code></pre></div>\n<p>Even more confusingly, vscode will display this in the proof state with <code>↑</code> even though the type checker doesn't like it. What is/isn't happening?</p>",
        "id": 419263600,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1706799319
    },
    {
        "content": "<p>There could be multiple coercions out of Vector, and the <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Membership.mem#doc\">docs#Membership.mem</a> operator does not give Lean an expected type for what <code>↑l</code> should be; so Lean just gives up.</p>",
        "id": 419272161,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1706801631
    },
    {
        "content": "<p>Yeah, looking at the error that makes sense. It's not failing on an instance of membership List, but of Vector. Though I was expecting something telling me the coersion failed rather than that the instance lookup failed. I supposed it just coerced into itself under the hood?</p>\n<p>I'm surprised Vector doesn't have an instance for membership defined. Not that this is hard to work around.</p>",
        "id": 419274914,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1706802365
    },
    {
        "content": "<p>Coercions are allowed to be identity coercions, and it looks like this is a case where it chooses that.</p>\n<p>Generally, to get coercions to work there needs to be an expected type, like Eric said. One way is to add a type ascription, which has the added feature that Lean inserts a coercion at this point if there's a type mismatch. For example, you might want</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">ℕ</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">42</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>However, it looks like <code>Vector</code> doesn't have a coercion to <code>List</code>, so there's an error at the type ascription.</p>",
        "id": 419292348,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1706807051
    },
    {
        "content": "<p>Shouldn't this:<br>\n<a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Coe.html#subtypeCoe\">https://leanprover-community.github.io/mathlib4_docs/Init/Coe.html#subtypeCoe</a></p>\n<p>mean that Vector gets a coercion to List? Am I reading it wrong?</p>",
        "id": 419317228,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1706815439
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Vector#doc\">docs#Vector</a> is <em>semireducible</em>. So the answer is \"No, unless someone made an explict <code>Coe</code> instance about <code>Vector</code>\"</p>",
        "id": 419317537,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1706815545
    },
    {
        "content": "<p>In other words, the definition of <code>Vector</code> is a <code>def</code> rather than an <code>abbrev</code>, so the typeclass mechanism isn't aware <code>Vector</code> is a <code>Subtype</code>.</p>",
        "id": 419317807,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1706815641
    },
    {
        "content": "<p>Yup. That makes sense. So the following works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">Vector</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">l.length</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">ℕ</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"mi\">42</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 419319626,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1706816290
    },
    {
        "content": "<p>just curious, is there a difference between <code>abbrev</code> and a <code>def</code> with <code>@[reducible]</code>?</p>",
        "id": 419351769,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1706829846
    },
    {
        "content": "<p>Yes, <code>abbrev</code> is <code>@[reducible, inline] def</code> if I'm not wrong</p>",
        "id": 419396614,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1706858739
    }
]