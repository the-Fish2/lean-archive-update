[
    {
        "content": "<p>Hello.  I'm trying to get lean working on macos, but am having trouble with Mathlib wanting to rebuild all the time in new projects (although not in the MIL project, which works fine).  I've followed the instructions at <a href=\"https://leanprover-community.github.io/install/macos.html\">https://leanprover-community.github.io/install/macos.html</a>, <a href=\"https://leanprover-community.github.io/install/macos_details.html\">https://leanprover-community.github.io/install/macos_details.html</a> and <a href=\"https://stackoverflow.com/questions/77280192/mathlib-keeps-rebuilding-even-after-i-lake-exe-cache-get\">https://stackoverflow.com/questions/77280192/mathlib-keeps-rebuilding-even-after-i-lake-exe-cache-get</a>.</p>\n<p>The last link suggests that the issue might be that my lean version is 4.4.0, while .lake/packages/mathlib/lean-toolchain is \"leanprover/lean4:v4.5.0-rc1\" for new projects (and \"leanprover/lean4:v4.4.0-rc1\" for MIL).  I can't seem to get elan to switch to 4.5.0.  Here's some terminal output in case it's of any use: <a href=\"/user_uploads/3121/evhdQbLqyA2ywsQ9xJ5SJ6HE/lean.txt\">lean.txt</a>.  Any suggestions welcome!</p>",
        "id": 410495134,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1703896750
    },
    {
        "content": "<p>Once someone helps you with this and you get Lean up and running, let's formalize some subconvexity bounds! :)</p>",
        "id": 410549020,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1703946137
    },
    {
        "content": "<p>The lean version elan uses depends on what is in the file <code>lean-toolchain</code> elan should handle things automatically to use whatever that version is.<br>\nDo I understand that you have created a project depending on mathlib? In that case you probably want to copy the <code>lean-toolchain</code> file from <code>.lake/packages/mathlib/lean-toolchain</code> to the root directory of your project, so that they use the same version</p>",
        "id": 410549511,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1703946623
    },
    {
        "content": "<p>If you've done that and it still isn't working can you paste the ouput of <code>elan show</code> here</p>",
        "id": 410549550,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1703946671
    },
    {
        "content": "<p>You should probably also uninstall the brew version of lean, that wont be much use</p>",
        "id": 410549615,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1703946724
    },
    {
        "content": "<p>Thanks.  I believe that I did create a project depending upon mathlib, following the instructions at the links in my message:</p>\n<p>lake +leanprover/lean4:nightly-2023-02-04 new Foo math<br>\ncd Foo<br>\nlake update<br>\nlake exe cache get<br>\nmkdir Foo</p>\n<p>the lean-toolchain file in both the root of the project and .lake/packages/mathlib say the same thing, namely leanprover/lean4:v4.5.0-rc1</p>\n<p>brew does not seem to think that the brew version of lean is installed.  I tried \"brew uninstall lean\".  It appears in that homebrew folder, but I feel like elan is putting that symlink there.  There are some details on this in the file I attached to my message</p>\n<p>here's my current output from elan show (also in the attachment):</p>\n<p>% elan show<br>\nelan show<br>\ninstalled toolchains</p>\n<hr>\n<p>stable (default)<br>\nleanprover-community/lean:3.42.1<br>\nleanprover-community/lean:3.49.1<br>\nleanprover/lean4:nightly-2023-02-04<br>\nleanprover/lean4:stable<br>\nleanprover/lean4:v4.3.0-rc1<br>\nleanprover/lean4:v4.4.0-rc1<br>\nleanprover/lean4:v4.5.0-rc1<br>\n4.5.0-rc1</p>\n<p>active toolchain</p>\n<hr>\n<p>leanprover/lean4:v4.4.0-rc1 (overridden by '/Users/au710211/lean/mathematics_in_lean/lean-toolchain')<br>\nLean (version 4.4.0-rc1, commit b0fe9d6cdca8, Release)</p>",
        "id": 410549732,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1703946847
    },
    {
        "content": "<p>sorry, that \"elan show\" wasn't the most relevant one, since I ran it from a different directory.  Running from \"Foo\" gives:</p>\n<p>au710211@d51735 Foo % elan show<br>\nelan show<br>\ninstalled toolchains</p>\n<hr>\n<p>stable (default)<br>\nleanprover-community/lean:3.42.1<br>\nleanprover-community/lean:3.49.1<br>\nleanprover/lean4:nightly-2023-02-04<br>\nleanprover/lean4:stable<br>\nleanprover/lean4:v4.3.0-rc1<br>\nleanprover/lean4:v4.4.0-rc1<br>\nleanprover/lean4:v4.5.0-rc1<br>\n4.5.0-rc1</p>\n<p>active toolchain</p>\n<hr>\n<p>leanprover/lean4:v4.5.0-rc1 (overridden by '/Users/au710211/lean/Foo/lean-toolchain')<br>\nLean (version 4.5.0-rc1, commit b614ff1d12bc, Release)</p>",
        "id": 410550199,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1703947363
    },
    {
        "content": "<p>if I run it from a non-project directory, then it shows:</p>\n<p>active toolchain</p>\n<hr>\n<p>stable (default)<br>\nLean (version 4.4.0, commit ca7d6dadb9e1, Release)</p>",
        "id": 410550243,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1703947434
    },
    {
        "content": "<p>Ok that second one seems fine (in Foo), if you run <code>lake exe cache get</code> then <code>lake build</code> in that directory what is the full output</p>",
        "id": 410550297,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1703947455
    },
    {
        "content": "<p>au710211@d51735 Foo % lake exe cache get<br>\nlake exe cache get<br>\nNo files to download<br>\nDecompressing 4066 file(s)<br>\nunpacked in 36051 ms<br>\nau710211@d51735 Foo % lake build<br>\nlake build<br>\n[1/2] Building Foo<br>\nau710211@d51735 Foo %</p>",
        "id": 410550362,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1703947552
    },
    {
        "content": "<p>(don't let it run for more than a few minutes)</p>",
        "id": 410550435,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1703947597
    },
    {
        "content": "<p>it's already done.  that was it</p>",
        "id": 410550441,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1703947605
    },
    {
        "content": "<p>I mean, I ran this command already when I set the project up, don't have the full output from that one.  could try creating a fresh project and sharing what it says then</p>",
        "id": 410550465,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1703947643
    },
    {
        "content": "<p>Sounds like it worked</p>",
        "id": 410550564,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1703947745
    },
    {
        "content": "<p>This is the output you should be getting</p>",
        "id": 410550577,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1703947767
    },
    {
        "content": "<p>OK, but when I open it (in VSCode or Emacs, I've tried both), it's very often saying something like \"imports out of date, need to rebuild mathlib\", which then takes a long time</p>",
        "id": 410550594,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1703947800
    },
    {
        "content": "<p>opening it in VSCode just now, it says \"Imports of 'test.lean' are out of date and must be rebuilt.\"</p>",
        "id": 410550665,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1703947847
    },
    {
        "content": "<p>here are the contents of test.lean, for whatever that's worth:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Module.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Algebra.Subalgebra.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Module.End</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Subalgebra.centralizer</span> <span class=\"n\">R</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">V</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">f1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Module.End</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">V</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Module.End</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">Module.End</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">smulRight</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"n\">f2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Subalgebra.centralizer</span> <span class=\"n\">R</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">Module.End</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Subalgebra.val</span> <span class=\"o\">(</span><span class=\"n\">Subalgebra.centralizer</span> <span class=\"n\">R</span> <span class=\"n\">s</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">toLinearMap</span>\n  <span class=\"n\">exact</span> <span class=\"n\">f1.comp</span> <span class=\"n\">f2</span>\n</code></pre></div>",
        "id": 410550696,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1703947884
    },
    {
        "content": "<p>I'd wonder if there are stray lean or VS code processes getting in the way</p>",
        "id": 410552164,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1703949352
    },
    {
        "content": "<p>I've been wondering that too, been trying to keep a fresh one isolated for a bit, and no issues so far</p>",
        "id": 410552259,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1703949411
    },
    {
        "content": "<p>I was using emacs to work through the MIL exercises</p>",
        "id": 410552271,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1703949422
    },
    {
        "content": "<p>which are with 4.4.0 mathlib</p>",
        "id": 410552278,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1703949434
    },
    {
        "content": "<p>and I have no sense of how it spins up lean processes to work with lsp-mode there</p>",
        "id": 410552302,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1703949455
    },
    {
        "content": "<p>and how they'd interfere with lean processes that should be for different projects</p>",
        "id": 410552320,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1703949475
    },
    {
        "content": "<p>have you seen situations where stray processes play some role?</p>",
        "id": 410552385,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1703949500
    },
    {
        "content": "<p>after editing for awhile, I got the message \"lean version changed\" and was prompted to restart lean.  Then I saw the following in the \"output\" console:</p>\n<blockquote>\n<blockquote>\n<p>lean +leanprover/lean4:stable --version<br>\nLean (version 4.4.0, commit ca7d6dadb9e1, Release)</p>\n</blockquote>\n<p>/Users/au710211/lean/Goo&gt; lean +leanprover/lean4:v4.5.0-rc1 --version<br>\nLean (version 4.5.0-rc1, commit b614ff1d12bc, Release)</p>\n<p>/Users/au710211/lean/Goo&gt; lean +leanprover/lean4:v4.5.0-rc1 --version<br>\nLean (version 4.5.0-rc1, commit b614ff1d12bc, Release)</p>\n<p>/Users/au710211/lean/Goo&gt; lean +leanprover/lean4:v4.5.0-rc1 --version<br>\nLean (version 4.5.0-rc1, commit b614ff1d12bc, Release)</p>\n<p>[Error - 18:48:46] Stopping server timed out<br>\nWatchdog error: Got <code>shutdown</code> request, expected an <code>exit</code> notification</p>\n</blockquote>\n<p>now this project (like all the others I've tried before it) is in the broken state where it constantly tries to rebuild mathlib.  it remains in this state after quitting all editors and killing all lake/lean processes</p>",
        "id": 410562271,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1703959232
    },
    {
        "content": "<p>I've checked that no files in my project folder (other than the source files I was editing) have actually changed.  so I guess what I'd like to understand is, where might this \"broken state\" be stored, and how might I go about reverting it?</p>",
        "id": 410562347,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1703959288
    },
    {
        "content": "<p>maybe a concrete question in that direction would be, when lean says it's rebuilding mathlib, where is it actually storing the result of that build?  doesn't seem to be anywhere in my project folder</p>",
        "id": 410562457,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1703959341
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"571592\">Paul Nelson</span> <a href=\"#narrow/stream/113489-new-members/topic/Paul.20Nelson/near/410562457\">said</a>:</p>\n<blockquote>\n<p>maybe a concrete question in that direction would be, when lean says it's rebuilding mathlib, where is it actually storing the result of that build?  doesn't seem to be anywhere in my project folder</p>\n</blockquote>\n<p><code>.lake/build</code> inside the project directory, or <code>.lake/packages/PACKAGE/.lake/build</code> for dependencies</p>",
        "id": 410565534,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1703962800
    },
    {
        "content": "<p>ah, there it is, thanks (Goo/.lake/packages/mathlib/.lake/build/lib)</p>",
        "id": 410565829,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1703962956
    },
    {
        "content": "<p>You can try nuking the <code>.lake</code> directory and then running <code>lake exe cache get!</code> to download everything from scratch</p>",
        "id": 410565850,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1703962967
    },
    {
        "content": "<p>thanks, will try</p>",
        "id": 410565866,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1703962979
    },
    {
        "content": "<p>the folder where the offensive compilation seems to happen is Goo/.lake/packages/mathlib/.lake/build/lib.  Do I infer correctly that you're suggesting I nuke Goo/.lake/packages/mathlib/.lake, or the parent .lake?</p>",
        "id": 410565980,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1703963111
    },
    {
        "content": "<p><code>lake exe cache get!</code> will recreate everything from scratch, so deleting the parent <code>.lake</code> seems more likely to fix your problem</p>",
        "id": 410566103,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1703963219
    },
    {
        "content": "<p>ok, thanks!  seems like that should at least let me \"medicate\" the issue for now</p>",
        "id": 410567160,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1703964348
    },
    {
        "content": "<p>ok, thanks!  seems like that should at least let me \"medicate\" the issue for now</p>",
        "id": 410567166,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1703964354
    },
    {
        "content": "<p>I thought I'd ask if the following is normal behavior:</p>\n<ol>\n<li>In my project folder, I do <code>rm -rf .lake</code> followed by <code>lake exe cache get!</code>, as suggested above.</li>\n<li>I open .lake/packages/mathlib in vscode (or some .lean file from it in emacs -- get the same result either way)</li>\n<li>vscode immediately tells me that imports are out of date and need to be rebuilt.  (emacs just starts building those imports.)  this takes a while.</li>\n</ol>",
        "id": 410637596,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1704033065
    },
    {
        "content": "<p>This is not normal. Do you have any unsaved changes to VS Code tabs corresponding to mathlib files?</p>",
        "id": 410637964,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1704033429
    },
    {
        "content": "<p>I have everything closed (emacs and vscode), then I open just a single file from ./lake/packages/mathlib (say in vscode, using Finder to select the file), it offers to open the project containing the file, and then the above happens.  there are no changes to any of the mathlib files, and this happens immediately after doing rm -rf etc as above</p>",
        "id": 410638075,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1704033504
    },
    {
        "content": "<p>Step 2 is wrong, you need to open the root project in VS Code. You can then still open individual files from that directory (or jump to them via go-to-definition on imports)</p>",
        "id": 410638091,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1704033518
    },
    {
        "content": "<p>step 2 I'm just doing to try to diagnose the issue that creeps in when I open the root project and work on stuff manually that way.</p>",
        "id": 410638111,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1704033540
    },
    {
        "content": "<p>it seems to happen randomly after I've been editing for a while and using \"goto definition\" to visit mathlib files, but hasn't been fully reproducible</p>",
        "id": 410638149,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1704033566
    },
    {
        "content": "<p>but the above steps do seem to be reproducible</p>",
        "id": 410638158,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1704033573
    },
    {
        "content": "<p>(I assume you mean \"wrong\" as in \"that's not what you want to do when you're actually working on your project in practice\")</p>",
        "id": 410638271,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1704033652
    },
    {
        "content": "<p>or do you mean that the above behavior is to be expected when I do those steps (even if they're not the appropriate steps in practice)?</p>",
        "id": 410638298,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1704033684
    },
    {
        "content": "<p>I don't know but the tooling certainly doesn't expect you to do it like that. Can you reproduce the issue when opening the root project in VS Code and then jumping to Mathlib.lean?</p>",
        "id": 410638461,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1704033850
    },
    {
        "content": "<p>doing things the normal way (opening a project and jumping around), the issue just seems to creep in at random, forcing me to run step (1) every now and then.  I haven't yet found a completely reproducible recipe or pattern, but will pay attention</p>",
        "id": 410638729,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1704034131
    },
    {
        "content": "<p>I'll also mention that I'm mainly using emacs/lean4-mode, don't know if that might be an issue</p>",
        "id": 410638998,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1704034371
    },
    {
        "content": "<p>It may or may not be the case that lean4-mode makes the same mistake as your step 2 above. Unlike vscode-lean4, it can automatically select project roots.</p>",
        "id": 410639418,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1704034824
    },
    {
        "content": "<p>I noticed just now that lean4-mode spawns a separate lsp process for mathlib</p>",
        "id": 410639532,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1704034892
    },
    {
        "content": "<p>seems suspicious</p>",
        "id": 410639551,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1704034909
    },
    {
        "content": "<p>Indeed, same issue</p>",
        "id": 410639614,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1704034936
    },
    {
        "content": "<p>do you know if many people here use lean4-mode?  or is it basically unofficially unsupported as far as mathlib is concerned</p>",
        "id": 410639657,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1704034960
    },
    {
        "content": "<p>I assume it isn't many people. Development of lean4-mode has effectively halted as well.</p>",
        "id": 410639819,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1704035072
    },
    {
        "content": "<p>I see, OK</p>",
        "id": 410639827,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1704035082
    },
    {
        "content": "<p>do you happen to know if the correct approach (e.g., what happens in vscode when everything is working correctly) is just to have one lsp process for the whole thing, and to view mathlib as belonging to the parent project?</p>",
        "id": 410640030,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1704035264
    },
    {
        "content": "<p>Is this <a href=\"https://github.com/leanprover/lean4-mode/pull/48\">https://github.com/leanprover/lean4-mode/pull/48</a> ? Except that that patch would no longer work as  we now have <code>.lake</code> instead of <code>lake-packages</code> (and that directory name is configurable by the user anyway)</p>",
        "id": 410640549,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1704035767
    },
    {
        "content": "<p>I use emacs with lean4-mode for mathlib and some things that depend on mathlib. I find some things annoying, like it always asks \"do you want to watch all files in &lt;project root&gt;\" even if the right answer is seems to always be \"no\", and I have developed a habit of eagerly restarting emacs and/or doing <code>git clean</code> to clear out state e.g. when I switch branches. But for the most part it works well enough, and it certainly does not need to rebuild mathlib all the time.</p>",
        "id": 410641268,
        "sender_full_name": "David Renshaw",
        "timestamp": 1704036381
    },
    {
        "content": "<p>Actually, come to think of it, I do remember an issue on MacOS where if I'm in a project that depends on mathlib and I jump to definition of something inside of mathlib, somehow just visiting that file makes the lean server think that it needs to rebuild a bunch of stuff. I think this started happening some time between 0 and 9 months ago.</p>",
        "id": 410641426,
        "sender_full_name": "David Renshaw",
        "timestamp": 1704036501
    },
    {
        "content": "<p>yeah, I think the issue alex pointed to is exactly the one</p>",
        "id": 410641443,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1704036521
    },
    {
        "content": "<p>I was about to try to work out something similar</p>",
        "id": 410641482,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1704036567
    },
    {
        "content": "<p>david, regarding \"do you want to watch all files\", I'm using <code>(setq lsp-enable-file-watchers nil)</code></p>",
        "id": 410641537,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1704036605
    },
    {
        "content": "<p>OK, so I guess the question is: what would nowadays be appropriate way to determine that a repo (like the mathlib subfolder of a project) is intended to be a subproject rather than a project?</p>",
        "id": 410641622,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1704036706
    },
    {
        "content": "<p>also, david or anyone, I've been accumulating some lean4-mode tweaks at <a href=\"https://github.com/ultronozm/czm-lean4.el\">https://github.com/ultronozm/czm-lean4.el</a></p>",
        "id": 410641707,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1704036776
    },
    {
        "content": "<blockquote>\n<ol start=\"8\">\n<li>Line wrapping for the goal window, with visual indicators where it wraps.</li>\n</ol>\n</blockquote>\n<p><span aria-label=\"100\" class=\"emoji emoji-1f4af\" role=\"img\" title=\"100\">:100:</span></p>",
        "id": 410641741,
        "sender_full_name": "David Renshaw",
        "timestamp": 1704036825
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/Paul.20Nelson/near/410640549\">said</a>:</p>\n<blockquote>\n<p>Is this <a href=\"https://github.com/leanprover/lean4-mode/pull/48\">https://github.com/leanprover/lean4-mode/pull/48</a> ? Except that that patch would no longer work as  we now have <code>.lake</code> instead of <code>lake-packages</code> (and that directory name is configurable by the user anyway)</p>\n</blockquote>\n<p>do you know what sorts of things people use in practice other than \".lake\"?</p>",
        "id": 410644881,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1704039757
    },
    {
        "content": "<p><code>lake-packages</code> was renamed to <code>.lake/packages</code> as the default in v4.4.0</p>",
        "id": 410645046,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1704039963
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"571592\">Paul Nelson</span> <a href=\"#narrow/stream/113489-new-members/topic/Paul.20Nelson/near/410644881\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/Paul.20Nelson/near/410640549\">said</a>:</p>\n<blockquote>\n<p>Is this <a href=\"https://github.com/leanprover/lean4-mode/pull/48\">https://github.com/leanprover/lean4-mode/pull/48</a> ? Except that that patch would no longer work as  we now have <code>.lake</code> instead of <code>lake-packages</code> (and that directory name is configurable by the user anyway)</p>\n</blockquote>\n<p>do you know what sorts of things people use in practice other than \".lake\"?</p>\n</blockquote>\n<p>I think nobody changes the default in practice <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span>, I'm just making the point that a more robust thing to do (more with respect to lean/lake itself changing than users) is to ask lake for this directory somehow.</p>",
        "id": 410646425,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1704041584
    },
    {
        "content": "<p>OK, makes sense.  I made \".lake\" a customization option, see <a href=\"https://github.com/ultronozm/lean4-mode\">https://github.com/ultronozm/lean4-mode</a>.  seems to be working well for me now, thanks for your help!</p>",
        "id": 410646780,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1704042003
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"571592\">Paul Nelson</span> <a href=\"#narrow/stream/113489-new-members/topic/Paul.20Nelson/near/410641707\">said</a>:</p>\n<blockquote>\n<p>also, david or anyone, I've been accumulating some lean4-mode tweaks at <a href=\"https://github.com/ultronozm/czm-lean4.el\">https://github.com/ultronozm/czm-lean4.el</a></p>\n</blockquote>\n<p>There's also my eglot fork. (Eglot is an LSP library with some advantages over <code>lsp-mode</code> and some missing features. It is in core Emacs.)</p>",
        "id": 410649127,
        "sender_full_name": "Richard Copley",
        "timestamp": 1704044533
    },
    {
        "content": "<p>speak of the devil, I've been playing with that just the last few mins</p>",
        "id": 410649142,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1704044558
    },
    {
        "content": "<p>looks great</p>",
        "id": 410649144,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1704044561
    },
    {
        "content": "<p>I'm on your master branch</p>",
        "id": 410649162,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1704044598
    },
    {
        "content": "<p>I've noticed thus far only that complete-at-point seems to be less useful than in the vanilla lean4, is that a known issue?</p>",
        "id": 410649167,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1704044615
    },
    {
        "content": "<p>if I do \"LinearMap.d\" and complete-at-point, I don't get anything in your fork, but do in the basic one (actually it's working now, I'll keep playing)</p>",
        "id": 410649224,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1704044657
    },
    {
        "content": "<p>maybe just an eglot deficiency</p>",
        "id": 410649258,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1704044719
    },
    {
        "content": "<p>but if so, maybe it could be complemented by something more rudimentary</p>",
        "id": 410649265,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1704044734
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/113489-new-members/topic/Paul.20Nelson/near/410639819\">said</a>:</p>\n<blockquote>\n<p>I assume it isn't many people.</p>\n</blockquote>\n<p>A self-fulfilling prophecy. It would attract more users if it worked better. And yet there are several forks, a number of unreviewed issues and PRs, and people discuss it here now and then.</p>\n<blockquote>\n<p>Development of lean4-mode has effectively halted as well.</p>\n</blockquote>\n<p>Do you still want to be the maintainer? If not, and if there is anyone around who does use it and care about it, it could at least tick over and be kept working.</p>",
        "id": 410649844,
        "sender_full_name": "Richard Copley",
        "timestamp": 1704045367
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"571592\">Paul Nelson</span> <a href=\"#narrow/stream/113489-new-members/topic/Paul.20Nelson/near/410649167\">said</a>:</p>\n<blockquote>\n<p>I've noticed thus far only that complete-at-point seems to be less useful than in the vanilla lean4, is that a known issue?</p>\n</blockquote>\n<p>Thanks! I should probably add something like this to <code>README.md</code>:</p>\n<div class=\"codehilite\" data-code-language=\"EmacsLisp\"><pre><span></span><code><span class=\"p\">(</span><span class=\"nb\">with-eval-after-load</span><span class=\"w\"> </span><span class=\"ss\">'lean4-mode</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"nf\">define-key</span><span class=\"w\"> </span><span class=\"nv\">lean4-mode-map</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"sc\">?\\t</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nf\">#'</span><span class=\"nv\">company-indent-or-complete-common</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"nv\">add-hook</span><span class=\"w\"> </span><span class=\"ss\">'lean4-mode-hook</span><span class=\"w\"> </span><span class=\"nf\">#'</span><span class=\"nv\">company-mode</span><span class=\"p\">))</span>\n</code></pre></div>",
        "id": 410650098,
        "sender_full_name": "Richard Copley",
        "timestamp": 1704045632
    },
    {
        "content": "<p>ah, OK, great, thanks</p>",
        "id": 410650143,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1704045661
    },
    {
        "content": "<p>the only other thing I've noticed is that M-. seems to successfully jump less often (I seem to recall in the lsp variant that it would correctly jump even in code that was still under the \"yellow bar\", while here it seems to jump successfully only for code that has been checked), maybe this is another low-level eglot/lsp issue</p>",
        "id": 410650231,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1704045723
    },
    {
        "content": "<p>I hadn't noticed, but that is handled by <code>eglot</code> and <code>xref</code>, and is probably all done by completely different code than under <code>lsp-mode</code>.</p>",
        "id": 410650489,
        "sender_full_name": "Richard Copley",
        "timestamp": 1704045943
    },
    {
        "content": "<p>gotcha</p>",
        "id": 410650547,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1704045976
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/Paul.20Nelson/near/410646425\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"571592\">Paul Nelson</span> <a href=\"#narrow/stream/113489-new-members/topic/Paul.20Nelson/near/410644881\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/Paul.20Nelson/near/410640549\">said</a>:</p>\n<blockquote>\n<p>Is this <a href=\"https://github.com/leanprover/lean4-mode/pull/48\">https://github.com/leanprover/lean4-mode/pull/48</a> ? Except that that patch would no longer work as  we now have <code>.lake</code> instead of <code>lake-packages</code> (and that directory name is configurable by the user anyway)</p>\n</blockquote>\n<p>do you know what sorts of things people use in practice other than \".lake\"?</p>\n</blockquote>\n<p>I think nobody changes the default in practice ;), I'm just making the point that a more robust thing to do (more with respect to lean/lake itself changing than users) is to ask lake for this directory somehow.</p>\n</blockquote>\n<p>I didn't see the point in updating the PR. The way it's done in my fork is workable but awkward. (The user can configure root directories by name, and excluded directories where the server will never start, using <code>custom</code>. If no applicable config is found, I look for the topmost ancestor directory with a <code>lakefile.lean</code> and start the server there.) Open to suggestions.</p>",
        "id": 410650972,
        "sender_full_name": "Richard Copley",
        "timestamp": 1704046452
    },
    {
        "content": "<p>I saw this and feel you've addressed the issue elegantly in your fork</p>",
        "id": 410651007,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1704046517
    },
    {
        "content": "<p>I guess if I had just started with your fork I'd have saved a bit of time</p>",
        "id": 410651018,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1704046536
    },
    {
        "content": "<p>In the vanilla version, the info-view is invalidated on every mouse-move (and there's a debouncing thing to mitigate the appalling fallout) <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 410651091,
        "sender_full_name": "Richard Copley",
        "timestamp": 1704046623
    },
    {
        "content": "<p>Is there any way of changing the title of this thread so that it more accurately captures the useful information contained within it?</p>",
        "id": 410651956,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704047670
    }
]