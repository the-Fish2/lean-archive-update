[
    {
        "content": "<p>Is it possible to run a <code>#check</code> or <code>#find</code> inside a proof script (i.e. within <code>by</code> block)?</p>\n<p>That is how I would I do things in Coq (with <code>Check</code> or <code>Search</code>), but it seems that gives a parsing error in Lean.</p>",
        "id": 416728844,
        "sender_full_name": "George Pîrlea",
        "timestamp": 1705652497
    },
    {
        "content": "<p>For <code>#check x</code>, I usually write <code>have := x</code></p>\n<p>It'd be possible to make a tactic version of <code>#find</code> (and <code>#check</code> too)</p>",
        "id": 416753829,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705661760
    },
    {
        "content": "<p>It's not too hard to take the <code>#check</code> code and make a tactic version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">elabCheckTactic</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ignoreStuckTC</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"n\">withMainContext</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">withoutModifyingEnv</span> <span class=\"k\">do</span>\n    <span class=\"c1\">-- show signature for `#check id`/`#check @id`</span>\n    <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">_</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">term</span> <span class=\"k\">then</span>\n      <span class=\"n\">try</span>\n        <span class=\"n\">for</span> <span class=\"n\">c</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">resolveGlobalConstWithInfos</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"k\">do</span>\n          <span class=\"n\">addCompletionInfo</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">.</span><span class=\"n\">id</span> <span class=\"n\">term</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">danglingDot</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">{}</span> <span class=\"n\">none</span>\n          <span class=\"n\">logInfoAt</span> <span class=\"n\">tk</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">.</span><span class=\"n\">ofPPFormat</span> <span class=\"o\">{</span> <span class=\"n\">pp</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span>\n            <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">ctx</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ctx.runMetaM</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">PrettyPrinter.ppSignature</span> <span class=\"n\">c</span>\n            <span class=\"bp\">|</span> <span class=\"n\">none</span>     <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">f</span><span class=\"bp\">!</span><span class=\"s2\">\"{c}\"</span>  <span class=\"c1\">-- should never happen</span>\n          <span class=\"o\">}</span>\n          <span class=\"n\">return</span>\n      <span class=\"n\">catch</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>  <span class=\"c1\">-- identifier might not be a constant but constant + projection</span>\n    <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">Term.elabTerm</span> <span class=\"n\">term</span> <span class=\"n\">none</span>\n    <span class=\"n\">Term.synthesizeSyntheticMVarsNoPostponing</span> <span class=\"o\">(</span><span class=\"n\">ignoreStuckTC</span> <span class=\"o\">:=</span> <span class=\"n\">ignoreStuckTC</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">Term.levelMVarToParam</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">type</span> <span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">e</span>\n    <span class=\"k\">if</span> <span class=\"n\">e.isSyntheticSorry</span> <span class=\"k\">then</span>\n      <span class=\"n\">return</span>\n    <span class=\"n\">logInfoAt</span> <span class=\"n\">tk</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{e} : {type}\"</span>\n\n<span class=\"n\">elab</span> <span class=\"n\">tk</span><span class=\"o\">:</span><span class=\"s2\">\"#check \"</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">elabCheckTactic</span> <span class=\"n\">tk</span> <span class=\"n\">true</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">#check</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span>\n</code></pre></div>",
        "id": 416755241,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705662241
    },
    {
        "content": "<p>This question comes up about using <code>#check</code> in proofs. Maybe it should be added to mathlib, std, or core?</p>",
        "id": 416755431,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705662302
    },
    {
        "content": "<p>Doesn't <code>#find</code> <em>have</em> a tactic version (of the same name?). I remember a discussion about removing it :-)</p>",
        "id": 416762341,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1705665088
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/blob/5160f99e1f946fcf054db595271bbd0db4320617/Mathlib/Tactic/Find.lean#L127\">https://github.com/leanprover-community/mathlib4/blob/5160f99e1f946fcf054db595271bbd0db4320617/Mathlib/Tactic/Find.lean#L127</a></p>",
        "id": 416762458,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1705665129
    },
    {
        "content": "<p>Great, it's possible to write because it's already been done :-)</p>",
        "id": 416763867,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705665733
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"542918\">George Pîrlea</span> has marked this topic as resolved.</p>",
        "id": 417151079,
        "sender_full_name": "Notification Bot",
        "timestamp": 1705893496
    },
    {
        "content": "<p>Thanks for your help! Yes, it would be helpful for <code>#check</code> at least to be included as a tactic by default.</p>",
        "id": 417151118,
        "sender_full_name": "George Pîrlea",
        "timestamp": 1705893529
    },
    {
        "content": "<p>Here's a PR: <a href=\"https://github.com/leanprover-community/mathlib4/pull/9902\">#9902</a></p>",
        "id": 417154159,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1705896038
    }
]