[
    {
        "content": "<p>Is it possible to make the fact, that in the last induction step the ind. var. is &gt; 0, into an assumption?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span> <span class=\"n\">Nat</span>\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">PartialOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">LocallyFiniteOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">prod_Icc_succ_top</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hab</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">):</span>\n    <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">Icc</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">prod_Icc_id_eq_factorial1</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">Icc</span> <span class=\"mi\">1</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">!</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">prod_Icc_succ_top</span><span class=\"o\">,</span> <span class=\"n\">Nat.factorial_succ</span><span class=\"o\">,</span> <span class=\"n\">add_succ_sub_one</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_zero</span><span class=\"o\">,</span> <span class=\"n\">prod_Icc_id_eq_factorial1</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">]</span>      <span class=\"c1\">-- &lt;======</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>In the last theorem the only thing needed is this goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">_n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">⊢</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">_n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>...coming from the call to <code>prod_Icc_succ_top</code> requiring <code>hab</code>.  I tried to state it this way:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">prod_Icc_id_eq_factorial2</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">):</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">Icc</span> <span class=\"mi\">1</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">!</span>\n</code></pre></div>\n<p>but <code>n</code> and <code>_n</code> will be different, so using <code>hn</code> is pointless. What to do?</p>",
        "id": 434608095,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1713723043
    },
    {
        "content": "<p>this seems to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">prod_Icc_id_eq_factorial1</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">Icc</span> <span class=\"mi\">1</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">!</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">prod_Icc_succ_top</span><span class=\"o\">,</span> <span class=\"n\">Nat.factorial_succ</span><span class=\"o\">,</span> <span class=\"n\">add_succ_sub_one</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_zero</span><span class=\"o\">,</span> <span class=\"n\">prod_Icc_id_eq_factorial1</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 434631349,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1713746607
    },
    {
        "content": "<p>If you try <code>simp?</code> you see <code>try ... lt_add_iff_pos_left</code>. This changes the goal to <code>0 &lt; _n</code>. So this is still unfinished. But I have another idea that I gathered from another thread.</p>",
        "id": 434665115,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1713768449
    },
    {
        "content": "<p>Hmm, this doesn't work. Can't the induction var be \\N+?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">prod_Icc_id_eq_factorial1</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">Icc</span> <span class=\"mi\">1</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">!</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succPNat</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n<span class=\"bp\">...</span>\n<span class=\"n\">invalid</span> <span class=\"n\">pattern</span><span class=\"o\">,</span> <span class=\"n\">constructor</span> <span class=\"n\">or</span> <span class=\"kd\">constant</span> <span class=\"n\">marked</span> <span class=\"k\">with</span> <span class=\"bp\">'</span><span class=\"o\">[</span><span class=\"n\">match_pattern</span><span class=\"o\">]</span><span class=\"bp\">'</span> <span class=\"n\">expected</span>\n</code></pre></div>",
        "id": 434694453,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1713776435
    },
    {
        "content": "<p>Not that way, because PNat is defined as a subtype of Nat, not an independent inductive</p>",
        "id": 434695122,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1713776651
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span> <span class=\"n\">Nat</span> <span class=\"n\">Finset</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">prod_Icc_id_eq_factorial1</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">Icc</span> <span class=\"mi\">1</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">!</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"n\">using</span> <span class=\"n\">PNat.recOn</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">p1</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">hp</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 434695921,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1713776900
    },
    {
        "content": "<p>Thanks, looking good, until this time I'm stuck at the inner <code>n + 1 - 1</code> and no amount of <code>add_sub_assoc</code>, <code>add_sub_cancel</code> or similar can touch it,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">prod_Icc_id_eq_factorial</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">Icc</span> <span class=\"mi\">1</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">!</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"n\">using</span> <span class=\"n\">PNat.recOn</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">p1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">hp</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">prod_Icc_succ_top</span><span class=\"o\">,</span> <span class=\"n\">PNat.add_coe</span><span class=\"o\">,</span> <span class=\"n\">PNat.one_coe</span><span class=\"o\">,</span> <span class=\"n\">factorial_succ</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">PNat.mul_coe</span><span class=\"o\">,</span> <span class=\"n\">PNat.add_coe</span><span class=\"o\">,</span> <span class=\"n\">PNat.one_coe</span><span class=\"o\">]</span>\n\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span>\n<span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">Icc</span> <span class=\"mi\">1</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">!</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">Icc</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">!</span>\n</code></pre></div>\n<p>Any ideas?</p>",
        "id": 434721426,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1713784796
    },
    {
        "content": "<p>Please make sure your snippets have <code>import</code>s and <code>open</code>s so people can easily debug</p>",
        "id": 434734557,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1713788596
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">PNat.natPred_inj.mp</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>Found with <code>by hint</code></p>",
        "id": 434737972,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1713789514
    },
    {
        "content": "<p>Sorry for that.  So, the \\N lemmas can't be used with \\N+. I could close all goals but the recursion appears to be broken. Following <a href=\"https://lean-lang.org/blog/2024-1-11-recursive-definitions-in-lean/\">this blogpost</a> indicates I need a <code>termination_by</code> line, but <code>termination_by n - x</code> as in the post gets rejected. Also <code>termination_by x =&gt; n</code> is rejected because <code>x</code> is not known.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span> <span class=\"n\">Nat</span> <span class=\"n\">BigOperators</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">PartialOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">LocallyFiniteOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">prod_Icc_succ_top</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hab</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">):</span>\n    <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">Icc</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">prod_Icc_id_eq_factorial</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">Icc</span> <span class=\"mi\">1</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">!</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"n\">using</span> <span class=\"n\">PNat.recOn</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">p1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">hp</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">hn_add_sub_cancel</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">PNat.natPred_inj.mp</span> <span class=\"n\">rfl</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">prod_Icc_succ_top</span><span class=\"o\">,</span> <span class=\"n\">PNat.add_coe</span><span class=\"o\">,</span> <span class=\"n\">PNat.one_coe</span><span class=\"o\">,</span> <span class=\"n\">factorial_succ</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">PNat.mul_coe</span><span class=\"o\">,</span> <span class=\"n\">PNat.add_coe</span><span class=\"o\">,</span> <span class=\"n\">PNat.one_coe</span><span class=\"o\">,</span> <span class=\"n\">hn_add_sub_cancel</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_zero</span><span class=\"o\">,</span> <span class=\"n\">prod_Icc_id_eq_factorial</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">PNat.lt_add_one_iff</span><span class=\"o\">]</span> <span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">PNat.one_le</span> <span class=\"n\">n</span>\n<span class=\"c1\">--  termination_by n - x</span>\n\n <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">,</span> <span class=\"bp\">≤</span><span class=\"o\">,</span> <span class=\"bp\">=</span><span class=\"o\">:</span> <span class=\"n\">relation</span> <span class=\"n\">proved</span><span class=\"o\">,</span> <span class=\"bp\">?</span> <span class=\"n\">all</span> <span class=\"n\">proofs</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">proof</span> <span class=\"n\">attempted</span><span class=\"o\">)</span>\n           <span class=\"n\">n</span>\n<span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">30</span><span class=\"o\">:</span><span class=\"mi\">22</span><span class=\"bp\">-</span><span class=\"mi\">46</span> <span class=\"n\">_</span>\n<span class=\"n\">Please</span> <span class=\"n\">use</span> <span class=\"bp\">`</span><span class=\"n\">termination_by</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">specify</span> <span class=\"n\">a</span> <span class=\"n\">decreasing</span> <span class=\"n\">measure.</span><span class=\"bp\">```</span>\n</code></pre></div>",
        "id": 434764487,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1713795883
    },
    {
        "content": "<p>You can replace <code>prod_Icc_id_eq_factorial</code> by <code>ih</code> in your proof</p>",
        "id": 434768532,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1713796950
    },
    {
        "content": "<p>Great, that solves it. Many thanks!</p>",
        "id": 434769962,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1713797302
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"707242\">Ralf Stephan</span> has marked this topic as resolved.</p>",
        "id": 434811949,
        "sender_full_name": "Notification Bot",
        "timestamp": 1713808634
    }
]