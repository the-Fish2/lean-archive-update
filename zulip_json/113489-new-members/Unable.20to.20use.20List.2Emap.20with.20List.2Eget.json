[
    {
        "content": "<p>I have a nested list and I want to turn it into a list of functions on <code>Fin</code>.  I'm trying to use <code>List.get</code>, but it isn't working. How do I fix this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">Rat</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">rowListofMat</span> <span class=\"o\">:=</span> <span class=\"n\">List.map</span> <span class=\"n\">List.ofFn</span> <span class=\"o\">(</span><span class=\"n\">List.ofFn</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">rowListofMat</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">i</span>\n  <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">List.map</span> <span class=\"o\">(</span><span class=\"n\">List.get</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:=</span><span class=\"n\">Rat</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">rowListofMat</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"c1\">--application type mismatch</span>\n</code></pre></div>",
        "id": 438749283,
        "sender_full_name": "Vivek Rajesh Joshi",
        "timestamp": 1715761013
    },
    {
        "content": "<p>I think the problem is that <code>List.map</code> doesn't take a dependent function, which is what you're giving it when you pass in <code>List.get</code>.</p>",
        "id": 438909756,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1715820959
    },
    {
        "content": "<p>you could use <code>List.getD</code> with a fallback value (e.g. <code>List.getD (α := Rat) (fallback := 0)</code>)</p>\n<p>that works because then you're passing in a function of type <code>List α → ℕ → ℚ</code></p>\n<p>you could also use <code>List.get? (α:=Rat)</code> and get a function of type <code>List α → ℕ → Option ℚ</code></p>\n<p>the point is to remove the dependency on the length of the list</p>",
        "id": 438910700,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1715821717
    },
    {
        "content": "<p>you're asking for a list of functions on <code>Fin</code>, but you're forgetting that <code>Fin</code> isn't a type, it's a type constructor... the type is <code>Fin n</code> for some value of <code>n</code></p>",
        "id": 438911961,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1715822713
    },
    {
        "content": "<p>I suppose you could also define <code>def mapList (l : List α) : (n : ℕ) × (Fin n → α) := ⟨l.length, l.get⟩</code> and then use that with <code>List.map</code> to get a <code>List ((n : ℕ) × (Fin n → ℚ))</code> but I have no idea if that would be useful to you</p>",
        "id": 438913346,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1715823945
    }
]