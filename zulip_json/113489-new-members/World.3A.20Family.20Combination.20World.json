[
    {
        "content": "<p>I successfully completed these two levels:</p>\n<p><a href=\"https://adam.math.hhu.de/#/g/djvelleman/stg4/world/FamCombo/level/1\">https://adam.math.hhu.de/#/g/djvelleman/stg4/world/FamCombo/level/1</a><br>\n<a href=\"https://adam.math.hhu.de/#/g/djvelleman/stg4/world/FamCombo/level/2\">https://adam.math.hhu.de/#/g/djvelleman/stg4/world/FamCombo/level/2</a></p>\n<p>I have a recommendation if I may. I think it is much easier to work if you have not_imp, not_forall, not_exists under your hands. I can not imagine doing these two levels without them. especially after reading your hint \"If you get stuck, consider using proof by contradiction.\"</p>",
        "id": 418266691,
        "sender_full_name": "Yagub Aliyev",
        "timestamp": 1706272391
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"453098\">@Dan Velleman</span></p>",
        "id": 418276056,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1706275950
    },
    {
        "content": "<p>Also I am at the third level of this world:<br>\n<a href=\"https://adam.math.hhu.de/#/g/djvelleman/stg4/world/FamCombo/level/3\">https://adam.math.hhu.de/#/g/djvelleman/stg4/world/FamCombo/level/3</a><br>\nObjects:<br>\nU: Type<br>\nFGH: Set (Set U)<br>\nx: U<br>\nw: Set U<br>\nAssumptions:<br>\nh1: ∀ A ∈ F, ∃ B ∈ G, A ∩ B ∈ H<br>\nh: x ∈ ⋃₀ F ∧ x ∈ ⋂₀ G<br>\nhG: ∀ S ∈ G, x ∈ S<br>\nhw: w ∈ F ∧ x ∈ w<br>\nhwF: w ∈ F<br>\nhwx: x ∈ w</p>\n<p>I want to use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">apply</span> <span class=\"n\">h1</span> <span class=\"n\">w</span>\n</code></pre></div>\n<p>but it doesn't work. Somehow it worked earlier for universal quantifiers. Maybe the problem is that h1 is now consisted of nested quantifiers?</p>",
        "id": 418303566,
        "sender_full_name": "Yagub Aliyev",
        "timestamp": 1706284583
    },
    {
        "content": "<p>I think what you mean is that you want to apply <code>h1</code> to <code>w</code>.  That's a good next step, but the <code>apply</code> tactic isn't the right tactic to use for that.  You can just say <code>have h2 := h1 w</code>.</p>\n<p>The <code>apply</code> tactic is for working backwards from the goal.</p>",
        "id": 418304611,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1706284907
    },
    {
        "content": "<p>Thanks for the recommendation.  I'm going to look into introducing the <code>push_neg</code> tactic earlier--it automatically applies <code>not_imp</code>, <code>not_forall</code>, etc.  That is a reasonable way to approach these levels, although I think proof by contradiction also works well if you remember that if you have an assumption <code>h</code> of the form <code>¬P</code> and your goal is <code>False</code>, then <code>apply h</code> will set <code>P</code> as your goal.</p>",
        "id": 418305632,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1706285207
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"682831\">Yagub Aliyev</span> has marked this topic as resolved.</p>",
        "id": 418321007,
        "sender_full_name": "Notification Bot",
        "timestamp": 1706290503
    },
    {
        "content": "<p><a href=\"https://adam.math.hhu.de/#/g/djvelleman/stg4/world/FamCombo/level/5\">https://adam.math.hhu.de/#/g/djvelleman/stg4/world/FamCombo/level/5</a></p>\n<p>What is a complement of a family of sets (G^c)?</p>",
        "id": 418396104,
        "sender_full_name": "Yagub Aliyev",
        "timestamp": 1706339708
    },
    {
        "content": "<p>Its complement as a subset of the powerset. (So all the subsets of U that do not belong to G)</p>",
        "id": 418410664,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1706355076
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466290\">Luigi Massacci</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20World.3A.20Family.20Combination.20World/near/418410664\">said</a>:</p>\n<blockquote>\n<p>Its complement as a subset of the powerset. (So all the subsets of U that do not belong to G)</p>\n</blockquote>\n<p>How do you use this concept in Lean? I mean there is no <code>fam_comp_def</code> it seems.</p>",
        "id": 418521451,
        "sender_full_name": "Yagub Aliyev",
        "timestamp": 1706463931
    },
    {
        "content": "<p>Families of sets are sets.  The set operations union, intersection, and complement apply to them, just as they apply to all sets.  So you can use the theorems <code>inter_def</code>, <code>union_def</code>, and <code>comp_def</code> with families of sets.</p>",
        "id": 418521570,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1706464044
    },
    {
        "content": "<p>Perhaps when I introduce families of sets I should make this point in the text.</p>",
        "id": 418521698,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1706464147
    },
    {
        "content": "<p><a href=\"https://adam.math.hhu.de/#/g/djvelleman/stg4/world/FamCombo/level/5\">https://adam.math.hhu.de/#/g/djvelleman/stg4/world/FamCombo/level/5</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Have</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.ByContra</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Cases</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.ApplyAt</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">U</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">⋃₀</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"bp\">∩</span> <span class=\"n\">G</span><span class=\"bp\">ᶜ</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"o\">(</span><span class=\"bp\">⋃₀</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"bp\">⋃₀</span> <span class=\"n\">G</span><span class=\"o\">)</span><span class=\"bp\">ᶜ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⋃₀</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"bp\">⋃₀</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"bp\">⋃₀</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"bp\">∩</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n\n<span class=\"n\">apply</span> <span class=\"n\">comp_sub_of_sub</span> <span class=\"n\">at</span> <span class=\"n\">h1</span>\n<span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">comp_inter</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h1</span>\n<span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">comp_comp</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h1</span>\n</code></pre></div>\n<p>This is maximum I could get in this. What do you recommend?</p>",
        "id": 418892785,
        "sender_full_name": "Yagub Aliyev",
        "timestamp": 1706637695
    },
    {
        "content": "<p>In an earlier discussion, I suggested putting off thinking as long as possible by beginning with steps that you can do without thinking.  Going back to that idea, I would say that in this problem you are thinking too soon.<br>\nSince the goal is a subset statement, I would start with <code>intro x h2</code>, which will introduce both an arbitrary <code>x : U</code> and the assumption <code>h2 : x ∈ ⋃₀ F ∩ ⋃₀ G</code>, and the goal will become <code>x ∈ ⋃₀ (F ∩ G)</code>.  There are a few more steps you can do without thinking, but already this <code>intro</code> step will get you thinking in the right direction: if you know that <code>x</code> is an element of both <code>⋃₀ F</code> and <code>⋃₀ G</code>, why should it be an element of <code>⋃₀ (F ∩ G)</code>?<br>\nThis one is a bit tricky.  Perhaps once you see why it is difficult to get from <code>h2</code> to the goal, you'll be ready to think about how <code>h1</code> could be useful.</p>",
        "id": 418896089,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1706638970
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"453098\">@Dan Velleman</span> <br>\nThank you I completed all except the last level about singleton.<br>\n<a href=\"https://adam.math.hhu.de/#/g/djvelleman/stg4/world/FamCombo/level/7\">https://adam.math.hhu.de/#/g/djvelleman/stg4/world/FamCombo/level/7</a><br>\nIt seems an impossible task. Any recommendation? I want to consider F={{x},{y}} but Lean does not recognize x and y which means I need to introduce them somehow. How do you do this? And how do I make sure x and y are different? How do I know if x and y even exist?</p>",
        "id": 418977905,
        "sender_full_name": "Yagub Aliyev",
        "timestamp": 1706683914
    },
    {
        "content": "<p>This is the hardest proof.  Lean is right to complain that it doesn't know what <code>x</code> and <code>y</code> are.  I don't know what they are either, and I suspect that you don't know either.</p>\n<p>Your idea seems to be that you want the elements of <code>F</code> to be singleton sets.  That's a good start.  But which singleton sets?  You need to figure out which singleton sets you want to put into <code>F</code>, and then you have to specify that in your definition of <code>F</code>.</p>\n<p>Note that the hint suggests writing <code>F</code> in the form <code>{S | ...}</code>.  I guess you want the <code>...</code> to say something about <code>S</code> being a singleton set, but you'll have to be more explicit about which singleton sets should be included.</p>\n<p>You may find it helpful to work this proof out on paper before doing it in Lean.</p>\n<p>By the way, I updated the game, adding the <code>push_neg</code> tactic (it is introduced now in Complement World, Level 4) and also adding more explanation of families of sets in the introduction of Family Intersection World.</p>",
        "id": 419057602,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1706712862
    },
    {
        "content": "<p>I'm also thinking about adding one more level to Family Combination World.</p>\n<p>Thanks for your helpful feedback.</p>",
        "id": 419058056,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1706712995
    },
    {
        "content": "<p>Good Job! It would be great to use \"push_neg\",actually  I've already spent 4 days on Set Theory game,the only one I still haven't proved yet ,it is the last one.It's hard to put my thought into lean.I can do it quickly on my paper by my pen.But I'm still looking the answer, I almost do it in the last step,but still found a little problem. <span aria-label=\"smiling face with tear\" class=\"emoji emoji-1f972\" role=\"img\" title=\"smiling face with tear\">:smiling_face_with_tear:</span></p>",
        "id": 419110406,
        "sender_full_name": "Kyle Yank",
        "timestamp": 1706729438
    },
    {
        "content": "<p>Bro,if you have already finished this one, please send it here.I want to see how to do it.</p>",
        "id": 419110581,
        "sender_full_name": "Kyle Yank",
        "timestamp": 1706729520
    },
    {
        "content": "<p>The official answers to all the levels are in the source code which is on GitHub</p>",
        "id": 419123590,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706735313
    },
    {
        "content": "<p>I've added a new level to Family Combination World.  The new level is level 3, and the old 3-7 are now 4-8.</p>",
        "id": 419158404,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1706753317
    },
    {
        "content": "<p>Thank you.I'll try it now</p>",
        "id": 419175075,
        "sender_full_name": "Kyle Yank",
        "timestamp": 1706763513
    },
    {
        "content": "<p>Sir.   I can not find it. Please give more detail.</p>",
        "id": 419175325,
        "sender_full_name": "Kyle Yank",
        "timestamp": 1706763706
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"688177\">Kyle Yank</span> has marked this topic as unresolved.</p>",
        "id": 419176583,
        "sender_full_name": "Notification Bot",
        "timestamp": 1706764698
    },
    {
        "content": "<p>I can only find the answer to the NNG4. Where can I find the official answer to the set theory game?</p>",
        "id": 419176629,
        "sender_full_name": "Kyle Yank",
        "timestamp": 1706764753
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"688177\">Kyle Yank</span> has marked this topic as resolved.</p>",
        "id": 419184421,
        "sender_full_name": "Notification Bot",
        "timestamp": 1706770617
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"688177\">Kyle Yank</span> has marked this topic as unresolved.</p>",
        "id": 419184433,
        "sender_full_name": "Notification Bot",
        "timestamp": 1706770624
    },
    {
        "content": "<p>I just did the new one. Are there any tips for the singleton set?</p>",
        "id": 419186390,
        "sender_full_name": "Kyle Yank",
        "timestamp": 1706771960
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"688177\">@Kyle Yank</span>  The source files for the set theory game can be found here:  <a href=\"https://github.com/djvelleman/STG4\">https://github.com/djvelleman/STG4</a></p>\n<p>I assume you've read the hints for the singleton set proof--both the one that appears right away and the one you get when you click on \"Show more help!\"</p>\n<p>You say you have a proof for this one on paper?  Is there some difficulty with putting your paper proof into Lean?</p>",
        "id": 419267830,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1706800456
    },
    {
        "content": "<p>Actually, I have already finished this problem.<br>\nBut I use a similar proof which is just like the official answer.</p>",
        "id": 419268405,
        "sender_full_name": "Kyle Yank",
        "timestamp": 1706800620
    },
    {
        "content": "<p>My paper proof is proven by making contradiction. I still don't know how to describe it in that game.</p>",
        "id": 419268564,
        "sender_full_name": "Kyle Yank",
        "timestamp": 1706800671
    },
    {
        "content": "<p>I assumed A is not empty and A has two elements in my paper. Then by finding the counterexamples, it's easy to find A is a singleton set.</p>",
        "id": 419268933,
        "sender_full_name": "Kyle Yank",
        "timestamp": 1706800778
    },
    {
        "content": "<p>Like this {{1},{2}}  is not equal to {1,2}</p>",
        "id": 419269165,
        "sender_full_name": "Kyle Yank",
        "timestamp": 1706800837
    },
    {
        "content": "<p>But I don't know how to write this in this game, so I chose to construct a set like what the official set did.</p>",
        "id": 419269409,
        "sender_full_name": "Kyle Yank",
        "timestamp": 1706800902
    },
    {
        "content": "<p>the only difference between the official answer and mine is that I chose to prove it by A ⊆ B ∧ B ⊆ A.</p>",
        "id": 419270264,
        "sender_full_name": "Kyle Yank",
        "timestamp": 1706801134
    },
    {
        "content": "<p>Yes, there is a longer proof along the following lines:</p>\n<ol>\n<li>Show that <code>A</code> has at least one element.</li>\n<li>Show that <code>A</code> can't have more than one element.</li>\n</ol>\n<p>Both parts would be proven by contradiction, and for each part you would need to choose a family <code>F</code> to plug into <code>h1</code> to get the contradiction.</p>\n<p>That proof can be written in Lean, but it would be much longer, and to write it you might want to use some set theory notation that is not introduced in the set theory game (such as notation for the empty set or notation for the difference of two sets).</p>",
        "id": 419273829,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1706802073
    },
    {
        "content": "<p>That's what I did in my paper.</p>",
        "id": 419274619,
        "sender_full_name": "Kyle Yank",
        "timestamp": 1706802285
    },
    {
        "content": "<p>I guess I will read the introduction book firstly ,  I will try this later.</p>",
        "id": 419274862,
        "sender_full_name": "Kyle Yank",
        "timestamp": 1706802360
    },
    {
        "content": "<p>I think that proof is fine.  But there may be several points where you said on paper that something was \"clearly\" true.  One of the things that makes Lean difficult is that it doesn't understand \"clearly\".  Even if something really is pretty clear, Lean insists that you justify it.  Often that is not hard, but it's tedious.</p>",
        "id": 419275221,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1706802481
    },
    {
        "content": "<p>That's a little monotonous, but that's what we want to improve.</p>",
        "id": 419275583,
        "sender_full_name": "Kyle Yank",
        "timestamp": 1706802584
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"453098\">Dan Velleman</span> <a href=\"#narrow/stream/113489-new-members/topic/World.3A.20Family.20Combination.20World/near/419275221\">said</a>:</p>\n<blockquote>\n<p>I think that proof is fine.  But there may be several points where you said on paper that something was \"clearly\" true.  One of the things that makes Lean difficult is that it doesn't understand \"clearly\".  Even if something really is pretty clear, Lean insists that you justify it.  Often that is not hard, but it's tedious.</p>\n</blockquote>\n<p>Thanks for your suggestions. <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 419275982,
        "sender_full_name": "Kyle Yank",
        "timestamp": 1706802700
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"453098\">Dan Velleman</span> <a href=\"#narrow/stream/113489-new-members/topic/World.3A.20Family.20Combination.20World/near/419057602\">said</a>:</p>\n<blockquote>\n<p>This is the hardest proof.  Lean is right to complain that it doesn't know what <code>x</code> and <code>y</code> are.  I don't know what they are either, and I suspect that you don't know either.</p>\n<p>Your idea seems to be that you want the elements of <code>F</code> to be singleton sets.  That's a good start.  But which singleton sets?  You need to figure out which singleton sets you want to put into <code>F</code>, and then you have to specify that in your definition of <code>F</code>.</p>\n<p>Note that the hint suggests writing <code>F</code> in the form <code>{S | ...}</code>.  I guess you want the <code>...</code> to say something about <code>S</code> being a singleton set, but you'll have to be more explicit about which singleton sets should be included.</p>\n<p>You may find it helpful to work this proof out on paper before doing it in Lean.</p>\n<p>By the way, I updated the game, adding the <code>push_neg</code> tactic (it is introduced now in Complement World, Level 4) and also adding more explanation of families of sets in the introduction of Family Intersection World.</p>\n</blockquote>\n<p>Is it <code>{S | ∃x, A={x}}</code> that needs to be put there?</p>",
        "id": 420807147,
        "sender_full_name": "Yagub Aliyev",
        "timestamp": 1707577739
    },
    {
        "content": "<p>Did you mean <code>{S | ∃x, S={x}}</code>?  The part after the <code>|</code> should mention <code>S</code>.</p>\n<p>That is close, but not quite good enough.  Of course, you can try to do the proof with that choice, and see where you get stuck.</p>\n<p>The hint says this:  \"You need to apply <code>h1</code> to a family of sets with two properties: the union of the family must be <code>A</code>, and knowing that <code>A</code> belongs to the family must help you prove that <code>A</code> is a singleton.\"  Your proposal (as I have modified it above) has one of the required properties, but not the other.</p>",
        "id": 420834771,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1707601375
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"453098\">Dan Velleman</span> <a href=\"#narrow/stream/113489-new-members/topic/World.3A.20Family.20Combination.20World/near/419158404\">said</a>:</p>\n<blockquote>\n<p>I've added a new level to Family Combination World.  The new level is level 3, and the old 3-7 are now 4-8.</p>\n</blockquote>\n<p>Adding a new level in the middle or the beginning of a World seems to shift all the progress of the users and their old solutions end up in a wrong level. Adding a new bonus World or adding the new levels to the end of the World can be a short solution to this.</p>",
        "id": 421295570,
        "sender_full_name": "Yagub Aliyev",
        "timestamp": 1707846721
    },
    {
        "content": "<p>You're right in theory, but in practice having a level in the wrong place for all time is worse than disrupting saves for people who are currently playing (the people who finished and are never coming back don't notice, and the people who are yet to come will play the level in the right place)</p>",
        "id": 421395663,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707900112
    },
    {
        "content": "<p>I write this as someone who has on several occasions broken user saves in NNG just because it made the game better organised overall</p>",
        "id": 421395806,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707900160
    },
    {
        "content": "<p>Btw, it's fairly straight forward to hack and modify your own progress if some development broke it:</p>\n<ul>\n<li>In the main menu click \"Dowload\"</li>\n<li>Modify the JSON file. (There is a field \"data\" which contains fields of the form \"[World Name]\" which again contains the level numbers. Modify these  numbers to the new, correct level numbers.)</li>\n<li>In the main Menu click on \"Upload\" to upload the modified user progress.</li>\n</ul>\n<p>Unfortunately, I think it would be way to much overhead (or infeasible?) to have the user progress stored in a completely backwards compatible way.</p>",
        "id": 421437705,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1707914988
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"682831\">@Yagub Aliyev</span> Sorry for messing up your solutions to the set theory game.  But, as Kevin suggested, I thought it was best to improve the game for future users, even if that was an inconvenience for people currently playing.  I don't have any plans to add any other new levels.  However, based on comments in a different thread, I am considering changing the names of some of the theorems in the set theory game to match the naming conventions in mathlib better.</p>",
        "id": 421552773,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1707954041
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"453098\">@Dan Velleman</span>  No problem, I completed the game.   I wonder where these problems are taken from? Very unusual problems for a usual set theory course. Thank you <span class=\"user-mention\" data-user-id=\"385895\">@Jon Eugster</span> I just copied my answers from the old level to the new level.</p>",
        "id": 421695052,
        "sender_full_name": "Yagub Aliyev",
        "timestamp": 1708014942
    },
    {
        "content": "<p>I think I made up most of them.  Many of them are problems I used in <a href=\"https://djvelleman.github.io/pd/\">Proof Designer</a>.</p>",
        "id": 421963617,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1708133250
    }
]