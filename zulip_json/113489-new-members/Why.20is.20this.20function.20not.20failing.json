[
    {
        "content": "<p>I am new to functional programming and lean in general, i decided to start learning by reading the \"functional programming with lean\" book and now im translating an interpreter i made in java to lean as my first project<br>\nI wrote this parsing function (that only handles three tokens now) but im not sure why it does not hit a stack overflow even with a huge text input. <br>\nWhy i believe it should is because i believe this is pushing a new frame to the stack for every character in the content string.<br>\nHeres the code : </p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">parseChar</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">word</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Char</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Option</span><span class=\"w\"> </span><span class=\"n\">Token</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">'!'</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"n\">Token</span><span class=\"bp\">.</span><span class=\"n\">BANG</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">'='</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"n\">Token</span><span class=\"bp\">.</span><span class=\"n\">EQUAL</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">'&gt;'</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"n\">Token</span><span class=\"bp\">.</span><span class=\"n\">GREATER</span>\n<span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">none</span>\n\n<span class=\"n\">partial</span><span class=\"w\"> </span><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">parseContent</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">content</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"n\">Token</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">rec</span><span class=\"w\"> </span><span class=\"n\">parseHelper</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">content</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"n\">Char</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">tokens</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"n\">Token</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"n\">Token</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">content</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">    </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">tokens</span>\n<span class=\"w\">    </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">cs</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">      </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">parseChar</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">      </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"n\">Token</span><span class=\"bp\">.</span><span class=\"n\">BANG</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">parseHelper</span><span class=\"w\"> </span><span class=\"n\">cs</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Token</span><span class=\"bp\">.</span><span class=\"n\">BANG</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">tokens</span><span class=\"o\">)</span>\n<span class=\"w\">      </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"n\">Token</span><span class=\"bp\">.</span><span class=\"n\">EQUAL</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">parseHelper</span><span class=\"w\"> </span><span class=\"n\">cs</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Token</span><span class=\"bp\">.</span><span class=\"n\">EQUAL</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">tokens</span><span class=\"o\">)</span>\n<span class=\"w\">      </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"n\">Token</span><span class=\"bp\">.</span><span class=\"n\">GREATER</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">cs</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">        </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">'='</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">rest</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">parseHelper</span><span class=\"w\"> </span><span class=\"n\">rest</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Token</span><span class=\"bp\">.</span><span class=\"n\">GREATER_EQUAL</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">tokens</span><span class=\"o\">)</span>\n<span class=\"w\">        </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">parseHelper</span><span class=\"w\"> </span><span class=\"n\">cs</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Token</span><span class=\"bp\">.</span><span class=\"n\">GREATER</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">tokens</span><span class=\"o\">)</span>\n<span class=\"w\">      </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">parseHelper</span><span class=\"w\"> </span><span class=\"n\">cs</span><span class=\"w\"> </span><span class=\"n\">tokens</span>\n<span class=\"w\">  </span><span class=\"n\">parseHelper</span><span class=\"w\"> </span><span class=\"n\">content</span><span class=\"bp\">.</span><span class=\"n\">toList</span><span class=\"w\"> </span><span class=\"o\">[]</span>\n</code></pre></div>",
        "id": 443216136,
        "sender_full_name": "Jafar Tanoukhi",
        "timestamp": 1717739225
    },
    {
        "content": "<p>If I read the code correctly, the function is <a href=\"https://en.wikipedia.org/wiki/Tail_call\">tail-recursive</a> so the compiler can optimize it to not use the stack at all for the recursive calls.</p>",
        "id": 443217103,
        "sender_full_name": "Ted Hwa",
        "timestamp": 1717739936
    },
    {
        "content": "<p>Oh i did find something about tail recursion when i was trying to figure out what's happening before asking here. Can you point out how is this tail recursive ? Im not sure i understand what is tail recursion in general, is it a functional programming thing?</p>",
        "id": 443217990,
        "sender_full_name": "Jafar Tanoukhi",
        "timestamp": 1717740366
    },
    {
        "content": "<p>All of your recursive calls are in the form <code>parseHelper ...</code> with no further operations (if instead, it was something like <code>f (parseHelper ...)</code>, then it would not be tail-recursive because there would be another operation <code>f</code> after the recursive call).   Therefore, the stack is not needed because when we return from the recursive call, there is nothing left to do, so we do not need to restore the previous values from the stack.</p>\n<p>Tail-call optimization can be applied in any language but it is particularly important in functional programming languages because they tend to use recursion a lot more than other languages.</p>",
        "id": 443218536,
        "sender_full_name": "Ted Hwa",
        "timestamp": 1717740633
    },
    {
        "content": "<p>Ahhh ok that makes sense, thanks for this explanation</p>",
        "id": 443219034,
        "sender_full_name": "Jafar Tanoukhi",
        "timestamp": 1717740897
    },
    {
        "content": "<p>See also: <a href=\"https://lean-lang.org/functional_programming_in_lean/programs-proofs/tail-recursion.html#tail-and-non-tail-positions\">https://lean-lang.org/functional_programming_in_lean/programs-proofs/tail-recursion.html#tail-and-non-tail-positions</a></p>",
        "id": 443219129,
        "sender_full_name": "Ted Hwa",
        "timestamp": 1717740953
    },
    {
        "content": "<p>Also, i would like to ask another question, i've been told the usage of partial is bad practice and i should not have to use it, but without the partial keyword here, lean shouts at me that the function does not terminate. From that i understand i need to write code in a way that proves to lean that this recursion terminates but i am not sure how to do it in my code.</p>",
        "id": 443219253,
        "sender_full_name": "Jafar Tanoukhi",
        "timestamp": 1717740999
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"715872\">Ted Hwa</span> <a href=\"#narrow/stream/113489-new-members/topic/Why.20is.20this.20function.20not.20failing/near/443219129\">said</a>:</p>\n<blockquote>\n<p>See also: <a href=\"https://lean-lang.org/functional_programming_in_lean/programs-proofs/tail-recursion.html#tail-and-non-tail-positions\">https://lean-lang.org/functional_programming_in_lean/programs-proofs/tail-recursion.html#tail-and-non-tail-positions</a></p>\n</blockquote>\n<p>Oh thanks for this, i will check this out</p>",
        "id": 443219339,
        "sender_full_name": "Jafar Tanoukhi",
        "timestamp": 1717741043
    },
    {
        "content": "<p>I could convince Lean to accept your definition without <code>partial</code>. Somehow Lean seems to forget <code>cs</code> is smaller at the offending branch.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">parseContent</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">content</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"n\">Token</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">rec</span><span class=\"w\"> </span><span class=\"n\">parseHelper</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">content</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"n\">Char</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">tokens</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"n\">Token</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"n\">Token</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">content</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">    </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">tokens</span>\n<span class=\"w\">    </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">cs</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">      </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">parseChar</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">      </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"n\">Token</span><span class=\"bp\">.</span><span class=\"n\">BANG</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">parseHelper</span><span class=\"w\"> </span><span class=\"n\">cs</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Token</span><span class=\"bp\">.</span><span class=\"n\">BANG</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">tokens</span><span class=\"o\">)</span>\n<span class=\"w\">      </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"n\">Token</span><span class=\"bp\">.</span><span class=\"n\">EQUAL</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">parseHelper</span><span class=\"w\"> </span><span class=\"n\">cs</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Token</span><span class=\"bp\">.</span><span class=\"n\">EQUAL</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">tokens</span><span class=\"o\">)</span>\n<span class=\"w\">      </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"n\">Token</span><span class=\"bp\">.</span><span class=\"n\">GREATER</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">cs</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">        </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">'='</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">rest</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">parseHelper</span><span class=\"w\"> </span><span class=\"n\">rest</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Token</span><span class=\"bp\">.</span><span class=\"n\">GREATER_EQUAL</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">tokens</span><span class=\"o\">)</span>\n<span class=\"w\">        </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">cs</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">parseHelper</span><span class=\"w\"> </span><span class=\"n\">cs</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Token</span><span class=\"bp\">.</span><span class=\"n\">GREATER</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">tokens</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"c1\">-- introduce cs again</span>\n<span class=\"w\">      </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">parseHelper</span><span class=\"w\"> </span><span class=\"n\">cs</span><span class=\"w\"> </span><span class=\"n\">tokens</span>\n<span class=\"w\">  </span><span class=\"n\">parseHelper</span><span class=\"w\"> </span><span class=\"n\">content</span><span class=\"bp\">.</span><span class=\"n\">toList</span><span class=\"w\"> </span><span class=\"o\">[]</span>\n</code></pre></div>",
        "id": 443272332,
        "sender_full_name": "pandaman",
        "timestamp": 1717758123
    },
    {
        "content": "<p>Oh this is pretty cool but i dont understand, why does it work, isn't matching with _ and with cs the same ?</p>",
        "id": 443275584,
        "sender_full_name": "Jafar Tanoukhi",
        "timestamp": 1717758737
    },
    {
        "content": "<p>Well, the only difference from a proof perspective is that you know the re-introduced cs doesn't start with <code>=</code>. Which shouldn't matter.</p>\n<p>Something I noticed is that if you use a dependent match, then lean can see the termination. So this is accepted:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">parseContent</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">content</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"n\">Token</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">rec</span><span class=\"w\"> </span><span class=\"n\">parseHelper</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">content</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"n\">Char</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">tokens</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"n\">Token</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"n\">Token</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">content</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">    </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">tokens</span>\n<span class=\"w\">    </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">cs</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">      </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">parseChar</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">      </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"n\">Token</span><span class=\"bp\">.</span><span class=\"n\">BANG</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">parseHelper</span><span class=\"w\"> </span><span class=\"n\">cs</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Token</span><span class=\"bp\">.</span><span class=\"n\">BANG</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">tokens</span><span class=\"o\">)</span>\n<span class=\"w\">      </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"n\">Token</span><span class=\"bp\">.</span><span class=\"n\">EQUAL</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">parseHelper</span><span class=\"w\"> </span><span class=\"n\">cs</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Token</span><span class=\"bp\">.</span><span class=\"n\">EQUAL</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">tokens</span><span class=\"o\">)</span>\n<span class=\"w\">      </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"n\">Token</span><span class=\"bp\">.</span><span class=\"n\">GREATER</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">cs</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">        </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">'='</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">rest</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">parseHelper</span><span class=\"w\"> </span><span class=\"n\">rest</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Token</span><span class=\"bp\">.</span><span class=\"n\">GREATER_EQUAL</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">tokens</span><span class=\"o\">)</span>\n<span class=\"w\">        </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">parseHelper</span><span class=\"w\"> </span><span class=\"n\">cs</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Token</span><span class=\"bp\">.</span><span class=\"n\">GREATER</span><span class=\"w\"> </span><span class=\"bp\">::</span><span class=\"w\"> </span><span class=\"n\">tokens</span><span class=\"o\">)</span>\n<span class=\"w\">      </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">parseHelper</span><span class=\"w\"> </span><span class=\"n\">cs</span><span class=\"w\"> </span><span class=\"n\">tokens</span>\n<span class=\"w\">    </span><span class=\"n\">termination_by</span><span class=\"w\"> </span><span class=\"n\">content</span><span class=\"bp\">.</span><span class=\"n\">length</span>\n<span class=\"w\">  </span><span class=\"n\">parseHelper</span><span class=\"w\"> </span><span class=\"n\">content</span><span class=\"bp\">.</span><span class=\"n\">toList</span><span class=\"w\"> </span><span class=\"o\">[]</span>\n</code></pre></div>",
        "id": 443299892,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1717767352
    },
    {
        "content": "<p>hmmm, i didn't know about dependent matches, this looks pretty interesting, i will look into it</p>",
        "id": 443304739,
        "sender_full_name": "Jafar Tanoukhi",
        "timestamp": 1717768883
    },
    {
        "content": "<p>Thanks</p>",
        "id": 443304756,
        "sender_full_name": "Jafar Tanoukhi",
        "timestamp": 1717768888
    }
]