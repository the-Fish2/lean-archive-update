[
    {
        "content": "<p>Can't get around this, how can I tell Lean that <code>p ^ m</code> is in ZZ (I guess that's the problem)?:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">h1</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span><span class=\"o\">:</span> <span class=\"n\">Nat.Prime</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hpow</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">m</span><span class=\"o\">):</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">div_eq_one</span>\n\n<span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">apply'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"bp\">?</span><span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"bp\">?</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"bp\">?</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">b</span>\n<span class=\"k\">with</span>\n  <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"bp\">↑</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span> <span class=\"n\">α</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span>\n<span class=\"n\">m</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">Nat.Prime</span> <span class=\"n\">p</span>\n<span class=\"n\">hpow</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">m</span>\n</code></pre></div>",
        "id": 433055209,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1713021705
    },
    {
        "content": "<p>The error show that the conclusion of <code>div_eq_one</code> is an iff, not an equality, so <code>apply</code> can't work. Did you mean <code>rw</code>?</p>",
        "id": 433055497,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1713021928
    },
    {
        "content": "<p><code>rw</code> doesn't work either. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">div_eq_one</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">m</span><span class=\"o\">)]</span>\n\n<span class=\"n\">function</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">div_eq_one</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.3810</span> <span class=\"bp\">/</span> <span class=\"bp\">?</span><span class=\"n\">m.3811</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"bp\">?</span><span class=\"n\">m.3810</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">m.3811</span>\n\n<span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">rewrite'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">equality</span> <span class=\"n\">or</span> <span class=\"n\">iff</span> <span class=\"n\">proof</span> <span class=\"n\">expected</span>\n</code></pre></div>",
        "id": 433055811,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1713022180
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">function</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">div_eq_one</span>\n</code></pre></div>\n<p>means that you're passing an argument to something that's not a function, or in this case, a function that doesn't have explicit arguments</p>",
        "id": 433056104,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1713022405
    },
    {
        "content": "<p>If you write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">div_eq_one</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>you can hover over the lemma and see it has implicit arguments <code>a</code> and <code>b</code>. You can pass those as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">div_eq_one</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">n</span><span class=\"o\">)]</span>\n</code></pre></div>",
        "id": 433056192,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1713022457
    },
    {
        "content": "<p>Now this still won't work, but at least you'll get an error message that explains the core issue</p>",
        "id": 433056203,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1713022475
    },
    {
        "content": "<p>Didn't know that notation. thanks. Brings me one step further </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">div_eq_one</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">m</span><span class=\"o\">)]</span>\n\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n<span class=\"n\">Group</span> <span class=\"n\">ℤ</span>\n</code></pre></div>\n<p>I guess I need to show <code>p ^ m \\in \\Z</code>?</p>",
        "id": 433056461,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1713022706
    },
    {
        "content": "<p>No, the problem is that the theorem applies to groups, which \\Z isn't. In fact, you can see the theorem as stated cannot be true for \\Z:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">Int.div_eq_one</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Int.div_eq_one</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"mi\">4</span><span class=\"o\">)</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n</code></pre></div>",
        "id": 433056530,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1713022797
    },
    {
        "content": "<p>Thanks, learned a lot.</p>",
        "id": 433056887,
        "sender_full_name": "Ralf Stephan",
        "timestamp": 1713023137
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"707242\">Ralf Stephan</span> has marked this topic as resolved.</p>",
        "id": 433056903,
        "sender_full_name": "Notification Bot",
        "timestamp": 1713023157
    }
]