[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">ext</span><span class=\"kd\">]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Point</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Int</span>\n  <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Int</span>\n  <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Int</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Point</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Point</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">a.x</span> <span class=\"bp\">+</span> <span class=\"n\">b.x</span><span class=\"o\">,</span> <span class=\"n\">a.y</span> <span class=\"bp\">+</span> <span class=\"n\">b.y</span><span class=\"o\">,</span> <span class=\"n\">a.z</span> <span class=\"bp\">+</span> <span class=\"n\">b.z</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">Point</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">add</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">smul</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Point</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">a.x</span>\n  <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">a.y</span>\n  <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">a.z</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">HSMul</span> <span class=\"n\">Int</span> <span class=\"n\">Point</span> <span class=\"n\">Point</span> <span class=\"n\">where</span>\n  <span class=\"n\">hSMul</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">smul</span> <span class=\"n\">r</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">smul_distrib</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- How to show this?</span>\n</code></pre></div>",
        "id": 435412610,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1714058070
    },
    {
        "content": "<p>Add lemmas of the form <code>@[simp] lemma x_add (a b : Point) : (a + b).x = a.x + b.x := rfl</code> (and same for <code>•</code>), then your proof will just be <code>simp [mul_add]</code></p>",
        "id": 435412972,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1714058195
    },
    {
        "content": "<p>There is clearly symmetry in the definition of Point.add, but can it be exploited and automated?</p>",
        "id": 435414159,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1714058580
    },
    {
        "content": "<p><code>@[simps]</code> on the instance and on <code>add</code> would generate the lemmas for you, but with terrible names</p>",
        "id": 435420820,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1714060786
    }
]