[
    {
        "content": "<p>I need help on this proof.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n<span class=\"kn\">open</span> <span class=\"n\">Filter</span>\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">nhdsWithin</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"o\">(</span><span class=\"n\">Set.Ioo</span> <span class=\"mi\">0</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span> <span class=\"n\">atTop</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">tendsto_atTop</span><span class=\"o\">]</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 423307009,
        "sender_full_name": "Colin Jones ⚛️",
        "timestamp": 1708910073
    },
    {
        "content": "<p>Are you aware of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Filter.eventually_iff#doc\">docs#Filter.eventually_iff</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/ContinuousOn.html#mem_nhdsWithin_iff_exists_mem_nhds_inter\">mem_nhdsWithin_iff_exists_mem_nhds_inter</a>? What is your pen-and-paper proof?</p>",
        "id": 423388370,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1708951635
    },
    {
        "content": "<p>When I plug in <code>1/a</code> into the function the denominator becomes zero, therefore the function tends towards infinity. That's what I believe the <code>atTop</code> stands for. However, I don't know how to implement that logic in Lean 4. </p>\n<p>In fact I am unable to prove a similar but simpler problem involving the function f(x) = 1/x.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n<span class=\"kn\">open</span> <span class=\"n\">Filter</span>\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span>\n  <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nhdsWithin</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">Set.Ioo</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"n\">atTop</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"n\">tendsto_nhdsWithin_of_tendsto_nhds</span> <span class=\"bp\">?</span><span class=\"n\">h</span>\n  <span class=\"n\">apply</span><span class=\"bp\">?</span>\n</code></pre></div>\n<p>I would think that this problem is easily solvable and would only take <code>aesop?</code> or <code>apply?</code> to solve.</p>",
        "id": 423453122,
        "sender_full_name": "Colin Jones ⚛️",
        "timestamp": 1708970066
    },
    {
        "content": "<p>I managed to get the second example to showing that y is an element of s.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n<span class=\"kn\">open</span> <span class=\"n\">Filter</span>\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span>\n  <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nhdsWithin</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">Set.Ioo</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"n\">atTop</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"n\">tendsto_nhdsWithin_of_tendsto_nhds</span> <span class=\"bp\">?</span><span class=\"n\">h</span>\n  <span class=\"n\">aesop</span><span class=\"bp\">?</span>\n  <span class=\"n\">refine</span> <span class=\"n\">tendsto_iff_forall_eventually_mem.mpr</span> <span class=\"bp\">?</span><span class=\"n\">h.a</span>\n  <span class=\"n\">refine</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">refine</span> <span class=\"n\">Metric.eventually_nhds_iff.mpr</span> <span class=\"bp\">?</span><span class=\"n\">h.a.a</span>\n  <span class=\"n\">use</span> <span class=\"mi\">1</span>\n  <span class=\"n\">norm_num</span>\n  <span class=\"n\">intro</span> <span class=\"n\">y</span>\n  <span class=\"n\">intro</span> <span class=\"n\">H</span>\n  <span class=\"n\">apply</span><span class=\"bp\">?</span>\n</code></pre></div>\n<p>But, I don't know how to proceed.</p>",
        "id": 423453745,
        "sender_full_name": "Colin Jones ⚛️",
        "timestamp": 1708970295
    },
    {
        "content": "<p>Would this be correct or wrong because Lean treats 1/0 as 0?</p>",
        "id": 423864152,
        "sender_full_name": "Colin Jones ⚛️",
        "timestamp": 1709140045
    },
    {
        "content": "<p>This has nothing to do with 1/0, your statement is wrong because <code>atTop</code> should be <code>atBot</code>.</p>",
        "id": 423874922,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709143807
    },
    {
        "content": "<p>Even with the correct statement, your very first line of proof reduces the proof to showing something that is wrong.</p>",
        "id": 423875117,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709143894
    },
    {
        "content": "<p>You need to search online for a graph of the function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>↦</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x  ↦ 1/x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.522em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1/</span><span class=\"mord mathnormal\">x</span></span></span></span> to see what it does near zero.</p>",
        "id": 423875307,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709143963
    },
    {
        "content": "<p>Okay I see where I went wrong. Can someone confirm my understanding?</p>\n<p><code>atTop</code> means it's tending to positive infinity? And, <code>atBot</code> means it's tending to negative infinity?</p>\n<p>My understanding of <code>nhdsWithin 0 (Set.Ioo (-1:ℝ) 0)</code> was that 1/x was going to zero. Is this also correct?</p>",
        "id": 424042427,
        "sender_full_name": "Colin Jones ⚛️",
        "timestamp": 1709219789
    },
    {
        "content": "<p>Sorry not an rigorous mathematician just an engineer</p>",
        "id": 424042540,
        "sender_full_name": "Colin Jones ⚛️",
        "timestamp": 1709219826
    },
    {
        "content": "<p>Yes, <code>atBot</code> means negative infinity. I’m not sure what you are trying to say with the next sentence but it certainly doesn’t sound correct.</p>",
        "id": 424044806,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709220481
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"628490\">Colin Jones ⚛️</span> <a href=\"#narrow/stream/113489-new-members/topic/FIlter.2ETendsto.20atTop.20Help.20on.20Proof/near/424042427\">said</a>:</p>\n<blockquote>\n<p>My understanding of <code>nhdsWithin 0 (Set.Ioo (-1:ℝ) 0)</code> was that 1/x was going to zero. Is this also correct?</p>\n</blockquote>\n<p>If you mean that x (not 1/x) is going to zero (from the left) then yes. Have you read <a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">#mil</a> ? It might help</p>",
        "id": 424064404,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1709225742
    },
    {
        "content": "<p>Okay I figured out one of them.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span>\n  <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nhdsWithin</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">Set.Ioo</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">atTop</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">one_div</span><span class=\"o\">]</span>\n  <span class=\"n\">aesop</span>\n  <span class=\"n\">exact</span> <span class=\"n\">tendsto_inv_zero_atTop</span>\n</code></pre></div>",
        "id": 424073622,
        "sender_full_name": "Colin Jones ⚛️",
        "timestamp": 1709228473
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466290\">Luigi Massacci</span> <a href=\"#narrow/stream/113489-new-members/topic/FIlter.2ETendsto.20atTop.20Help.20on.20Proof/near/424064404\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"628490\">Colin Jones ⚛️</span> <a href=\"#narrow/stream/113489-new-members/topic/FIlter.2ETendsto.20atTop.20Help.20on.20Proof/near/424042427\">said</a>:</p>\n<blockquote>\n<p>My understanding of <code>nhdsWithin 0 (Set.Ioo (-1:ℝ) 0)</code> was that 1/x was going to zero. Is this also correct?</p>\n</blockquote>\n<p>If you mean that x (not 1/x) is going to zero (from the left) then yes. Have you read <a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">#mil</a> ? It might help</p>\n</blockquote>\n<p>Thank you. When I tried to read MIL, I didn't understand a lot of it, but I think I'll check it out again.</p>",
        "id": 424074099,
        "sender_full_name": "Colin Jones ⚛️",
        "timestamp": 1709228605
    },
    {
        "content": "<p>I don't know if there's such a thing as \"too much <code>aesop</code>\" but that might be it. Here's what I would have done: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span>\n  <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nhdsWithin</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">Set.Ioo</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">atTop</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">one_div</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">tendsto_nhdsWithin_mono_left</span> <span class=\"n\">Set.Ioo_subset_Ioi_self</span> <span class=\"n\">tendsto_inv_zero_atTop</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>unfortunately you can't use \"?\" when aesop is non-finishing, but you can use <code>show_term</code> instead:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span>\n  <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nhdsWithin</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">Set.Ioo</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">atTop</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">one_div</span><span class=\"o\">]</span>\n  <span class=\"n\">show_term</span> <span class=\"n\">aesop</span>\n  <span class=\"n\">exact</span> <span class=\"n\">tendsto_inv_zero_atTop</span>\n</code></pre></div>\n<p>Modulo some machine stuff, the relevant lemma it's applying is only <code>nhdsWithin_Ioo_eq_nhdsWithin_Ioi</code>, so you can erase the (almost) pointless aesop call this way, for example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span>\n  <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nhdsWithin</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">Set.Ioo</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">atTop</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">one_div</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nhdsWithin_Ioo_eq_nhdsWithin_Ioi</span> <span class=\"n\">zero_lt_one</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">tendsto_inv_zero_atTop</span>\n</code></pre></div>\n<p>having said that, I don't know why you wanted this theorem, but if it's as an exercise, I'd say you are cheating: <code>tendsto_inv_zero_atTop</code> is essentially what you have to prove. You just proved that \"1/x → +∞ as x → 0⁺ (with x &lt; 1)\" by using \"1/x → +∞ as x → 0⁺ \". Up to you to decided if that is morally sound</p>",
        "id": 424082892,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1709231541
    },
    {
        "content": "<p>Yes I figured that out too. I'm okay with proving the theorem that way as long as I'm using Mathlib as the source.</p>\n<p>The main problem is this proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n<span class=\"kn\">open</span> <span class=\"n\">Filter</span>\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n<span class=\"kn\">open</span> <span class=\"n\">Set</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span>\n         <span class=\"o\">(</span><span class=\"n\">nhdsWithin</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Ioo</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)))</span> <span class=\"n\">atTop</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Which I just cannot figure out? Can someone help solve this goal for me?</p>",
        "id": 424276234,
        "sender_full_name": "Colin Jones ⚛️",
        "timestamp": 1709309058
    },
    {
        "content": "<p>It should be written correctly too as 1/[(1 - ax)(1 - ax + bx)]  does tend towards positive infinity from the left of 1/a.</p>",
        "id": 424276451,
        "sender_full_name": "Colin Jones ⚛️",
        "timestamp": 1709309118
    },
    {
        "content": "<p>I made some progress but am unsure of what open set I should use to prove the above</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n<span class=\"kn\">open</span> <span class=\"n\">Filter</span>\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n<span class=\"kn\">open</span> <span class=\"n\">Set</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span>\n         <span class=\"o\">(</span><span class=\"n\">nhdsWithin</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Ioo</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)))</span> <span class=\"n\">atTop</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nhdsWithin_Ioo_eq_nhdsWithin_Iio</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">tendsto_atTop</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">C</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">eventually_nhdsWithin_iff</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">eventually_nhds_iff</span><span class=\"o\">]</span>\n  <span class=\"n\">use</span> <span class=\"n\">Set.Ioo</span> <span class=\"mi\">0</span> <span class=\"n\">C</span><span class=\"bp\">⁻¹</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"n\">hx1</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">C</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 424282626,
        "sender_full_name": "Colin Jones ⚛️",
        "timestamp": 1709310727
    },
    {
        "content": "<p>At the <code>sorry</code> you have 3 goals. This is not how Lean code should look. Every time the number of goals becomes greater than 1 you should put these dots <code>\\.</code> and start working in different \"threads\", one per goal.</p>\n<p>You seem to be working on the first goal, but the local context for your second goal is this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n<span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span>\n<span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span>\n<span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">IsOpen</span> <span class=\"o\">(</span><span class=\"n\">Ioo</span> <span class=\"mi\">0</span> <span class=\"n\">C</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">∈</span> <span class=\"n\">Ioo</span> <span class=\"mi\">0</span> <span class=\"n\">C</span><span class=\"bp\">⁻¹</span>\n</code></pre></div>\n<p>So this says \"let a and b be arbitrary positive real numbers and let C be an arbitrary real number (here \"arbitrary\" means \"we don't know anything about it other than the fact that it's a real number\"). Then (something), and 0&lt;a^{-1}&lt;C^{-1}\". This is clearly not true because for example we could have a=1 and C=-1, or a=0.000000000001 and C=37 or whatever. So at some point in your proof you've taken a wrong turn. Also, you seem to have a <code>b</code> which plays no role anywhere.</p>\n<p>I am not an expert on how to manipulate neighbourhoods in Lean, they don't really show up in my code. But my understanding of the statement you've written is that it says that as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> tends to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">1/a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1/</span><span class=\"mord mathnormal\">a</span></span></span></span> from below, then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><mi>a</mi><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">1/(1-ax)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1/</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span> tends to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>+</mo><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">+\\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord\">+</span><span class=\"mord\">∞</span></span></span></span> and this sounds right (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">ax</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">x</span></span></span></span> will be tending to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> from below, so <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>−</mo><mi>a</mi><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">1-ax</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">x</span></span></span></span> will be tending to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> from above, so its reciprocal will be tending to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>+</mo><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">+\\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord\">+</span><span class=\"mord\">∞</span></span></span></span>. So at some point you've applied a tactic which turned a correct thing into an incorrect thing.</p>\n<p>I'm just thinking aloud here. Looking at the proof, the rewrites are unlikely to be the problem, because you can usually just rewrite backwards to get back to where you came from, and you can't go from false to true. And the intro won't be the problem either because that's also a reversible tactic. So it's going to be the <code>use</code>, right? That looks highly suspicious because if C is negative then <code>Set.Ioo 0 C⁻¹</code> is going to be the empty set so <code>a⁻¹ ∈ Ioo 0 C⁻¹</code> is never going to be true. At this point you already have two goals (so you've already committed a style sin) so let's go back to see where that appeared.</p>\n<p>OK the second goal appeared in the first line of your proof, because you didn't provide a proof that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>a</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">a^{-1}&gt;0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8532em;vertical-align:-0.0391em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>. So you could replace the first line of your proof with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nhdsWithin_Ioo_eq_nhdsWithin_Iio</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">positivity</span><span class=\"o\">)]</span>\n</code></pre></div>\n<p>and now you only have one goal. Now let's get back to this <code>use</code>.</p>",
        "id": 424298954,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709315756
    },
    {
        "content": "<p>Deleting the junk <code>b</code>, at this point the tactic state is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n<span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span>\n<span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∃</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Iio</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">IsOpen</span> <span class=\"n\">t</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span>\n</code></pre></div>\n<p>So you need to <code>use</code> a set <code>t</code> with the following three properties:<br>\n(3) <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>a</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>∈</mo><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">a^{-1}\\in t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8532em;vertical-align:-0.0391em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord mathnormal\">t</span></span></span></span>;<br>\n(2) <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord mathnormal\">t</span></span></span></span> is open;<br>\n(1) Every element of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord mathnormal\">t</span></span></span></span> which is less than <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>a</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">a^{-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span> has the property that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo>≤</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><mi>a</mi><mi>x</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">C\\leq 1/(1-ax).</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1/</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mord\">.</span></span></span></span></p>",
        "id": 424299011,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709315769
    },
    {
        "content": "<p>(sorry for multiple messages, I seem to have hit a Zulip bug?)</p>",
        "id": 424299130,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709315822
    },
    {
        "content": "<p>From my mental picture, this open set is going to be of the form <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>p</mi><mi mathvariant=\"normal\">.</mi><mi>q</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(p.q)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">p</span><span class=\"mord\">.</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mclose\">)</span></span></span></span> (to satisfy (2)), where<br>\n(a) <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> is going to be positive and very very close to, but less than, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>a</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">a^{-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span> (to satisfy (1)), and<br>\n(b) <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>q</mi></mrow><annotation encoding=\"application/x-tex\">q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span></span></span></span> is going to be anything at all bigger than <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>a</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">a^{-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span> (to satisfy (3)).</p>",
        "id": 424299474,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709315957
    },
    {
        "content": "<p>(huh, the next para of my message refuses to send!) Bug reported <a href=\"#narrow/stream/236604-Zulip-meta/topic/can't.20post.20LaTeX/near/424300303\">here</a></p>",
        "id": 424299625,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709316007
    },
    {
        "content": "<p>So <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>q</mi></mrow><annotation encoding=\"application/x-tex\">q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span></span></span></span> can just be <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>a</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">a^{-1}+1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>, and the big question is how to make (a) work. Because <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><mi>a</mi><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">1/(1-ax)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1/</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span> is getting bigger as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> increases to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span> from below, if we can make sure that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo>≤</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><mi>a</mi><mi>p</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">C\\leq 1/(1-ap)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1/</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">)</span></span></span></span> then this is going to work. Because <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> is just a tiny bit less than <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>a</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">a^{-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">ap</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">p</span></span></span></span> will be a tiny bit less than 1, so <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><mi>a</mi><mi>p</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(1-ap)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">)</span></span></span></span> will be positive, so we can multiply both sides by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><mi>a</mi><mi>p</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(1-ap)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">)</span></span></span></span> and reduce our problem to finding a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><mi>a</mi><mi>p</mi><mo stretchy=\"false\">)</mo><mo>≤</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">C(1-ap)\\leq 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>.</p>",
        "id": 424299810,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709316068
    },
    {
        "content": "<p>Doing the algebra we see <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo>−</mo><mi>C</mi><mi>a</mi><mi>p</mi><mo>≤</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">C-Cap\\leq 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> so <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo>−</mo><mn>1</mn><mo>≤</mo><mi>C</mi><mi>a</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">C-1\\leq Cap</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">p</span></span></span></span> and now we have to be a bit careful because we want to divide by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> to isolate <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> but don't know the sign of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> so we can't control the inequality.</p>",
        "id": 424299860,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709316098
    },
    {
        "content": "<p>Oh, I guess if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo>≤</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">C\\leq 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> then we already won, because if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>&lt;</mo><mi>p</mi><mo>&lt;</mo><msup><mi>a</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">0&lt;p&lt;a^{-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6835em;vertical-align:-0.0391em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span> then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><mi>a</mi><mi>p</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(1-ap)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">)</span></span></span></span> will be positive so <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><mi>a</mi><mi>p</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">C(1-ap)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">)</span></span></span></span> will be <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">\\leq 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> and so certainly <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\leq 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>.  But if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">C&gt;0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7224em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> then we have to think some more, because if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> is a million billion trillion then we need to guarantee that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><mi>a</mi><mi>p</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(1-ap)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">)</span></span></span></span> is tiny to make up for it. Let's go back to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo>−</mo><mn>1</mn><mo>≤</mo><mi>C</mi><mi>a</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">C-1\\leq Cap</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">p</span></span></span></span> and divide through by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">Ca</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathnormal\">a</span></span></span></span> to get <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mo>≥</mo><mo stretchy=\"false\">(</mo><mi>C</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mi>C</mi><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">p\\geq (C-1)/Ca</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8304em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathnormal\">a</span></span></span></span>.</p>",
        "id": 424299971,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709316130
    },
    {
        "content": "<p>So you want to define <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> to be <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>a</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">a^{-1}/2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mord\">/2</span></span></span></span> if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo>≤</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">C\\leq 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>C</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mi>C</mi><mi>a</mi></mrow><annotation encoding=\"application/x-tex\"> (C-1)/Ca</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathnormal\">a</span></span></span></span> if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo>&gt;</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">C&gt;1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7224em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> and then everything should work.</p>\n<p>As I say, I don't work with filters like this at all and I kind of feel like your proof is making leaps and bounds in the wrong direction. I thought the whole point of filters was to spare us from having to do this kind of thing.  But I might be wrong -- you might have to ultimately end up doing this kind of calculation however you approach it (you shouldn't have to do though, you should just be using stuff like monotonicity etc I suspect). I also feel like there should be a tactic to do all of this; if you guys are sitting on some cash then you might want to hire someone who has more of a maths background and can write a bespoke tactic which will prove these kinds of examples for you automatically. It might be a great project for a computer science undergraduate, for example.</p>",
        "id": 424299997,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709316145
    },
    {
        "content": "<p>Thank you for your response, Kevin. I do wish there was a tactic to do this all. I did complete the proof but it is extraordinarily long, although, hopefully a little organized and readable.</p>\n<p>I changed the approach from which I did the proof and instead of sets used the Metric.eventually_nhds_iff way.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n<span class=\"kn\">open</span> <span class=\"n\">Filter</span>\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n<span class=\"kn\">open</span> <span class=\"n\">Set</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span>\n         <span class=\"o\">(</span><span class=\"n\">nhdsWithin</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Ioo</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)))</span> <span class=\"n\">atTop</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">a_inv_a</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">division_def</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">div_self</span> <span class=\"o\">(</span><span class=\"n\">ne_of_gt</span> <span class=\"n\">ha</span><span class=\"o\">)</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nhdsWithin_Ioo_eq_nhdsWithin_Iio</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">positivity</span><span class=\"o\">)]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">tendsto_atTop</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">b</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">eventually_nhdsWithin_iff</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">Metric.eventually_nhds_iff</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">le_or_lt</span> <span class=\"n\">b</span> <span class=\"mi\">0</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hb</span> <span class=\"k\">with</span> <span class=\"n\">hb1</span> <span class=\"bp\">|</span> <span class=\"n\">hb2</span>\n  <span class=\"bp\">·</span> <span class=\"n\">use</span> <span class=\"mi\">3</span>\n    <span class=\"n\">norm_num</span>\n    <span class=\"n\">intro</span> <span class=\"n\">y</span> <span class=\"n\">hy</span> <span class=\"n\">hy1</span>\n    <span class=\"k\">have</span> <span class=\"n\">step1</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"k\">calc</span>\n        <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rel</span> <span class=\"o\">[</span><span class=\"n\">hy1</span><span class=\"o\">]</span>\n        <span class=\"n\">_</span>   <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">division_def</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span>\n    <span class=\"k\">have</span> <span class=\"n\">step2</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">y</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rename_i</span> <span class=\"n\">b_1</span>\n      <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">gt_iff_lt</span><span class=\"o\">,</span> <span class=\"n\">sub_pos</span><span class=\"o\">]</span>\n    <span class=\"k\">have</span> <span class=\"n\">step3</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rename_i</span> <span class=\"n\">b_1</span>\n      <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">gt_iff_lt</span><span class=\"o\">,</span> <span class=\"n\">sub_pos</span><span class=\"o\">,</span> <span class=\"n\">inv_pos</span><span class=\"o\">]</span>\n    <span class=\"n\">linarith</span>\n  <span class=\"bp\">·</span> <span class=\"n\">use</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹*</span><span class=\"n\">b</span><span class=\"bp\">⁻¹</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"n\">rename_i</span> <span class=\"n\">b_1</span>\n    <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">one_div</span><span class=\"o\">,</span> <span class=\"n\">mul_inv_rev</span><span class=\"o\">,</span> <span class=\"n\">gt_iff_lt</span><span class=\"o\">,</span> <span class=\"n\">inv_pos</span><span class=\"o\">,</span> <span class=\"n\">mul_pos_iff_of_pos_left</span><span class=\"o\">]</span>\n    <span class=\"n\">intro</span> <span class=\"n\">y</span> <span class=\"n\">hy</span> <span class=\"n\">hy1</span>\n    <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">Dist.dist</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hy</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">abs_sub_lt_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hy</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">hy</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">hl</span><span class=\"o\">,</span> <span class=\"n\">hr</span><span class=\"o\">⟩</span>\n    <span class=\"k\">have</span> <span class=\"n\">hr'</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹*</span><span class=\"n\">b</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">lt_sub_iff_add_lt</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Mathlib.Tactic.RingNF.add_neg</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"n\">hr</span>\n    <span class=\"k\">have</span> <span class=\"n\">hr'</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹*</span><span class=\"n\">b</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">neg_neg</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">lt_neg</span><span class=\"o\">]</span>\n      <span class=\"n\">rename_i</span> <span class=\"n\">b_1</span>\n      <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_Iio</span><span class=\"o\">,</span> <span class=\"n\">neg_lt_sub_iff_lt_add</span><span class=\"o\">,</span> <span class=\"n\">neg_sub</span><span class=\"o\">]</span>\n    <span class=\"k\">have</span> <span class=\"n\">step_a</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹*</span><span class=\"n\">b</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_sub</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">a_inv_a</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">sub_right_inj</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span>\n      <span class=\"n\">rename_i</span> <span class=\"n\">b_1</span> <span class=\"n\">hr'_1</span>\n      <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_Iio</span><span class=\"o\">,</span> <span class=\"n\">neg_lt_sub_iff_lt_add</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">]</span>\n    <span class=\"k\">have</span> <span class=\"n\">step_y</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">aesop</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">propext</span> <span class=\"o\">(</span><span class=\"n\">lt_div_iff'</span> <span class=\"n\">ha</span><span class=\"o\">)]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">one_div</span><span class=\"o\">]</span>\n      <span class=\"n\">assumption</span>\n    <span class=\"k\">have</span> <span class=\"n\">step1</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">step_a</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">mul_lt_mul_left</span> <span class=\"n\">ha</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">hr'</span>\n    <span class=\"k\">have</span> <span class=\"n\">step2</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">neg_neg</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"o\">),</span> <span class=\"n\">lt_neg</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">step1</span>\n      <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_Iio</span><span class=\"o\">,</span> <span class=\"n\">neg_lt_sub_iff_lt_add</span><span class=\"o\">,</span> <span class=\"n\">sub_pos</span><span class=\"o\">,</span> <span class=\"n\">neg_sub</span><span class=\"o\">,</span> <span class=\"n\">neg_mul</span><span class=\"o\">]</span>\n    <span class=\"k\">have</span> <span class=\"n\">step3</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">↔</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">neg_mul</span><span class=\"o\">,</span> <span class=\"n\">lt_neg_add_iff_add_lt</span><span class=\"o\">,</span> <span class=\"n\">add_neg_lt_iff_lt_add</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span>\n        <span class=\"n\">sub_lt_iff_lt_add</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">step2</span>\n      <span class=\"n\">assumption</span>\n    <span class=\"k\">have</span> <span class=\"n\">step4</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">&gt;</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">↔</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">b</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">Iff.symm</span> <span class=\"o\">(</span><span class=\"n\">_root_.one_div_lt_one_div</span> <span class=\"o\">(</span><span class=\"n\">inv_pos.mpr</span> <span class=\"n\">hb2</span><span class=\"o\">)</span> <span class=\"n\">step_y</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"n\">step3</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">div_inv_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">one_div</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">step3</span>\n      <span class=\"n\">assumption</span>\n    <span class=\"n\">exact</span> <span class=\"n\">LT.lt.le</span> <span class=\"n\">step4</span>\n</code></pre></div>",
        "id": 424331376,
        "sender_full_name": "Colin Jones ⚛️",
        "timestamp": 1709329926
    },
    {
        "content": "<p>My guess is that there will be an extremely short proof of the form: as x tends to a^-1 from below, ax tends to 1 from below, so 1-ax tends to 0 from above, so 1/(1-ax) tends to +infty. That would be how I'd attempt to prove your theorem although as I say I don't know my way around this part of the library. My approach seems far less painful than yours though.</p>",
        "id": 424333717,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709331089
    },
    {
        "content": "<p>Yes that would be a lot nicer to prove, but I haven't found a way to do switch the goal to something analogous to 1/x goes to infinity from the right of zero</p>",
        "id": 424335388,
        "sender_full_name": "Colin Jones ⚛️",
        "timestamp": 1709331970
    },
    {
        "content": "<p>I found a theorem that switches <code>atTop</code> to proving the inverse of the function tends to zero, but it won't let me apply it to the goal statement (unsurprisingly because <code>apply?</code> couldn't find it).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n<span class=\"kn\">open</span> <span class=\"n\">Filter</span>\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n<span class=\"kn\">open</span> <span class=\"n\">Set</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span>\n         <span class=\"o\">(</span><span class=\"n\">nhdsWithin</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Ioo</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)))</span> <span class=\"n\">atTop</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n\n    <span class=\"n\">apply</span> <span class=\"n\">Filter.Tendsto.inv_tendsto_atTop</span>\n</code></pre></div>",
        "id": 424336532,
        "sender_full_name": "Colin Jones ⚛️",
        "timestamp": 1709332589
    },
    {
        "content": "<p>Oh wait I'm silly the theorem only goes one way.</p>",
        "id": 424336813,
        "sender_full_name": "Colin Jones ⚛️",
        "timestamp": 1709332728
    },
    {
        "content": "<p>Okay I found the way to essentially turn the goal into (1 - ax) tends to zero as x -&gt; 1/a</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span>\n         <span class=\"o\">(</span><span class=\"n\">nhdsWithin</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Ioo</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)))</span> <span class=\"n\">atTop</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">have</span> <span class=\"n\">abs_a</span> <span class=\"o\">:</span> <span class=\"bp\">|</span><span class=\"n\">a</span><span class=\"bp\">|</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">abs_of_pos</span> <span class=\"n\">ha</span>\n    <span class=\"n\">refine</span> <span class=\"n\">Filter.Tendsto.inv_tendsto_zero</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n    <span class=\"n\">refine</span> <span class=\"n\">Metric.tendsto_nhdsWithin_nhdsWithin.mpr</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n    <span class=\"n\">intro</span> <span class=\"n\">e</span> <span class=\"n\">he</span>\n    <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">Dist.dist</span><span class=\"o\">]</span>\n    <span class=\"n\">norm_num</span>\n    <span class=\"n\">use</span> <span class=\"n\">e</span> <span class=\"bp\">/</span> <span class=\"n\">a</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"n\">exact</span> <span class=\"n\">div_pos</span> <span class=\"n\">he</span> <span class=\"n\">ha</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"n\">hx1</span> <span class=\"n\">hx2</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"bp\">·</span> <span class=\"k\">calc</span>\n        <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">gcongr</span>\n        <span class=\"n\">_</span>   <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">/</span><span class=\"n\">a</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">div_self</span> <span class=\"o\">(</span><span class=\"n\">ne_of_gt</span> <span class=\"n\">ha</span><span class=\"o\">)</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">abs_sub_comm</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"bp\">|</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">e</span> <span class=\"bp\">/</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span><span class=\"bp\">*|</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">/</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">Iff.symm</span> <span class=\"o\">(</span><span class=\"n\">mul_lt_mul_left</span> <span class=\"n\">ha</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"n\">hx2</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">/</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">mul_div_left_comm</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">div_self</span> <span class=\"o\">(</span><span class=\"n\">ne_of_gt</span> <span class=\"n\">ha</span><span class=\"o\">)]</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_one</span><span class=\"o\">]]</span> <span class=\"n\">at</span> <span class=\"n\">hx2</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">|</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">e</span> <span class=\"bp\">↔</span> <span class=\"bp\">|</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">e</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">abs_mul</span><span class=\"o\">,</span> <span class=\"n\">abs_a</span><span class=\"o\">]]</span> <span class=\"n\">at</span> <span class=\"n\">hx2</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"bp\">|</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">e</span> <span class=\"bp\">↔</span> <span class=\"bp\">|</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">⁻¹|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">e</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_sub</span><span class=\"o\">]]</span> <span class=\"n\">at</span> <span class=\"n\">hx2</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">one_div</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_one_div</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">Eq.symm</span> <span class=\"o\">(</span><span class=\"n\">div_self</span> <span class=\"o\">(</span><span class=\"n\">ne_of_gt</span> <span class=\"n\">ha</span><span class=\"o\">))]</span>\n      <span class=\"n\">assumption</span>\n</code></pre></div>",
        "id": 424340407,
        "sender_full_name": "Colin Jones ⚛️",
        "timestamp": 1709334751
    },
    {
        "content": "<p>Just looking at your code makes me wince because you have an <code>exact</code> in the middle of it, which indicates that you are writing tactics where there is more than one goal. You should structure your proofs using <code>\\.</code>.</p>",
        "id": 424344210,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709336996
    },
    {
        "content": "<p>Haha, sorry! I did it in a rush</p>",
        "id": 424344316,
        "sender_full_name": "Colin Jones ⚛️",
        "timestamp": 1709337033
    },
    {
        "content": "<p>This is definitely looking better! I'm sure a limits expert can mangle it down to a few lines, but all those <code>rw</code>s at the end can definitely be tidied up (you go a little bit around the houses).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">nhdsWithin</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Ioo</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)))</span> <span class=\"n\">atTop</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"n\">Filter.Tendsto.inv_tendsto_zero</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">refine</span> <span class=\"n\">Metric.tendsto_nhdsWithin_nhdsWithin.mpr</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">intro</span> <span class=\"n\">e</span> <span class=\"n\">he</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">Dist.dist</span><span class=\"o\">]</span>\n  <span class=\"n\">norm_num</span>\n  <span class=\"n\">use</span> <span class=\"n\">e</span> <span class=\"bp\">/</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">positivity</span> <span class=\"c1\">-- kill the &gt; 0 goal with the positivity tactic</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">_</span> <span class=\"n\">hx1</span> <span class=\"n\">hx2</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"k\">calc</span>\n      <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">gcongr</span>\n      <span class=\"n\">_</span>   <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">mul_inv_cancel</span> <span class=\"n\">ha.ne'</span> <span class=\"c1\">-- ha.ne' is the cheap way to get a != 0 from 0 &lt; a; the power of dot notation</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">abs_sub_comm</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">lt_div_iff</span> <span class=\"n\">ha</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx2</span>\n    <span class=\"n\">nth_rw</span> <span class=\"mi\">2</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">abs_of_pos</span> <span class=\"n\">ha</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx2</span>\n    <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">abs_mul</span><span class=\"o\">,</span> <span class=\"n\">sub_mul</span><span class=\"o\">,</span> <span class=\"n\">inv_mul_cancel</span> <span class=\"n\">ha.ne'</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx2</span>\n</code></pre></div>\n<p>You can go straight from a &lt; b / c to a * c &lt; b in one move, you don't have to do what you did.</p>",
        "id": 424346272,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709338291
    },
    {
        "content": "<p>Here's a solution to my original question.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n<span class=\"kn\">open</span> <span class=\"n\">Filter</span>\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n<span class=\"kn\">open</span> <span class=\"n\">Set</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span>\n         <span class=\"o\">(</span><span class=\"n\">nhdsWithin</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Ioo</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)))</span> <span class=\"n\">atTop</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">one_sub_a</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Filter.Tendsto.sub</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">tendsto_const_nhds</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">division_def</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">Eq.symm</span> <span class=\"o\">(</span><span class=\"n\">div_self</span> <span class=\"o\">(</span><span class=\"n\">ne_of_gt</span> <span class=\"n\">ha</span><span class=\"o\">))]</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Filter.Tendsto.const_mul</span>\n      <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"o\">⦃</span><span class=\"n\">U</span><span class=\"o\">⦄</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n  <span class=\"n\">refine</span> <span class=\"n\">Filter.Tendsto.inv_tendsto_zero</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nhdsWithin</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Filter.Tendsto.inf</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Filter.Tendsto.mul</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">one_sub_a</span>\n  <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">Filter.Tendsto.add</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">one_sub_a</span>\n    <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">Filter.Tendsto.const_mul</span>\n      <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"o\">⦃</span><span class=\"n\">U</span><span class=\"o\">⦄</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n  <span class=\"n\">refine</span> <span class=\"n\">tendsto_principal_principal.mpr</span> <span class=\"bp\">?</span><span class=\"n\">h₂.a</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">hx</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_Ioi</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">one_div</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">Eq.symm</span> <span class=\"o\">(</span><span class=\"n\">div_self</span> <span class=\"o\">(</span><span class=\"n\">ne_of_gt</span> <span class=\"n\">ha</span><span class=\"o\">))]</span>\n    <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_Ioo</span><span class=\"o\">]</span>\n    <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">div_lt_iff'</span> <span class=\"n\">ha</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">/</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">/</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">/</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">div_self</span> <span class=\"o\">(</span><span class=\"n\">ne_of_gt</span> <span class=\"n\">ha</span><span class=\"o\">)]</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">apply</span> <span class=\"n\">hx.2</span>\n  <span class=\"k\">have</span> <span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_Ioo</span><span class=\"o\">,</span> <span class=\"n\">gt_iff_lt</span><span class=\"o\">,</span> <span class=\"n\">mul_pos_iff_of_pos_left</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"n\">step1</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">exact</span> <span class=\"n\">sub_pos.mpr</span> <span class=\"n\">ha</span>\n  <span class=\"k\">have</span> <span class=\"n\">step2</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">exact</span> <span class=\"n\">add_pos</span> <span class=\"n\">step1</span> <span class=\"n\">hb</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Real.mul_pos</span> <span class=\"n\">step1</span> <span class=\"n\">step2</span>\n</code></pre></div>",
        "id": 424354279,
        "sender_full_name": "Colin Jones ⚛️",
        "timestamp": 1709345094
    },
    {
        "content": "<p>Well done! Perhaps someone like <span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span> will now tell us how this sort of thing is supposed to be done? Or is the answer really just \"we need a tactic\"?</p>",
        "id": 424372772,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709363589
    },
    {
        "content": "<p>The Isabelle tactic pointed to <a href=\"#narrow/stream/113488-general/topic/.22Missing.20Tactics.22.20list/near/420354823\">here</a> should be able to handle that if I read the paper correctly</p>",
        "id": 424408481,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1709383437
    },
    {
        "content": "<p>Here is my solution. There are probably some ways to avoid doing all the side goals by hand but I'm used to it. Of course we would really like a tactic to make such manipulations trivial!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span> <span class=\"n\">Filter</span> <span class=\"n\">Nat</span> <span class=\"n\">Set</span> <span class=\"n\">Topology</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span>\n         <span class=\"o\">(</span><span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"n\">Ioo</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)]</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"n\">atTop</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">mul_inv</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"n\">fact₁</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"n\">Ioo</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)]</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"bp\">&gt;</span><span class=\"o\">]</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">refine</span> <span class=\"n\">tendsto_nhdsWithin_iff.mpr</span> <span class=\"o\">⟨</span><span class=\"n\">tendsto_nhdsWithin_of_tendsto_nhds</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_inv_cancel</span> <span class=\"n\">ha.ne.symm</span><span class=\"o\">,</span> <span class=\"n\">sub_self</span><span class=\"o\">]]</span>\n      <span class=\"n\">exact</span> <span class=\"n\">Continuous.tendsto</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">fun_prop</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n    <span class=\"bp\">·</span> <span class=\"n\">filter_upwards</span> <span class=\"o\">[</span><span class=\"n\">eventually_mem_nhdsWithin</span><span class=\"o\">]</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span>\n      <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">mul_inv_cancel</span> <span class=\"n\">ha.ne.symm</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">mul_lt_mul'</span> <span class=\"n\">le_rfl</span> <span class=\"n\">hx.2</span> <span class=\"n\">hx.1.le</span> <span class=\"n\">ha</span>\n  <span class=\"k\">have</span> <span class=\"n\">fact₂</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"n\">Ioo</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)]</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">refine</span> <span class=\"n\">tendsto_nhdsWithin_of_tendsto_nhds</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_inv_cancel</span> <span class=\"n\">ha.ne.symm</span><span class=\"o\">,</span> <span class=\"n\">sub_self</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">]]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Continuous.tendsto</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">fun_prop</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n  <span class=\"n\">exact</span> <span class=\"n\">fact₁.inv_tendsto_zero.atTop_mul</span>\n    <span class=\"o\">(</span><span class=\"n\">inv_pos.mpr</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">mul_pos</span> <span class=\"n\">hb</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">inv_pos.mpr</span> <span class=\"n\">ha</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">fact₂.inv₀</span> <span class=\"o\">(</span><span class=\"n\">mul_pos</span> <span class=\"n\">hb</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">inv_pos.mpr</span> <span class=\"n\">ha</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ne.symm</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 424410289,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1709385142
    },
    {
        "content": "<p>Note that having to talk about <code>𝓝[Ioo 0 (a⁻¹)] a⁻¹</code> in the <em>statement</em> is a bit weird, but it's very useful in the proof. It would probably be more idiomatic to do something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span>\n         <span class=\"o\">(</span><span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"bp\">&lt;</span><span class=\"o\">]</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"n\">atTop</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">mul_inv</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">nhdsWithin_Ioo_eq_nhdsWithin_Iio</span> <span class=\"o\">(</span><span class=\"n\">inv_pos.mpr</span> <span class=\"n\">ha</span><span class=\"o\">)]</span>\n  <span class=\"c1\">-- the rest of the proof is unchanged</span>\n</code></pre></div>",
        "id": 424410410,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1709385268
    }
]