[
    {
        "content": "<p>Hello everyone,<br>\nI am working on a function that will look for the next integer that does not repeat its digits. In this problem I am supposed to stop searching after the number 10000, therefore it always terminates. This is the code now:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">repeats</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"n\">u.length</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.length</span>\n  <span class=\"n\">where</span>\n    <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">x.repr.toList</span>\n    <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">l.eraseDups</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">finder</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;=</span> <span class=\"mi\">10000</span> <span class=\"k\">then</span> <span class=\"mi\">10234</span>\n  <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">repeats</span><span class=\"bp\">?</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"n\">finder</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>But then, I am trying to understand termination proofs. The ones I have so far only proved a Nat is decreasing to 0, but in this case I would like to prove termination by showing it increases in the recursion or halts on the upper bound 10000. (How) can this be made?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">fail</span> <span class=\"n\">to</span> <span class=\"k\">show</span> <span class=\"n\">termination</span> <span class=\"n\">for</span>\n  <span class=\"n\">finder</span>\n<span class=\"k\">with</span> <span class=\"n\">errors</span>\n<span class=\"n\">structural</span> <span class=\"n\">recursion</span> <span class=\"n\">cannot</span> <span class=\"n\">be</span> <span class=\"n\">used</span>\n</code></pre></div>",
        "id": 422241536,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1708352004
    },
    {
        "content": "<p>What about showing that 1000 - x decreases like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">termination_by</span> <span class=\"n\">finder</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1000</span> <span class=\"bp\">-</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 422243383,
        "sender_full_name": "Johannes Tantow",
        "timestamp": 1708352541
    },
    {
        "content": "<p>With this I still get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ailed</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">termination</span><span class=\"o\">,</span> <span class=\"n\">possible</span> <span class=\"n\">solutions</span><span class=\"o\">:</span>\n  <span class=\"bp\">-</span> <span class=\"n\">Use</span> <span class=\"bp\">`</span><span class=\"k\">have</span><span class=\"bp\">`-</span><span class=\"n\">expressions</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">the</span> <span class=\"n\">remaining</span> <span class=\"n\">goals</span>\n  <span class=\"bp\">-</span> <span class=\"n\">Use</span> <span class=\"bp\">`</span><span class=\"n\">termination_by</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">specify</span> <span class=\"n\">a</span> <span class=\"n\">different</span> <span class=\"n\">well</span><span class=\"bp\">-</span><span class=\"n\">founded</span> <span class=\"n\">relation</span>\n  <span class=\"bp\">-</span> <span class=\"n\">Use</span> <span class=\"bp\">`</span><span class=\"n\">decreasing_by</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">specify</span> <span class=\"n\">your</span> <span class=\"n\">own</span> <span class=\"n\">tactic</span> <span class=\"n\">for</span> <span class=\"n\">discharging</span> <span class=\"n\">this</span> <span class=\"n\">kind</span> <span class=\"n\">of</span> <span class=\"n\">goal</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Int</span>\n<span class=\"n\">h</span><span class=\"bp\">✝¹</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">10000</span>\n<span class=\"n\">h</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">repeats</span><span class=\"bp\">?</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">true</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">sizeOf</span> <span class=\"o\">(</span><span class=\"mi\">10000</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sizeOf</span> <span class=\"o\">(</span><span class=\"mi\">10000</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 422249219,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1708354296
    },
    {
        "content": "<p>Yes, you have to prove that the relationship holds, so you have to add a decreasing_by statement below which works like a tactic area, where you prove this.  I think it might be even better to show <code> Int.toNat (1000-x)</code> to escape the sizeOf function. As long as the input to <code>Int.toNat</code> is non-negative, this should always decrease. (which you might have to prove as well)</p>",
        "id": 422250358,
        "sender_full_name": "Johannes Tantow",
        "timestamp": 1708354656
    },
    {
        "content": "<p>I can switch to Nat alltogether if it helps</p>",
        "id": 422250805,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1708354802
    },
    {
        "content": "<p>So something along </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">finder</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;=</span> <span class=\"mi\">10000</span> <span class=\"k\">then</span> <span class=\"mi\">10234</span>\n  <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">repeats</span><span class=\"bp\">?</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"n\">finder</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span> <span class=\"n\">x</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">finder</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Int.toNat</span> <span class=\"o\">(</span><span class=\"mi\">1000</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"n\">decreasing_by</span>\n  <span class=\"n\">simp_wf</span>\n <span class=\"c1\">-- your proof here</span>\n</code></pre></div>",
        "id": 422250945,
        "sender_full_name": "Johannes Tantow",
        "timestamp": 1708354832
    },
    {
        "content": "<p>Interesting! I just finished the proof using this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">finder</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;=</span> <span class=\"mi\">10000</span> <span class=\"k\">then</span> <span class=\"mi\">10234</span>\n  <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">repeats</span><span class=\"bp\">?</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"n\">finder</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span> <span class=\"n\">x</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">finder</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">10000</span> <span class=\"bp\">-</span> <span class=\"n\">x</span>\n<span class=\"n\">decreasing_by</span>\n  <span class=\"n\">simp_wf</span>\n  <span class=\"k\">have</span> <span class=\"n\">hne</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">x</span> <span class=\"bp\">&gt;=</span> <span class=\"mi\">10000</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">assumption</span>\n  <span class=\"k\">have</span> <span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">10000</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.gt_of_not_le</span> <span class=\"n\">hne</span>\n  <span class=\"n\">refine</span> <span class=\"n\">Nat.sub_succ_lt_self</span> <span class=\"mi\">10000</span> <span class=\"n\">x</span> <span class=\"n\">h0</span>\n</code></pre></div>\n<p>I'm happy to hear any further suggestions to this, and thanks for the help!</p>",
        "id": 422279610,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1708362886
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"671510\">Bernardo Borges</span> has marked this topic as resolved.</p>",
        "id": 422280396,
        "sender_full_name": "Notification Bot",
        "timestamp": 1708363222
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"671510\">@Bernardo Borges</span></p>\n<p>I thought I would offer an alternative implementation of <code>finder</code>, one that takes advantage of <code>Nat.find</code> and the decidability of <code>List.Nodup</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">noRepeats</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">List.Nodup</span> <span class=\"o\">(</span><span class=\"n\">Nat.digits</span> <span class=\"mi\">10</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">noRepeats</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">List.nodupDecidable</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">existsNoRepeats</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">10234</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">noRepeats</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"mi\">10234</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">native_decide</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">finder</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">10234</span>\n<span class=\"k\">then</span>\n  <span class=\"n\">Nat.find</span> <span class=\"o\">(</span><span class=\"n\">existsNoRepeats</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n<span class=\"k\">else</span>\n  <span class=\"mi\">10234</span>\n</code></pre></div>\n<p>I'm not saying you should use this... for all I know, the performance could be worse than your version! I just wanted to demonstrate another way of approaching problems of the form \"find the next N with property P\".</p>",
        "id": 422303567,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1708374826
    },
    {
        "content": "<p>Very nice! If you want to test your implementation, you can use the DMOJ judge at this <a href=\"https://dmoj.ca/problem/ccc13s1\">link</a></p>",
        "id": 422312381,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1708380161
    },
    {
        "content": "<p>oh if this is about algorithmic efficiency then my solution is terrible... it's just a brute-force search!</p>",
        "id": 422327734,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1708390907
    }
]