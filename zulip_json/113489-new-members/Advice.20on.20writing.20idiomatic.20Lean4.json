[
    {
        "content": "<p>How close are each of these small programs to idiomatic Lean? One I wrote like I would in C (imperatively), the other functionally. Thanks so much</p>\n<p>Program 1:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- count six-digit numbers whose digits sum to 10</span>\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">count</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">for</span> <span class=\"n\">n</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">100000</span> <span class=\"o\">:</span> <span class=\"mi\">1000000</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">n'</span> <span class=\"o\">:=</span> <span class=\"n\">n</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">sum</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n    <span class=\"n\">while</span> <span class=\"n\">n'</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"k\">do</span>\n      <span class=\"n\">sum</span> <span class=\"o\">:=</span> <span class=\"n\">sum</span> <span class=\"bp\">+</span> <span class=\"n\">n'</span> <span class=\"bp\">%</span> <span class=\"mi\">10</span>\n      <span class=\"k\">if</span> <span class=\"n\">sum</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">10</span> <span class=\"k\">then</span> <span class=\"n\">break</span>\n      <span class=\"n\">n'</span> <span class=\"o\">:=</span> <span class=\"n\">n'</span> <span class=\"bp\">/</span> <span class=\"mi\">10</span>\n    <span class=\"k\">if</span> <span class=\"n\">sum</span> <span class=\"bp\">=</span> <span class=\"mi\">10</span> <span class=\"k\">then</span>\n      <span class=\"n\">count</span> <span class=\"o\">:=</span> <span class=\"n\">count</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">count</span>\n</code></pre></div>\n<p>Program 2:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- [start, stop)</span>\n<span class=\"kd\">def</span> <span class=\"n\">List.range2</span> <span class=\"o\">(</span><span class=\"n\">start</span> <span class=\"n\">stop</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">List.range</span> <span class=\"o\">(</span><span class=\"n\">stop</span> <span class=\"bp\">-</span> <span class=\"n\">start</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">.</span> <span class=\"bp\">+</span> <span class=\"n\">start</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- count six-digit numbers whose digits sum to 10</span>\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">answer</span> <span class=\"o\">:=</span> <span class=\"n\">List.range2</span> <span class=\"o\">(</span><span class=\"n\">Nat.pow</span> <span class=\"mi\">10</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Nat.pow</span> <span class=\"mi\">10</span> <span class=\"mi\">6</span><span class=\"o\">)</span>\n    <span class=\"bp\">|&gt;.</span><span class=\"n\">filter</span> <span class=\"o\">(</span>\n      <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">let</span> <span class=\"n\">digits_sum</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.toDigits</span> <span class=\"mi\">10</span> <span class=\"n\">n</span>\n          <span class=\"bp\">|&gt;.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">Char.toNat</span> <span class=\"bp\">.</span> <span class=\"bp\">-</span> <span class=\"sc\">'0'</span><span class=\"bp\">.</span><span class=\"n\">toNat</span><span class=\"o\">)</span>\n          <span class=\"bp\">|&gt;.</span><span class=\"n\">foldl</span> <span class=\"n\">Nat.add</span> <span class=\"mi\">0</span>\n        <span class=\"n\">digits_sum</span> <span class=\"bp\">=</span> <span class=\"mi\">10</span><span class=\"o\">)</span>\n    <span class=\"bp\">|&gt;.</span><span class=\"n\">length</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">answer</span>\n</code></pre></div>",
        "id": 435797744,
        "sender_full_name": "Will Bradley",
        "timestamp": 1714261011
    },
    {
        "content": "<p>Instead of <code>Nat.pow</code>, it's customary to use <code>^</code>.</p>\n<p>For style, I probably would format the second one like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">answer</span> <span class=\"o\">:=</span>\n    <span class=\"n\">List.range2</span> <span class=\"o\">(</span><span class=\"mi\">10</span> <span class=\"bp\">^</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">10</span> <span class=\"bp\">^</span> <span class=\"mi\">6</span><span class=\"o\">)</span>\n    <span class=\"bp\">|&gt;.</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">let</span> <span class=\"n\">digits</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.toDigits</span> <span class=\"mi\">10</span> <span class=\"n\">n</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">Char.toNat</span> <span class=\"bp\">·</span> <span class=\"bp\">-</span> <span class=\"sc\">'0'</span><span class=\"bp\">.</span><span class=\"n\">toNat</span><span class=\"o\">)</span>\n        <span class=\"n\">digits.foldl</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">10</span><span class=\"o\">)</span>\n    <span class=\"bp\">|&gt;.</span><span class=\"n\">length</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">answer</span>\n</code></pre></div>\n<p>I feel like it's better to name intermediate results rather than using long pipelines. I could have also named <code>digits_sum</code> here, but <code>digits.foldl (· + ·) 0</code> is a clear enough fold.</p>\n<p>That said, it's better to make small helper functions. Mathlib has functions such as <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.digits#doc\">docs#Nat.digits</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.sum#doc\">docs#List.sum</a> already, and you could define these too.</p>",
        "id": 435802850,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714265544
    },
    {
        "content": "<p>Here's how you can avoid turning digits into characters and back:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">answer</span> <span class=\"o\">:=</span> <span class=\"n\">List.range2</span> <span class=\"o\">(</span><span class=\"mi\">10</span> <span class=\"bp\">^</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">10</span> <span class=\"bp\">^</span> <span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">map</span> <span class=\"n\">digitSum</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">=</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">length</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">answer</span>\n<span class=\"n\">where</span>\n  <span class=\"n\">digitSum</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n      <span class=\"mi\">0</span>\n    <span class=\"k\">else</span>\n      <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">digitSum</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">10</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 435803475,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714265793
    },
    {
        "content": "<p>Or rather than filtering and taking the length, there's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.count#doc\">docs#List.count</a> from std:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">answer</span> <span class=\"o\">:=</span> <span class=\"n\">List.range2</span> <span class=\"o\">(</span><span class=\"mi\">10</span> <span class=\"bp\">^</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">10</span> <span class=\"bp\">^</span> <span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">map</span> <span class=\"n\">digitSum</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">count</span> <span class=\"mi\">10</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">answer</span>\n<span class=\"n\">where</span>\n  <span class=\"n\">digitSum</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n      <span class=\"mi\">0</span>\n    <span class=\"k\">else</span>\n      <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">digitSum</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">10</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 435803581,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714265879
    },
    {
        "content": "<p>Though you could make <code>digitSum</code> be tail recursive by having it accumulate:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">digitSum</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">acc</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n      <span class=\"n\">acc</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">digitSum</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">acc</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">10</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 435803867,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714266155
    }
]