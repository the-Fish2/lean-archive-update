[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Paradox</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">True</span>\n<span class=\"bp\">|</span> <span class=\"n\">False</span>\n<span class=\"bp\">|</span> <span class=\"n\">Paradox</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Paradox.not</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Paradox</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Paradox</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">p</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Paradox.Paradox</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Paradox.Paradox</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Paradox.False</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Paradox.True</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Paradox.True</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Paradox.False</span>\n</code></pre></div>\n<p>gives an error and trying to rename <code>Paradox.Paradox</code> to something else changed the inductive type and not just the constructor</p>",
        "id": 412389715,
        "sender_full_name": "Alok Singh",
        "timestamp": 1704993988
    },
    {
        "content": "<p>speaking of rename issues, trying to rename the type Paradox</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Paradox</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">True</span>\n<span class=\"bp\">|</span> <span class=\"n\">False</span>\n<span class=\"bp\">|</span> <span class=\"n\">Antimony</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Paradox.not</span><span class=\"o\">:</span> <span class=\"n\">Paradox</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Paradox</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">Antimony</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">False</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">False</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">True</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">True</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">False</span>\n</code></pre></div>\n<p>does not rename <code>Paradox.not</code></p>",
        "id": 412391006,
        "sender_full_name": "Alok Singh",
        "timestamp": 1704994493
    },
    {
        "content": "<p>When you write <code>Paradox.not</code> that opens the <code>Paradox</code> namespace. Here's a fix:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Paradox</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">True</span>\n<span class=\"bp\">|</span> <span class=\"n\">False</span>\n<span class=\"bp\">|</span> <span class=\"n\">Paradox</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Paradox.not</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">_root_.Paradox</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">_root_.Paradox</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">p</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Paradox.Paradox</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Paradox.Paradox</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Paradox.False</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Paradox.True</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Paradox.True</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Paradox.False</span>\n</code></pre></div>",
        "id": 412391309,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1704994616
    },
    {
        "content": "<p>Or even better: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Paradox</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"n\">paradox</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Paradox.not</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Paradox</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Paradox</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">p</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">paradox</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">paradox</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">true</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">false</span>\n</code></pre></div>",
        "id": 412391455,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1704994678
    },
    {
        "content": "<p>Ah, didn't know it opened it, thought makes sense. Thanks =)</p>",
        "id": 412392595,
        "sender_full_name": "Alok Singh",
        "timestamp": 1704995111
    },
    {
        "content": "<p>It's really useful as well as being a footgun.</p>",
        "id": 412406911,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705001129
    }
]