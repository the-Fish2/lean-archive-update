[
    {
        "content": "<p>Hi, I am trying to write in Lean a statement like the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"k\">#eval</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"n\">i</span>\n</code></pre></div>\n<p>While this doesn't throw any errors, the #eval line outputs 2, not 10.  I am not sure how to interpret this - is i : Fin 4 a single element drawn from Fin 4? For this reason I am not sure if I can reason about the goal to prove correctly. Also, in the proof of the example I can write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"mi\">3</span>\n</code></pre></div>\n<p>which returns the message \"failed to synthesize instance OfNat (Fin n) 3\". I also tried replacing Fin with Finset.range , in which case the evaluation of the sum </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">Finset.range</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"n\">i</span>\n</code></pre></div>\n<p>returns 10, the correct value, but </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Finset.range</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">Finset.range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>complains that \"application type mismatch f i argument i has type \\N : Type but is expected to have type { x // x ∈ range n } : Type. Does anyone know what the correct way to do this is? It's not just about computing the sum but also indexing a finite set of elements, in this case annotated via f.</p>",
        "id": 425703448,
        "sender_full_name": "George Tsoukalas",
        "timestamp": 1710004399
    },
    {
        "content": "<p>The inhabitants of <code>Fin n</code> are not just the integers from <code>0</code> to <code>n-1</code>, they are couples formed by an integers <code>i</code> and a proof that <code>i</code> is less than <code>n</code>.<br>\nSo for example, you'll get the correct sum if you write:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"n\">i.1</span>\n</code></pre></div>",
        "id": 425704195,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1710005007
    },
    {
        "content": "<p>In your second example, you cannot apply <code>f</code> to <code>3</code> because <code>3</code> is not of type <code>Fin n</code>, it is of type <code>Nat</code>.</p>",
        "id": 425704276,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1710005068
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.pos_iff_ne_zero</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Finset.sum_pos</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">Nat.pos_iff_ne_zero.mpr</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">k</span><span class=\"o\">))</span>\n  <span class=\"c1\">-- Here to conclude we need `Fin n` to be nonempty, hence `n` to be positive.</span>\n</code></pre></div>",
        "id": 425704582,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1710005299
    },
    {
        "content": "<p>Another spelling you can use is <code>#eval ∑ i : Fin 5, (i : ℕ)</code></p>",
        "id": 425704605,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710005335
    },
    {
        "content": "<p>To finish the example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">BigOperators</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.pos_iff_ne_zero</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Finset.sum_pos</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">Nat.pos_iff_ne_zero.mpr</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">k</span><span class=\"o\">))</span>\n  <span class=\"n\">existsi</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 425704647,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1710005393
    },
    {
        "content": "<p>The last line proves that <code>Finset.univ</code> of <code>Fin n</code> is nonempty by providing an element. Note how I had to write the element as a couple with entries <code>0</code> and the proof that <code>0 &lt; n</code>.</p>",
        "id": 425704728,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1710005433
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"318709\">Sophie Morel</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20use.20Fin.20n.3F/near/425704582\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.pos_iff_ne_zero</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Finset.sum_pos</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">Nat.pos_iff_ne_zero.mpr</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">k</span><span class=\"o\">))</span>\n  <span class=\"c1\">-- Here to conclude we need `Fin n` to be nonempty, hence `n` to be positive.</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Makes sense. Is it generally most natural to use Fin for these kinds of formalizations?</p>",
        "id": 425705863,
        "sender_full_name": "George Tsoukalas",
        "timestamp": 1710006332
    },
    {
        "content": "<p>I'm not sure I'm an expert, but I would say that it depends a lot on the context anyway (like where your function <code>f</code> comes from, and how you will use the positivity of the sum).</p>",
        "id": 425706010,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1710006458
    },
    {
        "content": "<p>By the way, you got the unexpected <code>#eval</code> results because <code>Fin n</code> also has an addition, but it's addition mod <code>n</code>.  That is what your <code>#eval</code> lines were calculating.</p>",
        "id": 425706125,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1710006540
    },
    {
        "content": "<p>Usually it's better to have <code>f : ℕ → something</code>, <code>h : ∀ k &lt; n, something_else (f k)</code> and <code>∑ k in Finset.range n, f k</code></p>",
        "id": 425706465,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710006793
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"318709\">Sophie Morel</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20use.20Fin.20n.3F/near/425706125\">said</a>:</p>\n<blockquote>\n<p>By the way, you got the unexpected <code>#eval</code> results because <code>Fin n</code> also has an addition, but it's addition mod <code>n</code>.  That is what your <code>#eval</code> lines were calculating.</p>\n</blockquote>\n<p>Ah, that makes a lot of sense! Thank you!</p>",
        "id": 425706576,
        "sender_full_name": "George Tsoukalas",
        "timestamp": 1710006874
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20use.20Fin.20n.3F/near/425706465\">said</a>:</p>\n<blockquote>\n<p>Usually it's better to have <code>f : ℕ → something</code>, <code>h : ∀ k &lt; n, something_else (f k)</code> and <code>∑ k in Finset.range n, f k</code></p>\n</blockquote>\n<p>I was concerned about doing something like this because I am not sure how automation like aesop or duper might handle working in a \"larger\" space if they are converting the statement to something an SMT solver can digest. Do you happen to know if that a reasonable concern?</p>",
        "id": 425706729,
        "sender_full_name": "George Tsoukalas",
        "timestamp": 1710007003
    },
    {
        "content": "<p>aesop currently is rubbish at handling quantifiers (universal quantifiers in hypotheses and existential quantifiers in the goal), so I don't think that's much of a concern</p>",
        "id": 425706974,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1710007204
    }
]