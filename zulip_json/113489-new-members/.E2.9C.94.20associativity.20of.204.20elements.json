[
    {
        "content": "<p>how does one show?<br>\na + b + c + d = ((a + (b + c)) +d)<br>\nThe obvious thing I tried was<br>\nrw [add_assoc a] <br>\nWhich didn't work. Why does this not work? </p>\n<p>The particular problem I am having is <br>\n<a href=\"/user_uploads/3121/opaaTiVRnJyk5d-3J-4J-sZf/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/opaaTiVRnJyk5d-3J-4J-sZf/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/opaaTiVRnJyk5d-3J-4J-sZf/image.png\"></a></div>",
        "id": 418448752,
        "sender_full_name": "Baran Zadeoglu",
        "timestamp": 1706391966
    },
    {
        "content": "<p>Has <code>simp</code> already been taught at this point?</p>",
        "id": 418450415,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1706393853
    },
    {
        "content": "<p>not yet. I solved the problem with another method but still want to know why this doesn't work.</p>",
        "id": 418450623,
        "sender_full_name": "Baran Zadeoglu",
        "timestamp": 1706394054
    },
    {
        "content": "<p>If you <code>rw [Nat.add_assoc a]</code> it works right?</p>",
        "id": 418451323,
        "sender_full_name": "Julian Berman",
        "timestamp": 1706394780
    },
    {
        "content": "<p>When you write <code>add_assoc a*d</code>, the syntax should be <code>add_assoc (a*d)</code>. This explains the odd error message you see.</p>",
        "id": 418451333,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1706394784
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"bp\">+</span><span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_assoc</span> <span class=\"n\">a</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>or from your screenshot:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">succ</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">succ</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">succ</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_assoc</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">d</span><span class=\"o\">)]</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 418451344,
        "sender_full_name": "Julian Berman",
        "timestamp": 1706394796
    },
    {
        "content": "<p>Thank you both!</p>",
        "id": 418451368,
        "sender_full_name": "Baran Zadeoglu",
        "timestamp": 1706394825
    },
    {
        "content": "<p>I will mark it closed in a minute.</p>",
        "id": 418451430,
        "sender_full_name": "Baran Zadeoglu",
        "timestamp": 1706394867
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"677650\">Baran Zadeoglu</span> has marked this topic as resolved.</p>",
        "id": 418451763,
        "sender_full_name": "Notification Bot",
        "timestamp": 1706395213
    },
    {
        "content": "<p>This is becoming a common gotcha. I should somehow hammer it home that functions are greedy.</p>",
        "id": 418485912,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706432824
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  I tried Mathematics in lean first, then being somewhat stuck I tried natural numbers game. I got the impression that I am having these basic issues because both tutorials are trying to pospone some of the cumbersome work such as proper syntax and variables. I had other moments where I knew I was done if I could apply a certain result in a certain way but had to spend fair bit of time figuring out how to do so.</p>",
        "id": 418508958,
        "sender_full_name": "Baran Zadeoglu",
        "timestamp": 1706453784
    },
    {
        "content": "<p>if you prefer a syntax first approach, you might find <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/\">#tpil</a> better suited</p>",
        "id": 418513462,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706457333
    },
    {
        "content": "<p>it's very different from NNG though, it teaches a nearly disjoint subset of lean</p>",
        "id": 418513532,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1706457386
    },
    {
        "content": "<p>Not really. I was just speculating perhaps these approaches are better with slightly less omissions.</p>",
        "id": 418514587,
        "sender_full_name": "Baran Zadeoglu",
        "timestamp": 1706458304
    },
    {
        "content": "<p>It's difficult to teach Lean because it has a very steep learning curve. You can think of my primary objective with the game as teaching people enough to be able to do Power World, which only involves three tactics and is short and hopefully fun. But even there there are traps for the unwary. It's difficult to keep feeding important information to people, the game is already hard enough. Probably I should add some good examples in the <code>rw</code> tactic?</p>",
        "id": 418519314,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706462144
    },
    {
        "content": "<p>The confusion in my part was that <code>rw</code> does not understand a variable in the form <code>a*b</code>and one rather needs <code>(a*b)</code>.  It is one of those small syntax things. Perhaps it could be added to the documentation of  <code>rw</code> in the natural number game under the subtitle \"Targetted usage\".</p>",
        "id": 418523259,
        "sender_full_name": "Baran Zadeoglu",
        "timestamp": 1706465576
    },
    {
        "content": "<p><code>rw</code> is greedier than<code>*</code> because of BIDMAS.</p>",
        "id": 418523649,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706465954
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"677650\">@Baran Zadeoglu</span> if you have specific issues about <a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">#mil</a> then I'd be happy to try to fix them. You can either list them here or create GitHub issues.</p>",
        "id": 418676274,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1706546133
    },
    {
        "content": "<p>well, I have had some confusions. I will sure to make a note of them from now on. I decided to stop <a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">#mil</a> and do the natural number game first. My experince was frequent frustrations to impliment some line of thought I had. Some problems I would need to try a few different lines of thought just to find something I can make work. I am sorry, it is a little vague. I will try to take notes after I return to <a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">#mil</a>.<br>\nAlso, if you would like, I can tag you in the problems I post here when switch back to mil. Might be give an educational insight?</p>",
        "id": 418678066,
        "sender_full_name": "Baran Zadeoglu",
        "timestamp": 1706546730
    },
    {
        "content": "<p>This was one of the things I tried and failed whilst doing <a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">#mil</a> .<br>\n<a href=\"#narrow/stream/113489-new-members/topic/How.20can.20I.20direct.20apply.20to.20use.20my.20variables.3F\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/How.20can.20I.20direct.20apply.20to.20use.20my.20variables.3F</a></p>",
        "id": 418678231,
        "sender_full_name": "Baran Zadeoglu",
        "timestamp": 1706546772
    },
    {
        "content": "<p>Yes, this is interesting.</p>",
        "id": 418678404,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1706546852
    },
    {
        "content": "<p>The example you are citing is clearly a mathematical problem, not a Lean syntax problem.</p>",
        "id": 418678497,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1706546883
    },
    {
        "content": "<p>I mean in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">aux</span> <span class=\"o\">:</span> <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">add_le_add_right</span>\n    <span class=\"n\">apply</span> <span class=\"n\">min_le_left</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_min</span>\n  <span class=\"bp\">·</span><span class=\"n\">apply</span> <span class=\"n\">h</span>\n  <span class=\"bp\">·</span><span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">min_comm</span><span class=\"o\">]</span>\n   <span class=\"n\">apply</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>The issue is that <code>h</code> misses quantifiers to be useful for what you had in mind.</p>",
        "id": 418678641,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1706546920
    },
    {
        "content": "<p>Right. I think I was having some problems with using proper syntax with quantifiers in section 2 of <a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">#mil</a>. I suppose they are introduced rigorously in section 3 and I wasn't doing a good job of mimicing the examples.</p>",
        "id": 418681597,
        "sender_full_name": "Baran Zadeoglu",
        "timestamp": 1706547817
    }
]