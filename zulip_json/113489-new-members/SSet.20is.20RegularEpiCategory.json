[
    {
        "content": "<p>I am trying to prove <code>instance : RegularEpiCategory SSet</code>, but somehow I got lost, my code so far is</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Tactic</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">AlgebraicTopology</span><span class=\"bp\">.</span><span class=\"n\">SimplicialSet</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">CategoryTheory</span><span class=\"bp\">.</span><span class=\"n\">Adjunction</span><span class=\"bp\">.</span><span class=\"n\">Evaluation</span>\n\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">CategoryTheory</span>\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Limits</span>\n\n<span class=\"kn\">noncomputable</span><span class=\"w\"> </span><span class=\"kn\">section</span>\n\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">RegularEpiCategory</span><span class=\"w\"> </span><span class=\"n\">SSet</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"n\">refine</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">regularEpiOfEpi</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">?_</span><span class=\"w\"> </span><span class=\"o\">}</span>\n<span class=\"w\">  </span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">epi_f</span>\n<span class=\"w\">  </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">NatTrans</span><span class=\"bp\">.</span><span class=\"n\">epi_iff_epi_app</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">at</span><span class=\"w\"> </span><span class=\"n\">epi_f</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">helper</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">SimplexCategory</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">RegularEpi</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">app</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">    </span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">c</span>\n<span class=\"w\">    </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">regularEpiOfEpi</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">app</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"n\">done</span>\n<span class=\"w\">  </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">regularEpiOfKernelPair</span>\n<span class=\"w\">  </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">evaluationJointlyReflectsColimits</span>\n<span class=\"w\">  </span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">c</span>\n<span class=\"w\">  </span><span class=\"n\">specialize</span><span class=\"w\"> </span><span class=\"n\">helper</span><span class=\"w\"> </span><span class=\"n\">c</span>\n<span class=\"w\">  </span><span class=\"n\">refine</span><span class=\"w\"> </span><span class=\"n\">IsColimit</span><span class=\"bp\">.</span><span class=\"n\">equivOfNatIsoOfIso</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"n\">helper</span><span class=\"bp\">.</span><span class=\"n\">isColimit</span>\n<span class=\"w\">  </span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"n\">refine</span><span class=\"w\"> </span><span class=\"n\">parallelPair</span><span class=\"bp\">.</span><span class=\"n\">ext</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">α</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">α</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">α</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">α</span><span class=\"bp\">.</span><span class=\"n\">right</span>\n<span class=\"w\">    </span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">parallelPair_obj_zero</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Functor</span><span class=\"bp\">.</span><span class=\"n\">comp_obj</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">evaluation_obj_obj</span><span class=\"o\">]</span>\n<span class=\"w\">      </span><span class=\"gr\">sorry</span>\n<span class=\"w\">    </span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">parallelPair_obj_one</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Functor</span><span class=\"bp\">.</span><span class=\"n\">comp_obj</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">evaluation_obj_obj</span><span class=\"o\">]</span>\n<span class=\"w\">      </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">Iso</span><span class=\"bp\">.</span><span class=\"n\">refl</span><span class=\"w\"> </span><span class=\"bp\">_</span>\n<span class=\"w\">    </span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">parallelPair_obj_zero</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Functor</span><span class=\"bp\">.</span><span class=\"n\">comp_obj</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">parallelPair_obj_one</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">evaluation_obj_obj</span><span class=\"o\">,</span>\n<span class=\"w\">      </span><span class=\"n\">parallelPair_map_left</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">id_eq</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Iso</span><span class=\"bp\">.</span><span class=\"n\">refl_hom</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Category</span><span class=\"bp\">.</span><span class=\"n\">comp_id</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Cofork</span><span class=\"bp\">.</span><span class=\"n\">ofπ_pt</span><span class=\"o\">,</span>\n<span class=\"w\">      </span><span class=\"n\">Functor</span><span class=\"bp\">.</span><span class=\"n\">const_obj_obj</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Cofork</span><span class=\"bp\">.</span><span class=\"n\">π_ofπ</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Iso</span><span class=\"bp\">.</span><span class=\"n\">trans_hom</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Iso</span><span class=\"bp\">.</span><span class=\"n\">symm_hom</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Functor</span><span class=\"bp\">.</span><span class=\"n\">comp_map</span><span class=\"o\">,</span>\n<span class=\"w\">      </span><span class=\"n\">evaluation_obj_map</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Category</span><span class=\"bp\">.</span><span class=\"n\">assoc</span><span class=\"o\">]</span>\n<span class=\"w\">      </span><span class=\"gr\">sorry</span>\n<span class=\"w\">    </span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">parallelPair_obj_zero</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Functor</span><span class=\"bp\">.</span><span class=\"n\">comp_obj</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">parallelPair_obj_one</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">evaluation_obj_obj</span><span class=\"o\">,</span>\n<span class=\"w\">      </span><span class=\"n\">parallelPair_map_right</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">id_eq</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Iso</span><span class=\"bp\">.</span><span class=\"n\">refl_hom</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Category</span><span class=\"bp\">.</span><span class=\"n\">comp_id</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Cofork</span><span class=\"bp\">.</span><span class=\"n\">ofπ_pt</span><span class=\"o\">,</span>\n<span class=\"w\">      </span><span class=\"n\">Functor</span><span class=\"bp\">.</span><span class=\"n\">const_obj_obj</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Cofork</span><span class=\"bp\">.</span><span class=\"n\">π_ofπ</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Iso</span><span class=\"bp\">.</span><span class=\"n\">trans_hom</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Iso</span><span class=\"bp\">.</span><span class=\"n\">symm_hom</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Functor</span><span class=\"bp\">.</span><span class=\"n\">comp_map</span><span class=\"o\">,</span>\n<span class=\"w\">      </span><span class=\"n\">evaluation_obj_map</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Category</span><span class=\"bp\">.</span><span class=\"n\">assoc</span><span class=\"o\">]</span>\n<span class=\"w\">      </span><span class=\"gr\">sorry</span>\n<span class=\"w\">  </span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"w\">  </span><span class=\"n\">done</span>\n</code></pre></div>\n<p>In my naive understanding it should be trivial, am I missing something  obvious here?</p>",
        "id": 440834921,
        "sender_full_name": "Fedor Pavutnitskiy",
        "timestamp": 1716809556
    },
    {
        "content": "<p>Can you add any <code>import</code>s and <code>open</code>s to make this a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> and thus make it easier for people to answer your question?</p>",
        "id": 440838806,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716810979
    },
    {
        "content": "<p>I guess you want to use the fact that the kernel pair diagram of a regular epi is a coequaliser diagram. This doesn't seem to be stated explicitly, but it can be extracted from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.regularEpiOfEffectiveEpi#doc\">docs#CategoryTheory.regularEpiOfEffectiveEpi</a></p>",
        "id": 440842168,
        "sender_full_name": "Dagur Asgeirsson",
        "timestamp": 1716812199
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/SSet.20is.20RegularEpiCategory/near/440838806\">said</a>:</p>\n<blockquote>\n<p>Can you add any <code>import</code>s and <code>open</code>s to make this a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> and thus make it easier for people to answer your question?</p>\n</blockquote>\n<p>you are absolutely right, it slipped my mind. I added the imports.</p>",
        "id": 440968114,
        "sender_full_name": "Fedor Pavutnitskiy",
        "timestamp": 1716875308
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"519559\">Dagur Asgeirsson</span> <a href=\"#narrow/stream/113489-new-members/topic/SSet.20is.20RegularEpiCategory/near/440842168\">said</a>:</p>\n<blockquote>\n<p>I guess you want to use the fact that the kernel pair diagram of a regular epi is a coequaliser diagram. This doesn't seem to be stated explicitly, but it can be extracted from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.regularEpiOfEffectiveEpi#doc\">docs#CategoryTheory.regularEpiOfEffectiveEpi</a></p>\n</blockquote>\n<p>I have checked EffectiveEpi, but on the first glance did not find what I was looking for. I will meditate some more on it. In my understanding the problem is that we need to show that the choices of <code>RegularEpi.W</code> can be made functorial. So even if we have a statement like <code>def coeq_pull {W X : Type} {l r : W ⟶ X} {c : Cofork l r} (h : IsColimit c) : W ≅ pullback (c.π) (c.π) := sorry</code>, we need to show the naturality of this isomorphism.</p>",
        "id": 440968477,
        "sender_full_name": "Fedor Pavutnitskiy",
        "timestamp": 1716875629
    },
    {
        "content": "<p>Would it be easier to first use the construction of a constituent of <code>Category SSet</code>? Just skip this if it's of no use.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"w\">  </span><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">horn_filling_condition</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">SSet</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"kt\">Prop</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">    </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Λ</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">⟶</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"bp\">∃</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Δ</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">⟶</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"w\">    </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">SSet</span><span class=\"bp\">.</span><span class=\"n\">hornInclusion</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"bp\">≫</span><span class=\"w\"> </span><span class=\"n\">g</span>\n\n<span class=\"w\">  </span><span class=\"c1\">-- def inner_horn_filling_condition (X : SSet) : Prop :=</span>\n<span class=\"w\">  </span><span class=\"c1\">--   ∀ (n i : Nat), n ≥ 2 ∧ 0 &lt; i ∧ i &lt; n →</span>\n<span class=\"w\">  </span><span class=\"c1\">--   ∀ f : Λ[n, i] ⟶ X, ∃ g : Δ[n] ⟶ X,</span>\n<span class=\"w\">  </span><span class=\"c1\">--   f = SSet.hornInclusion n i ≫ g</span>\n\n<span class=\"w\">  </span><span class=\"sd\">/-- A simplicial set is called an ∞-category if it has the extension property</span>\n<span class=\"sd\">  for all inner horn inclusions `Λ[n, i] ⟶ Δ[n]`, n ≥ 2, 0 &lt; i &lt; n. -/</span>\n<span class=\"w\">  </span><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">InfCategory</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">SSet</span><span class=\"w\"> </span><span class=\"bp\">//</span>\n<span class=\"w\">    </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">≥</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">∧</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"bp\">∧</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"bp\">&lt;</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">horn_filling_condition</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">}</span>\n\n<span class=\"w\">  </span><span class=\"sd\">/-- A Kan complex is a simplicial set X which has the extension property</span>\n<span class=\"sd\">  for horn inclusions `Λ[n, i] ⟶ Δ[n]` for 0 ≤ i ≤ n. -/</span>\n<span class=\"w\">  </span><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">KanComplex</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">SSet</span><span class=\"w\"> </span><span class=\"bp\">//</span>\n<span class=\"w\">    </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"bp\">∧</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">horn_filling_condition</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">}</span>\n\n<span class=\"w\">  </span><span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">inferInstance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Category</span><span class=\"w\"> </span><span class=\"n\">SSet</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"c1\">-- #check (inferInstance : Category InfCategory)</span>\n<span class=\"w\">  </span><span class=\"c1\">-- instance : Category InfCategory := inferInstance -- ?</span>\n<span class=\"w\">  </span><span class=\"c1\">-- instance : Category InfCategory := by -- ?</span>\n<span class=\"w\">  </span><span class=\"c1\">--   dsimp only [InfCategory]</span>\n<span class=\"w\">  </span><span class=\"c1\">--   infer_instance</span>\n<span class=\"w\">  </span><span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Category</span><span class=\"w\"> </span><span class=\"n\">InfCategory</span><span class=\"w\"> </span><span class=\"kn\">where</span><span class=\"w\"> </span><span class=\"c1\">-- reference: https://leanprover-community.github.io/mathlib4_docs/Mathlib/CategoryTheory/Functor/Category.html</span>\n<span class=\"w\">    </span><span class=\"n\">Hom</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">NatTrans</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"bp\">.</span><span class=\"m\">1</span>\n<span class=\"w\">    </span><span class=\"n\">id</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">NatTrans</span><span class=\"bp\">.</span><span class=\"n\">id</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"m\">1</span>\n<span class=\"w\">    </span><span class=\"n\">comp</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">β</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">NatTrans</span><span class=\"bp\">.</span><span class=\"n\">vcomp</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">β</span>\n<span class=\"w\">  </span><span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Category</span><span class=\"w\"> </span><span class=\"n\">KanComplex</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">    </span><span class=\"n\">Hom</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">NatTrans</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"bp\">.</span><span class=\"m\">1</span>\n<span class=\"w\">    </span><span class=\"n\">id</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">NatTrans</span><span class=\"bp\">.</span><span class=\"n\">id</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"m\">1</span>\n<span class=\"w\">    </span><span class=\"n\">comp</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">β</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">NatTrans</span><span class=\"bp\">.</span><span class=\"n\">vcomp</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">β</span>\n<span class=\"w\">  </span><span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">inferInstance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Category</span><span class=\"w\"> </span><span class=\"n\">InfCategory</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">inferInstance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Category</span><span class=\"w\"> </span><span class=\"n\">KanComplex</span><span class=\"o\">)</span>\n\n<span class=\"kn\">end</span><span class=\"w\"> </span><span class=\"n\">InfCategory</span>\n</code></pre></div>",
        "id": 440971528,
        "sender_full_name": "E. Dean Young",
        "timestamp": 1716877594
    },
    {
        "content": "<p>At first glance, the result should not depend on the simplex category at all: this should hold for any category of functors to <code>Type*</code>.</p>",
        "id": 440976282,
        "sender_full_name": "Joël Riou",
        "timestamp": 1716880039
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"559197\">Dean Young</span> <a href=\"#narrow/stream/113489-new-members/topic/SSet.20is.20RegularEpiCategory/near/440971528\">said</a>:</p>\n<blockquote>\n<p>constituent</p>\n</blockquote>\n<p>interesting that you mentioned the Kan condition. This is precisely my application in mind: I am translating our old project with Diana Kalinichenko on the formalization  of the Moore's lemma from Lean 3 to Lean 4. Coequalizer description of the horn is the last missing piece and the fact that every epi is regular in <code>SSet</code> is a crucial part. But I can not see immediately how swtiching to infinity categories will help.</p>",
        "id": 440976502,
        "sender_full_name": "Fedor Pavutnitskiy",
        "timestamp": 1716880144
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"459699\">Joël Riou</span> <a href=\"#narrow/stream/113489-new-members/topic/SSet.20is.20RegularEpiCategory/near/440976282\">said</a>:</p>\n<blockquote>\n<p>At first glance, the result should not depend on the simplex category at all: this should hold for any category of functors to <code>Type*</code>.</p>\n</blockquote>\n<p>of course. I kept SSet just for simplicity. It will be nice to have a general statement in mathlib of course.</p>",
        "id": 440976588,
        "sender_full_name": "Fedor Pavutnitskiy",
        "timestamp": 1716880186
    },
    {
        "content": "<p>I would start the proof like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib.CategoryTheory.Limits.Shapes.RegularMono</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib.CategoryTheory.Limits.FunctorToTypes</span>\n\n<span class=\"kd\">universe</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">u</span>\n\n<span class=\"kn\">namespace</span><span class=\"w\"> </span><span class=\"n\">CategoryTheory</span>\n\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Limits</span>\n\n<span class=\"kd\">variable</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"o\">{</span><span class=\"n\">F</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"bp\">⥤</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"w\"> </span><span class=\"bp\">⟶</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span><span class=\"w\"> </span><span class=\"kd\">instance</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Epi</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">RegularEpi</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">where</span>\n<span class=\"w\">  </span><span class=\"n\">W</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">pullback</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">f</span>\n<span class=\"w\">  </span><span class=\"n\">left</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">pullback.fst</span>\n<span class=\"w\">  </span><span class=\"n\">right</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">pullback.snd</span>\n<span class=\"w\">  </span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">pullback.condition</span>\n<span class=\"w\">  </span><span class=\"n\">isColimit</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">evaluationJointlyReflectsColimits</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"kd\">by</span>\n<span class=\"w\">    </span><span class=\"gr\">sorry</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span><span class=\"w\"> </span><span class=\"kd\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">RegularEpiCategory</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"bp\">⥤</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">where</span>\n<span class=\"w\">  </span><span class=\"n\">regularEpiOfEpi</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">inferInstance</span>\n\n<span class=\"kd\">end</span><span class=\"w\"> </span><span class=\"n\">CategoryTheory</span>\n</code></pre></div>",
        "id": 440978869,
        "sender_full_name": "Joël Riou",
        "timestamp": 1716881075
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"459699\">Joël Riou</span> <a href=\"#narrow/stream/113489-new-members/topic/SSet.20is.20RegularEpiCategory/near/440978869\">said</a>:</p>\n<blockquote>\n<p>I would start the proof like this:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib.CategoryTheory.Limits.Shapes.RegularMono</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib.CategoryTheory.Limits.FunctorToTypes</span>\n\n<span class=\"kd\">universe</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">u</span>\n\n<span class=\"kn\">namespace</span><span class=\"w\"> </span><span class=\"n\">CategoryTheory</span>\n\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Limits</span>\n\n<span class=\"kd\">variable</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"o\">{</span><span class=\"n\">F</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"bp\">⥤</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"w\"> </span><span class=\"bp\">⟶</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span><span class=\"w\"> </span><span class=\"kd\">instance</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Epi</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">RegularEpi</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">where</span>\n<span class=\"w\">  </span><span class=\"n\">W</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">pullback</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">f</span>\n<span class=\"w\">  </span><span class=\"n\">left</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">pullback.fst</span>\n<span class=\"w\">  </span><span class=\"n\">right</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">pullback.snd</span>\n<span class=\"w\">  </span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">pullback.condition</span>\n<span class=\"w\">  </span><span class=\"n\">isColimit</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">evaluationJointlyReflectsColimits</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"kd\">by</span>\n<span class=\"w\">    </span><span class=\"gr\">sorry</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span><span class=\"w\"> </span><span class=\"kd\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">RegularEpiCategory</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"bp\">⥤</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">where</span>\n<span class=\"w\">  </span><span class=\"n\">regularEpiOfEpi</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">inferInstance</span>\n\n<span class=\"kd\">end</span><span class=\"w\"> </span><span class=\"n\">CategoryTheory</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Yep. It more or less equivalent to my code specialized to <code>SSet</code> (modulo using <code>regularEpiOfKernelPair</code> instead of expicit <code>RegularEpi</code> structure). My trouble is to show an equivalence of <code>IsColimit</code> goal in your code to <code>RegularEpiCategory.regularEpiOfEpi (f.app X)</code>, which we have from the fact that our functors land in <code>Type w</code>. I used <code>IsColimit.equivOfNatIsoOfIso</code> for that, but perhaps there is a better way?</p>",
        "id": 440987661,
        "sender_full_name": "Fedor Pavutnitskiy",
        "timestamp": 1716884319
    },
    {
        "content": "<p>I think the best way to start is</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">CategoryTheory</span><span class=\"w\"> </span><span class=\"n\">CategoryTheory</span><span class=\"bp\">.</span><span class=\"n\">Limits</span>\n<span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Category</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Category</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"bp\">⟶</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">HasPullback</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">]</span>\n<span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">F</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"bp\">⥤</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"w\"> </span><span class=\"bp\">⟶</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">effectiveEpi_of_effectiveEpi_app</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">EffectiveEpi</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"bp\">.</span><span class=\"n\">app</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">)]</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"n\">EffectiveEpi</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">HasLimit</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"n\">cospan</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">flip</span><span class=\"bp\">.</span><span class=\"n\">obj</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">    </span><span class=\"bp\">@</span><span class=\"n\">hasLimitOfIso</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">dsimp</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">infer_instance</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">diagramIsoCospan</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Limits</span><span class=\"bp\">.</span><span class=\"n\">HasPullback</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Limits</span><span class=\"bp\">.</span><span class=\"n\">HasLimit</span><span class=\"bp\">.</span><span class=\"n\">mk</span>\n<span class=\"w\">      </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">cone</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">combineCones</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">getLimitCone</span><span class=\"w\"> </span><span class=\"bp\">_</span>\n<span class=\"w\">        </span><span class=\"n\">isLimit</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">combinedIsLimit</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">}</span>\n<span class=\"w\">  </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">effectiveEpiOfKernelPair</span>\n<span class=\"w\">  </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">Limits</span><span class=\"bp\">.</span><span class=\"n\">evaluationJointlyReflectsColimits</span>\n<span class=\"w\">  </span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">X</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">parallelPair</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">pullback</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">pullback</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"w\"> </span><span class=\"n\">pullback</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"w\"> </span><span class=\"bp\">⋙</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">evaluation</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"bp\">≅</span>\n<span class=\"w\">      </span><span class=\"n\">parallelPair</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">pullback</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"bp\">.</span><span class=\"n\">app</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"bp\">.</span><span class=\"n\">app</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"n\">pullback</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"w\"> </span><span class=\"n\">pullback</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"w\">  </span><span class=\"n\">refine</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">IsColimit</span><span class=\"bp\">.</span><span class=\"n\">precomposeHomEquiv</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">?_</span>\n<span class=\"w\">  </span><span class=\"n\">refine</span><span class=\"w\"> </span><span class=\"n\">IsColimit</span><span class=\"bp\">.</span><span class=\"n\">ofIsoColimit</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">CategoryTheory</span><span class=\"bp\">.</span><span class=\"n\">RegularEpi</span><span class=\"bp\">.</span><span class=\"n\">isColimit</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"bp\">.</span><span class=\"n\">app</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"bp\">?_</span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 440988908,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1716884779
    },
    {
        "content": "<p>I feel it would be convenient to generalize the definition <code>regularEpiOfEffectiveEpi</code> so that we may apply it to any limit pullback cone (rather than the chosen one). It would facilitate the study of the behaviour of these notions with functors which commute to certain limits/colimits.</p>",
        "id": 440998304,
        "sender_full_name": "Joël Riou",
        "timestamp": 1716888034
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"439483\">Andrew Yang</span> <a href=\"#narrow/stream/113489-new-members/topic/SSet.20is.20RegularEpiCategory/near/440988908\">said</a>:</p>\n<blockquote>\n<p>I think the best way to start is ...</p>\n</blockquote>\n<p>Thank you very much for this generalization, I was able to prove the statement with a more restrictive assumption of having all pullbacks in <code>D</code>. It was needed for  <code>limitObjIsoLimitCompEvaluation</code>. The key ingredient was to explicitly state the isomorphism <code>(pullback α α).obj X ≅ pullback (α.app X) (α.app X)</code>, so it can be <code>simp</code>'ed. </p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">Tactic</span>\n\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">CategoryTheory</span><span class=\"bp\">.</span><span class=\"n\">EffectiveEpi</span><span class=\"bp\">.</span><span class=\"n\">RegularEpi</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Mathlib</span><span class=\"bp\">.</span><span class=\"n\">CategoryTheory</span><span class=\"bp\">.</span><span class=\"n\">Limits</span><span class=\"bp\">.</span><span class=\"n\">FunctorCategory</span>\n\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">CategoryTheory</span><span class=\"w\"> </span><span class=\"n\">CategoryTheory</span><span class=\"bp\">.</span><span class=\"n\">Limits</span>\n\n<span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Category</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Category</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">HasLimitsOfShape</span><span class=\"w\"> </span><span class=\"n\">WalkingCospan</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"o\">]</span>\n<span class=\"c1\">-- variable [∀ {X Y : D} (f : X ⟶ Y), HasPullback f f]</span>\n<span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">F</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"bp\">⥤</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"w\"> </span><span class=\"bp\">⟶</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"o\">)</span>\n\n\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">effectiveEpi_of_effectiveEpi_app</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">EffectiveEpi</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"bp\">.</span><span class=\"n\">app</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">)]</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">EffectiveEpi</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">HasLimit</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"n\">cospan</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">flip</span><span class=\"bp\">.</span><span class=\"n\">obj</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">    </span><span class=\"bp\">@</span><span class=\"n\">hasLimitOfIso</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">dsimp</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">infer_instance</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">diagramIsoCospan</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Limits</span><span class=\"bp\">.</span><span class=\"n\">HasPullback</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Limits</span><span class=\"bp\">.</span><span class=\"n\">HasLimit</span><span class=\"bp\">.</span><span class=\"n\">mk</span>\n<span class=\"w\">      </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">cone</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">combineCones</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">↦</span><span class=\"w\"> </span><span class=\"n\">getLimitCone</span><span class=\"w\"> </span><span class=\"bp\">_</span>\n<span class=\"w\">        </span><span class=\"n\">isLimit</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">combinedIsLimit</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">}</span>\n<span class=\"w\">  </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">effectiveEpiOfKernelPair</span>\n<span class=\"w\">  </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">Limits</span><span class=\"bp\">.</span><span class=\"n\">evaluationJointlyReflectsColimits</span>\n<span class=\"w\">  </span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">X</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">parallelPair</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">pullback</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">pullback</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"w\"> </span><span class=\"n\">pullback</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"w\"> </span><span class=\"bp\">⋙</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">evaluation</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"bp\">≅</span>\n<span class=\"w\">      </span><span class=\"n\">parallelPair</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">pullback</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"bp\">.</span><span class=\"n\">app</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"bp\">.</span><span class=\"n\">app</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"n\">pullback</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"w\"> </span><span class=\"n\">pullback</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">        </span><span class=\"n\">refine</span><span class=\"w\"> </span><span class=\"n\">parallelPair</span><span class=\"bp\">.</span><span class=\"n\">ext</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">α</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">α</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">α</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">α</span><span class=\"bp\">.</span><span class=\"n\">right</span>\n<span class=\"w\">        </span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Functor</span><span class=\"bp\">.</span><span class=\"n\">comp_obj</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">parallelPair_obj_zero</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">evaluation_obj_obj</span><span class=\"o\">]</span>\n<span class=\"w\">          </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">limitObjIsoLimitCompEvaluation</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">≪≫</span><span class=\"w\"> </span><span class=\"n\">HasLimit</span><span class=\"bp\">.</span><span class=\"n\">isoOfNatIso</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">cospanCompIso</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"o\">)</span>\n<span class=\"w\">        </span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Functor</span><span class=\"bp\">.</span><span class=\"n\">comp_obj</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">parallelPair_obj_one</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">evaluation_obj_obj</span><span class=\"o\">]</span>\n<span class=\"w\">          </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">Iso</span><span class=\"bp\">.</span><span class=\"n\">refl</span><span class=\"w\"> </span><span class=\"bp\">_</span>\n<span class=\"w\">        </span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"n\">aesop</span>\n<span class=\"w\">        </span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"n\">aesop</span>\n<span class=\"w\">  </span><span class=\"n\">refine</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">IsColimit</span><span class=\"bp\">.</span><span class=\"n\">precomposeHomEquiv</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">?_</span>\n<span class=\"w\">  </span><span class=\"n\">refine</span><span class=\"w\"> </span><span class=\"n\">IsColimit</span><span class=\"bp\">.</span><span class=\"n\">ofIsoColimit</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">CategoryTheory</span><span class=\"bp\">.</span><span class=\"n\">RegularEpi</span><span class=\"bp\">.</span><span class=\"n\">isColimit</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"bp\">.</span><span class=\"n\">app</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"bp\">?_</span>\n<span class=\"w\">  </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Iso</span><span class=\"bp\">.</span><span class=\"n\">symm_hom</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"n\">refine</span><span class=\"w\"> </span><span class=\"n\">Cofork</span><span class=\"bp\">.</span><span class=\"n\">ext</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"bp\">?</span><span class=\"n\">w</span>\n<span class=\"w\">  </span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Cofork</span><span class=\"bp\">.</span><span class=\"n\">ofπ_pt</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Cocones</span><span class=\"bp\">.</span><span class=\"n\">precompose_obj_pt</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Functor</span><span class=\"bp\">.</span><span class=\"n\">mapCocone_pt</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">evaluation_obj_obj</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">Iso</span><span class=\"bp\">.</span><span class=\"n\">refl</span><span class=\"w\"> </span><span class=\"bp\">_</span>\n<span class=\"w\">  </span><span class=\"bp\">·</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">parallelPair_obj_one</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">evaluation</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Functor</span><span class=\"bp\">.</span><span class=\"n\">comp_obj</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">parallelPair_obj_zero</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">id_eq</span><span class=\"o\">,</span>\n<span class=\"w\">    </span><span class=\"n\">cospan_left</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">cospanCompIso_hom_app_left</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">cospan_right</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">cospanCompIso_hom_app_right</span><span class=\"o\">,</span>\n<span class=\"w\">    </span><span class=\"n\">Cocones</span><span class=\"bp\">.</span><span class=\"n\">precompose</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Functor</span><span class=\"bp\">.</span><span class=\"n\">mapCocone</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Cocones</span><span class=\"bp\">.</span><span class=\"n\">functoriality</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Functor</span><span class=\"bp\">.</span><span class=\"n\">const_obj_obj</span><span class=\"o\">,</span>\n<span class=\"w\">    </span><span class=\"n\">Functor</span><span class=\"bp\">.</span><span class=\"n\">comp_map</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Functor</span><span class=\"bp\">.</span><span class=\"n\">const_obj_map</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">NatTrans</span><span class=\"bp\">.</span><span class=\"n\">comp_app</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">eq_mpr_eq_cast</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">cast_eq</span><span class=\"o\">,</span>\n<span class=\"w\">    </span><span class=\"n\">Cofork</span><span class=\"bp\">.</span><span class=\"n\">ofπ_pt</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Cofork</span><span class=\"bp\">.</span><span class=\"n\">ofπ_ι_app</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Cofork</span><span class=\"bp\">.</span><span class=\"n\">π</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Iso</span><span class=\"bp\">.</span><span class=\"n\">refl_hom</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Category</span><span class=\"bp\">.</span><span class=\"n\">comp_id</span><span class=\"o\">,</span>\n<span class=\"w\">    </span><span class=\"n\">parallelPair</span><span class=\"bp\">.</span><span class=\"n\">ext_inv_app</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Iso</span><span class=\"bp\">.</span><span class=\"n\">refl_inv</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Category</span><span class=\"bp\">.</span><span class=\"n\">id_comp</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Should we consider commiting it to <code>mathlib</code> ?</p>",
        "id": 441384314,
        "sender_full_name": "Fedor Pavutnitskiy",
        "timestamp": 1717047401
    }
]