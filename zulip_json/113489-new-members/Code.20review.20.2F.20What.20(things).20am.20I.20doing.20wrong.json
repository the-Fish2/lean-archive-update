[
    {
        "content": "<p>I've been trying to write up the structure defined <a href=\"https://math.stackexchange.com/a/1968090\">here</a>; more specifically I've almost finished writing up a proof that addition is in fact a commutative monoid except for one case in <code>add_comm</code> (the code is at the bottom of the post).</p>\n<p>The main problem I am having is that for some reason <code>simp</code>/<code>rw</code> is unable to find the instances of <code>monoidNPlus2.add_zero</code> even though it seems \"obvious\" where it should be applied. I have marked the relevant position in code with a <code>sorry</code>.</p>\n<p>There are some other things obviously wrong with this: currently I'm using <code>unfold_projs</code> <code>unfold addAux</code> as a bad way of only expanding out the addition of <code>NPlus2</code>, since using <code>simp [HAdd.hAdd]</code> also expands out natural addition, which makes it impossible to apply <code>Nat</code> lemmas. I'm sure there's a more proper way to do this but for some reason I have been unable to find it.</p>\n<p>Additionally, I'm unsure about how case based proofs are usually structured in lean: I tried building up the proof with pattern matching but it seemed that lean was unable to deduce basic facts such as <code>a ≠ 0</code> in certain branches.</p>\n<p>If anyone has some time to look over this example I would appreciate it greatly. If there are any other errors/unorthodox constructions apart from those pointed out above I would also appreciate feedback on those. (I am aware the names of lemmas do not exactly follow conventions but as this is more of a personal working draft I have not taken great care in naming them).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.ZMod.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Subsemiring.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Order.Monoid.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Ring.Basic</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">NPlus2</span>\n  <span class=\"bp\">|</span> <span class=\"n\">two'</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nat</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">NPlus2</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">NPlus2</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Zero</span> <span class=\"n\">NPlus2</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">nat</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">One</span> <span class=\"n\">NPlus2</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">nat</span> <span class=\"mi\">1</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">aux1</span> <span class=\"o\">:</span> <span class=\"n\">NPlus2</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n  <span class=\"bp\">|</span> <span class=\"n\">two'</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nat</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">inhabited</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"n\">NPlus2</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">two'</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">aux1nat</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}:</span> <span class=\"n\">aux1</span> <span class=\"o\">(</span><span class=\"n\">nat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">aux1</span>\n  <span class=\"n\">simp</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">zero_eq</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">nat</span> <span class=\"n\">Nat.zero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">one_eq</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">nat</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">addAux</span><span class=\"o\">:</span> <span class=\"n\">NPlus2</span> <span class=\"bp\">→</span> <span class=\"n\">NPlus2</span> <span class=\"bp\">→</span> <span class=\"n\">NPlus2</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nat</span> <span class=\"o\">(</span><span class=\"n\">aux1</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">aux1</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">monoidNPlus2</span> <span class=\"o\">:</span> <span class=\"n\">AddCommMonoid</span> <span class=\"n\">NPlus2</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">addAux</span>\n  <span class=\"n\">zero_add</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">unfold_projs</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">addAux</span>\n    <span class=\"n\">simp</span>\n  <span class=\"n\">add_zero</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">unfold_projs</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">addAux</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">nat</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">]</span>\n  <span class=\"n\">add_comm</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">unfold_projs</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">addAux</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">nat</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"o\">{</span>\n      <span class=\"n\">by_cases</span> <span class=\"n\">hb</span><span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">nat</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"o\">{</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">]</span>\n        <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">ring</span> <span class=\"o\">}</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n  <span class=\"n\">add_assoc</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">have</span> <span class=\"n\">lem1</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">nat</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">nat</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n    <span class=\"k\">have</span> <span class=\"n\">lem2</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">cases'</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">nat</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">·</span> <span class=\"n\">unfold_projs</span>\n      <span class=\"n\">unfold</span> <span class=\"n\">addAux</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"n\">by_cases</span> <span class=\"n\">hb</span><span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">nat</span> <span class=\"mi\">0</span>\n      <span class=\"bp\">·</span> <span class=\"n\">unfold_projs</span>\n        <span class=\"n\">unfold</span> <span class=\"n\">addAux</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hb</span><span class=\"o\">]</span>\n      <span class=\"bp\">·</span> <span class=\"n\">by_cases</span> <span class=\"n\">hc</span><span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">nat</span> <span class=\"mi\">0</span>\n        <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">zero_eq</span><span class=\"o\">]</span>\n          <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">monoidNPlus2.add_zero</span><span class=\"o\">]</span>\n          <span class=\"gr\">sorry</span>\n        <span class=\"bp\">·</span> <span class=\"n\">unfold_projs</span>\n          <span class=\"n\">unfold</span> <span class=\"n\">addAux</span>\n          <span class=\"k\">have</span> <span class=\"n\">ne_zero</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"n\">NPlus2</span><span class=\"o\">}</span>  <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">nat</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">nat</span> <span class=\"o\">(</span><span class=\"n\">aux1</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">aux1</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">nat</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n            <span class=\"n\">cases'</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">n</span>\n            <span class=\"bp\">·</span> <span class=\"n\">simp</span>\n            <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">aux1nat</span><span class=\"o\">]</span>\n              <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">lem1</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n              <span class=\"n\">apply</span> <span class=\"n\">lem2</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">aux1</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n              <span class=\"n\">exact</span> <span class=\"n\">h</span>\n          <span class=\"k\">have</span> <span class=\"n\">ab_ne_zero</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">nat</span> <span class=\"o\">(</span><span class=\"n\">aux1</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">aux1</span> <span class=\"n\">b</span> <span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">nat</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">ne_zero</span> <span class=\"n\">ha</span>\n          <span class=\"k\">have</span> <span class=\"n\">bc_ne_zero</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">nat</span> <span class=\"o\">(</span><span class=\"n\">aux1</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">aux1</span> <span class=\"n\">c</span> <span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">nat</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">ne_zero</span> <span class=\"n\">hb</span>\n          <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">addAux</span><span class=\"o\">,</span> <span class=\"n\">ab_ne_zero</span><span class=\"o\">,</span> <span class=\"n\">bc_ne_zero</span><span class=\"o\">,</span> <span class=\"n\">aux1nat</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_assoc</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 419384079,
        "sender_full_name": "Chris Ahn",
        "timestamp": 1706849487
    },
    {
        "content": "<p>What is <code>semiNPlus2</code>? I don't see it defined anywhere</p>",
        "id": 419384355,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1706849729
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"380294\">Matt Diamond</span> <a href=\"#narrow/stream/113489-new-members/topic/Code.20review.20.2F.20What.20.28things.29.20am.20I.20doing.20wrong/near/419384355\">said</a>:</p>\n<blockquote>\n<p>What is <code>semiNPlus2</code>? I don't see it defined anywhere</p>\n</blockquote>\n<p>Sorry I made a mistake while copying the code over, it was the old name of the <code>AddCommMonoid</code> instance</p>",
        "id": 419384497,
        "sender_full_name": "Chris Ahn",
        "timestamp": 1706849841
    },
    {
        "content": "<p>Have edited the post now</p>",
        "id": 419384521,
        "sender_full_name": "Chris Ahn",
        "timestamp": 1706849878
    }
]