[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Sqrt</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Trigonometric.Basic</span>\n\n\n<span class=\"kd\">noncomputable</span> <span class=\"n\">abbrev</span> <span class=\"n\">sq_2</span> <span class=\"o\">:=</span> <span class=\"n\">Real.sqrt</span> <span class=\"mi\">2</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">Real.cos</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">sq_2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Real.sin</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">sq_2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Real.sin</span> <span class=\"n\">sq_2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">≤</span>\n      <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">Real.cos</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">sq_2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Real.cos</span> <span class=\"n\">sq_2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I want to prove these two inequalites, but I have no idea how to simplify them. With equalities I would use apply_fun to simplify the expression, but this does not work for &lt;=. It says that I need to prove that the function I'm using is monotone but I have no idea how. <br>\nDo you have some general tips about proving such inequalities?</p>",
        "id": 427530015,
        "sender_full_name": "Christian K",
        "timestamp": 1710780366
    },
    {
        "content": "<p>For the first you should use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Real.neg_one_le_cos#doc\">docs#Real.neg_one_le_cos</a></p>",
        "id": 427530577,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1710780537
    },
    {
        "content": "<p>Yeah, I know about this, but how do i get rid of the 1/2?</p>",
        "id": 427530695,
        "sender_full_name": "Christian K",
        "timestamp": 1710780579
    },
    {
        "content": "<p><code>gcongr</code> is a handy tactic for this kind of thing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">Real.cos</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">sq_2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">calc</span>\n    <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n    <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">Real.cos</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">sq_2</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">gcongr</span>\n      <span class=\"n\">exact</span> <span class=\"n\">Real.neg_one_le_cos</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">sq_2</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 427531462,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1710780779
    },
    {
        "content": "<p>Also, what is the type of <code>n</code> supposed to be? With autoimplicits on, Lean assumes it to be <code>ℝ</code>, but you have a <code>↑</code> in your statement. Is <code>n</code> supposed to have type <code>ℕ</code>?</p>",
        "id": 427531834,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1710780867
    },
    {
        "content": "<p>Ohh, i forgot to include this in the mwe, you guessed it correctly, n is supposed to have type Nat.</p>",
        "id": 427532532,
        "sender_full_name": "Christian K",
        "timestamp": 1710781051
    },
    {
        "content": "<p>And how about the second lemma, I don't really see how i should use a calc proof with the gcongr tactic to solve it?</p>",
        "id": 427540191,
        "sender_full_name": "Christian K",
        "timestamp": 1710783362
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">sin_le_cos</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Real</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Real.sin</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">Real.cos</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>could a lemma like this help?</p>",
        "id": 427540340,
        "sender_full_name": "Christian K",
        "timestamp": 1710783402
    },
    {
        "content": "<p>that inequality is not true.</p>",
        "id": 427557641,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1710789142
    },
    {
        "content": "<p>Take <code>x := -π/3</code></p>",
        "id": 427557661,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1710789151
    },
    {
        "content": "<p>Your second result follows from the angle addition formula <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Real.cos_sub#doc\">docs#Real.cos_sub</a></p>",
        "id": 427558163,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1710789343
    },
    {
        "content": "<p>Ohh ok, thank you, I figured it out</p>",
        "id": 427654566,
        "sender_full_name": "Christian K",
        "timestamp": 1710841944
    }
]