[
    {
        "content": "<p>How can I rewrite my collinearity relation with the existing linear dependence in LinearAlgebra.LinearIndependent? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Projectivization.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Projectivization.Independence</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">ProjectiveGeometry</span> <span class=\"o\">(</span><span class=\"n\">point</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n<span class=\"n\">ell</span> <span class=\"o\">:</span> <span class=\"n\">point</span> <span class=\"bp\">→</span> <span class=\"n\">point</span> <span class=\"bp\">→</span> <span class=\"n\">point</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">l1</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">ell</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">a</span>\n<span class=\"n\">l2</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">ell</span> <span class=\"n\">a</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">ell</span> <span class=\"n\">b</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">ell</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">p</span>\n<span class=\"n\">l3</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">ell</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">ell</span> <span class=\"n\">p</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">point</span><span class=\"o\">,</span> <span class=\"n\">ell</span> <span class=\"n\">q</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">ell</span> <span class=\"n\">q</span> <span class=\"n\">b</span> <span class=\"n\">d</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ProjectiveGeometry</span> <span class=\"o\">(</span><span class=\"n\">Projectivization</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span>\n<span class=\"k\">fun</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∃</span> <span class=\"n\">k1</span> <span class=\"n\">k2</span> <span class=\"n\">k3</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">k1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">k2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">k3</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n<span class=\"n\">k1</span><span class=\"bp\">•</span><span class=\"n\">X.rep</span> <span class=\"bp\">+</span> <span class=\"n\">k2</span><span class=\"bp\">•</span><span class=\"n\">Y.rep</span> <span class=\"bp\">+</span> <span class=\"n\">k3</span><span class=\"bp\">•</span><span class=\"n\">Z.rep</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"c1\">-- This function should be rewritten.</span>\n<span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"gr\">sorry</span>\n<span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 424820927,
        "sender_full_name": "Abdullah Uyu",
        "timestamp": 1709628487
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Projectivization.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Projectivization.Independence</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">ProjectiveGeometry</span> <span class=\"o\">(</span><span class=\"n\">point</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n<span class=\"n\">ell</span> <span class=\"o\">:</span> <span class=\"n\">point</span> <span class=\"bp\">→</span> <span class=\"n\">point</span> <span class=\"bp\">→</span> <span class=\"n\">point</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">l1</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">ell</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">a</span>\n<span class=\"n\">l2</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">ell</span> <span class=\"n\">a</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">ell</span> <span class=\"n\">b</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">ell</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">p</span>\n<span class=\"n\">l3</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">ell</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">ell</span> <span class=\"n\">p</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">point</span><span class=\"o\">,</span> <span class=\"n\">ell</span> <span class=\"n\">q</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">ell</span> <span class=\"n\">q</span> <span class=\"n\">b</span> <span class=\"n\">d</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ProjectiveGeometry</span> <span class=\"o\">(</span><span class=\"n\">Projectivization</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span>\n<span class=\"k\">fun</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">¬</span> <span class=\"n\">LinearIndependent</span> <span class=\"n\">K</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">X.rep</span><span class=\"o\">,</span> <span class=\"n\">Y.rep</span><span class=\"o\">,</span> <span class=\"n\">Z.rep</span><span class=\"o\">],</span>\n<span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"gr\">sorry</span>\n<span class=\"o\">⟩</span>\n</code></pre></div>\n<p>I think I figured it out, but there are some parts I don't quite get. I don't understand indexing types, and I couldn't find an explicit example of it. By mimicking the library, I wrote the above, but it does not work without <code>!</code>. </p>\n<ul>\n<li>Why is that?</li>\n<li>Also, does this state what I am intending?</li>\n</ul>",
        "id": 424937757,
        "sender_full_name": "Abdullah Uyu",
        "timestamp": 1709665337
    },
    {
        "content": "<p>What do you mean by \"work without !\"?</p>",
        "id": 424939370,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1709665914
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/State.20three.20vectors.20are.20linearly.20dependent/near/424939370\">said</a>:</p>\n<blockquote>\n<p>What do you mean by \"work without !\"?</p>\n</blockquote>\n<p>Sorry, just realizing the sentence is a bit awkward (: I initially didn't put the exclamation mark before the list, and it didn't work.</p>",
        "id": 424939718,
        "sender_full_name": "Abdullah Uyu",
        "timestamp": 1709666038
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/State.20three.20vectors.20are.20linearly.20dependent/near/424939370\">said</a>:</p>\n<blockquote>\n<p>What do you mean by \"work without !\"?</p>\n</blockquote>\n<p>But if you ask the error, it's</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>typeclass instance problem is stuck, it is often due to metavariables\n  Module K (?m.2765 X Y Z)\n</code></pre></div>",
        "id": 424940306,
        "sender_full_name": "Abdullah Uyu",
        "timestamp": 1709666208
    },
    {
        "content": "<p><code>[x, y, z]</code> is a <code>List _</code>, <code>![x, y, z]</code> is a <code>Fin 3 -&gt; _</code>. They're completely different to Lean, which is why you can't just expect it to work without the <code>!</code></p>",
        "id": 424945080,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709667850
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/State.20three.20vectors.20are.20linearly.20dependent/near/424945080\">said</a>:</p>\n<blockquote>\n<p><code>[x, y, z]</code> is a <code>List _</code>, <code>![x, y, z]</code> is a <code>Fin 3 -&gt; _</code>. They're completely different to Lean, which is why you can't just expect it to work without the <code>!</code></p>\n</blockquote>\n<p>OK understood. Now I realize I can actually directly use the collinearity condition Projectivization.Independent instead of LinearIndependent. But the following does not type check:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">fun</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">¬</span> <span class=\"n\">Projectivization.Independent</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"n\">Z</span><span class=\"o\">],</span>\n</code></pre></div>\n<p>it gives:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>error: (deterministic) timeout at 'isDefEq', maximum number of heartbeats (200000) has been reached (use 'set_option maxHeartbeats &lt;num&gt;' to set the limit)\n</code></pre></div>",
        "id": 425060869,
        "sender_full_name": "Abdullah Uyu",
        "timestamp": 1709723405
    },
    {
        "content": "<p>Meahwhile I am trying to write the proper indexing function instead of using the converter <code>!</code>.</p>",
        "id": 425113719,
        "sender_full_name": "Abdullah Uyu",
        "timestamp": 1709738782
    },
    {
        "content": "<p>I think there is another problem here, because I get the same error above with the following indexing function:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">index</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">Projectivization</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">Projectivization</span> <span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">3</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">i</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">X</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Y</span>\n<span class=\"bp\">|</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Z</span>\n</code></pre></div>",
        "id": 425117889,
        "sender_full_name": "Abdullah Uyu",
        "timestamp": 1709739846
    },
    {
        "content": "<p>I use the indexing function above like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">fun</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">¬</span> <span class=\"n\">Projectivization.Independent</span> <span class=\"o\">(</span><span class=\"n\">index</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">),</span>\n</code></pre></div>",
        "id": 425118270,
        "sender_full_name": "Abdullah Uyu",
        "timestamp": 1709739943
    },
    {
        "content": "<p>Can you make a mwe?</p>",
        "id": 425120822,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709740586
    },
    {
        "content": "<p>Of course, give me a second.</p>",
        "id": 425120885,
        "sender_full_name": "Abdullah Uyu",
        "timestamp": 1709740605
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Projectivization.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Projectivization.Independence</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">DivisionRing</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">index</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">Projectivization</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">Projectivization</span> <span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">3</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">i</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">X</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Y</span>\n<span class=\"bp\">|</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Z</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">ProjectiveGeometry</span> <span class=\"o\">(</span><span class=\"n\">point</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n<span class=\"n\">ell</span> <span class=\"o\">:</span> <span class=\"n\">point</span> <span class=\"bp\">→</span> <span class=\"n\">point</span> <span class=\"bp\">→</span> <span class=\"n\">point</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">l1</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">ell</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">a</span>\n<span class=\"n\">l2</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">ell</span> <span class=\"n\">a</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">ell</span> <span class=\"n\">b</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">ell</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">p</span>\n<span class=\"n\">l3</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">ell</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">ell</span> <span class=\"n\">p</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">point</span><span class=\"o\">,</span> <span class=\"n\">ell</span> <span class=\"n\">q</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">ell</span> <span class=\"n\">q</span> <span class=\"n\">b</span> <span class=\"n\">d</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ProjectiveGeometry</span> <span class=\"o\">(</span><span class=\"n\">Projectivization</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span>\n  <span class=\"k\">fun</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">¬</span> <span class=\"n\">Projectivization.Independent</span> <span class=\"o\">(</span><span class=\"n\">index</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">),</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n  <span class=\"o\">⟩</span>\n</code></pre></div>\n<p>Here <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span></p>",
        "id": 425121278,
        "sender_full_name": "Abdullah Uyu",
        "timestamp": 1709740696
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/State.20three.20vectors.20are.20linearly.20dependent/near/425120822\">said</a>:</p>\n<blockquote>\n<p>Can you make a mwe?</p>\n</blockquote>\n<p>Sorry, I actually get the following error, not the one above; I though it's the same:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>error: (deterministic) timeout at 'whnf', maximum number of heartbeats (200000) has been reached (use 'set_option maxHeartbeats &lt;num&gt;' to set the\nlimit)\n</code></pre></div>",
        "id": 425178066,
        "sender_full_name": "Abdullah Uyu",
        "timestamp": 1709759257
    },
    {
        "content": "<p>The former is complaining about <code>isDefEq</code>, the latter <code>whnf</code>.</p>",
        "id": 425178212,
        "sender_full_name": "Abdullah Uyu",
        "timestamp": 1709759310
    },
    {
        "content": "<p>The error message is super unhelpful, but the problem is that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Projectivization.Independent#doc\">docs#Projectivization.Independent</a> needs <code>K</code> to be a <code>Field</code></p>",
        "id": 425180433,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709760304
    },
    {
        "content": "<p>I found this out by adding <code>(K := K)</code> before <code>(index X Y Z)</code></p>",
        "id": 425180528,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709760358
    },
    {
        "content": "<p>Lean is concluding that you must be talking about some other field, and so goes on a wild goose chase trying to find out which one before timing out. If you remind it you definitely want <code>K</code> then it fails quickly</p>",
        "id": 425180647,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709760409
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/State.20three.20vectors.20are.20linearly.20dependent/near/425180528\">said</a>:</p>\n<blockquote>\n<p>I found this out by adding <code>(K := K)</code> before <code>(index X Y Z)</code></p>\n</blockquote>\n<p>Do you mean like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">fun</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">¬</span> <span class=\"n\">Projectivization.Independent</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">index</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">),</span>\n</code></pre></div>\n<p>This gives me the same error, do you also change the definition of <code>index</code>?</p>",
        "id": 425181057,
        "sender_full_name": "Abdullah Uyu",
        "timestamp": 1709760615
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/State.20three.20vectors.20are.20linearly.20dependent/near/425180647\">said</a>:</p>\n<blockquote>\n<p>Lean is concluding that you must be talking about some other field, and so goes on a wild goose chase trying to find out which one before timing out. If you remind it you definitely want <code>K</code> then it fails quickly</p>\n</blockquote>\n<p>This is funny <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 425181153,
        "sender_full_name": "Abdullah Uyu",
        "timestamp": 1709760675
    },
    {
        "content": "<p>But in any case, I may abandon <code>DivisionRing</code> and use <code>Field</code>. The other option may be to generalize <code>Independent</code> for <code>DivisionRing</code>.</p>",
        "id": 425182298,
        "sender_full_name": "Abdullah Uyu",
        "timestamp": 1709761183
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"488747\">@Michael Blyth</span> Why is <code>Projectivization.Independent</code> for <code>Field</code> but not generally for <code>DivisionRing</code>? Would it be hard to generalize?</p>",
        "id": 425182708,
        "sender_full_name": "Abdullah Uyu",
        "timestamp": 1709761325
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/State.20three.20vectors.20are.20linearly.20dependent/near/425180647\">said</a>:</p>\n<blockquote>\n<p>Lean is concluding that you must be talking about some other field, and so goes on a wild goose chase trying to find out which one before timing out. If you remind it you definitely want <code>K</code> then it fails quickly</p>\n</blockquote>\n<p>I changed <code>Field</code> to <code>DivisionRing</code> in <code>Projectivization.Independence</code> and it compiled. That was too easy, am I missing something here? <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 425187909,
        "sender_full_name": "Abdullah Uyu",
        "timestamp": 1709763245
    },
    {
        "content": "<p>I was going to suggest you try that and see what happened :)</p>",
        "id": 425198201,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709768461
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"557285\">Abdullah Uyu</span> has marked this topic as resolved.</p>",
        "id": 425263472,
        "sender_full_name": "Notification Bot",
        "timestamp": 1709804668
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"557285\">@Abdullah Uyu</span>, can you make a PR with that change?</p>",
        "id": 425264744,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709805010
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20State.20three.20vectors.20are.20linearly.20dependent/near/425264744\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"557285\">Abdullah Uyu</span>, can you make a PR with that change?</p>\n</blockquote>\n<p>Sure, will look into it when I get a chance to sit before my laptop.</p>",
        "id": 425265135,
        "sender_full_name": "Abdullah Uyu",
        "timestamp": 1709805121
    },
    {
        "content": "<blockquote>\n<p>Would it be hard to generalize?</p>\n</blockquote>\n<p>One thing to watch out for is that sometimes a Lean generalization is meaningless mathematically, even if it compiles; for example, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=BilinForm#doc\">docs#BilinForm</a> does not need the ring to be commutative, but in practice the definition is only the right one when it is.</p>",
        "id": 425265564,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709805254
    },
    {
        "content": "<p>That is interesting.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20State.20three.20vectors.20are.20linearly.20dependent/near/425265564\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>Would it be hard to generalize?</p>\n</blockquote>\n<p>One thing to watch out for is that sometimes a Lean generalization is meaningless mathematically, even if it compiles; for example, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=BilinForm#doc\">docs#BilinForm</a> does not need the ring to be commutative, but in practice the definition is only the right one when it is.</p>\n</blockquote>",
        "id": 425344706,
        "sender_full_name": "Abdullah Uyu",
        "timestamp": 1709828356
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20State.20three.20vectors.20are.20linearly.20dependent/near/425264744\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"557285\">Abdullah Uyu</span>, can you make a PR with that change?</p>\n</blockquote>\n<p>Alright, I should follow this <a href=\"https://leanprover-community.github.io/contribute/index.html\">https://leanprover-community.github.io/contribute/index.html</a> right? It talks about some permission, do I need it?</p>",
        "id": 425379035,
        "sender_full_name": "Abdullah Uyu",
        "timestamp": 1709839554
    },
    {
        "content": "<p>I guess that is the procedure. My github username is oneofvalts.</p>",
        "id": 425381365,
        "sender_full_name": "Abdullah Uyu",
        "timestamp": 1709840379
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"557285\">Abdullah Uyu</span> has marked this topic as unresolved.</p>",
        "id": 425384375,
        "sender_full_name": "Notification Bot",
        "timestamp": 1709841468
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"557285\">Abdullah Uyu</span> <a href=\"#narrow/stream/113489-new-members/topic/State.20three.20vectors.20are.20linearly.20dependent/near/425381365\">said</a>:</p>\n<blockquote>\n<p>I guess that is the procedure. My github username is oneofvalts.</p>\n</blockquote>\n<p>Invite sent!</p>",
        "id": 425387793,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709842760
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/State.20three.20vectors.20are.20linearly.20dependent/near/425387793\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"557285\">Abdullah Uyu</span> <a href=\"#narrow/stream/113489-new-members/topic/State.20three.20vectors.20are.20linearly.20dependent/near/425381365\">said</a>:</p>\n<blockquote>\n<p>I guess that is the procedure. My github username is oneofvalts.</p>\n</blockquote>\n<p>Invite sent!</p>\n</blockquote>\n<p>Thank you, just created the PR. I am fairly new to this procedure, so I hope it is OK.</p>",
        "id": 425394438,
        "sender_full_name": "Abdullah Uyu",
        "timestamp": 1709845300
    }
]