[
    {
        "content": "<p>If I have a goal like this one,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"bp\">∃</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span>\n</code></pre></div>\n<p>why does <code>rewrite [Nat.add_right_comm]</code> not work.</p>\n<p>More context, for now I have done the proof via</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- (d) Addition preserves order</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">nth_rewrite</span> <span class=\"mi\">2</span> <span class=\"o\">[</span><span class=\"n\">le_iff_exists_add</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Iff.intro</span>\n  <span class=\"c1\">-- mp: x ≤ y → ∃ c, y + a = x + a + c</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Nat.eq_or_lt_of_le</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">cases'</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span>\n  <span class=\"n\">use</span> <span class=\"mi\">0</span>\n  <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_zero</span><span class=\"o\">,</span> <span class=\"n\">add_right_cancel_iff</span><span class=\"o\">]</span>\n  <span class=\"n\">symm</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h1</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Nat.le_of_lt</span> <span class=\"n\">at</span> <span class=\"n\">h2</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_iff_exists_add.mp</span> <span class=\"n\">at</span> <span class=\"n\">h2</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h2</span>\n  <span class=\"n\">use</span> <span class=\"n\">b</span>\n  <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_right_comm</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_right_cancel_iff</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hb</span>\n  <span class=\"c1\">-- mpr: ⊢ (∃ c, y + a = x + a + c) → x ≤ y</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n  <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_right_comm</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_right_cancel_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hc</span>\n  <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">le_iff_exists_add</span><span class=\"o\">]</span>\n  <span class=\"n\">use</span> <span class=\"n\">c</span>\n</code></pre></div>\n<p>but this seems kinda cumbersome.</p>",
        "id": 422007860,
        "sender_full_name": "Philipp SL Schäfer",
        "timestamp": 1708172956
    },
    {
        "content": "<p>The issue is that the pattern occurs under a binder (and in particular, uses the bound variable). <code>rw</code> doesn't support that for technical reasons. <code>simp</code> is built on different foundations, and may work in this case</p>",
        "id": 422011619,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1708176753
    },
    {
        "content": "<p><code>simp_rw</code> or <code>simp only</code> are the tactics which work behind an Exists.</p>",
        "id": 422018224,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708182258
    },
    {
        "content": "<p>A couple of alternatives for rewriting under binders: use <code>conv</code>, or use a specific congruence lemma (here <code>exists_congr</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Order.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.NthRewrite</span>\n\n<span class=\"c1\">-- (d) Addition preserves order</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">right</span>\n    <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">le_iff_exists_add</span><span class=\"o\">]</span>\n    <span class=\"n\">right</span>\n    <span class=\"n\">intro</span> <span class=\"n\">c</span>\n    <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_right_comm</span><span class=\"o\">,</span> <span class=\"n\">add_right_cancel_iff</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">le_iff_exists_add</span>\n\n<span class=\"c1\">-- (d) Addition preserves order</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">nth_rewrite</span> <span class=\"mi\">2</span> <span class=\"o\">[</span><span class=\"n\">le_iff_exists_add</span><span class=\"o\">]</span>\n  <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">exists_congr</span> <span class=\"k\">fun</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_right_comm</span><span class=\"o\">,</span> <span class=\"n\">add_right_cancel_iff</span><span class=\"o\">]]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">le_iff_exists_add</span>\n</code></pre></div>",
        "id": 422024558,
        "sender_full_name": "Richard Copley",
        "timestamp": 1708186750
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"690867\">Philipp SL Schäfer</span> has marked this topic as resolved.</p>",
        "id": 422093622,
        "sender_full_name": "Notification Bot",
        "timestamp": 1708258815
    },
    {
        "content": "<p>Thanks everyone! For future references here are the proofs using <code>simp</code> and <code>simp_rw</code> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- (d) Addition preserves order</span>\n<span class=\"c1\">-- proof using `simp` and `simp_rw`</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">le_iff_exists_add</span><span class=\"o\">,</span> <span class=\"n\">le_iff_exists_add</span><span class=\"o\">]</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_right_comm</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"n\">_</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_right_cancel</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- (d) Addition preserves order</span>\n<span class=\"c1\">-- proof using `simp`</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">le_iff_exists_add</span><span class=\"o\">,</span> <span class=\"n\">le_iff_exists_add</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_right_comm</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"n\">_</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 422094418,
        "sender_full_name": "Philipp SL Schäfer",
        "timestamp": 1708259603
    },
    {
        "content": "<p>but for educative purposes, how can I make this work with <code>simp only</code> such that I don't use the lemmas tagged with <code>@simp</code>? Or asking in another way,  is there a way to check which lemmas <code>simp</code> is using when invoking it? Something like <code>set_option trace.simplify true</code> (which unfortunately returns <code>unknown option 'trace.simplify'</code>)</p>",
        "id": 422094820,
        "sender_full_name": "Philipp SL Schäfer",
        "timestamp": 1708259998
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"690867\">Philipp SL Schäfer</span> has marked this topic as unresolved.</p>",
        "id": 422094863,
        "sender_full_name": "Notification Bot",
        "timestamp": 1708260009
    },
    {
        "content": "<p>There's certainly a trace option to see this; you might want to try what you typed and then hit ctrl-space to find out what you should have typed. But the easy solution is <code>simp?</code>.</p>",
        "id": 422095392,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708260589
    },
    {
        "content": "<p>thanks!</p>",
        "id": 422095466,
        "sender_full_name": "Philipp SL Schäfer",
        "timestamp": 1708260640
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"690867\">Philipp SL Schäfer</span> has marked this topic as resolved.</p>",
        "id": 422108206,
        "sender_full_name": "Notification Bot",
        "timestamp": 1708272310
    }
]