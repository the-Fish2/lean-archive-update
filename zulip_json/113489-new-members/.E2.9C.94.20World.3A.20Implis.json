[
    {
        "content": "<p><a href=\"https://adam.math.hhu.de/#/g/hhu-adam/robo/world/Implication/level/12\">https://adam.math.hhu.de/#/g/hhu-adam/robo/world/Implication/level/12</a><br>\nWhy does the following not work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">imp_iff_not_or</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"n\">B</span>\n<span class=\"n\">intro</span>\n<span class=\"n\">by_contra</span> <span class=\"n\">h</span>\n<span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">not_or</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n<span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">not_not</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n<span class=\"k\">have</span> <span class=\"n\">hA</span> <span class=\"o\">:=</span> <span class=\"n\">h.left</span>\n<span class=\"k\">have</span> <span class=\"n\">hB</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"n\">hA</span>\n<span class=\"k\">have</span> <span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"n\">hB</span> <span class=\"n\">h.right</span>\n<span class=\"n\">exact</span> <span class=\"n\">h0</span>\n<span class=\"k\">have</span> <span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n<span class=\"n\">intro</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span>\n<span class=\"n\">cases'</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">h8</span> <span class=\"n\">h9</span>\n<span class=\"k\">have</span> <span class=\"n\">h7</span><span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">h8</span>\n<span class=\"n\">apply</span> <span class=\"n\">and_not_self</span> <span class=\"n\">at</span> <span class=\"n\">h7</span>\n<span class=\"n\">contradiction</span>\n<span class=\"n\">exact</span> <span class=\"n\">h9</span>\n<span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">iff_iff_implies_and_implies</span><span class=\"o\">]</span>\n<span class=\"n\">constructor</span>\n<span class=\"n\">exact</span> <span class=\"n\">h1</span>\n<span class=\"n\">exact</span> <span class=\"n\">h2</span>\n</code></pre></div>",
        "id": 418504306,
        "sender_full_name": "Yagub Aliyev",
        "timestamp": 1706449743
    },
    {
        "content": "<ul>\n<li>You didn't import the modules that provide the tactics you used.</li>\n<li>You didn't provide the name \"a\" in the first \"intro\". Autogenerated names aren't accessible.</li>\n<li>When <code>a : A</code> and <code>hA : ¬A</code>, you can prove false as <code>hA a</code> because <code>hA</code> is a function of type <code>A → False</code>, but <code>a hA</code> is an error because <code>a</code> is not a function.</li>\n<li>When <code>h : A</code> and <code>h8 : ¬A</code>, the syntax to construct a proof of <code>A ∧ ¬A</code> is <code>And.intro h h8</code> (or <code>⟨h, h8⟩</code> for short when the expected type is known), not <code>h h8</code>.</li>\n</ul>\n<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Have</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.ByContra</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Cases</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.ApplyAt</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">imp_iff_not_or'</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"n\">B</span>\n<span class=\"n\">intro</span> <span class=\"n\">a</span>\n<span class=\"n\">by_contra</span> <span class=\"n\">h</span>\n<span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">not_or</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n<span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">not_not</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n<span class=\"k\">have</span> <span class=\"n\">hA</span> <span class=\"o\">:=</span> <span class=\"n\">h.left</span>\n<span class=\"k\">have</span> <span class=\"n\">hB</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"n\">hA</span>\n<span class=\"k\">have</span> <span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"n\">h.right</span> <span class=\"n\">hB</span>\n<span class=\"n\">exact</span> <span class=\"n\">h0</span>\n<span class=\"k\">have</span> <span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n<span class=\"n\">intro</span> <span class=\"n\">a'</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span>\n<span class=\"n\">cases'</span> <span class=\"n\">a'</span> <span class=\"k\">with</span> <span class=\"n\">h8</span> <span class=\"n\">h9</span>\n<span class=\"k\">have</span> <span class=\"n\">h7</span><span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h8</span><span class=\"o\">⟩</span>\n<span class=\"n\">apply</span> <span class=\"n\">and_not_self</span> <span class=\"n\">at</span> <span class=\"n\">h7</span>\n<span class=\"n\">contradiction</span>\n<span class=\"n\">exact</span> <span class=\"n\">h9</span>\n<span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">iff_iff_implies_and_implies</span><span class=\"o\">]</span>\n<span class=\"n\">constructor</span>\n<span class=\"n\">exact</span> <span class=\"n\">h1</span>\n<span class=\"n\">exact</span> <span class=\"n\">h2</span>\n</code></pre></div>",
        "id": 418507608,
        "sender_full_name": "Richard Copley",
        "timestamp": 1706452665
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"682831\">Yagub Aliyev</span> has marked this topic as resolved.</p>",
        "id": 418520994,
        "sender_full_name": "Notification Bot",
        "timestamp": 1706463510
    }
]