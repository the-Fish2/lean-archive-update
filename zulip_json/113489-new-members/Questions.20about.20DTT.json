[
    {
        "content": "<p>Hi, I am learning the type theory that Lean is based on and have a couple of questions.</p>\n<p>Why do we need an infinite number of type universes?<br>\nIf <code>#check Type</code> instead yielded <code>Type</code> would this cause some paradox akin to Russell's?<br>\nWhy does <code>Sort u → Sort v</code> have to live in the universe above, <code>Type (max u v)</code>? Is it arbitrary in the sense that any universe above both  <code>u</code> and <code>v</code> works and this is just convention?</p>\n<p>Why do the following dependent pair types not work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"k\">#check</span>  <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">Σ</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span>\n<span class=\"k\">#check</span>  <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">Σ</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span>\n<span class=\"k\">#check</span>  <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">Σ</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>Am I correct that the following syntaxes have been removed from Lean 4?</p>\n<ul>\n<li><code>Π a : α, β a</code></li>\n<li><code>constant</code>, <code>constants</code>, <code>variables</code>, <code>lemma</code></li>\n</ul>\n<p>In mathlib, one sees <code>ℕ, ℝ, ℂ</code> written. Are there built-in aliases somewhere? They are not defined in my editor.</p>\n<p>Thank you so much to whoever answers my questions!</p>",
        "id": 409411726,
        "sender_full_name": "Bartosz Towiański",
        "timestamp": 1703172490
    },
    {
        "content": "<p>Yes, <code>Type : Type</code> would give a proof of <code>False</code>. This quite subtle, it is proved in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Counterexample.girard#doc\">docs#Counterexample.girard</a></p>",
        "id": 409412163,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1703172641
    },
    {
        "content": "<p>The problem is that we can not suppose <code>Type : Type</code> (Lean would say that this does not typecheck, so we can not even say that this implies <code>False</code>). What is done in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Counterexample.girard#doc\">docs#Counterexample.girard</a> is essentially supposing that there exist <code>Π</code> and <code>λ</code> constructors that take values in <code>Type</code>, and derive a contradiction.</p>\n<p>The proof is unfortunately <em>very</em> difficult to follow <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 409412545,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1703172762
    },
    {
        "content": "<ul>\n<li>As mathematicians, we don't. On paper, everything we do fits in <code>Type 1</code>. In Lean, for technical reasons, everything fits in <code>Type 4</code> (or <code>Type 5</code>? don't remember). Metatheoretically however every type is supposed to have a type, so we need at least countably many universes</li>\n<li>Any higher universe will do</li>\n<li>Look at <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PSigma#doc\">docs#PSigma</a></li>\n<li>Yes, although mathlib provides <code>lemma</code> back</li>\n<li>They are notations from mathlib</li>\n</ul>",
        "id": 409412574,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1703172774
    },
    {
        "content": "<p>Concerning <code>ℝ</code>, note that you can ctrl-click in VS Code on the symbol, and it will bring you where it is defined. For example <code>ℝ</code> is defined <a href=\"https://github.com/leanprover-community/mathlib4/blob/e352bb79f198b8bf40d2e471d40fd81198ded2bc/Mathlib/Data/Real/Basic.lean#L41\">here</a>.</p>",
        "id": 409413247,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1703172988
    },
    {
        "content": "<p>If you like <code>Π</code>, you can have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Util.PiNotation</span>\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">PiNotation</span>\n</code></pre></div>\n<p>and the notation will work.</p>",
        "id": 409413386,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1703173041
    },
    {
        "content": "<p>Wow, thank you so much for the quick responses! Yes, the Girard's paradox looks very gnarly indeed.</p>",
        "id": 409413475,
        "sender_full_name": "Bartosz Towiański",
        "timestamp": 1703173071
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/113489-new-members/topic/Questions.20about.20DTT/near/409413386\">said</a>:</p>\n<blockquote>\n<p>If you like <code>Π</code>, you can have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Util.PiNotation</span>\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">PiNotation</span>\n</code></pre></div>\n<p>and the notation will work.</p>\n</blockquote>\n<p>Ah yes, I was also wondering why Pi was removed but not Sigma, but looks like it's easy to get both anyway</p>",
        "id": 409413641,
        "sender_full_name": "Bartosz Towiański",
        "timestamp": 1703173126
    }
]