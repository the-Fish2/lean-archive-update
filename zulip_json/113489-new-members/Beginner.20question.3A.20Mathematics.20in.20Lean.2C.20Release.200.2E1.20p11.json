[
    {
        "content": "<p>My solution to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Ring.Basic</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">add_neg_cancel_right</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">add_right_neg</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>was not accepted:<br>\ntactic 'rewrite' failed, did not find instance of the pattern in the target expression\\n  ?a + (?b + ?c)\\nR✝ : Type u_1\\ninst✝² : Ring R✝\\nR' : Type u_2\\ninst✝¹ : CommRing R'\\na✝ b✝ c d : R'\\nR : Type u_3\\ninst✝ : Ring R\\na b : R\\n⊢ a + b + -b = a<br>\nI do not understand what is wrong.</p>",
        "id": 423660123,
        "sender_full_name": "Peter Dolland",
        "timestamp": 1709054597
    },
    {
        "content": "<p>Can you please use <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a>?</p>",
        "id": 423662046,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1709055203
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/Beginner.20question.3A.20Mathematics.20in.20Lean.2C.20Release.200.2E1.20p11\">#mathlib4 &gt; Beginner question: Mathematics in Lean, Release 0.1 p11</a> by <span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span>.</p>",
        "id": 423662133,
        "sender_full_name": "Notification Bot",
        "timestamp": 1709055237
    },
    {
        "content": "<p>And also it's better to provide a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 423662250,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1709055269
    },
    {
        "content": "<p>(here the error is clear, <code>← add_assoc</code> transforms <code>a + (b + c)</code> into <code>a + b + c</code> (that by definition means <code>(a + b) + c</code>). Lean is complaining that there is no <code>a + (b + c)</code> in your expression)</p>",
        "id": 423662482,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1709055357
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/113489-new-members/topic/Beginner.20question.3A.20Mathematics.20in.20Lean.2C.20Release.200.2E1.20p11/near/423662482\">schrieb</a>:</p>\n<blockquote>\n<p>(here the error is clear, <code>← add_assoc</code> transforms <code>a + (b + c)</code> into <code>a + b + c</code> (that by definition means <code>(a + b) + c</code>). Lean is complaining that there is no <code>a + (b + c)</code> in your expression)</p>\n</blockquote>\n<p>How can I see, that <code>← add_assoc</code> transforms <code>a + (b + c)</code> into <code>a + b + c</code> and does not vice versa? How I could find a proposition I could use for vice versa? In my mind equality is a symmetric relation.</p>",
        "id": 423832375,
        "sender_full_name": "Peter Dolland",
        "timestamp": 1709131288
    },
    {
        "content": "<p>Equality _is_ a symmetric relation, but here we are manipulating terms in a type theory, and \"change X to Y\" is definitely different to \"change Y to X\". The <em>numbers</em> <code>2 + 2</code> and <code>4</code> are equal, but the <em>terms</em> <code>2 + 2</code> and <code>4</code> are distinct. </p>\n<p><code>add_assoc</code> is a proof of <code>(a + b) + c = a + (b + c)</code>, so <code>rw [add_assoc]</code> will change the LHS into the RHS and <code>rw [← add_assoc]</code> will turn the RHS into the LHS. </p>\n<p>Did you play the natural number game?</p>",
        "id": 423834741,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709131892
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Beginner.20question.3A.20Mathematics.20in.20Lean.2C.20Release.200.2E1.20p11/near/423834741\">schrieb</a>:</p>\n<blockquote>\n<p>Equality _is_ a symmetric relation, but here we are manipulating terms in a type theory, and \"change X to Y\" is definitely different to \"change Y to X\". The <em>numbers</em> <code>2 + 2</code> and <code>4</code> are equal, but the <em>terms</em> <code>2 + 2</code> and <code>4</code> are distinct. </p>\n<p><code>add_assoc</code> is a proof of <code>(a + b) + c = a + (b + c)</code>, so <code>rw [add_assoc]</code> will change the LHS into the RHS and <code>rw [← add_assoc]</code> will turn the RHS into the LHS. </p>\n<p>Did you play the natural number game?</p>\n</blockquote>\n<p>Okay, thank you. I did not understand the <code>←</code>. What the natural number game?</p>",
        "id": 423835857,
        "sender_full_name": "Peter Dolland",
        "timestamp": 1709132174
    },
    {
        "content": "<p>It is <a href=\"https://adam.math.hhu.de/#/g/leanprover-community/NNG4\">this</a> game. It shows you the very basics of Lean, and a lot of people started there.</p>",
        "id": 423849616,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1709135927
    },
    {
        "content": "<p>Playing the natural number game is absolutely not a prerequisite of MIL. All this is explained in MIL.</p>",
        "id": 423853066,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709136813
    },
    {
        "content": "<p>You need to read again the paragraph that said</p>\n<blockquote>\n<p>Try proving these identities, in each case replacing sorry by a tactic proof. With the rw tactic, you can use a left arrow (\\l) to reverse an identity. For example, rw [← mul_assoc a b c] replaces a * (b * c) by a * b * c in the current goal. Note that the left-pointing arrow refers to going from right to left in the identity provided by mul_assoc, it has nothing to do with the left or right side of the goal.</p>\n</blockquote>",
        "id": 423853868,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1709137019
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/Beginner.20question.3A.20Mathematics.20in.20Lean.2C.20Release.200.2E1.20p11/near/423853868\">schrieb</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">You</span> <span class=\"n\">need</span> <span class=\"n\">to</span> <span class=\"n\">read</span> <span class=\"n\">again</span> <span class=\"n\">the</span> <span class=\"n\">paragraph</span> <span class=\"n\">that</span> <span class=\"n\">said</span>\n<span class=\"bp\">```</span><span class=\"n\">quote</span>\n<span class=\"n\">Try</span> <span class=\"n\">proving</span> <span class=\"n\">these</span> <span class=\"n\">identities</span><span class=\"o\">,</span> <span class=\"k\">in</span> <span class=\"n\">each</span> <span class=\"n\">case</span> <span class=\"n\">replacing</span> <span class=\"gr\">sorry</span> <span class=\"kd\">by</span> <span class=\"n\">a</span> <span class=\"n\">tactic</span> <span class=\"n\">proof.</span> <span class=\"n\">With</span> <span class=\"n\">the</span> <span class=\"n\">rw</span> <span class=\"n\">tactic</span><span class=\"o\">,</span> <span class=\"n\">you</span> <span class=\"n\">can</span> <span class=\"n\">use</span> <span class=\"n\">a</span> <span class=\"n\">left</span> <span class=\"n\">arrow</span> <span class=\"o\">(</span><span class=\"bp\">\\</span><span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"n\">to</span> <span class=\"n\">reverse</span> <span class=\"n\">an</span> <span class=\"n\">identity.</span> <span class=\"n\">For</span> <span class=\"kd\">example</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"n\">replaces</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"kd\">by</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">current</span> <span class=\"n\">goal.</span> <span class=\"n\">Note</span> <span class=\"n\">that</span> <span class=\"n\">the</span> <span class=\"n\">left</span><span class=\"bp\">-</span><span class=\"n\">pointing</span> <span class=\"n\">arrow</span> <span class=\"n\">refers</span> <span class=\"n\">to</span> <span class=\"n\">going</span> <span class=\"k\">from</span> <span class=\"n\">right</span> <span class=\"n\">to</span> <span class=\"n\">left</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">identity</span> <span class=\"n\">provided</span> <span class=\"kd\">by</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">it</span> <span class=\"n\">has</span> <span class=\"n\">nothing</span> <span class=\"n\">to</span> <span class=\"k\">do</span> <span class=\"k\">with</span> <span class=\"n\">the</span> <span class=\"n\">left</span> <span class=\"n\">or</span> <span class=\"n\">right</span> <span class=\"n\">side</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">goal.</span>\n<span class=\"bp\">```</span>\n</code></pre></div>\n<p>Okay, here it was explained, what means to \"reverse an identity\"(?) with the help of an example. My question is, if there is a location, where this is explained in a more systematic way?</p>",
        "id": 424202118,
        "sender_full_name": "Peter Dolland",
        "timestamp": 1709289267
    },
    {
        "content": "<p>By default, <code>rw</code> rewrites the equalities you provide left to right. (it tries to match the left-hand side of what you gave to something in the goal, and then replaces the right hand side). If you want to rewrite right to left, that is “reversing an identity”, and the arrow does just that . There just isn’t much to explain</p>",
        "id": 424223602,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1709295734
    },
    {
        "content": "<p>With \"systematic way\" I mean the options I have to use <code>rw</code>. E.g. I want to apply the reverse group rule <code>one_mul</code> to the first <code>a</code> in <code>a * a⁻¹</code>. How to teach Lean?</p>",
        "id": 424287975,
        "sender_full_name": "Peter Dolland",
        "timestamp": 1709312095
    }
]