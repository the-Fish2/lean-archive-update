[
    {
        "content": "<p>Hello everyone! I have started working through Terence Tao's Analysis 1 in Lean, and I was able to use quotient types to construct the integers, but I'm having trouble defining reciprocal for the rational numbers.</p>\n<p>The general problem seems to be utilizing a predicate over a quotient type in a proof about the underlying type. I thought it might be possible to use <code>Quotient.rec</code> to construct a function from some <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>:</mo><mi mathvariant=\"normal\">Q</mi></mrow><annotation encoding=\"application/x-tex\">a : ℚ</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8556em;vertical-align:-0.1667em;\"></span><span class=\"mord amsrm\">Q</span></span></span></span> to the set of functions which send a proof that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span> is nonzero to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Q</mi></mrow><annotation encoding=\"application/x-tex\">ℚ</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8556em;vertical-align:-0.1667em;\"></span><span class=\"mord amsrm\">Q</span></span></span></span> (making use of the fact that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span> is nonzero to properly flip the fraction). That actually worked for the function definition, but now I'm very stuck on the proof that the function respects the equivalence relation. Is it possible to make use of predicates in this way when lifting a function to a quotient?</p>\n<p>Two other people have had very similar questions:</p>\n<ul>\n<li><a href=\"#narrow/stream/113489-new-members/topic/Quotients.20and.20passing.20an.20inequality.20around\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Quotients.20and.20passing.20an.20inequality.20around</a></li>\n<li><a href=\"#narrow/stream/113488-general/topic/.E2.9C.94.20Case.20distinction.20in.20definition\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/.E2.9C.94.20Case.20distinction.20in.20definition</a></li>\n</ul>\n<p>Here's a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>. I converted the quotient integers I'm using to mathlib's integers, and it should be easy to convert back if I can get the mathlib version working.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">NonZeroInteger</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">//</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">RationalEquivalent</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ℤ</span> <span class=\"bp\">×</span> <span class=\"n\">NonZeroInteger</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">ℤ</span> <span class=\"bp\">×</span> <span class=\"n\">NonZeroInteger</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩),</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">RationalEquivalent.reflexive</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">RationalEquivalent</span> <span class=\"n\">a</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">RationalEquivalent.symmetric</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">},</span> <span class=\"n\">RationalEquivalent</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">RationalEquivalent</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩)</span> <span class=\"n\">h_ab_cd</span>\n  <span class=\"k\">have</span> <span class=\"n\">h_ab_cd'</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">h_ab_cd</span>\n  <span class=\"k\">show</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">d</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Eq.symm</span> <span class=\"n\">h_ab_cd'</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">RationalEquivalent.transitive</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">},</span> <span class=\"n\">RationalEquivalent</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">RationalEquivalent</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">RationalEquivalent</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">b_nonzero</span><span class=\"o\">⟩)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">d_nonzero</span><span class=\"o\">⟩)</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩)</span>\n  <span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">h_ab_cd</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_cd_ef</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"bp\">*</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n  <span class=\"k\">show</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"bp\">*</span> <span class=\"n\">b</span>\n  <span class=\"n\">cases</span> <span class=\"n\">Int.decEq</span> <span class=\"n\">c</span> <span class=\"mi\">0</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">isTrue</span> <span class=\"n\">c_zero</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">ad_zero</span> <span class=\"o\">:=</span> <span class=\"n\">c_zero</span> <span class=\"bp\">▸</span> <span class=\"n\">h_ab_cd</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Int.zero_mul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ad_zero</span>\n    <span class=\"k\">have</span> <span class=\"n\">a_zero</span> <span class=\"o\">:=</span> <span class=\"n\">Or.resolve_right</span> <span class=\"o\">(</span><span class=\"n\">Int.eq_zero_or_eq_zero_of_mul_eq_zero</span> <span class=\"n\">ad_zero</span><span class=\"o\">)</span> <span class=\"n\">d_nonzero</span>\n    <span class=\"k\">have</span> <span class=\"n\">ed_zero</span> <span class=\"o\">:=</span> <span class=\"n\">c_zero</span> <span class=\"bp\">▸</span> <span class=\"n\">h_cd_ef</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Int.zero_mul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ed_zero</span>\n    <span class=\"k\">have</span> <span class=\"n\">e_zero</span> <span class=\"o\">:=</span> <span class=\"n\">Or.resolve_right</span> <span class=\"o\">(</span><span class=\"n\">Int.eq_zero_or_eq_zero_of_mul_eq_zero</span> <span class=\"n\">ed_zero.symm</span><span class=\"o\">)</span> <span class=\"n\">d_nonzero</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">a_zero</span><span class=\"o\">,</span> <span class=\"n\">e_zero</span><span class=\"o\">,</span> <span class=\"n\">Int.mul_zero</span><span class=\"o\">,</span> <span class=\"n\">Int.zero_mul</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">isFalse</span> <span class=\"n\">c_nonzero</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">h_equal</span> <span class=\"o\">:=</span> <span class=\"k\">calc</span>\n      <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Int.mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">Int.mul_comm</span><span class=\"o\">,</span> <span class=\"n\">Int.mul_left_comm</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">*</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">congrArg</span> <span class=\"o\">(</span><span class=\"bp\">.</span> <span class=\"bp\">*</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">h_cd_ef</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">*</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">congrArg</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">*</span> <span class=\"bp\">.</span><span class=\"o\">)</span> <span class=\"n\">h_ab_cd</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Int.mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">Int.mul_comm</span><span class=\"o\">,</span> <span class=\"n\">Int.mul_left_comm</span><span class=\"o\">]</span>\n    <span class=\"k\">have</span> <span class=\"n\">cd_nonzero</span> <span class=\"o\">:=</span> <span class=\"n\">Int.mul_ne_zero</span> <span class=\"n\">c_nonzero</span> <span class=\"n\">d_nonzero</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Int.eq_of_mul_eq_mul_left</span> <span class=\"n\">cd_nonzero</span> <span class=\"n\">h_equal</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">RationalEquivalent.is_equivalence</span> <span class=\"o\">:</span> <span class=\"n\">Equivalence</span> <span class=\"n\">RationalEquivalent</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">:=</span> <span class=\"n\">RationalEquivalent.reflexive</span><span class=\"o\">,</span> <span class=\"n\">symm</span> <span class=\"o\">:=</span> <span class=\"n\">RationalEquivalent.symmetric</span><span class=\"o\">,</span> <span class=\"n\">trans</span> <span class=\"o\">:=</span> <span class=\"n\">RationalEquivalent.transitive</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instanceHasEquivRationalEquivalent</span> <span class=\"o\">:</span> <span class=\"n\">HasEquiv</span> <span class=\"o\">(</span><span class=\"n\">Int</span> <span class=\"bp\">×</span> <span class=\"n\">NonZeroInteger</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">Equiv</span> <span class=\"o\">:=</span> <span class=\"n\">RationalEquivalent</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instanceSetoidRationalEquivalent</span> <span class=\"o\">:</span> <span class=\"n\">Setoid</span> <span class=\"o\">(</span><span class=\"n\">Int</span> <span class=\"bp\">×</span> <span class=\"n\">NonZeroInteger</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">RationalEquivalent</span>\n  <span class=\"n\">iseqv</span> <span class=\"o\">:=</span> <span class=\"n\">RationalEquivalent.is_equivalence</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">RationalEquivalent.definition</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">≈</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">RationalEquivalent</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Rational</span> <span class=\"o\">:=</span> <span class=\"n\">Quotient</span> <span class=\"n\">instanceSetoidRationalEquivalent</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">Rational</span> <span class=\"n\">n</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"bp\">⟦</span><span class=\"o\">(</span><span class=\"n\">Int.ofNat</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">⟩)</span><span class=\"bp\">⟧</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">reciprocal</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Rational</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">Rational</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">reciprocal'</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">×</span> <span class=\"n\">NonZeroInteger</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a_nonzero</span> <span class=\"o\">:</span> <span class=\"bp\">⟦</span><span class=\"n\">a</span><span class=\"bp\">⟧</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">Rational</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">a1_nonzero</span> <span class=\"o\">:</span> <span class=\"n\">a.1</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span>\n      <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"k\">calc</span>\n        <span class=\"n\">a.1</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a.1</span> <span class=\"o\">:=</span> <span class=\"n\">Int.mul_one</span> <span class=\"n\">_</span>\n        <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n        <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">a.2.val</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Int.zero_mul</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n      <span class=\"n\">exact</span> <span class=\"n\">a_nonzero</span> <span class=\"o\">(</span><span class=\"n\">Quotient.sound</span> <span class=\"n\">this</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n    <span class=\"c1\">-- Couldn't get it to type check without being overly explicit</span>\n    <span class=\"n\">Quotient.mk</span> <span class=\"n\">instanceSetoidRationalEquivalent</span> <span class=\"o\">(</span><span class=\"n\">a.2.val</span><span class=\"o\">,</span> <span class=\"o\">({</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">a.1</span><span class=\"o\">,</span> <span class=\"n\">property</span> <span class=\"o\">:=</span> <span class=\"n\">a1_nonzero</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">NonZeroInteger</span><span class=\"o\">))</span>\n  <span class=\"n\">Quotient.recOn</span> <span class=\"n\">a</span> <span class=\"n\">reciprocal'</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- How to close this goal? Use `Quotient.hrecOn`? Applying `heq_of_eq` doesn't seem to work</span>\n  <span class=\"n\">skip</span>\n</code></pre></div>",
        "id": 424806294,
        "sender_full_name": "Jackson Brough",
        "timestamp": 1709621729
    },
    {
        "content": "<p>I think that whichever solution you reach, you'll always be happy to extract your</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">reciprocal'</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">×</span> <span class=\"n\">NonZeroInteger</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a_nonzero</span> <span class=\"o\">:</span> <span class=\"bp\">⟦</span><span class=\"n\">a</span><span class=\"bp\">⟧</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">Rational</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">a1_nonzero</span> <span class=\"o\">:</span> <span class=\"n\">a.1</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span>\n      <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"k\">calc</span>\n        <span class=\"n\">a.1</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a.1</span> <span class=\"o\">:=</span> <span class=\"n\">Int.mul_one</span> <span class=\"n\">_</span>\n        <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n        <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">a.2.val</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Int.zero_mul</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n      <span class=\"n\">exact</span> <span class=\"n\">a_nonzero</span> <span class=\"o\">(</span><span class=\"n\">Quotient.sound</span> <span class=\"n\">this</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>into a helper lemma.</p>",
        "id": 424809605,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709623535
    },
    {
        "content": "<p>And maybe you even want to phrase it as an iff?</p>",
        "id": 424809695,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709623586
    },
    {
        "content": "<p>The \"party line\" would be to define reciprocal on all rationals, and define the reciprocal of zero to be zero. If you don't like that then try it anyway, and define your reciprocal using it. Does this approach fix the problem in your case or just move it?</p>",
        "id": 424813617,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709625606
    },
    {
        "content": "<p>PS I would be tempted to make <code>NonZeroInteger</code> an <code>abbrev</code> rather than a <code>def</code> because it's just an abbreviation rather than something you want to develop an API for</p>",
        "id": 424813807,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709625670
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">RationalEquivalent.symmetric</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">},</span> <span class=\"n\">RationalEquivalent</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">RationalEquivalent</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩)</span> <span class=\"n\">h_ab_cd</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h_ab_cd.symm</span>\n</code></pre></div>\n<p>or even</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">RationalEquivalent.symmetric</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">RationalEquivalent</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">RationalEquivalent</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n  <span class=\"n\">h.symm</span>\n</code></pre></div>",
        "id": 424824501,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709629720
    },
    {
        "content": "<p>Here's an approach which makes it less painful:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">prereciprocal</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">×</span> <span class=\"n\">NonZeroInteger</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Rational</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x.1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"bp\">⟦</span><span class=\"o\">(</span><span class=\"n\">x.2.1</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">x.1</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩)</span><span class=\"bp\">⟧</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">prereciprocal_zero</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">×</span> <span class=\"n\">NonZeroInteger</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x.1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">prereciprocal</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">prereciprocal</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">prereciprocal_ne_zero</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">×</span> <span class=\"n\">NonZeroInteger</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x.1</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">prereciprocal</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">⟦</span><span class=\"o\">(</span><span class=\"n\">x.2.1</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">x.1</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩)</span><span class=\"bp\">⟧</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">prereciprocal</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">reciprocal</span> <span class=\"o\">:</span> <span class=\"n\">Rational</span> <span class=\"bp\">→</span> <span class=\"n\">Rational</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Quotient.lift</span> <span class=\"n\">prereciprocal</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"o\">⟨</span><span class=\"n\">a1</span><span class=\"o\">,</span> <span class=\"n\">a2</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">b1</span><span class=\"o\">,</span> <span class=\"n\">b2</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">⟩</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a1</span> <span class=\"bp\">*</span> <span class=\"n\">b2</span> <span class=\"bp\">=</span> <span class=\"n\">b1</span> <span class=\"bp\">*</span> <span class=\"n\">a2</span><span class=\"o\">)</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">eq_or_ne</span> <span class=\"n\">a1</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rcases</span> <span class=\"n\">eq_or_ne</span> <span class=\"n\">b1</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp_all</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Quotient.eq</span><span class=\"o\">]</span>\n  <span class=\"n\">change</span> <span class=\"n\">a2</span> <span class=\"bp\">*</span> <span class=\"n\">b1</span>  <span class=\"bp\">=</span> <span class=\"n\">b2</span> <span class=\"bp\">*</span> <span class=\"n\">a1</span>\n  <span class=\"n\">polyrith</span>\n</code></pre></div>",
        "id": 424826867,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709630597
    },
    {
        "content": "<p>And if you like you can call that <code>reciprocal'</code> and define your reciprocal to be my reciprocal but with the random extra hypothesis that the input isn't 0.</p>",
        "id": 424827696,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709630897
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">RationalEquivalent.transitive</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">},</span> <span class=\"n\">RationalEquivalent</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">RationalEquivalent</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">RationalEquivalent</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">b_nonzero</span><span class=\"o\">⟩)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">d_nonzero</span><span class=\"o\">⟩)</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩)</span>\n  <span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">h_ab_cd</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_cd_ef</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"bp\">*</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n  <span class=\"n\">apply</span> <span class=\"n\">mul_left_cancel₀</span> <span class=\"n\">d_nonzero</span>\n  <span class=\"n\">polyrith</span>\n</code></pre></div>",
        "id": 424835260,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709633537
    },
    {
        "content": "<p>Sorry it took me so long to reply! Thank you both for your suggestions, it's always really great to get code/proof suggestions from people with more experience. The transitivity and reciprocal'-respects proofs are both very clean.</p>",
        "id": 425419821,
        "sender_full_name": "Jackson Brough",
        "timestamp": 1709856567
    },
    {
        "content": "<p>I defined reciprocal using the \"party line\" method, and this definitely works. I am encouraged by the <code>prereciprocal_ne_zero</code> theorem; I think this should make proving theorems about reciprocal relatively painless.</p>",
        "id": 425419847,
        "sender_full_name": "Jackson Brough",
        "timestamp": 1709856590
    },
    {
        "content": "<p>Part of my motivation for asking was that I have another case with essentially the same problem. I'm trying to define conversions between the natural numbers and the positive integers (constructed using quotients) and then showing that they are inverses of each other. I tried to apply the same case split method but using an <code>Option</code> instead of zero, and this almost works. The issue is in the \"_left_inverse\" proofs at the very bottom. It's a bit silly, but is there a reason the simplifier can't close the goals?</p>",
        "id": 425419945,
        "sender_full_name": "Jackson Brough",
        "timestamp": 1709856625
    },
    {
        "content": "<p>Unfortunately my code sample is pretty large. I did replace any proofs longer than two lines with <code>sorry</code> for brevity. If I can get the last two proofs to type check, I'm satisfied with this approach, but is it possible to avoid the case split entirely?</p>",
        "id": 425420248,
        "sender_full_name": "Jackson Brough",
        "timestamp": 1709856806
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">IntegerEquivalent</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">m</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">IntegerEquivalent.reflexive</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">IntegerEquivalent</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">IntegerEquivalent.symmetric</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">},</span> <span class=\"n\">IntegerEquivalent</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">IntegerEquivalent</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Eq.symm</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">IntegerEquivalent.transitive</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">},</span> <span class=\"n\">IntegerEquivalent</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">IntegerEquivalent</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">IntegerEquivalent</span> <span class=\"n\">x</span> <span class=\"n\">z</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">add_left_cancel</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">))</span>\n    <span class=\"n\">linarith</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">IntegerEquivalent.is_equivalence</span> <span class=\"o\">:</span> <span class=\"n\">Equivalence</span> <span class=\"n\">IntegerEquivalent</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">:=</span> <span class=\"n\">IntegerEquivalent.reflexive</span><span class=\"o\">,</span> <span class=\"n\">symm</span> <span class=\"o\">:=</span> <span class=\"n\">IntegerEquivalent.symmetric</span><span class=\"o\">,</span> <span class=\"n\">trans</span> <span class=\"o\">:=</span> <span class=\"n\">IntegerEquivalent.transitive</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instanceHasEquivIntegerEquivalent</span> <span class=\"o\">:</span> <span class=\"n\">HasEquiv</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">Equiv</span> <span class=\"o\">:=</span> <span class=\"n\">IntegerEquivalent</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instanceSetoidIntegerEquivalent</span> <span class=\"o\">:</span> <span class=\"n\">Setoid</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">IntegerEquivalent</span>\n  <span class=\"n\">iseqv</span> <span class=\"o\">:=</span> <span class=\"n\">IntegerEquivalent.is_equivalence</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Integer</span> <span class=\"o\">:=</span> <span class=\"n\">Quotient</span> <span class=\"n\">instanceSetoidIntegerEquivalent</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Integer</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">ofNat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Integer</span> <span class=\"o\">:=</span> <span class=\"bp\">⟦</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">⟧</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ofNat_definition</span> <span class=\"o\">:</span> <span class=\"n\">ofNat</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">Quotient.mk</span> <span class=\"n\">instanceSetoidIntegerEquivalent</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Zero</span> <span class=\"o\">:</span> <span class=\"n\">Integer</span> <span class=\"o\">:=</span> <span class=\"bp\">⟦</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">⟧</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">One</span> <span class=\"o\">:</span> <span class=\"n\">Integer</span> <span class=\"o\">:=</span> <span class=\"bp\">⟦</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">⟧</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">Integer</span> <span class=\"n\">n</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"bp\">⟦</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">⟧</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"n\">Nat</span> <span class=\"n\">Integer</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">ofNat</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ofNat_injective</span> <span class=\"o\">:</span> <span class=\"n\">Function.Injective</span> <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.add_zero</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">Quotient.exact</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_zero</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">Integer</span> <span class=\"bp\">→</span> <span class=\"n\">Integer</span> <span class=\"bp\">→</span> <span class=\"n\">Integer</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">add'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">((</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n  <span class=\"n\">Quotient.map₂</span> <span class=\"n\">add'</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">Integer</span> <span class=\"n\">where</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">add</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">theorem</span> <span class=\"n\">add_definition</span> <span class=\"o\">:</span> <span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">add_commutative</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Integer</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">add_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Integer</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">zero_add</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Integer</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_commutative</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">LessEqual</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Integer</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LE</span> <span class=\"n\">Integer</span> <span class=\"n\">where</span>\n  <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"n\">LessEqual</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ofNat_nonnegative</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">Integer</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Exists.intro</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">zero_add</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">NonNegativeInteger</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Integer</span> <span class=\"bp\">//</span> <span class=\"n\">a</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n\n<span class=\"c1\">-- Didn't find any Nat lemmas that looked like this</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Nat.left_greater_equal_of_add_right_less_equal</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Nat.right_greater_equal_of_add_left_less_equal</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"bp\">≥</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- Important stuff starts here</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">preToNatural'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">ℕ</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">m</span> <span class=\"k\">then</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">none</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">preToNatural_none</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x.1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x.2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">preToNatural'</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">not_le_of_gt</span> <span class=\"n\">h</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">preToNatural'</span><span class=\"o\">,</span> <span class=\"n\">not_le_of_gt</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">preToNatural_some</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x.1</span> <span class=\"bp\">≥</span> <span class=\"n\">x.2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">preToNatural'</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">x.1</span> <span class=\"bp\">-</span> <span class=\"n\">x.2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">preToNatural'</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">toNatural'</span> <span class=\"o\">:</span> <span class=\"n\">Integer</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Quotient.lift</span> <span class=\"n\">preToNatural'</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">preToNatural'</span><span class=\"o\">,</span> <span class=\"n\">preToNatural_none</span><span class=\"o\">,</span> <span class=\"n\">preToNatural_some</span><span class=\"o\">]</span>\n  <span class=\"n\">cases</span> <span class=\"n\">Decidable.em</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">Decidable.em</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n  <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">preToNatural'</span><span class=\"o\">,</span> <span class=\"n\">preToNatural_none</span><span class=\"o\">,</span> <span class=\"n\">preToNatural_some</span><span class=\"o\">,</span> <span class=\"n\">ite_true</span><span class=\"o\">,</span> <span class=\"n\">ite_false</span><span class=\"o\">]</span>\n  <span class=\"n\">case</span> <span class=\"n\">inl.inl</span> <span class=\"n\">hnm</span> <span class=\"n\">hkl</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">apply</span> <span class=\"n\">congrArg</span> <span class=\"n\">some</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Nat.add_right_cancel</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.add_assoc</span><span class=\"o\">,</span> <span class=\"n\">Nat.sub_add_cancel</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Nat.sub_add_cancel</span> <span class=\"n\">hkl</span><span class=\"o\">,</span>\n      <span class=\"n\">Nat.add_assoc</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_comm</span> <span class=\"n\">l</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">Nat.sub_add_cancel</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hkl</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hnm</span>\n  <span class=\"n\">case</span> <span class=\"n\">inl.inr</span> <span class=\"n\">hnm</span> <span class=\"n\">hkl</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_comm</span> <span class=\"n\">k</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.right_greater_equal_of_add_left_less_equal</span> <span class=\"n\">h.symm</span> <span class=\"n\">hnm</span>\n    <span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"n\">this</span> <span class=\"n\">hkl</span>\n  <span class=\"n\">case</span> <span class=\"n\">inr.inl</span> <span class=\"n\">hnm</span> <span class=\"n\">hkl</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_comm</span> <span class=\"n\">n</span> <span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.right_greater_equal_of_add_left_less_equal</span> <span class=\"n\">h</span> <span class=\"n\">hkl</span>\n    <span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"n\">this</span> <span class=\"n\">hnm</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">toNatural</span> <span class=\"o\">:</span> <span class=\"n\">NonNegativeInteger</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a_nonnegative</span><span class=\"o\">⟩)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">o</span> <span class=\"o\">:=</span> <span class=\"n\">toNatural'</span> <span class=\"n\">a</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Option.isSome</span> <span class=\"n\">o</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">a_nonnegative</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"n\">ofNat</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hn</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Option.isSome</span><span class=\"o\">,</span> <span class=\"n\">toNatural'</span><span class=\"o\">,</span> <span class=\"n\">o</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">Quotient.lift_mk</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">preToNatural'</span><span class=\"o\">]</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.zero_le</span> <span class=\"n\">n</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">sub_zero</span><span class=\"o\">,</span> <span class=\"n\">ite_true</span><span class=\"o\">,</span> <span class=\"n\">Option.isSome</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n    <span class=\"k\">match</span> <span class=\"n\">o</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fromNatural</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">NonNegativeInteger</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">ofNat_nonnegative</span> <span class=\"n\">n</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">fromNatural_toNatural_left_inverse</span> <span class=\"o\">:</span> <span class=\"n\">Function.LeftInverse</span> <span class=\"n\">toNatural</span> <span class=\"n\">fromNatural</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fromNatural</span><span class=\"o\">,</span> <span class=\"n\">ofNat</span><span class=\"o\">,</span> <span class=\"n\">toNatural</span><span class=\"o\">,</span> <span class=\"n\">toNatural'</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">preToNatural_some</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Nat.zero_le</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">sub_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">toNatural_fromNatural_left_inverse</span> <span class=\"o\">:</span> <span class=\"n\">Function.LeftInverse</span> <span class=\"n\">fromNatural</span> <span class=\"n\">toNatural</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">Function.LeftInverse</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">toNatural</span><span class=\"o\">,</span> <span class=\"n\">toNatural'</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 425420278,
        "sender_full_name": "Jackson Brough",
        "timestamp": 1709856825
    }
]