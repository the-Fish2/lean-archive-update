[
    {
        "content": "<p>Hi,<br>\nI've been trying to do some work on graphs in Lean and further develop what is currently in the Mathlib library. The todo section in the Basic.lean file under simple graphs says:</p>\n<p>\"This is the simplest notion of an unoriented graph.  This should eventually fit into a more complete combinatorics hierarchy which includes multigraphs and directed graphs.  We begin with simple graphs in order to start learning what the combinatorics hierarchy should look like.\"</p>\n<p>The current definition of the adjacency relation in a simple graph is: </p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">Adj</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>If a larger graph hierarchy were to be made, is there any consensus on how to regard this as a multigraph?</p>",
        "id": 445139319,
        "sender_full_name": "Jack Cheverton",
        "timestamp": 1718632841
    },
    {
        "content": "<p>Actually the SimpleGraph structure includes the fact that the adjacency relation is both symmetric and irreflexive. If you remove the symmetry hypothesis, you get directed graphs (still without loops); if you remove the irreflexivity hypothesis, you allow loops.</p>\n<p>I don't think multigraphs can fit into this. But if you want to add, say, directed simple graphs, my (neophyte) feeling is that SimpleGraph would have to extend SimpleDirectedGraph.</p>\n<p>(My background is in a world where \"graph\" really means \"finite graph\", but of course Mathlib seems to make things as general as possible and as a consequence finiteness is always an added layer of complexity)</p>",
        "id": 445147158,
        "sender_full_name": "Philippe Duchon",
        "timestamp": 1718634665
    },
    {
        "content": "<p>There was a lot a discussion a year or so ago (here on Zulip in the graph theory channel) about refactoring the graph theory part of mathlib, with a view towards multigraphs, directed graphs, weighted graphs, hypergraphs and so on. I'm not sure what the current status of the refactor is.</p>\n<p>As it is, it is indeed confusing that e.g. <code>SimpleGraph</code> is a basic object rather than a <code>Graph</code> that happens to <code>isSimple</code>.</p>\n<p>One possible direction would be to reimplement the basic definitions using Serre's definition of a graph instead of an adjacency relation, it seems that building a hierarchy on top of that could be more feasible. That could be a fun project to try this out.</p>",
        "id": 445154094,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1718636468
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"242586\">@Vincent Beffara</span> : this is a very nice project idea. Interestingly, <span class=\"user-mention\" data-user-id=\"729314\">@Jack Cheverton</span>  found a rather large PR attempt trying to do just this. It was determined that there was too much overlap with the Quiver files in mathlib, and so the PR was closed unmerged. It seems funny that mathlib contains a definition of <code>SimpleGraph</code> and a definition of <code>Quiver</code> but nothing in between. Would it make sense to PR a file that defines <code>Graph</code> as an instance of <code>Quiver</code> that incorporates extra conditions? Is there a reason <em>not</em> to try this? It seems to me that if someone tries to Moogle <code>Graph</code> and finds nothing, that's strange. Is there some trouble with universes or something blocking this? (I am talking off-the-cuff here, since I don't know even if Quiver is a typeclass...)</p>",
        "id": 445180259,
        "sender_full_name": "Jon Bannon",
        "timestamp": 1718643379
    },
    {
        "content": "<p>Can confirm what <span class=\"user-mention\" data-user-id=\"462733\">@Jon Bannon</span> is saying.</p>",
        "id": 445185261,
        "sender_full_name": "Jack Cheverton",
        "timestamp": 1718644901
    },
    {
        "content": "<blockquote>\n<p>Would it make sense to PR a file that defines <code>Graph</code> as an instance of <code>Quiver</code> that incorporates extra conditions?</p>\n</blockquote>\n<p>An issue with <code>Quiver</code> for graph theory is that this is a typeclass whose instances associate edges to a given vertex type. This makes it awkward to talk about multiple graphs with the same vertex type, and in fact it makes it <em>incorrect</em> to do so since typeclass instances are supposed to be canonical.</p>\n<p>I see talk in this thread about trying to make a hierarchy involving <code>extend</code>ing structures, but I don't think this will be workable (this is my opinion after thinking about how to do this for a few years). There are too many flavors of combinatorial objects, and a one-size-fits-all approach to try to come up with general structures is not possible.</p>\n<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/4127\">mathlib4#4127</a> I started a project to make a Digraph type and some graph interface typeclasses, and generalize SimpleGraph material to work with these typeclasses. I made some mistakes having these typeclasses involve types that are too dependent and ran into issues down the line with simp failing in some basic cases, but I think with some minor redesign it would be workable.</p>\n<p>You can think about these typeclasses as being like a parameterized <code>Quiver</code>. Each graph object contains the data for how the vertices are connected, and you ought to supply that rather than leaving it implicit.</p>",
        "id": 445191848,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718647102
    },
    {
        "content": "<p>I am not a graph theorist, but those I talk to on a regular basis tend to manipulate various flavors of graphs (simple or multi, unoriented or not, weighted or not - also planar or not, but that is probably another matter) according to the problem at hand - but I have never heard any of them talk of a quiver (and I don't know what it is either). So if graphs are defined in terms of quivers, my feeling is that the interface for \"just graphs\" had better be really transparent, or getting them interested in formalizing their results will be even harder.</p>",
        "id": 445208989,
        "sender_full_name": "Philippe Duchon",
        "timestamp": 1718652639
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"726077\">@Philippe Duchon</span> A quiver is a directed multigraph (with distinguishable edges -- sometimes multigraphs are defined to be a function V -&gt; V -&gt; Nat with indistinguishable edges, so it's worth mentioning this). The word comes from representation theory or category theory, and it's so-named because a quiver in archery is a collection of arrows (the edges, but with a category theory point of view).</p>",
        "id": 445212190,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718653675
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"729314\">@Jack Cheverton</span>  is my undergrad research student, and is interested in working toward being able to contribute some basic things to mathlib. <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> , is there a specific few definitions where the dependent type hell is concentrated that I could try to think about fixing with Jack, for experience's sake? If not, we will step through the main file and look at your design.</p>",
        "id": 445218289,
        "sender_full_name": "Jon Bannon",
        "timestamp": 1718655896
    },
    {
        "content": "<p>It's been awhile and I don't remember the exact details, but for example <a href=\"https://github.com/leanprover-community/mathlib4/pull/4127/files#diff-fe0532c2bbc700795928c8fe1cdb0a7a07bd69b3d8a97117c08f0f84b159b091R913\">this technical lemma</a> was there to put something into the correct form so that a simp lemma was applicable.</p>\n<p>This is all for the sake of making a uniform interface. To some degree I think it's also fine to move forward and define various graph objects and try to unify later.</p>\n<p>In case it's helpful, there's a Digraph type at <a href=\"https://github.com/kmill/msri2023_graphs/tree/main/GraphProjects\">https://github.com/kmill/msri2023_graphs/tree/main/GraphProjects</a> from taking much of the SimpleGraph material and adapting it.</p>",
        "id": 445220573,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718656695
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> : Thanks for pointing us to the lemma. We will look at these and perhaps to try to make some small contributions, awaiting the later unification effort. Will try to stay close to what you have designed thus far.</p>",
        "id": 445230246,
        "sender_full_name": "Jon Bannon",
        "timestamp": 1718660424
    },
    {
        "content": "<p>@Kyle Miller Would it be alright if I worked on porting what you've done into Mathlib? I'm looking to get some practice into going through the PR process and I think trying to submit this would be useful. Plus, it seems like this is the most well thought out attempt of designing digraphs currently available.</p>",
        "id": 445406164,
        "sender_full_name": "Jack Cheverton",
        "timestamp": 1718728156
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"729314\">@Jack Cheverton</span> Sure (and Zulip tip: the syntax to ping someone is <code>@**Jack Cheverton**</code> with the asterisks).</p>\n<p>How about this:</p>\n<ol>\n<li>Take a chunk of <code>Digraph.lean</code> (100-300 lines) and create <code>Mathlib/Combinatorics/Digraph/Basic.lean</code></li>\n<li>Carefully compare this to what's in <code>Mathlib/Combinatorics/SimpleGraph/Basic.lean</code> to see if anything has changed for SimpleGraph in the meantime (you can look at <a href=\"https://github.com/leanprover-community/mathlib4/commits/master/Mathlib/Combinatorics/SimpleGraph/Basic.lean\">the file history</a> to help with this)</li>\n<li>Create the PR and request my review.</li>\n</ol>\n<p>Something I think I'm going to try to organize this summer is a group project to get graph theory moving, with a goal being to finally have all the basic graph types. Be sure to join the <a class=\"stream\" data-stream-id=\"252551\" href=\"/#narrow/stream/252551-graph-theory\">#graph theory</a> channel!</p>",
        "id": 445411403,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718729446
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> May I have permission to push branches up to Mathlib? My GitHub username is jt18chev</p>",
        "id": 445862206,
        "sender_full_name": "Jack Cheverton",
        "timestamp": 1718893301
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"729314\">@Jack Cheverton</span> please see <a href=\"https://github.com/leanprover-community/mathlib4/invitations\">https://github.com/leanprover-community/mathlib4/invitations</a></p>",
        "id": 445890144,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1718900013
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>  Question for you about credit and the PR process: would there be any issue with me listing you as an author in the Digraph file and you reviewing that same file? It seems to me like there could be a potential conflict of interest. If that would be an issue, do you have any ideas of how to cleanly go about doing this?</p>",
        "id": 446074681,
        "sender_full_name": "Jack Cheverton",
        "timestamp": 1718973465
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"729314\">@Jack Cheverton</span> There's no problem with that. The \"authors\" list is meant to be \"who would be good people to talk to about this file?\"</p>",
        "id": 446134019,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1718990947
    },
    {
        "content": "<p>Kyle can always ask for a second set of eyes from other maintainers if he feels he has contributed too much to the code. This happens regularly.</p>",
        "id": 446143569,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1718994126
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> I submitted a PR for the Digraph file and set you as a reviewer. However, I just found a major issue with the file. It previously allowed for vertices to connect into themselves, but this would make it into a directed multigraph rather than just a standard digraph. So for the time being you can ignore that PR and I'll ping you when it's ready.</p>",
        "id": 446659190,
        "sender_full_name": "Jack Cheverton",
        "timestamp": 1719245811
    },
    {
        "content": "<p>Actually, it might be better to have the standard Digraph allow loops and then define some sort of Simple Digraph later that doesn't.  So that PR should actually be ready for review now. Sorry for the confusion!</p>",
        "id": 446665710,
        "sender_full_name": "Jack Cheverton",
        "timestamp": 1719247724
    },
    {
        "content": "<p>If you want the PR to be ignored you can just close it with an explanation there, that will definitely do the trick! You can reopen it later if you decide to fix it up.</p>",
        "id": 446785197,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1719295048
    }
]