[
    {
        "content": "<p>Hi, my Name is Ingo Runkel and I work at the Math Department in Hamburg. We did run a beginners seminar on Lean to get to know the basics, and to practice it more I am trying to put some simple things about Hopf algebras into Lean (<a href=\"https://github.com/irunkel/HopfAlgebras\">https://github.com/irunkel/HopfAlgebras</a>). As expected, there are many small and (to me) big issues, and I would be happy to get some hints.<br>\nHere is a small one: The convolution algebra on a Hopf algebra H over R is build from linear endomorphism on H. I wanted to hide R and H, but it seems to be necessary to provide them anyway in many places, e.g.:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.TensorProduct.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">TensorProduct</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">H</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">H</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">convAlg</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">LinearMap</span> <span class=\"o\">(</span><span class=\"n\">RingHom.id</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">H</span> <span class=\"n\">H</span>\n<span class=\"c1\">-- fails (typeclass instance problem is stuck):</span>\n<span class=\"c1\">-- instance : AddCommMonoid convAlg := inferInstanceAs (AddCommMonoid (LinearMap (RingHom.id R) H H))</span>\n<span class=\"c1\">-- works:</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">AddCommMonoid</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">convAlg</span> <span class=\"n\">R</span> <span class=\"n\">_</span> <span class=\"n\">H</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstanceAs</span> <span class=\"o\">(</span><span class=\"n\">AddCommMonoid</span> <span class=\"o\">(</span><span class=\"n\">LinearMap</span> <span class=\"o\">(</span><span class=\"n\">RingHom.id</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">H</span> <span class=\"n\">H</span><span class=\"o\">))</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">convAlg</span> <span class=\"n\">R</span> <span class=\"n\">_</span> <span class=\"n\">H</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstanceAs</span> <span class=\"o\">(</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">LinearMap</span> <span class=\"o\">(</span><span class=\"n\">RingHom.id</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">H</span> <span class=\"n\">H</span><span class=\"o\">))</span>\n<span class=\"c1\">-- fails (typeclass instance problem is stuck):</span>\n<span class=\"c1\">-- noncomputable def convAlg_mul : convAlg ⊗[R] convAlg →ₗ[R] convAlg := sorry</span>\n<span class=\"c1\">-- works:</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">convAlg_mul</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">convAlg</span> <span class=\"n\">R</span> <span class=\"n\">_</span> <span class=\"n\">H</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">convAlg</span> <span class=\"n\">R</span> <span class=\"n\">_</span> <span class=\"n\">H</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">convAlg</span> <span class=\"n\">R</span> <span class=\"n\">_</span> <span class=\"n\">H</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 434199625,
        "sender_full_name": "Ingo Runkel",
        "timestamp": 1713458215
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span></p>",
        "id": 434212757,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1713463270
    },
    {
        "content": "<p>Re your code: you should probably make R and H explicit in your variables, and make convAlg an <code>abbrev</code> not a def, because then typeclass inference can see through the definition and then you probably won't need all the instances.</p>\n<p>I have students at Imperial working on Hopf algebras so it might be best to coordinate.</p>",
        "id": 434231379,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1713471284
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Self-Introduction/near/434231379\">said</a>:</p>\n<blockquote>\n<p>Re your code: you should probably make R and H explicit in your variables, and make convAlg an <code>abbrev</code> not a def, because then typeclass inference can see ...</p>\n</blockquote>\n<p>Thank you. Yes, in the code above one no longer needs the instances if one uses <code>abbrev</code>, but one still needs to write <code>@convAlg R _ H _ _</code> rather than just <code>convAlg</code>, at least in the snippet above.<br>\nOne reason I went with <code>def</code> was that I actually did not want Lean to find all the pre-set instances. E.g. <code>End(H)</code> is already an algebra with respect to composition, but that is not the algebra structure I want and I was not sure if the two would interfere. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Algebra.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">H</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">H</span><span class=\"o\">]</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">convAlg</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">LinearMap</span> <span class=\"o\">(</span><span class=\"n\">RingHom.id</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">H</span> <span class=\"n\">H</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">inferInstanceAs</span> <span class=\"o\">(</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">convAlg</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The Hopf algebra project is more of a hobby for me and I am not really planning to get to a specific point, but I would indeed by interested to see what your student is doing and how, if your student does not mind.</p>",
        "id": 434296548,
        "sender_full_name": "Ingo Runkel",
        "timestamp": 1713509421
    },
    {
        "content": "<p>There are ten open mathlib4 PRs by user 101damnations, most of them blocked by earlier PRs, but there you can see what's happening</p>",
        "id": 434337544,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1713524218
    },
    {
        "content": "<p>Thank you, I will have a look.</p>",
        "id": 434350325,
        "sender_full_name": "Ingo Runkel",
        "timestamp": 1713529177
    }
]