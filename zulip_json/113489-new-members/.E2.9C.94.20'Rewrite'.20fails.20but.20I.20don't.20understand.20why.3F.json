[
    {
        "content": "<p>Hi Lean community! Coming back here after a few years away; I'm trying to prove that, for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> a nonzero natural number, the integer <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup><mo>−</mo><mn>7</mn></mrow><annotation encoding=\"application/x-tex\">2^n - 7</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7477em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">7</span></span></span></span> is odd.</p>\n<p>The file <code>Mathlib/Data/Int/Parity.lean</code> seems to  have the relevant results, and I was trying to use <code>odd_sub</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Parity</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Parity</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">Odd</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span> <span class=\"n\">h</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">Int.odd_sub</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"mi\">7</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Lean 's complaint is that <code>tactic 'rewrite' failed, did not find instance of the pattern in the target expression: Odd (2 ^ n - 7)</code>; but this is exactly the goal here, so I don't understand what the error message means here?</p>\n<p>(The context of this question is that, as an exercise to get back into Lean, I'm trying to formalise the proof of the <a href=\"https://en.wikipedia.org/wiki/Ramanujan%E2%80%93Nagell_equation\">Ramanujan-Nagell theorem</a>.)</p>",
        "id": 433805758,
        "sender_full_name": "Barinder S Banwait",
        "timestamp": 1713366570
    },
    {
        "content": "<p>The gotcha is that Lean defaults to Nat. If you give it a hint, then it goes through:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">Odd</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">7</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span> <span class=\"n\">h</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Int.odd_sub</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- ⊢ Odd (2 ^ n) ↔ Even 7</span>\n</code></pre></div>",
        "id": 433814427,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713367547
    },
    {
        "content": "<p>You can discover this by hovering over the <code>-</code> and seeing it was for Nat</p>",
        "id": 433814647,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713367568
    },
    {
        "content": "<p>Another tool at your disposal is <code>set_option pp.numericTypes true</code>, which causes the original version to pretty print as <code>Odd ((2 : ℕ) ^ n - (7 : ℕ))</code>, pointing possibly to some unexpected types.</p>",
        "id": 433815070,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713367620
    },
    {
        "content": "<p>oh nice! that gets me unstuck! I would have thought Lean would default to <code>ℤ</code> in that case because the expression could be negative, but I guess the difference of two Nats is a Nat unless explicitly specified otherwise -- anyway, thanks Kyle!</p>",
        "id": 433818782,
        "sender_full_name": "Barinder S Banwait",
        "timestamp": 1713368242
    },
    {
        "content": "<p>Yeah, <code>0 - 1 = 0</code> is true for Nats in Lean.</p>",
        "id": 433819456,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713368431
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300547\">Barinder S Banwait</span> has marked this topic as resolved.</p>",
        "id": 435189578,
        "sender_full_name": "Notification Bot",
        "timestamp": 1713965281
    }
]