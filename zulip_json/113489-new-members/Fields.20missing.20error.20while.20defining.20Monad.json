[
    {
        "content": "<p>I'm learning <a href=\"https://lean-lang.org/functional_programming_in_lean/monads/class.html#general-monad-operations\">Monad Operations</a> of <em>Functional Programming in Lean</em>, and writing codes like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">WithLog</span> <span class=\"o\">(</span><span class=\"n\">logged</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">log</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">logged</span>\n  <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">WithLog</span> <span class=\"n\">logged</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"o\">⟨[],</span> <span class=\"n\">val</span><span class=\"o\">⟩</span>\n  <span class=\"n\">bind</span> <span class=\"n\">item</span> <span class=\"n\">next</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"n\">nextItem</span> <span class=\"o\">:=</span> <span class=\"n\">next</span> <span class=\"n\">item.val</span>\n    <span class=\"o\">⟨</span><span class=\"n\">item.log</span> <span class=\"bp\">++</span> <span class=\"n\">nextItem.log</span><span class=\"o\">,</span> <span class=\"n\">nextItem.val</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>and it says <code>fields missing: 'map', 'mapConst', 'seq', 'seqLeft'</code>.</p>\n<p>But if I write as what the textbook does, there would be no error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">WithLog</span> <span class=\"o\">(</span><span class=\"n\">logged</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">log</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">logged</span>\n  <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">WithLog</span> <span class=\"n\">logged</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"o\">⟨[],</span> <span class=\"n\">val</span><span class=\"o\">⟩</span>\n  <span class=\"n\">bind</span> <span class=\"n\">item</span> <span class=\"n\">next</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"o\">{</span><span class=\"n\">log</span> <span class=\"o\">:=</span> <span class=\"n\">nextOut</span><span class=\"o\">,</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">nextRes</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">next</span> <span class=\"n\">item.val</span>\n    <span class=\"o\">⟨</span><span class=\"n\">item.log</span> <span class=\"bp\">++</span> <span class=\"n\">nextOut</span><span class=\"o\">,</span> <span class=\"n\">nextRes</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>Why is this happening? I found <a href=\"#narrow/stream/113489-new-members/topic/Monad.20instance.20complains.20about.20missing.20fields\">a similar post</a> but it doesn't seems to be of help to this problem.</p>",
        "id": 433912913,
        "sender_full_name": "Ichinoe",
        "timestamp": 1713412917
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Option'</span> <span class=\"o\">:=</span> <span class=\"n\">Option</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"n\">Option'</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span> <span class=\"o\">:=</span> <span class=\"n\">Option.some</span>\n  <span class=\"n\">bind</span> <span class=\"n\">a</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">Option.bind</span> <span class=\"n\">a</span> <span class=\"n\">f</span>\n    <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 433913754,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1713413627
    },
    {
        "content": "<p>It looks like <code>let</code> makes Lean fail to assign default values to fields.</p>",
        "id": 433914906,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1713414591
    },
    {
        "content": "<p>It's weird that the following works despite that it didn't use let destructuring:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">WithLog</span> <span class=\"o\">(</span><span class=\"n\">logged</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">log</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">logged</span>\n  <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.checkSynthOrder</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Pure</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">WithLog</span> <span class=\"n\">logged</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"o\">⟨[],</span> <span class=\"n\">val</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Bind</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">WithLog</span> <span class=\"n\">logged</span> <span class=\"n\">where</span>\n  <span class=\"n\">bind</span> <span class=\"n\">item</span> <span class=\"n\">next</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"n\">nextItem</span> <span class=\"o\">:=</span> <span class=\"n\">next</span> <span class=\"n\">item.val</span>\n    <span class=\"o\">⟨</span><span class=\"n\">item.log</span> <span class=\"bp\">++</span> <span class=\"n\">nextItem.log</span><span class=\"o\">,</span> <span class=\"n\">nextItem.val</span><span class=\"o\">⟩</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">failed to synthesize</span>\n<span class=\"cm\">  Monad (WithLog logged)</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">logged</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Monad</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">WithLog</span> <span class=\"n\">logged</span>\n\n<span class=\"c1\">-- empty body works</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">WithLog</span> <span class=\"n\">logged</span> <span class=\"n\">where</span>\n\n<span class=\"c1\">-- success</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">logged</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Monad</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">WithLog</span> <span class=\"n\">logged</span>\n</code></pre></div>",
        "id": 433917264,
        "sender_full_name": "Utensil Song",
        "timestamp": 1713416112
    },
    {
        "content": "<p>or the shorter working version for  <span class=\"user-mention\" data-user-id=\"455791\">@Yuyang Zhao</span> 's  (intentially) non-working <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Option'</span> <span class=\"o\">:=</span> <span class=\"n\">Option</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Pure</span> <span class=\"n\">Option'</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span> <span class=\"o\">:=</span> <span class=\"n\">Option.some</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Bind</span> <span class=\"n\">Option'</span> <span class=\"n\">where</span>\n  <span class=\"n\">bind</span> <span class=\"n\">a</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">Option.bind</span> <span class=\"n\">a</span> <span class=\"n\">f</span>\n    <span class=\"n\">b</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"n\">Option'</span> <span class=\"n\">where</span>\n</code></pre></div>",
        "id": 433918145,
        "sender_full_name": "Utensil Song",
        "timestamp": 1713416681
    },
    {
        "content": "<p>I think <code>Bind</code> is already defined in this example when defining <code>Monad</code> (and then assigning default values to its fields). It will not be expanded to a <code>let</code> expression.</p>",
        "id": 433918449,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1713416876
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Option'</span> <span class=\"o\">:=</span> <span class=\"n\">Option</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"n\">Option'</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span> <span class=\"o\">:=</span> <span class=\"n\">Option.some</span>\n  <span class=\"n\">bind</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">Option.bind</span> <span class=\"n\">a</span> <span class=\"n\">f</span>\n    <span class=\"n\">b</span>\n</code></pre></div>\n<p><code>let rec</code> works, for both <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> and the original example.</p>",
        "id": 433976295,
        "sender_full_name": "Utensil Song",
        "timestamp": 1713424859
    },
    {
        "content": "<p>But why doesn't this further minimized <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> fail with <code>let</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">A</span> <span class=\"n\">t</span> <span class=\"n\">where</span>\n  <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">B</span> <span class=\"n\">t</span> <span class=\"n\">where</span>\n  <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">A.a</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">D</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">D</span> <span class=\"n\">t0</span> <span class=\"n\">where</span>\n  <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span>\n    <span class=\"k\">let</span> <span class=\"n\">xd</span> <span class=\"o\">:=</span> <span class=\"n\">x.d</span>\n    <span class=\"o\">⟨</span><span class=\"n\">xd</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 434504435,
        "sender_full_name": "Utensil Song",
        "timestamp": 1713622418
    },
    {
        "content": "<p>I want to note that this case is still a mystery to me. <code>let</code>, <code>let rec</code> and <code>let fun</code> are implemented in very different ways despite the syntax similarity, so even though I suspect the issue is in the <code>let</code> implementation, I have no clue.</p>",
        "id": 437979963,
        "sender_full_name": "Utensil Song",
        "timestamp": 1715346734
    },
    {
        "content": "<p><code>let fun</code> doesn't exist</p>",
        "id": 437981589,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1715347442
    },
    {
        "content": "<p>oh you mean <code>let_fun</code></p>",
        "id": 437981658,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1715347462
    },
    {
        "content": "<p>which is basically the same as <code>have</code></p>",
        "id": 437981684,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1715347475
    },
    {
        "content": "<p>What's the issue in the above code? I get no errors, and it sounds like this is expected</p>",
        "id": 437981936,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1715347577
    },
    {
        "content": "<p>The issue is with the <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> in <a href=\"#narrow/stream/113489-new-members/topic/Fields.20missing.20error.20while.20defining.20Monad/near/433913754\">the 2nd message</a>.</p>\n<p>As it seems that <code>let</code> makes Lean fail to assign default values to fields.</p>\n<p>Comparing that with this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Option'</span> <span class=\"o\">:=</span> <span class=\"n\">Option</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"n\">Option'</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span> <span class=\"o\">:=</span> <span class=\"n\">Option.some</span>\n  <span class=\"n\">bind</span> <span class=\"o\">:=</span> <span class=\"n\">Option.bind</span>\n</code></pre></div>\n<p>which would work without the error about missing fields.</p>",
        "id": 437983778,
        "sender_full_name": "Utensil Song",
        "timestamp": 1715348306
    },
    {
        "content": "<p>This is <a href=\"https://github.com/leanprover/lean4/pull/3146\">lean4#3146</a>, fixed in <a href=\"https://github.com/leanprover/lean4/pull/3152\">lean4#3152</a>.</p>",
        "id": 437994079,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1715352287
    },
    {
        "content": "<p>Thanks for the fix!</p>\n<p>The fix looks subtle to me, as the original code looks innocent and aligns with other match branches. Is it possible that the issues applies to not only <code>let</code> and the cause is rooted somewhere else where this lingering of metavariables could be treated altogether for all applied constructs?</p>",
        "id": 437996456,
        "sender_full_name": "Utensil Song",
        "timestamp": 1715353256
    },
    {
        "content": "<p>I'm not sure I understand what you're proposing. What causes the metavariables to linger in the first place is that <code>reduce</code>, which serves (among other things) to instantiate metavariables doesn't do so in the subexpressions bound in <code>let</code>s. Because the system relies on checking whether there are still some unsolved metavars to know whether default fields have been effectively elaborated, this looks like the most sensible solution to me.</p>",
        "id": 438000675,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1715354769
    },
    {
        "content": "<p>Though now that I think about this again, it might be possible to find such lingering mvars in the type of variables in the local context, and not just in their values. I believe I couldn't manage to trigger an error in such situations when testing back when I made my PR, but I might as well take another look.</p>",
        "id": 438001633,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1715355161
    },
    {
        "content": "<p>Yes, the fix is sensible for fixing the <code>let</code> issue. My concern was merely that the other match branches are only doing a <code>mk...reduce</code> combo, is it that <code>let</code> is special, or other branches might need the same treatment for the metavariables.</p>",
        "id": 438001685,
        "sender_full_name": "Utensil Song",
        "timestamp": 1715355182
    },
    {
        "content": "<p><code>let</code> is special in that it is the only branch which introduces a new term (and its type) in the local context, the other special cases would be <code>lambda</code> and <code>forall</code>, which introduce new types in the local context</p>",
        "id": 438002900,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1715355634
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 438005942,
        "sender_full_name": "Utensil Song",
        "timestamp": 1715356784
    },
    {
        "content": "<p>I see, thanks for the explanation.</p>",
        "id": 438005943,
        "sender_full_name": "Utensil Song",
        "timestamp": 1715356784
    }
]