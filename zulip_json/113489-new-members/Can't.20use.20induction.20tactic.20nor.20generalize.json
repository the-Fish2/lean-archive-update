[
    {
        "content": "<p>Hi, I'm working on a proof for a simple calculus in which I try to prove monotonicity of some transformer by induction on the syntax of the calculus. Unfortunately I can't get the induction tactic to work (even when using generalize). I reduced the problem to the following MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a1</span> <span class=\"o\">:</span> <span class=\"n\">A</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">b1</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">c1</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"n\">y</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">C</span> <span class=\"n\">x</span>\n  <span class=\"bp\">|</span> <span class=\"n\">c2</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">x</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">C</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">count</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">xs</span><span class=\"o\">,</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Int</span>\n  <span class=\"bp\">|</span> <span class=\"n\">C.c1</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">C.c2</span> <span class=\"n\">c'</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">count</span> <span class=\"n\">c'</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">xs</span><span class=\"o\">,</span><span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">count</span> <span class=\"n\">xs</span> <span class=\"n\">x</span> <span class=\"n\">c</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n    <span class=\"c1\">-- generalize (xs, x) = X at c</span>\n    <span class=\"n\">induction</span> <span class=\"n\">c</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>When running <code>induction c</code> by itself, Lean tells me that </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">index</span> <span class=\"k\">in</span> <span class=\"n\">target's</span> <span class=\"n\">type</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">consider</span> <span class=\"n\">using</span> <span class=\"n\">the</span> <span class=\"bp\">`</span><span class=\"n\">cases</span><span class=\"bp\">`</span> <span class=\"n\">tactic</span> <span class=\"n\">instead</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>When uncommenting <code>generalize</code>, Lean instead tells me that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">generalize'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">result</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">type</span> <span class=\"n\">correct</span>\n</code></pre></div>\n<p>I'm not really sure what's going on, and seemingly random changes like removing the type index from <code>B</code> make everything work. Does anybody have an explanation of what's the problem, and how to approach this type of issues on more complicated examples?</p>\n<p>I also tried to do a proof with <code>C.recOn</code>, and that works fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.Int.Order</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo'</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">count</span> <span class=\"n\">xs</span> <span class=\"n\">x</span> <span class=\"n\">c</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">@</span><span class=\"n\">C.recOn</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">xs</span><span class=\"o\">,</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">@</span><span class=\"n\">count</span> <span class=\"n\">xs</span> <span class=\"n\">x</span> <span class=\"n\">c</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">c</span>\n    <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">xs</span><span class=\"o\">,</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">b</span><span class=\"bp\">;</span> <span class=\"n\">unfold</span> <span class=\"n\">count</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">xs</span><span class=\"o\">,</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">unfold</span> <span class=\"n\">count</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">simp_all</span> <span class=\"o\">[</span><span class=\"n\">Int.add_nonneg</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">])</span>\n</code></pre></div>\n<p>Thanks in advance!</p>",
        "id": 424250650,
        "sender_full_name": "Roberto Pettinau",
        "timestamp": 1709303560
    },
    {
        "content": "<p>I think the problem is your reliance on <code>autoImplicit</code></p>",
        "id": 424302823,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1709317358
    },
    {
        "content": "<p>I would suggest adding <code>set_option autoImplicit false</code> to the top of your file and adding the implicit variables</p>",
        "id": 424302960,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1709317411
    },
    {
        "content": "<p>when I do that in the MWE you provided, the issue goes away and <code>induction</code> is successful</p>",
        "id": 424302999,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1709317435
    },
    {
        "content": "<p>just want to take this opportunity to say that the design decision to make <code>autoImplicit</code> enabled by default is terrible and I hope the developers will rethink this</p>",
        "id": 424303407,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1709317595
    },
    {
        "content": "<p>Thank you for the answer! Was that your only change? I can't seem to be able to replicate it, whether I make the variables explicit or implicit:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a1</span> <span class=\"o\">:</span> <span class=\"n\">A</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">b1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">c1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"n\">y</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">C</span> <span class=\"n\">x</span>\n  <span class=\"bp\">|</span> <span class=\"n\">c2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">x</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">C</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">count</span> <span class=\"o\">(</span><span class=\"n\">xs</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">):</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">xs</span><span class=\"o\">,</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Int</span>\n  <span class=\"bp\">|</span> <span class=\"n\">C.c1</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">C.c2</span> <span class=\"n\">_</span> <span class=\"n\">c'</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">count</span> <span class=\"n\">xs</span> <span class=\"n\">x</span> <span class=\"n\">c'</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">xs</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">xs</span><span class=\"o\">,</span><span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">count</span> <span class=\"n\">xs</span> <span class=\"n\">x</span> <span class=\"n\">c</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">induction</span> <span class=\"n\">c</span> <span class=\"c1\">-- error</span>\n</code></pre></div>",
        "id": 424304281,
        "sender_full_name": "Roberto Pettinau",
        "timestamp": 1709317919
    },
    {
        "content": "<p>here's what I did:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a1</span> <span class=\"o\">:</span> <span class=\"n\">A</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">b1</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">c1</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"n\">y</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">C</span> <span class=\"n\">x</span>\n  <span class=\"bp\">|</span> <span class=\"n\">c2</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">x</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">C</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">count</span> <span class=\"o\">{</span><span class=\"n\">xs</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Int</span>\n  <span class=\"bp\">|</span> <span class=\"n\">C.c1</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">C.c2</span> <span class=\"n\">c'</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">count</span> <span class=\"n\">c'</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">xs</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">count</span> <span class=\"n\">xs</span> <span class=\"n\">x</span> <span class=\"n\">c</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n    <span class=\"c1\">-- generalize (xs, x) = X at c</span>\n    <span class=\"n\">induction</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 424304727,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1709318081
    },
    {
        "content": "<p>basically just the minimum amount of hints so that Lean knows what goes where</p>",
        "id": 424304818,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1709318120
    },
    {
        "content": "<p>Okay that works for me, thank you. What I find so strange is that by just changing <code>c1 {x y}</code> to <code>c1 {y x}</code> everything just stops working</p>",
        "id": 424305265,
        "sender_full_name": "Roberto Pettinau",
        "timestamp": 1709318285
    },
    {
        "content": "<p>That's interesting... btw I played around with it and Lean only really needs a single implicit variable to avoid the issue, so clearly that's the key line:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a1</span> <span class=\"o\">:</span> <span class=\"n\">A</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">b1</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">c1</span> <span class=\"o\">{</span><span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"n\">y</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">C</span> <span class=\"n\">x</span> <span class=\"c1\">-- if you remove {y}, induction breaks</span>\n  <span class=\"bp\">|</span> <span class=\"n\">c2</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">x</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">C</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">count</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Int</span>\n  <span class=\"bp\">|</span> <span class=\"n\">C.c1</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">C.c2</span> <span class=\"n\">c'</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">count</span> <span class=\"n\">c'</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">count</span> <span class=\"n\">xs</span> <span class=\"n\">x</span> <span class=\"n\">c</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n    <span class=\"n\">induction</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 424305509,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1709318394
    },
    {
        "content": "<p>Yeah, it really seems like the only important thing is the order of parameters in c1, for some reason (with <code>{y}</code> it becomes second)</p>",
        "id": 424305740,
        "sender_full_name": "Roberto Pettinau",
        "timestamp": 1709318481
    },
    {
        "content": "<p>I'm not knowledgeable enough to explain why that's necessary, but perhaps someone else here can chime in</p>",
        "id": 424305756,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1709318487
    },
    {
        "content": "<p>I gave this another look today. Apparently swapping <code>x</code> and <code>y</code> completely changes how the recursor is generated: when <code>x</code> is first, the motive depends on a fixed <code>x</code>, while when <code>y</code> is first, the motive has to depend on some arbitrary <code>x</code>. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">C1</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">c1</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">}:</span> <span class=\"n\">B</span> <span class=\"n\">y</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">C1</span> <span class=\"n\">x</span>\n\n<span class=\"c1\">-- C1.rec.{u} {a✝ : List (List A × A)} {motive : C1 a✝ → Sort u}</span>\n<span class=\"c1\">--  (c1 : {y : A} → (a : B y) → motive (C1.c1 a))</span>\n<span class=\"c1\">--  (t : C1 a✝) : motive t</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">C2</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">c2</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">}:</span> <span class=\"n\">B</span> <span class=\"n\">y</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">C2</span> <span class=\"n\">x</span>\n\n<span class=\"c1\">-- C2.rec.{u} {motive : (a : List (List A × A)) → C2 a → Sort u}</span>\n<span class=\"c1\">--  (c2 : {y : A} → {x : List (List A × A)} → (a : B y) → motive x (C2.c2 a))</span>\n<span class=\"c1\">--  {a✝ : List (List A × A)} (t : C2 a✝) : motive a✝ t</span>\n</code></pre></div>\n<p>I'm not sure I understand why this would be the case at all, as <code>x</code> and <code>y</code> do not depend on each other in any way. I guess that Lean does not see that <code>x</code> remains constant  when recursing over C2?</p>",
        "id": 424400580,
        "sender_full_name": "Roberto Pettinau",
        "timestamp": 1709375952
    },
    {
        "content": "<p>The parameters to an inductive type have to appear in the constructors in the same order as the type and before all the regular constructor arguments. (For this reason they are generally defined left of the colon and not specified in the constructor at all since they are already in scope. But allowing them to be specified in the constructor is useful for e.g. changing the names or binding modes of the parameters in the constructor.) So when you reverse the order of the arguments it becomes no longer possible to promote it to a parameter.</p>",
        "id": 424413851,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709388060
    }
]