[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Data.HashSet</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">T</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Hashable</span> <span class=\"n\">T</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.HashSet</span> <span class=\"n\">T</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">S</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">L</span>\n</code></pre></div>\n<p>This breaks with <code>typeclass instance problem is stuck. it is often due to metavariables</code>. I'm having a bunch of trouble with situations of this form. I think I can work around it with really bad ergonomics (like supplying instances as hypotheses with every single definition), but I'd like to get implicits to work</p>",
        "id": 433574357,
        "sender_full_name": "Quinn",
        "timestamp": 1713288917
    },
    {
        "content": "<p>i suspected tehre was a nuance i was missing with the namespace/section distinction, but reading tutorials and testing didn't substantiate that suspicion</p>",
        "id": 433574530,
        "sender_full_name": "Quinn",
        "timestamp": 1713288983
    },
    {
        "content": "<p>something even simpler: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">T</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Hashable</span> <span class=\"n\">T</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">U</span> <span class=\"o\">:=</span> <span class=\"n\">T</span> <span class=\"n\">deriving</span> <span class=\"n\">BEq</span><span class=\"o\">,</span> <span class=\"n\">Hashable</span>\n</code></pre></div>\n<p>I expected aliases of variables to be able to inherit class information</p>",
        "id": 433578899,
        "sender_full_name": "Quinn",
        "timestamp": 1713290777
    },
    {
        "content": "<blockquote>\n<p><code>failed to synthesize instance 'BEq' for 'U'</code></p>\n</blockquote>",
        "id": 433578926,
        "sender_full_name": "Quinn",
        "timestamp": 1713290793
    },
    {
        "content": "<p>The issue is that <code>L</code> has <code>T</code> as an implicit argument, and <code>x : L</code> isn't enough information to solve for <code>T</code></p>",
        "id": 433579017,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713290828
    },
    {
        "content": "<p>If you make it so that <code>T</code> is an explicit argument, then you can write <code>x : L T</code> and it should work.</p>",
        "id": 433579106,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713290873
    },
    {
        "content": "<p>this means <code>variable (T : Type)</code> (paren instead of curly)? I think I was running into trouble with typeclass information not being propagated when I did that</p>",
        "id": 433579354,
        "sender_full_name": "Quinn",
        "timestamp": 1713290968
    },
    {
        "content": "<p>Yeah, <code>(T : Type)</code>.</p>\n<p>The <code>[...]</code> variables will be included in definitions if they're used. Sometimes you might need to include instance binders explicitly, but, if you run into issues, feel free to post an example.</p>",
        "id": 433579626,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713291104
    }
]