[
    {
        "content": "<p><a href=\"/user_uploads/3121/3RaSpAnvxLbCZ5hpkiKJpwlJ/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/3RaSpAnvxLbCZ5hpkiKJpwlJ/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/3RaSpAnvxLbCZ5hpkiKJpwlJ/image.png\"></a></div>",
        "id": 419671142,
        "sender_full_name": "Kyle Yank",
        "timestamp": 1707024551
    },
    {
        "content": "<p>How to solve this problem?</p>",
        "id": 419671152,
        "sender_full_name": "Kyle Yank",
        "timestamp": 1707024580
    },
    {
        "content": "<p>I know that I can use  h2 0 h1 to solve this problem<br>\n, but I'd like to know how to show the transitivity here?</p>",
        "id": 419671247,
        "sender_full_name": "Kyle Yank",
        "timestamp": 1707024669
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/Mre4OzSr9e-k-NIfWb9WvPPE/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Mre4OzSr9e-k-NIfWb9WvPPE/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/Mre4OzSr9e-k-NIfWb9WvPPE/image.png\"></a></div>",
        "id": 419671365,
        "sender_full_name": "Kyle Yank",
        "timestamp": 1707024825
    },
    {
        "content": "<p>I'd like to see how to construct a transitive property <br>\n``</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">.</span>\n</code></pre></div>",
        "id": 419671464,
        "sender_full_name": "Kyle Yank",
        "timestamp": 1707024943
    },
    {
        "content": "<p>Ah, I just saw this. I may need some clarification to be sure what you mean. Though here is some info that might be helpful.</p>\n<p>This is a possible solution for this level.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Assumptions</span><span class=\"o\">:</span>\n    <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">A</span>\n    <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">S</span>\n<span class=\"n\">Goal</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">):</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">λ</span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"n\">h2</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>If instead of two assumptions, we had a single assumption of their conjunction instead.<br>\n<code>h : (C → A) ∧ (A → S)</code></p>\n<p>In such a situation, we can replace <code>h1</code> with <code>h.left</code> and <code>h2</code> with <code>h.right</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Assumptions</span><span class=\"o\">:</span>\n    <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n<span class=\"n\">Goal</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">):</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">λ</span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"n\">h.right</span> <span class=\"o\">(</span><span class=\"n\">h.left</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Lets say you want to create a term with the type in your picture. Here is a solution that uses this, though you'll see it's a more round-about way to get at a solution. In this case, h4 is a slight variation of what you're attempting to show this level.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Assumptions</span><span class=\"o\">:</span>\n    <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">A</span>\n    <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">S</span>\n<span class=\"n\">Goal</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">):</span>\n    <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:=</span> <span class=\"n\">and_intro</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span>\n    <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"n\">h.right</span> <span class=\"o\">(</span><span class=\"n\">h.left</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h4</span> <span class=\"n\">h3</span>\n</code></pre></div>",
        "id": 424024946,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1709215282
    },
    {
        "content": "<p>Other ways you can write h4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Desugared version (Shows both λs)</span>\n<span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">))</span> <span class=\"bp\">↦</span> <span class=\"bp\">λ</span><span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"n\">h.right</span> <span class=\"o\">(</span><span class=\"n\">h.left</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"c1\">-- Inferred `h` and `c` from the type of `h4`</span>\n<span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">h</span> <span class=\"n\">c</span> <span class=\"bp\">↦</span> <span class=\"n\">h.right</span> <span class=\"o\">(</span><span class=\"n\">h.left</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"c1\">-- Nothing implicit</span>\n<span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">↦</span> <span class=\"n\">h.right</span> <span class=\"o\">(</span><span class=\"n\">h.left</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 424026593,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1709215743
    }
]