[
    {
        "content": "<p>I have a proof with a  case split, where the proof for each case is extremely similar except for a few symmetries. It looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">dim</span><span class=\"bp\">.</span><span class=\"n\">two_eq_or</span>\n<span class=\"w\">        </span><span class=\"n\">case</span><span class=\"w\"> </span><span class=\"n\">inl</span><span class=\"w\"> </span><span class=\"n\">h_dim</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">          </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">h_dim</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Rat</span><span class=\"bp\">.</span><span class=\"n\">toVec</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Prod</span><span class=\"bp\">.</span><span class=\"n\">nthVec</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Prod</span><span class=\"bp\">.</span><span class=\"n\">nth</span><span class=\"o\">]</span>\n<span class=\"w\">          </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">add_assoc</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">add_assoc</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">add_assoc</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">add_assoc</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">add_assoc</span><span class=\"o\">]</span>\n<span class=\"w\">          </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">le_add_iff_nonneg_right</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">el1</span><span class=\"bp\">.</span><span class=\"n\">prevMargin</span><span class=\"o\">)]</span>\n<span class=\"w\">          </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">Rat</span><span class=\"bp\">.</span><span class=\"n\">add_nonneg</span><span class=\"w\"> </span><span class=\"n\">el1</span><span class=\"bp\">.</span><span class=\"n\">el</span><span class=\"bp\">.</span><span class=\"n\">box</span><span class=\"bp\">.</span><span class=\"n\">size</span><span class=\"bp\">.</span><span class=\"m\">1</span><span class=\"bp\">.</span><span class=\"n\">prop</span>\n<span class=\"w\">          </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">add_assoc</span><span class=\"o\">]</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">Rat</span><span class=\"bp\">.</span><span class=\"n\">add_nonneg</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">trivial</span><span class=\"o\">)</span>\n<span class=\"w\">          </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">add_assoc</span><span class=\"o\">]</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">Rat</span><span class=\"bp\">.</span><span class=\"n\">add_nonneg</span><span class=\"w\"> </span><span class=\"n\">h_el1_el2</span>\n<span class=\"w\">          </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">Rat</span><span class=\"bp\">.</span><span class=\"n\">add_nonneg</span><span class=\"w\"> </span><span class=\"n\">el2</span><span class=\"bp\">.</span><span class=\"n\">el</span><span class=\"bp\">.</span><span class=\"n\">box</span><span class=\"bp\">.</span><span class=\"n\">size</span><span class=\"bp\">.</span><span class=\"m\">1</span><span class=\"bp\">.</span><span class=\"n\">prop</span>\n<span class=\"w\">          </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">add_assoc</span><span class=\"o\">]</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">Rat</span><span class=\"bp\">.</span><span class=\"n\">add_nonneg</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">trivial</span><span class=\"o\">)</span>\n<span class=\"w\">          </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">h_el2_el3</span>\n<span class=\"w\">        </span><span class=\"n\">case</span><span class=\"w\"> </span><span class=\"n\">inr</span><span class=\"w\"> </span><span class=\"n\">h_dim</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">          </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">h_dim</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Rat</span><span class=\"bp\">.</span><span class=\"n\">toVec</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Prod</span><span class=\"bp\">.</span><span class=\"n\">nthVec</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Prod</span><span class=\"bp\">.</span><span class=\"n\">nth</span><span class=\"o\">]</span>\n<span class=\"w\">          </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">add_assoc</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">add_assoc</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">add_assoc</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">add_assoc</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">add_assoc</span><span class=\"o\">]</span>\n<span class=\"w\">          </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">le_add_iff_nonneg_right</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">el1</span><span class=\"bp\">.</span><span class=\"n\">prevMargin</span><span class=\"o\">)]</span>\n<span class=\"w\">          </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">Rat</span><span class=\"bp\">.</span><span class=\"n\">add_nonneg</span><span class=\"w\"> </span><span class=\"n\">el1</span><span class=\"bp\">.</span><span class=\"n\">el</span><span class=\"bp\">.</span><span class=\"n\">box</span><span class=\"bp\">.</span><span class=\"n\">size</span><span class=\"bp\">.</span><span class=\"m\">2</span><span class=\"bp\">.</span><span class=\"n\">prop</span>\n<span class=\"w\">          </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">add_assoc</span><span class=\"o\">]</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">Rat</span><span class=\"bp\">.</span><span class=\"n\">add_nonneg</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">trivial</span><span class=\"o\">)</span>\n<span class=\"w\">          </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">add_assoc</span><span class=\"o\">]</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">Rat</span><span class=\"bp\">.</span><span class=\"n\">add_nonneg</span><span class=\"w\"> </span><span class=\"n\">h_el1_el2</span>\n<span class=\"w\">          </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">Rat</span><span class=\"bp\">.</span><span class=\"n\">add_nonneg</span><span class=\"w\"> </span><span class=\"n\">el2</span><span class=\"bp\">.</span><span class=\"n\">el</span><span class=\"bp\">.</span><span class=\"n\">box</span><span class=\"bp\">.</span><span class=\"n\">size</span><span class=\"bp\">.</span><span class=\"m\">2</span><span class=\"bp\">.</span><span class=\"n\">prop</span>\n<span class=\"w\">          </span><span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">add_assoc</span><span class=\"o\">]</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">Rat</span><span class=\"bp\">.</span><span class=\"n\">add_nonneg</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">trivial</span><span class=\"o\">)</span>\n<span class=\"w\">          </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">h_el2_el3</span>\n</code></pre></div>\n<p>The differences are <code>p.1</code> vs <code>p.2</code> and <code>size.1</code> vs <code>size.2</code>. What is the simplest possible way to abstract over these tactics? Would it be a <code>macro_rules</code> macro? (Is there a way to define that inline in the theorem body?) Alternatively, does the Lean LSP provide a way to extract out the sub-proof into a lemma such that it automatically generates the parameters and conclusion of the lemma?</p>",
        "id": 442750754,
        "sender_full_name": "Will Crichton",
        "timestamp": 1717584078
    },
    {
        "content": "<p>Mathlib has the <code>extract_goal</code> tactic for abstracting out the current goal as a lemma.</p>",
        "id": 442751494,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1717584302
    },
    {
        "content": "<p>It seems possible that with some refactoring you might be able to do <code>cases dim.two_eq_or &lt;;&gt; proof_that_incidentally_works_for_both</code>. You have to be careful though, since that can make your proof harder to maintain.</p>",
        "id": 442751794,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1717584410
    },
    {
        "content": "<p>Without an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> I can't possibly make something that works, but I could imagine something like the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">dim</span><span class=\"bp\">.</span><span class=\"n\">two_eq_or</span><span class=\"w\"> </span><span class=\"bp\">&lt;;&gt;</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">h_dim</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Rat</span><span class=\"bp\">.</span><span class=\"n\">toVec</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Prod</span><span class=\"bp\">.</span><span class=\"n\">nthVec</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Prod</span><span class=\"bp\">.</span><span class=\"n\">nth</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"bp\">&lt;;&gt;</span><span class=\"w\"> </span><span class=\"n\">linarith</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">el1</span><span class=\"bp\">.</span><span class=\"n\">el</span><span class=\"bp\">.</span><span class=\"n\">box</span><span class=\"bp\">.</span><span class=\"n\">size</span><span class=\"bp\">.</span><span class=\"m\">1</span><span class=\"bp\">.</span><span class=\"n\">prop</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">el1</span><span class=\"bp\">.</span><span class=\"n\">el</span><span class=\"bp\">.</span><span class=\"n\">box</span><span class=\"bp\">.</span><span class=\"n\">size</span><span class=\"bp\">.</span><span class=\"m\">2</span><span class=\"bp\">.</span><span class=\"n\">prop</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 442752063,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1717584510
    },
    {
        "content": "<p>Yeah that would be ideal :-)</p>\n<p>Actually related question to that. If I have a simple case like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">some_disjunction</span>\n<span class=\"n\">case</span><span class=\"w\"> </span><span class=\"n\">inl</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n<span class=\"n\">case</span><span class=\"w\"> </span><span class=\"n\">inr</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Is there a way to do something like <code>all_goals simp [the introduced hypothesis]</code>?</p>",
        "id": 442752066,
        "sender_full_name": "Will Crichton",
        "timestamp": 1717584510
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">some_disjunction</span><span class=\"w\"> </span><span class=\"bp\">&lt;;&gt;</span><span class=\"w\"> </span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"bp\">&lt;;&gt;</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">some_disjunction</span>\n<span class=\"n\">all_goals</span><span class=\"w\"> </span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"bp\">;</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 442752255,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1717584578
    },
    {
        "content": "<p>Also it seems that the signature for my extracted goal would be larger than the proof itself. So I'll to take another tack...</p>",
        "id": 442752276,
        "sender_full_name": "Will Crichton",
        "timestamp": 1717584587
    },
    {
        "content": "<p>There's also <code>simp [*]</code> if that doesn't cause issues</p>",
        "id": 442752277,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1717584587
    },
    {
        "content": "<p>Got it. Thanks <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>!</p>",
        "id": 442752540,
        "sender_full_name": "Will Crichton",
        "timestamp": 1717584674
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"625391\">Will Crichton</span> has marked this topic as resolved.</p>",
        "id": 442752550,
        "sender_full_name": "Notification Bot",
        "timestamp": 1717584676
    }
]