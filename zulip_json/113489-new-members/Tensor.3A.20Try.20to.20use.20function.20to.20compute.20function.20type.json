[
    {
        "content": "<p>I'm trying to formalize the concept of multidimensional tensors as function type from <code>Fin n</code> types to a target type. I'm using code like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">Tensor</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Shape</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">α</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"bp\">::</span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">α</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"bp\">::</span><span class=\"n\">ts</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Tensor</span><span class=\"w\"> </span><span class=\"n\">ts</span><span class=\"w\"> </span><span class=\"n\">α</span>\n</code></pre></div>\n<p>I was expecting that when I used something like <code>Tensor [2, 3] Nat</code>, that it would be turned into<br>\nthe equivalent of:</p>\n<p><code>Fin 2 -&gt; Fin 3 -&gt; Nat</code></p>\n<p>However, when I have a value <code>t: Tensor [2, 3] Nat</code> and try to do an application, Lean is not recognizing that <code>t</code> is a function type.</p>\n<p>Is there a reason this is not working? Is there something different I could do to make it work?</p>",
        "id": 440875259,
        "sender_full_name": "Richard L Ford",
        "timestamp": 1716822877
    },
    {
        "content": "<p>Can you include the definition of <code>Shape</code>?</p>",
        "id": 440875348,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1716822912
    },
    {
        "content": "<p>Sorry, </p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">Shape</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"n\">Nat</span>\n</code></pre></div>",
        "id": 440875434,
        "sender_full_name": "Richard L Ford",
        "timestamp": 1716822950
    },
    {
        "content": "<p>We have a largely abandoned version of this at <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Holor#doc\">docs#Holor</a>, which might provide some inspiration</p>",
        "id": 440887623,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716827575
    },
    {
        "content": "<p>Your example works for me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">Shape</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"n\">Nat</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">Tensor</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Shape</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">α</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"bp\">::</span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\">  </span><span class=\"c1\">-- you can remove this line</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"bp\">::</span><span class=\"n\">ts</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Fin</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">Tensor</span><span class=\"w\"> </span><span class=\"n\">ts</span><span class=\"w\"> </span><span class=\"n\">α</span>\n\n<span class=\"kn\">variable</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Tensor</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Nat</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 440887826,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716827669
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Thanks for the pointer. This looks very interesting. I've not heard of a <code>holor</code> before.</p>",
        "id": 440891793,
        "sender_full_name": "Richard L Ford",
        "timestamp": 1716829459
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>, yes. That example worked for me too. The context in which it does not work is when the shape is a variable. But I guess in that case you have to know that the shape is not empty in order to know that it is a function.</p>",
        "id": 440891939,
        "sender_full_name": "Richard L Ford",
        "timestamp": 1716829548
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>, why has the <code>holor</code> work been largely abandoned? Do you know of another formalization of tensors? I'm doing this work in the context of machine learning, Pytorch, and such.</p>",
        "id": 440892396,
        "sender_full_name": "Richard L Ford",
        "timestamp": 1716829781
    },
    {
        "content": "<p>I think the simple answer is that it is abandoned due to the lack of anyone interest in working on it.</p>",
        "id": 440892545,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716829847
    },
    {
        "content": "<p>A more speculative answer is that the definition is bad; it certainly diverges from the approach used for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Matrix#doc\">docs#Matrix</a></p>",
        "id": 440892614,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716829894
    },
    {
        "content": "<p>Notably: using an arbitrary type for indexing, not always <code>Fin n</code>. This lets you have matrices indexed by, say, days of the week, or named color channels, etc.</p>",
        "id": 440892854,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716830004
    },
    {
        "content": "<p>So with Matrix, what do people do if they want higher ranks? Do they use matrices as the element type of matrices?</p>",
        "id": 441053343,
        "sender_full_name": "Richard L Ford",
        "timestamp": 1716906613
    },
    {
        "content": "<p>AFAIK nobody really wanted this yet.</p>",
        "id": 441123393,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1716934414
    },
    {
        "content": "<p>Yes, sorry to be unclear; if anything, my comment above was \"your design looks much more similar to the way we designed <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Matrix#doc\">docs#Matrix</a> than to the way we designed <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Holor#doc\">docs#Holor</a>\" (and this is probably a good thing). I was certainly not saying \"use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Matrix#doc\">docs#Matrix</a> instead\"!</p>",
        "id": 441127662,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1716937117
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>, thanks for the additional comment.  In machine learning, tensors up to rank 4 are common. These have integer shapes which was why I was using <code>Fin n</code>. But if we were to develop theories of higher rank tensors, it does seem it would make sense to use general types for subscripts, like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Matrix#doc\">docs#Matrix</a> does, and then one could specialize it to integer indices if desired. I will do more studying about now Matrix works so I do not reinvent the wheel.</p>",
        "id": 441966277,
        "sender_full_name": "Richard L Ford",
        "timestamp": 1717277180
    }
]