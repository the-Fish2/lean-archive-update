[
    {
        "content": "<p>The unfold tactic doesn't work for unfolding functions declared in type classes. Here is a minimal working example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Double</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">double</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Double</span> <span class=\"n\">Nat</span> <span class=\"n\">where</span>\n  <span class=\"n\">double</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Double.double</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">Double.double</span>  <span class=\"c1\">-- goal: instDoubleNat.1 n = 2 * n</span>\n  <span class=\"n\">done</span>\n</code></pre></div>\n<p>I want the goal to be n + n = 2 * n after unfolding. There is a workaround which achieves this for the MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Double.double</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Double.double</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">linarith</span>\n</code></pre></div>\n<p>But this workaround does not work for my real use case, where I'm trying to solve this textbook exercise:<br>\nDetermine if the following sets G with the operation indicated form a group. If not, point out which of the group axioms fail.<br>\n(a) G = set of all integers, a * b = a - b.</p>\n<p>I want to prove that G can't satisfy identity:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">One</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">G.mk</span> <span class=\"n\">e</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">G.mk</span> <span class=\"o\">(</span><span class=\"n\">a.n</span> <span class=\"bp\">-</span> <span class=\"n\">b.n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">e</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">MulOneClass.one_mul</span> <span class=\"n\">a</span>  <span class=\"c1\">-- h : ∀ (a : G e), 1 * a = a</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">HMul.hMul</span> <span class=\"n\">at</span> <span class=\"n\">h</span>  <span class=\"c1\">-- h : ∀ (a : G e), instHMul.1 1 a = a</span>\n  <span class=\"n\">done</span>\n</code></pre></div>",
        "id": 436966498,
        "sender_full_name": "Raunak Chhatwal",
        "timestamp": 1714774331
    },
    {
        "content": "<p>Mathlib has <code>unfold_projs</code>, which should work here.</p>",
        "id": 436972041,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714777628
    },
    {
        "content": "<p>Thanks a lot for the help. This works for unfolding Double.double and HMul.hMul but not Mul.mul:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">e</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">MulOneClass.one_mul</span> <span class=\"n\">a</span>  <span class=\"c1\">-- h : ∀ (a : G e), 1 * a = a</span>\n  <span class=\"n\">unfold_projs</span> <span class=\"n\">at</span> <span class=\"n\">h</span>  <span class=\"c1\">-- h : ∀ (a : G e), Mul.mul One.one a = a</span>\n  <span class=\"n\">done</span>\n</code></pre></div>\n<p>I would have liked to see <code>h : ∀ (a : G e), { n := e - a.n } = a</code> or <code>h : ∀ (a : G e), { n := One.one.n - a.n } = a</code>. I also repeated the same workarounds I attempted previously and they unfortunately did not work.</p>",
        "id": 436975749,
        "sender_full_name": "Raunak Chhatwal",
        "timestamp": 1714780511
    },
    {
        "content": "<p>That's a tricker transformation, since it requires \"eta expanding\" the structure value <code>a</code> as <code>{ n := a.n }</code></p>",
        "id": 436976018,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714780769
    },
    {
        "content": "<p>Actually, it seems there's a deeper issue here, which is that the instance from <code>[Group (G e)]</code> doesn't actually need to be compatible with your One and Mul instances.</p>",
        "id": 436976496,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714781053
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20unfold.20typeclass.20functions.3F/near/436976496\">said</a>:</p>\n<blockquote>\n<p>Actually, it seems there's a deeper issue here, which is that the instance from <code>[Group (G e)]</code> doesn't actually need to be compatible with your One and Mul instances.</p>\n</blockquote>\n<p>When I keep clicking \"Go to definition\" on vscode, I see that Group extends DivInvMonoid, which extends Monoid, which extends MulOneClass, which extends both One and Mul.</p>",
        "id": 436976697,
        "sender_full_name": "Raunak Chhatwal",
        "timestamp": 1714781246
    },
    {
        "content": "<p>I'd probably do something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">e</span><span class=\"o\">)]</span>\n    <span class=\"o\">(</span><span class=\"n\">one_eq</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"n\">e</span><span class=\"o\">})</span>\n    <span class=\"o\">(</span><span class=\"n\">mul_eq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"n\">e</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">a.n</span> <span class=\"bp\">-</span> <span class=\"n\">b.n</span><span class=\"o\">})</span> <span class=\"o\">:</span>\n    <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">MulOneClass.one_mul</span> <span class=\"n\">a</span>  <span class=\"c1\">-- h : ∀ (a : G e), 1 * a = a</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> h : ∀ (a : G e), { n := 1.n - a.n } = a -/</span>\n  <span class=\"n\">done</span>\n</code></pre></div>\n<p>or perhaps define the <code>One</code> and <code>Mul</code> instances and then add the additional missing axioms of a group as additional hypotheses instead.</p>",
        "id": 436976699,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714781250
    },
    {
        "content": "<blockquote>\n<p>which extends both One and Mul</p>\n</blockquote>\n<p>That's true, but that means that <code>Group</code> contains its own <code>One</code> and <code>Mul</code>, which don't need to have any relation to the instances you defined.</p>",
        "id": 436976781,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714781305
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20unfold.20typeclass.20functions.3F/near/436976781\">said</a>:</p>\n<blockquote>\n<p><code>Group</code> contains its own <code>One</code> and <code>Mul</code>, which don't need to have any relation to the instances you defined.</p>\n</blockquote>\n<p>Do you mean to say that there are instantiations of One and Mul that are overriding mine in this case?</p>",
        "id": 436977068,
        "sender_full_name": "Raunak Chhatwal",
        "timestamp": 1714781577
    },
    {
        "content": "<p>Without any talk of what's overriding what, the issue is that there are two different One and Mul instances involved here.<br>\nTry this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">e</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">MulOneClass.one_mul</span> <span class=\"n\">a</span>\n  <span class=\"n\">change</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"n\">e</span><span class=\"o\">),</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>You might expect the <code>change</code> to succeed, but it doesn't. If you delete your One and Mul instances, it succeeds.</p>",
        "id": 436977280,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714781785
    },
    {
        "content": "<p>In the <code>change</code> line, your own One and Mul instances are overriding the ones from inside the <code>Group</code> instance. If the <code>Group</code> instance was compatible, you would expect it to succeed.</p>",
        "id": 436977339,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714781863
    },
    {
        "content": "<p>This is ugly, but you can add equation hypotheses that the One and Mul are compatible with the Group's.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">instOne</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">One</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">G.mk</span> <span class=\"n\">e</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instMul</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">G.mk</span> <span class=\"o\">(</span><span class=\"n\">a.n</span> <span class=\"bp\">-</span> <span class=\"n\">b.n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Group</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">e</span><span class=\"o\">)]</span>\n    <span class=\"o\">(</span><span class=\"n\">hOne</span> <span class=\"o\">:</span> <span class=\"n\">instOne</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">inst.toOne</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hMul</span> <span class=\"o\">:</span> <span class=\"n\">instMul</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">inst.toMul</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">MulOneClass.one_mul</span> <span class=\"n\">a</span>\n  <span class=\"c1\">-- change ∀ (a : G e), 1 * a = a at h -- still fails</span>\n  <span class=\"c1\">-- But we can use `convert_to` to use `hOne` and `hMul` to swap out the instances.</span>\n  <span class=\"n\">revert</span> <span class=\"n\">h</span>\n  <span class=\"n\">convert_to</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"n\">e</span><span class=\"o\">),</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">_</span> <span class=\"n\">using</span> <span class=\"mi\">6</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">change</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"n\">e</span><span class=\"o\">),</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"c1\">-- succeeds</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 436977584,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714782093
    },
    {
        "content": "<p>I'm currently looking for documentation for the change tactic since I don't know it. Can you suggest where Group defines one and mul? I'm surprised a class extending another class wouldn't just inherit those definitions.</p>",
        "id": 436977673,
        "sender_full_name": "Raunak Chhatwal",
        "timestamp": 1714782194
    },
    {
        "content": "<p><code>change e at h</code> tries to unify the type of <code>h</code> with <code>e</code> and if it succeeds it replaces the type with <code>e</code> (since it's the same, maybe written differently). If the type of <code>h</code> looks like <code>e</code> and you do <code>change e at h</code> and it fails, that means there's something unexpectedly different (like here).</p>",
        "id": 436977955,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714782446
    },
    {
        "content": "<blockquote>\n<p>I'm surprised a class extending another class wouldn't just inherit those definitions.</p>\n</blockquote>\n<p>The point here is that <code>Group</code> is a structure that contains all the fields of everything it extends. There are some instances for <code>One</code> and <code>Mul</code> that read from these fields, if there is a <code>Group</code> instance.</p>\n<p>By having a completely different <code>One</code> and <code>Mul</code> instance means that <code>1</code> and <code>*</code> are not reading from the fields from the <code>Group</code> instance. But, when you write <code>MulOneClass.one_mul a</code>, that lemma is given the <code>Group</code> instance, and it reads from the <code>Group</code> instance.</p>",
        "id": 436978250,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714782738
    },
    {
        "content": "<p>The <code>Group</code> doesn't look out to see what One and Mul already exist — it <em>is</em> the algebraic structure of a group all by itself.</p>",
        "id": 436978278,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714782785
    },
    {
        "content": "<p>If I am understanding correctly, the [Group (G e)] argument inserts stubs for all its fields and typeclass resolution doesn't progress further after encountering those declarations?</p>",
        "id": 436978801,
        "sender_full_name": "Raunak Chhatwal",
        "timestamp": 1714783365
    },
    {
        "content": "<p>There are no stubs, <code>[Group (G e)]</code> is declaring an argument like any other (but it's nameless, and from the outside, when your theorem is used, it gets automatically filled in using typeclass inference).</p>\n<p>We can name the argument and use regular binders like <code>(inst : Group (G e))</code>. When you write <code>(1 : G e)</code> without your additional One instance, it ends up making use of the <code>inst.toOne</code> field to construct <code>1</code>. However, since <code>inst</code> is just an argument, there's no definition for <code>inst.toOne</code> beyond the fact that it's the <code>toOne</code> field of <code>inst</code>.</p>",
        "id": 436979658,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714784386
    },
    {
        "content": "<p>Okay, that makes a lot more sense, that inst.toOne is not the same as the instance of One I declared. Thanks very much for the clarification. As for your suggestion:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Group</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">e</span><span class=\"o\">)]</span>\n    <span class=\"o\">(</span><span class=\"n\">hOne</span> <span class=\"o\">:</span> <span class=\"n\">instOne</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">inst.toOne</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hMul</span> <span class=\"o\">:</span> <span class=\"n\">instMul</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">inst.toMul</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">MulOneClass.one_mul</span> <span class=\"n\">a</span>\n  <span class=\"c1\">-- change ∀ (a : G e), 1 * a = a at h -- still fails</span>\n  <span class=\"c1\">-- But we can use `convert_to` to use `hOne` and `hMul` to swap out the instances.</span>\n  <span class=\"n\">revert</span> <span class=\"n\">h</span>\n  <span class=\"n\">convert_to</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"n\">e</span><span class=\"o\">),</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">_</span> <span class=\"n\">using</span> <span class=\"mi\">6</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">change</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"n\">e</span><span class=\"o\">),</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"c1\">-- succeeds</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p><code>intro h</code> fails with the following error:<br>\ntactic 'introN' failed, insufficient number of binders<br>\ncase h.h.h.e'_2.h.e'_5.h.e'_3<br>\ne : ℕ<br>\ninst : Group (G e)<br>\nhOne : instOne e = Monoid.toOne<br>\nhMul : instMul e = Semigroup.toMul<br>\na✝ : G e<br>\n⊢ instOfNatGOfNatNatInstOfNatNat e = One.toOfNat1</p>",
        "id": 436980209,
        "sender_full_name": "Raunak Chhatwal",
        "timestamp": 1714784954
    },
    {
        "content": "<p>That <code>convert</code> line is really really sensitive unfortunately. You might need to adjust <code>6</code> to something higher.</p>",
        "id": 436980427,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1714785215
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"681344\">Raunak Chhatwal</span> has marked this topic as resolved.</p>",
        "id": 436982394,
        "sender_full_name": "Notification Bot",
        "timestamp": 1714787626
    },
    {
        "content": "<p>I wasn't able to make convert work, but I now have a workable goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Group</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">e</span><span class=\"o\">)]</span>\n    <span class=\"o\">(</span><span class=\"n\">hOne</span> <span class=\"o\">:</span> <span class=\"n\">instOne</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">inst.toOne</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hMul</span> <span class=\"o\">:</span> <span class=\"n\">instMul</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">inst.toMul</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">MulOneClass.one_mul</span> <span class=\"o\">(</span><span class=\"n\">G.mk</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n  <span class=\"n\">unfold_projs</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">hOne</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">hMul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">unfold_projs</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span>  <span class=\"c1\">-- h : ∀ (a : ℕ), e - a = a ⊢ False</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Thanks for the help!</p>",
        "id": 436982403,
        "sender_full_name": "Raunak Chhatwal",
        "timestamp": 1714787634
    }
]