[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The Levi Civita Field -/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">LeviCivita</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- repr as rationals -/</span>\n  <span class=\"n\">coeffs</span> <span class=\"o\">:</span> <span class=\"n\">Std.HashMap</span> <span class=\"n\">Rat</span> <span class=\"n\">Rat</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">LeviCivita.mk</span> <span class=\"o\">(</span><span class=\"n\">Std.HashMap.empty.insert</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">LeviCivita</span><span class=\"o\">)</span>\n\n<span class=\"n\">deriving</span> <span class=\"kd\">instance</span> <span class=\"n\">Hashable</span> <span class=\"n\">for</span> <span class=\"n\">Rat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">LeviCivita.add</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">LeviCivita</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">LeviCivita</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">LeviCivita</span><span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">out</span><span class=\"o\">:</span> <span class=\"n\">Std.HashMap</span> <span class=\"n\">Rat</span> <span class=\"n\">Rat</span> <span class=\"o\">:=</span> <span class=\"n\">Std.HashMap.empty</span>\n    <span class=\"n\">for</span> <span class=\"o\">(</span><span class=\"n\">pwr</span><span class=\"o\">,</span> <span class=\"n\">coeff</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">a.coeffs</span> <span class=\"k\">do</span>\n      <span class=\"k\">if</span> <span class=\"n\">b.coeffs.contains</span> <span class=\"n\">pwr</span> <span class=\"k\">then</span>\n        <span class=\"k\">let</span> <span class=\"n\">coeff'</span> <span class=\"o\">:=</span> <span class=\"n\">a.coeffs</span><span class=\"o\">[</span><span class=\"n\">pwr</span><span class=\"o\">]</span><span class=\"bp\">+</span><span class=\"n\">b.coeffs</span><span class=\"o\">[</span><span class=\"n\">pwr</span><span class=\"o\">]</span>\n      <span class=\"k\">else</span>\n        <span class=\"k\">let</span> <span class=\"n\">coeff'</span> <span class=\"o\">:=</span> <span class=\"n\">a.coeffs</span><span class=\"o\">[</span><span class=\"n\">pwr</span><span class=\"o\">]</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span>\n      <span class=\"n\">out</span> <span class=\"o\">:=</span> <span class=\"n\">out.insert</span> <span class=\"n\">pwr</span> <span class=\"o\">(</span><span class=\"n\">coeff'</span><span class=\"o\">)</span>\n    <span class=\"o\">⟨</span><span class=\"n\">out</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>leads to this issue<br>\n<a href=\"/user_uploads/3121/0mgSb1ngti4UfzTAFqZLFfrL/2024-01-15-18-47-09.png\">2024-01-15-18-47-09.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/0mgSb1ngti4UfzTAFqZLFfrL/2024-01-15-18-47-09.png\" title=\"2024-01-15-18-47-09.png\"><img src=\"/user_uploads/3121/0mgSb1ngti4UfzTAFqZLFfrL/2024-01-15-18-47-09.png\"></a></div><p>I really have no idea why looping is failing</p>",
        "id": 413068863,
        "sender_full_name": "Alok Singh",
        "timestamp": 1705373252
    },
    {
        "content": "<p>maybe <code>Std.HashMap</code> doesn't have a <code>ForIn</code> instance?</p>",
        "id": 413072713,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1705375550
    },
    {
        "content": "<p>you could <code>import Std.Lean.HashMap</code> and use <code>Lean.HashMap</code> instead... that one has a <code>ForIn</code> instance</p>",
        "id": 413073189,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1705375903
    },
    {
        "content": "<p>btw, if you're trying to do pointwise addition on the two HashMaps, I don't think you even need the <code>for</code> loop... you can just do this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">LeviCivita.add</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">LeviCivita</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">LeviCivita</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">LeviCivita</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">a.coeffs.mergeWith</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">c1</span> <span class=\"n\">c2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">c1</span> <span class=\"bp\">+</span> <span class=\"n\">c2</span><span class=\"o\">)</span> <span class=\"n\">b.coeffs</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 413075530,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1705377340
    },
    {
        "content": "<p>ah, hadn't realized there were 2 and i used the other</p>",
        "id": 415960632,
        "sender_full_name": "Alok Singh",
        "timestamp": 1705472397
    },
    {
        "content": "<p>in a related vein, this made me wonder about notation like  <code>#{a =&gt; b}</code> for hashmaps.</p>",
        "id": 415961013,
        "sender_full_name": "Alok Singh",
        "timestamp": 1705472674
    }
]