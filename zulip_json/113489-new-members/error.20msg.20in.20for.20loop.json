[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Array.min</span> <span class=\"o\">[</span><span class=\"n\">LT</span> <span class=\"n\">a</span><span class=\"o\">](</span><span class=\"n\">self</span><span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">min</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n  <span class=\"n\">for</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">self</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">min</span><span class=\"bp\">?</span> <span class=\"k\">then</span>\n      <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"k\">then</span>\n        <span class=\"n\">min</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>gives error msg <code>failed to synthesize instance\n  Decidable (x &lt; y)</code>.</p>",
        "id": 411699415,
        "sender_full_name": "Alok Singh",
        "timestamp": 1704706109
    },
    {
        "content": "<p>That looks expected to me -- if you want to use <code>if</code> then you need an algorithm.</p>",
        "id": 411703822,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704707687
    },
    {
        "content": "<p>... and you can fix it by adding <code>[DecidableRel ((· &lt; ·) : a → a → Prop)]</code> to your assumptions.</p>",
        "id": 411710908,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1704709918
    }
]