[
    {
        "content": "<p>Let's say I have a function <code>ι : α → β</code>, which I can interpret as an embedding.</p>\n<p>I can use this to define a relation between functions <code>f : α → α</code> and <code>g : β → β</code>, stating that from the perspective of <code>ι</code> doing <code>f</code> in <code>α</code> is the same as doing <code>g</code> in <code>β</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">sameish</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">ι</span> <span class=\"bp\">=</span> <span class=\"n\">ι</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>I can do a similar construction for functions with much more complex Type signatures, for example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">sameish'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n    <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">ι</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>Is it possible to create a relation that works for any function of any type signature? Does this already exist somewhere in Lean or Mathlib? I guess this relation must be well known in the literature, what's its name?</p>",
        "id": 433788216,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1713364668
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Function.Semiconj#doc\">docs#Function.Semiconj</a></p>",
        "id": 434256896,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1713484815
    },
    {
        "content": "<p>not sure if there's a generalization like the one you're asking for</p>",
        "id": 434256954,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1713484858
    },
    {
        "content": "<p>actually I'm not really sure what you're asking for... what do you mean by \"a relation that works for any function of any type signature\"? what would the type signature of such a relation look like?</p>",
        "id": 434257217,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1713485018
    },
    {
        "content": "<p>Thanks, I knew something like this had to exist in Mathlib. <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Logic/Function/Conjugate.html#Function.Semiconj%E2%82%82\">docs#Function.Semiconj₂</a> already generalizes this concept somewhat.  And here is a further generalization (I didn't give too many thoughts on naming). </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Sig</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">codom</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Sig</span>\n  <span class=\"bp\">|</span> <span class=\"n\">dom</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Sig</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Sig</span>\n  <span class=\"bp\">|</span> <span class=\"n\">codomX</span> <span class=\"o\">:</span> <span class=\"n\">Sig</span>\n  <span class=\"bp\">|</span> <span class=\"n\">domX</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Sig</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Sig</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Sig.ofList</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Sig</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Sig.codomX</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"n\">some</span> <span class=\"n\">α</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Sig.codom</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">::</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Sig.domX</span> <span class=\"o\">(</span><span class=\"n\">Sig.ofList</span> <span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">α</span> <span class=\"o\">::</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Sig.dom</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">Sig.ofList</span> <span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Sig.type</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">):</span> <span class=\"n\">Sig</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Sig.codom</span> <span class=\"n\">α</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Sig.dom</span> <span class=\"n\">α</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Sig.type</span> <span class=\"n\">X</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Sig.codomX</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">X</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Sig.domX</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Sig.type</span> <span class=\"n\">X</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Sig.Semiconj</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Sig</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">ga</span> <span class=\"o\">:</span> <span class=\"n\">Sig.type</span> <span class=\"n\">α</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">gb</span> <span class=\"o\">:</span> <span class=\"n\">Sig.type</span> <span class=\"n\">β</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">s</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Sig.codom</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ga</span> <span class=\"bp\">=</span> <span class=\"n\">gb</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Sig.dom</span> <span class=\"n\">γ</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">,</span> <span class=\"n\">Sig.Semiconj</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">ga</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">gb</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Sig.codomX</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">ga</span> <span class=\"bp\">=</span> <span class=\"n\">gb</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Sig.domX</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">Sig.Semiconj</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">ga</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">gb</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Sig.SimiconjX</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">ga</span> <span class=\"o\">:</span> <span class=\"n\">γa</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">gb</span> <span class=\"o\">:</span> <span class=\"n\">γb</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">ca</span> <span class=\"o\">:</span> <span class=\"n\">γa</span> <span class=\"bp\">=</span> <span class=\"n\">Sig.type</span> <span class=\"n\">α</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">cb</span> <span class=\"o\">:</span> <span class=\"n\">γb</span> <span class=\"bp\">=</span> <span class=\"n\">Sig.type</span> <span class=\"n\">β</span> <span class=\"n\">s</span><span class=\"o\">),</span>\n  <span class=\"n\">Sig.Semiconj</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">cast</span> <span class=\"n\">ca</span> <span class=\"n\">ga</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cast</span> <span class=\"n\">cb</span> <span class=\"n\">gb</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ga</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">gb</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Function.Semiconj</span> <span class=\"n\">f</span> <span class=\"n\">ga</span> <span class=\"n\">gb</span> <span class=\"bp\">=</span> <span class=\"n\">Sig.Semiconj</span> <span class=\"o\">(</span><span class=\"n\">Sig.ofList</span> <span class=\"o\">[</span><span class=\"n\">none</span><span class=\"o\">]</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"n\">ga</span> <span class=\"n\">gb</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Function.Semiconj</span><span class=\"o\">,</span> <span class=\"n\">Sig.Semiconj</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ga</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">gb</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Function.Semiconj₂</span> <span class=\"n\">f</span> <span class=\"n\">ga</span> <span class=\"n\">gb</span> <span class=\"bp\">=</span> <span class=\"n\">Sig.Semiconj</span> <span class=\"o\">(</span><span class=\"n\">Sig.ofList</span> <span class=\"o\">[</span><span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"n\">none</span><span class=\"o\">]</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"n\">ga</span> <span class=\"n\">gb</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Function.Semiconj</span><span class=\"o\">,</span> <span class=\"n\">Sig.Semiconj</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>One limitation of this construction is that all the other types in <code>Sig</code> need to be from the same universe. It also doesn't handle the dependently typed case. Generalizing to these cases starts to become messy, so I was hoping someone else had already dealt with that.</p>",
        "id": 434299333,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1713510562
    },
    {
        "content": "<p>To any interested future reader, this is what I have come up with. I can proof that it extends <code>Function.Semiconj</code>, but I haven't tested how well it works for any other use case.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"sd\">/-- An inductive type representing the signature of a function with some</span>\n<span class=\"sd\">unbound positions, to allow for type dependency this assumes that any such</span>\n<span class=\"sd\">dependency factors through a type `model`, the default `PUnit` implies that</span>\n<span class=\"sd\">there is no such dependency. -/</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">AbstractSignature</span> <span class=\"o\">(</span><span class=\"n\">model</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">PUnit</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- The final return value has type `α` -/</span>\n  <span class=\"bp\">|</span> <span class=\"n\">codom</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">AbstractSignature</span> <span class=\"n\">model</span>\n  <span class=\"sd\">/-- The final return value has an unbound -/</span>\n  <span class=\"bp\">|</span> <span class=\"n\">codomUnbound</span> <span class=\"o\">:</span> <span class=\"n\">AbstractSignature</span> <span class=\"n\">model</span>\n  <span class=\"sd\">/-- The next argument has type `α`, and the remaining type signature</span>\n<span class=\"sd\">  depends via `sf` -/</span>\n  <span class=\"bp\">|</span> <span class=\"n\">dom</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sf</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">AbstractSignature</span> <span class=\"n\">model</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">AbstractSignature</span> <span class=\"n\">model</span>\n  <span class=\"sd\">/-- The next argument has unbound type, and the remaining type signature</span>\n<span class=\"sd\">  depends via `sf` -/</span>\n  <span class=\"bp\">|</span> <span class=\"n\">domUnbound</span> <span class=\"o\">(</span><span class=\"n\">sf</span> <span class=\"o\">:</span> <span class=\"n\">model</span> <span class=\"bp\">→</span> <span class=\"n\">AbstractSignature</span> <span class=\"n\">model</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">AbstractSignature</span> <span class=\"n\">model</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">AbstractSignature</span>\n\n<span class=\"sd\">/-- Construct a non-dependent `AbstractSignature` from a `List` of types. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">ofList</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">AbstractSignature</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"n\">some</span> <span class=\"n\">α</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">codom</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">codomUnbound</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">α</span> <span class=\"o\">::</span> <span class=\"n\">tail</span><span class=\"o\">,</span> <span class=\"n\">out</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">dom</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ofList</span> <span class=\"n\">tail</span> <span class=\"n\">out</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">::</span> <span class=\"n\">tail</span><span class=\"o\">,</span> <span class=\"n\">out</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">domUnbound</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ofList</span> <span class=\"n\">tail</span> <span class=\"n\">out</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- Construct a concrete type from an `AbstractSignature`, fill in positions in</span>\n<span class=\"sd\">the domain with the domain of `m` which is used to resolve type dependency,</span>\n<span class=\"sd\">the type of the codomain can be specified speratly, but defaults to the same type. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">type</span> <span class=\"o\">{</span><span class=\"n\">model</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">AbstractSignature</span> <span class=\"n\">model</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">imp</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">imp</span> <span class=\"bp\">→</span> <span class=\"n\">model</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">codom</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">imp</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">s</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">codom</span> <span class=\"n\">α</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">codomUnbound</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">codom</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">dom</span> <span class=\"n\">α</span> <span class=\"n\">sf</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">type</span> <span class=\"o\">(</span><span class=\"n\">sf</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"n\">codom</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">domUnbound</span> <span class=\"n\">sf</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">imp</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">type</span> <span class=\"o\">(</span><span class=\"n\">sf</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">m</span> <span class=\"n\">codom</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- Compose `f` after `g` in the ultimate codomain, unlike with the usual</span>\n<span class=\"sd\">composition by `∘`, `g` is allowed to have multiple curried arguments, as</span>\n<span class=\"sd\">specified by `s`, if the ultimate codomain is not unbound in `s`,</span>\n<span class=\"sd\">then this is a noop. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">comp</span> <span class=\"o\">{</span><span class=\"n\">model</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">AbstractSignature</span> <span class=\"n\">model</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n    <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">model</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">s.type</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s.type</span> <span class=\"n\">m</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">s</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">codom</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">g</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">codomUnbound</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">g</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">dom</span> <span class=\"n\">_</span> <span class=\"n\">sf</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">sf</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">domUnbound</span> <span class=\"n\">sf</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">sf</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- Compose `g` after `f` in the unbound arguments, as specified by `s`, unlike</span>\n<span class=\"sd\">with the usual composition by `∘`, `g` is allowed to have multiple curried</span>\n<span class=\"sd\">arguments, if there are no unbound arguments in `s`, then is is a noop. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">lift</span> <span class=\"o\">{</span><span class=\"n\">model</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">AbstractSignature</span> <span class=\"n\">model</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n    <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">model</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">s.type</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s.type</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">s</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">codom</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">g</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">codomUnbound</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">g</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">dom</span> <span class=\"n\">_</span> <span class=\"n\">sf</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">lift</span> <span class=\"o\">(</span><span class=\"n\">sf</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">f</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">domUnbound</span> <span class=\"n\">sf</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">lift</span> <span class=\"o\">(</span><span class=\"n\">sf</span> <span class=\"o\">((</span><span class=\"n\">m</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">f</span>\n\n<span class=\"sd\">/-- A function `f` semiconjugates two functions `ga` and `gb` with signatures</span>\n<span class=\"sd\">specified by `s` if `comp s f ga = lift s gb f`, this generalizes</span>\n<span class=\"sd\">[Function.Semiconj] and [Function.Semiconj₂]. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Semiconj</span> <span class=\"o\">{</span><span class=\"n\">model</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">AbstractSignature</span> <span class=\"n\">model</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">model</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">ga</span> <span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">m.default</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">gb</span> <span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"n\">s</span> <span class=\"n\">m.default</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">comp</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"n\">ga</span> <span class=\"bp\">=</span> <span class=\"n\">lift</span> <span class=\"n\">s</span> <span class=\"n\">gb</span> <span class=\"n\">f</span>\n\n<span class=\"sd\">/-- Proof that [Function.Semiconj] is indeed a special case of</span>\n<span class=\"sd\">[AbstractSignature.Semiconj]. -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">semiconj_eq_function_semiconj</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">model</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">model</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">ga</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">gb</span> <span class=\"o\">:</span> <span class=\"n\">model</span> <span class=\"bp\">→</span> <span class=\"n\">model</span> <span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Semiconj</span> <span class=\"o\">(</span><span class=\"n\">ofList</span> <span class=\"o\">[</span><span class=\"n\">none</span><span class=\"o\">]</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"n\">ga</span> <span class=\"n\">gb</span> <span class=\"bp\">=</span> <span class=\"n\">Function.Semiconj</span> <span class=\"n\">f</span> <span class=\"n\">ga</span> <span class=\"n\">gb</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Function.semiconj_iff_comp_eq</span><span class=\"o\">,</span> <span class=\"n\">Function.comp_def</span><span class=\"o\">,</span> <span class=\"n\">Semiconj</span><span class=\"o\">,</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">default_def</span><span class=\"o\">,</span>\n    <span class=\"n\">PUnit.default_eq_unit</span><span class=\"o\">,</span> <span class=\"n\">comp</span><span class=\"o\">,</span> <span class=\"n\">lift</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- Proof that [Function.Semiconj₂] is indeed a special case of</span>\n<span class=\"sd\">[AbstractSignature.Semiconj]. -/</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">model</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">model</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ga</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">gb</span> <span class=\"o\">:</span> <span class=\"n\">model</span> <span class=\"bp\">→</span> <span class=\"n\">model</span> <span class=\"bp\">→</span> <span class=\"n\">model</span> <span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Semiconj</span> <span class=\"o\">(</span><span class=\"n\">ofList</span> <span class=\"o\">[</span><span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"n\">none</span><span class=\"o\">]</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"n\">ga</span> <span class=\"n\">gb</span> <span class=\"bp\">=</span> <span class=\"n\">Function.Semiconj₂</span> <span class=\"n\">f</span> <span class=\"n\">ga</span> <span class=\"n\">gb</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Function.Semiconj₂</span><span class=\"o\">,</span> <span class=\"n\">Semiconj</span><span class=\"o\">,</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">default_def</span><span class=\"o\">,</span> <span class=\"n\">PUnit.default_eq_unit</span><span class=\"o\">,</span> <span class=\"n\">Function.comp_def</span><span class=\"o\">,</span>\n    <span class=\"n\">comp</span><span class=\"o\">,</span> <span class=\"n\">lift</span><span class=\"o\">,</span> <span class=\"n\">eq_iff_iff</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Function.funext_iff</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 434478221,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1713597694
    }
]