[
    {
        "content": "<p>Are there tactics that can solve these holes? What is recommended here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Order.Sub.Canonical</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span> <span class=\"n\">Nat</span> <span class=\"n\">Finset</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">9</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">ha</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"n\">s</span> <span class=\"n\">hs</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hs</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"n\">r</span> <span class=\"n\">hr</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hr</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hr</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span>\n      <span class=\"n\">dsimp</span> <span class=\"n\">only</span>\n      <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span>\n      <span class=\"k\">have</span> <span class=\"n\">r_eq_three_div_two</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n      <span class=\"k\">have</span> <span class=\"n\">s_eq_four_div_three</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span><span class=\"bp\">/</span><span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">r_eq_three_div_two</span><span class=\"o\">,</span> <span class=\"n\">rpow_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h1</span>\n        <span class=\"n\">linarith</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">r_eq_three_div_two</span><span class=\"o\">,</span> <span class=\"n\">s_eq_four_div_three</span><span class=\"o\">]</span>\n      <span class=\"gr\">sorry</span>\n      <span class=\"c\">/-</span>\n<span class=\"cm\">      case intro.intro</span>\n<span class=\"cm\">      a : ℝ → ℝ</span>\n<span class=\"cm\">      s r : ℝ</span>\n<span class=\"cm\">      h2 : s * r ^ 2 = 3</span>\n<span class=\"cm\">      h1 : s * r ^ 1 = 2</span>\n<span class=\"cm\">      hr : a = fun i ↦ s * r ^ i</span>\n<span class=\"cm\">      r_eq_three_div_two : r = 3 / 2</span>\n<span class=\"cm\">      s_eq_four_div_three : s = 4 / 3</span>\n<span class=\"cm\">      ⊢ 4 / 3 * (3 / 2) ^ 3 = 9 / 2</span>\n<span class=\"cm\">      -/</span>\n</code></pre></div>",
        "id": 428424890,
        "sender_full_name": "Iocta",
        "timestamp": 1711151132
    },
    {
        "content": "<p><code>norm_num</code> is the tactic you want</p>",
        "id": 428425500,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711151553
    },
    {
        "content": "<p>What about the other <code>sorry</code>?</p>",
        "id": 428425629,
        "sender_full_name": "Iocta",
        "timestamp": 1711151655
    },
    {
        "content": "<p>basically</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"n\">s</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n      <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span>\n      <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span>\n      <span class=\"bp\">⊢</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n</code></pre></div>",
        "id": 428425665,
        "sender_full_name": "Iocta",
        "timestamp": 1711151704
    },
    {
        "content": "<p>Another tip would be to start your proof with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">ha</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n</code></pre></div>",
        "id": 428426071,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711152016
    },
    {
        "content": "<p>For your goal state above, <code>have := congr($h2 / $h1)</code> is helpful</p>",
        "id": 428426308,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711152165
    },
    {
        "content": "<p>A lazy way (found partially via <code>hint</code>) seems to be <code>have r_eq_three_div_two : r = 3/2 := by simp_all [rpow_two, rpow_one]; nlinarith</code></p>",
        "id": 428426348,
        "sender_full_name": "Julian Berman",
        "timestamp": 1711152203
    },
    {
        "content": "<p>I see, that's</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">r_eq_three_div_two</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">rpow_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h1</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">rpow_two</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h2</span>\n    <span class=\"n\">nlinarith</span>\n</code></pre></div>",
        "id": 428427021,
        "sender_full_name": "Iocta",
        "timestamp": 1711152815
    },
    {
        "content": "<p><code>rpow_two</code> is a little strange.</p>",
        "id": 428427637,
        "sender_full_name": "Iocta",
        "timestamp": 1711153324
    },
    {
        "content": "<p>do you mean the fact that it looks like <code>x ^ 2 = x ^ 2</code>?</p>",
        "id": 428427799,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1711153471
    },
    {
        "content": "<p>if you look at the source, it's actually <code>x ^ (2 : ℝ) = x ^ (2 : ℕ)</code></p>",
        "id": 428427869,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1711153550
    },
    {
        "content": "<p>The general case is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Real.rpow_ofNat#doc\">docs#Real.rpow_ofNat</a>, which looks even stranger!</p>",
        "id": 428429557,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1711155171
    },
    {
        "content": "<p>hmm... <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> is it missing?</p>",
        "id": 428429691,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1711155324
    }
]