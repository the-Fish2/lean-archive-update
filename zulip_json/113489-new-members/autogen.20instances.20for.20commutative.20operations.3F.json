[
    {
        "content": "<p>take </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">HMul</span> <span class=\"n\">Float</span> <span class=\"o\">(</span><span class=\"n\">Matrix</span> <span class=\"n\">rows</span> <span class=\"n\">cols</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Matrix</span> <span class=\"n\">rows</span> <span class=\"n\">cols</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">hMul</span> <span class=\"n\">scalar</span> <span class=\"n\">matrix</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">matrix.data.map</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">*</span> <span class=\"n\">scalar</span><span class=\"o\">)⟩</span>\n<span class=\"k\">#eval</span> <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">mat</span>\n</code></pre></div>\n<p>I'd like to have </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">HMul</span> <span class=\"o\">(</span><span class=\"n\">Matrix</span> <span class=\"n\">rows</span> <span class=\"n\">cols</span><span class=\"o\">)</span> <span class=\"n\">Float</span> <span class=\"o\">(</span><span class=\"n\">Matrix</span> <span class=\"n\">rows</span> <span class=\"n\">cols</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">hMul</span> <span class=\"n\">matrix</span> <span class=\"n\">scalar</span> <span class=\"o\">:=</span> <span class=\"n\">scalar</span> <span class=\"bp\">*</span> <span class=\"n\">matrix</span>\n<span class=\"k\">#eval</span> <span class=\"n\">mat</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">0</span>\n</code></pre></div>\n<p>generated automatically since the underlying op (in this case) is commutative. Is that possible already? if not, is there a way i could metaprogram my way to victory?</p>",
        "id": 431486764,
        "sender_full_name": "Alok Singh",
        "timestamp": 1712309924
    },
    {
        "content": "<p>It is technically possible to do what you are asking about. However, I very very strongly do not recommend it. <code>*</code> is not a \"commutative operation\"; it is just a symbol. It can be used as notation for both commutative and non-commutative operations.</p>\n<p>If you decide you want to do it anyway, here is how you could.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">HMul</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">HMul</span> <span class=\"n\">β</span> <span class=\"n\">α</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↦</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">⟩</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Yields !![8, 11]. Note that these matrices are not of the correct dimensions to be multiplied,</span>\n<span class=\"cm\">so the instance above is used to reinterpret it as !![1, 2] * !![2, 1 ; 3, 5] first. -/</span>\n<span class=\"k\">#eval</span> <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">;</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">]</span> <span class=\"bp\">*</span> <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 431727683,
        "sender_full_name": "Mitchell Lee",
        "timestamp": 1712461414
    },
    {
        "content": "<p>this works but is somewhat broader than intended. i'm very well aware that <code>*</code> is just a symbol not implying commutativity, which is why some way of tagging single instances to generate flipped instance is desirable</p>",
        "id": 431732527,
        "sender_full_name": "Alok Singh",
        "timestamp": 1712466700
    }
]