[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Separation</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">TopologicalSpace</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">countable_covers_to_separated_nhds</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">k</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h_cov</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">Countable</span> <span class=\"n\">u</span> <span class=\"bp\">∧</span> <span class=\"n\">h</span> <span class=\"bp\">⊆</span> <span class=\"bp\">⋃₀</span> <span class=\"n\">u</span> <span class=\"bp\">∧</span>\n      <span class=\"bp\">∀</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">IsOpen</span> <span class=\"n\">v</span> <span class=\"bp\">∧</span> <span class=\"n\">Disjoint</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">k_cov</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">Countable</span> <span class=\"n\">u</span> <span class=\"bp\">∧</span> <span class=\"n\">k</span> <span class=\"bp\">⊆</span> <span class=\"bp\">⋃₀</span> <span class=\"n\">u</span> <span class=\"bp\">∧</span>\n      <span class=\"bp\">∀</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">IsOpen</span> <span class=\"n\">v</span> <span class=\"bp\">∧</span> <span class=\"n\">Disjoint</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SeparatedNhds</span> <span class=\"n\">h</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h_cov</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">uf</span><span class=\"o\">,</span> <span class=\"n\">uf_inj</span><span class=\"o\">⟩,</span> <span class=\"n\">u_cov</span><span class=\"o\">,</span> <span class=\"n\">u_mem</span><span class=\"o\">⟩</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">k_cov</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">vf</span><span class=\"o\">,</span> <span class=\"n\">vf_inj</span><span class=\"o\">⟩,</span> <span class=\"n\">v_cov</span><span class=\"o\">,</span> <span class=\"n\">v_mem</span><span class=\"o\">⟩</span>\n  <span class=\"n\">use</span> <span class=\"bp\">⋃₀</span><span class=\"o\">(</span><span class=\"n\">uf</span> <span class=\"bp\">⁻¹'</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"bp\">|</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"mi\">3</span><span class=\"o\">})</span>\n</code></pre></div>\n<p>The last line raises an error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">preimage</span> <span class=\"n\">uf</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">uf</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">↑</span><span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">Set</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.150446</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.150443</span> <span class=\"n\">u_1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but I would have expected it to yield the union of the first four members of the open cover <code>u</code>. What am I overlooking?</p>",
        "id": 437145613,
        "sender_full_name": "Steven Clontz",
        "timestamp": 1714927523
    },
    {
        "content": "<p>This appears to be a workaround (and maybe preferable) but I could probably still stand to learn what was wrong above.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Separation</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">TopologicalSpace</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">countable_covers_to_separated_nhds</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">k</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h_cov</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">⊆</span> <span class=\"bp\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"n\">i</span> <span class=\"bp\">∧</span>\n      <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">IsOpen</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">Disjoint</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">k_cov</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">⊆</span> <span class=\"bp\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"n\">i</span> <span class=\"bp\">∧</span>\n      <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">IsOpen</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">Disjoint</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SeparatedNhds</span> <span class=\"n\">h</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h_cov</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u_cov</span><span class=\"o\">,</span> <span class=\"n\">u_hyp</span><span class=\"o\">⟩</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">k_cov</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">v_cov</span><span class=\"o\">,</span> <span class=\"n\">v_hyp</span><span class=\"o\">⟩</span>\n  <span class=\"n\">use</span> <span class=\"bp\">⋃</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"n\">i</span>\n</code></pre></div>",
        "id": 437146771,
        "sender_full_name": "Steven Clontz",
        "timestamp": 1714928424
    },
    {
        "content": "<p>Could you provide a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>? Your code is missing imports &amp; variables.</p>",
        "id": 437155155,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1714935773
    },
    {
        "content": "<p>done (pity the <a href=\"https://live.lean-lang.org/\">https://live.lean-lang.org/</a> text editor UI is wonky, but I muddled through it and things are now demonstrated there)</p>",
        "id": 437155626,
        "sender_full_name": "Steven Clontz",
        "timestamp": 1714936295
    },
    {
        "content": "<p>the error is because <code>⋃₀</code> performs a union on a set of sets, but you've only given it a set of <code>u</code></p>",
        "id": 437155943,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1714936524
    },
    {
        "content": "<p><code>uf</code> is a function of type <code>u → ℕ</code>, so the preimage of a set of <code>ℕ</code> under <code>uf</code> is going to be a set of <code>u</code></p>",
        "id": 437156213,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1714936725
    },
    {
        "content": "<p>Sure, that is what the error message I posted says. But (thinking naively, as a newbie) <code>u</code> represents a countable open cover of <code>X</code> (a set of sets), <code>uf</code> maps from <code>u</code> to <code>ℕ</code>, and I took the preimage of the numbers <code>0,1,2,3</code>. Naively, that's a finite subset of <code>u</code>, a set of open sets - how do I formalize that approach?</p>",
        "id": 437156698,
        "sender_full_name": "Steven Clontz",
        "timestamp": 1714937187
    },
    {
        "content": "<p>Oh, I think I see the confusion... <code>u</code> is a set of sets of X, so the assumption is that a value of type <code>↑u</code> should be a set, and therefore a set of <code>↑u</code> returned by <code>Set.preimage</code> should be a set of sets. However, that's not exactly the case... rather, <code>↑u</code> represents <code>u</code> coerced to a subtype, so a value of type <code>↑u</code> is actually a combination of a set of X and a proof that the set is a member of <code>u</code>. <code>⋃₀</code> can't work with that... it needs a set of sets, not a set of subtype values that happen to represent sets.</p>",
        "id": 437157188,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1714937639
    },
    {
        "content": "<p>Thanks! Yeah, I figured it was some subtlety like that. Now, is there a way to massage these preimages into the set of sets I want? Or a more appropriate way to go about it (besides just refactoring to use a function as I did)?</p>",
        "id": 437157366,
        "sender_full_name": "Steven Clontz",
        "timestamp": 1714937770
    },
    {
        "content": "<p>I can't claim to know the best way to go about it, but one way would be to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.image#doc\">docs#Set.image</a> with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subtype.val#doc\">docs#Subtype.val</a> like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">use</span> <span class=\"bp\">⋃₀</span> <span class=\"o\">(</span><span class=\"n\">Subtype.val</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"n\">uf</span> <span class=\"bp\">⁻¹'</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"bp\">|</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"mi\">3</span><span class=\"o\">}))</span>\n</code></pre></div>",
        "id": 437157631,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1714938032
    },
    {
        "content": "<p>That seems to work. Thanks <span class=\"user-mention\" data-user-id=\"380294\">@Matt Diamond</span>.</p>",
        "id": 437158698,
        "sender_full_name": "Steven Clontz",
        "timestamp": 1714938726
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"468051\">Steven Clontz</span> has marked this topic as resolved.</p>",
        "id": 437158705,
        "sender_full_name": "Notification Bot",
        "timestamp": 1714938730
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"380294\">@Matt Diamond</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20unioning.20.20members.20of.20a.20countable.20cover/near/437157631\">said</a>:</p>\n<blockquote>\n<p>I can't claim to know the best way to go about it, but one way would be to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.image#doc\">docs#Set.image</a> with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subtype.val#doc\">docs#Subtype.val</a> like so:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">use</span> <span class=\"bp\">⋃₀</span> <span class=\"o\">(</span><span class=\"n\">Subtype.val</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"n\">uf</span> <span class=\"bp\">⁻¹'</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"bp\">|</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"mi\">3</span><span class=\"o\">}))</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>A better way is to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.iUnion#doc\">docs#Set.iUnion</a> ! namely <code>⋃ x ∈ uf ⁻¹' {m | m ≤ 3}, Subtype.val x</code></p>",
        "id": 437286205,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1715009232
    }
]