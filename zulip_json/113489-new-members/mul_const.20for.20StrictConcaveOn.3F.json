[
    {
        "content": "<p>I couldn't find this in Mathlib. It should be there, right? (My proof is ugly, of course. Happy for suggestions how to improve)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">StrictConcaveOn.mul_const</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">cpos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">StrictConcaveOn</span> <span class=\"n\">ℝ</span> <span class=\"n\">S</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">StrictConcaveOn</span> <span class=\"n\">ℝ</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">hconv</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n    <span class=\"n\">refine'</span> <span class=\"o\">⟨</span><span class=\"n\">hconv</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"n\">y</span> <span class=\"n\">hy</span> <span class=\"n\">hxy</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span> <span class=\"n\">hab</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n    <span class=\"n\">simp</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span> <span class=\"n\">hxy</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span> <span class=\"n\">hab</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n    <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">mul_lt_mul_left</span> <span class=\"n\">cpos</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">this</span> <span class=\"n\">using</span> <span class=\"mi\">1</span>\n    <span class=\"n\">ring</span>\n</code></pre></div>\n<p>Loogle for <code>StrictConcaveOn _ _ _, \"mul\"</code> gives nothing relevant.</p>",
        "id": 411622332,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1704652204
    },
    {
        "content": "<p>I'd PR this and similar things for other sides :)</p>",
        "id": 411627399,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1704656758
    },
    {
        "content": "<p>What do you mean by \"sides\"?</p>",
        "id": 411627460,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1704656790
    },
    {
        "content": "<p>Shorter:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">StrictConcaveOn.mul_const</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">cpos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">StrictConcaveOn</span> <span class=\"n\">ℝ</span> <span class=\"n\">S</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">StrictConcaveOn</span> <span class=\"n\">ℝ</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine'</span> <span class=\"o\">⟨</span><span class=\"n\">h.1</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"n\">y</span> <span class=\"n\">hy</span> <span class=\"n\">hxy</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span> <span class=\"n\">hab</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mul_smul_comm</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">mul_lt_mul_left</span> <span class=\"n\">cpos</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h.2</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span> <span class=\"n\">hxy</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span> <span class=\"n\">hab</span>\n</code></pre></div>",
        "id": 411628394,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1704657713
    },
    {
        "content": "<p>Is this true more generally for <code>smul</code>?</p>",
        "id": 411629261,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704658549
    },
    {
        "content": "<p>Yep. I have a better proof. PR incoming.</p>",
        "id": 411629458,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704658748
    },
    {
        "content": "<p>Maybe also add <code>strictConvexOn_id</code> and <code>strictConcaveOn_id</code> (for Real -&gt; Real functions)?</p>",
        "id": 411630399,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1704659807
    },
    {
        "content": "<p><code>id</code> is certainly <em>not</em> strictly convex!</p>",
        "id": 411630612,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704660068
    },
    {
        "content": "<p>Right, sorry... it's not strict of course, and the \"non-strict\" versions seem to be in Mathlib already...</p>",
        "id": 411630679,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1704660125
    }
]