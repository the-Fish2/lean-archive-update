[
    {
        "content": "<p>Hi all! I was trying to understand the data structures that are accessible inside a run_cmd, but this example - from <a href=\"#narrow/stream/113489-new-members/topic/A.20command.20that.20prints.20the.20current.20namespace.3F\">this thread</a> -</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Lean</span>\n<span class=\"kn\">namespace</span><span class=\"w\"> </span><span class=\"n\">Foo</span>\n<span class=\"n\">run_cmd</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">logInfo</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"bp\">.</span><span class=\"n\">getCurrNamespace</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>turned out to be too complex... so I took this one,</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Lean</span>\n<span class=\"bp\">#</span><span class=\"n\">eval</span><span class=\"w\"> </span><span class=\"n\">Syntax</span><span class=\"bp\">.</span><span class=\"n\">mkApp</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">mkIdent</span><span class=\"w\"> </span><span class=\"ss\">`Nat.add</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Syntax</span><span class=\"bp\">.</span><span class=\"n\">mkNumLit</span><span class=\"w\"> </span><span class=\"s2\">\"1\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Syntax</span><span class=\"bp\">.</span><span class=\"n\">mkNumLit</span><span class=\"w\"> </span><span class=\"s2\">\"1\"</span><span class=\"o\">]</span>\n<span class=\"bp\">#</span><span class=\"n\">eval</span><span class=\"w\"> </span><span class=\"n\">mkNode</span><span class=\"w\"> </span><span class=\"bp\">`«</span><span class=\"n\">term_</span><span class=\"bp\">+_»</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Syntax</span><span class=\"bp\">.</span><span class=\"n\">mkNumLit</span><span class=\"w\"> </span><span class=\"s2\">\"1\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">mkAtom</span><span class=\"w\"> </span><span class=\"s2\">\"+\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Syntax</span><span class=\"bp\">.</span><span class=\"n\">mkNumLit</span><span class=\"w\"> </span><span class=\"s2\">\"1\"</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>from the section \"<a href=\"https://leanprover-community.github.io/lean4-metaprogramming-book/main/05_syntax.html#constructing-new-syntax\">Constructing new Syntax</a>\" of the metaprogramming book, and expanded it into:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Lean</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">my1</span><span class=\"w\">      </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Syntax</span><span class=\"bp\">.</span><span class=\"n\">mkNumLit</span><span class=\"w\"> </span><span class=\"s2\">\"1\"</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">myadd</span><span class=\"w\">    </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">mkIdent</span><span class=\"w\"> </span><span class=\"ss\">`Nat.add</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">myplus</span><span class=\"w\">   </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">`«</span><span class=\"n\">term_</span><span class=\"bp\">+_»</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">myadd11</span><span class=\"w\">  </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Syntax</span><span class=\"bp\">.</span><span class=\"n\">mkApp</span><span class=\"w\"> </span><span class=\"n\">myadd</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">my1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">my1</span><span class=\"o\">]</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">myplus11</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">mkNode</span><span class=\"w\"> </span><span class=\"n\">myplus</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">my1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">mkAtom</span><span class=\"w\"> </span><span class=\"s2\">\"+\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">my1</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- Compare:</span>\n<span class=\"bp\">#</span><span class=\"n\">eval</span><span class=\"w\"> </span><span class=\"n\">Syntax</span><span class=\"bp\">.</span><span class=\"n\">mkApp</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">mkIdent</span><span class=\"w\"> </span><span class=\"ss\">`Nat.add</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Syntax</span><span class=\"bp\">.</span><span class=\"n\">mkNumLit</span><span class=\"w\"> </span><span class=\"s2\">\"1\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Syntax</span><span class=\"bp\">.</span><span class=\"n\">mkNumLit</span><span class=\"w\"> </span><span class=\"s2\">\"1\"</span><span class=\"o\">]</span>\n<span class=\"bp\">#</span><span class=\"n\">eval</span><span class=\"w\"> </span><span class=\"n\">myadd11</span>\n<span class=\"bp\">#</span><span class=\"n\">eval</span><span class=\"w\"> </span><span class=\"n\">mkNode</span><span class=\"w\"> </span><span class=\"bp\">`«</span><span class=\"n\">term_</span><span class=\"bp\">+_»</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Syntax</span><span class=\"bp\">.</span><span class=\"n\">mkNumLit</span><span class=\"w\"> </span><span class=\"s2\">\"1\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">mkAtom</span><span class=\"w\"> </span><span class=\"s2\">\"+\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Syntax</span><span class=\"bp\">.</span><span class=\"n\">mkNumLit</span><span class=\"w\"> </span><span class=\"s2\">\"1\"</span><span class=\"o\">]</span>\n<span class=\"bp\">#</span><span class=\"n\">eval</span><span class=\"w\"> </span><span class=\"n\">myplus11</span>\n\n<span class=\"c1\">-- Primitive tools for exploring myadd11 and myplus11:</span>\n<span class=\"kn\">class</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">where</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">String</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">Syntax</span><span class=\"bp\">.</span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Syntax</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">String</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">missing</span><span class=\"w\">              </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"s2\">\"(missing)\"</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">node</span><span class=\"w\">  </span><span class=\"n\">info</span><span class=\"w\"> </span><span class=\"n\">kind</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"s2\">\"(node)\"</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">atom</span><span class=\"w\">  </span><span class=\"n\">info</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"w\">       </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"s2\">\"(atom)\"</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">ident</span><span class=\"w\"> </span><span class=\"n\">info</span><span class=\"w\"> </span><span class=\"n\">rawVal</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"n\">preresolved</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"s2\">\"(ident)\"</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">Name</span><span class=\"bp\">.</span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Name</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">String</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">anonymous</span><span class=\"w\">   </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"s2\">\"(anonymous)\"</span>\n<span class=\"c1\">--| .str pre str =&gt; \"(str)\"</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">str</span><span class=\"w\"> </span><span class=\"n\">pre</span><span class=\"w\"> </span><span class=\"n\">str</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"s2\">\"(str: \"</span><span class=\"bp\">++</span><span class=\"w\"> </span><span class=\"n\">str</span><span class=\"w\"> </span><span class=\"bp\">++</span><span class=\"w\"> </span><span class=\"s2\">\")\"</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">.</span><span class=\"n\">num</span><span class=\"w\"> </span><span class=\"n\">pre</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\">   </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"s2\">\"(num)\"</span>\n\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"n\">Syntax</span><span class=\"w\"> </span><span class=\"kn\">where</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Syntax</span><span class=\"bp\">.</span><span class=\"n\">foo</span>\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"n\">Name</span><span class=\"w\">   </span><span class=\"kn\">where</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Name</span><span class=\"bp\">.</span><span class=\"n\">foo</span>\n\n<span class=\"bp\">#</span><span class=\"n\">eval</span><span class=\"w\"> </span><span class=\"n\">Syntax</span><span class=\"bp\">.</span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"n\">myplus11</span>\n<span class=\"bp\">#</span><span class=\"n\">eval</span><span class=\"w\"> </span><span class=\"n\">Syntax</span><span class=\"bp\">.</span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"n\">myadd11</span>\n<span class=\"bp\">#</span><span class=\"n\">eval</span><span class=\"w\"> </span><span class=\"n\">Name</span><span class=\"bp\">.</span><span class=\"n\">foo</span><span class=\"w\">   </span><span class=\"n\">myplus</span>\n</code></pre></div>\n<p>With that I can see that <code>myplus11</code> is an object of the class <code>Syntax</code> that is of the form \"<a href=\"https://github.com/leanprover/lean4/blob/master/src/Init/Prelude.lean#L3708\">node info kind args</a>\", and by changing my definitions of <code>Syntax.foo</code> and <code>Name.foo</code> I should be able to inspect to interesting subfields and subsubfields of <code>myplus11</code> and <code>myadd11</code>... but that looks very clumsy.</p>\n<p>How do non-newbies inspect particular cases data structures? For example, what are the better ways to discover that <code>myplus11</code> above is of an object of the class <code>Syntax</code>, of the form \"<code>node info kind args</code>\", and how would non-newbies extract its \"<code>info</code>\" field?</p>",
        "id": 440629134,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1716636300
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"381195\">Eduardo Ochs</span> <a href=\"#narrow/stream/113489-new-members/topic/Tools.20for.20exploring.20data.20structures.3F/near/440629134\">said</a>:</p>\n<blockquote>\n<p>For example, what are the better ways to discover that <code>myplus11</code> above is of an object of the class <code>Syntax</code>, of the form \"<code>node info kind args</code>\", and how would non-newbies extract its \"<code>info</code>\" field?</p>\n</blockquote>\n<p>You can use the <code>#check &lt;arg&gt;</code> command to get the type of <code>&lt;arg&gt;</code>. <code>#check myplus11</code> should show <code>myplus11: TSyntax myplus</code> in the info window.</p>\n<p>Most people are either going to search <a href=\"https://leanprover-community.github.io/mathlib4_docs/\">the docs</a>, or use vscode's right-click menu options, like to go definition and go to type definition.</p>",
        "id": 440650733,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1716656970
    },
    {
        "content": "<p>It's hard to extract the values of subfields from the info window! I was looking for something that would let me extract the values of subfields and subsubfields and put them into variables, like this -</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Lean</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">my1</span><span class=\"w\">      </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Syntax</span><span class=\"bp\">.</span><span class=\"n\">mkNumLit</span><span class=\"w\"> </span><span class=\"s2\">\"1\"</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">myadd</span><span class=\"w\">    </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">mkIdent</span><span class=\"w\"> </span><span class=\"ss\">`Nat.add</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">myplus</span><span class=\"w\">   </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"bp\">`«</span><span class=\"n\">term_</span><span class=\"bp\">+_»</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">myadd11</span><span class=\"w\">  </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Syntax</span><span class=\"bp\">.</span><span class=\"n\">mkApp</span><span class=\"w\"> </span><span class=\"n\">myadd</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">my1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">my1</span><span class=\"o\">]</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">myplus11</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">mkNode</span><span class=\"w\"> </span><span class=\"n\">myplus</span><span class=\"w\"> </span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">my1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">mkAtom</span><span class=\"w\"> </span><span class=\"s2\">\"+\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">my1</span><span class=\"o\">]</span>\n\n<span class=\"kn\">macro</span><span class=\"w\"> </span><span class=\"s2\">\"extractFrom \"</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"w\"> </span><span class=\"s2\">\" =&gt; \"</span><span class=\"w\"> </span><span class=\"n\">pat</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"w\"> </span><span class=\"s2\">\" =&gt; \"</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">term</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span>\n<span class=\"w\">  </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">input</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">with</span>\n<span class=\"w\">     </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">pat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">result</span><span class=\"o\">)</span>\n<span class=\"w\">     </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">none</span><span class=\"o\">)</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"n\">myadd11</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">a</span>\n<span class=\"bp\">#</span><span class=\"n\">eval</span><span class=\"w\">  </span><span class=\"n\">a</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">Term</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">extractFrom</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Syntax</span><span class=\"bp\">.</span><span class=\"n\">node</span><span class=\"w\"> </span><span class=\"n\">info</span><span class=\"w\"> </span><span class=\"n\">kind</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">info</span>\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">b</span>\n<span class=\"bp\">#</span><span class=\"n\">eval</span><span class=\"w\">  </span><span class=\"n\">b</span>\n</code></pre></div>\n<p>Note that the macro \"extractFrom\" above is buggy! It worked for me in a simpler case (not shown), but it doesn't work in the code above. I'll try to fix that tomorrow - more later...</p>",
        "id": 440686506,
        "sender_full_name": "Eduardo Ochs",
        "timestamp": 1716699782
    }
]