[
    {
        "content": "<p>I'm trying to understand the construction of set.<br>\nI would like to prove that something is a member a of a set defined by a predicate, for example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">real</span> <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">&lt;=</span> <span class=\"mi\">2</span><span class=\"o\">}</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">coe</span> <span class=\"mi\">0</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>but the goal is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"bp\">↑</span><span class=\"mi\">0</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span>\n</code></pre></div>\n<p>when I want it to be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">↑</span><span class=\"mi\">0</span><span class=\"bp\">*↑</span><span class=\"mi\">0</span>  <span class=\"bp\">&lt;=</span> <span class=\"mi\">2</span>\n</code></pre></div>",
        "id": 229865598,
        "sender_full_name": "Florestan",
        "timestamp": 1615475896
    },
    {
        "content": "<p>Two approaches:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">real</span> <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">&lt;=</span> <span class=\"mi\">2</span><span class=\"o\">}</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">S</span><span class=\"o\">],</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>In the first one, you ask Lean to expand the definition of <code>S</code>. In the second one, you do the expansion yourself, but you ask Lean to check that this is still the same question (this is the role of <code>change</code>)</p>",
        "id": 229867539,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1615476552
    },
    {
        "content": "<p>Great, thank you !</p>",
        "id": 229867933,
        "sender_full_name": "Florestan",
        "timestamp": 1615476695
    },
    {
        "content": "<p>And instead of using <code>change</code> you can also write <code>rw set.mem_set_of_eq</code> (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.mem_set_of_eq\">docs#set.mem_set_of_eq</a>). That lemma states <code>a ∈ {a : α | p a} = p a</code>.</p>",
        "id": 229868260,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1615476799
    },
    {
        "content": "<p>How would I prove this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">}</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span><span class=\"bp\">?</span>\n</code></pre></div>\n<p>It's giving me an error due to metavariables which says \"typeclass instance problem is stuck, it is often due to metavariables Membership ℕ ?m.394534\".</p>",
        "id": 419477642,
        "sender_full_name": "Colin Jones ⚛️",
        "timestamp": 1706887034
    },
    {
        "content": "<p>Is <code>{1, 3}</code> a Set, Finset, something else? Lean doesn't know</p>",
        "id": 419477985,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706887135
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/Prove.20set.20membership/near/419477985\">said</a>:</p>\n<blockquote>\n<p>Is <code>{1, 3}</code> a Set, Finset, something else? Lean doesn't know</p>\n</blockquote>\n<p>How would I let lean know that it's a Finset?</p>",
        "id": 419478134,
        "sender_full_name": "Colin Jones ⚛️",
        "timestamp": 1706887182
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">({</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span><span class=\"bp\">?</span>\n</code></pre></div>",
        "id": 419478328,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1706887229
    },
    {
        "content": "<p>Okay that fixes the metavariable problem, but I still need help with the proof. The tactic apply? and rw? aren't helping me out.</p>",
        "id": 419478882,
        "sender_full_name": "Colin Jones ⚛️",
        "timestamp": 1706887385
    },
    {
        "content": "<p>Oh nevermind here's is how I proved it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">({</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_singleton</span><span class=\"o\">,</span> <span class=\"n\">mem_insert</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Thank you for your help</p>",
        "id": 419479145,
        "sender_full_name": "Colin Jones ⚛️",
        "timestamp": 1706887455
    },
    {
        "content": "<p>FWIW, rw? gives the suggestion <code>  rw [@Finset.mem_insert]</code>, which is a good start.</p>",
        "id": 419479282,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1706887497
    },
    {
        "content": "<p>I agree it is not particularly helpful that <code>apply?</code> gives suggestions which are errors though.</p>",
        "id": 419479394,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1706887532
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">({</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop</span>\n</code></pre></div>",
        "id": 419535584,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706908227
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">({</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 419535642,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706908255
    }
]