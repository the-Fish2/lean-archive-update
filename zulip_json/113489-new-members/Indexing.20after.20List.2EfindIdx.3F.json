[
    {
        "content": "<p>I may have worked myself into a corner. Maybe somebody more experienced than me can help me navigate my way out. While I'm sure there's a theorem in Mathlib for this, I can't find it, so I've been trying to prove this for myself. It's also just for practice anyway, but I think I'm just not fully there yet with proofs by induction.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">List.findIdx</span><span class=\"bp\">?</span> <span class=\"n\">p</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.length</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">List.findIdx</span><span class=\"bp\">?</span><span class=\"n\">_nil</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">x</span>\n    <span class=\"bp\">.</span> <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">List.findIdx</span><span class=\"bp\">?</span><span class=\"n\">_cons</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"n\">List.findIdx</span><span class=\"bp\">?</span><span class=\"n\">_succ</span><span class=\"o\">,</span> <span class=\"n\">ite_true</span><span class=\"o\">,</span> <span class=\"n\">Option.some.injEq</span><span class=\"o\">,</span><span class=\"n\">List.length_cons</span><span class=\"o\">]</span>\n      <span class=\"n\">linarith</span>\n    <span class=\"bp\">.</span> <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">List.findIdx</span><span class=\"bp\">?</span><span class=\"n\">_cons</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"n\">List.findIdx</span><span class=\"bp\">?</span><span class=\"n\">_succ</span><span class=\"o\">,</span> <span class=\"n\">ite_false</span><span class=\"o\">,</span>\n      <span class=\"n\">Option.map_eq_some'</span><span class=\"o\">,</span> <span class=\"n\">Bool.not_eq_true</span><span class=\"o\">,</span> <span class=\"n\">List.length_cons</span><span class=\"o\">]</span>\n      <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">i'</span><span class=\"o\">,</span> <span class=\"n\">ih'</span><span class=\"o\">,</span> <span class=\"n\">ip</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">ip</span><span class=\"o\">]</span>\n      <span class=\"n\">refine</span> <span class=\"n\">Nat.succ_lt_succ</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n      <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 421163018,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1707789622
    },
    {
        "content": "<p>With proofs by induction, it's important to choose your induction hypothesis carefully. In this case, I think your induction hypothesis is not strong enough. Consider the goal state in the <code>cons</code> case:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ih</span><span class=\"o\">:</span> <span class=\"n\">List.findIdx</span><span class=\"bp\">?</span> <span class=\"n\">p</span> <span class=\"n\">xs</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">List.length</span> <span class=\"n\">xs</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">List.findIdx</span><span class=\"bp\">?</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">i</span>\n<span class=\"n\">hb</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">true</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>We can only use <code>ih</code> if the first match in <code>xs</code> is at position <code>i</code>, but that's not possible.<code>h</code> tells that the first match in <code>x :: xs</code> is at position <code>i</code>, which would mean the first match in <code>xs</code> is at position <code>i - 1</code>.</p>\n<p>You can use <code>induction ... generalizing ...</code> to get a stronger induction hypothesis like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">List.findIdx</span><span class=\"bp\">?</span> <span class=\"n\">p</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.length</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"n\">generalizing</span> <span class=\"n\">i</span> <span class=\"k\">with</span> <span class=\"c1\">-- we need our induction hypothesis to apply for all `i`</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">List.findIdx</span><span class=\"bp\">?</span><span class=\"n\">_nil</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">x</span>\n    <span class=\"bp\">.</span> <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">List.findIdx</span><span class=\"bp\">?</span><span class=\"n\">_cons</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"n\">List.findIdx</span><span class=\"bp\">?</span><span class=\"n\">_succ</span><span class=\"o\">,</span> <span class=\"n\">ite_true</span><span class=\"o\">,</span> <span class=\"n\">Option.some.injEq</span><span class=\"o\">,</span><span class=\"n\">List.length_cons</span><span class=\"o\">]</span>\n      <span class=\"n\">linarith</span>\n    <span class=\"bp\">.</span> <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">List.findIdx</span><span class=\"bp\">?</span><span class=\"n\">_cons</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"n\">List.findIdx</span><span class=\"bp\">?</span><span class=\"n\">_succ</span><span class=\"o\">,</span> <span class=\"n\">ite_false</span><span class=\"o\">,</span>\n      <span class=\"n\">Option.map_eq_some'</span><span class=\"o\">,</span> <span class=\"n\">Bool.not_eq_true</span><span class=\"o\">,</span> <span class=\"n\">List.length_cons</span><span class=\"o\">]</span>\n      <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">i'</span><span class=\"o\">,</span> <span class=\"n\">ih'</span><span class=\"o\">,</span> <span class=\"n\">ip</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">ip</span><span class=\"o\">]</span>\n      <span class=\"n\">refine</span> <span class=\"n\">Nat.succ_lt_succ</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n      <span class=\"n\">apply</span> <span class=\"n\">ih</span>\n      <span class=\"n\">exact</span> <span class=\"n\">ih'</span>\n</code></pre></div>\n<p>(Note that this is not magic. You could do this manually with <code>revert i; induction l; intro i</code>)</p>",
        "id": 421165577,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1707791520
    },
    {
        "content": "<p>Ah, <code>revert i</code>! I see. thanks</p>",
        "id": 421166813,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1707792495
    }
]