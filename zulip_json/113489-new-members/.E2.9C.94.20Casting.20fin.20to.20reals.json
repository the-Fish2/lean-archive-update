[
    {
        "content": "<p>I am trying to lift a prop about the inequality of bounded nats to reals. If I just write this on nats, then <code>simp</code> is sufficient:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">nat_cast_ne</span> <span class=\"o\">(</span><span class=\"n\">n1</span> <span class=\"n\">n2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hneq</span> <span class=\"o\">:</span> <span class=\"n\">n1</span> <span class=\"bp\">≠</span> <span class=\"n\">n2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">n1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"n\">n2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hneq</span><span class=\"o\">]</span> <span class=\"c1\">-- succeeds</span>\n</code></pre></div>\n<p>But if I write the same theorem on fins, then <code>simp</code> (and <code>norm_cast</code>) is not sufficient:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">fin_cast_ne</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n1</span> <span class=\"n\">n2</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hneq</span> <span class=\"o\">:</span> <span class=\"n\">n1</span> <span class=\"bp\">≠</span> <span class=\"n\">n2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">n1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"n\">n2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hneq</span><span class=\"o\">]</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>\n<p>Is there a recommended way for \"lifting\" theorems between fins and reals?</p>",
        "id": 423223643,
        "sender_full_name": "Will Crichton",
        "timestamp": 1708828156
    },
    {
        "content": "<p>I think you just need <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fin.val_eq_val#doc\">docs#Fin.val_eq_val</a>. I wonder why that's not marked <code>@[simp]</code>..</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">fin_cast_ne</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n1</span> <span class=\"n\">n2</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hneq</span> <span class=\"o\">:</span> <span class=\"n\">n1</span> <span class=\"bp\">≠</span> <span class=\"n\">n2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">n1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"n\">n2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hneq</span><span class=\"o\">,</span> <span class=\"n\">Fin.val_eq_val</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 423223936,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1708828522
    },
    {
        "content": "<p>Ah I realize I was only looking at the stdlib Fin theorems and not mathlib. Thank you <span class=\"user-mention\" data-user-id=\"500038\">@Timo Carlin-Burns</span>!</p>",
        "id": 423224044,
        "sender_full_name": "Will Crichton",
        "timestamp": 1708828658
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"625391\">Will Crichton</span> has marked this topic as resolved.</p>",
        "id": 423230514,
        "sender_full_name": "Notification Bot",
        "timestamp": 1708835472
    }
]