[
    {
        "content": "<p>i want to be able to reason about nondeterministic networked programs. My idea is to use the (false) assumption that sending values other the network results in the same value on the receiving side. <br>\nProofs depending on this property will allways show the yellow sorry squiggles.</p>\n<ol>\n<li>can i write my own \"sorry\" tatctic, indicating to a user something like \"declaration uses 'network_correctness\" instead of sorry</li>\n<li>do you know cleaner approaches?<br>\ndoes this theorem look alright?</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">network_op</span> <span class=\"o\">(</span><span class=\"n\">input</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span>  <span class=\"n\">IO</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">return</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">IO.rand</span> <span class=\"mi\">0</span> <span class=\"n\">input</span> <span class=\"c1\">-- assumed to return input</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">network_always_works</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w1</span> <span class=\"n\">w2</span><span class=\"o\">:</span> <span class=\"n\">IO.RealWorld</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"n\">network_op</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">run</span> <span class=\"n\">w1</span> <span class=\"bp\">=</span> <span class=\"n\">EStateM.Result.ok</span> <span class=\"n\">n</span> <span class=\"n\">w2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">to_zero</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">IO</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">n2</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">network_op</span> <span class=\"n\">n</span>\n  <span class=\"k\">have</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">network_always_works</span><span class=\"o\">]</span>\n  <span class=\"n\">to_zero</span> <span class=\"n\">n2</span>\n</code></pre></div>",
        "id": 424123757,
        "sender_full_name": "Simon Daniel",
        "timestamp": 1709247250
    },
    {
        "content": "<p>Is the idea that you want a visual indicator of dependence on this assumption?</p>",
        "id": 424136815,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1709253988
    },
    {
        "content": "<p>Yeah thats what i thought would make Sense. Since it ist a reasonable assumption of the Realworld i want to differentiate it from \"sorry\"</p>",
        "id": 424138388,
        "sender_full_name": "Simon Daniel",
        "timestamp": 1709254997
    },
    {
        "content": "<p>re: your 2nd question, I'm not sure about the theorem, as the proof isn't currently working... you want to prove <code>n = n2</code>, but at that point you don't have any information about either value in the context</p>",
        "id": 424138542,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1709255101
    },
    {
        "content": "<p>Maybe <code>axiom</code> command would be your help.</p>",
        "id": 424148705,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1709259565
    },
    {
        "content": "<p>If you use <code>axiom</code>, you can always <code>#print axioms</code> to see which theorems rely on it</p>",
        "id": 424149364,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1709260002
    },
    {
        "content": "<p>ive read through the Axioms chapter in the Theorem prover book and it seems like i could use the Classical.choice axiom</p>",
        "id": 424196635,
        "sender_full_name": "Simon Daniel",
        "timestamp": 1709287458
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"684702\">Simon Daniel</span> has marked this topic as resolved.</p>",
        "id": 424196652,
        "sender_full_name": "Notification Bot",
        "timestamp": 1709287466
    }
]