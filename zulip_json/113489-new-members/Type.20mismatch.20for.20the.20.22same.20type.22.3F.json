[
    {
        "content": "<p>I want to prove that the set of x satisfying: </p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><mn>2</mn><msub><mi>x</mi><mn>2</mn></msub><mo>+</mo><mn>3</mn><msub><mi>x</mi><mn>3</mn></msub><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">x_1+2x_2+3x_3=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7944em;vertical-align:-0.15em;\"></span><span class=\"mord\">2</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7944em;vertical-align:-0.15em;\"></span><span class=\"mord\">3</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span></span></p>\n<p>is a submodule of F^3, but get error like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">cvm</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>Here is the Lean code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"c1\">-- set_option pp.all true</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">F</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)]</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)}</span>\n        <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n        <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">),</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n      <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"n\">m</span>\n      <span class=\"n\">zero_mem'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>   <span class=\"c1\">-- zero_mem' and add_mem' are ok.</span>\n      <span class=\"n\">add_mem'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n      <span class=\"n\">smul_mem'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">rintro</span> <span class=\"n\">c</span> <span class=\"n\">v</span> <span class=\"n\">vm</span>\n        <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n        <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n          <span class=\"gr\">sorry</span>\n\n        <span class=\"c1\">-- ⊢ c • v ∈ m</span>\n\n        <span class=\"c1\">-- apply (h (c • v)).mp     -- failed to unify c • v ∈ m with c • v ∈ m</span>\n        <span class=\"c1\">-- exact (h (c • v)).mp h'  -- type mismatch for c • v ∈ m and c • v ∈ m</span>\n        <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"n\">v</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mp</span>\n        <span class=\"n\">constructor</span>\n        <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">cvm</span> <span class=\"n\">h'</span>\n          <span class=\"n\">exact</span> <span class=\"n\">cvm</span>                 <span class=\"c1\">-- still type mismatch</span>\n        <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">h''</span>\n          <span class=\"n\">exact</span> <span class=\"n\">h''</span> <span class=\"n\">h'</span>              <span class=\"c1\">-- still type mismatch</span>\n  <span class=\"o\">}</span>\n  <span class=\"n\">use</span> <span class=\"n\">s</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>After referring to <a href=\"#narrow/stream/113489-new-members/topic/failed.20to.20unify.20identical.20things.3F\">failed to unify identical things?</a>, I tried <code>set_option pp.all true</code>. And the error message become something terrible (I'm sorry for posting such long thing):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">cvm</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">Membership.mem.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">,</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"n\">instOfNatNat</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">Set.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"n\">instOfNatNat</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Set.instMembershipSet.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"n\">instOfNatNat</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">HSMul.hSMul.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">,</span> <span class=\"n\">u_1</span><span class=\"o\">,</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"n\">instOfNatNat</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"n\">instOfNatNat</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHSMul.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">,</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"n\">instOfNatNat</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n        <span class=\"c1\">-- Starting from here, there's a difference.</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">SMulZeroClass.toSMul.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">,</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"n\">instOfNatNat</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">AddMonoid.toZero.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"n\">instOfNatNat</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">AddCommMonoid.toAddMonoid.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"n\">instOfNatNat</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">addCommMonoid.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"n\">instOfNatNat</span> <span class=\"mi\">3</span><span class=\"o\">)))</span>\n                <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"n\">instOfNatNat</span> <span class=\"mi\">3</span><span class=\"o\">)))</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n                <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"n\">instOfNatNat</span> <span class=\"mi\">3</span><span class=\"o\">)))</span> <span class=\"bp\">=&gt;</span>\n                <span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocSemiring.toAddCommMonoid.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocCommSemiring.toNonUnitalNonAssocSemiring.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span>\n                    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocCommRing.toNonUnitalNonAssocCommSemiring.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalCommRing.toNonUnitalNonAssocCommRing.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span>\n                        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toNonUnitalCommRing.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span>\n                          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">EuclideanDomain.toCommRing.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Field.toEuclideanDomain.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span><span class=\"o\">)))))))))</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">SMulWithZero.toSMulZeroClass.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">,</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"n\">instOfNatNat</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">MonoidWithZero.toZero.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semiring.toMonoidWithZero.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">DivisionSemiring.toSemiring.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semifield.toDivisionSemiring.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Field.toSemifield.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span><span class=\"o\">)))))</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">AddMonoid.toZero.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"n\">instOfNatNat</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">AddCommMonoid.toAddMonoid.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"n\">instOfNatNat</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">addCommMonoid.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"n\">instOfNatNat</span> <span class=\"mi\">3</span><span class=\"o\">)))</span>\n                  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"n\">instOfNatNat</span> <span class=\"mi\">3</span><span class=\"o\">)))</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n                  <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"n\">instOfNatNat</span> <span class=\"mi\">3</span><span class=\"o\">)))</span> <span class=\"bp\">=&gt;</span>\n                  <span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocSemiring.toAddCommMonoid.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span>\n                    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocCommSemiring.toNonUnitalNonAssocSemiring.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocCommRing.toNonUnitalNonAssocCommSemiring.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span>\n                        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalCommRing.toNonUnitalNonAssocCommRing.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span>\n                          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toNonUnitalCommRing.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span>\n                            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">EuclideanDomain.toCommRing.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Field.toEuclideanDomain.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span><span class=\"o\">)))))))))</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">MulActionWithZero.toSMulWithZero.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">,</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"n\">instOfNatNat</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semiring.toMonoidWithZero.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">DivisionSemiring.toSemiring.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semifield.toDivisionSemiring.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Field.toSemifield.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span><span class=\"o\">))))</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">AddMonoid.toZero.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"n\">instOfNatNat</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">AddCommMonoid.toAddMonoid.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"n\">instOfNatNat</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">addCommMonoid.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"n\">instOfNatNat</span> <span class=\"mi\">3</span><span class=\"o\">)))</span>\n                    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"n\">instOfNatNat</span> <span class=\"mi\">3</span><span class=\"o\">)))</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n                    <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"n\">instOfNatNat</span> <span class=\"mi\">3</span><span class=\"o\">)))</span> <span class=\"bp\">=&gt;</span>\n                    <span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocSemiring.toAddCommMonoid.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocCommSemiring.toNonUnitalNonAssocSemiring.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span>\n                        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocCommRing.toNonUnitalNonAssocCommSemiring.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span>\n                          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalCommRing.toNonUnitalNonAssocCommRing.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span>\n                            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toNonUnitalCommRing.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span>\n                              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">EuclideanDomain.toCommRing.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Field.toEuclideanDomain.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span><span class=\"o\">)))))))))</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Module.toMulActionWithZero.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">,</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"n\">instOfNatNat</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">DivisionSemiring.toSemiring.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semifield.toDivisionSemiring.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Field.toSemifield.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span><span class=\"o\">)))</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">addCommMonoid.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"n\">instOfNatNat</span> <span class=\"mi\">3</span><span class=\"o\">)))</span>\n                  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"n\">instOfNatNat</span> <span class=\"mi\">3</span><span class=\"o\">)))</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n                  <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"n\">instOfNatNat</span> <span class=\"mi\">3</span><span class=\"o\">)))</span> <span class=\"bp\">=&gt;</span>\n                  <span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocSemiring.toAddCommMonoid.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span>\n                    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocCommSemiring.toNonUnitalNonAssocSemiring.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocCommRing.toNonUnitalNonAssocCommSemiring.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span>\n                        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalCommRing.toNonUnitalNonAssocCommRing.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span>\n                          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toNonUnitalCommRing.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span>\n                            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">EuclideanDomain.toCommRing.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Field.toEuclideanDomain.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span><span class=\"o\">)))))))</span>\n                <span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">)))))</span>\n      <span class=\"n\">c</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n    <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">Membership.mem.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">,</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"n\">instOfNatNat</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">Set.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"n\">instOfNatNat</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Set.instMembershipSet.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"n\">instOfNatNat</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">HSMul.hSMul.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">,</span> <span class=\"n\">u_1</span><span class=\"o\">,</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"n\">instOfNatNat</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"n\">instOfNatNat</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHSMul.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">,</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"n\">instOfNatNat</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n        <span class=\"c1\">-- Starting from here, there's a difference.</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">instSMul.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"n\">instOfNatNat</span> <span class=\"mi\">3</span><span class=\"o\">)))</span> <span class=\"n\">F</span>\n          <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"n\">instOfNatNat</span> <span class=\"mi\">3</span><span class=\"o\">)))</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n          <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"n\">instOfNatNat</span> <span class=\"mi\">3</span><span class=\"o\">)))</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"bp\">@</span><span class=\"n\">Algebra.toSMul.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">,</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semifield.toCommSemiring.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Field.toSemifield.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span><span class=\"o\">))</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">DivisionSemiring.toSemiring.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semifield.toDivisionSemiring.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Field.toSemifield.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span><span class=\"o\">)))</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Algebra.id.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semifield.toCommSemiring.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Field.toSemifield.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span><span class=\"o\">)))))</span>\n      <span class=\"n\">c</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n    <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>I can only tell from the information above that these two types are indeed different, but I cannot obtain any more information.</p>",
        "id": 426457155,
        "sender_full_name": "sdzz gndrc",
        "timestamp": 1710382421
    },
    {
        "content": "<p><code>convert rfl</code> in place of <code>rfl</code> might give more info</p>",
        "id": 426457479,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1710382655
    },
    {
        "content": "<p>The <code>[Module F (Fin 3 → F)]</code> is bound to create issues.</p>",
        "id": 426457612,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1710382730
    },
    {
        "content": "<p>This puts in the game a totally unspecified <code>F</code>-module structure on <code>Fin 3 → F</code> having nothing to do with the one you intend and Lean already knows about, hence creating conflicts that confuse Lean.</p>",
        "id": 426457777,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1710382816
    }
]