[
    {
        "content": "<p>Hi everyone, quick questions on inductive types. My goal is to create something like an enum.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Init</span><span class=\"bp\">.</span><span class=\"n\">Prelude</span>\n\n<span class=\"kn\">inductive</span><span class=\"w\"> </span><span class=\"n\">Color</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Red</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Black</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">l</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"n\">Color</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Color</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">get!</span><span class=\"w\"> </span><span class=\"n\">i</span>\n</code></pre></div>\n<p>I have this code, but it fails with </p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">synthesize</span><span class=\"w\"> </span><span class=\"kn\">instance</span>\n<span class=\"n\">Inhabited</span><span class=\"w\"> </span><span class=\"n\">Color</span>\n</code></pre></div>",
        "id": 441917582,
        "sender_full_name": "Marcelo Fornet",
        "timestamp": 1717254408
    },
    {
        "content": "<p>In the previous code, replacing <code>Color</code> by <code>Bool</code> (for example) works.</p>",
        "id": 441917740,
        "sender_full_name": "Marcelo Fornet",
        "timestamp": 1717254485
    },
    {
        "content": "<p>To explain why this error happens: <code>l.get! i</code> can call the function <code>panic!</code> if your index is out of bounds for the list. However from a type system point of view it still needs to return <em>some</em> value because the function says that it returns a value. There are two ways around this: you can call <code>List.get</code> which requires you to present a proof that your index is in bounds or <code>List.get?</code> which returns an <code>Option</code>. However if you want to have the panicking behavior there is one thing that you need to make sure: The type that you return must have at least one value. The reason for this is that I would otherwise be able to use <code>panic!</code> to get a value of some type that does not have any values and this is clearly a logical inconsistency.</p>\n<p>Now how to address this issue, the system expects you to provide an instance of the type class <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Inhabited#doc\">docs#Inhabited</a>. You could write this by hand but we have a mechanism that can automatically show that a type is inhabited:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">inductive</span><span class=\"w\"> </span><span class=\"n\">Color</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Red</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">Black</span>\n<span class=\"n\">deriving</span><span class=\"w\"> </span><span class=\"n\">Inhabited</span>\n</code></pre></div>",
        "id": 441918360,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1717254818
    },
    {
        "content": "<p>I see, thanks for the prompt and detailed response!</p>",
        "id": 441918614,
        "sender_full_name": "Marcelo Fornet",
        "timestamp": 1717254962
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"456449\">Marcelo Fornet</span> has marked this topic as resolved.</p>",
        "id": 441918645,
        "sender_full_name": "Notification Bot",
        "timestamp": 1717254967
    }
]