[
    {
        "content": "<p>I'm trying to prove the following. I know how to close the first sorry (but haven't done it yet as I first want to be sure that this will work), but I can't close the goal, even though <code>h_sct</code> is exactly this. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">SecondCountableSpace_from_metric_Lindelof</span> <span class=\"o\">[</span><span class=\"n\">MetricSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LindelofSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">SecondCountableTopology</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h_dense</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">s.Countable</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"gr\">sorry</span> <span class=\"c1\">-- cover by ε Metric.closedBall at each x, then extract countable subcover from Lindelöf property</span>\n  <span class=\"k\">have</span> <span class=\"n\">h_sct</span> <span class=\"o\">:=</span> <span class=\"n\">Metric.secondCountable_of_almost_dense_set</span> <span class=\"n\">h_dense</span>\n  <span class=\"gr\">sorry</span> <span class=\"c1\">-- h_sct gives SecondCountableTopology X, but cannot close the goal through:</span>\n  <span class=\"c1\">-- exact h_sct</span>\n  <span class=\"c1\">-- apply h_sct</span>\n  <span class=\"c1\">-- simp</span>\n  <span class=\"c1\">-- aesop</span>\n</code></pre></div>\n<p>If interested, the tactic state just before the second sorry is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">:</span> <span class=\"n\">MetricSpace</span> <span class=\"n\">X</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">LindelofSpace</span> <span class=\"n\">X</span>\n<span class=\"n\">h_dense</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">Set.Countable</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span>\n<span class=\"n\">h_sct</span><span class=\"o\">:</span> <span class=\"n\">SecondCountableTopology</span> <span class=\"n\">X</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">SecondCountableTopology</span> <span class=\"n\">X</span>\n</code></pre></div>\n<p>What am I doing wrong here?</p>",
        "id": 420602720,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707466042
    },
    {
        "content": "<p>What is the error?</p>",
        "id": 420603541,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1707466496
    },
    {
        "content": "<p>Can you <code>apply</code> that <code>Metric.secondCountable...</code> lemma, without passing in <code>h_dense</code>?</p>",
        "id": 420603716,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1707466581
    },
    {
        "content": "<p>This is weird: in my MWE above, <code>apply Metric.secondCountable_of_almost_dense_set h_dense</code> does close the goal. However, in <code>Topology/Compactness/Lindelof</code>, I get </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">apply'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"n\">SecondCountableTopology</span> <span class=\"n\">X</span>\n<span class=\"k\">with</span>\n  <span class=\"n\">SecondCountableTopology</span> <span class=\"n\">X</span>\n<span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"n\">Y</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span>\n<span class=\"n\">ι</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝³</span><span class=\"o\">:</span> <span class=\"n\">TopologicalSpace</span> <span class=\"n\">X</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝²</span><span class=\"o\">:</span> <span class=\"n\">TopologicalSpace</span> <span class=\"n\">Y</span>\n<span class=\"n\">st</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">:</span> <span class=\"n\">MetricSpace</span> <span class=\"n\">X</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">LindelofSpace</span> <span class=\"n\">X</span>\n<span class=\"n\">h_dense</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">Set.Countable</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">SecondCountableTopology</span> <span class=\"n\">X</span>\n</code></pre></div>",
        "id": 420604066,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707466757
    },
    {
        "content": "<p>Where I have: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">SecondCountableSpace_of_metric_Lindelof</span> <span class=\"o\">[</span><span class=\"n\">MetricSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LindelofSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">SecondCountableTopology</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h_dense</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">s.Countable</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"gr\">sorry</span> <span class=\"c1\">-- cover by ε Metric.closedBall at each x, then extract countable subcover</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Metric.secondCountable_of_almost_dense_set</span> <span class=\"n\">h_dense</span>\n</code></pre></div>",
        "id": 420604130,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707466793
    },
    {
        "content": "<p>Maybe turn on pp.all, or try convert?</p>",
        "id": 420604320,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1707466899
    },
    {
        "content": "<p>There's probably some implicit argument</p>",
        "id": 420604368,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1707466924
    },
    {
        "content": "<p><code>convert</code> reveals the problem: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">SecondCountableSpace_from_metric_Lindelof</span> <span class=\"o\">[</span><span class=\"n\">MetricSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LindelofSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">SecondCountableTopology</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h_dense</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">s.Countable</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"gr\">sorry</span> <span class=\"c1\">-- cover by ε Metric.closedBall at each x, then extract countable subcover</span>\n  <span class=\"n\">convert</span> <span class=\"n\">Metric.secondCountable_of_almost_dense_set</span> <span class=\"n\">h_dense</span>\n</code></pre></div>\n<p>gives state</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"n\">Y</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span>\n<span class=\"n\">ι</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝³</span><span class=\"o\">:</span> <span class=\"n\">TopologicalSpace</span> <span class=\"n\">X</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝²</span><span class=\"o\">:</span> <span class=\"n\">TopologicalSpace</span> <span class=\"n\">Y</span>\n<span class=\"n\">st</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">:</span> <span class=\"n\">MetricSpace</span> <span class=\"n\">X</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">LindelofSpace</span> <span class=\"n\">X</span>\n<span class=\"n\">h_dense</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">Set.Countable</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"bp\">=</span> <span class=\"n\">UniformSpace.toTopologicalSpace</span>\n</code></pre></div>",
        "id": 420604535,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707467004
    },
    {
        "content": "<p>but I'm not sure how to proceed from there... pp.all gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">apply'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"bp\">@</span><span class=\"n\">SecondCountableTopology.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">X</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">UniformSpace.toTopologicalSpace.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">X</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">PseudoMetricSpace.toUniformSpace.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">MetricSpace.toPseudoMetricSpace.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">X</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">)))</span>\n<span class=\"k\">with</span>\n  <span class=\"bp\">@</span><span class=\"n\">SecondCountableTopology.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">X</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span>\n</code></pre></div>\n<p>after </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">apply</span> <span class=\"n\">Metric.secondCountable_of_almost_dense_set</span> <span class=\"n\">h_dense</span>\n</code></pre></div>",
        "id": 420604797,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707467128
    },
    {
        "content": "<p>Is Lean considering two different topologies on X here, first the one from [TopologicalSpace X] (present in the file) and then the canonical one from [MetricSpace X]?</p>",
        "id": 420605615,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707467521
    },
    {
        "content": "<p>Yes</p>",
        "id": 420605806,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1707467621
    },
    {
        "content": "<p>So you need to state the lemma in such a way that TopologicalSpace X isn't picked up from the ambient context</p>",
        "id": 420605977,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1707467696
    },
    {
        "content": "<p>Great, thank you! So I can probably just give it a different name like Z instead of X?</p>",
        "id": 420606046,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707467729
    },
    {
        "content": "<p>Yeah</p>",
        "id": 420606186,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707467782
    },
    {
        "content": "<p>Thank you, that works!</p>",
        "id": 420608433,
        "sender_full_name": "Josha Dekker",
        "timestamp": 1707468763
    }
]