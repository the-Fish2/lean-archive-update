[
    {
        "content": "<p>i'm writing a proof with case distinction, and i'd like to use the fact that i'm in a certain case within that case. i have a structure consisting of two fields of <code>ZMod 2</code>, and i'm trying to prove that in a certain case, i have a contradiction because there is an assumption that the fields aren't 0, but they are in that case.<br>\ni've got this code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">ext</span><span class=\"kd\">]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">F4'</span> <span class=\"n\">where</span>\n  <span class=\"n\">x0</span><span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">2</span>\n  <span class=\"n\">x1</span><span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Zero</span> <span class=\"n\">F4'</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>what i'm basically trying to prove is that for each <code>a:F4'</code>, if <code>a ≠ 0</code>, then <code>a.x0 * a.x1 + a.x0 + a.x1 = 1</code>. <br>\ni'd like to do the case distinction on <code>x0</code> and <code>x1</code>, and then in the 0 case use extentionality to say that <code>a = 0</code>, to end that part of the proof with contradiction, but when i try to use that there, the goal is <code>a.x0 = 0 ∧ a.x1 = 0</code> instead of <code>0 = 0 ∧ 0 = 0</code>.... how do i do this?</p>",
        "id": 419022849,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1706701833
    },
    {
        "content": "<p>my original idea was to do a proof along these lines:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">F4'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a.x0</span> <span class=\"bp\">*</span> <span class=\"n\">a.x1</span> <span class=\"bp\">+</span> <span class=\"n\">a.x0</span> <span class=\"bp\">+</span> <span class=\"n\">a.x1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hneq</span>\n  <span class=\"k\">match</span> <span class=\"n\">a.x0</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ring_nf</span>\n           <span class=\"n\">apply</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">a.x1</span> <span class=\"k\">with</span>\n             <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ring_nf</span>\n             <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">have</span> <span class=\"n\">heq</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n                    <span class=\"bp\">.</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_def</span><span class=\"o\">]</span>\n                      <span class=\"n\">ext</span>\n                      <span class=\"bp\">.</span> <span class=\"n\">simp</span> <span class=\"n\">only</span>\n                        <span class=\"gr\">sorry</span> <span class=\"c1\">-- goal: a.x0 = 0</span>\n                      <span class=\"bp\">.</span> <span class=\"n\">simp</span> <span class=\"n\">only</span>\n                        <span class=\"gr\">sorry</span> <span class=\"c1\">-- goal: a.x1 = 0</span>\n                    <span class=\"n\">contradiction</span>\n</code></pre></div>\n<p>with of course</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">zero_def</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">F4'</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>i just don't know how i get these final sorrys out, but i know these are true due to the case i'm in at that point...</p>\n<p>is my entire approach wrong here?</p>",
        "id": 419057359,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1706712796
    },
    {
        "content": "<p>I am sorry I don't have an answer to your question, just a comment:</p>\n<p>Please don't use <code>heq</code> as a name. When I see these three letters, I scream in horror.</p>",
        "id": 419058001,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1706712977
    },
    {
        "content": "<p>my apologies, it seemed appropriate at the time... can you give a suggestion as to a more apt name?</p>",
        "id": 419058188,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1706713035
    },
    {
        "content": "<p>or can i just not give it a name at all? would that be more useful?</p>",
        "id": 419058350,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1706713084
    },
    {
        "content": "<p>Also, you seem to hide some imports from us. Please have a look at:<br>\n<a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 419058398,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1706713097
    },
    {
        "content": "<p>[not relevant]</p>",
        "id": 419059170,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1706713292
    },
    {
        "content": "<p>here is a compilable version of the code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.Finite.GaloisField</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">ZMod</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">ext</span><span class=\"kd\">]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">F4'</span> <span class=\"n\">where</span>\n  <span class=\"n\">x0</span><span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">2</span>\n  <span class=\"n\">x1</span><span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Zero</span> <span class=\"n\">F4'</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">zero_def</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">F4'</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">F4'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a.x0</span> <span class=\"bp\">*</span> <span class=\"n\">a.x1</span> <span class=\"bp\">+</span> <span class=\"n\">a.x0</span> <span class=\"bp\">+</span> <span class=\"n\">a.x1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hneq</span>\n  <span class=\"k\">match</span> <span class=\"n\">a.x0</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ring_nf</span>\n           <span class=\"n\">apply</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">a.x1</span> <span class=\"k\">with</span>\n             <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ring_nf</span>\n             <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n                    <span class=\"bp\">.</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_def</span><span class=\"o\">]</span>\n                      <span class=\"n\">ext</span>\n                      <span class=\"bp\">.</span> <span class=\"n\">simp</span> <span class=\"n\">only</span>\n                        <span class=\"gr\">sorry</span>\n                      <span class=\"bp\">.</span> <span class=\"n\">simp</span> <span class=\"n\">only</span>\n                        <span class=\"gr\">sorry</span>\n                    <span class=\"n\">contradiction</span>\n</code></pre></div>",
        "id": 419059472,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1706713369
    },
    {
        "content": "<p>I'll probably leave only this here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">F4'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a.x0</span> <span class=\"bp\">*</span> <span class=\"n\">a.x1</span> <span class=\"bp\">+</span> <span class=\"n\">a.x0</span> <span class=\"bp\">+</span> <span class=\"n\">a.x1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hneq</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">a₀</span><span class=\"o\">,</span> <span class=\"n\">a₁</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n  <span class=\"k\">match</span> <span class=\"n\">a₀</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ring_nf</span>\n         <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">a₁</span> <span class=\"k\">with</span>\n         <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ring_nf</span>\n         <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">zero_def</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hneq</span>\n</code></pre></div>",
        "id": 419060507,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1706713642
    },
    {
        "content": "<p>thanks!</p>",
        "id": 419061733,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1706714013
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"684366\">Edward van de Meent</span> has marked this topic as resolved.</p>",
        "id": 419065484,
        "sender_full_name": "Notification Bot",
        "timestamp": 1706715086
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"684366\">Edward van de Meent</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20using.20extensionality.20after.20case.20distinction.20on.20attributes/near/419058188\">said</a>:</p>\n<blockquote>\n<p>my apologies, it seemed appropriate at the time... can you give a suggestion as to a more apt name?</p>\n</blockquote>\n<p><code>heq</code>, <code>hne</code>, <code>hle</code>, <code>hlt</code> are all fine names, used everywhere in Mathlib.</p>",
        "id": 419083301,
        "sender_full_name": "Richard Copley",
        "timestamp": 1706720062
    },
    {
        "content": "<p>That's not really true. They are barely used and we avoid <code>heq</code> explicitly due to possible ambiguity with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=HEq#doc\">docs#HEq</a></p>",
        "id": 419097388,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1706724606
    },
    {
        "content": "<p>That's not really true. They're used plenty of times.</p>",
        "id": 419098357,
        "sender_full_name": "Richard Copley",
        "timestamp": 1706724943
    },
    {
        "content": "<p>Is the discussion about heterogeneous equality or about a user name for an assumption dealing with inequalities?</p>",
        "id": 419099197,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706725250
    },
    {
        "content": "<p>If Richard and Yaël are talking about different things, then I agree with both!</p>",
        "id": 419099459,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706725338
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"684366\">@Edward van de Meent</span> prove a helper lemma saying that every term of type <code>ZMod 2</code> is either equal to 0 or 1; hopefully you can prove it with <code>decide</code>. And then use that helper lemma a lot.</p>",
        "id": 419123938,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706735487
    },
    {
        "content": "<p>In fact I should think that you should be able to prove the whole thing with <code>decide</code>...</p>",
        "id": 419124115,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1706735576
    },
    {
        "content": "<p>Not exactly <code>decide</code>, but still brute-force:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Spoiler</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">F4'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a.x0</span> <span class=\"bp\">*</span> <span class=\"n\">a.x1</span> <span class=\"bp\">+</span> <span class=\"n\">a.x0</span> <span class=\"bp\">+</span> <span class=\"n\">a.x1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">x0</span><span class=\"o\">,</span> <span class=\"n\">x1</span><span class=\"o\">⟩</span>\n  <span class=\"n\">fin_cases</span> <span class=\"n\">x0</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">fin_cases</span> <span class=\"n\">x1</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>\n</div></div>",
        "id": 419125966,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706736429
    },
    {
        "content": "<p>what does that fancy <code>&lt;;&gt;</code> symbol mean?</p>",
        "id": 419127102,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1706736851
    },
    {
        "content": "<p>It means that the tactic that follows should be applied to all the goals left over by the previous tactic.</p>\n<p>In this case, they are used to cover all possible cases of what <code>x0</code> and <code>x1</code> are and then applying <code>simp</code> to all resulting goals.</p>",
        "id": 419128632,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706737538
    },
    {
        "content": "<p>Also, you should mark <code>zero_def</code> as <code>@[simp]</code> so that the final <code>rfl</code> can be removed!</p>",
        "id": 419128723,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706737571
    }
]