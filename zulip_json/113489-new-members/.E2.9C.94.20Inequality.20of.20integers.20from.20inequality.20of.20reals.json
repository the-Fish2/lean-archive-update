[
    {
        "content": "<p>hello! Is it possible to prove the following without <code>by_contra</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n <span class=\"n\">by_contra</span> <span class=\"n\">hx</span>\n <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">hx</span>\n <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">Int.cast_one_le_of_pos</span> <span class=\"n\">hx</span>\n <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">calc</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">this</span>\n  <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">hn</span>\n <span class=\"n\">exact</span> <span class=\"n\">LT.lt.false</span> <span class=\"n\">this</span>\n</code></pre></div>\n<p>In general, I would like to know whether there are nice theorems that transforms some properties of a real number that turns out to be an integer/natural number. Thank you in advance.</p>",
        "id": 423067732,
        "sender_full_name": "Yoh Tanimoto",
        "timestamp": 1708711174
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">Int.cast_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hn</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Int.cast_lt.mp</span> <span class=\"n\">hn</span>\n</code></pre></div>",
        "id": 423068613,
        "sender_full_name": "David Renshaw",
        "timestamp": 1708711544
    },
    {
        "content": "<p>ah ok, so by reverse rw I can get Int. Thank you!</p>",
        "id": 423071086,
        "sender_full_name": "Yoh Tanimoto",
        "timestamp": 1708712548
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"382902\">Yoh Tanimoto</span> has marked this topic as resolved.</p>",
        "id": 423071101,
        "sender_full_name": "Notification Bot",
        "timestamp": 1708712555
    },
    {
        "content": "<p>Ideally this would be a lemma, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Int.cast_lt_one#doc\">docs#Int.cast_lt_one</a>, to match <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.cast_lt_one#doc\">docs#Nat.cast_lt_one</a></p>",
        "id": 423071881,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708712865
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n <span class=\"n\">exact_mod_cast</span> <span class=\"n\">hn</span>\n</code></pre></div>\n<p>also work</p>",
        "id": 423072186,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1708712981
    },
    {
        "content": "<p>also</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n  <span class=\"n\">mod_cast</span> <span class=\"n\">hn</span>\n</code></pre></div>",
        "id": 423072800,
        "sender_full_name": "David Renshaw",
        "timestamp": 1708713227
    },
    {
        "content": "<p>... which I don't fully understand, because <code>mod_cast</code> seems to be a macro (?) not a lemma</p>",
        "id": 423072918,
        "sender_full_name": "David Renshaw",
        "timestamp": 1708713267
    },
    {
        "content": "<p>(jump-to-definition takes me to <code>cast</code> in the prelude -- seems like there are some elaboration steps being elided there)</p>",
        "id": 423073040,
        "sender_full_name": "David Renshaw",
        "timestamp": 1708713334
    },
    {
        "content": "<p>ah, here it is: <a href=\"https://github.com/leanprover/lean4/blob/60f30a46cf53a6021fca39e6a7f2df7f7e3fdf64/src/Lean/Elab/Tactic/NormCast.lean#L207-L222\">https://github.com/leanprover/lean4/blob/60f30a46cf53a6021fca39e6a7f2df7f7e3fdf64/src/Lean/Elab/Tactic/NormCast.lean#L207-L222</a><br>\n(recently upstreamed)</p>",
        "id": 423074179,
        "sender_full_name": "David Renshaw",
        "timestamp": 1708713829
    }
]