[
    {
        "content": "<p>Hello, This is an exercise from math2001, Exercise 6.5.4 (2).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Library.Basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pascal</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pascal</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">pascal</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">pascal</span> <span class=\"n\">a</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simple_induction</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">IH</span>\n  <span class=\"bp\">·</span> <span class=\"k\">calc</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pascal</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n  <span class=\"bp\">·</span> <span class=\"k\">calc</span>\n      <span class=\"n\">pascal</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">pascal</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">pascal</span> <span class=\"n\">k</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pascal</span><span class=\"o\">]</span> <span class=\"c1\">-- unsolved goals</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">pascal</span> <span class=\"n\">k</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pascal</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">IH</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n</code></pre></div>\n<p>The proof seems completely normal to me, but lean does not accept the line with comment, which is exactly the definition.</p>\n<p>Why is this happening? Thanks in advance.</p>",
        "id": 436594580,
        "sender_full_name": "calofmijuck",
        "timestamp": 1714609396
    },
    {
        "content": "<p>Can you post this as a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, with imports that work in the online code editor? It's hard to debug code that uses a specific courses libraries.</p>",
        "id": 436595042,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714609692
    },
    {
        "content": "<p>Presumably this is Heather's course?</p>",
        "id": 436595057,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714609707
    },
    {
        "content": "<p>Yes, it is. I'll fix that.</p>",
        "id": 436595072,
        "sender_full_name": "calofmijuck",
        "timestamp": 1714609723
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pascal</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pascal</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">pascal</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">pascal</span> <span class=\"n\">a</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">calc</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pascal</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">k</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">calc</span>\n      <span class=\"n\">pascal</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">pascal</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">pascal</span> <span class=\"n\">k</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">pascal</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">pascal</span> <span class=\"n\">k</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pascal</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n</code></pre></div>",
        "id": 436595222,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714609824
    },
    {
        "content": "<p>I couldn't reproduce your proof state, but the error message is what you need to look at: what were the unsolved goals after <code>rw [pascal]</code>?</p>",
        "id": 436595252,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714609856
    },
    {
        "content": "<p>Thanks for fixing the code. I was going to fix it but you were faster. <br>\n<a href=\"/user_uploads/3121/s1zdzJbJsNTwJLHKT41vV8n7/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/s1zdzJbJsNTwJLHKT41vV8n7/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/s1zdzJbJsNTwJLHKT41vV8n7/image.png\"></a></div>",
        "id": 436595371,
        "sender_full_name": "calofmijuck",
        "timestamp": 1714609957
    },
    {
        "content": "<p>Maybe this is a bug with the <code>simple_induction</code> tactic?</p>",
        "id": 436595416,
        "sender_full_name": "calofmijuck",
        "timestamp": 1714609985
    },
    {
        "content": "<p>This is strange, your code works fine...</p>",
        "id": 436595509,
        "sender_full_name": "calofmijuck",
        "timestamp": 1714610073
    },
    {
        "content": "<p>Also, this course seems to have the <code>simp</code> tactic disabled. I changed <code>simp</code> to <code>rw</code> and it doesn't work with the same error message.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">pascal</span> <span class=\"n\">a</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">calc</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pascal</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">k</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">calc</span>\n      <span class=\"n\">pascal</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">pascal</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">pascal</span> <span class=\"n\">k</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pascal</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">pascal</span> <span class=\"n\">k</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pascal</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n</code></pre></div>\n<p>So then my question would be why the <code>rw</code> doesn't work.</p>",
        "id": 436595663,
        "sender_full_name": "calofmijuck",
        "timestamp": 1714610170
    },
    {
        "content": "<p>You need to show us what the goals are after <code>rw [pascal]</code></p>",
        "id": 436595744,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714610231
    },
    {
        "content": "<p>The error message is not saying that the <code>rw</code> doesn't work. It's saying that there's still something more to do <em>afterwards</em>.</p>",
        "id": 436595767,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714610253
    },
    {
        "content": "<p>It outputs the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"n\">pascal</span> <span class=\"n\">k</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">pascal</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">pascal</span> <span class=\"n\">k</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 436595830,
        "sender_full_name": "calofmijuck",
        "timestamp": 1714610284
    },
    {
        "content": "<p>e.g. maybe you need to rwreite by the definition again?</p>",
        "id": 436595840,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714610288
    },
    {
        "content": "<p>Maybe you need to think about why this is true on paper. :-)</p>",
        "id": 436595878,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714610319
    },
    {
        "content": "<p>Um.. is there an invalid step in my original proof?</p>",
        "id": 436596044,
        "sender_full_name": "calofmijuck",
        "timestamp": 1714610409
    },
    {
        "content": "<p>Isn't the goal obviously true by definition and the induction hypothesis?<br>\nThat's why I wrote the remaining part of the proof in that way. Am I missing something?</p>",
        "id": 436596294,
        "sender_full_name": "calofmijuck",
        "timestamp": 1714610612
    },
    {
        "content": "<p>The invalid step is that there is an unsolved goal after the <code>rw [pascal]</code>, as the error message says.</p>",
        "id": 436596626,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714610868
    },
    {
        "content": "<p>I don't understand the part where the existence of an unsolved goal implies an invalid step.<br>\nDoesn't it happen normally when the proof is not finished?<br>\nI think I gave the remaining steps of the proof.</p>\n<p>I found a workaround and eventually got it accepted. Why does this work? It essentially follows the same steps, I think.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">pascal</span> <span class=\"n\">a</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">calc</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pascal</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">k</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pascal</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pascal</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">]</span>\n    <span class=\"k\">calc</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n</code></pre></div>",
        "id": 436597498,
        "sender_full_name": "calofmijuck",
        "timestamp": 1714611522
    },
    {
        "content": "<p>Actually I'm new to lean, and I'm in the learning process, this is the first material I'm going through.<br>\nSo maybe the confusion is from me having no idea what the tactics do in detail?</p>",
        "id": 436597667,
        "sender_full_name": "calofmijuck",
        "timestamp": 1714611644
    },
    {
        "content": "<p>I'm going to move this thread to the new members stream. You'll get better help there. :-)</p>",
        "id": 436597825,
        "sender_full_name": "Kim Morrison",
        "timestamp": 1714611775
    },
    {
        "content": "<p>Thank you for your time.</p>",
        "id": 436597915,
        "sender_full_name": "calofmijuck",
        "timestamp": 1714611860
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"714702\">calofmijuck</span> <a href=\"#narrow/stream/113489-new-members/topic/Question.20regarding.20Pascal's.20triangle.20exercise.20in.20math2001/near/436597498\">said</a>:</p>\n<blockquote>\n<p>I don't understand the part where the existence of an unsolved goal implies an invalid step.<br>\nDoesn't it happen normally when the proof is not finished?<br>\nI think I gave the remaining steps of the proof.</p>\n</blockquote>\n<p>Unfinished proofs indeed give errors, if you don't explicitly silence them using <code>sorry</code></p>",
        "id": 436600021,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1714613569
    },
    {
        "content": "<p>Right. So I gave the remaining proof, but it wasn't accepted.</p>",
        "id": 436600422,
        "sender_full_name": "calofmijuck",
        "timestamp": 1714613888
    },
    {
        "content": "<p><strong>Summary</strong></p>\n<p>The following proof doesn't work. It says that there are unsolved goals just after the line with comment.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">pascal</span> <span class=\"n\">a</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">calc</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pascal</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">k</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">calc</span>\n      <span class=\"n\">pascal</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">pascal</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">pascal</span> <span class=\"n\">k</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pascal</span><span class=\"o\">]</span> <span class=\"c1\">-- here</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">pascal</span> <span class=\"n\">k</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pascal</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n</code></pre></div>\n<p>Lean says that the unsolved goal is the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"n\">pascal</span> <span class=\"n\">k</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">pascal</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">pascal</span> <span class=\"n\">k</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>I found a workaround:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">pascal</span> <span class=\"n\">a</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">calc</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pascal</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">k</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pascal</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pascal</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">]</span>\n    <span class=\"k\">calc</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n</code></pre></div>\n<p>This was accepted by lean.</p>\n<p><strong>Question</strong></p>\n<p>Why is the first proof not accepted? The second workaround I found seems to essentially follow the same steps.</p>",
        "id": 436600641,
        "sender_full_name": "calofmijuck",
        "timestamp": 1714614040
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"714702\">@calofmijuck</span> You'll find that this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"bp\">·</span> <span class=\"k\">calc</span>\n      <span class=\"n\">pascal</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">pascal</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">pascal</span> <span class=\"n\">k</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pascal</span><span class=\"o\">,</span> <span class=\"n\">pascal</span><span class=\"o\">,</span> <span class=\"n\">pascal</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">pascal</span> <span class=\"n\">k</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pascal</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">IH</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n</code></pre></div>\n<p>i.e., changing <code>rw [pascal]</code> to <code>rw [pascal, pascal, pascal]</code>.</p>",
        "id": 436605301,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1714617269
    },
    {
        "content": "<p>It's a quirk of <code>rw</code> that it only rewrites one occurrence of an equation lemma for a definition like <code>pascal</code>, and in this case, the first occurrence is not the one that actually needs replacing.</p>",
        "id": 436605401,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1714617353
    },
    {
        "content": "<p>Elsewhere in the book I use <code>rfl</code> rather to avoid this <code>rw [x, x, x, ...]</code> problem -- see for example<br>\n<a href=\"https://hrmacbeth.github.io/math2001/06_Induction.html#two-step-starting-point\">https://hrmacbeth.github.io/math2001/06_Induction.html#two-step-starting-point</a><br>\nI'm a bit surprised this doesn't work here.</p>",
        "id": 436606291,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1714617950
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> On the Lean version current in the web editor, the following <code>rfl</code> works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pascal</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pascal</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">pascal</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">pascal</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">pascal</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">pascal</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>But it fails if <code>termination_by a b =&gt; a + b</code> is added to the recursive definition.  Is this expected?</p>",
        "id": 436606548,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1714618171
    },
    {
        "content": "<p>Wow professor thank you for your explanation! Now I think I see what happened here.<br>\nI intuitively thought that <code>rw</code> would match the first occurence in the goal, so the LHS would be rewritten.</p>",
        "id": 436608807,
        "sender_full_name": "calofmijuck",
        "timestamp": 1714619742
    },
    {
        "content": "<p>Interesting example! I expect the inferred termination argument is <code>termination_by a b =&gt; (a, b)</code> here, so that's one source of differences. I am surprised it changes DefEq behavior though?</p>\n<p>Anyways, we should probably limit well-founded recursive definitions from unfolding, it is a common source of painful slow-downs.</p>",
        "id": 436622832,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1714630228
    },
    {
        "content": "<p>I would assume the change in rfl behavior is simply because the first version is using structural recursion and adding <code>termination_by</code> forces it to be a WF recursion</p>",
        "id": 436622921,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714630301
    },
    {
        "content": "<p>Is it structural though? I see two recursive calls and neither argument gets smaller in both. (Still waking up so only phone in hand and no tea in brain yet)</p>",
        "id": 436623126,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1714630428
    },
    {
        "content": "<p>It should be structural recursive by nested recursion first on the first argument and then the second, i.e. in wf terms this is recursion on <code>a b =&gt; (a, b)</code></p>",
        "id": 436623361,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714630581
    },
    {
        "content": "<p>I stand corrected, the version on the web editor (which is <code>4.7.0</code>) is also using WF recursion, but it is apparently able to compute with that recursion enough to prove the rfl lemma</p>",
        "id": 436623773,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1714630826
    },
    {
        "content": "<p>That's what I expected, I don't think lean does nested structural recursion (it would be bad if it did, because then we couldn't use the Ackerman function as an example for a function that needs wf anymore…)</p>",
        "id": 436627866,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1714632865
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pascal</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pascal</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">pascal</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">pascal</span> <span class=\"n\">a</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">calc</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pascal</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">k</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">calc</span>\n      <span class=\"n\">pascal</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">pascal</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">pascal</span> <span class=\"n\">k</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">lhs</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pascal</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">pascal</span> <span class=\"n\">k</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pascal</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n</code></pre></div>\n<p>Also works (that is, only rewriting on the LHS)</p>",
        "id": 436849531,
        "sender_full_name": "Daniel Weber",
        "timestamp": 1714729306
    },
    {
        "content": "<p>I was thinking about a tactic that would rewrite the LHS. Thanks for the suggestion!</p>",
        "id": 436850013,
        "sender_full_name": "calofmijuck",
        "timestamp": 1714729521
    }
]