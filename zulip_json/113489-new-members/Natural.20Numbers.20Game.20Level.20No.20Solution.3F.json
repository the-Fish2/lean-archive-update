[
    {
        "content": "<p>Hi all, apologies for what is likely a silly question, but I can't seem to figure out what I believe is intended to be a relatively easy level:</p>\n<p>≤ World, Level 2 / 11, 0 ≤ x</p>\n<p>I don't seem to have the tools available to get passed <code>x = 0</code> as the goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"bp\">**</span><span class=\"n\">Theorem</span><span class=\"bp\">**</span><span class=\"w\"> </span><span class=\"ss\">`zero_le</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">If</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"bp\">≤</span><span class=\"n\">x</span><span class=\"bp\">.</span>\n<span class=\"ss\">`theorem</span><span class=\"w\"> </span><span class=\"n\">zero_le</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"bp\">`</span>\n\n<span class=\"n\">use</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">add_zero</span><span class=\"o\">]</span>\n\n<span class=\"n\">Current</span><span class=\"w\"> </span><span class=\"n\">Goal</span>\n<span class=\"n\">Objects</span><span class=\"o\">:</span>\n<span class=\"bp\">**</span><span class=\"n\">x</span><span class=\"bp\">**</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span>\n\n<span class=\"n\">Goal</span><span class=\"o\">:</span>\n<span class=\"n\">x</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n</code></pre></div>\n<p>Am I missing something?</p>",
        "id": 445561462,
        "sender_full_name": "Jared Cosulich",
        "timestamp": 1718794502
    },
    {
        "content": "<p>Think about what claim you're making when you write <code>use 0</code>.</p>",
        "id": 445571378,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1718798122
    },
    {
        "content": "<p>My understanding is the \"use\" statement is to provide a c such that :</p>\n<p>b = a + c</p>\n<p>In this case a = 0, b = x so the statement becomes x = 0 + c</p>\n<p>but there is no additional information about x, so it would seem that any positive number could be an answer. This doesn't seem like much of a proof though.</p>\n<p>Alternatively if I use <code>cases</code> then I can get it down to <code>pred d = 1</code> but again there's no additional context for d to work with.</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"n\">d</span>\n<span class=\"n\">use</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">add_zero</span><span class=\"o\">]</span>\n<span class=\"n\">rfl</span>\n<span class=\"n\">use</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">zero_add</span><span class=\"o\">]</span>\n\n<span class=\"n\">Current</span><span class=\"w\"> </span><span class=\"n\">Goal</span>\n<span class=\"n\">Objects</span><span class=\"o\">:</span>\n<span class=\"n\">d</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span>\n<span class=\"n\">Goal</span><span class=\"o\">:</span>\n<span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n</code></pre></div>\n<p>If I use <code>induction</code> then I can create additional context for d, but I can't figure out how to leverage the assumption <code>hd: 0 ≤ d</code> (e.g. <code>use 1 at hd</code> throws an error)</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"n\">hd</span>\n<span class=\"n\">use</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">add_zero</span><span class=\"o\">]</span>\n<span class=\"n\">rfl</span>\n<span class=\"n\">use</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n<span class=\"n\">rw</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">zero_add</span><span class=\"o\">]</span>\n\n<span class=\"n\">Current</span><span class=\"w\"> </span><span class=\"n\">Goal</span>\n<span class=\"n\">Objects</span><span class=\"o\">:</span>\n<span class=\"n\">d</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ℕ</span>\n<span class=\"n\">Assumptions</span><span class=\"o\">:</span>\n<span class=\"n\">hd</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"bp\">≤</span><span class=\"w\"> </span><span class=\"n\">d</span>\n<span class=\"n\">Goal</span><span class=\"o\">:</span>\n<span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n</code></pre></div>\n<p>I'm sure I am missing something here, but I'm not sure what. For context, I'm not a mathematician (learning this all as an experiment in learning more mathematical concepts in a format I'm comfortable with - I'm a software developer)</p>",
        "id": 445582391,
        "sender_full_name": "Jared Cosulich",
        "timestamp": 1718801539
    },
    {
        "content": "<p>You're trying to find a c such that x = 0 + c. In the case where, for example, x has the value 5, you'd want a c such that </p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">c</span>\n</code></pre></div>\n<p>If I try <code>use 0</code>, I'd be trying to prove the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n</code></pre></div>\n<p>and I can use any positive number. Say <code>use 271</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">271</span>\n</code></pre></div>\n<p>I don't think those are statements I can prove.<br>\nIf I try <code>use 5</code>, I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">5</span>\n</code></pre></div>\n<p>Which is something I think I can actually prove.</p>",
        "id": 445602894,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1718807143
    },
    {
        "content": "<p>Ok, I didn't realize that you could call <code>use</code> with a variable. That is what I was missing.</p>",
        "id": 445605138,
        "sender_full_name": "Jared Cosulich",
        "timestamp": 1718807860
    },
    {
        "content": "<p>Ah. Any expression with the right type! :) So things like <code>use x * x + x + 1</code> don't throw a syntax error.</p>",
        "id": 445605701,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1718808008
    },
    {
        "content": "<p>Yes, makes sense. Feel silly for not recognizing that sooner. Thank you for the help!</p>",
        "id": 445605904,
        "sender_full_name": "Jared Cosulich",
        "timestamp": 1718808084
    },
    {
        "content": "<p>I think it might help to add an example with a variable to the definition of <code>use</code> (I just found it confusing because every example provided that I saw used an explicit natural number). Would an addition to the use \"documentation\" in the game be welcome? I'm happy to open a PR for it in GitHub. Maybe something like:</p>\n<blockquote>\n<p><code>use</code> can accept a variety of arguments, such as <code>37</code>, <code>x</code>, <code>x * x + 1</code> as long as the variable is of the correct type</p>\n</blockquote>",
        "id": 445608038,
        "sender_full_name": "Jared Cosulich",
        "timestamp": 1718808767
    },
    {
        "content": "<p>-deleted-</p>",
        "id": 445609214,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1718809163
    }
]