[
    {
        "content": "<p>Consider:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ta</span> <span class=\"o\">(</span><span class=\"n\">hpqpr</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)):</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">tauto</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">tb</span> <span class=\"o\">(</span><span class=\"n\">hpqpr</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)):</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">or_and_left.2</span> <span class=\"n\">hpqpr</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">ta</span> <span class=\"c1\">-- (p q r : Prop) (hpqpr : (p ∨ q) ∧ (p ∨ r)) : p ∨ q ∧ r</span>\n<span class=\"k\">#check</span> <span class=\"n\">tb</span> <span class=\"c1\">-- the same as ta</span>\n\n<span class=\"bp\">#</span><span class=\"n\">explode</span> <span class=\"n\">ta</span>\n<span class=\"bp\">#</span><span class=\"n\">explode</span> <span class=\"n\">tb</span>\n</code></pre></div>\n<p>The <code>#explode ta</code> gives a proof which uses <code>em</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ta</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span>\n\n<span class=\"mi\">0</span> <span class=\"bp\">│</span>          <span class=\"bp\">│</span> <span class=\"n\">p</span>                   <span class=\"bp\">├</span> <span class=\"kt\">Prop</span>\n<span class=\"mi\">1</span> <span class=\"bp\">│</span>          <span class=\"bp\">│</span> <span class=\"n\">q</span>                   <span class=\"bp\">├</span> <span class=\"kt\">Prop</span>\n<span class=\"mi\">2</span> <span class=\"bp\">│</span>          <span class=\"bp\">│</span> <span class=\"n\">r</span>                   <span class=\"bp\">├</span> <span class=\"kt\">Prop</span>\n<span class=\"mi\">3</span> <span class=\"bp\">│</span>          <span class=\"bp\">│</span> <span class=\"n\">hpqpr</span>               <span class=\"bp\">├</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n<span class=\"mi\">4</span> <span class=\"bp\">│</span>          <span class=\"bp\">│</span> <span class=\"n\">em</span><span class=\"bp\">✝</span>                 <span class=\"bp\">│</span> <span class=\"bp\">┌</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Decidable</span> <span class=\"n\">a</span>\n<span class=\"mi\">5</span> <span class=\"bp\">│</span>          <span class=\"bp\">│</span> <span class=\"n\">left</span><span class=\"bp\">✝</span>               <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">┌</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span>\n<span class=\"mi\">6</span> <span class=\"bp\">│</span>          <span class=\"bp\">│</span> <span class=\"n\">right</span><span class=\"bp\">✝</span>              <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">├</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span>\n<span class=\"mi\">7</span> <span class=\"bp\">│</span>          <span class=\"bp\">│</span> <span class=\"n\">h</span><span class=\"bp\">✝</span>                  <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">┌</span> <span class=\"n\">p</span>\n<span class=\"mi\">8</span> <span class=\"bp\">│</span>          <span class=\"bp\">│</span> <span class=\"n\">h</span><span class=\"bp\">✝</span>                  <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">┌</span> <span class=\"n\">p</span>\n<span class=\"mi\">9</span> <span class=\"bp\">│</span>          <span class=\"bp\">│</span> <span class=\"n\">or_iff_not_imp_left</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span>\n<span class=\"mi\">10</span><span class=\"bp\">│</span>          <span class=\"bp\">│</span> <span class=\"n\">a</span><span class=\"bp\">✝</span>                  <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">┌</span> <span class=\"bp\">¬</span><span class=\"n\">p</span>\n<span class=\"mi\">11</span><span class=\"bp\">│</span><span class=\"mi\">8</span><span class=\"o\">,</span><span class=\"mi\">10</span>      <span class=\"bp\">│</span> <span class=\"n\">absurd</span>              <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"n\">q</span>\n<span class=\"mi\">12</span><span class=\"bp\">│</span><span class=\"mi\">8</span><span class=\"o\">,</span><span class=\"mi\">10</span>      <span class=\"bp\">│</span> <span class=\"n\">absurd</span>              <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"n\">r</span>\n<span class=\"mi\">13</span><span class=\"bp\">│</span><span class=\"mi\">11</span><span class=\"o\">,</span><span class=\"mi\">12</span>     <span class=\"bp\">│</span> <span class=\"n\">And.intro</span>           <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span>\n<span class=\"mi\">14</span><span class=\"bp\">│</span><span class=\"mi\">10</span><span class=\"o\">,</span><span class=\"mi\">13</span>     <span class=\"bp\">│</span> <span class=\"bp\">∀</span><span class=\"n\">I</span>                  <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span>\n<span class=\"mi\">15</span><span class=\"bp\">│</span><span class=\"mi\">9</span><span class=\"o\">,</span><span class=\"mi\">14</span>      <span class=\"bp\">│</span> <span class=\"n\">Iff.mpr</span>             <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span>\n<span class=\"mi\">16</span><span class=\"bp\">│</span><span class=\"mi\">8</span><span class=\"o\">,</span><span class=\"mi\">15</span>      <span class=\"bp\">│</span> <span class=\"bp\">∀</span><span class=\"n\">I</span>                  <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span>\n<span class=\"mi\">17</span><span class=\"bp\">│</span>          <span class=\"bp\">│</span> <span class=\"n\">h</span><span class=\"bp\">✝</span>                  <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">┌</span> <span class=\"n\">r</span>\n<span class=\"mi\">18</span><span class=\"bp\">│</span>          <span class=\"bp\">│</span> <span class=\"n\">a</span><span class=\"bp\">✝</span>                  <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">┌</span> <span class=\"bp\">¬</span><span class=\"n\">p</span>\n<span class=\"mi\">19</span><span class=\"bp\">│</span><span class=\"mi\">7</span><span class=\"o\">,</span><span class=\"mi\">18</span>      <span class=\"bp\">│</span> <span class=\"n\">absurd</span>              <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"n\">q</span>\n<span class=\"mi\">20</span><span class=\"bp\">│</span><span class=\"mi\">19</span><span class=\"o\">,</span><span class=\"mi\">17</span>     <span class=\"bp\">│</span> <span class=\"n\">And.intro</span>           <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span>\n<span class=\"mi\">21</span><span class=\"bp\">│</span><span class=\"mi\">18</span><span class=\"o\">,</span><span class=\"mi\">20</span>     <span class=\"bp\">│</span> <span class=\"bp\">∀</span><span class=\"n\">I</span>                  <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span>\n<span class=\"mi\">22</span><span class=\"bp\">│</span><span class=\"mi\">9</span><span class=\"o\">,</span><span class=\"mi\">21</span>      <span class=\"bp\">│</span> <span class=\"n\">Iff.mpr</span>             <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span>\n<span class=\"mi\">23</span><span class=\"bp\">│</span><span class=\"mi\">17</span><span class=\"o\">,</span><span class=\"mi\">22</span>     <span class=\"bp\">│</span> <span class=\"bp\">∀</span><span class=\"n\">I</span>                  <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span>\n<span class=\"mi\">24</span><span class=\"bp\">│</span><span class=\"mi\">6</span><span class=\"o\">,</span><span class=\"mi\">16</span><span class=\"o\">,</span><span class=\"mi\">23</span>   <span class=\"bp\">│</span> <span class=\"n\">Or.casesOn</span>          <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span>\n<span class=\"mi\">25</span><span class=\"bp\">│</span><span class=\"mi\">7</span><span class=\"o\">,</span><span class=\"mi\">24</span>      <span class=\"bp\">│</span> <span class=\"bp\">∀</span><span class=\"n\">I</span>                  <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span>\n<span class=\"mi\">26</span><span class=\"bp\">│</span>          <span class=\"bp\">│</span> <span class=\"n\">h</span><span class=\"bp\">✝</span>                  <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">┌</span> <span class=\"n\">q</span>\n<span class=\"mi\">27</span><span class=\"bp\">│</span>          <span class=\"bp\">│</span> <span class=\"n\">h</span><span class=\"bp\">✝</span>                  <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">┌</span> <span class=\"n\">p</span>\n<span class=\"mi\">28</span><span class=\"bp\">│</span>          <span class=\"bp\">│</span> <span class=\"n\">a</span><span class=\"bp\">✝</span>                  <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">┌</span> <span class=\"bp\">¬</span><span class=\"n\">p</span>\n<span class=\"mi\">29</span><span class=\"bp\">│</span><span class=\"mi\">27</span><span class=\"o\">,</span><span class=\"mi\">28</span>     <span class=\"bp\">│</span> <span class=\"n\">absurd</span>              <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"n\">r</span>\n<span class=\"mi\">30</span><span class=\"bp\">│</span><span class=\"mi\">26</span><span class=\"o\">,</span><span class=\"mi\">29</span>     <span class=\"bp\">│</span> <span class=\"n\">And.intro</span>           <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span>\n<span class=\"mi\">31</span><span class=\"bp\">│</span><span class=\"mi\">28</span><span class=\"o\">,</span><span class=\"mi\">30</span>     <span class=\"bp\">│</span> <span class=\"bp\">∀</span><span class=\"n\">I</span>                  <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span>\n<span class=\"mi\">32</span><span class=\"bp\">│</span><span class=\"mi\">9</span><span class=\"o\">,</span><span class=\"mi\">31</span>      <span class=\"bp\">│</span> <span class=\"n\">Iff.mpr</span>             <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span>\n<span class=\"mi\">33</span><span class=\"bp\">│</span><span class=\"mi\">27</span><span class=\"o\">,</span><span class=\"mi\">32</span>     <span class=\"bp\">│</span> <span class=\"bp\">∀</span><span class=\"n\">I</span>                  <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span>\n<span class=\"mi\">34</span><span class=\"bp\">│</span>          <span class=\"bp\">│</span> <span class=\"n\">h</span><span class=\"bp\">✝</span>                  <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">┌</span> <span class=\"n\">r</span>\n<span class=\"mi\">35</span><span class=\"bp\">│</span>          <span class=\"bp\">│</span> <span class=\"n\">a</span><span class=\"bp\">✝</span>                  <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">┌</span> <span class=\"bp\">¬</span><span class=\"n\">p</span>\n<span class=\"mi\">36</span><span class=\"bp\">│</span><span class=\"mi\">26</span><span class=\"o\">,</span><span class=\"mi\">34</span>     <span class=\"bp\">│</span> <span class=\"n\">And.intro</span>           <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span>\n<span class=\"mi\">37</span><span class=\"bp\">│</span><span class=\"mi\">35</span><span class=\"o\">,</span><span class=\"mi\">36</span>     <span class=\"bp\">│</span> <span class=\"bp\">∀</span><span class=\"n\">I</span>                  <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span>\n<span class=\"mi\">38</span><span class=\"bp\">│</span><span class=\"mi\">9</span><span class=\"o\">,</span><span class=\"mi\">37</span>      <span class=\"bp\">│</span> <span class=\"n\">Iff.mpr</span>             <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span>\n<span class=\"mi\">39</span><span class=\"bp\">│</span><span class=\"mi\">34</span><span class=\"o\">,</span><span class=\"mi\">38</span>     <span class=\"bp\">│</span> <span class=\"bp\">∀</span><span class=\"n\">I</span>                  <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span>\n<span class=\"mi\">40</span><span class=\"bp\">│</span><span class=\"mi\">6</span><span class=\"o\">,</span><span class=\"mi\">33</span><span class=\"o\">,</span><span class=\"mi\">39</span>   <span class=\"bp\">│</span> <span class=\"n\">Or.casesOn</span>          <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span>\n<span class=\"mi\">41</span><span class=\"bp\">│</span><span class=\"mi\">26</span><span class=\"o\">,</span><span class=\"mi\">40</span>     <span class=\"bp\">│</span> <span class=\"bp\">∀</span><span class=\"n\">I</span>                  <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span>\n<span class=\"mi\">42</span><span class=\"bp\">│</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">25</span><span class=\"o\">,</span><span class=\"mi\">41</span>   <span class=\"bp\">│</span> <span class=\"n\">Or.casesOn</span>          <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span>\n<span class=\"mi\">43</span><span class=\"bp\">│</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">6</span><span class=\"o\">,</span><span class=\"mi\">42</span>    <span class=\"bp\">│</span> <span class=\"bp\">∀</span><span class=\"n\">I</span>                  <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span>\n<span class=\"mi\">44</span><span class=\"bp\">│</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">43</span>      <span class=\"bp\">│</span> <span class=\"n\">And.casesOn</span>         <span class=\"bp\">│</span> <span class=\"bp\">│</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span>\n<span class=\"mi\">45</span><span class=\"bp\">│</span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"mi\">44</span>      <span class=\"bp\">│</span> <span class=\"bp\">∀</span><span class=\"n\">I</span>                  <span class=\"bp\">│</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Decidable</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span>\n<span class=\"mi\">46</span><span class=\"bp\">│</span><span class=\"mi\">45</span>        <span class=\"bp\">│</span> <span class=\"n\">letFun</span>              <span class=\"bp\">│</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span>\n<span class=\"mi\">47</span><span class=\"bp\">│</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">46</span><span class=\"bp\">│</span> <span class=\"bp\">∀</span><span class=\"n\">I</span>                  <span class=\"bp\">│</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span>\n</code></pre></div>\n<p>The <code>#explode tb</code> gives a more terse proof which is not <code>Classical</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tb</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span>\n\n<span class=\"mi\">0</span><span class=\"bp\">│</span>         <span class=\"bp\">│</span> <span class=\"n\">p</span>           <span class=\"bp\">├</span> <span class=\"kt\">Prop</span>\n<span class=\"mi\">1</span><span class=\"bp\">│</span>         <span class=\"bp\">│</span> <span class=\"n\">q</span>           <span class=\"bp\">├</span> <span class=\"kt\">Prop</span>\n<span class=\"mi\">2</span><span class=\"bp\">│</span>         <span class=\"bp\">│</span> <span class=\"n\">r</span>           <span class=\"bp\">├</span> <span class=\"kt\">Prop</span>\n<span class=\"mi\">3</span><span class=\"bp\">│</span>         <span class=\"bp\">│</span> <span class=\"n\">hpqpr</span>       <span class=\"bp\">├</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n<span class=\"mi\">4</span><span class=\"bp\">│</span>         <span class=\"bp\">│</span> <span class=\"n\">or_and_left</span> <span class=\"bp\">│</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n<span class=\"mi\">5</span><span class=\"bp\">│</span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"mi\">3</span>      <span class=\"bp\">│</span> <span class=\"n\">Iff.mpr</span>     <span class=\"bp\">│</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span>\n<span class=\"mi\">6</span><span class=\"bp\">│</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"bp\">│</span> <span class=\"bp\">∀</span><span class=\"n\">I</span>          <span class=\"bp\">│</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span>\n</code></pre></div>\n<p>Is there a version of <code>tauto</code> which limits itself to what it can do without <code>em</code>?</p>",
        "id": 410515953,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1703916353
    },
    {
        "content": "<p>Try <code>itauto</code></p>",
        "id": 410517123,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1703917478
    },
    {
        "content": "<p>Perhaps intuitionistic logic is no longer top of mind.  <code>itauto</code> gives <code>tactic 'Mathlib.Tactic.itauto' has not been implemented</code> in </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ta</span> <span class=\"o\">(</span><span class=\"n\">hpqpr</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)):</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">itauto</span> <span class=\"c1\">-- tactic 'Mathlib.Tactic.itauto' has not been implemented</span>\n</code></pre></div>",
        "id": 410555204,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1703952055
    },
    {
        "content": "<p>generally speaking the focus on having an un classical tool in Lean if there is a classical one available is very low right now.</p>",
        "id": 410555863,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1703952538
    },
    {
        "content": "<p>In terms of what I was looking at above, I don't actually know that <code>or_and_left.2 hpqpr</code> is un-Classical, because it is not really exploding the <code>or_and_left.2</code> in </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">4</span><span class=\"bp\">│</span>         <span class=\"bp\">│</span> <span class=\"n\">or_and_left</span> <span class=\"bp\">│</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n<span class=\"mi\">5</span><span class=\"bp\">│</span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"mi\">3</span>      <span class=\"bp\">│</span> <span class=\"n\">Iff.mpr</span>     <span class=\"bp\">│</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span>\n<span class=\"mi\">6</span><span class=\"bp\">│</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"bp\">│</span> <span class=\"bp\">∀</span><span class=\"n\">I</span>          <span class=\"bp\">│</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span>\n</code></pre></div>\n<p>Is there an alternative to <code>#explode</code> which will trace one level down into <code>or_and_left</code> in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">hpqpr</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">))</span>\n\n<span class=\"bp\">#</span><span class=\"n\">explode</span> <span class=\"n\">or_and_left.2</span> <span class=\"n\">hpqpr</span> <span class=\"c1\">-- need trace one level deeper</span>\n</code></pre></div>",
        "id": 410559699,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1703956285
    },
    {
        "content": "<p>No, <code>#explode</code> doesn't have any features to unfold theorems. It could be implemented, but I'm not sure what the use case is. Is following it up with <code>#explode or_and_left</code> not sufficient for you?</p>",
        "id": 410559992,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1703956628
    },
    {
        "content": "<p>If you care about classical axioms, there's also <code>#print axioms or_and_left</code>, which gives you the answer more directly.</p>",
        "id": 410560064,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1703956696
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>,  I am going through <a href=\"https://lean-lang.org/theorem_proving_in_lean4/propositions_and_proofs.html#exercises\">these exercises</a> in the Theorem Proving in Lean 4 book.  The exercises are divided into un-Classical </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>and Classical ones:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Classical</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I am just being obsessive-compulsive in trying to verify that the un-Classical exercise is actually un-Classical.  I am stuck because I want to do this by cases, which is Classical.  <code>tauto</code> also uses <code>em</code>.  I am looking at <code>#explode</code> of <code>or_and_left</code> because my training so far in Theorem Proving in Lean 4 is insufficient to be able to read <a href=\"https://github.com/leanprover/std4/blob/ee49cf8fada1bf5a15592c399a925c401848227f//Std/Logic.lean#L338-L340\">this definition</a>, which has some very terse syntax which hasn't been introduced yet in the book.  If I can't read it, I can't sugar it into something that I can reproduce, which is why I am looking for a trace:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"sd\">/-- `∨` distributes over `∧` (on the left). -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">or_and_left</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">Or.rec</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">ha</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">ha</span><span class=\"o\">⟩)</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">imp</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"bp\">.</span><span class=\"n\">inr</span><span class=\"o\">),</span>\n   <span class=\"n\">And.rec</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">imp_right</span> <span class=\"bp\">∘</span> <span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"o\">)⟩</span>\n</code></pre></div>",
        "id": 410561028,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1703957779
    },
    {
        "content": "<p>If you have a term mode proof like this and want to sugar it, you can do it step by step by adding <code> by exact</code> at the start of the proof and then incrementally work though it</p>",
        "id": 410561918,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1703958802
    },
    {
        "content": "<p>The pointy brackets are equivalent to <code>constructor</code></p>",
        "id": 410561937,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1703958825
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Is.20there.20an.20un-Classical.20version.20of.20the.20.60tauto.60.20tactic.3F/near/410560064\">said</a>:</p>\n<blockquote>\n<p>If you care about classical axioms, there's also <code>#print axioms or_and_left</code>, which gives you the answer more directly.</p>\n</blockquote>\n<p>Let me mention this command again, since that will tell you whether it depends on <code>Classical.choice</code></p>",
        "id": 410562035,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1703958932
    },
    {
        "content": "<p>(the point is that at every step, you have a working proof you can inspect)</p>",
        "id": 410562091,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1703958997
    },
    {
        "content": "<p>Without deconstructing <code>or_and_left</code>, I tried to do it again and I came down to a point where I want to do reasoning by cases on <code>p ∨ q</code>.  I don't know if proof by cases in this instance requires <code>em</code> because it's not exactly saying <code>p ∨ ¬p</code>, it's just saying that if I know <code>p ∨ q</code> then either <code>p</code> or <code>q</code> must be true, which seems like a minimum expectation of <code>∨ </code>.  Then I asked Google Bard how to do proof by cases on disjunction in Lean 4 and it gave me <code>rcases</code>, but I couldn't figure out from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=rcases#doc\">docs#rcases</a> how to use it in Lean 4. There are no examples of <code>rcases</code> in Theorem Proving in Lean 4.  I did stumble on <code>Or.by_cases</code> in Mathlib, which seems promising but then I got another roadblock: Lean 4 gave me error <code>failed to synthesize instance  Decidable p</code> in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">L1l1</span> <span class=\"o\">(</span><span class=\"n\">hp</span><span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">Or.inl</span> <span class=\"n\">hp</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">L1l2</span> <span class=\"o\">(</span><span class=\"n\">hqr</span><span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">Or.inr</span> <span class=\"n\">hqr.left</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">L1l</span> <span class=\"o\">(</span><span class=\"n\">hpqr</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Or.elim</span> <span class=\"n\">hpqr</span> <span class=\"n\">L1l1</span> <span class=\"n\">L1l2</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">L1r1</span> <span class=\"o\">(</span><span class=\"n\">hqr</span><span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">Or.inr</span> <span class=\"n\">hqr.right</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">L1r</span> <span class=\"o\">(</span><span class=\"n\">hpqr</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Or.elim</span> <span class=\"n\">hpqr</span> <span class=\"n\">L1l1</span> <span class=\"n\">L1r1</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">L1</span> <span class=\"o\">(</span><span class=\"n\">hpqr</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">And.intro</span> <span class=\"o\">(</span><span class=\"n\">L1l</span> <span class=\"n\">hpqr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L1r</span> <span class=\"n\">hpqr</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">L2</span> <span class=\"o\">(</span><span class=\"n\">hpqpr</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)):</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"n\">hpq</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">hpqpr.left</span>\n  <span class=\"k\">have</span> <span class=\"n\">hpr</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">hpqpr.right</span>\n  <span class=\"n\">Or.by_cases</span> <span class=\"n\">hpq</span> <span class=\"c1\">-- failed to synthesize instance Decidable p</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Iff.intro</span> <span class=\"n\">L1</span> <span class=\"n\">L2</span>\n</code></pre></div>\n<p>Is there a way to make <code>Or.by_cases</code> work or another method of doing the same?  I need to do a nested proof with four cases <code>p,p</code>, <code>p,r</code>, <code>q,p</code> and <code>q,r</code>, i.e. it is roughly an <code>Or.by_cases hpq (Or.by_cases hpr) (Or.by_cases hpr)</code>.</p>",
        "id": 410587083,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1703983754
    },
    {
        "content": "<p>there are many examples of <code>rcases</code> in mathlib</p>",
        "id": 410587500,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703983976
    },
    {
        "content": "<p>Did you see <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Std.Tactic.rcases#doc\">docs#Std.Tactic.rcases</a> ? What in the documentation was unclear?</p>",
        "id": 410587562,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703984021
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I'm just finding this a bit hard to read, and it doesn't walk through a complete example that for example would run self-contained in Lean 4 Playground.  I can look for full examples by grepping through Mathlib.  It would be very hepful  if the Mathlib docs had the ability to push a button to pop examples into Lean 4 Playground in the same way as the button on Zulip works for inline code examples.</p>\n<p>I think I've made a little more progress anyway.  It occurred to me that I might be able to do a nested proof using <code>Or.elim</code>.  This is where I'm at now, with one <code>sorry</code> in lemma<code>L2b</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">L1l1</span> <span class=\"o\">(</span><span class=\"n\">hp</span><span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">Or.inl</span> <span class=\"n\">hp</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">L1l2</span> <span class=\"o\">(</span><span class=\"n\">hqr</span><span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">Or.inr</span> <span class=\"n\">hqr.left</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">L1l</span> <span class=\"o\">(</span><span class=\"n\">hpqr</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Or.elim</span> <span class=\"n\">hpqr</span> <span class=\"n\">L1l1</span> <span class=\"n\">L1l2</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">L1r1</span> <span class=\"o\">(</span><span class=\"n\">hqr</span><span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">Or.inr</span> <span class=\"n\">hqr.right</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">L1r</span> <span class=\"o\">(</span><span class=\"n\">hpqr</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Or.elim</span> <span class=\"n\">hpqr</span> <span class=\"n\">L1l1</span> <span class=\"n\">L1r1</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">L1</span> <span class=\"o\">(</span><span class=\"n\">hpqr</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">And.intro</span> <span class=\"o\">(</span><span class=\"n\">L1l</span> <span class=\"n\">hpqr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L1r</span> <span class=\"n\">hpqr</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">L2a</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">Or.inl</span> <span class=\"n\">hp</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">L2b</span> <span class=\"o\">(</span><span class=\"n\">hpq</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hpr</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">L2</span> <span class=\"o\">(</span><span class=\"n\">hpqpr</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)):</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"n\">hpq</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">hpqpr.left</span>\n  <span class=\"k\">have</span> <span class=\"n\">hpr</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">hpqpr.right</span>\n  <span class=\"n\">Or.elim</span> <span class=\"n\">hpq</span>\n    <span class=\"n\">L2a</span>\n    <span class=\"o\">(</span><span class=\"n\">L2b</span> <span class=\"n\">hpq</span> <span class=\"n\">hpr</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Iff.intro</span> <span class=\"n\">L1</span> <span class=\"n\">L2</span>\n</code></pre></div>",
        "id": 410588087,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1703984433
    },
    {
        "content": "<p>There are standalone simple examples in <a href=\"https://github.com/leanprover/std4/blob/main/test/rcases.lean\">https://github.com/leanprover/std4/blob/main/test/rcases.lean</a></p>",
        "id": 410588724,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703984778
    },
    {
        "content": "<p>in any case, the short answer to your question is that the way to use <code>rcases</code> on an or hypothesis is <code>rcases hpq with h | h</code></p>",
        "id": 410588967,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703984945
    },
    {
        "content": "<p>here's a proof of <code>L2</code> using <code>rcases</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">L2</span> <span class=\"o\">(</span><span class=\"n\">hpqpr</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)):</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hpqpr</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">hp</span> <span class=\"bp\">|</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">hp</span> <span class=\"bp\">|</span> <span class=\"n\">hr</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">hp</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">hp</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">hp</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">⟨</span><span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">hr</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 410589220,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703985129
    },
    {
        "content": "<p>by the way, since you asked: case analysis on <code>p ∨ q</code> is intuitionistically valid, it does not require <code>em</code> and if you use <code>#print axioms L2</code> it will verify this</p>",
        "id": 410589443,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703985349
    },
    {
        "content": "<p>This is the kind of \"proof by cases\" that is intuitionistically okay. <code>by_cases</code> is not intuitionistically valid because it first uses <code>em</code> to magic up a proof of <code>p ∨ ¬p</code> and then case splits on it. The case split is not the troublesome part, it is obtaining the <code>p ∨ ¬p</code> to split</p>",
        "id": 410589592,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703985455
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>.  I will bookmark the test directory!</p>\n<p>I am still trying to unpack the syntax of <code>or_and_left.2</code>.  There are a lot of advanced features in this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">or_and_left2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">→</span>  <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n  <span class=\"n\">And.rec</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">imp_right</span> <span class=\"bp\">∘</span> <span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>First the dot notation with no left hand side.  Hovering over the <code>.rec</code>s and <code>.inl</code>s shows that these can be expanded to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">or_and_left2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">→</span>  <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n  <span class=\"n\">And.rec</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Or.rec</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inl</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Or.imp_right</span> <span class=\"bp\">∘</span> <span class=\"n\">And.intro</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Then the pipeline notation <code>&lt;|</code> which is explained in the Lean Manual (now also bookmarked) <a href=\"https://lean-lang.org/lean4/doc/functions.html?highlight=pipe%20ope#pipelining\">here</a>.  In this case it eliminates one parenthesis, so above can be rewritten as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">or_and_left2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">→</span>  <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n  <span class=\"n\">And.rec</span> <span class=\"o\">(</span><span class=\"n\">Or.rec</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inl</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Or.imp_right</span> <span class=\"bp\">∘</span> <span class=\"n\">And.intro</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>The composition operator <code>∘</code> is documented in <a href=\"https://lean-lang.org/logic_and_proof/functions_in_lean.html\">Logic and Proof</a> (now bookmarked).  So <code>g ∘ f</code> is the same as <code>fun x =&gt; g(fx))</code> giving</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">or_and_left2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">→</span>  <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n  <span class=\"n\">And.rec</span> <span class=\"o\">(</span><span class=\"n\">Or.rec</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inl</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.imp_right</span> <span class=\"o\">(</span><span class=\"n\">And.intro</span> <span class=\"n\">x</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>The center dot <code>·</code> is documented in <a href=\"https://lean-lang.org/functional_programming_in_lean/getting-to-know/conveniences.html?highlight=center#anonymous-functions\">Functional Programming in Lean.</a>, according to which <code>Or.inl ·</code> is the same as <code>fun x =&gt; Or.inl x</code>, giving:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">or_and_left2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">→</span>  <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n  <span class=\"n\">And.rec</span> <span class=\"o\">(</span><span class=\"n\">Or.rec</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inl</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.imp_right</span> <span class=\"o\">(</span><span class=\"n\">And.intro</span> <span class=\"n\">x</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>Unfortunately this doesn't work, the error is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">Or.inl</span> <span class=\"n\">x</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">x</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>The <code>.rec</code> notation is also unfamiliar.  It is not used in Theorem Proving in Lean, the Lean Manual, or Functional Programming in Lean, as far as I can see.  I don't see it in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=And#doc\">docs#And</a>.  Where is it described?  I see it used in the source.</p>",
        "id": 410602129,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1703996724
    },
    {
        "content": "<p>Your unpacking of the dot notation is not quite right. The way it works is that you have an expression surrounded in parentheses with a <code>·</code> somewhere in it, and this means to replace the <code>·</code> with a fresh variable <code>x</code>  and add <code>fun x =&gt;</code> at the parentheses. So <code>(fun _ =&gt; Or.inl ·)</code> is equivalent to <code>fun x =&gt; fun _ =&gt; Or.inl x</code></p>",
        "id": 410602295,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703996884
    },
    {
        "content": "<p><code>And.rec</code> is the recursor for <code>And</code>, it is defined by the <code>inductive</code> command (every inductive type has a <code>T.rec</code> function)</p>",
        "id": 410602347,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703996974
    },
    {
        "content": "<p>the type of the <code>rec</code> function follows the definition of the inductive type in a particular way; for <code>And</code> this will look something like <code>(A -&gt; B -&gt; C) -&gt; (A /\\ B) -&gt; C</code> which is the same as the <code>And.elim</code> function, except that it allows <code>C</code> to depend on the proof of <code>A /\\ B</code> (this usually isn't used and can be ignored for the most part)</p>",
        "id": 410602487,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703997098
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I see <code>.rec</code> discussed now in <a href=\"https://lean-lang.org/theorem_proving_in_lean4/inductive_types.html\">Theorem proving in Lean 4 in the Inductive Types section</a>.</p>\n<p>Thanks also for the reading of <code>·</code>, that is very helpful.</p>",
        "id": 410640746,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1704035982
    },
    {
        "content": "<p>Here it is mostly un-golfed (flogged?).  I will play close attention to <code>.rec</code> when I get to the inductive chapter:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">L1a</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">Or.intro_left</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">ha</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">L1b</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">Or.imp_right</span> <span class=\"o\">(</span><span class=\"n\">And.intro</span> <span class=\"n\">hb</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">L1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">Or.rec</span> <span class=\"n\">L1a</span> <span class=\"n\">L1b</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">or_and_left2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">→</span>  <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n   <span class=\"n\">And.rec</span> <span class=\"n\">L1</span> <span class=\"c1\">-- And.rec &lt;| .rec (fun _ =&gt; .inl ·) (.imp_right ∘ .intro)</span>\n</code></pre></div>",
        "id": 410644694,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1704039565
    },
    {
        "content": "<p>Are you aware that you can use <code>have</code> to introduce intermediary statements? You don't need to make definitions for everything (and it's better not to, since your short names like <code>L1</code> will cause name clashes)</p>",
        "id": 410644820,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704039707
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">or_and_left2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">→</span>  <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"n\">L1a</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n    <span class=\"k\">fun</span> <span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">Or.intro_left</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">ha</span>\n  <span class=\"k\">have</span> <span class=\"n\">L1b</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n    <span class=\"k\">fun</span> <span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">Or.imp_right</span> <span class=\"o\">(</span><span class=\"n\">And.intro</span> <span class=\"n\">hb</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"n\">L1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">Or.rec</span> <span class=\"n\">L1a</span> <span class=\"n\">L1b</span>\n  <span class=\"n\">And.rec</span> <span class=\"n\">L1</span>\n</code></pre></div>",
        "id": 410644896,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704039781
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> .  I wanted to use a <code>have</code> but it didn't occur to me I could put whole proofs under the <code>have</code>.  In examples, <code>have</code> is most often used to introduce terms, like <code>have hp : p := h.left</code>.</p>",
        "id": 410645498,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1704040446
    },
    {
        "content": "<p>but those <em>are</em> terms</p>",
        "id": 410645511,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704040469
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">fun</span> <span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">Or.intro_left</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">ha</span>\n</code></pre></div>\n<p>is a term</p>",
        "id": 410645517,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704040486
    },
    {
        "content": "<p>Should hightlighting use different colors for term and tactic keywords to make this kind of thing less confusing?</p>",
        "id": 410649124,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1704044530
    },
    {
        "content": "<p>I'm not sure we want to draw that kind of attention to it, it is deliberate design that <code>have</code> and <code>let</code> and <code>if</code> and <code>match</code> and <code>sorry</code> work the same in term and tactic mode</p>",
        "id": 410649214,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704044647
    },
    {
        "content": "<p>And <code>rfl</code> (which used to have two spellings)</p>",
        "id": 410652503,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704048350
    },
    {
        "content": "<p>(as did <code>sorry</code> a very very long time ago)</p>",
        "id": 410652554,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704048373
    },
    {
        "content": "<p><code>have</code> and <code>let</code> too: the tactics used to be called <code>note</code> and <code>pose</code> respectively, I think from coq</p>",
        "id": 410652576,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704048417
    },
    {
        "content": "<p><code>admit</code> still exists today, although IMO we should deprecate and remove it</p>",
        "id": 410652686,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1704048528
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"364351\">Lars Ericson</span> <a href=\"#narrow/stream/113489-new-members/topic/Is.20there.20an.20un-Classical.20version.20of.20the.20.60tauto.60.20tactic.3F/near/410645498\">said</a>:</p>\n<blockquote>\n<p>Thanks <span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> .  I wanted to use a <code>have</code> but it didn't occur to me I could put whole proofs under the <code>have</code>.  In examples, <code>have</code> is most often used to introduce terms, like <code>have hp : p := h.left</code>.</p>\n</blockquote>\n<p>It's important to understand that \"Theorem Proving in Lean 4\" isn't a short cut to learn logic or math, it just help you to understand lean. It is unusual that one wants to learn non-em tactic before he established the understanding of term. </p>\n<p>Maybe you should just follow the book first. Do not stay too long in a chapter to try to understand everything. Actually, in Chapter 5 you will learn tactics and it will give you exercises to rewrite all the exercises in Chapter 3 and 4 into tactic way. Then you may feel much better.</p>",
        "id": 410781320,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1704160801
    }
]