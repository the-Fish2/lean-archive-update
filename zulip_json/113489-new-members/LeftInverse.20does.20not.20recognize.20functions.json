[
    {
        "content": "<p>I am trying to write some simple ancillary functions for Matrix type conversion between <code>Matrix (Fin i × Fin j) (Fin m × Fin n) α</code> and <code>Matrix (Fin (i * j)) (Fin (m * n)) α</code>. I want to show that my two conversion functions are <code>LeftInverse</code>, as defined in <code>Mathlib.Logic.Equiv.Fin</code>. However,  the term <code>LeftInverse matrix_fin_flat_map_inv matrix_fin_flat_map</code> gives an error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">function</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">LeftInverse</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.705</span>\n</code></pre></div>\n<p>I know that the two arguments are functions. What is the problem?</p>\n<p>Here is my code (the error happens at the return type declaration of the last function <code>matrix_fin_flat_map_left_inv</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Equiv.Fin</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">matrix_fin_flat_map</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">i</span> <span class=\"bp\">×</span> <span class=\"n\">Fin</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">m</span> <span class=\"bp\">×</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span><span class=\"o\">):</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Matrix.of</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span>  <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">finProdFinEquiv.invFun</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">finProdFinEquiv.invFun</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">matrix_fin_flat_map_inv</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>  <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">α</span><span class=\"o\">):</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">i</span> <span class=\"bp\">×</span> <span class=\"n\">Fin</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">m</span> <span class=\"bp\">×</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Matrix.of</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">i</span> <span class=\"bp\">×</span> <span class=\"n\">Fin</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span> <span class=\"bp\">×</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>  <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">finProdFinEquiv.toFun</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">finProdFinEquiv.toFun</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">matrix_fin_flat_map_left_inv</span><span class=\"o\">:</span> <span class=\"n\">LeftInverse</span> <span class=\"n\">matrix_fin_flat_map_inv</span> <span class=\"n\">matrix_fin_flat_map</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">M</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Matrix.ext</span>\n      <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">matrix_fin_flat_map</span><span class=\"o\">,</span> <span class=\"n\">matrix_fin_flat_map_inv</span><span class=\"o\">,</span> <span class=\"n\">finProdFinEquiv.left_inv</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">finProdFinEquiv</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Fin.divNat</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Fin.modNat</span><span class=\"o\">,</span> <span class=\"n\">Fin.mk_eq_mk</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">]</span>\n      <span class=\"n\">congr</span> <span class=\"mi\">2</span>\n      <span class=\"n\">all_goals</span> <span class=\"n\">congr</span>\n      <span class=\"n\">all_goals</span> <span class=\"n\">try</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_mul_div_left</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.div_eq_of_lt</span><span class=\"o\">,</span> <span class=\"n\">Nat.zero_add</span><span class=\"o\">]</span>\n      <span class=\"n\">apply</span> <span class=\"n\">x.2.2</span>\n      <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.pos_of_ne_zero</span>  <span class=\"k\">fun</span> <span class=\"n\">H</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.not_lt_zero</span> <span class=\"n\">x.2.1</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">H</span> <span class=\"bp\">▸</span> <span class=\"n\">x.2.2</span>\n      <span class=\"n\">exact</span> <span class=\"n\">H</span>\n      <span class=\"n\">all_goals</span> <span class=\"n\">try</span> <span class=\"n\">apply</span> <span class=\"n\">Nat.mod_eq_of_lt</span>\n      <span class=\"n\">apply</span> <span class=\"n\">x.2.2</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_left_eq_self</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.div_eq_of_lt</span><span class=\"o\">]</span>\n      <span class=\"n\">all_goals</span> <span class=\"n\">try</span> <span class=\"n\">apply</span> <span class=\"n\">y.2.2</span>\n      <span class=\"k\">have</span> <span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.pos_of_ne_zero</span>  <span class=\"k\">fun</span> <span class=\"n\">H2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.not_lt_zero</span> <span class=\"n\">y.2.1</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">H2</span> <span class=\"bp\">▸</span> <span class=\"n\">y.2.2</span>\n      <span class=\"n\">exact</span> <span class=\"n\">H2</span>\n</code></pre></div>",
        "id": 418682288,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1706548021
    },
    {
        "content": "<p>You presumably want <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Function.LeftInverse#doc\">docs#Function.LeftInverse</a> ?</p>",
        "id": 418699445,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706554245
    },
    {
        "content": "<p>Lean doesn't know that you mean to look in the <code>Function</code> namespace</p>",
        "id": 418699533,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706554283
    },
    {
        "content": "<p>Probably you actually want <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Matrix.reindex#doc\">docs#Matrix.reindex</a> though</p>",
        "id": 418699579,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706554303
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/LeftInverse.20does.20not.20recognize.20functions/near/418699445\">said</a>:</p>\n<blockquote>\n<p>You presumably want <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Function.LeftInverse#doc\">docs#Function.LeftInverse</a> ?</p>\n</blockquote>\n<p>Yeah, I actually used <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Function.LeftInverse#doc\">docs#Function.LeftInverse</a>. I thought I used the one in Mathlib.Logic.Equiv.Fin. #Matrix.reindex makes a ton of sense! Thanks!</p>\n<p>But what about the error here? Why is LeftInverse complaining...</p>",
        "id": 418702136,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1706555310
    },
    {
        "content": "<p>Do you need <code>open Function</code>?</p>",
        "id": 418705581,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1706556640
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/LeftInverse.20does.20not.20recognize.20functions/near/418705581\">said</a>:</p>\n<blockquote>\n<p>Do you need <code>open Function</code>?</p>\n</blockquote>\n<p>I didn't, and Lean can understand <code>LeftInverse</code>.</p>",
        "id": 418710248,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1706558429
    },
    {
        "content": "<p>Just add <code>open Function</code> and see if problem persists. My guess is, autoimplicit has declared LeftInverse to be some random type, since Lean doesn’t recognise it.</p>",
        "id": 418711369,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1706558888
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416472\">Winston Yin (尹維晨)</span> <a href=\"#narrow/stream/113489-new-members/topic/LeftInverse.20does.20not.20recognize.20functions/near/418711369\">said</a>:</p>\n<blockquote>\n<p>Just add <code>open Function</code> and see if problem persists. My guess is, autoimplicit has declared LeftInverse to be some random type, since Lean doesn’t recognise it.</p>\n</blockquote>\n<p>Worked (turned to another error)! Thanks!</p>",
        "id": 418711598,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1706558990
    },
    {
        "content": "<p><code>set_option autoImplicit false</code> will make Lean actually tell you when this type of mistake happens</p>",
        "id": 418730665,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1706566664
    }
]