[
    {
        "content": "<p>Hi for some exercises in category theory I wrote the following code for proving the following second diagram is  commute, where h is some homset functor Hom(A,-)<br>\n<a href=\"/user_uploads/3121/5A9OtcYLGX7hi144aa5K7kyw/1378F096-8FE7-48C7-A056-380C3FA3D0EF.jpg\">1378F096-8FE7-48C7-A056-380C3FA3D0EF.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/5A9OtcYLGX7hi144aa5K7kyw/1378F096-8FE7-48C7-A056-380C3FA3D0EF.jpg\" title=\"1378F096-8FE7-48C7-A056-380C3FA3D0EF.jpg\"><img src=\"/user_uploads/3121/5A9OtcYLGX7hi144aa5K7kyw/1378F096-8FE7-48C7-A056-380C3FA3D0EF.jpg\"></a></div>",
        "id": 439455481,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1716141544
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Functor.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Iso</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Equivalence</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Types</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.NatIso</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Yoneda</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Limits.Shapes.Pullbacks</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Limits.Shapes.Equalizers</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Limits.Shapes.CommSq</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Limits.Shapes.Diagonal</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Limits.Shapes.FiniteLimits</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Limits.Shapes.Types</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Limits.HasLimits</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Limits.FunctorCategory</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Limits.Preserves.Limits</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Limits.IsLimit</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Limits.Cones</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Limits.Types</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Limits.Yoneda</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Limits.Presheaf</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Limits.Preserves.Limits</span>\n\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n<span class=\"kd\">universe</span> <span class=\"n\">v</span> <span class=\"n\">u</span> <span class=\"n\">v'</span> <span class=\"n\">u'</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n<span class=\"c1\">-- set_option pp.all true</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span> <span class=\"n\">Category</span> <span class=\"n\">Functor</span> <span class=\"n\">Limits</span> <span class=\"n\">IsLimit</span> <span class=\"n\">Cone</span> <span class=\"n\">Opposite</span> <span class=\"n\">PullbackCone</span> <span class=\"n\">Types</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">C</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">HasFiniteLimits</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- graph for f</span>\n<span class=\"kd\">def</span> <span class=\"bp\">Œì</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">S</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">S</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">‚â´</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">pullback</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">pullback.lift</span>\n  <span class=\"n\">case</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"mi\">ùüô</span> <span class=\"n\">X</span>\n  <span class=\"n\">case</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">f</span>\n  <span class=\"n\">case</span> <span class=\"n\">w</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">aesop_cat</span>\n\n<span class=\"sd\">/-- cones factor theough pullback -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">pullback.homIso</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">pullback</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">‚âÉ</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">√ó</span> <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">//</span> <span class=\"n\">x.1</span> <span class=\"bp\">‚â´</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"n\">x.2</span> <span class=\"bp\">‚â´</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"o\">‚ü®‚ü®</span><span class=\"n\">k</span> <span class=\"bp\">‚â´</span> <span class=\"n\">pullback.fst</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">‚â´</span> <span class=\"n\">pullback.snd</span><span class=\"o\">‚ü©,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">congr</span> <span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">pullback.fst</span><span class=\"o\">,</span> <span class=\"n\">pullback.snd</span><span class=\"o\">,</span> <span class=\"n\">cospan</span><span class=\"o\">]‚ü©</span>\n  <span class=\"n\">invFun</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rintro</span> <span class=\"o\">‚ü®‚ü®</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">‚ü©,</span> <span class=\"n\">p</span><span class=\"o\">‚ü©</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">pullback.lift</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">p</span>\n  <span class=\"n\">left_inv</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">pullback.hom_ext</span> <span class=\"bp\">&lt;;&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">limit.lift_œÄ</span><span class=\"o\">,</span> <span class=\"n\">id_eq</span><span class=\"o\">,</span> <span class=\"n\">eq_mpr_eq_cast</span><span class=\"o\">,</span> <span class=\"n\">mk_pt</span><span class=\"o\">,</span> <span class=\"n\">mk_œÄ_app</span><span class=\"o\">]</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">‚ü®‚ü®</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">‚ü©,</span> <span class=\"n\">p</span><span class=\"o\">‚ü©</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Subtype.ext</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">limit.lift_œÄ</span><span class=\"o\">,</span> <span class=\"n\">mk_pt</span><span class=\"o\">,</span> <span class=\"n\">mk_œÄ_app</span><span class=\"o\">]</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"s2\">\"h\"</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">coyoneda.obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- coyoneda commutes with pullback</span>\n<span class=\"kd\">def</span> <span class=\"n\">coyoneda_pullback_iso_app</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">S</span> <span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">S</span><span class=\"o\">):</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">pullback</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">‚âÖ</span> <span class=\"n\">pullback</span> <span class=\"o\">((</span><span class=\"n\">h</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">h</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">equivEquivIso.toFun</span> <span class=\"o\">(</span><span class=\"n\">pullback.homIso</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"bp\">‚â™‚â´</span> <span class=\"o\">(</span><span class=\"n\">Types.pullbackIsoPullback</span> <span class=\"o\">(</span><span class=\"bp\">.</span> <span class=\"bp\">‚â´</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">.</span> <span class=\"bp\">‚â´</span> <span class=\"n\">_</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n\n<span class=\"c1\">-- in types cone commutes with two limit</span>\n<span class=\"c1\">-- one from choice and one from construction</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">pullbackIsoPullback_lift_comp</span> <span class=\"o\">{</span><span class=\"n\">W</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">‚â´</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">‚â´</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Types.pullbackLimitCone</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">isLimit.lift</span> <span class=\"o\">(</span><span class=\"n\">PullbackCone.mk</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">‚â´</span> <span class=\"o\">(</span><span class=\"n\">Types.pullbackIsoPullback</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inv</span> <span class=\"bp\">=</span>\n    <span class=\"n\">pullback.lift</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">e</span><span class=\"o\">:=</span>\n  <span class=\"n\">lift_comp_conePointUniqueUpToIso_hom</span> <span class=\"o\">(</span><span class=\"n\">Types.pullbackLimitCone</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">isLimit</span> <span class=\"o\">(</span><span class=\"n\">limit.isLimit</span> <span class=\"o\">(</span><span class=\"n\">cospan</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">))</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">-- graph/coyoned/pullback commute</span>\n<span class=\"sd\">This is slow</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">coyoneda_</span><span class=\"bp\">Œì</span><span class=\"n\">_iso_app_comm</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">S</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">‚â´</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">Œì</span> <span class=\"n\">f</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"bp\">‚â´</span> <span class=\"o\">(</span><span class=\"n\">coyoneda_pullback_iso_app</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"bp\">=</span> <span class=\"bp\">Œì</span> <span class=\"o\">((</span><span class=\"n\">h</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">aesop_cat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">coyoneda_pullback_iso_app</span><span class=\"o\">,</span> <span class=\"n\">Iso.trans_hom</span><span class=\"o\">,</span> <span class=\"n\">Iso.symm_hom</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"n\">pullbackIsoPullback_lift_comp</span> <span class=\"o\">((</span><span class=\"n\">h</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">h</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">h</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">coyoneda</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">aesop_cat</span><span class=\"o\">)</span>\n  <span class=\"n\">conv_rhs</span> <span class=\"n\">at</span> <span class=\"n\">comp</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">coyoneda</span><span class=\"o\">]</span>\n  <span class=\"n\">conv_rhs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">Œì</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">coyoneda</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">‚Üê</span><span class=\"n\">comp</span><span class=\"o\">]</span>\n  <span class=\"n\">clear</span> <span class=\"n\">comp</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">coyoneda</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">all_goals</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">Œì</span><span class=\"o\">,</span> <span class=\"n\">pullback.homIso</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n  <span class=\"n\">conv_rhs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">PullbackCone.isLimitAux</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 439455500,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1716141576
    },
    {
        "content": "<p>Any advice for the code here, especially the last? It‚Äôs quite slow. And I want to use more established results in mathlib<span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span></p>",
        "id": 439455643,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1716141675
    },
    {
        "content": "<p>Btw there is also some code about the equalizer very similar to the above want some advice too, for showing h(Eq(f,g)) ‚Üí Eq(h(f), h(g)) ‚Üí h(X) same as h(Eq(f,g)) ‚Üí h(X) that is applying h=Hom(A,-)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/--</span>\n<span class=\"sd\"> This is the composition of two isomorphism</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">coyoneda_equalizer_iso_app</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">equalizer</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">‚âÖ</span> <span class=\"n\">equalizer</span> <span class=\"o\">((</span><span class=\"n\">h</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">h</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"n\">equivEquivIso.toFun</span> <span class=\"o\">(</span><span class=\"n\">Fork.IsLimit.homIso</span> <span class=\"o\">(</span><span class=\"n\">limit.isLimit</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"bp\">‚â™‚â´</span> <span class=\"o\">((</span><span class=\"n\">Types.equalizerIso</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">coyoneda_equalizer_iso_app_comm</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">coyoneda_equalizer_iso_app</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"bp\">‚â´</span> <span class=\"o\">(</span><span class=\"n\">equalizer.Œπ</span> <span class=\"o\">((</span><span class=\"n\">h</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">h</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">g</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">equalizer.Œπ</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">coyoneda_equalizer_iso_app</span><span class=\"o\">,</span> <span class=\"n\">Iso.trans_hom</span><span class=\"o\">,</span> <span class=\"n\">Iso.symm_hom</span><span class=\"o\">]</span>\n  <span class=\"n\">slice_lhs</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">coyoneda</span><span class=\"o\">,</span> <span class=\"n\">Types.equalizerIso_inv_comp_Œπ</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">homIso_hom</span><span class=\"o\">]</span>\n  <span class=\"n\">conv_lhs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Fork.IsLimit.homIso</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 439457861,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1716143795
    },
    {
        "content": "<p>Hi I now realise that it may be easier to use directly the fact that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>H</mi><mi>o</mi><mi>m</mi><mo stretchy=\"false\">(</mo><mi>A</mi><mo separator=\"true\">,</mo><mo>‚àí</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">Hom(A, -)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">Ho</span><span class=\"mord mathnormal\">m</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">‚àí</span><span class=\"mclose\">)</span></span></span></span> preserves limit. I got the obj iso part from <a href=\"#narrow/stream/113489-new-members/topic/prove.20that.20parallelPair.20commutes.20with.20functor.3F\">the  related thread</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">coyoneda_equalizer_iso_app'</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">coyoneda.obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">A</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">equalizer</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">‚âÖ</span> <span class=\"n\">equalizer</span> <span class=\"o\">((</span><span class=\"n\">coyoneda.obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">A</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">coyoneda.obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">A</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">equalizer</span><span class=\"o\">,</span> <span class=\"n\">coyoneda</span><span class=\"o\">]</span>\n  <span class=\"k\">let</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">preservesLimitIso</span> <span class=\"o\">(</span><span class=\"n\">coyoneda.obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">parallelPair</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">diagramIsoParallelPair</span> <span class=\"o\">((</span><span class=\"n\">parallelPair</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">‚ãô</span> <span class=\"o\">(</span><span class=\"n\">coyoneda.obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">A</span><span class=\"o\">)))</span>\n  <span class=\"k\">let</span> <span class=\"n\">i'</span> <span class=\"o\">:=</span> <span class=\"n\">conePointsIsoOfNatIso</span> <span class=\"o\">(</span><span class=\"n\">limit.isLimit</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">limit.isLimit</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">a</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">i</span> <span class=\"n\">i'</span>\n  <span class=\"n\">exact</span> <span class=\"n\">i</span> <span class=\"bp\">‚â™‚â´</span> <span class=\"n\">i'</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">coyoneda_equalizer_iso_app_comm'</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">coyoneda_equalizer_iso_app'</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"bp\">‚â´</span> <span class=\"o\">(</span><span class=\"n\">equalizer.Œπ</span> <span class=\"o\">((</span><span class=\"n\">coyoneda.obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">A</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">coyoneda.obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">A</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">g</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">coyoneda.obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">A</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">equalizer.Œπ</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">preservesLimitsIso_hom_œÄ</span> <span class=\"o\">(</span><span class=\"n\">coyoneda.obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">parallelPair</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n       <span class=\"n\">WalkingParallelPair.zero</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">coyoneda</span><span class=\"o\">]</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>But not the morphism commute part for the equalizer case. Any idea please?</p>",
        "id": 439626376,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1716228606
    },
    {
        "content": "<p>Btw <code>simp at c</code> results in <code>c: True</code>. Kind of werid</p>",
        "id": 439626503,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1716228662
    }
]