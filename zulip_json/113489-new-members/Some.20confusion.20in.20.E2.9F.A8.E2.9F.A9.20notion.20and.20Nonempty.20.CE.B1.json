[
    {
        "content": "<p>Hi! In TPIL §.Axioms and Computation. There is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">indefiniteDescription</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"n\">choice</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">px</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">px</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">inahbited_of_nonempty</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Inhabited</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">choice</span> <span class=\"o\">(</span><span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"o\">⟨⟨</span><span class=\"n\">a</span><span class=\"o\">⟩⟩)</span>\n</code></pre></div>\n<p>Why does the first snippet use only one <code>⟨⟩</code> notation but the second requires <code>⟨⟨⟩⟩</code> ?<br>\nI think in the first that <code>⟨⟩</code> is used for constructor of the subtype {x // p x}:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>But Nonempty not require <code>⟨⟩</code>? I checked that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">indefiniteDescription</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n                                        <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n  <span class=\"n\">choice</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">px</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"o\">⟨⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">px</span><span class=\"o\">⟩⟩</span>\n</code></pre></div>\n<p>also works.</p>",
        "id": 424373120,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1709363941
    },
    {
        "content": "<p>Is there some implicit coersion define for <code>Nonemtpy α</code> but not <code>Inhabited α</code>?</p>",
        "id": 424374398,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1709364349
    },
    {
        "content": "<p>the definition for <code>Nonemtpy α</code> and <code>Inhabited α</code> is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"kd\">inductive</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span><span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n    <span class=\"n\">default</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>May be some difference of the syntax related to this?</p>",
        "id": 424376568,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1709364882
    },
    {
        "content": "<p>In the second example we have <code>a : A</code> and are proving <code>Nonempty (Inhabited A)</code></p>",
        "id": 424385511,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709367164
    },
    {
        "content": "<p>This is because after applying <code>choice</code> the goal went from <code>Inhabited A</code> to <code>Nonempty (Inhabited A)</code></p>",
        "id": 424385619,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709367193
    },
    {
        "content": "<p>so we need to apply two constructors in a row</p>",
        "id": 424385673,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709367208
    },
    {
        "content": "<p>The proof could alternatively be written as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">inhabited_of_nonempty</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Inhabited</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">choice</span> <span class=\"o\">(</span><span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">⟩)⟩</span>\n</code></pre></div>\n<p>which is to say, unwrap the <code>Inhabited</code> before applying <code>choice</code> so that the goal is <code>Nonempty A</code> instead... but at that point the <code>let</code> is just unwrapping <code>Nonempty</code> and wrapping it back up so you can simplify it to just</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">inhabited_of_nonempty</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Inhabited</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">choice</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 424386248,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709367359
    },
    {
        "content": "<p>Thank you for the alternative proof. It's much more cleaner. I got that there should be two constructor. I am wondering why <code>def z</code> works in the the following snippet where one constructor is omit </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n<span class=\"kd\">def</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩⟩</span>\n<span class=\"kd\">def</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"c1\">-- work too, but why one ⟨⟩ omit?</span>\n<span class=\"kd\">def</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Inhabited</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟨</span><span class=\"n\">x</span><span class=\"o\">⟩⟩</span>\n<span class=\"c1\">-- def w : Nonempty (Inhabited α) := ⟨x⟩ -- not work</span>\n</code></pre></div>",
        "id": 424387559,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1709367694
    },
    {
        "content": "<p>Oh</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n<span class=\"kd\">def</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩⟩</span>\n</code></pre></div>\n<p>both work too. It should relate to soemthing about the subtype</p>",
        "id": 424387905,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1709367780
    },
    {
        "content": "<p>Oh but actually there is some additional magic which my post doesn't explain, in the first snippet. By similar reasoning we would expect that <code>⟨x, px⟩</code> is being used to construct <code>Nonempty {x // p x}</code> and hence we would need double brackets, and indeed <code>⟨⟨x, px⟩⟩</code> works. But the magic is that when you use the anonymous constructor brackets with <code>n</code> arguments when the constructor only has <code>m &lt; n</code>, it uses the first <code>m-1</code> of them for the constructor directly and recursively uses the remaining <code>n-(m-1)</code> as another anonymous constructor for the last argument. This is particularly useful when using <code>⟨ha, hb, hc, hd⟩</code> as shorthand syntax for <code>⟨ha, ⟨hb, ⟨hc, hd⟩⟩⟩</code> when inhabiting <code>a ∧ b ∧ c ∧ d</code> (which is actually <code>a ∧ (b ∧ (c ∧ d))</code>)</p>",
        "id": 424388061,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709367823
    },
    {
        "content": "<p>In this (kind of degenerate) case we get that since <code>⟨x, px⟩</code> has 2 arguments and <code>Nonempty</code> expects 1, we use the first 0 of them for <code>Nonempty</code>, recurse with <code>⟨x, px⟩</code> to construct a <code>{x // p x}</code> and then pass the result as the last argument to <code>Nonempty</code>, i.e. we get <code>⟨⟨x, px⟩⟩</code></p>",
        "id": 424388546,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1709367943
    },
    {
        "content": "<p>Yeah very clean now. Thank you Mario <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 424388863,
        "sender_full_name": "Shanghe Chen",
        "timestamp": 1709368019
    }
]