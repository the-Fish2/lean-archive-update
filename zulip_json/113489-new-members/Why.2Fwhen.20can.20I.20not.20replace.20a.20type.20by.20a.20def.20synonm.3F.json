[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Step</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"n\">Step</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">whatever</span> <span class=\"o\">:</span> <span class=\"n\">Step</span> <span class=\"n\">k</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">SomeStep</span> <span class=\"o\">:=</span> <span class=\"bp\">Σ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">Step</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">History</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"n\">SomeStep</span> <span class=\"c1\">-- Does this make them synonyms?</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">StepList</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">SomeStep</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"c1\">-- When I replace \"List SomeStep'\" with \"History\" ...</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">StepList</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"n\">step</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Step</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">StepList</span> <span class=\"n\">L</span> <span class=\"bp\">→</span> <span class=\"n\">StepList</span> <span class=\"o\">(⟨</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">s</span><span class=\"o\">⟩</span> <span class=\"o\">::</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">rep</span> <span class=\"o\">:</span> <span class=\"o\">(⟨</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">s</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">SomeStep</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">L</span> <span class=\"bp\">→</span> <span class=\"n\">StepList</span> <span class=\"n\">L</span>\n<span class=\"c1\">-- ... then the \"rep\" case triggers errors missing the instance</span>\n<span class=\"c1\">--   Membership ((n : Nat) × Step n) History</span>\n<span class=\"c1\">-- even though I cast it to be a SomeStep.</span>\n</code></pre></div>\n<p>The same happens with using a one field structure instead of the <code>def</code> above:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"kd\">structure</span> <span class=\"n\">History</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">SomeStep</span>\n</code></pre></div>",
        "id": 426344590,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1710337840
    },
    {
        "content": "<p><code>def History := List SomeStep</code> makes them defeq, but typeclass inference won't unfold the definition. Use <code>abbrev</code> if you want typeclass inference to see through it.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"n\">ℕ</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"mi\">37</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"mi\">37</span> <span class=\"c1\">-- succeeds</span>\n</code></pre></div>\n<p>(numerals are powered by typeclass inference, like <code>\\in</code> is).</p>",
        "id": 426449490,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1710377557
    },
    {
        "content": "<p>Ah, I did not know <code>abbrev</code> yet. Perfect, thank you!</p>",
        "id": 426499121,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1710408084
    },
    {
        "content": "<p><code>abbrev</code> is close to (or possibly even equal to) <code>@[inline, reducible]</code>.</p>",
        "id": 426518903,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1710414946
    }
]