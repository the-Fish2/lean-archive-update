[
    {
        "content": "<p>What's a good tactic for resolving a match-with expression like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"n\">Fin</span> <span class=\"mi\">4</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">%</span> <span class=\"mi\">4</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">4</span>\n  <span class=\"bp\">|</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">%</span> <span class=\"mi\">4</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">7</span>\n  <span class=\"bp\">|</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">%</span> <span class=\"mi\">4</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">3</span>\n  <span class=\"bp\">|</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">%</span> <span class=\"mi\">4</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>?<br>\nI know I can state separately that:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span>  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"n\">Fin</span> <span class=\"mi\">4</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">%</span> <span class=\"mi\">4</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">4</span>\n  <span class=\"bp\">|</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">%</span> <span class=\"mi\">4</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">7</span>\n  <span class=\"bp\">|</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">%</span> <span class=\"mi\">4</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">3</span>\n  <span class=\"bp\">|</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">%</span> <span class=\"mi\">4</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n    <span class=\"bp\">=</span> <span class=\"mi\">7</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>and then do <code>rw [this]</code>.<br>\nBut if the match-with appears as a part of a larger statement (as it always does) I am not sure what to do that is not tedious.</p>",
        "id": 421575984,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1707969552
    },
    {
        "content": "<p>I'd expect <code>dsimp only</code> to be able to reduce it</p>",
        "id": 421576202,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1707969688
    },
    {
        "content": "<p>Specifically, in this example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"n\">Fin</span> <span class=\"mi\">4</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">%</span> <span class=\"mi\">4</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">4</span>\n  <span class=\"bp\">|</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">%</span> <span class=\"mi\">4</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">%</span> <span class=\"mi\">4</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b</span>\n  <span class=\"bp\">|</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">%</span> <span class=\"mi\">4</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n    <span class=\"bp\">≠</span>\n    <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"n\">Fin</span> <span class=\"mi\">4</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"mi\">2</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">%</span> <span class=\"mi\">4</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">4</span>\n  <span class=\"bp\">|</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">%</span> <span class=\"mi\">4</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">%</span> <span class=\"mi\">4</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b</span>\n  <span class=\"bp\">|</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">%</span> <span class=\"mi\">4</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>is there a tactic that reduces the problem to <code>a ≠ b</code>?</p>",
        "id": 421577095,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1707970351
    },
    {
        "content": "<p><code>dsimp only</code> seems to work</p>",
        "id": 421577151,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1707970417
    },
    {
        "content": "<p>I get <code>dsimp made no progress</code>.</p>",
        "id": 421577630,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1707970897
    },
    {
        "content": "<p>I'm not sure if something changed in Lean. Here's my version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">Lean.versionString</span>\n<span class=\"c1\">-- \"4.6.0-rc1\"</span>\n</code></pre></div>",
        "id": 421577946,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1707971177
    },
    {
        "content": "<p><a href=\"https://lean.math.hhu.de/#code=import%20Mathlib.Data.Nat.Basic%0Aimport%20Mathlib.Tactic%0A%0Aexample%20(a%20b%20%3A%20%E2%84%95)%20%20%3A%20(match%20(motive%20%3A%3D%20Fin%204%20%E2%86%92%20%E2%84%95)%201%20with%0A%20%20%7C%20%7B%20val%20%3A%3D%200%2C%20isLt%20%3A%3D%20(_%20%3A%200%20%25%204%20%3C%204)%20%7D%20%3D%3E%204%0A%20%20%7C%20%7B%20val%20%3A%3D%201%2C%20isLt%20%3A%3D%20(_%20%3A%201%20%25%204%20%3C%204)%20%7D%20%3D%3E%20a%0A%20%20%7C%20%7B%20val%20%3A%3D%202%2C%20isLt%20%3A%3D%20(_%20%3A%202%20%25%204%20%3C%204)%20%7D%20%3D%3E%20b%0A%20%20%7C%20%7B%20val%20%3A%3D%203%2C%20isLt%20%3A%3D%20(_%20%3A%203%20%25%204%20%3C%204)%20%7D%20%3D%3E%202)%0A%20%20%20%20%E2%89%A0%0A%20%20%20%20(match%20(motive%20%3A%3D%20Fin%204%20%E2%86%92%20%E2%84%95)%202%20with%0A%20%20%7C%20%7B%20val%20%3A%3D%200%2C%20isLt%20%3A%3D%20(_%20%3A%200%20%25%204%20%3C%204)%20%7D%20%3D%3E%204%0A%20%20%7C%20%7B%20val%20%3A%3D%201%2C%20isLt%20%3A%3D%20(_%20%3A%201%20%25%204%20%3C%204)%20%7D%20%3D%3E%20a%0A%20%20%7C%20%7B%20val%20%3A%3D%202%2C%20isLt%20%3A%3D%20(_%20%3A%202%20%25%204%20%3C%204)%20%7D%20%3D%3E%20b%0A%20%20%7C%20%7B%20val%20%3A%3D%203%2C%20isLt%20%3A%3D%20(_%20%3A%203%20%25%204%20%3C%204)%20%7D%20%3D%3E%202)%20%3A%3D%0A%20%20by%20dsimp%20only%0A%0A%23eval%20Lean.versionString%0A\">Here</a>'s an online version, with the same Lean version as you.</p>",
        "id": 421578380,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1707971538
    },
    {
        "content": "<p><code>show a \\ne b</code> works, but that's not ideal in general</p>",
        "id": 421581247,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1707973403
    },
    {
        "content": "<p>Thanks, the <code>show</code> idea helps a lot. But yeah, in general don't want to spend time figuring out what it is you want to <code>show</code>.</p>",
        "id": 421587813,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1707977284
    },
    {
        "content": "<p>I was not able to the the <code>No progress</code> output, but I did find different outputs, with <code>Mathlib</code>'s being sub-optimal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"c1\">-- replaced `ℕ` with `Nat` to get it to work with no imports</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"n\">Fin</span> <span class=\"mi\">4</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">%</span> <span class=\"mi\">4</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">4</span>\n  <span class=\"bp\">|</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">%</span> <span class=\"mi\">4</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">%</span> <span class=\"mi\">4</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b</span>\n  <span class=\"bp\">|</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">%</span> <span class=\"mi\">4</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n    <span class=\"bp\">≠</span>\n    <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"n\">Fin</span> <span class=\"mi\">4</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"mi\">2</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">%</span> <span class=\"mi\">4</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">4</span>\n  <span class=\"bp\">|</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">%</span> <span class=\"mi\">4</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">%</span> <span class=\"mi\">4</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b</span>\n  <span class=\"bp\">|</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">%</span> <span class=\"mi\">4</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">dsimp</span>\n<span class=\"c1\">-- with no imports</span>\n<span class=\"c1\">-- ⊢ ¬a = b</span>\n\n<span class=\"c1\">-- with `import Mathlib`</span>\n<span class=\"c1\">-- ⊢ ¬(match 1 with</span>\n<span class=\"c1\">--     | { val := 0, isLt := isLt } =&gt; 4</span>\n<span class=\"c1\">--     | { val := 1, isLt := isLt } =&gt; a</span>\n<span class=\"c1\">--     | { val := 2, isLt := isLt } =&gt; b</span>\n<span class=\"c1\">--     | { val := 3, isLt := isLt } =&gt; 2) =</span>\n<span class=\"c1\">--     match 2 with</span>\n<span class=\"c1\">--     | { val := 0, isLt := isLt } =&gt; 4</span>\n<span class=\"c1\">--     | { val := 1, isLt := isLt } =&gt; a</span>\n<span class=\"c1\">--     | { val := 2, isLt := isLt } =&gt; b</span>\n<span class=\"c1\">--     | { val := 3, isLt := isLt } =&gt; 2</span>\n</code></pre></div>",
        "id": 421611099,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707988640
    },
    {
        "content": "<p>You could \"manually\" reduce the two sides of the equality using <code>conv</code> and <code>whnf</code> as such:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"n\">Fin</span> <span class=\"mi\">4</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">%</span> <span class=\"mi\">4</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">4</span>\n  <span class=\"bp\">|</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">%</span> <span class=\"mi\">4</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">%</span> <span class=\"mi\">4</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b</span>\n  <span class=\"bp\">|</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">%</span> <span class=\"mi\">4</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n    <span class=\"bp\">≠</span>\n    <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"n\">Fin</span> <span class=\"mi\">4</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"mi\">2</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">%</span> <span class=\"mi\">4</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">4</span>\n  <span class=\"bp\">|</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">%</span> <span class=\"mi\">4</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">%</span> <span class=\"mi\">4</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b</span>\n  <span class=\"bp\">|</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">%</span> <span class=\"mi\">4</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n    <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">lhs</span>\n            <span class=\"n\">whnf</span>\n    <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rhs</span>\n            <span class=\"n\">whnf</span>\n <span class=\"c1\">-- ⊢ a ≠ b</span>\n</code></pre></div>",
        "id": 421626987,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1707993980
    },
    {
        "content": "<p>It appears to be <code>import Mathlib.Data.Fin.Basic</code> that provides an instance that can't be reduced.</p>",
        "id": 421696197,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708015237
    },
    {
        "content": "<p>It must be from that module, since if you only import that module's imports, then <code>dsimp only</code> works again.</p>\n<p>Here are its imports:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.NeZero</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Data.Fin.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.RelIso.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Order.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Hom.Set</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Data.Fin.Basic</span>\n</code></pre></div>",
        "id": 421696322,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708015282
    },
    {
        "content": "<p><code>attribute [-instance] Fin.instOfNatFin</code> causes it to elaborate in a reducible way. In my earlier tests I was on a slightly older mathlib with the same toolchain, so something somewhere seems to have changed in the meantime. This particular instance doesn't seem to have changed in awhile though, so I'm not sure.</p>",
        "id": 421697114,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708015488
    }
]