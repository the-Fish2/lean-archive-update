[
    {
        "content": "<p>my one-file minimal reproducer is actually fine </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">newt</span> <span class=\"n\">where</span>\n  <span class=\"n\">value</span> <span class=\"o\">:</span> <span class=\"n\">Int</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Hashable</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">t</span> <span class=\"n\">where</span>\n  <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">newt</span>\n  <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Int</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Hashable</span> <span class=\"n\">t</span> <span class=\"n\">where</span>\n  <span class=\"n\">hash</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">hash</span> <span class=\"n\">t.n</span> <span class=\"bp\">+</span> <span class=\"n\">hash</span> <span class=\"n\">t.k</span>\n</code></pre></div>\n<p>but when I define <code>newt</code> in another file then import it, it doesn't allow <code>newt</code> to be hashable.</p>",
        "id": 430652486,
        "sender_full_name": "Quinn",
        "timestamp": 1712000711
    },
    {
        "content": "<p>I recall in coq there's something like importing particular instances when you import structures, types, inductives. is there something similar in lean4?</p>",
        "id": 430654056,
        "sender_full_name": "Quinn",
        "timestamp": 1712001306
    },
    {
        "content": "<p>No, if an instance is defined in a file and you import that file yo uget the instance as well. What you are describing does definitely work a thousand times everywhere else. Can you maybe provide a project, let it be as a git repo, tar/zip archive or something else for us to take a look at?</p>",
        "id": 430657613,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1712002842
    },
    {
        "content": "<ul>\n<li><a href=\"https://github.com/cspr-rad/ltl-actus/blob/master/lean/LtlActus/Types.lean\">https://github.com/cspr-rad/ltl-actus/blob/master/lean/LtlActus/Types.lean</a> </li>\n<li><a href=\"https://github.com/cspr-rad/ltl-actus/blob/master/lean/LtlActus/Contracts.lean\">https://github.com/cspr-rad/ltl-actus/blob/master/lean/LtlActus/Contracts.lean</a></li>\n</ul>\n<p>In <code>Contracts.lean</code>, <code>Swap</code> is working (cuz it doesn't use newtypes) and <code>Pam</code> is broken</p>",
        "id": 430658421,
        "sender_full_name": "Quinn",
        "timestamp": 1712003190
    },
    {
        "content": "<p>btw, same problem when I tried it with type aliases rather than newtypes</p>",
        "id": 430660162,
        "sender_full_name": "Quinn",
        "timestamp": 1712003926
    },
    {
        "content": "<p>This was a false negative. <code>lean4-mode</code> in emacs had been relying on a previous version of the dependency file that was being imported. I still don't know how to make sure <code>lean4-mode</code> refreshes all the files in the session, but that's a different issue</p>",
        "id": 431343694,
        "sender_full_name": "Quinn",
        "timestamp": 1712245347
    },
    {
        "content": "<p>(<code>C-c C-d</code>)</p>",
        "id": 431346395,
        "sender_full_name": "Quinn",
        "timestamp": 1712246080
    }
]