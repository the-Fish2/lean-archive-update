[
    {
        "content": "<p>this is from some julia code in <a href=\"https://github.com/chakravala/Grassmann.jl/commit/280111c8d5826b6b8010b58e1ce0ea8329e67b86\">https://github.com/chakravala/Grassmann.jl/commit/280111c8d5826b6b8010b58e1ce0ea8329e67b86</a></p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">op</span><span class=\"w\"> </span><span class=\"o\">∈</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"ss\">:acoth</span><span class=\"p\">,</span><span class=\"ss\">:acot</span><span class=\"p\">,</span><span class=\"ss\">:sinc</span><span class=\"p\">,</span><span class=\"ss\">:cosc</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"nd\">@eval</span><span class=\"w\"> </span><span class=\"nd\">@inline</span><span class=\"w\"> </span><span class=\"n\">Base</span><span class=\"o\">.$</span><span class=\"n\">op</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Infinity</span><span class=\"p\">{</span><span class=\"kt\">V</span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"kt\">V</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Zero</span><span class=\"p\">(</span><span class=\"n\">V</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>Does lean have a way to generate whats basically <code>def acoth infinity := 0</code>,  besides writing them out?</p>",
        "id": 431263291,
        "sender_full_name": "Alok Singh",
        "timestamp": 1712221801
    },
    {
        "content": "<p>Sure:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">run_cmd</span> <span class=\"k\">do</span>\n  <span class=\"n\">for</span> <span class=\"n\">name</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">hello</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">world</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"n\">Lean.Elab.Command.elabCommandTopLevel</span> <span class=\"bp\">&lt;|</span>\n      <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">Lean.mkIdent</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">hello</span>\n<span class=\"k\">#check</span> <span class=\"n\">world</span>\n</code></pre></div>",
        "id": 431265555,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1712222431
    }
]