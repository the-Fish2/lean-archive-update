[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Perm.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Perm.Fin</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Equiv</span> <span class=\"n\">Perm</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">RubiksSuperGroup</span>\n\n  <span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Repr</span> <span class=\"o\">(</span><span class=\"n\">Perm</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n    <span class=\"o\">⟨</span><span class=\"n\">reprPrec</span> <span class=\"bp\">∘</span> <span class=\"n\">Equiv.toFun</span><span class=\"o\">⟩</span>\n\n  <span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"o\">(</span><span class=\"n\">Perm</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">mk.injEq</span> <span class=\"n\">a.toFun</span> <span class=\"n\">a.invFun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">b.toFun</span> <span class=\"n\">b.invFun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">▸</span> <span class=\"n\">inferInstance</span>\n\n  <span class=\"c\">/-</span><span class=\"cm\"> This PieceState structure is used to represent the entire state of both corner pieces and edge pieces.-/</span>\n  <span class=\"kd\">structure</span> <span class=\"n\">PieceState</span> <span class=\"o\">(</span><span class=\"n\">pieces</span> <span class=\"n\">orientations</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n    <span class=\"n\">permute</span> <span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">pieces</span><span class=\"o\">)</span>\n    <span class=\"n\">orient</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">pieces</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"n\">orientations</span>\n    <span class=\"n\">deriving</span> <span class=\"n\">Repr</span><span class=\"o\">,</span> <span class=\"n\">DecidableEq</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">ps_mul</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">PieceState</span> <span class=\"n\">p</span> <span class=\"n\">o</span> <span class=\"bp\">→</span> <span class=\"n\">PieceState</span> <span class=\"n\">p</span> <span class=\"n\">o</span> <span class=\"bp\">→</span> <span class=\"n\">PieceState</span> <span class=\"n\">p</span> <span class=\"n\">o</span> <span class=\"o\">:=</span>\n    <span class=\"k\">fun</span> <span class=\"n\">a1</span> <span class=\"n\">a2</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n      <span class=\"n\">permute</span> <span class=\"o\">:=</span> <span class=\"n\">a1.permute</span> <span class=\"bp\">*</span> <span class=\"n\">a2.permute</span>\n      <span class=\"n\">orient</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a2.orient</span> <span class=\"bp\">∘</span> <span class=\"n\">a1.permute.invFun</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">a1.orient</span>\n    <span class=\"o\">}</span>\n\n  <span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n  <span class=\"kd\">lemma</span> <span class=\"n\">ps_mul_assoc</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">PieceState</span> <span class=\"n\">p</span> <span class=\"n\">o</span><span class=\"o\">),</span>\n  <span class=\"n\">ps_mul</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">ps_mul</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ps_mul</span> <span class=\"o\">(</span><span class=\"n\">ps_mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ps_mul</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">And.intro</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Perm.mul_def</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Equiv.trans_assoc</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">add_assoc</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_left_inj</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"n\">rfl</span>\n    <span class=\"n\">done</span>\n\n  <span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n  <span class=\"kd\">lemma</span> <span class=\"n\">ps_one_mul</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">PieceState</span> <span class=\"n\">p</span> <span class=\"n\">o</span><span class=\"o\">),</span>\n  <span class=\"n\">ps_mul</span> <span class=\"o\">{</span><span class=\"n\">permute</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">orient</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">a</span>  <span class=\"bp\">=</span>  <span class=\"n\">a</span>\n  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ps_mul</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">invFun_as_coe</span><span class=\"o\">,</span> <span class=\"n\">one_symm</span><span class=\"o\">,</span> <span class=\"n\">coe_one</span><span class=\"o\">,</span> <span class=\"n\">Function.comp.right_id</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">]</span>\n    <span class=\"n\">done</span>\n\n  <span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n  <span class=\"kd\">lemma</span> <span class=\"n\">ps_mul_one</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">PieceState</span> <span class=\"n\">p</span> <span class=\"n\">o</span><span class=\"o\">),</span>\n  <span class=\"n\">ps_mul</span> <span class=\"n\">a</span> <span class=\"o\">{</span><span class=\"n\">permute</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">orient</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ps_mul</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">invFun_as_coe</span><span class=\"o\">,</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">zero_comp</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">]</span>\n    <span class=\"n\">done</span>\n\n\n  <span class=\"kd\">def</span> <span class=\"n\">ps_inv</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">}</span>\n  <span class=\"o\">:</span> <span class=\"n\">PieceState</span> <span class=\"n\">p</span> <span class=\"n\">o</span> <span class=\"bp\">→</span> <span class=\"n\">PieceState</span> <span class=\"n\">p</span> <span class=\"n\">o</span>\n  <span class=\"o\">:=</span>\n    <span class=\"k\">fun</span> <span class=\"n\">ps</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">permute</span> <span class=\"o\">:=</span> <span class=\"n\">ps.permute</span><span class=\"bp\">⁻¹</span>\n      <span class=\"n\">orient</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">ps.orient</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"n\">ps.permute</span>\n    <span class=\"o\">}</span>\n\n  <span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n  <span class=\"kd\">lemma</span> <span class=\"n\">ps_mul_left_inv</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">PieceState</span> <span class=\"n\">p</span> <span class=\"n\">o</span><span class=\"o\">),</span>\n  <span class=\"n\">ps_mul</span> <span class=\"o\">(</span><span class=\"n\">ps_inv</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">permute</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">orient</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ps_inv</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ps_mul</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_left_inv</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">invFun_as_coe</span><span class=\"o\">,</span> <span class=\"n\">PieceState.mk.injEq</span><span class=\"o\">,</span> <span class=\"n\">true_and</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">neg_eq_iff_add_eq_zero.mp</span> <span class=\"n\">rfl</span>\n\n  <span class=\"c\">/-</span><span class=\"cm\"> This sets up a group structure for all Rubik's cube positions</span>\n<span class=\"cm\">  (including invalid ones that couldn't be reached from a solved state without removing pieces from the cube,</span>\n<span class=\"cm\">  twisting corners, etc.). -/</span>\n  <span class=\"kd\">instance</span> <span class=\"n\">PieceGroup</span> <span class=\"o\">(</span><span class=\"n\">pieces</span> <span class=\"n\">orientations</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Group</span> <span class=\"o\">(</span><span class=\"n\">PieceState</span> <span class=\"n\">pieces</span> <span class=\"n\">orientations</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"n\">ps_mul</span>\n    <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"c1\">-- ps_mul_assoc</span>\n    <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">permute</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">orient</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n    <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"n\">ps_one_mul</span>\n    <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"n\">ps_mul_one</span>\n    <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"n\">ps_inv</span>\n    <span class=\"n\">mul_left_inv</span> <span class=\"o\">:=</span> <span class=\"n\">ps_mul_left_inv</span>\n  <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">RubiksSuperGroup</span>\n</code></pre></div>",
        "id": 422357922,
        "sender_full_name": "chenjulang",
        "timestamp": 1708412456
    },
    {
        "content": "<p>Check the \"sorry\", the \"ps_mul_assoc\" of  the operation \"ps_mul\" is already proved above.<br>\nSo why can't i use \"ps_mul_assoc\" to prove this ?</p>",
        "id": 422358253,
        "sender_full_name": "chenjulang",
        "timestamp": 1708412655
    },
    {
        "content": "<p>The problem is like this:<br>\n<a href=\"/user_uploads/3121/U7phtj8vrFu2aCBUceiWyQWl/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/U7phtj8vrFu2aCBUceiWyQWl/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/U7phtj8vrFu2aCBUceiWyQWl/image.png\"></a></div>",
        "id": 422358311,
        "sender_full_name": "chenjulang",
        "timestamp": 1708412701
    },
    {
        "content": "<p>Do I need to define a \"*\" notion for \"ps_mul\" somewhere?</p>",
        "id": 422358369,
        "sender_full_name": "chenjulang",
        "timestamp": 1708412759
    },
    {
        "content": "<p>Your associativity lemma is \"backwards\", <code>a * (b * c)</code> corresponds to <code>ps_mul a (ps_mul b c)</code></p>",
        "id": 422359897,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708413723
    },
    {
        "content": "<p>Also, please paste the error message itself, not a screenshot of it</p>",
        "id": 422359956,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708413749
    },
    {
        "content": "<p>OK, error message:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">RubiksCubeFunc.lean</span><span class=\"o\">:</span><span class=\"mi\">132</span><span class=\"o\">:</span><span class=\"mi\">17</span>\n<span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">ps_mul_assoc</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">PieceState</span> <span class=\"bp\">?</span><span class=\"n\">m.11963</span> <span class=\"bp\">?</span><span class=\"n\">m.11964</span><span class=\"o\">),</span> <span class=\"n\">ps_mul</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">ps_mul</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ps_mul</span> <span class=\"o\">(</span><span class=\"n\">ps_mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">PieceState</span> <span class=\"n\">pieces</span> <span class=\"n\">orientations</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>",
        "id": 422361325,
        "sender_full_name": "chenjulang",
        "timestamp": 1708414515
    },
    {
        "content": "<p>I you write out the signature of <code>ps_mul_assoc</code> with notation, you get <code>(a * (b * c)) = ((a * b) * c)</code></p>",
        "id": 422361681,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1708414720
    },
    {
        "content": "<p>But how? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>  I dont know how to write the signature</p>",
        "id": 422361753,
        "sender_full_name": "chenjulang",
        "timestamp": 1708414757
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>  something like this ? But it seems not working :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n  <span class=\"kd\">lemma</span> <span class=\"n\">PieceState.mul_def</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">PieceState</span> <span class=\"n\">p</span> <span class=\"n\">o</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">ps_mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 422362172,
        "sender_full_name": "chenjulang",
        "timestamp": 1708415010
    },
    {
        "content": "<p>Thanks for the text; now that I can copy paste it, your problem is that </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>is the same as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ps_mul</span> <span class=\"o\">(</span><span class=\"n\">ps_mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">ps_mul</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">ps_mul</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but your lemma says</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ps_mul</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">ps_mul</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ps_mul</span> <span class=\"o\">(</span><span class=\"n\">ps_mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span>\n</code></pre></div>",
        "id": 422362464,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708415158
    },
    {
        "content": "<p>Oh</p>",
        "id": 422362545,
        "sender_full_name": "chenjulang",
        "timestamp": 1708415188
    },
    {
        "content": "<p>I'll try</p>",
        "id": 422362596,
        "sender_full_name": "chenjulang",
        "timestamp": 1708415221
    },
    {
        "content": "<p>But Ruben makes a good point; things would be much more pleasant for you if you replaced</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">def</span> <span class=\"n\">ps_mul</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">PieceState</span> <span class=\"n\">p</span> <span class=\"n\">o</span> <span class=\"bp\">→</span> <span class=\"n\">PieceState</span> <span class=\"n\">p</span> <span class=\"n\">o</span> <span class=\"bp\">→</span> <span class=\"n\">PieceState</span> <span class=\"n\">p</span> <span class=\"n\">o</span> <span class=\"o\">:=</span>\n    <span class=\"k\">fun</span> <span class=\"n\">a1</span> <span class=\"n\">a2</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n      <span class=\"n\">permute</span> <span class=\"o\">:=</span> <span class=\"n\">a1.permute</span> <span class=\"bp\">*</span> <span class=\"n\">a2.permute</span>\n      <span class=\"n\">orient</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a2.orient</span> <span class=\"bp\">∘</span> <span class=\"n\">a1.permute.invFun</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">a1.orient</span>\n    <span class=\"o\">}</span>\n</code></pre></div>\n<p>with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"o\">(</span><span class=\"n\">PieceState</span> <span class=\"n\">p</span> <span class=\"n\">o</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n    <span class=\"n\">mul</span> <span class=\"n\">a1</span> <span class=\"n\">a2</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n      <span class=\"n\">permute</span> <span class=\"o\">:=</span> <span class=\"n\">a1.permute</span> <span class=\"bp\">*</span> <span class=\"n\">a2.permute</span>\n      <span class=\"n\">orient</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a2.orient</span> <span class=\"bp\">∘</span> <span class=\"n\">a1.permute.invFun</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">a1.orient</span>\n    <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 422362620,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708415237
    },
    {
        "content": "<p>Then <code>ps_mul</code> never exists and you can just write <code>*</code> everywhere</p>",
        "id": 422362642,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708415255
    },
    {
        "content": "<p>Get it!</p>",
        "id": 422362758,
        "sender_full_name": "chenjulang",
        "timestamp": 1708415318
    },
    {
        "content": "<p>You'll find you also want to add</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">permute_mul</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a1</span> <span class=\"n\">a2</span> <span class=\"o\">:</span> <span class=\"n\">PieceState</span> <span class=\"n\">p</span> <span class=\"n\">o</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a1</span> <span class=\"bp\">*</span> <span class=\"n\">a2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">permute</span> <span class=\"bp\">=</span> <span class=\"n\">a1.permute</span> <span class=\"bp\">*</span> <span class=\"n\">a2.permute</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>and similarly for <code>orient</code></p>",
        "id": 422362843,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708415378
    },
    {
        "content": "<p>Great!</p>",
        "id": 422362936,
        "sender_full_name": "chenjulang",
        "timestamp": 1708415417
    },
    {
        "content": "<p>Finally, things will be easier for you if you put <code>@[ext]</code> before <code>PieceState</code>, as then you can start every proof with <code>ext &lt;;&gt; dsimp</code> and the <code>{}</code>s will all go away</p>",
        "id": 422362958,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708415434
    },
    {
        "content": "<p>Thanks a lot</p>",
        "id": 422363053,
        "sender_full_name": "chenjulang",
        "timestamp": 1708415494
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"665035\">chenjulang</span> has marked this topic as resolved.</p>",
        "id": 422364137,
        "sender_full_name": "Notification Bot",
        "timestamp": 1708416010
    }
]