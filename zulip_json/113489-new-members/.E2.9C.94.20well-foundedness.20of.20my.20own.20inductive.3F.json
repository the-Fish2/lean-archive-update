[
    {
        "content": "<p>How can I show that an inductive I defined myself is well-founded (i.e. values may not contain themselves)? Is that even true in general? (I know that in Haskell it would not be true...)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">mystuff</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"o\">:</span> <span class=\"n\">mystuff</span>\n<span class=\"bp\">|</span> <span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">mystuff</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">mystuff</span>\n<span class=\"bp\">|</span> <span class=\"n\">otherOp</span> <span class=\"o\">:</span> <span class=\"n\">mystuff</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">mystuff</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">mystuff</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">claim</span> <span class=\"o\">{</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">mystuff</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n_is_nss</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ⊢ false</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 273616965,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1646129701
    },
    {
        "content": "<p>Do it by induction on <code>n</code>.</p>",
        "id": 273617365,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646129903
    },
    {
        "content": "<p>If you know how to prove <code>n ≠ succ n</code>, then you should be able to do this.</p>",
        "id": 273617398,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646129930
    },
    {
        "content": "<p>equation compiler can do most of the work for you:)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">claim</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">},</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">claim</span> <span class=\"bp\">$</span> <span class=\"n\">op.inj</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 273617682,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1646130053
    },
    {
        "content": "<p>If you are interested in what is going on under the hood you can read <a href=\"https://xenaproject.wordpress.com/2018/03/24/no-confusion-over-no_confusion/\">this</a>. In practice constructors are always injective and this is essentially an axiom.</p>",
        "id": 273618333,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1646130325
    },
    {
        "content": "<p>Nice, many thanks to all three of you :)</p>",
        "id": 273619517,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1646130911
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"422703\">Malvin Gattinger</span> has marked this topic as resolved.</p>",
        "id": 273619527,
        "sender_full_name": "Notification Bot",
        "timestamp": 1646130915
    },
    {
        "content": "<p>Lean 4's equation compiler recently got the ability to do acyclicity proofs on its own, so the equivalent proof in lean 4 is just</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">claim</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">},</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span><span class=\"bp\">.</span>\n</code></pre></div>",
        "id": 273723984,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646175256
    },
    {
        "content": "<p>Sorry to resurrect this after two years, but now that I am also using Lean 4, can someone tell me what the <code>fun.</code> actually does / why it works? Is it a function that takes no arguments?</p>",
        "id": 412994797,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1705336775
    },
    {
        "content": "<p>In particular, it seems to rely on what is currently imported - is this a bug?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.BoundedOrder</span> <span class=\"c1\">-- if we comment out this import line ...</span>\n\n<span class=\"kd\">mutual</span>\n  <span class=\"kd\">inductive</span> <span class=\"n\">Formula</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n    <span class=\"bp\">|</span> <span class=\"n\">bottom</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span>\n    <span class=\"bp\">|</span> <span class=\"n\">box</span> <span class=\"o\">:</span> <span class=\"n\">Program</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"kd\">inductive</span> <span class=\"n\">Program</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n    <span class=\"bp\">|</span> <span class=\"n\">atom_prog</span> <span class=\"o\">:</span> <span class=\"n\">Char</span> <span class=\"bp\">→</span> <span class=\"n\">Program</span>\n    <span class=\"bp\">|</span> <span class=\"n\">sequence</span> <span class=\"o\">:</span> <span class=\"n\">Program</span> <span class=\"bp\">→</span> <span class=\"n\">Program</span> <span class=\"bp\">→</span> <span class=\"n\">Program</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- ... then the following breaks with a syntax error at the end of the file:</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ProgramSequenceNotSelfContaining</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">:</span> <span class=\"n\">Program</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">Program.sequence</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span><span class=\"bp\">.</span>\n</code></pre></div>",
        "id": 413001088,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1705338411
    },
    {
        "content": "<p>It's defined in <code>Std.Tactic.NoMatch</code>, so if you don't import that module then it isn't defined. The comments in the source file for that module explain things pretty well. Loosely speaking, it represents a function (with any number of parameters) for which it isn't possible to construct an argument list that satisfies all the parameters.</p>",
        "id": 413013738,
        "sender_full_name": "Richard Copley",
        "timestamp": 1705344471
    },
    {
        "content": "<p>Nice. Is there a way to limit what the equation compiler will use from the context? The <code>fun.</code> breaks for example when <code>Mathlib.Data.Finset.Basic</code> (or rather one of its dependencies I guess) is imported.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.NoMatch</span> <span class=\"c1\">-- Needed for \"fun.\" to work at all.</span>\n\n<span class=\"c1\">-- import Mathlib.Data.Finset.Basic -- BUT if we uncomment this ...</span>\n\n<span class=\"kd\">mutual</span>\n  <span class=\"kd\">inductive</span> <span class=\"n\">Formula</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n    <span class=\"bp\">|</span> <span class=\"n\">bottom</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span>\n    <span class=\"bp\">|</span> <span class=\"n\">atom_prop</span> <span class=\"o\">:</span> <span class=\"n\">Char</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n    <span class=\"bp\">|</span> <span class=\"n\">box</span> <span class=\"o\">:</span> <span class=\"n\">Program</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"kd\">inductive</span> <span class=\"n\">Program</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n    <span class=\"bp\">|</span> <span class=\"n\">atom_prog</span> <span class=\"o\">:</span> <span class=\"n\">Char</span> <span class=\"bp\">→</span> <span class=\"n\">Program</span>\n    <span class=\"bp\">|</span> <span class=\"n\">sequence</span> <span class=\"o\">:</span> <span class=\"n\">Program</span> <span class=\"bp\">→</span> <span class=\"n\">Program</span> <span class=\"bp\">→</span> <span class=\"n\">Program</span>\n    <span class=\"bp\">|</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Program</span>\n<span class=\"kd\">end</span>\n<span class=\"n\">deriving</span> <span class=\"kd\">instance</span> <span class=\"n\">Repr</span><span class=\"o\">,</span><span class=\"n\">DecidableEq</span> <span class=\"n\">for</span> <span class=\"n\">Formula</span>\n<span class=\"n\">deriving</span> <span class=\"kd\">instance</span> <span class=\"n\">Repr</span><span class=\"o\">,</span><span class=\"n\">DecidableEq</span> <span class=\"n\">for</span> <span class=\"n\">Program</span>\n\n<span class=\"kd\">infixl</span><span class=\"o\">:</span><span class=\"mi\">33</span> <span class=\"s2\">\";'\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Program.sequence</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ProgramNotSelfContaining</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">:</span> <span class=\"n\">Program</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">;'</span> <span class=\"n\">q</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span><span class=\"bp\">.</span> <span class=\"c1\">-- ... this still works ...</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">DagFormula</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">dag</span> <span class=\"o\">:</span> <span class=\"n\">Program</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">DagFormula</span> <span class=\"c1\">-- ⌈α†⌉φ</span>\n  <span class=\"bp\">|</span> <span class=\"n\">box</span> <span class=\"o\">:</span> <span class=\"n\">Program</span> <span class=\"bp\">→</span> <span class=\"n\">DagFormula</span> <span class=\"bp\">→</span> <span class=\"n\">DagFormula</span>  <span class=\"c1\">-- ⌈α⌉ψ</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span><span class=\"o\">,</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"s2\">\"⌈\"</span> <span class=\"n\">α</span> <span class=\"s2\">\"⌉\"</span> <span class=\"n\">ψ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">DagFormula.box</span> <span class=\"n\">α</span> <span class=\"n\">ψ</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">formulaNotSelfContaining</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">⌈</span><span class=\"n\">β</span><span class=\"bp\">⌉</span><span class=\"o\">(</span><span class=\"n\">ψ</span> <span class=\"o\">:</span> <span class=\"n\">DagFormula</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">ψ</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span><span class=\"bp\">.</span> <span class=\"c1\">-- but this one breaks with \"missing cases\"</span>\n</code></pre></div>",
        "id": 413107514,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1705395534
    },
    {
        "content": "<p>This reminds me also of <a href=\"#narrow/stream/113489-new-members/topic/importing.20finset.20breaks.20deriving.20DecidableEq/near/398276322\">this</a> problem where importing finsets broke <code>deriving DecidableEq</code>.</p>",
        "id": 413108127,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1705395731
    },
    {
        "content": "<p>Pretty weird... I don't understand it, but apparently a <code>LinearOrderedCommSemiring ℕ</code> instance can break your use of <code>fun.</code></p>\n<p>Kind of baffled as to what's going on here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.NoMatch</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Order.Ring.Canonical</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n\n<span class=\"kd\">mutual</span>\n  <span class=\"kd\">inductive</span> <span class=\"n\">Formula</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n    <span class=\"bp\">|</span> <span class=\"n\">bottom</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span>\n    <span class=\"bp\">|</span> <span class=\"n\">atom_prop</span> <span class=\"o\">:</span> <span class=\"n\">Char</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n    <span class=\"bp\">|</span> <span class=\"n\">box</span> <span class=\"o\">:</span> <span class=\"n\">Program</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"kd\">inductive</span> <span class=\"n\">Program</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n    <span class=\"bp\">|</span> <span class=\"n\">atom_prog</span> <span class=\"o\">:</span> <span class=\"n\">Char</span> <span class=\"bp\">→</span> <span class=\"n\">Program</span>\n    <span class=\"bp\">|</span> <span class=\"n\">sequence</span> <span class=\"o\">:</span> <span class=\"n\">Program</span> <span class=\"bp\">→</span> <span class=\"n\">Program</span> <span class=\"bp\">→</span> <span class=\"n\">Program</span>\n    <span class=\"bp\">|</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Program</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">infixl</span><span class=\"o\">:</span><span class=\"mi\">33</span> <span class=\"s2\">\";'\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Program.sequence</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ProgramNotSelfContaining</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">:</span> <span class=\"n\">Program</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">;'</span> <span class=\"n\">q</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span><span class=\"bp\">.</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">DagFormula</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">dag</span> <span class=\"o\">:</span> <span class=\"n\">Program</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">DagFormula</span> <span class=\"c1\">-- ⌈α†⌉φ</span>\n  <span class=\"bp\">|</span> <span class=\"n\">box</span> <span class=\"o\">:</span> <span class=\"n\">Program</span> <span class=\"bp\">→</span> <span class=\"n\">DagFormula</span> <span class=\"bp\">→</span> <span class=\"n\">DagFormula</span>  <span class=\"c1\">-- ⌈α⌉ψ</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"s2\">\"⌈\"</span> <span class=\"n\">α</span> <span class=\"s2\">\"⌉\"</span> <span class=\"n\">ψ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">DagFormula.box</span> <span class=\"n\">α</span> <span class=\"n\">ψ</span>\n\n<span class=\"c1\">-- if you uncomment this...</span>\n\n<span class=\"c1\">-- instance linearOrderedCommSemiring : LinearOrderedCommSemiring ℕ :=</span>\n<span class=\"c1\">--   { Nat.commSemiring, Nat.linearOrder with</span>\n<span class=\"c1\">--     lt := Nat.lt, add_le_add_left := @Nat.add_le_add_left,</span>\n<span class=\"c1\">--     le_of_add_le_add_left := @Nat.le_of_add_le_add_left,</span>\n<span class=\"c1\">--     zero_le_one := Nat.le_of_lt (Nat.zero_lt_succ 0),</span>\n<span class=\"c1\">--     mul_lt_mul_of_pos_left := @Nat.mul_lt_mul_of_pos_left,</span>\n<span class=\"c1\">--     mul_lt_mul_of_pos_right := @Nat.mul_lt_mul_of_pos_right,</span>\n<span class=\"c1\">--     exists_pair_ne := ⟨0, 1, ne_of_lt Nat.zero_lt_one⟩ }</span>\n\n<span class=\"c1\">-- then this breaks...</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">formulaNotSelfContaining</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">⌈</span><span class=\"n\">β</span><span class=\"bp\">⌉</span><span class=\"o\">(</span><span class=\"n\">ψ</span> <span class=\"o\">:</span> <span class=\"n\">DagFormula</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">ψ</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span><span class=\"bp\">.</span>\n</code></pre></div>",
        "id": 415396764,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1705453244
    },
    {
        "content": "<p>Wow. Is there a way to show what the equation compiler does when we write <code>fun.</code> or <code>fun a =&gt; nomatch a</code>? I also tried <code>intro a; cases a</code> which also works iff the above instance is commented out. But when it breaks the error is <code>dependent elimination failed, failed to solve equation ψ = ⌈β⌉ψ</code>.</p>",
        "id": 415971836,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1705478826
    },
    {
        "content": "<p>I minimised a bit:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Order.Monoid.Defs</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">DagFormula</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">box</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">→</span> <span class=\"n\">DagFormula</span> <span class=\"bp\">→</span> <span class=\"n\">DagFormula</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OrderedCancelAddCommMonoid</span> <span class=\"n\">ℕ</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.add</span> <span class=\"c1\">-- sorry either of these fields to remove the error below</span>\n  <span class=\"n\">lt</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.lt</span> <span class=\"c1\">-- sorry either of these fields to remove the error below</span>\n  <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">zero_add</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">add_zero</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">nsmul</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">nsmul_zero</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">nsmul_succ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">add_comm</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">le_refl</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">le_trans</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">lt_iff_le_not_le</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">le_antisymm</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">add_le_add_left</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">le_of_add_le_add_left</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">formulaNotSelfContaining</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">DagFormula.box</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"n\">ψ</span> <span class=\"o\">:</span> <span class=\"n\">DagFormula</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">ψ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 416466965,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705536345
    },
    {
        "content": "<p>Trying to reduce <code>OrderedCancelAddCommMonoid</code> to <code>OrderedAddCommMonoid</code> (which just drops one field <code>le_of_add_le_add_left</code>) makes the problem magically go away. This is totally bewildering to me.</p>",
        "id": 416467117,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705536425
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> can you put me out of my misery?</p>",
        "id": 416467180,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705536458
    },
    {
        "content": "<p>Adding <code>set_option trace.Meta.synthInstance true</code> seems to indicate that in the failing situation Lean is synthesizing terms of type <code>CovariantClass ℕ ℕ (Function.swap fun x x_1 =&gt; x + x_1) fun x x_1 =&gt; x &lt; x_1</code> and <code>ContravariantClass ℕ ℕ (Function.swap fun x x_1 =&gt; x + x_1) fun x x_1 =&gt; x &lt; x_1</code>.</p>",
        "id": 416470042,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705537776
    },
    {
        "content": "<p>Ok this makes sense: the ContravariantClass is coming from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=OrderedCancelAddCommMonoid.toContravariantClassRight#doc\">docs#OrderedCancelAddCommMonoid.toContravariantClassRight</a> which is why OrderedCancelAddCommMonoid is essential for the failure. So importing enough of mathlib breaks the proof.</p>",
        "id": 416470515,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705537970
    },
    {
        "content": "<p>Thanks for the minimization! What is the best way to deal with this? Do I need to move all inductive types for which I want to use \"fun.\" proofs to a file that does not import too much Mathlib? Or is it considered a bug in Lean or Mathlib and can I hope for it to be fixed someday?</p>",
        "id": 416990596,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1705756580
    },
    {
        "content": "<p>The <code>cases</code> tactic is using <code>SizeOf</code>, a natural, so enhancements to Nat (such as this <code>OrderedCancelAddCommMonoid</code> instance) can change its behaviour. For me this is a bug, although given that this topic is marked resolved and in <a class=\"stream\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members\">#new members</a> I suspect that nobody relevant is looking at it. I would post my minimised example above in <a class=\"stream\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4\">#lean4</a>, mention that  it's <code>ContravariantClass ℕ ℕ (Function.swap fun x x_1 =&gt; x + x_1) fun x x_1 =&gt; x &lt; x_1</code> which seems to be causing the problem, and ask whether it is a bug; you will hopefully get some eyes on the issue there, and people who actually know something about what's going on will give you further advice. For me, the behaviour of <code>cases</code> shouldn't get worse when importing mathlib.</p>",
        "id": 416992321,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705758175
    },
    {
        "content": "<p>Thanks, will do! (I was unable to remove the \"resolved\" marking. I'll not use that function of zulip again I guess)</p>\n<p>DONE <a href=\"#narrow/stream/270676-lean4/topic/.22cases.22.20and.20.22fun.2E.22.20can.20break.20depending.20on.20imports/near/417010364\">here</a></p>",
        "id": 416992420,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1705758264
    }
]