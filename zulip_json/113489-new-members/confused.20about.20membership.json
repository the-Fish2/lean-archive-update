[
    {
        "content": "<p>how do i make \\mem work for lists or sets made of structures i have created?<br>\nor sets in general</p>\n<p>i always get something along the lines of </p>\n<p>\"failed to synthesize<br>\n  Decidable (p1 ∈ list_point) \"</p>\n<p>as an error message</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Init.Data.Array</span>\n<span class=\"kn\">import</span> <span class=\"n\">Init.Data.List</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Set</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Point</span>  <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Float</span>\n  <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Float</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">p1</span> <span class=\"o\">:</span> <span class=\"n\">Point</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">p0</span> <span class=\"o\">:</span> <span class=\"n\">Point</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">list_point</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">p0</span><span class=\"o\">,</span><span class=\"n\">p1</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">set_point</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Point</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">p0</span><span class=\"o\">,</span><span class=\"n\">p1</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">set_float</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Float</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">}</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">p1</span> <span class=\"bp\">∈</span> <span class=\"n\">list_point</span>\n\n<span class=\"k\">#eval</span> <span class=\"mi\">1</span> <span class=\"bp\">∈</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"c1\">-- this works fine for me</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">p0</span> <span class=\"bp\">∈</span> <span class=\"n\">set_point</span>\n\n<span class=\"k\">#eval</span> <span class=\"mi\">1</span> <span class=\"bp\">∈</span> <span class=\"n\">set_float</span>\n</code></pre></div>",
        "id": 430383644,
        "sender_full_name": "Oscar Martin",
        "timestamp": 1711799515
    },
    {
        "content": "<p>The problem is that you cannot evaluate membership in a list if you cannot evaluate equality of the underlying type. So the following variant of your code works.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Init.Data.Array</span>\n<span class=\"kn\">import</span> <span class=\"n\">Init.Data.List</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Set</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Point</span>  <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Repr</span><span class=\"o\">,</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">p1</span> <span class=\"o\">:</span> <span class=\"n\">Point</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">p0</span> <span class=\"o\">:</span> <span class=\"n\">Point</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">list_point</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">p0</span><span class=\"o\">,</span><span class=\"n\">p1</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">set_point</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Point</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">p0</span><span class=\"o\">,</span><span class=\"n\">p1</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">set_float</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Float</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">}</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">p1</span> <span class=\"bp\">∈</span> <span class=\"n\">list_point</span>\n</code></pre></div>",
        "id": 430386471,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1711802113
    },
    {
        "content": "<p>If your <code>Point</code> has <code>Float</code> components, then you cannot derive <code>DecidableEq</code> because equality of Floats is not decidable.</p>",
        "id": 430386561,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1711802186
    },
    {
        "content": "<p>The final part of the code will not work even with integers because membership in a set is not decidable. You could use <code>FinSet</code> if you wanted finite sets and the underlying type had decidable equality.</p>",
        "id": 430386618,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1711802257
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"266304\">Siddhartha Gadgil</span> <a href=\"#narrow/stream/113489-new-members/topic/confused.20about.20membership/near/430386561\">said</a>:</p>\n<blockquote>\n<p>If your <code>Point</code> has <code>Float</code> components, then you cannot derive <code>DecidableEq</code> because equality of Floats is not decidable.</p>\n</blockquote>\n<p>ok thanks a lot. My overall aim is to prove that a certain point is an element of a finite set or list. Right now i'm working with floats (just so i can evaluate functions and see if they work) but the end goal is to do this with reals. <br>\nI've created a function \"point_in\" which just takes lists and figures out if the selected point is in the list. Again the end goal is to work with sets, but i don't understand enough lean to do this yet.<br>\nthis is what i have so far</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Point</span>  <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Float</span>\n  <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Float</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Repr</span><span class=\"o\">,</span> <span class=\"n\">BEq</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">p1</span> <span class=\"o\">:</span> <span class=\"n\">Point</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">p0</span> <span class=\"o\">:</span> <span class=\"n\">Point</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">point_in</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ps</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Point</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">ps</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">==</span> <span class=\"n\">p</span> <span class=\"k\">then</span> <span class=\"n\">true</span> <span class=\"k\">else</span> <span class=\"n\">point_in</span> <span class=\"n\">p</span> <span class=\"n\">xs</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">p_in</span> <span class=\"o\">:</span> <span class=\"n\">point_in</span> <span class=\"n\">p1</span> <span class=\"o\">[</span><span class=\"n\">p1</span><span class=\"o\">,</span><span class=\"n\">p0</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>i'm trying to prove this first theorem with Lists first and then I'll move onto sets? i guess?<br>\nany advice?<br>\nthanks <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 430419207,
        "sender_full_name": "Oscar Martin",
        "timestamp": 1711831835
    },
    {
        "content": "<p>I haven’t written many proofs about code, but I would imagine just <code>by native_decide</code> should work for that</p>",
        "id": 430423318,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1711836451
    },
    {
        "content": "<p>Having said that, what do you mean  “Doing this with reals”?  You are going to have a hard time performing computations with Lean’s reals</p>",
        "id": 430423585,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1711836711
    },
    {
        "content": "<p>Brilliant thanks, these have been very helpful! I can't figure out how to index my list. I now need to apply a function to each element in the list, and then union the result.  Is there something like a BigOperation but for Unions?</p>",
        "id": 433250455,
        "sender_full_name": "Oscar Martin",
        "timestamp": 1713176012
    },
    {
        "content": "<p>you can do indexing with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.get%21#doc\">docs#List.get!</a> , or use an <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Array#doc\">docs#Array</a> , Lean has all the usual FP functions, so in particular <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.map#doc\">docs#List.map</a> and so on. Not sure what you meany by “union the result”</p>",
        "id": 433282418,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1713185376
    }
]