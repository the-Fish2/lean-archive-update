[
    {
        "content": "<p>I'm confused why lean can't handle this division. The following works, with the last <code>+</code> being there:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Cashflow</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">time</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">amount</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">CashflowSequence</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"n\">Cashflow</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">presentValue</span> <span class=\"o\">(</span><span class=\"n\">cf</span> <span class=\"o\">:</span> <span class=\"n\">CashflowSequence</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">cf.foldr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Cashflow</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pv</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">c.amount</span> <span class=\"bp\">+</span> <span class=\"n\">pv</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span>  <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>but  change that <code>+</code> to <code>/</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Cashflow</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">time</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">amount</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">CashflowSequence</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"n\">Cashflow</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">presentValue</span> <span class=\"o\">(</span><span class=\"n\">cf</span> <span class=\"o\">:</span> <span class=\"n\">CashflowSequence</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">cf.foldr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Cashflow</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pv</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">c.amount</span> <span class=\"bp\">+</span> <span class=\"n\">pv</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">1</span>  <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>and an error is thrown</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">compile</span> <span class=\"kd\">definition</span><span class=\"o\">,</span> <span class=\"n\">consider</span> <span class=\"n\">marking</span> <span class=\"n\">it</span> <span class=\"n\">as</span> <span class=\"bp\">'</span><span class=\"kd\">noncomputable</span><span class=\"bp\">'</span> <span class=\"n\">because</span> <span class=\"n\">it</span> <span class=\"n\">depends</span> <span class=\"n\">on</span> <span class=\"bp\">'</span><span class=\"n\">Real.instLinearOrderedFieldReal'</span><span class=\"o\">,</span> <span class=\"n\">and</span> <span class=\"n\">it</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"k\">have</span> <span class=\"n\">executable</span> <span class=\"n\">codeLean</span> <span class=\"mi\">4</span>\n</code></pre></div>",
        "id": 422069230,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1708234754
    },
    {
        "content": "<p><a href=\"#narrow/stream/113489-new-members/topic/function.20definition.20noncomputable/near/231938818\">Relevant</a>, from an old conversation.</p>",
        "id": 422069673,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1708235243
    },
    {
        "content": "<p>This is related to the fact that for a function on real numbers to be computable, it has to be continuous. Real division is not continuous, so you can't compute it.</p>",
        "id": 422069810,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1708235386
    },
    {
        "content": "<p>So is LEAN 4 incapable of division of real numbers? I notice that <code>#eval ((3 : ℝ) / (1 : ℝ))</code> throws the same error.</p>",
        "id": 422118825,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1708281338
    },
    {
        "content": "<p>Mathlib reals numbers are not really designed to be used with <code>eval</code>. If you want to prove something about an explicit computation <code>norm_num</code> is useful. Even something as easy as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>gives an absurd result.</p>",
        "id": 422119175,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1708281645
    },
    {
        "content": "<p>In the sense of <code>#eval</code>, that's indeed not supported, because real numbers are defined as Cauchy sequences. You can prove with them, though</p>",
        "id": 422119182,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1708281658
    },
    {
        "content": "<p>So if I define,  say, <code>noncomputable def divide_by_five (x : ℝ) : ℝ := (x / 5 : ℝ)</code>, is there a way to get lean to \"evaluate\" <code>divide_by_five 10</code> and <code>divide_by_five 2</code>? (Showing 2 &amp; 0.4, resp.)</p>",
        "id": 422119610,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1708282066
    },
    {
        "content": "<p>No, this is our point. You can of course <em>prove</em> that the result is what it is, but <code>#eval</code> will not work.</p>",
        "id": 422119724,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1708282160
    },
    {
        "content": "<p>The point is that a single real number contains an infinite amount of information, it's not possible (in any system) to compute with \"true\" real numbers. For example, what should be the result of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow><mi mathvariant=\"normal\">∞</mi></msubsup><mfrac><mn>1</mn><msup><mi>n</mi><mn>2</mn></msup></mfrac><mo>−</mo><mfrac><msup><mi>π</mi><mn>2</mn></msup><mn>6</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">\\sum_{n=1}^{\\infty} \\frac{1}{n^2} - \\frac{\\pi^2}{6}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1901em;vertical-align:-0.345em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8043em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">∞</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7463em;\"><span style=\"top:-2.786em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.3629em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0179em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">6</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">π</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913em;\"><span style=\"top:-2.931em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span>?</p>",
        "id": 422119843,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1708282294
    },
    {
        "content": "<p>(The sentence above is surely vague and imprecise, but the point is that usually programming languages don't use mathematical real numbers)</p>",
        "id": 422119933,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1708282347
    },
    {
        "content": "<p>FYI I put quotes on \"evaluate\",  b/c I knew <code>#eval</code> doesn't work. I'm wondering ift here's some other way for LEAN to figure it out.</p>",
        "id": 422119935,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1708282349
    },
    {
        "content": "<p>I understand the theory of computable reals.</p>",
        "id": 422119950,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1708282368
    },
    {
        "content": "<p>Well, mathlib's reals are not computable.</p>",
        "id": 422119995,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1708282405
    },
    {
        "content": "<p>Does that mean The best I can do is know already that 2/5 = 0.4 and prove it?</p>",
        "id": 422120005,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1708282410
    },
    {
        "content": "<p>Does this help?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"bp\">#</span><span class=\"n\">norm_num</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"n\">norm_num</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 422120093,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708282463
    },
    {
        "content": "<p>Note that \"evaluate\" here means \"put in normal form\", and the normal form is <code>2/5</code> not <code>0.4</code></p>",
        "id": 422120110,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708282491
    },
    {
        "content": "<p>There maybe some tricks with <code>norm_num</code>, but I am not sure.</p>",
        "id": 422120150,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1708282532
    },
    {
        "content": "<p>Too late.</p>",
        "id": 422120155,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1708282535
    },
    {
        "content": "<p>For your other example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">divide_by_five</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- `[divide_by_five]` tells `norm_num` that it should look inside `divide_by_five`</span>\n<span class=\"bp\">#</span><span class=\"n\">norm_num</span> <span class=\"o\">[</span><span class=\"n\">divide_by_five</span><span class=\"o\">]</span> <span class=\"n\">divide_by_five</span> <span class=\"mi\">10</span>\n<span class=\"bp\">#</span><span class=\"n\">norm_num</span> <span class=\"o\">[</span><span class=\"n\">divide_by_five</span><span class=\"o\">]</span> <span class=\"n\">divide_by_five</span> <span class=\"mi\">4</span>\n</code></pre></div>",
        "id": 422120216,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708282569
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 422120744,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1708282976
    },
    {
        "content": "<p>What about using rational numbers? I mean, looking at the names you are using it seems you interested in real world values, where essentially rationals numbers are enough.</p>",
        "id": 422120979,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1708283199
    },
    {
        "content": "<p>Why isn't the <code>#norm_num</code> at the end of the following returning a single value then?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Cashflow</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">time</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">amount</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">CashflowSequence</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"n\">Cashflow</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">myCashflow</span> <span class=\"o\">:</span> <span class=\"n\">CashflowSequence</span> <span class=\"o\">:=</span>\n<span class=\"o\">[</span>\n  <span class=\"o\">{</span> <span class=\"n\">time</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">amount</span> <span class=\"o\">:=</span> <span class=\"bp\">-</span><span class=\"mi\">100</span> <span class=\"o\">},</span> <span class=\"c1\">-- Payment of $100 at time 0 (initial investment)</span>\n  <span class=\"o\">{</span> <span class=\"n\">time</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">amount</span> <span class=\"o\">:=</span> <span class=\"mi\">50</span> <span class=\"o\">},</span>   <span class=\"c1\">-- Payment of $50 at time 1</span>\n  <span class=\"o\">{</span> <span class=\"n\">time</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">amount</span> <span class=\"o\">:=</span> <span class=\"mi\">50</span> <span class=\"o\">}</span>    <span class=\"c1\">-- Payment of $50 at time 2</span>\n<span class=\"o\">]</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">presentValue</span> <span class=\"o\">(</span><span class=\"n\">cf</span> <span class=\"o\">:</span> <span class=\"n\">CashflowSequence</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">cf.foldr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Cashflow</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pv</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">c.amount</span> <span class=\"bp\">+</span> <span class=\"n\">pv</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"mi\">0</span>\n\n<span class=\"bp\">#</span><span class=\"n\">norm_num</span> <span class=\"o\">[</span><span class=\"n\">presentValue</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">presentValue</span> <span class=\"n\">myCashflow</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">5</span><span class=\"o\">)</span>  <span class=\"c1\">--returns List.foldr (fun c pv =&gt; (c.amount + pv) / 3) 0 myCashflow / 5 Lean 4</span>\n</code></pre></div>",
        "id": 422121345,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1708283519
    },
    {
        "content": "<p>I think <code>norm_num</code> doesn't evaluate <code>List.foldr</code> (that is defined inductively). Note that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Cashflow</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">time</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">amount</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">CashflowSequence</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"n\">Cashflow</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">myCashflow</span> <span class=\"o\">:</span> <span class=\"n\">CashflowSequence</span> <span class=\"o\">:=</span>\n<span class=\"o\">[</span>\n  <span class=\"o\">{</span> <span class=\"n\">time</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">amount</span> <span class=\"o\">:=</span> <span class=\"bp\">-</span><span class=\"mi\">100</span> <span class=\"o\">},</span> <span class=\"c1\">-- Payment of $100 at time 0 (initial investment)</span>\n  <span class=\"o\">{</span> <span class=\"n\">time</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">amount</span> <span class=\"o\">:=</span> <span class=\"mi\">50</span> <span class=\"o\">},</span>   <span class=\"c1\">-- Payment of $50 at time 1</span>\n  <span class=\"o\">{</span> <span class=\"n\">time</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">amount</span> <span class=\"o\">:=</span> <span class=\"mi\">50</span> <span class=\"o\">}</span>    <span class=\"c1\">-- Payment of $50 at time 2</span>\n<span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">presentValue</span> <span class=\"o\">(</span><span class=\"n\">cf</span> <span class=\"o\">:</span> <span class=\"n\">CashflowSequence</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">cf.foldr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Cashflow</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pv</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">c.amount</span> <span class=\"bp\">+</span> <span class=\"n\">pv</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">))</span> <span class=\"mi\">0</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">presentValue</span> <span class=\"n\">myCashflow</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">5</span>\n</code></pre></div>\n<p>gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">140</span> <span class=\"o\">:</span> <span class=\"n\">Rat</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">27</span>\n</code></pre></div>",
        "id": 422121614,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1708283725
    },
    {
        "content": "<p>You can tell it to unfold <code>List.foldr</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">norm_num</span> <span class=\"o\">[</span><span class=\"n\">presentValue</span><span class=\"o\">,</span> <span class=\"n\">List.foldr</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">presentValue</span> <span class=\"n\">myCashflow</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">5</span><span class=\"o\">)</span>\n<span class=\"c1\">-- -(140 / 27)</span>\n</code></pre></div>",
        "id": 422121988,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708284058
    },
    {
        "content": "<p>I'm wondering, did you mean to write <code>presentValue myCashflow (1/5)</code>?</p>",
        "id": 422122023,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1708284120
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Change.20plus.20to.20divide.20.3D.3E.20error/near/422122023\">said</a>:</p>\n<blockquote>\n<p>I'm wondering, did you mean to write <code>presentValue myCashflow (1/5)</code>?</p>\n</blockquote>\n<p>Are you asking if I meant to put the 1/5 in parentheses? If so, I didn't and I don't know the difference.</p>",
        "id": 422123287,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1708285302
    },
    {
        "content": "<p>Your version is parsed as <code>(presentValue myCashflow 1)/5</code>.</p>",
        "id": 422123454,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708285425
    },
    {
        "content": "<p>Because function application has very high precedence.</p>",
        "id": 422123513,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1708285456
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245476\">Quinn Culver</span> has marked this topic as resolved.</p>",
        "id": 422124599,
        "sender_full_name": "Notification Bot",
        "timestamp": 1708286506
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"245476\">@Quinn Culver</span> another possibility is that you use <code>Float</code> instead of <code>Real</code>, if you are interested in writing code rather than proving theorems.</p>",
        "id": 422134392,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708294952
    },
    {
        "content": "<p>I don't want to use float for the function defs, but it would be nice to have something like <code>norm_num</code> that outputs a float since I'll often want to check that my functions are defined correctly and I'd be checking them against sources that output decimals.</p>",
        "id": 422154332,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1708313783
    },
    {
        "content": "<p>I think you got your code snippets in reverse order..</p>",
        "id": 422752255,
        "sender_full_name": "Ian Allen",
        "timestamp": 1708580773
    }
]