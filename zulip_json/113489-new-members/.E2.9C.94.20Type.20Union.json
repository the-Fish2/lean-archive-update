[
    {
        "content": "<p>Other languages have a concept of <a href=\"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#union-types\">union types</a> is there anything similar in Lean?</p>",
        "id": 422715787,
        "sender_full_name": "Jesse Wright",
        "timestamp": 1708554896
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Sum#doc\">docs#Sum</a> maybe?</p>",
        "id": 422716292,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1708555209
    },
    {
        "content": "<p>Hmm based on the docs I would have thought so, but after looking at the implementation not quite. To give an example of the behavior of the functionality I'm looking for, I want to able to define a function like <code>toIntTest</code> which would accept either <code>UInt8</code> or <code>UInt16</code> as input like the following</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">toIntTest</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">UInt8</span> <span class=\"bp\">⊕</span> <span class=\"n\">UInt16</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"n\">String.toInt</span><span class=\"bp\">!</span> <span class=\"o\">(</span><span class=\"n\">toString</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"k\">#eval</span> <span class=\"n\">toIntTest</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span> <span class=\"n\">UInt8</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Doing this with that sum type produces the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">fn2</span> <span class=\"mi\">2</span>\n<span class=\"n\">argument</span>\n  <span class=\"mi\">2</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">UInt8</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">UInt8</span> <span class=\"bp\">⊕</span> <span class=\"n\">UInt16</span> <span class=\"o\">:</span> <span class=\"n\">TypeLean</span> <span class=\"mi\">4</span>\n</code></pre></div>",
        "id": 422718432,
        "sender_full_name": "Jesse Wright",
        "timestamp": 1708556424
    },
    {
        "content": "<p>that's just because you can't cast automatically from UInt?? to the sum type.</p>",
        "id": 422719434,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1708556994
    },
    {
        "content": "<p>Try writing <code>.inl 2</code> instead of <code>2</code></p>",
        "id": 422719493,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1708557010
    },
    {
        "content": "<p>and get rid of the type ascription</p>",
        "id": 422719523,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1708557036
    },
    {
        "content": "<p>namely <code>#eval toIntTest (.inl 2)</code></p>",
        "id": 422719615,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1708557100
    },
    {
        "content": "<p>however this will give you <code>0</code> since you didn't pattern match on <code>x</code> in your definition.</p>",
        "id": 422719632,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1708557114
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">toIntTest</span> <span class=\"o\">:</span> <span class=\"n\">UInt8</span> <span class=\"bp\">⊕</span> <span class=\"n\">UInt16</span> <span class=\"bp\">→</span> <span class=\"n\">Int</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.toNat</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.toNat</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">toIntTest</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 422719734,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1708557195
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"680656\">Jesse Wright</span> has marked this topic as resolved.</p>",
        "id": 422720209,
        "sender_full_name": "Notification Bot",
        "timestamp": 1708557501
    },
    {
        "content": "<p>This makes we wonder if you can do something like an untagged union with lean's dependent types.</p>\n<p>Taking <code>p</code> as some predicate on the naturals, the following doesn't work because it doesn't carry any data afaik.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">ℕ</span> <span class=\"k\">else</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I'm not sure this sort of thing is helpful unless you're in a systems language and you're looking to save every byte or reuse memory super efficiently.</p>",
        "id": 422878779,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1708626334
    },
    {
        "content": "<p>Yeah, I'm not even sure how you'd construct a term of this type because <code>ite</code>need both parameters to have the same type <code>t e : α</code></p>",
        "id": 422901901,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1708634928
    },
    {
        "content": "<p>Easy:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidablePred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">ℕ</span> <span class=\"k\">else</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"k\">then</span>\n    <span class=\"n\">cast</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">])</span> <span class=\"mi\">37</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">cast</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">37</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidablePred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">ℕ</span> <span class=\"k\">else</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">split_ifs</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"mi\">37</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"bp\">-</span><span class=\"mi\">37</span>\n</code></pre></div>",
        "id": 422928701,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1708648349
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"664276\">Treq</span> has marked this topic as unresolved.</p>",
        "id": 423012902,
        "sender_full_name": "Notification Bot",
        "timestamp": 1708693853
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"664276\">Treq</span> has marked this topic as resolved.</p>",
        "id": 423012931,
        "sender_full_name": "Notification Bot",
        "timestamp": 1708693865
    }
]