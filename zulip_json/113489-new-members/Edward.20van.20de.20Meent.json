[
    {
        "content": "<p>Hi everyone, I'm an undergraduate Utrecht University, i will be working with Lean for my bachelors thesis (under supervision of <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> ). my study is mathematics, with a minor of computer science.</p>\n<p>i was doing some preparation for my thesis, which includes creating an instance of the field of order four. taking inspiration from Mathematics in Lean, i defined a struct, made instances of One, Zero, Add, Mul, Sub, but now i'm at the part where it says we can prove therorems like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">zero_def</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">gaussInt</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>so i tried to do the same for my definition of F4, but it complains about a type mismatch? my instance of zero is with this code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span><span class=\"n\">Zero</span> <span class=\"n\">F4</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>and i'm getting this error:<br>\n<a href=\"/user_uploads/3121/z_sGRGrrYut6Nyj__f_SQACq/image.png\">image.png</a><br>\ncan someone explain what this error means, why it is supposed to work for the tutorial, and why it doesn't work for my instance?</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/z_sGRGrrYut6Nyj__f_SQACq/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/z_sGRGrrYut6Nyj__f_SQACq/image.png\"></a></div>",
        "id": 417012429,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1705774921
    },
    {
        "content": "<p>You're confusing <code>rfl</code> and <code>refl</code></p>",
        "id": 417012594,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705775022
    },
    {
        "content": "<p><code>refl _</code> (with the underscore) is the same as <code>rfl</code></p>",
        "id": 417012612,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705775041
    },
    {
        "content": "<p>what's the difference?</p>",
        "id": 417012661,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1705775052
    },
    {
        "content": "<p>The <code>_</code>. It's really important to know how to read the error message you got there. It is telling you \"you wrote <code>refl</code> but there's a <code>∀</code> left over; so I bet you meant <code>refl _</code>\"</p>",
        "id": 417012718,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705775119
    },
    {
        "content": "<p>The error says \"what you wrote has type \"for all (something), x = y\", and you were supposed to give me something of type \"x=y\" \", so what it means is \"please supply the something\"</p>",
        "id": 417012740,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1705775149
    },
    {
        "content": "<p>then the <code>_</code> means that you don't care what example of quantification you use?</p>",
        "id": 417012821,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1705775206
    },
    {
        "content": "<p>No, it means \"I don't know what to put here; work it out automatically if you can, error if you can't\"</p>",
        "id": 417012863,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705775250
    },
    {
        "content": "<p>right... if i wanted to be explicit, what should i put there?</p>",
        "id": 417012893,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1705775282
    },
    {
        "content": "<p>You can <code>#print</code> your proof afterwards to see what lean put there for you</p>",
        "id": 417012978,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705775353
    },
    {
        "content": "<p>But you really should not care about being explicit here</p>",
        "id": 417012989,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705775368
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 417013069,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1705775426
    },
    {
        "content": "<p>You could probably put something stupid like <code>(0 + 0 + 0)</code> if you really wanted, which shows that the explicitness is worthless</p>",
        "id": 417013072,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705775431
    },
    {
        "content": "<p>yea, it says <code>{ x0 := 0, x1 := 0 }</code>, that's not helpful at all <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 417013113,
        "sender_full_name": "Edward van de Meent",
        "timestamp": 1705775495
    }
]