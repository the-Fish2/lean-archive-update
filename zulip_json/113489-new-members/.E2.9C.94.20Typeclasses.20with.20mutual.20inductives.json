[
    {
        "content": "<p>hello, consider the following example for a mutual inductive that is parameterized over a type that implements any TypeClass (e.g ToString)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n  <span class=\"kd\">inductive</span> <span class=\"n\">I1</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ToString</span> <span class=\"n\">a</span><span class=\"o\">]</span>  <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span><span class=\"o\">:</span> <span class=\"n\">I2</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">I1</span> <span class=\"n\">a</span>\n\n  <span class=\"kd\">inductive</span> <span class=\"n\">I2</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ToString</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">other</span><span class=\"o\">:</span> <span class=\"n\">I2</span> <span class=\"n\">a</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>this should work right? since both inductives are parameterized the same.<br>\nis there a way to accomplish this in Lean4 currently?<br>\nit produces following error:<br>\ninvalid mutually inductive types, parameter name mismatch 'inst._@.Meeting 18-01.problem_1._hyg.350', expected 'inst._@.Meeting 18-01.problem_1._hyg.346'</p>",
        "id": 417426032,
        "sender_full_name": "Simon Daniel",
        "timestamp": 1706009509
    },
    {
        "content": "<p>I do not know what the issue is, but it works if you give names to the <del>instances</del>typeclass assumptions, as in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n  <span class=\"kd\">inductive</span> <span class=\"n\">I1</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ToString</span> <span class=\"n\">a</span><span class=\"o\">]</span>  <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span><span class=\"o\">:</span> <span class=\"n\">I2</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">I1</span> <span class=\"n\">a</span>\n\n  <span class=\"kd\">inductive</span> <span class=\"n\">I2</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ToString</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">other</span><span class=\"o\">:</span> <span class=\"n\">I2</span> <span class=\"n\">a</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 417427116,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1706009924
    },
    {
        "content": "<p>thanks, that way it works :)</p>",
        "id": 417428980,
        "sender_full_name": "Simon Daniel",
        "timestamp": 1706010654
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"684702\">Simon Daniel</span> has marked this topic as resolved.</p>",
        "id": 417432012,
        "sender_full_name": "Notification Bot",
        "timestamp": 1706011717
    }
]