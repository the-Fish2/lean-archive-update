[
    {
        "content": "<p>Hello!<br>\nI would like to prove that a convergent sequence in normed space is convergent in the weak topology as well. Could someone help me state it in Lean?</p>\n<p>I tried <code> Tendsto (fun n ↦ (x n : (WeakSpace 𝕜 E))) atTop (nhds (p : (WeakSpace 𝕜 E)))</code>, thinking that I were casting <code>x n</code> to <code>Weakspace 𝕜 E</code>, but actually it remains in <code>E</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NontriviallyNormedField</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">SeminormedAddCommGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">NormedSpace</span> <span class=\"n\">Filter</span> <span class=\"n\">Set</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">weak_convergence_of_norm_convergence</span>\n <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"n\">x</span> <span class=\"n\">atTop</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">WeakSpace</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">)))</span> <span class=\"n\">atTop</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">WeakSpace</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n <span class=\"n\">exact</span> <span class=\"n\">hx</span>\n</code></pre></div>",
        "id": 425535940,
        "sender_full_name": "Yoh Tanimoto",
        "timestamp": 1709910177
    },
    {
        "content": "<p>Let me ask in a different way.<br>\nFor a variable <code>p : E</code>, is it possible to take a variable <code>q : WeakSpace 𝕜 E</code> such that <code>p = q</code>? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NontriviallyNormedField</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">SeminormedAddCommGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">WeakSpace</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span>  <span class=\"c1\">-- : Prop</span>\n</code></pre></div>",
        "id": 425969634,
        "sender_full_name": "Yoh Tanimoto",
        "timestamp": 1710176426
    },
    {
        "content": "<p>I thought the coercions should work as you thought, too, with explicit type ascriptions...</p>\n<p>Adding the <code>id</code>-trick, this seems to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NontriviallyNormedField</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">SeminormedAddCommGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">WeakSpace</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">)</span>   <span class=\"c1\">-- p : E -- :(</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">WeakSpace</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">)</span>   <span class=\"c1\">-- id p : WeakSpace 𝕜 E -- :)</span>\n</code></pre></div>",
        "id": 426022869,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1710197410
    },
    {
        "content": "<p>I think this is the wrong question; you should be asking if there is an equivalence such that <code>p : E</code> but <code>e p : WeakSpace k E</code></p>",
        "id": 426028280,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710200353
    },
    {
        "content": "<p>I would expect to find one right next to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=WeakSpace#doc\">docs#WeakSpace</a></p>",
        "id": 426028308,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710200380
    },
    {
        "content": "<p>... though it does look like it's missing</p>",
        "id": 426028443,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710200467
    },
    {
        "content": "<p>See <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=WithLp.equiv#doc\">docs#WithLp.equiv</a> for an example of what I mean</p>",
        "id": 426028466,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1710200501
    },
    {
        "content": "<p>OK, so <code>id</code> with explicit type ascription works, thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NontriviallyNormedField</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">SeminormedAddCommGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">NormedSpace</span> <span class=\"n\">Filter</span> <span class=\"n\">Set</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">norm_topology_le_weak_topology</span> <span class=\"o\">:</span>\n <span class=\"o\">(</span><span class=\"n\">UniformSpace.toTopologicalSpace</span> <span class=\"o\">:</span> <span class=\"n\">TopologicalSpace</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">≤</span>\n  <span class=\"o\">(</span><span class=\"n\">WeakSpace.instTopologicalSpace</span> <span class=\"o\">:</span> <span class=\"n\">TopologicalSpace</span> <span class=\"o\">(</span><span class=\"n\">WeakSpace</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Continuous.le_induced</span>\n  <span class=\"n\">refine</span> <span class=\"n\">continuous_pi</span> <span class=\"bp\">?</span><span class=\"n\">h.h</span>\n  <span class=\"n\">intro</span> <span class=\"n\">y</span>\n  <span class=\"n\">simp</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">((</span><span class=\"n\">topDualPairing</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n   <span class=\"n\">ext</span> <span class=\"n\">x</span>\n   <span class=\"n\">exact</span> <span class=\"n\">topDualPairing_apply</span> <span class=\"n\">y</span> <span class=\"n\">x</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">ContinuousLinearMap.continuous</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">weak_convergence_of_norm_convergence</span>\n <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"n\">x</span> <span class=\"n\">atTop</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">WeakSpace</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">)))</span> <span class=\"n\">atTop</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">WeakSpace</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n <span class=\"n\">refine</span> <span class=\"n\">tendsto_atTop_nhds.mpr</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n <span class=\"n\">intro</span> <span class=\"n\">U</span> <span class=\"n\">hpU</span> <span class=\"n\">hU</span>\n <span class=\"k\">have</span> <span class=\"n\">hUnorm</span> <span class=\"o\">:</span> <span class=\"n\">IsOpen</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span> <span class=\"n\">norm_topology_le_weak_topology</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"n\">hU</span>\n <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">tendsto_atTop_nhds</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span>\n <span class=\"n\">exact</span> <span class=\"n\">hx</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"n\">hpU</span> <span class=\"n\">hUnorm</span>\n</code></pre></div>\n<p>What is the convention of mathlib for different topologies on the same set?<br>\nShould there be a canonical map <code>E → WeakSpace 𝕜 E</code> as you say, or a coercion?<br>\nI see the notation <code>IsOpen[s]</code> at <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=TopologicalSpace.le_def#doc\">docs#TopologicalSpace.le_def</a> but if I just write <code>#check IsOpen[UniformSpace.toTopologicalSpace : TopologicalSpace E]</code>, I get an error.</p>",
        "id": 426054405,
        "sender_full_name": "Yoh Tanimoto",
        "timestamp": 1710219545
    },
    {
        "content": "<p>I made a PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/11472\">#11472</a> (from a fork) proving some basic relations between the weak and the original topology. May I have a write access to non-master branches of the mathlib repo?</p>\n<p>I am a mathematical physicist, here is my website <a href=\"https://www.mat.uniroma2.it/~tanimoto/\">https://www.mat.uniroma2.it/~tanimoto/</a><br>\nI organized a workshop on Lean in Rome in January <a href=\"https://www.mat.uniroma2.it/butterley/formalisation/\">https://www.mat.uniroma2.it/butterley/formalisation/</a></p>",
        "id": 427402216,
        "sender_full_name": "Yoh Tanimoto",
        "timestamp": 1710753650
    },
    {
        "content": "<p>Invitation sent!</p>",
        "id": 427402858,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1710753769
    },
    {
        "content": "<p>thank you!</p>",
        "id": 427403382,
        "sender_full_name": "Yoh Tanimoto",
        "timestamp": 1710753858
    },
    {
        "content": "<p>I would guess that we are missing something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">WeakSpace</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">cont</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">WeakBilin.continuous_of_continuous_eval</span>\n    <span class=\"n\">exact</span> <span class=\"n\">ContinuousLinearMap.continuous</span>\n</code></pre></div>\n<p>and the convergence statement should be a very easy consequence of this definition.</p>",
        "id": 427422291,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1710757391
    },
    {
        "content": "<p>I agree that it would be nice to have such functions! I asked above which was the convention of mathlib for different topologies on a set.</p>\n<p>So should there be a canonical map for any combination of two topologies on the same set? Or is there a way to solve this by, say, coercion? I wanted to know this because in von Neumann algebras one puts 7 topologies on B(H)...</p>",
        "id": 427425689,
        "sender_full_name": "Yoh Tanimoto",
        "timestamp": 1710758010
    },
    {
        "content": "<p>The convention is that we mainly use type synonyms such as <code>WeakSpace k E</code> and then have mappings such as <code>WithLp.equiv</code> or the one I sketched out above to go between the different types</p>",
        "id": 427427481,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1710758353
    },
    {
        "content": "<p>ok!</p>",
        "id": 427427709,
        "sender_full_name": "Yoh Tanimoto",
        "timestamp": 1710758393
    },
    {
        "content": "<p>There might be quite a bit of API missing for <code>WeakSpace</code>, as far as I know nobody really used it</p>",
        "id": 427431449,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1710759061
    }
]