[
    {
        "content": "<p>How do I go to the definition of a typeclass within either VS Code or the Mathlib docs? For example, I'm looking at the source of <code>Mathlib/Order/Filter/Basic.lean</code> and I see:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">l₁.map</span> <span class=\"n\">f</span> <span class=\"bp\">≤</span> <span class=\"n\">l₂</span>\n</code></pre></div>\n<p>How do I see what the <code>≤</code> is referring to? I think it's the <code>LE</code> typeclass, but I'm not sure. Perhaps it's getting the ordering from a blanket impl of some other typeclass, or some typeclass extending <code>LE</code> like <code>PartialOrder</code>.</p>\n<p>I'm curious how people go about this procedure in general rather than getting an answer to the specific answer with respect to <code>Filter</code>.</p>",
        "id": 435594970,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1714140795
    },
    {
        "content": "<p>If you hover over the <code>≤</code> in the infoview it will show <code>@LE.le (Filter α) Preorder.toLE l₁ l₂ : Prop</code> (an in general the typeclass for your symbol)</p>",
        "id": 435599118,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1714142145
    },
    {
        "content": "<p>That case is annoying because it won't appear in the infoview, but you can do something like this </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">α</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">l₁</span> <span class=\"bp\">≤</span> <span class=\"n\">l₂</span>\n</code></pre></div>\n<p>and hover over it thanks to the <code>#check</code></p>",
        "id": 435599436,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1714142246
    },
    {
        "content": "<p>Yeah it's annoying that I have to write an expression in <code>#check</code> to get it to show in the infoview. Good catch that you can see it there though. And there it's clear exactly where it's from.</p>",
        "id": 435599688,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1714142336
    },
    {
        "content": "<p>Even once I find that out though, it's still annoying to get to the actual <code>PartialOrder</code> instance of <code>Filter</code>.</p>",
        "id": 435599749,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1714142363
    },
    {
        "content": "<p>Not sure how other people do it, but I would search for <code>instPartialOrderFilter</code> in the mathlib docs (hoping that is the right name, which in this case it is). Not sure how else to go to the source from the infoview.</p>",
        "id": 435599919,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1714142409
    },
    {
        "content": "<p>You can do <code>#synth LE (Filter α)</code></p>",
        "id": 435610525,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1714145872
    }
]