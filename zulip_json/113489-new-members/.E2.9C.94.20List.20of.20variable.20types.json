[
    {
        "content": "<p>Hello, im trying to implement a List that can hold values of different Types. I tried using tuples of a Type and a corresponding value of that type:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">List_of_different_types</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"o\">((</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">test_list</span><span class=\"o\">:</span> <span class=\"n\">List_of_different_types</span> <span class=\"o\">:=</span> <span class=\"o\">[(</span><span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"mi\">32</span><span class=\"o\">)]</span>\n<span class=\"kd\">def</span> <span class=\"n\">some_nat</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"c1\">-- does not work</span>\n</code></pre></div>\n<p>is such a thing even possible and can somebody explain whats the problem with my tuples? thanks :)</p>",
        "id": 420608725,
        "sender_full_name": "Simon Daniel",
        "timestamp": 1707468882
    },
    {
        "content": "<p>I wonder whether there are better ways of doing what you are asking, but I <em>think</em> that the issue is that your <code>List</code> contains <em>dependent</em> products.  The notation <code>(·, ·)</code> may only be for the non-dependent product.</p>",
        "id": 420611074,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707469770
    },
    {
        "content": "<p>A simple solution is to use the \"anonymous constructor\":</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">List_of_different_types</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"o\">((</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">test_list</span><span class=\"o\">:</span> <span class=\"n\">List_of_different_types</span> <span class=\"o\">:=</span> <span class=\"o\">[⟨</span><span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"mi\">32</span><span class=\"o\">⟩]</span>\n<span class=\"kd\">def</span> <span class=\"n\">some_nat</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">⟩</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 420611114,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707469790
    },
    {
        "content": "<p>Note that I changed the kind of brackets around the \"pairs\": they were <code>( )</code> in your code and they are <code>\\&lt; \\&gt;</code> in mine.</p>",
        "id": 420611257,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707469837
    },
    {
        "content": "<p>i guess the angled brackets ⟨⟩ are overloaded with constructing a subtype value?</p>",
        "id": 420611689,
        "sender_full_name": "Simon Daniel",
        "timestamp": 1707470021
    },
    {
        "content": "<p>i better look up \"anonymous constructors\" in the lean manual first</p>",
        "id": 420611879,
        "sender_full_name": "Simon Daniel",
        "timestamp": 1707470080
    },
    {
        "content": "<p>They are essentially a shorthand for filling in the constructors of an inductive type, without having to specify what the names of the constructors are.  They rely (I think) on the exact order in which the constructors are mentioned in the corresponding inductive.</p>",
        "id": 420611978,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707470118
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"684702\">Simon Daniel</span> has marked this topic as resolved.</p>",
        "id": 420612475,
        "sender_full_name": "Notification Bot",
        "timestamp": 1707470321
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"684702\">Simon Daniel</span> has marked this topic as unresolved.</p>",
        "id": 420621688,
        "sender_full_name": "Notification Bot",
        "timestamp": 1707473853
    },
    {
        "content": "<p>with this solution List access  failes to synthesize the instance of GetElem.<br>\nI dont see why List access with depent product elements should not work</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">List_of_different_types</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"o\">((</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">test_list</span><span class=\"o\">:</span> <span class=\"n\">List_of_different_types</span> <span class=\"o\">:=</span> <span class=\"o\">[⟨</span><span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"mi\">32</span><span class=\"o\">⟩]</span>\n<span class=\"kd\">def</span> <span class=\"n\">first_entry</span> <span class=\"o\">:=</span> <span class=\"n\">test_list</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"c1\">-- should return the Tuple of (Nat, 32)</span>\n</code></pre></div>",
        "id": 420622566,
        "sender_full_name": "Simon Daniel",
        "timestamp": 1707474183
    },
    {
        "content": "<p>I'm not sure how to fix this issue, but I can't help having an uneasy feeling about <code>List_of_different_types</code> in the first place.</p>",
        "id": 420630539,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1707477050
    },
    {
        "content": "<p>Replacing the first <code>def</code> with <code>abbrev</code> will fix it</p>",
        "id": 420650111,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707484481
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"684702\">Simon Daniel</span> has marked this topic as resolved.</p>",
        "id": 420651403,
        "sender_full_name": "Notification Bot",
        "timestamp": 1707484969
    }
]