[
    {
        "content": "<p>I'm working through \"The Mechanics of Proof\" by <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span>'.</p>\n<p>I have a question related to working with inequalities inside a \"calc\" proof.  Here's an example from the book that I completed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">≥</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">r</span> <span class=\"bp\">≤</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">≤</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">≤</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n    <span class=\"n\">r</span> <span class=\"bp\">≤</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">addarith</span><span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">≤</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n    <span class=\"n\">r</span> <span class=\"bp\">≤</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">addarith</span> <span class=\"o\">[</span><span class=\"n\">h2</span><span class=\"o\">]</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n    <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rel</span> <span class=\"o\">[</span><span class=\"n\">h4</span><span class=\"o\">,</span> <span class=\"n\">h3</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n</code></pre></div>\n<p>The first line in the last calc block makes sense to me.  We are writing r in a form that can be then manipulated with <code>rel</code> in the next line.  For the first two, I wrote what seems to be a correct proof by just saying <code>r = r</code>, but that feels wrong.  Is there another way, perhaps something that is idiomatic?</p>",
        "id": 411429508,
        "sender_full_name": "Dan Grigsby",
        "timestamp": 1704487118
    },
    {
        "content": "<p>Assuming that code compiles, and you want h3, why don't you just do <code>have h3 : r &lt;= 3 + s := by addarith[h1]</code>?</p>",
        "id": 411431001,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1704487871
    },
    {
        "content": "<p>That works and is certainly simpler and better.</p>\n<p>I think that generalizes - that anything that can be resolved with one tactic would work like that, and anything that requires more than one tactic would have an <code>r = &lt;something equal to r, but not directly/just r&gt;</code>.  </p>\n<p>^^^Does that sound right?   Thanks for the help!</p>",
        "id": 411431836,
        "sender_full_name": "Dan Grigsby",
        "timestamp": 1704488294
    },
    {
        "content": "<p>Yup, calc blocks let you chain together two steps proved by different tactics ... if a statement can be proved in one step, you can generally just write the tactic without the scaffolding of a calc block.</p>",
        "id": 411435241,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1704490071
    },
    {
        "content": "<p>This seems to be a common place where beginners need to take a mental leap, e.g.<br>\n<a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Mechanics.20of.20Proof.20Ex\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/.E2.9C.94.20Mechanics.20of.20Proof.20Ex</a></p>",
        "id": 411435385,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1704490156
    },
    {
        "content": "<p>Yes, I have also seen this with my students. I was surprised but it simply seems to be a fact: people are tempted to write one line long <code>calc</code>. It would be nice to have at least a better error message.</p>",
        "id": 411436002,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1704490472
    },
    {
        "content": "<p>It's a shame that <code>calc</code> actually errors with a single line and instead doesn't just provide an info with a <code>Try this:</code></p>",
        "id": 411436514,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1704490726
    },
    {
        "content": "<p>I guess this is implemented in core though?</p>",
        "id": 411436546,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1704490746
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> you asked for typos and input.  Looks like this is a common point of confusion.  Adding a sentence somewhere in Ch1 (or 2?) would probably save headaches.</p>",
        "id": 411437598,
        "sender_full_name": "Dan Grigsby",
        "timestamp": 1704491286
    },
    {
        "content": "<p>Noted!</p>",
        "id": 411437686,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1704491332
    },
    {
        "content": "<p>Jireh, it is implemented in core but overridden in Mathlib as soon as you import the calc widget.</p>",
        "id": 411437901,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1704491435
    },
    {
        "content": "<p>For calibration:  I have recent freshman level linear algebra, calc and statistics experience.  I'm 50, which makes me older than your target.  I've written code for a long time, and have had the most success learning new math when I can come at it with either software tools (e.g.., learning calc and using sympy to check my work) or where there are computer-science adjacent things (e.g., familiarity doing matrix multiplications with numpy made linear algebra less intimidating.</p>\n<p>Great community here.  Really grateful for the help.</p>",
        "id": 411439049,
        "sender_full_name": "Dan Grigsby",
        "timestamp": 1704492045
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"488951\">Dan Grigsby</span> has marked this topic as resolved.</p>",
        "id": 411439357,
        "sender_full_name": "Notification Bot",
        "timestamp": 1704492148
    },
    {
        "content": "<p>I actually have an urge of writing one-line <code>calc</code> blocks, and the reason for this is that I would expect</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">calc</span>\n  <span class=\"n\">_</span> <span class=\"n\">rel</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n</code></pre></div>\n<p>to be the same as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">transitivity</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 411483280,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704525347
    },
    {
        "content": "<p>It's a bit annoying right now because I need to add a dummy second line just to see what the new goals are.</p>",
        "id": 411483281,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704525347
    },
    {
        "content": "<p>I was not planning on my finished code containing one-line <code>calc</code>s,  but now that I've spelled out my expectation above, it seems reasonable to replace <code>transitivity</code> by one-line <code>calc</code>s completely. One less tactic to learn is always good.</p>",
        "id": 411483282,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704525347
    },
    {
        "content": "<p><del>Sorry, this all got mixed up due to bad connection. The last message is supposed to be the first</del> EDIT: Now reordered</p>",
        "id": 411490591,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1704532481
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> has marked this topic as unresolved.</p>",
        "id": 411490601,
        "sender_full_name": "Notification Bot",
        "timestamp": 1704532496
    }
]