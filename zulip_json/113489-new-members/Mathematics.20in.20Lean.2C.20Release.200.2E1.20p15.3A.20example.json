[
    {
        "content": "<p>Can anybody help me to solve the example <code>example (h0 : d ≤ e) : c + exp (a + d) ≤ c + exp (a + e) := by sorry</code>?</p>",
        "id": 426193156,
        "sender_full_name": "Peter Dolland",
        "timestamp": 1710269700
    },
    {
        "content": "<p>How would you solve it on paper?</p>",
        "id": 426193851,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1710269953
    },
    {
        "content": "<p>The first thing I want to do is to get rid of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span> using the fact that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∀</mi><mi>a</mi><mi>b</mi><mi>c</mi><mo>∈</mo><mi mathvariant=\"double-struck\">R</mi><mo separator=\"true\">,</mo><mi>a</mi><mo>≤</mo><mi>b</mi><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><mi>c</mi><mo>+</mo><mi>a</mi><mo>≤</mo><mi>c</mi><mo>+</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">\\forall a b c \\in \\mathbb{R}, a \\le b \\implies c + a \\le c + b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.0391em;\"></span><span class=\"mord\">∀</span><span class=\"mord mathnormal\">ab</span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8833em;vertical-align:-0.1944em;\"></span><span class=\"mord mathbb\">R</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7184em;vertical-align:-0.024em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⟹</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span></p>",
        "id": 426195972,
        "sender_full_name": "Gaëtan Serré",
        "timestamp": 1710270751
    },
    {
        "content": "<p>You might want to have a look at <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Data/Nat/Basic.html#Nat.add_lt_add_left\">Nat.add_lt_add_left</a> in the mathlib...</p>",
        "id": 426199713,
        "sender_full_name": "Christian K",
        "timestamp": 1710272394
    },
    {
        "content": "<p>Probably not with <code>Nat</code> and not with <code>lt</code> in this case</p>",
        "id": 426200161,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1710272587
    },
    {
        "content": "<p>All required lemmas should be mentioned in the book, there is no need to guess lemmas here.</p>",
        "id": 426203689,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1710274005
    },
    {
        "content": "<p>Can anybody help me to solve the example <code>example (h0 : d ≤ e) : c + exp (a + d) ≤ c + exp (a + e) := by sorry</code>?<br>\nOkay, after some variations I have a solution:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">add_le_add_left</span>\n    <span class=\"n\">apply</span> <span class=\"n\">exp_le_exp.mpr</span>\n    <span class=\"n\">apply</span> <span class=\"n\">add_le_add_left</span> <span class=\"n\">h0</span>\n</code></pre></div>\n<p>But I do not understand, why I have to apply <code>exp_le_exp</code> in reverse direction: My manual proof would be: <code>h0 : d ≤ e</code> ~&gt;with <code>add_le_add_left</code> <code>a + d ≤ a + e</code> ~&gt;with <code>exp_le_exp</code> <code>exp (a + d) ≤ exp (a + e)</code>  ~&gt;with <code>add_le_add_left</code> <code>c + exp (a + d) ≤ c + exp (a + e)</code>.</p>",
        "id": 426378255,
        "sender_full_name": "Peter Dolland",
        "timestamp": 1710346809
    },
    {
        "content": "<p><code>add_le_add_left</code> might be seen as an abbreviation for <code>add_le_add_left_of_le</code>, and <code>exp_le_exp</code> for <code>exp_le_exp_iff_le</code>. Implication lemmas <code>x → y</code> are given names like \"y_of_x\", and bi-implication lemmas <code>x ↔ y</code> are given names like \"x_iff_y\". Mixing the two gives rise to a certain stylistic inconsistency, but I wouldn't worry about it.</p>\n<p>Here are some more symmetrical proofs:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Exponential</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">add_le_add_iff_left</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span>\n  <span class=\"n\">apply</span> <span class=\"n\">exp_le_exp.mpr</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">add_le_add_iff_left</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h0</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">add_le_add_iff_left</span><span class=\"o\">,</span> <span class=\"n\">exp_le_exp</span><span class=\"o\">,</span> <span class=\"n\">add_le_add_iff_left</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">e</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">add_le_add_iff_left</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">trans</span> <span class=\"n\">exp_le_exp</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">add_le_add_iff_left</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 426385932,
        "sender_full_name": "Richard Copley",
        "timestamp": 1710349010
    }
]