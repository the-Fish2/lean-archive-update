[
    {
        "content": "<p>I want to prove <code>cartesianProduct</code> distributes over <code>zipWith</code>, which I think is true but I'm missing the last part of it.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">MySemiring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n  <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n  <span class=\"n\">add_zero</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"n\">zero</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n  <span class=\"n\">zero_add</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">add</span> <span class=\"n\">zero</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n  <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n  <span class=\"n\">mul_one</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">one</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n  <span class=\"n\">one_mul</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">mul</span> <span class=\"n\">one</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n  <span class=\"n\">mul_add</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"n\">add_mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">MyIntSemiring</span> <span class=\"o\">:</span> <span class=\"n\">MySemiring</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">HAdd.hAdd</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">HMul.hMul</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span><span class=\"o\">⟩</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">cartesianProduct</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">):</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">::</span><span class=\"n\">bs</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">List.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">cartesianProduct</span> <span class=\"n\">f</span> <span class=\"n\">as</span> <span class=\"n\">bs</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">cartesianProduct_nil</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">cartesianProduct</span> <span class=\"n\">f</span> <span class=\"n\">as</span> <span class=\"o\">[]</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">cartesianProduct</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">nil_cartesianProduct</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">cartesianProduct</span> <span class=\"n\">f</span> <span class=\"o\">[]</span> <span class=\"n\">bs</span>  <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">cartesianProduct</span>\n  <span class=\"n\">induction</span> <span class=\"n\">bs</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">head</span> <span class=\"n\">tail</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">cartesianProduct</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">List.map_append</span><span class=\"o\">,</span> <span class=\"n\">List.nil_append</span><span class=\"o\">,</span> <span class=\"n\">List.map_nil</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">]</span>\n  <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">srZipWith</span> <span class=\"o\">[</span><span class=\"n\">sr</span> <span class=\"o\">:</span> <span class=\"n\">MySemiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">List.zipWith</span> <span class=\"n\">sr.add</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">srProd</span> <span class=\"o\">[</span><span class=\"n\">sr</span> <span class=\"o\">:</span> <span class=\"n\">MySemiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">cartesianProduct</span> <span class=\"n\">sr.mul</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">10</span><span class=\"o\">,</span> <span class=\"mi\">20</span><span class=\"o\">,</span> <span class=\"mi\">30</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">zs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">100</span><span class=\"o\">,</span> <span class=\"mi\">200</span><span class=\"o\">,</span> <span class=\"mi\">300</span><span class=\"o\">]</span>\n<span class=\"bp\">#</span><span class=\"n\">test</span> <span class=\"n\">srProd</span> <span class=\"n\">xs</span> <span class=\"o\">(</span><span class=\"n\">srZipWith</span> <span class=\"n\">ys</span> <span class=\"n\">zs</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">srZipWith</span> <span class=\"o\">(</span><span class=\"n\">srProd</span> <span class=\"n\">xs</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">srProd</span> <span class=\"n\">xs</span> <span class=\"n\">zs</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">srProd_srZipWith</span> <span class=\"o\">[</span><span class=\"n\">sr</span> <span class=\"o\">:</span> <span class=\"n\">MySemiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"n\">bs</span> <span class=\"n\">cs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">srProd</span> <span class=\"n\">as</span> <span class=\"o\">(</span><span class=\"n\">srZipWith</span> <span class=\"n\">bs</span> <span class=\"n\">cs</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">srZipWith</span> <span class=\"o\">(</span><span class=\"n\">srProd</span> <span class=\"n\">as</span> <span class=\"n\">bs</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">srProd</span> <span class=\"n\">as</span> <span class=\"n\">cs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">cs</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">srZipWith</span> <span class=\"n\">srProd</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">List.zipWith_nil</span><span class=\"o\">,</span> <span class=\"n\">cartesianProduct_nil</span> <span class=\"n\">sr.mul</span><span class=\"o\">]</span>\n  <span class=\"o\">}</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">headc</span> <span class=\"n\">tailc</span> <span class=\"n\">ihc</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n    <span class=\"n\">cases</span> <span class=\"n\">bs</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">srZipWith</span><span class=\"o\">,]</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">List.zipWith_nil</span><span class=\"o\">]</span>\n      <span class=\"n\">unfold</span> <span class=\"n\">srProd</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">cartesianProduct_nil</span><span class=\"o\">,</span> <span class=\"n\">List.nil_zipWith</span><span class=\"o\">]</span>\n    <span class=\"o\">}</span>\n    <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">headb</span> <span class=\"n\">tailb</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n      <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">srZipWith</span><span class=\"o\">,</span> <span class=\"n\">List.zipWith</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">srZipWith</span><span class=\"o\">]</span>\n      <span class=\"c\">/-</span>\n<span class=\"cm\">      case cons.cons</span>\n<span class=\"cm\">      α : Type</span>\n<span class=\"cm\">      sr : MySemiring α</span>\n<span class=\"cm\">      as : List α</span>\n<span class=\"cm\">      headc : α</span>\n<span class=\"cm\">      tailc : List α</span>\n<span class=\"cm\">      headb : α</span>\n<span class=\"cm\">      tailb : List α</span>\n<span class=\"cm\">      ihc : srProd as (srZipWith (headb :: tailb) tailc) = srZipWith (srProd as (headb :: tailb)) (srProd as tailc)</span>\n<span class=\"cm\">      ⊢ srProd as (MySemiring.add headb headc :: srZipWith tailb tailc) =</span>\n<span class=\"cm\">        srZipWith (srProd as (headb :: tailb)) (srProd as (headc :: tailc))</span>\n<span class=\"cm\">      -/</span>\n      <span class=\"gr\">sorry</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 435301493,
        "sender_full_name": "Iocta",
        "timestamp": 1714012721
    },
    {
        "content": "<p>Just at a glance, but I see you have proven lemmas for <code>cartesianProduct_nil</code>, perhaps what you need is <code>cartesianProduct_cons</code>?</p>",
        "id": 435309424,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1714018765
    },
    {
        "content": "<p>So far whenever I've felt the need for <code>cartesianProduct_cons</code> I've been able to use <code>rw [cartesianProduct]</code>, as far as I can tell.</p>",
        "id": 435313796,
        "sender_full_name": "Iocta",
        "timestamp": 1714022188
    }
]