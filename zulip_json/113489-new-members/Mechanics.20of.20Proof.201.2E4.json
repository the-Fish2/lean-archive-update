[
    {
        "content": "<p>Hello! <br>\nI am rather new/rusty when it comes to LEAN and Zulip, so if there are better ways or threads to share my questions/code/work, please let me know. </p>\n<p>I am working through the first chapter of Heather MacBeth's book Mechanics of Proof, and I am beginning to doubt my understanding of the LEAN infoview and the tactic state. </p>\n<p>For this exercise: <br>\n<a href=\"/user_uploads/3121/S6PHXkNk4h1l51BsAY0_fTQA/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/S6PHXkNk4h1l51BsAY0_fTQA/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/S6PHXkNk4h1l51BsAY0_fTQA/image.png\"></a></div><p>I produced the following LEAN proof: <br>\n<a href=\"/user_uploads/3121/XTQKGjtkuT0Vxea5qM6znZ-0/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/XTQKGjtkuT0Vxea5qM6znZ-0/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/XTQKGjtkuT0Vxea5qM6znZ-0/image.png\"></a></div><p>So far, I have been relying on the tactic state to 'check' whether LEAN agrees that the given justification (tactic?) suffices to deduce my conclusion on the RHS. <br>\nIf I see 'No Goals,' I interpret that as meaning that LEAN can produce a valid deduction, in this case using the <em>rel</em> rule and the stated hypotheses. <br>\nIf I see any error, it means the hypotheses are insufficient or the rule is inappropriate. </p>\n<p>When I constructed the first line manually, to see which hypotheses were necessary, I did; <br>\n<a href=\"/user_uploads/3121/s7NEslnTEOaK5OTrmp_OIb9O/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/s7NEslnTEOaK5OTrmp_OIb9O/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/s7NEslnTEOaK5OTrmp_OIb9O/image.png\"></a></div><p>Where h6 and h7 are necessary to justify the steps</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi><mo>≤</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">y \\leq B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8304em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> <br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⇓</mo></mrow><annotation encoding=\"application/x-tex\">\\Downarrow</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mrel\">⇓</span></span></span></span><br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi><mi>y</mi><mo>≤</mo><mi>u</mi><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">uy \\leq uB</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8304em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> </p>\n<p>and</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>≤</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">x \\leq B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> <br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⇓</mo></mrow><annotation encoding=\"application/x-tex\">\\Downarrow</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mrel\">⇓</span></span></span></span><br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi><mi>x</mi><mo>≤</mo><mi>v</mi><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">vx \\leq vB</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">vx</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> </p>\n<p>Respectively, are they not? Otherwise we cannot guarantee that the direction of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo></mrow><annotation encoding=\"application/x-tex\">\\leq</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mrel\">≤</span></span></span></span> does not flip. </p>\n<p>So, in my manual solution, I had the first line in the calc justified := by rel [h4,h5,h6,h7]<br>\nBut the infoview showed that the goal was closed after only [h4,h5]! </p>\n<p>I'm asking for a bit of guidance as to where exactly my misunderstanding lies. <br>\nAm I just forgetting facts about inequalities? <br>\nAm I mistaken in thinking that all hypotheses should be used? <br>\nHow should I be using the LEAN infoview to guide my derivations? <br>\nWhere are the errors in my manual derivation or the LEAN derivation? </p>\n<p>I appreciate any time you are willing to devote to address my questions, and I am happy to clarify any point I made. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>\n</code></pre></div>",
        "id": 437885080,
        "sender_full_name": "Adam Millar",
        "timestamp": 1715288083
    },
    {
        "content": "<p>I think the deal is that the <code>rel</code> tactic tries to automatically prove side conditions using <code>positivity</code>, which can make use of hypotheses like <code>h6</code> and <code>h7</code> by itself. You could try <code>by clear h6 h7; rel [h4, h5]</code> to check whether <code>h6</code> and <code>h7</code> are necessary for the <code>rel</code> tactic to succeed.</p>",
        "id": 437887572,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715289118
    },
    {
        "content": "<p>That's just one experiment I thought of, but there are other techniques to see whether a particular hypotheses was used inside a particular tactic proof too.</p>",
        "id": 437887802,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715289224
    },
    {
        "content": "<p>Generally speaking, assuming your source is syntactically correct, and you don't see any errors (indicated by red squiggles in the source text), if your cursor is right after a particular tactic then if you see \"No Goals\" in the Infoview you know that the tactic has solved the goals.</p>",
        "id": 437888230,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715289452
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Mechanics.20of.20Proof.201.2E4/near/437887572\">said</a>:</p>\n<blockquote>\n<p><code>clear h6 h7; rel [h4, h5]</code></p>\n</blockquote>\n<p>Thank you for your response! <br>\nI tried the  <code>by clear h6 h7; rel [h4, h5]</code> as you suggested and it did cause the error you indicated, so yes the hypotheses are necessary. <br>\nI'm interested in the pedagogical uses of LEAN and the goals of this book, so it's fascinating to see places where, on the one hand, we want the 'rigor' of knowing that all of our hypotheses are necessary, at the same time as the brevity of LEAN performing some 'trivial' or 'obvious' derivations 'under the hood' and out of sight.</p>",
        "id": 437889271,
        "sender_full_name": "Adam Millar",
        "timestamp": 1715289954
    },
    {
        "content": "<p>This is a very well-known challenge of using a proof assistant for teaching. We want the proof assistant to do automatically what we wouldn’t want students to explain on paper. But this is extremely poorly specified (and also non-trivial to implement).</p>",
        "id": 437889631,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715290134
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/Mechanics.20of.20Proof.201.2E4/near/437889631\">said</a>:</p>\n<blockquote>\n<p>This is a very well-known challenge of using a proof assistant for teaching. We want the proof assistant to do automatically what we wouldn’t want students to explain on paper. But this is extremely poorly specified (and also non-trivial to implement).</p>\n</blockquote>\n<p>Poorly specified AND prone to change. <br>\nEarly in a topic I may want to emphasize that small details are technically necessary to draw valid deductions. <br>\nLater I will say that, in many cases, we don't need exhaustive derivations; the level of rigor will change. <br>\nOnce we've seen that it is technically necessary, we can acknowledge that full rigor would waste time or miss the point. <br>\nI'm curious then, how choices are made about which things LEAN does 'automatically,' and what this would look like from a student's perspective.</p>",
        "id": 437892404,
        "sender_full_name": "Adam Millar",
        "timestamp": 1715291474
    },
    {
        "content": "<p>For instance, in this book, we use <code>ring</code> for Z, Q, and R, and while <em>I</em> am curious about, for each exercise, why in this case the variables need only be integers, while in another they must be rationals, depending on which ring properties are necessary, I feel to a student who as never encountered the notion of a ring will see things like <code>n : ℤ</code> as essentially arbitrary</p>",
        "id": 437892886,
        "sender_full_name": "Adam Millar",
        "timestamp": 1715291729
    },
    {
        "content": "<p>Heather's made her own dialect of Lean for this book, taking into account pedagogical aspects of learning to prove things. You can look around in the project directory for some explanations. For example, the <a href=\"https://github.com/hrmacbeth/math2001/blob/main/Library/Config/Constructor.lean\"><code>constructor</code></a> tactic is restricted to only work with certain types.</p>\n<p>For \"production grade\" Lean, instead tactics are designed to get things done. If there's a pedagogical aspect, it's centered around learning what tactics do, not around learning how to prove things. Lots of tactics will incorporate some extra reasoning if it's not algorithmically expensive to do so (for example, <code>positivity</code> finding all the relevant hypotheses automatically, rather than requiring that they be specified by the user).</p>",
        "id": 437893885,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1715292223
    },
    {
        "content": "<p>Adam, you may also be interested in <a href=\"https://github.com/PatrickMassot/verbose-lean4/blob/master/README.md\">https://github.com/PatrickMassot/verbose-lean4/blob/master/README.md</a>. Among other things, this library allows some automation tuning.</p>",
        "id": 437911867,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715305517
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"462042\">@Adam Millar</span> My personal approach to teaching this point (the necessity of positivity side conditions in inequality calculations) is:</p>\n<ol>\n<li>teach the naive calculus of \"substitution\" of inequalities, like in <a href=\"https://hrmacbeth.github.io/math2001/01_Proofs_by_Calculation.html#id33\">Examples 1.4.1</a>-<a href=\"https://hrmacbeth.github.io/math2001/01_Proofs_by_Calculation.html#shorthand\">4</a>, then </li>\n<li>give some trickier examples, like <a href=\"https://hrmacbeth.github.io/math2001/01_Proofs_by_Calculation.html#id41\">Example 1.4.5</a>, which tempt students to make \"wrong\" substitutions, and let the fact that <code>rel</code> fails here alert students to the subtlety.</li>\n</ol>\n<p>Have you been looking at the <a href=\"https://hrmacbeth.github.io/math2001/01_Proofs_by_Calculation.html#proving-inequalities\">HTML text of the book</a> as well as the Lean files?  There are several discussions of this point about positivity side conditions (in Example 1.4.1, 1.4.2, 1.4.4, 1.4.5).</p>",
        "id": 438014419,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1715360038
    },
    {
        "content": "<p>[Quoting…]</p>\n<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> thank you for your reply. <br>\nI like this resource, and how it streamlines investigating exactly what tactics do. <br>\nI also like the name, as I know I lean toward the exhaustive, <em>verbose</em> side of constructing proofs. <br>\nI confess to being unsure exactly how to implement it though. <br>\nI have been working just in the gitpod environment where I've loaded Heather's book and LEAN itself. <br>\nHow exactly would I add the Verbose LEAN Library?</p>",
        "id": 438032216,
        "sender_full_name": "Adam Millar",
        "timestamp": 1715367456
    },
    {
        "content": "<p>You can create your own Lean project that uses the library. Currently there is no full course using the Lean 4 version of this library.</p>",
        "id": 438033004,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715367830
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/113489-new-members/topic/Mechanics.20of.20Proof.201.2E4/near/438014419\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"462042\">Adam Millar</span> My personal approach to teaching this point (the necessity of positivity side conditions in inequality calculations) is:</p>\n<ol>\n<li>teach the naive calculus of \"substitution\" of inequalities, like in <a href=\"https://hrmacbeth.github.io/math2001/01_Proofs_by_Calculation.html#id33\">Examples 1.4.1</a>-<a href=\"https://hrmacbeth.github.io/math2001/01_Proofs_by_Calculation.html#shorthand\">4</a>, then </li>\n<li>give some trickier examples, like <a href=\"https://hrmacbeth.github.io/math2001/01_Proofs_by_Calculation.html#id41\">Example 1.4.5</a>, which tempt students to make \"wrong\" substitutions, and let the fact that <code>rel</code> fails here alert students to the subtlety.</li>\n</ol>\n<p>Have you been looking at the <a href=\"https://hrmacbeth.github.io/math2001/01_Proofs_by_Calculation.html#proving-inequalities\">HTML text of the book</a> as well as the Lean files?  There are several discussions of this point about positivity side conditions (in Example 1.4.1, 1.4.2, 1.4.4, 1.4.5).</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> <br>\nThank you for your reply!<br>\nYes, I have been reading along with the HTML file. <br>\nI'm trying my best to mimic the student experience you outline in the Preface, with one window for the textbook, one for gitpod running the repository with LEAN, and my own handwritten versions of the proofs. </p>\n<p>I realize that my goals for learning more about LEAN have a slight tension with your stated goal that \"most of your intellectual effort in solving the problems will be devoted to the mathematics, not to Lean’s implementation details or quirks of syntax.\" <br>\nBut the book, and discussions like this about your choices,  are certainly excellent resources for seeing how a theorem prover can part of a course. </p>\n<p>One obstacle I think I have to seeing how the course meets that goal is that I don't have the the 25mins of blackboard instruction you mention being part of the typical lesson for the course. </p>\n<p>My guess is that you follow the same kind of narrative about transitioning from equational reasoning to inequalities, all manually.<br>\nYou solve a few (1.4.1, 1.4.2) that can be solved naively. <br>\nIs the idea that you demonstrate, before using LEAN at all, that the naive approach can lead to mistakes, and then show how LEAN can help us catch these mistakes? <br>\nAs you say for 1.4.6 \"Also try writing out the incorrect solution in Lean, and check that Lean complains.\"</p>\n<p>Regarding my difficulty with 1.4.4, re-reading your discussing under the solution, is the idea here that while h6 and h7 (the non-negativity of u and v) <em>must be part of the context</em> for the calculation, LEAN aligns with the typical mathematical practice of omitting reference to these 'obvious' facts by making use of them 'silently.' <br>\nThat is, <em>we need not reference them explicitly as a hypothesis for <code>rel</code></em>?</p>",
        "id": 438035215,
        "sender_full_name": "Adam Millar",
        "timestamp": 1715369167
    },
    {
        "content": "<p>If you want to play in GitPod, I added the necessary setup. So you can go to <a href=\"https://gitpod.io/new/#https://github.com/patrickmassot/verbose-lean4\">https://gitpod.io/new/#https://github.com/patrickmassot/verbose-lean4</a> and use the file explorer to open <code>Verbose/English/Examples.lean</code> if you want to play a bit.</p>",
        "id": 438036081,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715369686
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"462042\">Adam Millar</span> <a href=\"#narrow/stream/113489-new-members/topic/Mechanics.20of.20Proof.201.2E4/near/438035215\">said</a>:</p>\n<blockquote>\n<p>My guess is that you follow the same kind of narrative about transitioning from equational reasoning to inequalities, all manually.<br>\nYou solve a few (1.4.1, 1.4.2) that can be solved naively. <br>\nIs the idea that you demonstrate, before using LEAN at all, that the naive approach can lead to mistakes, and then show how LEAN can help us catch these mistakes? <br>\nAs you say for 1.4.6 \"Also try writing out the incorrect solution in Lean, and check that Lean complains.\"</p>\n</blockquote>\n<p>Yes, that's right!</p>",
        "id": 438042439,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1715373184
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"462042\">Adam Millar</span> <a href=\"#narrow/stream/113489-new-members/topic/Mechanics.20of.20Proof.201.2E4/near/438035215\">said</a>:</p>\n<blockquote>\n<p>Regarding my difficulty with 1.4.4</p>\n</blockquote>\n<blockquote>\n<p>is the idea here that while h6 and h7 (the non-negativity of u and v) <em>must be part of the context</em> for the calculation, LEAN aligns with the typical mathematical practice of omitting reference to these 'obvious' facts by making use of them 'silently.' <br>\nThat is, <em>we need not reference them explicitly as a hypothesis for <code>rel</code></em>?</p>\n</blockquote>\n<p>Yes, that's right.  Although as Kyle noted above, it's wrong to say that \"Lean\" does this.  Rather, <em>the particular Lean libraries and Lean configuration options in my course repository</em> do this, because I set them up to follow my own pedagogical preferences on this point.</p>\n<p>Off-the-shelf Lean with no libraries requres <em>more</em> input from the user in this situation.  And mainstream Mathlib-style Lean requires <em>less</em> input from the user!  (See the description of the tactic <code>gcongr</code> in the <a href=\"https://hrmacbeth.github.io/math2001/Mainstream_Lean.html\">appendix to my book</a>.)</p>",
        "id": 438043883,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1715374038
    },
    {
        "content": "<p>You might like to try the following experiment: change <code>rel [h4, h5]</code> to <code>show_term rel [h4, h5]</code>, then look at the output in the infoview (the panel on the right).  You'll see the \"term\" that <code>rel [h4, h5]</code> is constructing (which indeed involves <code>h6</code> and <code>h7</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">add_le_add_right</span>\n  <span class=\"o\">(</span><span class=\"n\">add_le_add</span>\n    <span class=\"o\">(</span><span class=\"n\">mul_le_mul_of_nonneg_left</span> <span class=\"n\">h5</span>\n      <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">Mathlib.Meta.Positivity.nonneg_of_isNat</span> <span class=\"o\">(</span><span class=\"n\">Mathlib.Meta.NormNum.isNat_ofNat</span> <span class=\"n\">ℝ</span> <span class=\"n\">Nat.cast_zero</span><span class=\"o\">))</span> <span class=\"n\">h6</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">mul_le_mul_of_nonneg_left</span> <span class=\"n\">h4</span>\n      <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">Mathlib.Meta.Positivity.nonneg_of_isNat</span> <span class=\"o\">(</span><span class=\"n\">Mathlib.Meta.NormNum.isNat_ofNat</span> <span class=\"n\">ℝ</span> <span class=\"n\">Nat.cast_zero</span><span class=\"o\">))</span> <span class=\"n\">h7</span><span class=\"o\">)))</span>\n  <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 438044372,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1715374281
    }
]