[
    {
        "content": "<p>Here's something a bit confusing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">test1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">wrap</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span> <span class=\"bp\">â†’</span> <span class=\"n\">test1</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">test2</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"n\">wrap</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n</code></pre></div>\n<p>a <code>Repr</code> instance is derivable for <code>test2</code>, but not <code>test1</code>. Is there an idiomatic way to rewrite <code>test1</code>, keeping it as an inductive type (in the real-world case there might be other constructors), but making <code>Repr</code> derivable? Ideally it would be nice to do this without adding an auxiliary structure like <code>test2</code> just for wrapping purposes.</p>",
        "id": 434181985,
        "sender_full_name": "Graham Leach-Krouse",
        "timestamp": 1713457380
    },
    {
        "content": "<p>Thanks for the report. <a href=\"https://github.com/leanprover/lean4/pull/3944\">lean4#3944</a> has a fix</p>",
        "id": 434210844,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1713462505
    }
]