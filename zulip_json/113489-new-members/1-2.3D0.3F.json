[
    {
        "content": "<p>For Nat, 1-2=0. For me, this is somewhat unacceptable, kind of smell like the wierdness of javascript. Lol.</p>",
        "id": 425379124,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709839580
    },
    {
        "content": "<p>I feel like -: Nat -&gt; Nat -&gt; Integer should be a better signature. Lol. I know this is too big a change to ask for now. But I'm just expressing a feeling.</p>",
        "id": 425379443,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709839692
    },
    {
        "content": "<p>If you want to prove things about ℕ then <code>-</code> always takes you out of ℕ, is that desirable?</p>",
        "id": 425380011,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1709839867
    },
    {
        "content": "<p>That's even more serious.</p>",
        "id": 425380096,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709839897
    },
    {
        "content": "<p>You can just write <code>(1 : \\Z)</code> to prove stuff about <code>Integer</code>.</p>",
        "id": 425380101,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709839899
    },
    {
        "content": "<p>Proofs requires rigor. 1-2=0 is not justified.</p>",
        "id": 425380144,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709839920
    },
    {
        "content": "<p>The <code>0</code> here does not mean the value 0, but is Lean's way of expressing undefined (as a junk value)</p>",
        "id": 425380243,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709839942
    },
    {
        "content": "<p>I see</p>",
        "id": 425380284,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709839957
    },
    {
        "content": "<p>You also have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∑</mo><mrow><mi>a</mi><mo>≥</mo><mn>1</mn></mrow></msub><mi>a</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">\\sum_{a \\geq 1} a = 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1449em;vertical-align:-0.3949em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">a</span><span class=\"mrel mtight\">≥</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3949em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mo>∫</mo><mn>0</mn><mn>1</mn></msubsup><mfrac><mn>1</mn><mi>x</mi></mfrac><mi mathvariant=\"normal\">d</mi><mi>x</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">\\int_0^1 \\frac{1}{x} \\mathrm{d}x = 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.3648em;vertical-align:-0.3558em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"margin-right:0.19445em;position:relative;top:-0.0006em;\">∫</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.009em;\"><span style=\"top:-2.3442em;margin-left:-0.1945em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span><span style=\"top:-3.2579em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3558em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord mathrm\">d</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>0</mn><mn>0</mn></msup><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">0^0 = 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>, and probably many many more seemingly exotic ones, as they are all trash values</p>",
        "id": 425380390,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709839998
    },
    {
        "content": "<p>Trash values should be displayed as NAN?</p>",
        "id": 425380455,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709840030
    },
    {
        "content": "<p>Integer overflow is a serious UB. In Lean, I guess one should avoid UB as much as possible.</p>",
        "id": 425380550,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709840055
    },
    {
        "content": "<p>1=1-2+2=0+2. Lol.<br>\nThe point is, minus: Nat -&gt; Nat -&gt; Nat is not that useful as a function, so it doesn't hurt to make it rigorous.<br>\nFor proving things with minus, one goes to Z because that's where most theorems are using.</p>",
        "id": 425381064,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709840245
    },
    {
        "content": "<p>Nat itself is kindof like an induction vehicle. Minus is not necessary for it. Unless somewhere a bunch of mathematicians agree to define -: Nat-&gt; Nat like that, it's somewhat a language design smell to me.</p>",
        "id": 425381241,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709840316
    },
    {
        "content": "<p>Why not just start in ℤ?</p>",
        "id": 425381273,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1709840338
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> has marked this topic as resolved.</p>",
        "id": 425381298,
        "sender_full_name": "Notification Bot",
        "timestamp": 1709840355
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> has marked this topic as unresolved.</p>",
        "id": 425381304,
        "sender_full_name": "Notification Bot",
        "timestamp": 1709840359
    },
    {
        "content": "<p>I'm just saying, from a language design point of view, there should be as few confusion as possible. \"Why not doing XXX\" is not a proper answer. minus: Nat-&gt;Nat-&gt;Nat should either not exist at all or behave in an expected natural manner. I seek justification for 1-2=0. As this is mentioned in the book Functional Programming in Lean, this could be misleading.</p>",
        "id": 425381743,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709840527
    },
    {
        "content": "<p>It takes great effort to build a great language. As a Lean is going to become one in my viewpoint, I hold it to high standards. It's not like a scripting language. Lol</p>",
        "id": 425381884,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709840606
    },
    {
        "content": "<p>In math, it's very common for an operation to be not closed. -: Nat -&gt; Nat-&gt; Z in my humble unimportant opinions is the right signature.</p>",
        "id": 425382142,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709840699
    },
    {
        "content": "<blockquote>\n<p>there should be as few confusion as possible</p>\n</blockquote>\n<p>From a type-theoretic perspective, the difference between two ℕ being in ℤ seems <strong>less</strong> confusing to you?</p>",
        "id": 425382651,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1709840904
    },
    {
        "content": "<p>Also I'm a newbie, so there might be some real convenience this convention brings that I don't know</p>",
        "id": 425382704,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709840929
    },
    {
        "content": "<p>Oh, I'm not familiar with type theory. I only have a newbie perspective.</p>",
        "id": 425382771,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709840955
    },
    {
        "content": "<p>Logicians use cut subtraction. It's almost universal. The convenience comes from logic, not Lean and not even type theory.</p>",
        "id": 425382793,
        "sender_full_name": "Richard Copley",
        "timestamp": 1709840962
    },
    {
        "content": "<p>I see.</p>",
        "id": 425382830,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709840973
    },
    {
        "content": "<p>I only have experience with other branches of math</p>",
        "id": 425382915,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709840998
    },
    {
        "content": "<p>If you're thinking about Lean (Or any language with an expressive type system) as a programming language, you should be getting in the habit of modelling your domain using types. </p>\n<p>Unless you know there can/should never be negative numbers (say when you're indexing into an array), then ℤ is going to be a better choice than ℕ.</p>",
        "id": 425384012,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1709841325
    },
    {
        "content": "<p>From a programming point of view, lists in Lean is indexed by Nat. So I guess Nat is playing the role of usize.</p>",
        "id": 425384044,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709841343
    },
    {
        "content": "<p>In Rust, usize overflows</p>",
        "id": 425384064,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709841354
    },
    {
        "content": "<p>I would argue programming conventions matters more than logicians' conventions because Lean is intended as a programming language.</p>",
        "id": 425384161,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709841382
    },
    {
        "content": "<p>I do have plenty of experience of using type to model my domain. It's actually because of my experience of using type to model my domain that I found this behavior of Lean being unpleasant.</p>",
        "id": 425384396,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709841477
    },
    {
        "content": "<p>I mean... the notable library here is Mathlib. Which for obviously reasons has an emphasis on logic.</p>",
        "id": 425384486,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1709841505
    },
    {
        "content": "<p>In the following, x = 1 without giving any error.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">a_</span><span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">as</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span>\n  <span class=\"k\">let</span> <span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">as</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"o\">]</span><span class=\"bp\">?</span>\n  <span class=\"n\">PUnit.unit</span>\n</code></pre></div>",
        "id": 425384500,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709841510
    },
    {
        "content": "<p>I see. I'm just trying to understand people's opinions and communicating my opinions.</p>",
        "id": 425384610,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709841549
    },
    {
        "content": "<p>Mathlib in my opinion is not about logic but about math. In other branches of maths, 1-2=-1</p>",
        "id": 425384680,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709841575
    },
    {
        "content": "<p>Making logic foundation as irrelevant as possible is in my unimportant opinions beneficial.</p>",
        "id": 425384862,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709841621
    },
    {
        "content": "<p>The fact that <code>1 - 2 =  0</code> is about the same as how <code>1 / 2 = 0</code>. Why is the second one less surprising than the first?</p>",
        "id": 425385070,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709841700
    },
    {
        "content": "<p>Well, you're in for a bumpy ride then! </p>\n<p>Try this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 425385077,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1709841702
    },
    {
        "content": "<p>In my opinion, the design of Lean is to be good at both things, programming and proving. If Nat is serving both programming and proving purposes, it should avoid unnecessary confusion</p>",
        "id": 425385114,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709841711
    },
    {
        "content": "<p>I see.</p>",
        "id": 425385138,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709841719
    },
    {
        "content": "<p>By the way, this truncating subtraction is known as \"monus\". <a href=\"https://en.wikipedia.org/wiki/Monus\">https://en.wikipedia.org/wiki/Monus</a></p>",
        "id": 425385183,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709841723
    },
    {
        "content": "<p>Note that if <code>- : ℕ → ℕ → ℤ</code>, then <code>2-1 = 1</code>, but the last <code>1</code> would be <code>1: ℤ</code>.  This function is easy to define, it is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but it has the drawback that the result will <em>always</em> be an integer, and never a natural.</p>",
        "id": 425385238,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1709841744
    },
    {
        "content": "<p>I see</p>",
        "id": 425385276,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709841758
    },
    {
        "content": "<p>I would complain for Array access, one needs additional caution. If one wants to access the third element counting from the last, then one needs to make sure not overflowing.</p>",
        "id": 425385389,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709841812
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Int.subNatNat#doc\">docs#Int.subNatNat</a></p>",
        "id": 425385442,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709841839
    },
    {
        "content": "<p>1/2=0 is commonly understood as integer division taught in elementary school. I didn't learn monoid at elementary school. This is why I didn't think of 1/2=0.</p>",
        "id": 425385564,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709841879
    },
    {
        "content": "<p>It seems you're confusing \"monus\" and \"monad\", as well as <code>-</code> and <code>/</code>, in that sentence</p>",
        "id": 425385720,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709841930
    },
    {
        "content": "<p>For what it's worth, my first grade teacher told me that <code>1 - 2</code> is <code>0</code></p>",
        "id": 425385792,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709841962
    },
    {
        "content": "<p>No, I'm referring to the previous comment 1/2=0</p>",
        "id": 425385808,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709841962
    },
    {
        "content": "<p>I see. So it's indeed a convention.</p>",
        "id": 425385857,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709841982
    },
    {
        "content": "<p>My teacher never teaches me that</p>",
        "id": 425385869,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709841994
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466120\">Xiyu Zhai</span> <a href=\"#narrow/stream/113489-new-members/topic/1-2.3D0.3F/near/425385808\">said</a>:</p>\n<blockquote>\n<p>No, I'm referring to the previous comment 1/2=0</p>\n</blockquote>\n<p>This is also what C and Python 2 did, so I don't think it's all that outrageous</p>",
        "id": 425385918,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709842015
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466120\">Xiyu Zhai</span> <a href=\"#narrow/stream/113489-new-members/topic/1-2.3D0.3F/near/425385869\">said</a>:</p>\n<blockquote>\n<p>My teacher never teaches me that</p>\n</blockquote>\n<p>Oh, to be clear, I would not call that a convention! I'm not sure why she told us that. I think she just didn't want to have to explain negative numbers.</p>",
        "id": 425385964,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709842034
    },
    {
        "content": "<p>I only have python3 installed. Python3 1/2 is equal to 0.5.</p>",
        "id": 425386008,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709842058
    },
    {
        "content": "<p>The Python3 equivalent is <code>1//2</code></p>",
        "id": 425386040,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709842075
    },
    {
        "content": "<p>Btw, I'm not trolling. I just want to see what people think. I'm going to write a prover one day myself. I want to get the right design for everything.</p>",
        "id": 425386109,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709842094
    },
    {
        "content": "<p>Python 3 it changes to 1//2 because it's clearer right?</p>",
        "id": 425386133,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709842111
    },
    {
        "content": "<p>By the way, search for \"truncating subtraction\" on this zulip to see all the previous discussions.</p>",
        "id": 425386190,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709842144
    },
    {
        "content": "<p>If I'm a language designer, I would make monus accessed by a special symbol or ident, make the default minus: Nat -&gt;Nat-&gt;Integer.</p>",
        "id": 425386199,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709842148
    },
    {
        "content": "<p>Thanks</p>",
        "id": 425386209,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709842154
    },
    {
        "content": "<p>So, minus is controlled by a Typeclass (think a more powerful version of Rust's Traits). So the <code>-</code> operator is given meaning based on the types you use it with.</p>",
        "id": 425386464,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1709842236
    },
    {
        "content": "<p>Python c are hardly comparable. Let me check what Isabelle Coq does for this.</p>",
        "id": 425386465,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709842236
    },
    {
        "content": "<p>Meaning I can subtract two naturals, two integers, two reals, and get the more or less expected result assuming I'm familiar with the theory of each</p>",
        "id": 425386548,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1709842283
    },
    {
        "content": "<p>In Rust, one can customize the output type of the minus operation, not necessarily being the same of lean.</p>",
        "id": 425386563,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709842288
    },
    {
        "content": "<p>So it's not a question of typeclass.</p>",
        "id": 425386594,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709842303
    },
    {
        "content": "<p>Regarding monus; perhaps we could add this in a scope somewhere?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"sd\">/-- The monus operator; an alias for \"minus\" that should be used on truncating subtraction. -/</span>\n<span class=\"kd\">notation</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">monus</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"s2\">\" ∸ \"</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">PrettyPrinter</span> <span class=\"n\">Delaborator</span> <span class=\"n\">SubExpr</span> <span class=\"n\">Qq</span>\n<span class=\"sd\">/-- A delaborator that shows subtraction using ∸ if it isn't an additive group -/</span>\n<span class=\"kd\">@[</span><span class=\"n\">delab</span> <span class=\"n\">app.HSub.hSub</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">delabSub</span> <span class=\"o\">:</span> <span class=\"n\">Delab</span> <span class=\"o\">:=</span> <span class=\"n\">whenPPOption</span> <span class=\"n\">getPPNotation</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">getExpr</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">HSub.hSub</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHSub</span> <span class=\"n\">_</span> <span class=\"bp\">$</span><span class=\"n\">inst</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)⟩</span> <span class=\"bp\">←</span> <span class=\"n\">inferTypeQ'</span> <span class=\"n\">e</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n  <span class=\"c1\">-- strictly this only tests \"not canonically an additive group\", which may not coincide with `inst`</span>\n  <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">none</span> <span class=\"bp\">←</span> <span class=\"n\">trySynthInstanceQ</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">AddGroup</span> <span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n  <span class=\"k\">let</span> <span class=\"n\">lhs</span> <span class=\"bp\">←</span> <span class=\"n\">withAppFn</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">withAppArg</span> <span class=\"n\">delab</span>\n  <span class=\"k\">let</span> <span class=\"n\">rhs</span> <span class=\"bp\">←</span> <span class=\"n\">withAppArg</span> <span class=\"n\">delab</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">lhs</span> <span class=\"bp\">∸</span> <span class=\"bp\">$</span><span class=\"n\">rhs</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">37</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"c1\">-- 1 - 37 : ℤ</span>\n<span class=\"k\">#check</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">37</span>  <span class=\"c1\">-- 1 ∸ 37 : ℕ</span>\n</code></pre></div>",
        "id": 425386610,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709842307
    },
    {
        "content": "<p>It's a question of what you guys feel about what type -: Nat-&gt;Nat should return</p>",
        "id": 425386708,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709842338
    },
    {
        "content": "<p>One of the things to keep in mind is that the theory of \"junk values\" is that</p>\n<ol>\n<li>if we have an operation, we need to specify what it does outside its usual domain,</li>\n<li>we are writing proofs about everything, and if you're able to write a proof at all, that is evidence that what you wrote with <code>-</code> is meaningful</li>\n</ol>",
        "id": 425386781,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709842373
    },
    {
        "content": "<p>If people want to use monus, one can just use the method's name instead of making the default.</p>",
        "id": 425386810,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709842385
    },
    {
        "content": "<p>I see.</p>",
        "id": 425386824,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709842391
    },
    {
        "content": "<p>Is there a specification of junk values somewhere?</p>",
        "id": 425386867,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709842419
    },
    {
        "content": "<p>I'm trying to understand the design philosophy</p>",
        "id": 425386899,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709842430
    },
    {
        "content": "<p>I think the current convention makes perfect sense. If a have a sequence <code>u : ℕ → ℝ</code> I absolutely want to be able to write <code>u (2 - 1)</code></p>",
        "id": 425386983,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1709842448
    },
    {
        "content": "<p>It's case-by-case. Usually (or at least hopefully) docstrings explain what the junk values are and why.</p>",
        "id": 425386993,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709842454
    },
    {
        "content": "<p>Or if you know <code>h : 0 &lt; n</code>, you want to be able to write <code>u (n - 1)</code> without needing to feed the positivity proof to <code>-</code></p>",
        "id": 425387111,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709842499
    },
    {
        "content": "<p>But u : ℕ → ℝ  u (2 - 1) could lead to confusion.<br>\nu (1 - 2) gives u 0</p>",
        "id": 425387165,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709842511
    },
    {
        "content": "<p>Yes, exactly, it is the <a href=\"https://xenaproject.wordpress.com/2020/07/05/division-by-zero-in-type-theory-a-faq/\">usual</a> story.</p>",
        "id": 425387222,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1709842534
    },
    {
        "content": "<p>Yes, it could lead to confusion, but on the other hand you can see what you can prove about it.</p>",
        "id": 425387233,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709842536
    },
    {
        "content": "<p>I see</p>",
        "id": 425387272,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709842556
    },
    {
        "content": "<p>Now I understand better what the conventions in proof communities is like</p>",
        "id": 425387353,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709842576
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466120\">Xiyu Zhai</span> <a href=\"#narrow/stream/113489-new-members/topic/1-2.3D0.3F/near/425387165\">said</a>:</p>\n<blockquote>\n<p>But u : ℕ → ℝ  u (2 - 1) could lead to confusion.<br>\nu (1 - 2) gives u 0</p>\n</blockquote>\n<p>Yes, but why writing <code>u (1 - 2)</code>? In standard notation it doesn't make sense.</p>",
        "id": 425387377,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1709842586
    },
    {
        "content": "<p>It make sense to write u (i-2)</p>",
        "id": 425387430,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709842610
    },
    {
        "content": "<p>Well, not always, it makes sense only if <code>i ≥ 2</code>.</p>",
        "id": 425387481,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1709842629
    },
    {
        "content": "<p>I'm confused</p>",
        "id": 425387506,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709842641
    },
    {
        "content": "<p>I mean in standard mathematical notation</p>",
        "id": 425387524,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1709842650
    },
    {
        "content": "<p>It seems to me u (1-2) makes the same sense as u (2-1)</p>",
        "id": 425387546,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709842664
    },
    {
        "content": "<p>I failed to grasp the essence of your argument</p>",
        "id": 425387585,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709842680
    },
    {
        "content": "<p>You wouldn't write <code>u (1 - 2)</code> because you can see that <code>1 &lt; 2</code></p>",
        "id": 425387655,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709842696
    },
    {
        "content": "<p>The fact that people write thing like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>u</mi><mi>n</mi></msub><mo>=</mo><msub><mi>u</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>+</mo><msub><mi>u</mi><mrow><mi>n</mi><mo>−</mo><mn>2</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">u_n = u_{n-1} + u_{n-2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">u</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7917em;vertical-align:-0.2083em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">u</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2083em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6389em;vertical-align:-0.2083em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">u</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2083em;\"><span></span></span></span></span></span></span></span></span></span> for the Fibonacci sequence is just that people often don't write precise mathematics</p>",
        "id": 425387656,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1709842696
    },
    {
        "content": "<p>I see</p>",
        "id": 425387686,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709842708
    },
    {
        "content": "<p>I would like a prover that stays as close as common mathematics (algebra, geometry, analysis, combinatoris</p>",
        "id": 425387759,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709842742
    },
    {
        "content": "<p>Anyway there is nothing fundamental about our <code>-</code>, it is just a convention.</p>",
        "id": 425387766,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1709842745
    },
    {
        "content": "<p>I see thanks for your explanation</p>",
        "id": 425387789,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709842759
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/1-2.3D0.3F/near/425387655\">said</a>:</p>\n<blockquote>\n<p>You wouldn't write <code>u (1 - 2)</code> because you can see that <code>1 &lt; 2</code></p>\n</blockquote>\n<p>What I actually mean is u (i - 1) in the case where i might be zero</p>",
        "id": 425387862,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709842783
    },
    {
        "content": "<p>We spend a lot of time in making lean as close to standard mathematics as possible, our conclusion is that setting <code>1-2=0</code> is better than having <code>- : ℕ → ℕ → ℤ</code>. We may be wrong of course, but it is something based on a lot of experience.</p>",
        "id": 425387994,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1709842807
    },
    {
        "content": "<p>Exactly</p>",
        "id": 425388038,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709842823
    },
    {
        "content": "<p>I just want to learn the story behind the design</p>",
        "id": 425388073,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709842837
    },
    {
        "content": "<p>Language design is not a simple math equation to solve, it's complicated tradeoff between many things based on experience</p>",
        "id": 425388162,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709842893
    },
    {
        "content": "<p>Have you read <a href=\"https://xenaproject.wordpress.com/2020/07/05/division-by-zero-in-type-theory-a-faq/\">this</a>?</p>",
        "id": 425388340,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1709842970
    },
    {
        "content": "<p>I'm reading this. That's great conversation there</p>",
        "id": 425388416,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709842997
    },
    {
        "content": "<p>Note that a fundamental point is that we can not use \"undefined\" or any other value that is not in the codomain.</p>",
        "id": 425388428,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1709843001
    },
    {
        "content": "<p>I see.</p>",
        "id": 425388484,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709843030
    },
    {
        "content": "<p>Fyi, My background is mostly normal pure math and system level programming. I don't have expertise in provers. So I'm curious about the difference in design philosophy.</p>",
        "id": 425388748,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709843111
    },
    {
        "content": "<p>There are comments like this which is basically what I think but better conveyed.<br>\n\"I like this post but disagree with the conclusion. IMHO, “1 / 0 = 0” is actually the least harmful of such statements. “0 – 1 = 0” and “1 / 2 = 0” are much worse, for two reasons:</p>\n<ul>\n<li>When read literally, these are simply false (mathematically). Of course, Lean wants us to use e.g. “(0 : ℤ) – (1 : ℤ)” instead, but if “0 – 1” does not mean the same thing, that increases the chance that some formalized definition or theorem does not say what it is intended to say.\"<br>\nWell, thank you all. I learn a lot.</li>\n</ul>",
        "id": 425389031,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709843225
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466120\">Xiyu Zhai</span> has marked this topic as resolved.</p>",
        "id": 425389049,
        "sender_full_name": "Notification Bot",
        "timestamp": 1709843229
    },
    {
        "content": "<blockquote>\n<p>That increases the chance that some formalized definition or theorem does not say what it is intended to say.</p>\n</blockquote>\n<p>Yes, that is correct, we do have to be careful about that. <del>The PNT project has an example of that</del> :)</p>",
        "id": 425391494,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1709844234
    },
    {
        "content": "<p>With opaque data, you can make it so it's not possible to prove much about minus when it's in the truncating case. This particular one still evaluates to 0 during truncation, but you could get it to panic at runtime.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">opaque</span> <span class=\"n\">unknownNatForSub</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Nat.subAux'</span> <span class=\"o\">(</span><span class=\"n\">junk</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">m</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">junk</span>\n  <span class=\"bp\">|</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.subAux'</span> <span class=\"n\">junk</span> <span class=\"n\">m</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Nat.sub'</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.subAux'</span> <span class=\"o\">(</span><span class=\"n\">unknownNatForSub</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">notation</span> <span class=\"n\">m</span> <span class=\"s2\">\" -ₙ \"</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.sub'</span> <span class=\"n\">m</span> <span class=\"n\">n</span>\n\n<span class=\"c1\">-- What compiled code does:</span>\n<span class=\"k\">#eval</span> <span class=\"mi\">6</span> <span class=\"bp\">-ₙ</span> <span class=\"mi\">3</span> <span class=\"c1\">-- 3</span>\n<span class=\"k\">#eval</span> <span class=\"mi\">4</span> <span class=\"bp\">-ₙ</span> <span class=\"mi\">6</span> <span class=\"c1\">-- 0 (so still evaluates as monus)</span>\n<span class=\"c1\">-- How kernel reduction sees it:</span>\n<span class=\"k\">#reduce</span> <span class=\"mi\">6</span> <span class=\"bp\">-ₙ</span> <span class=\"mi\">3</span> <span class=\"c1\">-- 3</span>\n<span class=\"k\">#reduce</span> <span class=\"mi\">4</span> <span class=\"bp\">-ₙ</span> <span class=\"mi\">6</span> <span class=\"c1\">-- unknownNatForSub 4 6</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">-ₙ</span> <span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">-ₙ</span> <span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">-ₙ</span> <span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- succeeds</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">-ₙ</span> <span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">-ₙ</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"bp\">-ₙ</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- succeeds</span>\n</code></pre></div>",
        "id": 425391574,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709844254
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466120\">Xiyu Zhai</span> has marked this topic as unresolved.</p>",
        "id": 425391968,
        "sender_full_name": "Notification Bot",
        "timestamp": 1709844397
    },
    {
        "content": "<p>I'm a newbie, so does \"opague\" means it's an external type?</p>",
        "id": 425392017,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709844421
    },
    {
        "content": "<p>No, it means that the Lean tries to prove the type is nonempty (using an Inhabited instance), and then it hides its value when proving things about it.</p>",
        "id": 425392124,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709844473
    },
    {
        "content": "<p>I see thanks a lot!</p>",
        "id": 425392277,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709844500
    },
    {
        "content": "<p>You can use <code>@[implemented_by]</code> to link an <code>opaque</code> definition up to another definition, either across the C FFI or to an unsafe Lean definition. But you can't prove anything about it.</p>",
        "id": 425392357,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709844535
    },
    {
        "content": "<p>Understood</p>",
        "id": 425392401,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709844553
    },
    {
        "content": "<p>(No need to resolve/unresolve on this zulip. We tend to be able to tell where discussions are still happening, and we don't go out of our way to look for \"unresolved\" discussions — if you still need an answer about something, you can always add a new message to a topic saying what you're still hoping to hear about.)</p>",
        "id": 425392787,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709844690
    },
    {
        "content": "<p>Thanks a lot! I understand now.</p>",
        "id": 425395464,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709845727
    },
    {
        "content": "<p>I think that the best solution for this should be that we use a modified notation for subtraction and division on naturals but leave them there because the computer scientists want them; computer scientists don't seem to be fussed about using notation like <code>&gt;+&gt;</code> or whatever their monad stuff is, I'm sure they won't mind minus-with-a-dot-on</p>",
        "id": 425439251,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1709868086
    },
    {
        "content": "<p>I wish they could have used &gt;*&gt; instead of * for separation logic. It's really hard for me to reinterpret * as a low precedence operator. It's hard to fight one's reading habits. 1-2=0 looks like the end of world to me. Lol.</p>",
        "id": 425440127,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709868633
    },
    {
        "content": "<p>The idea <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> had in <a href=\"#narrow/stream/113489-new-members/topic/1-2.3D0.3F/near/425386610\">this message</a> is interesting. It causes <code>a - b</code> to pretty print as <code>a ∸ b</code> when it's a subtraction for an algebraic structure that's not an additive group.</p>",
        "id": 425443207,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709870631
    },
    {
        "content": "<p>There has been talk about \"dev dependencies\" for lean projects, and I would like to add \"dev options\". It would be great if half of the people could choose to use Eric's delaborator and the other half chooses not to, without either party explicitly adding a line at the top of every file they open.</p>",
        "id": 425446076,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709872560
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466120\">Xiyu Zhai</span> <a href=\"#narrow/stream/113489-new-members/topic/1-2.3D0.3F/near/425386465\">said</a>:</p>\n<blockquote>\n<p>Python c are hardly comparable. Let me check what Isabelle Coq does for this.</p>\n</blockquote>\n<p>FYI, Isabelle and Coq are the same. (And Lean is heavily influenced by both.)</p>",
        "id": 425452366,
        "sender_full_name": "Chris Wong",
        "timestamp": 1709877199
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"294142\">Chris Wong</span> <a href=\"#narrow/stream/113489-new-members/topic/1-2.3D0.3F/near/425452366\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"466120\">Xiyu Zhai</span> <a href=\"#narrow/stream/113489-new-members/topic/1-2.3D0.3F/near/425386465\">said</a>:</p>\n<blockquote>\n<p>Python c are hardly comparable. Let me check what Isabelle Coq does for this.</p>\n</blockquote>\n<p>FYI, Isabelle and Coq are the same. (And Lean is heavily influenced by both.)</p>\n</blockquote>\n<p>The minor difference is that Isabelle and Coq are not programming languages. Lean starts to become a true programming language.</p>",
        "id": 425452660,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709877422
    },
    {
        "content": "<p>Isabelle and Coq are most certainly programming languages, there are still many many more programs written using Coq than with Lean (ok [citation needed] here but still)</p>",
        "id": 425459562,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1709881228
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/1-2.3D0.3F/near/425459562\">said</a>:</p>\n<blockquote>\n<p>Isabelle and Coq are most certainly programming languages, there are still many many more programs written using Coq than with Lean (ok [citation needed] here but still)</p>\n</blockquote>\n<p>Sure. What I mean is that Lean is like Coq+Ocaml.</p>",
        "id": 425466506,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709884974
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/1-2.3D0.3F/near/425446076\">said</a>:</p>\n<blockquote>\n<p>There has been talk about \"dev dependencies\" for lean projects, and I would like to add \"dev options\". It would be great if half of the people could choose to use Eric's delaborator and the other half chooses not to, without either party explicitly adding a line at the top of every file they open.</p>\n</blockquote>\n<p>This is already possible today by using a new <code>pp.</code> option instead of an <code>open scoped</code>, and letting people change the default in their lakefile</p>",
        "id": 425469933,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1709886502
    },
    {
        "content": "<p>But only in projects</p>",
        "id": 425469974,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709886525
    },
    {
        "content": "<p>I imagine a \"vscode\" user setting, that works while editing mathlib</p>",
        "id": 425470053,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709886564
    },
    {
        "content": "<p>Of course not literally a vscode user setting. But somehow a way to tweak things individually instead of at the project/community level</p>",
        "id": 425470250,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1709886614
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/1-2.3D0.3F/near/425391574\">said</a>:</p>\n<blockquote>\n<p>With opaque data, you can make it so it's not possible to prove much about minus when it's in the truncating case. This particular one still evaluates to 0 during truncation, but you could get it to panic at runtime.</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">opaque</span> <span class=\"n\">unknownNatForSub</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Nat.subAux'</span> <span class=\"o\">(</span><span class=\"n\">junk</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">m</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">junk</span>\n  <span class=\"bp\">|</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.subAux'</span> <span class=\"n\">junk</span> <span class=\"n\">m</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Nat.sub'</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.subAux'</span> <span class=\"o\">(</span><span class=\"n\">unknownNatForSub</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">notation</span> <span class=\"n\">m</span> <span class=\"s2\">\" -ₙ \"</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.sub'</span> <span class=\"n\">m</span> <span class=\"n\">n</span>\n\n<span class=\"c1\">-- What compiled code does:</span>\n<span class=\"k\">#eval</span> <span class=\"mi\">6</span> <span class=\"bp\">-ₙ</span> <span class=\"mi\">3</span> <span class=\"c1\">-- 3</span>\n<span class=\"k\">#eval</span> <span class=\"mi\">4</span> <span class=\"bp\">-ₙ</span> <span class=\"mi\">6</span> <span class=\"c1\">-- 0 (so still evaluates as monus)</span>\n<span class=\"c1\">-- How kernel reduction sees it:</span>\n<span class=\"k\">#reduce</span> <span class=\"mi\">6</span> <span class=\"bp\">-ₙ</span> <span class=\"mi\">3</span> <span class=\"c1\">-- 3</span>\n<span class=\"k\">#reduce</span> <span class=\"mi\">4</span> <span class=\"bp\">-ₙ</span> <span class=\"mi\">6</span> <span class=\"c1\">-- unknownNatForSub 4 6</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">-ₙ</span> <span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">-ₙ</span> <span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">-ₙ</span> <span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- succeeds</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">-ₙ</span> <span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">-ₙ</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"bp\">-ₙ</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- succeeds</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Does this rely on the idea that <code>unknownNatForSub</code> is always given a term like <code>λ_ _ ↦ 0</code>, which lets the code that runs return <code>0</code> without there being any proof of it?</p>",
        "id": 425520211,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1709905057
    },
    {
        "content": "<p>Ah, it uses the <code>Inhabited</code> typeclass for ℕ. That makes sense.</p>",
        "id": 425521138,
        "sender_full_name": "Mark Fischer",
        "timestamp": 1709905434
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/1-2.3D0.3F/near/425470250\">said</a>:</p>\n<blockquote>\n<p>Of course not literally a vscode user setting. But somehow a way to tweak things individually instead of at the project/community level</p>\n</blockquote>\n<p>I don't see why a VSCode user setting would be bad</p>",
        "id": 425569112,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1709921877
    },
    {
        "content": "<p>This looks like Avengers civil war</p>",
        "id": 425569235,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709921940
    },
    {
        "content": "<p>I support not having civil war</p>",
        "id": 425569328,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709921989
    },
    {
        "content": "<p>One way or another community having a uniform tweak is fine.</p>",
        "id": 425569440,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1709922024
    }
]