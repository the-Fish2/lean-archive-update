[
    {
        "content": "<p>I'm working on some proofs that different casting operators behave nicely. I'm finding it quite hard to reason about goals like <code>(↑↑x.hi.toNat).toNat = x.hi.toNat</code> because I can't keep track of the overloadings of <code>↑</code>. Is there a way to display this as something like (((x.hi.toNat) : \\N) : \\Z) = x.hi.toNat<code>? I've tried </code>set_option pp.coercions false<code>, but it doesn't help a lot because it just changes this to </code>x.hi.toNat.cast.cast.toNat`, which doesn't really help.</p>",
        "id": 438107933,
        "sender_full_name": "Michael George",
        "timestamp": 1715432437
    },
    {
        "content": "<p>You can try using a custom delaborator. But I can’t help you more without a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 438114179,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715438959
    },
    {
        "content": "<p>A super ad-hoc solution applying only to <code>Nat.cast</code> would be to put in your code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">PrettyPrinter</span> <span class=\"n\">Delaborator</span> <span class=\"n\">SubExpr</span> <span class=\"k\">in</span>\n<span class=\"kd\">@[</span><span class=\"n\">delab</span> <span class=\"n\">app.Nat.cast</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">natCastDelab</span> <span class=\"o\">:</span> <span class=\"n\">Delab</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">α</span> <span class=\"bp\">←</span> <span class=\"n\">withNaryArg</span> <span class=\"mi\">0</span> <span class=\"n\">delab</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">withNaryArg</span> <span class=\"mi\">2</span> <span class=\"n\">delab</span>\n  <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 438115680,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715440652
    },
    {
        "content": "<p>And you can throw in a <code>guard &lt;| (← getExpr).isAppOfArity ``Nat.cast 3</code> somewhere in case you have unapplied <code>Nat.cast</code> floating around.</p>",
        "id": 438115871,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1715440820
    }
]