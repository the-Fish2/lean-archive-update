[
    {
        "content": "<p>Are there general reasons to prefer one of the following over the other?  (Assuming that both work.)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hc</span><span class=\"o\">]</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>I might have guessed that the first would generally be preferred because <code>rw</code> should be more direct than <code>simp</code>: applying one rewrite rule in one way rather than applying a bunch of them in all ways.  But maybe there are other reasons to prefer the second.</p>\n<p>More generally, are there reasons to prefer fewer lines of code, at the possible expense of clarity?  For instance:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">thm1</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">thm2</span> <span class=\"n\">this</span>\n</code></pre></div>\n<p>vs.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">thm2</span> <span class=\"o\">(</span><span class=\"n\">thm1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 420750498,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1707522297
    },
    {
        "content": "<p>I think this mostly a matter of taste, and there is quite some variance, also in mathlib. But there is an unmistakable tendency towards short proofs.</p>",
        "id": 420768877,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1707538601
    },
    {
        "content": "<p>My guess is that the one tactic option takes fewer milliseconds than the two tactic option so the computer scientists argue that it's preferred. What benefit is the two tactic option giving you? It's not clear to me that it's any clearer in this case.</p>",
        "id": 420787427,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707559257
    },
    {
        "content": "<p>no real benefit, just a wild guess that <code>rw</code> might be efficient than <code>simp</code>.  It also feels a tad clearer since it says in which order the hypotheses are applied; for a more extreme example, compare <code>rw [ha, hb, hc]</code> to <code>simp only [ha, hb, hc]</code>.</p>",
        "id": 420787687,
        "sender_full_name": "Paul Nelson",
        "timestamp": 1707559510
    },
    {
        "content": "<p>I guess I'm used to mathematicians saying \"and now this follows from lemmas 3.2, 3.4 and proposition 4.1\"</p>",
        "id": 420788131,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707559960
    },
    {
        "content": "<p><code>rw</code> is easier to repair if the proof breaks, since it records the order the lemmas are used in</p>",
        "id": 420789873,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1707561765
    },
    {
        "content": "<p><code>simp_rw</code> then :)</p>",
        "id": 420790755,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707562650
    },
    {
        "content": "<p>As a reader, to me <code>simp only […]</code> can indicate an important suble difference from <code>rw</code>: </p>\n<ul>\n<li><code>simp</code> (often) means “transform the full goal into some particular form, everywhere”. There is often a high-level semantic intention behind it (achieving a normal form, unfolding a function everywhere, moving from one level of abstractions to another).</li>\n<li><code>rw</code> (often) means “we do equational reasoning,  and apply an important, carefully chosen rewrite at exactly one step”</li>\n</ul>\n<p>But I am perfectly aware that this is mostly a theoretical ideal, and in practice I use the tactic that works… :-)</p>",
        "id": 420793709,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1707565607
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"571592\">@Paul Nelson</span>  I think that at the end of the day mathlib has decided that the culture is \"proofs as small as possible and hang readability\". 95% of the lemmas in mathlib are mathematically trivial anyway (they are API for definitions, it's surprisingly rare that a lemma has any kind of nontrivial content, this is because it's important to write down all the trivialities) and for mathematically trivial lemmas nobody is going to read the proofs anyway because they don't need to. </p>\n<p>The issue has been raised before that mangling proofs intentionally might not be the best idea all the time, but actually for longer proofs there has been a movement to get people to document what's actually going on. The counterargument is that if you read the code in VS Code rather than just looking at a printout or a static web page, then you can usually figure out what's going on anyway.</p>",
        "id": 420837695,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1707604261
    }
]