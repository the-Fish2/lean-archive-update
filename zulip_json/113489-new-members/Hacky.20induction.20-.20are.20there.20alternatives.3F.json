[
    {
        "content": "<p>When trying to induct on the odd numbers of the form (n = 2*w +1), I had the issue again that induction step requires me to prove that the assumptions involving n hold rather than succ n which I think is rather impossible to do. A hack someone found was to clear the hypothesis involving n - see clear hn' and clear hn lines, before inducting on w.<br>\nBut I was wondering if there is a cleaner way of doing this?</p>\n<p>On the other hand, I was wondering if there is an easier way of doing computations that involve subtracting natural numbers (see the sorry), is there any tactic that works? simp does not help much, and doing it by hand is rather a lot of effort for what I think it should be. Should I maybe assume prove it for the integers and state that we only consider integers greatar than or equal to zero, so then I can use the ring tactic? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Factorization.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Prime</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Group.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"n\">q</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">question_5</span> <span class=\"o\">(</span><span class=\"n\">nodd</span> <span class=\"o\">:</span> <span class=\"n\">Odd</span> <span class=\"n\">n</span><span class=\"o\">)(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>  <span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">nodd</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">hn'</span><span class=\"o\">⟩</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hn'</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"n\">hw</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">w</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hn'</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hn</span>\n    <span class=\"n\">linarith</span>\n  <span class=\"n\">clear</span> <span class=\"n\">hn'</span>\n  <span class=\"n\">clear</span> <span class=\"n\">hn</span>\n  <span class=\"c1\">-- Simplify (2 * w + 1 - 1) / 2 to be w</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_sub_assoc</span><span class=\"o\">,</span> <span class=\"n\">Nat.sub_self</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">]</span>\n  <span class=\"n\">nth_rewrite</span> <span class=\"mi\">2</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span> <span class=\"mi\">2</span> <span class=\"n\">w</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.mul_div_cancel</span><span class=\"o\">]</span>\n  <span class=\"n\">repeat'</span> <span class=\"n\">linarith</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">hw</span> <span class=\"n\">using</span> <span class=\"n\">Nat.le_induction</span> <span class=\"k\">with</span> <span class=\"n\">w</span> <span class=\"n\">_hw</span> <span class=\"n\">ih</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span>\n      <span class=\"bp\">←</span> <span class=\"n\">succ_eq_add_one</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">Nat.mul_sub_left_distrib</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">sq</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span>\n      <span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">Nat.mul_sub_left_distrib</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span>\n      <span class=\"bp\">←</span> <span class=\"n\">sq</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Nat.pow_succ'</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span>\n      <span class=\"n\">computation_helper_q5</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Nat.add_sub_assoc</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"bp\">←</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span>\n      <span class=\"n\">Nat.add_sub_assoc</span><span class=\"o\">,</span> <span class=\"n\">Nat.sub_self</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span>\n      <span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">le_refl</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n    <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">pow_le_pow_right</span> <span class=\"n\">hx</span>\n      <span class=\"n\">linarith</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">hx</span>\n    <span class=\"c1\">-- Modify LHS</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span>\n    <span class=\"c1\">-- Modify RHS</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.sum_range_succ</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">add_assoc</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)),</span> <span class=\"n\">mul_add</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"bp\">←</span> <span class=\"n\">ih</span><span class=\"o\">]</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 419688978,
        "sender_full_name": "Alex Brodbelt",
        "timestamp": 1707043690
    },
    {
        "content": "<p>The result is false, you can see this using <code>slim_check</code></p>",
        "id": 419694521,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707049098
    },
    {
        "content": "<p>Anyway to get rid of natural subtraction you can use <code>zify [hx]</code>.</p>",
        "id": 419695018,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707049671
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/113489-new-members/topic/Hacky.20induction.20-.20are.20there.20alternatives.3F/near/419694521\">said</a>:</p>\n<blockquote>\n<p>The result is false, you can see this using <code>slim_check</code></p>\n</blockquote>\n<p>You are right! thanks - here is the corrected statement which is proved, but a bit ugly(?). How could I write the induction more cleanly rather than having to clear the hypothesis involving n?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Factorization.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Prime</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Group.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"n\">q</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">computation_helper_q6</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">w</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">h</span>\n    <span class=\"n\">nth_rewrite</span> <span class=\"mi\">2</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">zero_add</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">w</span>  <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_right_cancel</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n    <span class=\"n\">cases</span> <span class=\"n\">Nat.mul_eq_zero.mp</span> <span class=\"n\">h₁</span>\n    <span class=\"n\">case</span> <span class=\"n\">inl</span> <span class=\"n\">h'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">contradiction</span>\n    <span class=\"n\">case</span> <span class=\"n\">inr</span> <span class=\"n\">h'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">h'</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">h</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">question_5</span> <span class=\"o\">(</span><span class=\"n\">nodd</span> <span class=\"o\">:</span> <span class=\"n\">Odd</span> <span class=\"n\">n</span><span class=\"o\">)(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>  <span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">nodd</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">hn'</span><span class=\"o\">⟩</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hn'</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"n\">hx'</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">one_mul</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">sq</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">mul_le_mul'</span>\n    <span class=\"n\">repeat'</span> <span class=\"n\">exact</span> <span class=\"n\">hx</span>\n  <span class=\"k\">have</span> <span class=\"n\">hw</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">w</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hn'</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hn</span>\n    <span class=\"n\">linarith</span>\n  <span class=\"n\">clear</span> <span class=\"n\">hn'</span>\n  <span class=\"n\">clear</span> <span class=\"n\">hn</span>\n  <span class=\"c1\">-- Simplify (2 * w + 1 - 1) / 2 to be w</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_sub_assoc</span><span class=\"o\">,</span> <span class=\"n\">Nat.sub_self</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">]</span>\n  <span class=\"n\">nth_rewrite</span> <span class=\"mi\">2</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span> <span class=\"mi\">2</span> <span class=\"n\">w</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.mul_div_cancel</span><span class=\"o\">]</span>\n  <span class=\"n\">repeat'</span> <span class=\"n\">linarith</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">hw</span> <span class=\"n\">using</span> <span class=\"n\">Nat.le_induction</span> <span class=\"k\">with</span> <span class=\"n\">w</span> <span class=\"n\">_hw</span> <span class=\"n\">ih</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span>\n      <span class=\"bp\">←</span> <span class=\"n\">succ_eq_add_one</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">Nat.mul_sub_left_distrib</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">sq</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span>\n      <span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">Nat.mul_sub_left_distrib</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span>\n      <span class=\"bp\">←</span> <span class=\"n\">sq</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Nat.pow_succ'</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span>\n      <span class=\"n\">computation_helper_q5</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Nat.add_sub_assoc</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"bp\">←</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span>\n      <span class=\"n\">Nat.add_sub_assoc</span><span class=\"o\">,</span> <span class=\"n\">Nat.sub_self</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span>\n      <span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">le_refl</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n    <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">pow_le_pow_right</span> <span class=\"n\">hx</span>\n      <span class=\"n\">linarith</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">hx</span>\n    <span class=\"c1\">-- Modify LHS</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span>\n    <span class=\"c1\">-- Modify RHS</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span>\n      <span class=\"n\">Finset.sum_range_succ</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">add_assoc</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"bp\">←</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n      <span class=\"n\">mul_comm</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">difference_of_squares</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span> <span class=\"n\">_</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n      <span class=\"bp\">←</span> <span class=\"n\">add_assoc</span><span class=\"o\">]</span>\n    <span class=\"n\">nth_rewrite</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mul_one</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">w</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span>\n      <span class=\"bp\">←</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Nat.add_sub_assoc</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_sub_assoc</span><span class=\"o\">,</span> <span class=\"n\">Nat.sub_self</span><span class=\"o\">,</span>\n      <span class=\"n\">add_zero</span><span class=\"o\">,</span><span class=\"bp\">←</span> <span class=\"n\">pow_add</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"o\">,</span><span class=\"n\">add_comm</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">add_assoc</span>\n      <span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"n\">linarith</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">hx'</span>\n</code></pre></div>",
        "id": 420043197,
        "sender_full_name": "Alex Brodbelt",
        "timestamp": 1707224780
    },
    {
        "content": "<p>Note that there is a <code>computation_helper_q5</code> that makes your example not working, but let me try to write a cleaner proof.</p>",
        "id": 420046246,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707225830
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/113489-new-members/topic/Hacky.20induction.20-.20are.20there.20alternatives.3F/near/420046246\">said</a>:</p>\n<blockquote>\n<p>Note that there is a <code>computation_helper_q5</code> that makes your example not working, but let me try to write a cleaner proof.</p>\n</blockquote>\n<p>sorry, I have now added in computation_helper_5</p>",
        "id": 420046945,
        "sender_full_name": "Alex Brodbelt",
        "timestamp": 1707226077
    },
    {
        "content": "<p>I would prove it like this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Factorization.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Prime</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Group.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"n\">q</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">question_5</span> <span class=\"o\">(</span><span class=\"n\">nodd</span> <span class=\"o\">:</span> <span class=\"n\">Odd</span> <span class=\"n\">n</span><span class=\"o\">)(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>  <span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">nodd</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_tsub_cancel_right</span><span class=\"o\">,</span> <span class=\"n\">zero_lt_two</span><span class=\"o\">,</span> <span class=\"n\">mul_div_right</span><span class=\"o\">]</span>\n  <span class=\"n\">zify</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">]</span>\n  <span class=\"k\">calc</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">geom_sum_mul</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">ring</span>\n  <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">pow_add</span><span class=\"o\">,</span> <span class=\"n\">pow_mul</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Finset.sum_mul</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">ring</span>\n</code></pre></div>",
        "id": 420051009,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707227350
    },
    {
        "content": "<p>The point is to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=geom_sum_mul#doc\">docs#geom_sum_mul</a></p>",
        "id": 420051230,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707227411
    },
    {
        "content": "<p>Concerning your previous questions:  <code>rcases nodd with ⟨w, rfl⟩</code> is the same as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rcases</span> <span class=\"n\">nodd</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">hw</span><span class=\"o\">⟩</span>\n<span class=\"n\">subst</span> <span class=\"n\">hw</span> <span class=\"c1\">--this rewrite hw everywhere and discard it</span>\n</code></pre></div>\n<p>It is a common trick.</p>",
        "id": 420053357,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707228035
    },
    {
        "content": "<p>Note also the <code>zify [hx]</code> line, that saves you from all the pain of natural subtraction.</p>",
        "id": 420053467,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707228071
    },
    {
        "content": "<p>That would be <code>subst hm</code> without the brackets</p>",
        "id": 420053943,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1707228239
    },
    {
        "content": "<p>Ops</p>",
        "id": 420054210,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707228311
    },
    {
        "content": "<p>I also used quite a lot of <code>_</code>, that is also a standard trick: it means \"Lean, please, replace the underscore with the obvious thing\". Sometimes it works very well, sometimes no, but it is worth to try.</p>",
        "id": 420054744,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707228473
    },
    {
        "content": "<p>Wait, <code>hn : 2 ≤ n</code> is not used (the proof works without it). Why isn't the linter complaining?</p>",
        "id": 420056033,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707228893
    },
    {
        "content": "<p>Ah, <code>rlf</code> touches it</p>",
        "id": 420056142,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707228933
    },
    {
        "content": "<p>It is again <a href=\"https://github.com/leanprover/lean4/issues/2452\">this</a> issue, in some form</p>",
        "id": 420056865,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1707229128
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/113489-new-members/topic/Hacky.20induction.20-.20are.20there.20alternatives.3F/near/420054744\">said</a>:</p>\n<blockquote>\n<p>I also used quite a lot of <code>_</code>, that is also a standard trick: it means \"Lean, please, replace the underscore with the obvious thing\". Sometimes it works very well, sometimes no, but it is worth to try.</p>\n</blockquote>\n<p>Sorry, I was a bit busy with assignments and so on - thank you, all of this is very instructive to me! I will keep all of this in mind!</p>",
        "id": 422278268,
        "sender_full_name": "Alex Brodbelt",
        "timestamp": 1708362296
    }
]