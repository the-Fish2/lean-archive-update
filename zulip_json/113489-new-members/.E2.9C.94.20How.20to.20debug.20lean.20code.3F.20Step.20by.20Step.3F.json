[
    {
        "content": "<p>How to debug lean code? Step by Step? For Example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Misoriented</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">out</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n  <span class=\"n\">for</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h.2</span><span class=\"o\">⟩</span>\n    <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">!=</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">!=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n      <span class=\"n\">out</span> <span class=\"o\">:=</span> <span class=\"n\">i</span>\n      <span class=\"n\">break</span>\n    <span class=\"k\">else</span> <span class=\"n\">continue</span>\n  <span class=\"n\">out</span>\n</code></pre></div>",
        "id": 422816724,
        "sender_full_name": "chenjulang",
        "timestamp": 1708608657
    },
    {
        "content": "<p>You can debug the generated C if you are feeling like it but there is no lean level source debugger. You can get debug printing with dbg_trace in pure functions though</p>",
        "id": 422839910,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1708615442
    },
    {
        "content": "<p>How to use \"dbg_trace\"?</p>",
        "id": 422840131,
        "sender_full_name": "chenjulang",
        "timestamp": 1708615493
    },
    {
        "content": "<p>Get it</p>",
        "id": 422842257,
        "sender_full_name": "chenjulang",
        "timestamp": 1708616010
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"665035\">chenjulang</span> has marked this topic as resolved.</p>",
        "id": 422842291,
        "sender_full_name": "Notification Bot",
        "timestamp": 1708616020
    },
    {
        "content": "<p>something like this:<br>\ndef invert : List RubiksSuperType → List RubiksSuperType<br>\n  | [] =&gt; []<br>\n  | c :: cs =&gt;<br>\n      dbg_trace \"add1: {cs}\";<br>\n      invert cs ++ [c⁻¹]</p>",
        "id": 422842370,
        "sender_full_name": "chenjulang",
        "timestamp": 1708616037
    }
]