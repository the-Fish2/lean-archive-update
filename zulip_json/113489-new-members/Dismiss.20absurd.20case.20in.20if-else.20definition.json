[
    {
        "content": "<p>I have a function defined in terms of cases, where one of the cases is an absurdity. How do I dismiss the case, i.e. tell the function \"Don't worry, you won't have to evaluate that case\"?</p>",
        "id": 439253757,
        "sender_full_name": "Vivek Rajesh Joshi",
        "timestamp": 1715962218
    },
    {
        "content": "<p>Can you show some code? (read <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> for best results)</p>",
        "id": 439253931,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1715962287
    },
    {
        "content": "<p>I'm a bit hesitant to show the code because of how messy it is, but here ya go:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Notation</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">Rat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">m</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">colListofMat</span> <span class=\"o\">:=</span> <span class=\"n\">List.map</span> <span class=\"n\">List.ofFn</span> <span class=\"o\">(</span><span class=\"n\">List.ofFn</span> <span class=\"n\">M.transpose</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">list_allZero</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Rat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"n\">l.all</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">==</span><span class=\"mi\">0</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">findNonzCol</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">colListofMat</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">findIdx</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">col</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">¬</span> <span class=\"n\">list_allZero</span> <span class=\"n\">col</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">findIdx_eq_length_of_notExists</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"bp\">∈</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">l.findIdx</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">l.length</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">contrapose</span> <span class=\"n\">hl</span>\n  <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"bp\">*;</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">findIdx_le_length</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">l.findIdx</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"n\">l.length</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"bp\">∈</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"n\">exact</span> <span class=\"n\">le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">List.findIdx_lt_length_of_exists</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n  <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">exact</span> <span class=\"n\">le_of_eq</span> <span class=\"o\">(</span><span class=\"n\">findIdx_eq_length_of_notExists</span> <span class=\"n\">l</span> <span class=\"n\">p</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">findNonzCol_le_numCol</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">findNonzCol</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">colListofMat</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">findNonzCol</span>\n  <span class=\"n\">apply</span> <span class=\"n\">findIdx_le_length</span> <span class=\"o\">(</span><span class=\"n\">colListofMat</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">col</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">¬</span><span class=\"n\">list_allZero</span> <span class=\"n\">col</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">nonzListHasNonz</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">list_allZero</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"bp\">∈</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">≠</span><span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">list_allZero</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.all_eq_true</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">convert</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">findNonzCol_get_HasNonz</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">findNonzCol</span> <span class=\"n\">M</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">colListofMat</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">colListofMat</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"o\">⟨</span><span class=\"n\">findNonzCol</span> <span class=\"n\">M</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">⟩,</span> <span class=\"n\">x</span><span class=\"bp\">≠</span><span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">findNonzCol</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">List.findIdx_get</span> <span class=\"o\">(</span><span class=\"n\">w</span><span class=\"o\">:=</span><span class=\"n\">h</span><span class=\"o\">)</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Bool.not_eq_true</span><span class=\"o\">,</span> <span class=\"n\">Bool.decide_eq_false</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Bool.not_iff_not</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">hx</span><span class=\"o\">,</span><span class=\"n\">xn0</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">nonzListHasNonz</span> <span class=\"n\">this</span>\n  <span class=\"n\">use</span> <span class=\"n\">x</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">findNonzCol</span>\n  <span class=\"n\">convert</span> <span class=\"n\">hx</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n  <span class=\"n\">assumption</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">findPivot</span> <span class=\"o\">:</span> <span class=\"n\">Rat</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">findNonzCol</span> <span class=\"n\">M</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">colListofMat</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"k\">then</span> <span class=\"mi\">1</span>\n    <span class=\"k\">else</span>\n      <span class=\"k\">if</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">findNonzCol</span> <span class=\"n\">M</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">colListofMat</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"k\">then</span>\n        <span class=\"k\">let</span> <span class=\"n\">pcol</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">colListofMat</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"o\">⟨</span><span class=\"n\">findNonzCol</span> <span class=\"n\">M</span><span class=\"o\">,</span><span class=\"n\">indlt</span><span class=\"o\">⟩</span>\n        <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">pcol.findIdx</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"bp\">≠</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">pcol.length</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n          <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:=</span> <span class=\"n\">findNonzCol_get_HasNonz</span> <span class=\"n\">M</span> <span class=\"n\">h2</span>\n          <span class=\"n\">apply</span> <span class=\"n\">List.findIdx_lt_length_of_exists</span> <span class=\"n\">h4</span>\n        <span class=\"n\">pcol.get</span> <span class=\"o\">⟨</span><span class=\"n\">pcol.findIdx</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"bp\">≠</span><span class=\"mi\">0</span><span class=\"o\">),</span><span class=\"n\">h3</span><span class=\"o\">⟩</span>\n      <span class=\"k\">else</span>\n        <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:=</span> <span class=\"n\">findNonzCol_le_numCol</span> <span class=\"n\">M</span>\n        <span class=\"n\">Or.elim</span> <span class=\"o\">(</span><span class=\"n\">eq_or_lt_of_not_lt</span> <span class=\"n\">h2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">absurd</span> <span class=\"n\">h</span> <span class=\"n\">h1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">absurd</span> <span class=\"n\">h4</span> <span class=\"o\">(</span><span class=\"n\">not_le_of_gt</span> <span class=\"n\">h</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>Ignore the <code>h2</code> block. The problem lies in the <code>else</code> of the <code>h2</code> block</p>",
        "id": 439254716,
        "sender_full_name": "Vivek Rajesh Joshi",
        "timestamp": 1715962599
    },
    {
        "content": "<p><code>Or.elim</code> can only eliminate into <code>Prop</code>. Using <code>absurd</code> was the right idea though: eg  you could replace your last line with something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">nh4</span> <span class=\"o\">:=</span> <span class=\"n\">not_le.mpr</span> <span class=\"o\">(</span><span class=\"n\">lt_of_le_of_ne</span> <span class=\"o\">(</span><span class=\"n\">not_lt.mp</span> <span class=\"n\">h2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Ne.symm</span> <span class=\"n\">h1</span><span class=\"o\">))</span>\n<span class=\"n\">absurd</span> <span class=\"n\">h4</span> <span class=\"n\">nh4</span>\n</code></pre></div>",
        "id": 439258863,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1715964340
    },
    {
        "content": "<p>That works, thanks a lot!</p>",
        "id": 439259820,
        "sender_full_name": "Vivek Rajesh Joshi",
        "timestamp": 1715964786
    },
    {
        "content": "<p>Another sub-doubt, if you don't mind - how do I unfold the <code>pcol</code> definition in the goal for the <code>have h3:</code> block?</p>",
        "id": 439260349,
        "sender_full_name": "Vivek Rajesh Joshi",
        "timestamp": 1715965046
    },
    {
        "content": "<p><code>unfold pcol</code>?</p>",
        "id": 439261963,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1715965743
    },
    {
        "content": "<p><code>unknown constant 'pcol'</code></p>",
        "id": 439262022,
        "sender_full_name": "Vivek Rajesh Joshi",
        "timestamp": 1715965773
    },
    {
        "content": "<p><code>unfold_let</code>?</p>",
        "id": 439262215,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1715965854
    },
    {
        "content": "<p>Yes, that works. Thank you!</p>",
        "id": 439262500,
        "sender_full_name": "Vivek Rajesh Joshi",
        "timestamp": 1715965978
    }
]