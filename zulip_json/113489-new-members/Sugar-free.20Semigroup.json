[
    {
        "content": "<p>I'm trying to understand the core of LEAN by proving a simple theorem without additional language features. Specifically, I want to understand how <code>structure</code> unpacks into the core type theory.</p>\n<p>Here's some code using <code>struture</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">structure</span><span class=\"w\"> </span><span class=\"n\">Semigroup</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">mul</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">mul_assoc</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">mul</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">mul</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">mul</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">mul</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">))</span>\n\n<span class=\"bp\">#</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">Eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">unique_identity</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Semigroup</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">eL</span><span class=\"w\"> </span><span class=\"n\">eR</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">hL</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">mul</span><span class=\"w\"> </span><span class=\"n\">eL</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">hR</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">mul</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">eR</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"n\">eR</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">eL</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">eR</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">mul</span><span class=\"w\"> </span><span class=\"n\">eL</span><span class=\"w\"> </span><span class=\"n\">eR</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">Eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hL</span><span class=\"w\"> </span><span class=\"n\">eR</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">mul</span><span class=\"w\"> </span><span class=\"n\">eL</span><span class=\"w\"> </span><span class=\"n\">eR</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">eL</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">hR</span><span class=\"w\"> </span><span class=\"n\">eL</span>\n<span class=\"w\">  </span><span class=\"n\">Eq</span><span class=\"bp\">.</span><span class=\"n\">trans</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span>\n</code></pre></div>\n<p>I would like to understand what is actually going on when I prove <code>unique_identity</code>. As far as my understanding goes:</p>\n<ol>\n<li><code>structure</code> is desugared somehow into a term of the core type theory</li>\n<li>The theorem <code>unique_identity</code> is similarly transformed into a term $t$</li>\n<li>$t$ is type-checked</li>\n</ol>\n<p>And if (3) succeeds, the theorem is proven. But I don't understand what the term $t$ actually looks like. What does the <code>structure Semigroup</code> desugar to? What about the <code>unique_identity</code> theorem?</p>",
        "id": 444992946,
        "sender_full_name": "Paul Wilson",
        "timestamp": 1718555733
    },
    {
        "content": "<p>A structure declaration is not desugared to the declaration of a term in the same way as <code>def</code> or <code>theorem</code>. Instead, it is desugared to an instance of the <code>inductive</code> command</p>",
        "id": 444997585,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1718558629
    },
    {
        "content": "<p>The <code>theorem unique_identity</code> is however the declaration of a plain term, and you can see what it looks like using <code>#print</code> but it's pretty much exactly what you wrote</p>",
        "id": 444997719,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1718558693
    },
    {
        "content": "<p>Isn't the <code>inductive</code> machinery also sugar for something?</p>",
        "id": 444999209,
        "sender_full_name": "Paul Wilson",
        "timestamp": 1718559579
    },
    {
        "content": "<p>I would have guessed that semigroup is church encoded (or something like that), but I don't quite see how that would look</p>",
        "id": 444999544,
        "sender_full_name": "Paul Wilson",
        "timestamp": 1718559766
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Sugar-free.20Semigroup/near/444997719\">said</a>:</p>\n<blockquote>\n<p>The <code>theorem unique_identity</code> is however the declaration of a plain term, and you can see what it looks like using <code>#print</code> but it's pretty much exactly what you wrote</p>\n</blockquote>\n<p>The problem with this is that I don't see how to actually do anything with this term without knowing how to \"unpack\" the <code>(s : Semigroup α)</code> and its associated expressions <code>s.mul</code>.</p>",
        "id": 445000735,
        "sender_full_name": "Paul Wilson",
        "timestamp": 1718560525
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"715809\">Paul Wilson</span> <a href=\"#narrow/stream/113489-new-members/topic/Sugar-free.20Semigroup/near/444999209\">said</a>:</p>\n<blockquote>\n<p>Isn't the <code>inductive</code> machinery also sugar for something?</p>\n</blockquote>\n<p>No, it's a primitive of the type system</p>",
        "id": 445001363,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1718560868
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"715809\">Paul Wilson</span> <a href=\"#narrow/stream/113489-new-members/topic/Sugar-free.20Semigroup/near/444999544\">said</a>:</p>\n<blockquote>\n<p>I would have guessed that semigroup is church encoded (or something like that), but I don't quite see how that would look</p>\n</blockquote>\n<p>Not at all. The primitive objects you get out of an inductive type are:</p>\n<ul>\n<li>The type</li>\n<li>The constructor(s)</li>\n<li>The recursor</li>\n<li>also: a computation rule relating the recursor applied to constructors</li>\n</ul>\n<p>A <code>structure</code> is sugar for an <code>inductive</code> with one constructor and one argument to that constructor for each field of the constructor, and the field projections are automatically defined using the recursor.</p>",
        "id": 445001644,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1718560997
    },
    {
        "content": "<p>You can't \"unpack\" <code>Semigroup α</code> because it is one of the primitives produced above (the type). You can unpack <code>s.mul</code>, at least in principle, by looking at <code>#print Semigroup.mul</code> and you will see it has a definition, but it will be somewhat confusing because actually lean also has primitive projections which are a form of \"built-in sugar\" for an application of the recursor, for performance reasons.</p>",
        "id": 445001947,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1718561172
    },
    {
        "content": "<p>but roughly speaking, the desugaring of your <code>Semigroup</code> definition is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">inductive</span><span class=\"w\"> </span><span class=\"n\">Semigroup</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kn\">where</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"n\">mk</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">mul</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">mul_assoc</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">mul</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">mul</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">mul</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">mul</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">))</span>\n<span class=\"w\">    </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Semigroup</span><span class=\"w\"> </span><span class=\"n\">α</span>\n\n<span class=\"c1\">-- defines:</span>\n<span class=\"bp\">#</span><span class=\"n\">print</span><span class=\"w\"> </span><span class=\"n\">Semigroup</span>\n<span class=\"bp\">#</span><span class=\"n\">print</span><span class=\"w\"> </span><span class=\"n\">Semigroup</span><span class=\"bp\">.</span><span class=\"n\">mk</span>\n<span class=\"bp\">#</span><span class=\"n\">print</span><span class=\"w\"> </span><span class=\"n\">Semigroup</span><span class=\"bp\">.</span><span class=\"n\">rec</span>\n<span class=\"c1\">-- and a computation rule:</span>\n<span class=\"kn\">example</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Type</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">motive</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Semigroup</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"kt\">Sort</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"o\">}</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">F</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">mul</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">→</span>\n<span class=\"w\">        </span><span class=\"o\">(</span><span class=\"n\">mul_assoc</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">mul</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">mul</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">mul</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">mul</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">motive</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Semigroup</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"w\"> </span><span class=\"n\">mul</span><span class=\"w\"> </span><span class=\"n\">mul_assoc</span><span class=\"o\">))</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">mul</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">mul_assoc</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">mul</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">mul</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">mul</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">mul</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"bp\">@</span><span class=\"n\">Semigroup</span><span class=\"bp\">.</span><span class=\"n\">rec</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"n\">motive</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Semigroup</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"w\"> </span><span class=\"n\">mul</span><span class=\"w\"> </span><span class=\"n\">mul_assoc</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"w\"> </span><span class=\"n\">mul</span><span class=\"w\"> </span><span class=\"n\">mul_assoc</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">rfl</span>\n\n<span class=\"kn\">noncomputable</span><span class=\"w\"> </span><span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">Semigroup</span><span class=\"bp\">.</span><span class=\"n\">mul</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Semigroup</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"bp\">→</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"n\">Semigroup</span><span class=\"bp\">.</span><span class=\"n\">rec</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">mul</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">mul</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">s</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">Semigroup</span><span class=\"bp\">.</span><span class=\"n\">mul_assoc</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Semigroup</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"bp\">∀</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">α</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">mul</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">mul</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"bp\">=</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">mul</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">mul</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span>\n<span class=\"w\">  </span><span class=\"n\">Semigroup</span><span class=\"bp\">.</span><span class=\"n\">rec</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"n\">mul_assoc</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">mul_assoc</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">s</span>\n</code></pre></div>",
        "id": 445002243,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1718561333
    },
    {
        "content": "<p>Thanks, this is really helpful, although surprising! I usually think about languages as having a fixed set of primitive operations; is it fair to say that with this core-language-plus-inductive-types, you <em>extend</em> this set of primitives? Happy to receive a pointer to some reading which explains this too.</p>",
        "id": 445005670,
        "sender_full_name": "Paul Wilson",
        "timestamp": 1718563193
    },
    {
        "content": "<p>That is one way to think about it. Another way is that <code>inductive</code> is a \"primitive schema\", which is to say an algorithm for spitting out new objects which have to satisfy some rules. You can prove the soundness of the whole schema, which makes it qualitatively different from <code>axiom</code> which is also a way of extending the system but not in a way which is generally sound, so you have to keep track of precisely which axioms are added. <code>def</code> is also a primitive schema in the same sense: it allows you to add objects to the system in a way which can be proved sound once-and-for-all</p>",
        "id": 445006558,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1718563707
    },
    {
        "content": "<p>You may find my paper <a href=\"https://github.com/digama0/lean-type-theory/releases/tag/v1.0\">#leantt</a> helpful for understanding how the rules can be defined formally</p>",
        "id": 445006614,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1718563764
    },
    {
        "content": "<p>Thanks, this helps - the paper seems to be exactly what I'm looking for too!  I notice there are slides as well- is there a recording of a talk by any chance?</p>",
        "id": 445013412,
        "sender_full_name": "Paul Wilson",
        "timestamp": 1718567704
    },
    {
        "content": "<p><a href=\"https://youtu.be/3sKrSNhSxik\">https://youtu.be/3sKrSNhSxik</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"3sKrSNhSxik\" href=\"https://youtu.be/3sKrSNhSxik\"><img src=\"https://uploads.zulipusercontent.net/924eac0b421c60eb234bae4366290dbd78c8134b/68747470733a2f2f692e7974696d672e636f6d2f76692f33734b72534e685378696b2f64656661756c742e6a7067\"></a></div>",
        "id": 445013549,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1718567810
    }
]