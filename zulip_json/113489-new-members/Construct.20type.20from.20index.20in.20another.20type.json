[
    {
        "content": "<p>I am a pretty raw beginner with Lean.  (I'm less of a beginner with Idris, and have learned a small amount of Agda as well.)  I want to do something that seems simple, but that's a little bit unusual at a beginning stage.</p>\n<p>Given an indexed type, I want to construct a similar type with a different index.  The following is an attempt at a simple proof of concept illustration.</p>\n<p>The <code>incOrganism</code> definition below increments the index of an instance of a <code>Niche k</code>, creating a new instance, of <code>Niche (1 + k)</code>.  That works.  However, I also want to be able to construct a <code>Niche k'</code> type itself, using a previous <code>Niche k</code> as a model to be (functionally) modified.  Intuitively, it seems like I ought to be able to do this in Lean, but I can't figure out the right syntax, or maybe I just don't understand the relevant concepts for Lean.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">match_pattern</span><span class=\"kd\">]</span> <span class=\"c1\">-- added because of error message on inNiche below, but I don't understand why</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Niche</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">organism</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Niche</span> <span class=\"n\">k</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"c1\">-- organism-level niche incrementation: increment an organism's niche</span>\n<span class=\"kd\">def</span> <span class=\"n\">incOrganism</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">Niche</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Niche</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">o</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Niche.organism</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Niche.organism</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"c1\">-- why can't I use succ btw?</span>\n\n\n<span class=\"c1\">-- Doesn't work.</span>\n<span class=\"sd\">/-- Generate a new niche from an old niche, incrementing the index. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">incNiche</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Niche</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Niche</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I was able to do this in Idris, so I know it's possible with dependent types in some languages.</p>\n<p>The error on the last line is \"invalid patterns, <code>k</code> is an explicit pattern variable, but it only occurs in positions that are inaccessible to pattern matching  .(Niche k)\".</p>\n<p>Why is <code>k</code> inaccessible to pattern matching?  What do I need to do to make it accessible, if that's the right question to ask?</p>\n<p>I thought that <code>incNiche</code> might need to reference <code>Type 1</code> or <code>Type 2</code> explicitly, and maybe it does, but adding in the type numbers at this stage produces additional errors that I don't understand.  I might ask about that in a followup, unless it needs to be addressed first.</p>\n<p>(I'm also curious why I had to add <code>@[match_pattern]</code> to get this far.)</p>\n<p>Thanks!  (I'm using neovim.  Wow--incredible ide functionality.  I'm sure VSCode and Emacs are at least as nice.)</p>",
        "id": 423692304,
        "sender_full_name": "mars0i",
        "timestamp": 1709066472
    },
    {
        "content": "<p>The reason you can't use <code>Nat.succ</code> is that you're writing <code>1 + k</code> rather than <code>k + 1</code>. The second is definitionally equal to <code>Nat.succ k</code></p>",
        "id": 423692677,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709066611
    },
    {
        "content": "<p>Oh!  OK, fascinating.  In Idris and Agda it's opposite--the successor corresponds to <code>1 +</code>.</p>",
        "id": 423692854,
        "sender_full_name": "mars0i",
        "timestamp": 1709066682
    },
    {
        "content": "<p>I'm not sure what <code>incNiche</code> is supposed to do, or rather what you want to us eit for</p>",
        "id": 423692965,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709066723
    },
    {
        "content": "<p>(A fundamental issue is that you can't do pattern matching on types themselves by the way.)</p>",
        "id": 423693004,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709066740
    },
    {
        "content": "<p>I also didn't preface <code>succ</code> with <code>Nat.</code>.  Not used to that yet.</p>",
        "id": 423693028,
        "sender_full_name": "mars0i",
        "timestamp": 1709066750
    },
    {
        "content": "<p>You can also write <code>k.succ</code>, which expands to <code>Nat.succ k</code> since <code>k : Nat</code></p>",
        "id": 423693109,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709066772
    },
    {
        "content": "<p>If you want a program-y reason why you can't pattern match on types, it's that they don't have a run time representation. They're erased when Lean is compiled to executable code.</p>",
        "id": 423693212,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709066820
    },
    {
        "content": "<p>A mathy reason is that type constructors aren't in general injective.</p>",
        "id": 423693295,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709066863
    },
    {
        "content": "<p>Right.  It's a weird thing I'm trying to do.  You might not want to know.  It's an experiment with the idea of using types to construct models that represent biological niches or organisms.  There's a theoretical tradition of viewing niches as types of organisms.  I'm exploring mapping the biological concept directly to a PL concept.  However, there's also a concept of \"niche construction\", which occurs when organisms modify the environment in such a way as to create new niches.  So to model that, you'd need types that can be constructed.  Which dependent types seem to allow.</p>\n<p>Oh, OK--cool re <code>k.succ</code>.  Thanks.</p>",
        "id": 423693489,
        "sender_full_name": "mars0i",
        "timestamp": 1709066949
    },
    {
        "content": "<p>Here, if you make your own \"universe\", it can be done:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Niche</span> <span class=\"n\">where</span>\n  <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Organism</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Niche.type</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Niche</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">Organism</span> <span class=\"n\">n.k</span>\n\n<span class=\"c1\">-- Make it automatic; turn a `Niche` into a type wherever it's used in a place expecting a type:</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CoeSort</span> <span class=\"n\">Niche</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Niche.type</span><span class=\"o\">⟩</span>\n\n<span class=\"c1\">-- organism-level niche incrementation: increment an organism's niche</span>\n<span class=\"kd\">def</span> <span class=\"n\">incOrganism</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">Organism</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Organism</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"c1\">-- Syntax to reuse the fields for the new type:</span>\n  <span class=\"o\">{</span><span class=\"n\">o</span> <span class=\"k\">with</span><span class=\"o\">}</span>\n\n<span class=\"c1\">-- Doesn't work.</span>\n<span class=\"sd\">/-- Generate a new niche from an old niche, incrementing the index. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">incNiche</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Niche</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Niche</span>  <span class=\"o\">:=</span>\n  <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">n.k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">incOrganism'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Niche</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">incNiche</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"n\">incOrganism</span> <span class=\"n\">o</span>\n</code></pre></div>",
        "id": 423694347,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709067252
    },
    {
        "content": "<p>The highlight is <code>incOrganism'</code>, if I am getting what you're wanting to go for.</p>",
        "id": 423694458,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709067299
    },
    {
        "content": "<p>(<code>structure</code> is like a one-constructor <code>inductive</code>, but it gives you curly brace notation and projection notation)</p>",
        "id": 423694516,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1709067324
    },
    {
        "content": "<p>Wow--thank you so much <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>.  It's very kind of you to whip that up.  I am going to have to take a little time to study it, both to learn about some of the concepts applied and to understand how it works.  Very much appreciated.</p>",
        "id": 423695103,
        "sender_full_name": "mars0i",
        "timestamp": 1709067524
    }
]