[
    {
        "content": "<p>I want to prove that the multiplication of a simple column vector and its conjugate transpose results in 1.</p>\n<p>If I do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">my_vec</span><span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"mi\">0</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">my_vec_mul_one</span><span class=\"o\">:</span> <span class=\"n\">my_vec</span><span class=\"bp\">ᴴ</span> <span class=\"bp\">*</span> <span class=\"n\">my_vec</span>  <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n   <span class=\"n\">ext</span> <span class=\"n\">i</span> <span class=\"n\">j</span>\n   <span class=\"n\">fin_cases</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">fin_cases</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">my_vec</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>I will have 1 goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"n\">case</span> <span class=\"n\">a.h.a.head.head</span>\n<span class=\"o\">(((</span><span class=\"n\">Matrix.of</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]])</span><span class=\"bp\">ᴴ</span> <span class=\"bp\">*</span> <span class=\"n\">Matrix.of</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]])</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>Following the proof state, I naturally expand the definitions and extend the last<code>simp [my_vec]</code> with <code>simp [my_vec,  Matrix.conjTranspose, Matrix.map, Matrix.of, Equiv.refl]</code> but it will give me more and more complicated proof state, and it ends up look like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"n\">case</span> <span class=\"n\">a.h.a.head.head</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">((({</span> <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"n\">invFun</span> <span class=\"o\">:=</span> <span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"n\">_</span> <span class=\"o\">}</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">↦</span>\n          <span class=\"o\">(</span><span class=\"n\">starRingEnd</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">({</span> <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"n\">invFun</span> <span class=\"o\">:=</span> <span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"n\">_</span> <span class=\"o\">}</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]]</span> <span class=\"n\">j</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">*</span>\n        <span class=\"o\">{</span> <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"n\">invFun</span> <span class=\"o\">:=</span> <span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"n\">_</span> <span class=\"o\">}</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]])</span>\n      <span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"bp\">=</span>\n  <span class=\"mi\">1</span>\n</code></pre></div>\n<p>I am wondering how to simplify matrix conjugate and matrix transpose and prove theorems like the above about them?</p>",
        "id": 417340720,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1705968728
    },
    {
        "content": "<p>You should not simplify <code>Matrix.of</code> ever</p>",
        "id": 417347125,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705971192
    },
    {
        "content": "<p>Use <code>of_apply</code> instead, which is safer</p>",
        "id": 417347206,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1705971228
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Simplify.20matrix.20conjugate.20transpose/near/417347206\">said</a>:</p>\n<blockquote>\n<p>Use <code>of_apply</code> instead, which is safer</p>\n</blockquote>\n<p>Thanks. But it still doesn't help proceed with the proof.</p>\n<p>With <code>simp [my_vec,  Matrix.conjTranspose, Matrix.map, Matrix.of_apply]</code>, I have the following proof state now.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"n\">case</span> <span class=\"n\">a.h.a.head.head</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(((</span><span class=\"n\">Matrix.of</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">starRingEnd</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Matrix.vecCons</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"n\">Matrix.of</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]])</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>(<code>Matrix.of_apply</code> didn't seem to help proceed the proof..)</p>",
        "id": 417348169,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1705971635
    },
    {
        "content": "<p>have you tried <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Matrix.mul_apply%3F#doc\">docs#Matrix.mul_apply?</a> what about something like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">my_vec_mul_one</span><span class=\"o\">:</span> <span class=\"n\">my_vec</span><span class=\"bp\">ᴴ</span> <span class=\"bp\">*</span> <span class=\"n\">my_vec</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n   <span class=\"n\">ext</span> <span class=\"n\">i</span> <span class=\"n\">j</span>\n   <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Matrix.mul_apply</span><span class=\"o\">]</span>\n   <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">my_vec</span><span class=\"o\">]</span>\n   <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 417351571,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1705973432
    },
    {
        "content": "<p>that gets you to a goal of <code>1 = OfNat.ofNat 1 i j</code> which seems pretty close</p>",
        "id": 417351660,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1705973495
    },
    {
        "content": "<p>actually this should get you all the way:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">my_vec_mul_one</span><span class=\"o\">:</span> <span class=\"n\">my_vec</span><span class=\"bp\">ᴴ</span> <span class=\"bp\">*</span> <span class=\"n\">my_vec</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n   <span class=\"n\">ext</span> <span class=\"n\">i</span> <span class=\"n\">j</span>\n   <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Subsingleton.elim</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">Matrix.mul_apply</span><span class=\"o\">]</span>\n   <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">my_vec</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 417352037,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1705973738
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"380294\">Matt Diamond</span> <a href=\"#narrow/stream/113489-new-members/topic/Simplify.20matrix.20conjugate.20transpose/near/417351571\">said</a>:</p>\n<blockquote>\n<p>have you tried <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Matrix.mul_apply%3F#doc\">docs#Matrix.mul_apply?</a> what about something like this?</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">my_vec_mul_one</span><span class=\"o\">:</span> <span class=\"n\">my_vec</span><span class=\"bp\">ᴴ</span> <span class=\"bp\">*</span> <span class=\"n\">my_vec</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n   <span class=\"n\">ext</span> <span class=\"n\">i</span> <span class=\"n\">j</span>\n   <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Matrix.mul_apply</span><span class=\"o\">]</span>\n   <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">my_vec</span><span class=\"o\">]</span>\n   <span class=\"gr\">sorry</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thanks! I indeed tried <code>Matrix.mul_apply</code>, but only after <code>fin_cases i &lt;;&gt; fin_cases j</code>. It reported a type error. But obviously I should do multiplication before break down to different cases.</p>",
        "id": 417352068,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1705973762
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"380294\">Matt Diamond</span> <a href=\"#narrow/stream/113489-new-members/topic/Simplify.20matrix.20conjugate.20transpose/near/417352037\">said</a>:</p>\n<blockquote>\n<p>actually this should get you all the way:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">my_vec_mul_one</span><span class=\"o\">:</span> <span class=\"n\">my_vec</span><span class=\"bp\">ᴴ</span> <span class=\"bp\">*</span> <span class=\"n\">my_vec</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n   <span class=\"n\">ext</span> <span class=\"n\">i</span> <span class=\"n\">j</span>\n   <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Subsingleton.elim</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">Matrix.mul_apply</span><span class=\"o\">]</span>\n   <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">my_vec</span><span class=\"o\">]</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thank you! However, for me, I have to repeat it,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">my_vec_mul_one</span><span class=\"o\">:</span> <span class=\"n\">my_vec</span><span class=\"bp\">ᴴ</span> <span class=\"bp\">*</span> <span class=\"n\">my_vec</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n   <span class=\"n\">ext</span> <span class=\"n\">i</span> <span class=\"n\">j</span>\n   <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Subsingleton.elim</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">Matrix.mul_apply</span><span class=\"o\">]</span>\n   <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">my_vec</span><span class=\"o\">]</span>\n   <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Subsingleton.elim</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">Matrix.mul_apply</span><span class=\"o\">]</span>\n   <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">my_vec</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 417352220,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1705973872
    },
    {
        "content": "<p>Hmm, maybe I typed something wrong... this is what I was working with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Notation</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Matrix</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">my_vec</span><span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"mi\">0</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">my_vec_mul_one</span><span class=\"o\">:</span> <span class=\"n\">my_vec</span><span class=\"bp\">ᴴ</span> <span class=\"bp\">*</span> <span class=\"n\">my_vec</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n   <span class=\"n\">ext</span> <span class=\"n\">i</span> <span class=\"n\">j</span>\n   <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Subsingleton.elim</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">mul_apply</span><span class=\"o\">]</span>\n   <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">my_vec</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 417352370,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1705973954
    },
    {
        "content": "<p>I didn't need to repeat anything to close the goal</p>",
        "id": 417352494,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1705974024
    },
    {
        "content": "<p>if that's not closing the goal for you, maybe your mathlib is out of date? I just put this together in the web editor</p>",
        "id": 417352707,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1705974161
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"380294\">Matt Diamond</span> <a href=\"#narrow/stream/113489-new-members/topic/Simplify.20matrix.20conjugate.20transpose/near/417352370\">said</a>:</p>\n<blockquote>\n<p>Hmm, maybe I typed something wrong... this is what I was working with:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Notation</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Matrix</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">my_vec</span><span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"mi\">0</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">my_vec_mul_one</span><span class=\"o\">:</span> <span class=\"n\">my_vec</span><span class=\"bp\">ᴴ</span> <span class=\"bp\">*</span> <span class=\"n\">my_vec</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n   <span class=\"n\">ext</span> <span class=\"n\">i</span> <span class=\"n\">j</span>\n   <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Subsingleton.elim</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">mul_apply</span><span class=\"o\">]</span>\n   <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">my_vec</span><span class=\"o\">]</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Interesting, I have the same set up except that I didn't import <code>Notation</code>. If I don't repeat it, I will still have the imaginary part left as a goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"n\">ij</span><span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">1</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">((</span><span class=\"n\">qubit_zero</span><span class=\"bp\">ᴴ</span> <span class=\"bp\">*</span> <span class=\"n\">qubit_zero</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">OfNat.ofNat</span> <span class=\"mi\">1</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">im</span>\n</code></pre></div>",
        "id": 417352759,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1705974201
    },
    {
        "content": "<p>Ah, <span class=\"user-mention silent\" data-user-id=\"380294\">Matt Diamond</span> it's about importing <code>Notation</code>. If I do that, I don't have to repeat.</p>",
        "id": 417352835,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1705974242
    },
    {
        "content": "<p>that's interesting... if I leave out the <code>Notation</code> import I get an error around <code>!![1;0]</code>... must be a difference in mathlib versions</p>",
        "id": 417352955,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1705974311
    },
    {
        "content": "<p>Actually, having <code>Notation</code> didn't solve it. It was just the Lean interpreter being slow. I still have to repeat.</p>",
        "id": 417353479,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1705974603
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/2Bpkf2__wE0hEh_FJgvMzk2i/Screenshot-2024-01-22-at-8.54.57-PM.png\">Screenshot-2024-01-22-at-8.54.57-PM.png</a><br>\nAnd Lean playground gives a more unexpected error..</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/2Bpkf2__wE0hEh_FJgvMzk2i/Screenshot-2024-01-22-at-8.54.57-PM.png\" title=\"Screenshot-2024-01-22-at-8.54.57-PM.png\"><img src=\"/user_uploads/3121/2Bpkf2__wE0hEh_FJgvMzk2i/Screenshot-2024-01-22-at-8.54.57-PM.png\"></a></div><p>(Now it works!)</p>",
        "id": 417353529,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1705974626
    },
    {
        "content": "<p>you just forgot <code>open Matrix</code></p>",
        "id": 417353702,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1705974753
    },
    {
        "content": "<p>Yes, now Lean playground works!</p>",
        "id": 417353952,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1705974937
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 417354246,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1705975114
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"380294\">Matt Diamond</span> I have a bit trouble understanding the <code>Subsingleton.elim</code> tactic you used. Is it that for <code>Fin 1</code>, there should only be 1 element in it?</p>",
        "id": 417354722,
        "sender_full_name": "Yunong Shi",
        "timestamp": 1705975377
    },
    {
        "content": "<p>Yep, are you familiar with the concept of subsingletons? I means that the type has no more than 1 possible value (it could also be empty), so we can prove that every term of the type equals every other term. <code>Fin 1</code> has a subsingleton instance because the only possible value is 0.</p>",
        "id": 417355068,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1705975618
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subsingleton#doc\">docs#Subsingleton</a></p>",
        "id": 417355284,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1705975722
    }
]